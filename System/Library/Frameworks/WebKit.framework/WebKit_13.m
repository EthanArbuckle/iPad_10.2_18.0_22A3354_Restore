_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0,void,WebCore::PrivateClickMeasurement&&,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34C3170;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0,void,WebCore::PrivateClickMeasurement&&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3170;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0,void,WebCore::PrivateClickMeasurement&&,WTF::String const&>::call(WTF *result, uint64_t a2)
{
  uint64_t v2;
  WTF *v4;
  uint64_t v5;
  void *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  int v18;
  WTF::StringImpl *v19;
  PAL::CryptoDigest *v20;
  WTF *v21;
  int v22;
  char v23;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v4 = result;
      v5 = *((_QWORD *)result + 2);
      result = (WTF *)WTF::base64Decode();
      if (v23)
      {
        PAL::CryptoDigest::create();
        PAL::CryptoDigest::addBytes();
        PAL::CryptoDigest::computeHash(v20);
        WTF::base64EncodeToString();
        result = v17;
        if (v17)
        {
          v17 = 0;
          v18 = 0;
          result = (WTF *)WTF::fastFree(result, v6);
        }
        if (*(_BYTE *)(a2 + 296))
        {
          if (WTF::equal(v19, *(const WTF::StringImpl **)(a2 + 288), v7) && *(_BYTE *)(a2 + 184))
          {
            v9 = *((unsigned __int8 *)v4 + 24);
            if (*(_BYTE *)(a2 + 176))
            {
              WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
              v10 = *(unsigned int **)(v5 + 8);
              if (v10)
              {
                do
                  v11 = __ldaxr(v10);
                while (__stlxr(v11 + 1, v10));
              }
              v12 = *((_BYTE *)v4 + 24);
              v13 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v13 = &off_1E34C3198;
              *(_QWORD *)(v13 + 8) = v10;
              *(_QWORD *)(v13 + 16) = v5;
              *(_BYTE *)(v13 + 24) = v12;
              v17 = (WTF *)v13;
              WebKit::PrivateClickMeasurementManager::getTokenPublicKey(v5, a2, v9 != 0, 0, (uint64_t *)&v17);
              if (v17)
                (*(void (**)(WTF *))(*(_QWORD *)v17 + 8))(v17);
            }
            else
            {
              WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(v5, (WebCore::PrivateClickMeasurement *)a2, v9 != 0);
            }
          }
          v14 = v19;
          v19 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v8);
            else
              *(_DWORD *)v14 -= 2;
          }
          result = v20;
          v20 = 0;
          if (result)
          {
            PAL::CryptoDigest::~CryptoDigest(result);
            result = (WTF *)WTF::fastFree(v15, v16);
          }
          if (v23)
          {
            result = v21;
            if (v21)
            {
              v21 = 0;
              v22 = 0;
              return (WTF *)WTF::fastFree(result, v8);
            }
          }
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0::operator() const(WebCore::PrivateClickMeasurement&&,WTF::String const&)::{lambda(WebCore::PrivateClickMeasurement&,WTF::String const)#1},void,WebCore::PrivateClickMeasurement&,WTF::String const>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34C3198;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0::operator() const(WebCore::PrivateClickMeasurement&&,WTF::String const&)::{lambda(WebCore::PrivateClickMeasurement&,WTF::String const)#1},void,WebCore::PrivateClickMeasurement&,WTF::String const>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3198;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0::operator() const(WebCore::PrivateClickMeasurement&&,WTF::String const&)::{lambda(WebCore::PrivateClickMeasurement&,WTF::String const)#1},void,WebCore::PrivateClickMeasurement&,WTF::String const>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  PAL::CryptoDigest *v13;
  WTF *v14;
  char v15;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v4 = result;
      v5 = *(_QWORD *)(result + 16);
      result = WTF::base64Decode();
      if (v15)
      {
        PAL::CryptoDigest::create();
        PAL::CryptoDigest::addBytes();
        PAL::CryptoDigest::computeHash(v13);
        WTF::base64EncodeToString();
        result = (uint64_t)v11;
        if (v11)
          result = WTF::fastFree(v11, v6);
        if (*(_BYTE *)(a2 + 184) && *(_BYTE *)(a2 + 176))
        {
          if (WTF::equal(v12, *(const WTF::StringImpl **)(a2 + 168), v7))
            WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(v5, (WebCore::PrivateClickMeasurement *)a2, *(_BYTE *)(v4 + 24));
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v8);
            else
              *(_DWORD *)v12 -= 2;
          }
          if (v13)
          {
            PAL::CryptoDigest::~CryptoDigest(v13);
            WTF::fastFree(v9, v10);
          }
          result = (uint64_t)v14;
          if (v14)
            return WTF::fastFree(v14, v8);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_1,void,WebCore::PrivateClickMeasurement&&,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34C31C0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_1,void,WebCore::PrivateClickMeasurement&&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C31C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequest(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_1,void,WebCore::PrivateClickMeasurement&&,WTF::String const&>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const WTF::StringImpl *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  PAL::CryptoDigest *v12;
  WTF *v13;
  char v14;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v4 = result;
      v5 = *(_QWORD *)(result + 16);
      result = WTF::base64Decode();
      if (v14)
      {
        PAL::CryptoDigest::create();
        PAL::CryptoDigest::addBytes();
        PAL::CryptoDigest::computeHash(v12);
        WTF::base64EncodeToString();
        result = (uint64_t)v10;
        if (v10)
          result = WTF::fastFree(v10, v6);
        if (*(_BYTE *)(a2 + 184))
        {
          if (*(_BYTE *)(a2 + 176) && WTF::equal(v11, *(const WTF::StringImpl **)(a2 + 168), v7))
            WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(v5, (WebCore::PrivateClickMeasurement *)a2, *(_BYTE *)(v4 + 24));
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v11 -= 2;
          }
          if (v12)
          {
            PAL::CryptoDigest::~CryptoDigest(v12);
            WTF::fastFree(v8, v9);
          }
          result = (uint64_t)v13;
          if (v13)
            return WTF::fastFree(v13, v6);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0,void,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34C31E8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0,void,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C31E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(WebCore::PrivateClickMeasurement const&,WebCore::PCM::AttributionReportEndpoint)::$_0,void,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> const&>::call(WTF::StringImpl *result, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *a2;
      if (*a2)
      {
        v4 = *(_QWORD *)(*((_QWORD *)result + 2) + 184);
        *(_DWORD *)v3 += 2;
        v7 = v3;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[Private Click Measurement] Received error: '", 46, (uint64_t *)&v7, (uint64_t)"' for ad click attribution request.", 36, &v8);
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, 2, &v8);
        v6 = v8;
        v8 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v5);
          else
            *(_DWORD *)v6 -= 2;
        }
        result = v7;
        v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests(void)::$_0,void,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C3210;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests(void)::$_0,void,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34C3210;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::WallTime *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::firePendingAttributionRequests(void)::$_0,void,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(WTF::WallTime *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;
  double *v13;
  uint64_t *v14;
  double *v15;
  uint64_t *v16;
  double v17;
  uint64_t v18;
  BOOL v19;
  _BOOL4 v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  uint64_t *v26;
  uint64_t *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t (**v35)();
  unsigned int v36;
  WTF::StringImpl *v37;
  double v38;
  double v39;
  double v40;
  unsigned int *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  _QWORD v45[40];

  v2 = *((_QWORD *)result + 2);
  if (!v2)
    return result;
  if (!*(_QWORD *)(v2 + 8))
    return result;
  v3 = *((_DWORD *)a2 + 3);
  if (!v3)
    return result;
  v4 = 0;
  v5 = *((_QWORD *)result + 1);
  v6 = *a2;
  v7 = *a2 + 312 * v3;
  v41 = (unsigned int *)(v5 + 8);
  v8 = INFINITY;
  while (1)
  {
    v9 = *(double *)(v6 + 192);
    *(double *)v45 = v9;
    v44 = *(_QWORD *)(v6 + 200);
    v10 = *(double *)(v6 + 208);
    v43 = v10;
    v42 = *(_QWORD *)(v6 + 216);
    v11 = v42;
    v12 = v44;
    if ((_BYTE)v44)
    {
      if (v10 >= v9)
        v13 = (double *)v45;
      else
        v13 = &v43;
      if (v10 >= v9)
        v14 = &v44;
      else
        v14 = &v42;
      if ((_BYTE)v42)
        v15 = v13;
      else
        v15 = (double *)v45;
      if ((_BYTE)v42)
        v16 = v14;
      else
        v16 = &v44;
      goto LABEL_20;
    }
    if ((_BYTE)v42)
    {
      v16 = &v42;
      v15 = &v43;
LABEL_20:
      v17 = *v15;
      v18 = *(unsigned __int8 *)v16;
      goto LABEL_21;
    }
    v18 = 0;
    v17 = 0.0;
LABEL_21:
    v19 = v9 < v10 || v42 == 0;
    v20 = !v19;
    if (v18 && v44 | v42)
      break;
LABEL_78:
    v6 += 312;
    if (v6 == v7)
      goto LABEL_79;
  }
  WTF::WallTime::now(result);
  if (v17 <= v21
    || *(_BYTE *)(v5 + 48)
    || (v22 = v21,
        result = (WTF::WallTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 184) + 32))(*(_QWORD *)(v5 + 184)),
        (_DWORD)result))
  {
    if ((v4 & 1) != 0)
    {
      WebKit::PrivateClickMeasurementManager::randomlyBetweenFifteenAndThirtyMinutes((WebKit::PrivateClickMeasurementManager *)v5);
      return (WTF::WallTime *)WTF::RunLoop::TimerBase::start();
    }
    v23 = *(double *)(v6 + 192);
    *(double *)v45 = v23;
    v44 = *(_QWORD *)(v6 + 200);
    v24 = *(double *)(v6 + 208);
    v43 = v24;
    v42 = *(_QWORD *)(v6 + 216);
    if ((_BYTE)v44)
    {
      if (v23 >= v24)
        v25 = (double *)v45;
      else
        v25 = &v43;
      v26 = &v42;
      if (v23 >= v24)
        v26 = &v44;
      if ((_BYTE)v42)
      {
        v27 = v26;
      }
      else
      {
        v25 = (double *)v45;
        v27 = &v44;
      }
LABEL_44:
      v28 = *v25;
      v29 = *(unsigned __int8 *)v27;
    }
    else
    {
      if ((_BYTE)v42)
      {
        v27 = &v42;
        v25 = &v43;
        goto LABEL_44;
      }
      v29 = 0;
      v28 = 0.0;
    }
    if (v12)
      v30 = v20;
    else
      v30 = v11 != 0;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 184) + 24))(*(_QWORD *)(v5 + 184)))
      v31 = *(_BYTE *)(v6 + 184) == 0;
    else
      v31 = 1;
    if (!v31)
    {
      if (*(unsigned __int8 *)(v6 + 296) | *(unsigned __int8 *)(v6 + 176))
      {
        WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v45, (const WebCore::PrivateClickMeasurement *)v6);
        if (*(_BYTE *)(v6 + 296))
        {
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v41, v5);
          v32 = *(unsigned int **)(v5 + 8);
          if (v32)
          {
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 + 1, v32));
          }
          v34 = WTF::fastMalloc((WTF *)0x20);
          v35 = &off_1E34C3170;
        }
        else
        {
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v41, v5);
          v32 = *(unsigned int **)(v5 + 8);
          if (v32)
          {
            do
              v36 = __ldaxr(v32);
            while (__stlxr(v36 + 1, v32));
          }
          v34 = WTF::fastMalloc((WTF *)0x20);
          v35 = &off_1E34C31C0;
        }
        *(_QWORD *)v34 = v35;
        *(_QWORD *)(v34 + 8) = v32;
        *(_QWORD *)(v34 + 16) = v5;
        *(_BYTE *)(v34 + 24) = v30;
        v44 = v34;
        WebKit::PrivateClickMeasurementManager::getTokenPublicKey(v5, (uint64_t)v45, v30, 0, &v44);
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v45, v37);
      }
      else
      {
        WebKit::PrivateClickMeasurementManager::fireConversionRequestImpl(v5, (WebCore::PrivateClickMeasurement *)v6, v30);
      }
    }
    result = (WTF::WallTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 184) + 24))(*(_QWORD *)(v5 + 184));
    if ((_DWORD)result)
    {
      WebKit::PrivateClickMeasurementManager::initializeStore(v5);
      result = (WTF::WallTime *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 168) + 88))(*(_QWORD *)(v5 + 168), v6, v30);
    }
    if (v29)
    {
      WTF::WallTime::now(result);
      v39 = v28 - v38;
      if (v39 < 0.0)
        v39 = WebKit::PrivateClickMeasurementManager::randomlyBetweenFifteenAndThirtyMinutes((WebKit::PrivateClickMeasurementManager *)v5);
      result = (WTF::WallTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 184) + 32))(*(_QWORD *)(v5 + 184));
      if (v39 >= v8)
        v40 = v8;
      else
        v40 = v39;
      if ((_DWORD)result)
        v8 = 10.0;
      else
        v8 = v40;
    }
    v4 = 1;
    goto LABEL_78;
  }
  if (v17 - v22 < v8)
    v8 = v17 - v22;
LABEL_79:
  if (v8 >= INFINITY)
    return result;
  return (WTF::WallTime *)WTF::RunLoop::TimerBase::start();
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::destroyStoreForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C3238;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::destroyStoreForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C3238;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateClickMeasurementManager::destroyStoreForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(unsigned int **)(v3 + 168);
      *(_QWORD *)(v3 + 168) = 0;
      if (v4)
      {
        v5 = v4 + 2;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v4 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
        }
      }
    }
  }
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

unsigned int *WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>(unsigned int *a1, uint64_t *a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  int *v7;
  size_t v8;
  int v10;
  int __src;
  char v12;

  v2 = a1;
  v3 = *a2;
  if (*a2)
  {
    v5 = (*(_DWORD *)(v3 + 16) >> 2) & 1;
    __src = *(_DWORD *)(v3 + 4);
    WebKit::Daemon::Encoder::encodeFixedLengthData(a1, &__src, 4uLL);
    v12 = v5;
    WebKit::Daemon::Encoder::encodeFixedLengthData(v2, &v12, 1uLL);
    v6 = *a2;
    if (v5)
    {
      if (v6)
      {
        v7 = *(int **)(v6 + 8);
        v8 = *(unsigned int *)(v6 + 4);
        goto LABEL_8;
      }
    }
    else if (v6)
    {
      v7 = *(int **)(v6 + 8);
      v8 = 2 * *(unsigned int *)(v6 + 4);
LABEL_8:
      a1 = v2;
      return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v7, v8);
    }
    v7 = 0;
    v8 = 0;
    goto LABEL_8;
  }
  v10 = -1;
  v7 = &v10;
  v8 = 4;
  return WebKit::Daemon::Encoder::encodeFixedLengthData(a1, v7, v8);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo17storeUnattributedEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C3260;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo17storeUnattributedEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3260;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo17storeUnattributedEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  if (v4)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

WTF::StringImpl *WebKit::Daemon::Coder<WTF::URL,void>::decode<WebKit::Daemon::Decoder>(_BYTE *a1, uint64_t *a2, unsigned __int8 **a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6[5];
  WTF::StringImpl *v7;
  char v8;

  LOBYTE(v7) = 0;
  v8 = 0;
  result = (WTF::StringImpl *)WebKit::Daemon::Decoder::operator>><WTF::String>(a2, (uint64_t)&v7, a3);
  if (v8)
  {
    MEMORY[0x19AEABB0C](v6, &v7, 0);
    WTF::URL::URL((uint64_t)a1, (uint64_t *)v6);
    a1[40] = 1;
    result = v6[0];
    v6[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
    if (v8)
    {
      result = v7;
      v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[40] = 0;
  }
  return result;
}

uint64_t *WebKit::Daemon::Decoder::operator>><WTF::String>(uint64_t *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  char v9;

  WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>(a1, a3, (uint64_t)&v8);
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(a2, (uint64_t)&v8);
  if (v9)
  {
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t *WebKit::Daemon::Coder<WTF::String,void>::decode<WebKit::Daemon::Decoder>@<X0>(uint64_t *result@<X0>, unsigned __int8 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;

  v4 = result[1];
  v3 = result[2];
  if ((unint64_t)(v4 - v3) <= 3)
    goto LABEL_4;
  v5 = *result;
  v6 = (WTF::StringImpl *)*(unsigned int *)(*result + v3);
  v7 = v3 + 4;
  result[2] = v3 + 4;
  if ((_DWORD)v6 == -1)
  {
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 1;
  }
  else
  {
    if (v4 == v7)
    {
LABEL_4:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 0;
      return result;
    }
    v8 = *(unsigned __int8 *)(v5 + v7);
    result[2] = v3 + 5;
    if (v8)
      return WebKit::Daemon::Coder<WTF::String,void>::decodeStringText<unsigned char,WebKit::Daemon::Decoder>(v6, result, a2, a3);
    else
      return (uint64_t *)WebKit::Daemon::Coder<WTF::String,void>::decodeStringText<char16_t,WebKit::Daemon::Decoder>((uint64_t)result, v6, a3);
  }
  return result;
}

_QWORD *WebKit::Daemon::Coder<WTF::String,void>::decodeStringText<unsigned char,WebKit::Daemon::Decoder>@<X0>(WTF::StringImpl *this@<X1>, _QWORD *result@<X0>, unsigned __int8 **a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  size_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  void *__dst[2];

  if (result[1] - result[2] >= (unint64_t)this)
  {
    v5 = result;
    v6 = this;
    __dst[0] = 0;
    result = (_QWORD *)WTF::StringImpl::createUninitialized((WTF::StringImpl *)this, (uint64_t)__dst, a3);
    v8 = (WTF::StringImpl *)__dst[1];
    v9 = v5[2];
    if (v5[1] - v9 >= v6)
    {
      result = memcpy(__dst[0], (const void *)(*v5 + v9), v6);
      v5[2] += v6;
      *(_QWORD *)a4 = v8;
      *(_BYTE *)(a4 + 8) = 1;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 8) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          return (_QWORD *)WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 0;
  }
  return result;
}

uint64_t WebKit::Daemon::Coder<WTF::String,void>::decodeStringText<char16_t,WebKit::Daemon::Decoder>@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  size_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  if (*(_QWORD *)(result + 8) - *(_QWORD *)(result + 16) >= 2 * (unint64_t)a2)
  {
    v4 = (_QWORD *)result;
    v5 = 2 * a2;
    result = WTF::StringImpl::createUninitialized();
    v7 = v4[2];
    if (v4[1] - v7 >= v5)
    {
      result = (uint64_t)memcpy(0, (const void *)(*v4 + v7), v5);
      v4[2] += v5;
      *(_QWORD *)a3 = v8;
      *(_BYTE *)(a3 + 8) = 1;
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          return WTF::StringImpl::destroy(v8, v6);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
  }
  return result;
}

_QWORD *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,WebCore::PCM::AttributionTriggerData,WTF::URL,WebCore::RegistrableDomain,WTF::URL,WTF::String>::~__tuple_impl(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)a1[27];
  a1[27] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[22];
  a1[22] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[21];
  a1[21] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[16];
  a1[16] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 12), a2);
  std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 7), v7);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 5), v8);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 3), v9);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 1), v10);
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo5clearEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C3288;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo5clearEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3288;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo5clearEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  if (v4)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo25clearForRegistrableDomainEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C32B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo25clearForRegistrableDomainEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C32B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo25clearForRegistrableDomainEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  if (v4)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo18toStringForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJNS_6StringEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C32D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo18toStringForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJNS_6StringEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C32D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo18toStringForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJNS_6StringEEE4callESO_(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;

  v3 = *a2;
  if (*a2)
    *(_DWORD *)v3 += 2;
  v8 = v3;
  v11 = 0;
  v12 = 0;
  WebKit::Daemon::Coder<WTF::String,void>::encode<WebKit::Daemon::Encoder>((unsigned int *)&v11, (uint64_t *)&v8);
  v9 = v11;
  v10 = v12;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v4 + 16))(v4, &v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = v9;
  if (v9)
  {
    v9 = 0;
    LODWORD(v10) = 0;
    WTF::fastFree(v6, v5);
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebKit::Daemon::Decoder::operator>><std::tuple<WTF::URL>>(uint64_t *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  unsigned __int8 v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  unsigned __int8 v18;

  WebKit::Daemon::Coder<WTF::URL,void>::decode<WebKit::Daemon::Decoder>(&v15, a1, a3);
  v6 = v18;
  if (v18)
  {
    v7 = v15;
    v15 = 0;
    v11 = v7;
    v12 = v16;
    v13 = v17;
    v6 = 1;
  }
  else
  {
    LOBYTE(v11) = 0;
  }
  v14 = v6;
  if (*(unsigned __int8 *)(a2 + 40) != v6)
  {
    if (*(_BYTE *)(a2 + 40))
    {
      v8 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v5);
        else
          *(_DWORD *)v8 -= 2;
      }
      *(_BYTE *)(a2 + 40) = 0;
    }
    else
    {
      WTF::URL::URL(a2, (uint64_t *)&v11);
      *(_BYTE *)(a2 + 40) = 1;
    }
    goto LABEL_14;
  }
  if (*(_BYTE *)(a2 + 40))
  {
    WTF::URL::operator=(a2, (WTF::StringImpl *)&v11);
LABEL_14:
    v6 = v14;
  }
  if (v6)
  {
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v5);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::URL,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo57markAttributedPrivateClickMeasurementsAsExpiredForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C3300;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo57markAttributedPrivateClickMeasurementsAsExpiredForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3300;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo57markAttributedPrivateClickMeasurementsAsExpiredForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  if (v4)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo22destroyStoreForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C3328;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo22destroyStoreForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3328;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *_ZN3WTF6Detail15CallableWrapperIZN6WebKit3PCM25handlePCMMessageWithReplyINS3_11MessageInfo22destroyStoreForTestingEEEvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  if (v4)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE0EJRN7WebCore23PrivateClickMeasurementEEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C3350;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE0EJRN7WebCore23PrivateClickMeasurementEEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3350;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE0EJRN7WebCore23PrivateClickMeasurementEEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESP_(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t result;
  void *v5;

  v2 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v2)
    return WTF::fastFree(v2, v5);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE2EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C3378;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE2EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3378;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE2EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESM_(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t result;
  void *v5;

  v2 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v2)
    return WTF::fastFree(v2, v5);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE3EJRN7WebCore17RegistrableDomainEEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C33A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE3EJRN7WebCore17RegistrableDomainEEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C33A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE3EJRN7WebCore17RegistrableDomainEEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESP_(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t result;
  void *v5;

  v2 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v2)
    return WTF::fastFree(v2, v5);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE6EJEJNS_6StringEEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C33C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE6EJEJNS_6StringEEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C33C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE6EJEJNS_6StringEEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESN_(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10[3];
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;

  v3 = *(WTF **)a2;
  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v10[0] = (uint64_t)v3;
  v10[1] = v4;
  v10[2] = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34BEFD8;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v5[1] = v6;
  LOBYTE(v12) = 0;
  v13 = 0;
  WebKit::Daemon::Decoder::operator>><WTF::String>(v10, (uint64_t)&v12, v7);
  if (v13)
  {
    (*(void (**)(_QWORD *, WTF::StringImpl **))(*v5 + 16))(v5, &v12);
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  }
  else
  {
    v11 = 0;
    (*(void (**)(_QWORD *, WTF::StringImpl **))(*v5 + 16))(v5, &v11);
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (!v13 || (result = v12, v12 = 0, !result))
  {
LABEL_11:
    if (!v3)
      return result;
    return (WTF::StringImpl *)WTF::fastFree(v3, v9);
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_11;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  if (!v3)
    return result;
  return (WTF::StringImpl *)WTF::fastFree(v3, v9);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE12EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C33F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE12EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C33F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE12EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESM_(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t result;
  void *v5;

  v2 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v2)
    return WTF::fastFree(v2, v5);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE16EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C3418;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE16EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3418;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNK6WebKit3PCM12ManagerProxy20sendMessageWithReplyILNS3_11MessageTypeE16EJEJEEEvONS_17CompletionHandlerIFvDpT1_EEEDpOT0_EUlT_E_vJONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESM_(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t result;
  void *v5;

  v2 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v2)
    return WTF::fastFree(v2, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::PersistentStore(WTF::String const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E34C3440;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::PersistentStore(WTF::String const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34C3440;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::PersistentStore(WTF::String const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebKit::PCM::Database *v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (WebKit::PCM::Database *)WTF::fastMalloc((WTF *)0xD8);
  WebKit::PCM::Database::Database(v3, *(const WTF::String **)(a1 + 24));
  result = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::insertPrivateClickMeasurement(WebCore::PrivateClickMeasurement &&,WebKit::PrivateClickMeasurementAttributionType,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34C3468;
  v3 = a1[43];
  a1[43] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::insertPrivateClickMeasurement(WebCore::PrivateClickMeasurement &&,WebKit::PrivateClickMeasurementAttributionType,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = off_1E34C3468;
  v3 = a1[43];
  a1[43] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::insertPrivateClickMeasurement(WebCore::PrivateClickMeasurement &&,WebKit::PrivateClickMeasurementAttributionType,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::RunLoop *v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (v2)
    WebKit::PCM::Database::insertPrivateClickMeasurement(v2, a1 + 24, *(unsigned __int8 *)(a1 + 336));
  v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, (uint64_t *)(a1 + 344));
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::markAllUnattributedPrivateClickMeasurementAsExpiredForTesting(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C3490;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::markAllUnattributedPrivateClickMeasurementAsExpiredForTesting(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C3490;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::markAllUnattributedPrivateClickMeasurementAsExpiredForTesting(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v4;
  uint8_t buf[4];
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (v1)
  {
    WebKit::DatabaseUtilities::scopedStatement(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), (WebCore::SQLiteStatement **)(v1 + 104), (uint64_t)"markAllUnattributedPrivateClickMeasurementAsExpiredForTesting", (WebCore::SQLiteStatementAutoResetScope *)&v4);
    if (!v4 || WebCore::SQLiteStatement::step(v4) != 101)
    {
      v2 = qword_1ECE715F0;
      if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
      {
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v1 + 16));
        *(_DWORD *)buf = 134218243;
        v6 = v1;
        v7 = 2081;
        v8 = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - Database::markAllUnattributedPrivateClickMeasurementAsExpiredForTesting, error message: %{private}s", buf, 0x16u);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v4);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34C34B8;
  WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WebCore::PCM::AttributionDestinationSite &::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C34B8;
  WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WebCore::PCM::AttributionDestinationSite &::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebCore::SQLiteStatement **v3;
  unsigned int v4;
  unsigned int v5;
  NSObject *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::RunLoop *v16;
  unsigned int *result;
  NSObject *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  NSObject *v28;
  NSObject *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  unint64_t v34;
  NSObject *v35;
  char v36;
  char v37;
  char v38;
  NSObject *v39;
  uint64_t *v40;
  WTF::StringImpl *v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  NSObject *v61;
  uint64_t *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  NSObject *v68;
  uint64_t *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  uint64_t ErrorMsg;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  _BYTE v83[7];
  uint64_t v84;
  uint64_t v85;
  WebCore::SQLiteStatement *v86;
  WebCore::SQLiteStatement *v87;
  _BYTE buf[32];
  uint64_t v89;
  _QWORD v90[2];
  uint64_t v91;
  char v92;
  _BYTE v93[312];
  char v94;
  WebCore::SQLiteStatement *v95;
  WTF::StringImpl *v96;
  char v97;
  char v98;
  _BYTE v99[32];
  char v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(WebCore::SQLiteStatement ***)(v2 + 16);
  if (!v3)
  {
    v15 = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = 0;
    v16 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v16 = &off_1E34C34E0;
    *((_QWORD *)v16 + 1) = v15;
    *(_QWORD *)buf = v16;
    WTF::RunLoop::main(v16);
    WTF::RunLoop::dispatch();
    result = *(unsigned int **)buf;
    *(_QWORD *)buf = 0;
    if (result)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    return result;
  }
  WebKit::PCM::Database::clearExpiredPrivateClickMeasurement(*(WebCore::SQLiteStatement ***)(v2 + 16));
  v4 = *(unsigned __int8 *)(a1 + 48);
  if (v4 > 0xF || (v5 = *(unsigned __int8 *)(a1 + 49), v5 >= 0x40))
  {
    v18 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_INFO, "Got an invalid attribution.", buf, 2u);
    }
    LOBYTE(v95) = 2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = WTF::fastMalloc((WTF *)0x10);
    v21 = v19;
    *(_BYTE *)v19 = (_BYTE)v95;
    v22 = v96;
    if (v96)
      *(_DWORD *)v96 += 2;
    *(_QWORD *)(v19 + 8) = v22;
    v99[0] = 0;
    v100 = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v101 = v19;
    v102 = 0x100000001;
    WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)buf, v20);
    v24 = v96;
    v96 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    *(_OWORD *)buf = *(_OWORD *)v99;
    *(_OWORD *)&buf[16] = *(_OWORD *)&v99[16];
    LOBYTE(v89) = v100;
    v45 = v21 + 16;
LABEL_74:
    while (1)
    {
      LOBYTE(v95) = *(_BYTE *)v21;
      v47 = v21 + 8;
      WTF::String::isolatedCopy();
      *(_BYTE *)v21 = (_BYTE)v95;
      v49 = v96;
      v96 = 0;
      v50 = *(WTF::StringImpl **)(v21 + 8);
      *(_QWORD *)(v21 + 8) = v49;
      if (v50)
      {
        v51 = *(_DWORD *)v50 - 2;
        if (*(_DWORD *)v50 != 2)
          goto LABEL_78;
        WTF::StringImpl::destroy(v50, v48);
        v50 = v96;
        v96 = 0;
        if (v50)
          break;
      }
LABEL_79:
      v21 += 16;
      if (v47 + 8 >= v45)
      {
        v21 = v101;
        v46 = HIDWORD(v102);
        goto LABEL_82;
      }
    }
    v51 = *(_DWORD *)v50 - 2;
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::destroy(v50, v52);
      goto LABEL_79;
    }
LABEL_78:
    *(_DWORD *)v50 = v51;
    goto LABEL_79;
  }
  v84 = 0;
  v85 = 0;
  v6 = qword_1ECE715F0;
  if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v5;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_INFO, "Got an attribution with attribution trigger data: %u and priority: %u.", buf, 0xEu);
  }
  buf[0] = 4;
  WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(&buf[8], "[Private Click Measurement] Got an attribution with attribution trigger data: '", 80, v4, v5, "'.", 3);
  v7 = WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v84, 1uLL, (unint64_t)buf);
  v9 = HIDWORD(v85);
  v10 = v84;
  v11 = v84 + 16 * HIDWORD(v85);
  *(_BYTE *)v11 = *(_BYTE *)v7;
  v12 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v11 + 8) = v12;
  v13 = (v9 + 1);
  HIDWORD(v85) = v9 + 1;
  v14 = *(WTF::StringImpl **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  v25 = WebKit::PCM::Database::domainID(v3, (const WebCore::RegistrableDomain *)(a1 + 24));
  v26 = WebKit::PCM::Database::domainID(v3, (const WebCore::RegistrableDomain *)(a1 + 32));
  if (!HIDWORD(v25) || !HIDWORD(v26))
  {
    buf[0] = 0;
    v92 = 0;
    v93[0] = 0;
    v94 = 0;
LABEL_63:
    v99[0] = 0;
    v100 = 0;
    v84 = 0;
    v101 = v10;
LABEL_64:
    v44 = v85;
    v85 = 0;
    v102 = __PAIR64__(v13, v44);
    goto LABEL_65;
  }
  v82 = v10;
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)v3, v3 + 14, (uint64_t)"findPrivateClickMeasurement", (WebCore::SQLiteStatementAutoResetScope *)&v87);
  if (!v87
    || WebCore::SQLiteStatement::bindInt(v87)
    || WebCore::SQLiteStatement::bindInt(v87)
    || WebCore::SQLiteStatement::bindText())
  {
    v28 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v3 + 2));
      *(_DWORD *)buf = 134218243;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v28, OS_LOG_TYPE_ERROR, "%p - Database::findPrivateClickMeasurement findUnattributedQuery, error message: %{private}s", buf, 0x16u);
    }
  }
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)v3, v3 + 15, (uint64_t)"findPrivateClickMeasurement", (WebCore::SQLiteStatementAutoResetScope *)&v86);
  if (!v86
    || WebCore::SQLiteStatement::bindInt(v86)
    || WebCore::SQLiteStatement::bindInt(v86)
    || WebCore::SQLiteStatement::bindText())
  {
    v29 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      v76 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v3 + 2));
      *(_DWORD *)buf = 134218243;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v76;
      _os_log_error_impl(&dword_196BCC000, v29, OS_LOG_TYPE_ERROR, "%p - Database::findPrivateClickMeasurement findAttributedQuery, error message: %{private}s", buf, 0x16u);
    }
  }
  v99[0] = 0;
  v103 = 0;
  if (WebCore::SQLiteStatement::step(v87) == 100)
  {
    WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase(v87, (uint64_t)v3, 0, (uint64_t)buf);
    std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>((uint64_t)v99, (uint64_t)buf);
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v30);
  }
  LOBYTE(v95) = 0;
  v98 = 0;
  if (WebCore::SQLiteStatement::step(v86) == 100)
  {
    WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase(v86, (uint64_t)v3, 1, (uint64_t)buf);
    std::optional<WebCore::PrivateClickMeasurement>::operator=[abi:sn180100]<WebCore::PrivateClickMeasurement,void>((uint64_t)&v95, (uint64_t)buf);
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v32);
  }
  buf[0] = 0;
  v92 = 0;
  v10 = v82;
  if (v103)
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, (const WebCore::PrivateClickMeasurement *)v99);
    v92 = 1;
  }
  v93[0] = 0;
  v94 = 0;
  if (v98)
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v93, (const WebCore::PrivateClickMeasurement *)&v95);
    v94 = 1;
    if (v98)
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v95, v31);
  }
  if (v103)
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v99, v31);
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v86);
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v87);
  if (!v92)
  {
    if (v94
      && (WebCore::PrivateClickMeasurement::hasPreviouslyBeenReported((WebCore::PrivateClickMeasurement *)v93) & 1) == 0)
    {
      if (!v94)
        goto LABEL_122;
      WebCore::PrivateClickMeasurement::attributeAndGetEarliestTimeToSend();
      if ((_BYTE)v96 && v97)
      {
        if (!v94)
          goto LABEL_121;
        WebKit::PCM::Database::insertPrivateClickMeasurement((uint64_t)v3, (uint64_t)v93, 1);
        v61 = qword_1ECE715F0;
        if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v99 = 67109376;
          *(_DWORD *)&v99[4] = v4;
          *(_WORD *)&v99[8] = 1024;
          *(_DWORD *)&v99[10] = v5;
          _os_log_impl(&dword_196BCC000, v61, OS_LOG_TYPE_INFO, "Re-converted an ad click with a new one with attribution trigger data: %u and priority: %u because it had higher priority.", v99, 0xEu);
        }
        v99[0] = 4;
        v62 = (uint64_t *)&v99[8];
        WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(&v99[8], "[Private Click Measurement] Re-converted an ad click with a new one with attribution trigger data: '", 101, v4, v5, "'' because it had higher priority.", 35);
        if ((_DWORD)v13 == (_DWORD)v85)
        {
          v63 = (_BYTE *)WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v84, v13 + 1, (unint64_t)v99);
          LODWORD(v13) = HIDWORD(v85);
          v10 = v84;
          v64 = v84 + 16 * HIDWORD(v85);
          v62 = (uint64_t *)(v63 + 8);
          *(_BYTE *)v64 = *v63;
        }
        else
        {
          v64 = v82 + 16 * v13;
          *(_BYTE *)v64 = v99[0];
        }
        v77 = *v62;
        *v62 = 0;
        *(_QWORD *)(v64 + 8) = v77;
        LODWORD(v13) = v13 + 1;
        HIDWORD(v85) = v13;
        v78 = *(WTF::StringImpl **)&v99[8];
        *(_QWORD *)&v99[8] = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
            WTF::StringImpl::destroy(v78, v27);
          else
            *(_DWORD *)v78 -= 2;
        }
      }
    }
    goto LABEL_63;
  }
  v33 = WebKit::PCM::Database::domainID(v3, (const WebCore::RegistrableDomain *)&buf[8]);
  v34 = WebKit::PCM::Database::domainID(v3, (const WebCore::RegistrableDomain *)&buf[16]);
  if (HIDWORD(v33) && HIDWORD(v34))
  {
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v3, v3 + 16, (uint64_t)"removeUnattributed", (WebCore::SQLiteStatementAutoResetScope *)&v95);
    if (!v95
      || WebCore::SQLiteStatement::bindInt(v95)
      || WebCore::SQLiteStatement::bindInt(v95)
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::step(v95) != 101)
    {
      v35 = qword_1ECE715F0;
      if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
      {
        v79 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v3 + 2));
        *(_DWORD *)v99 = 134218243;
        *(_QWORD *)&v99[4] = v3;
        *(_WORD *)&v99[12] = 2081;
        *(_QWORD *)&v99[14] = v79;
        _os_log_error_impl(&dword_196BCC000, v35, OS_LOG_TYPE_ERROR, "%p - Database::removeUnattributed, error message: %{private}s", v99, 0x16u);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v95);
  }
  if (!v92)
    goto LABEL_122;
  WebCore::PrivateClickMeasurement::attributeAndGetEarliestTimeToSend();
  LODWORD(v95) = *(_DWORD *)&v99[1];
  *(_DWORD *)((char *)&v95 + 3) = *(_DWORD *)&v99[4];
  v36 = v99[8];
  LODWORD(v87) = *(_DWORD *)&v99[9];
  *(_DWORD *)((char *)&v87 + 3) = *(_DWORD *)&v99[12];
  v37 = v99[16];
  LODWORD(v86) = *(_DWORD *)&v99[17];
  *(_DWORD *)((char *)&v86 + 3) = *(_DWORD *)&v99[20];
  v38 = v99[24];
  *(_DWORD *)&v83[3] = *(_DWORD *)&v99[28];
  *(_DWORD *)v83 = *(_DWORD *)&v99[25];
  if (!v99[8] || !v99[24])
  {
    v99[0] = 0;
    v100 = 0;
    v84 = 0;
    v101 = v82;
    goto LABEL_64;
  }
  v81 = v99[0];
  v39 = qword_1ECE715F0;
  if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v99 = 67109376;
    *(_DWORD *)&v99[4] = v4;
    *(_WORD *)&v99[8] = 1024;
    *(_DWORD *)&v99[10] = v5;
    _os_log_impl(&dword_196BCC000, v39, OS_LOG_TYPE_INFO, "Converted a stored ad click with attribution trigger data: %u and priority: %u.", v99, 0xEu);
  }
  v99[0] = 4;
  v40 = (uint64_t *)&v99[8];
  WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(&v99[8], "[Private Click Measurement] Converted a stored ad click with attribution trigger data: '", 89, v4, v5, "'.", 3);
  if ((_DWORD)v13 == (_DWORD)v85)
  {
    v42 = (_BYTE *)WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v84, v13 + 1, (unint64_t)v99);
    LODWORD(v13) = HIDWORD(v85);
    v82 = v84;
    v43 = v84 + 16 * HIDWORD(v85);
    v40 = (uint64_t *)(v42 + 8);
    *(_BYTE *)v43 = *v42;
  }
  else
  {
    v43 = v82 + 16 * v13;
    *(_BYTE *)v43 = v99[0];
  }
  v65 = *v40;
  *v40 = 0;
  *(_QWORD *)(v43 + 8) = v65;
  v66 = (v13 + 1);
  HIDWORD(v85) = v13 + 1;
  v67 = *(WTF::StringImpl **)&v99[8];
  *(_QWORD *)&v99[8] = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v41);
    else
      *(_DWORD *)v67 -= 2;
  }
  if (!v94)
  {
LABEL_105:
    if (v92)
    {
      WebKit::PCM::Database::insertPrivateClickMeasurement((uint64_t)v3, (uint64_t)buf, 1);
      v68 = qword_1ECE715F0;
      if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v99 = 67109376;
        *(_DWORD *)&v99[4] = v4;
        *(_WORD *)&v99[8] = 1024;
        *(_DWORD *)&v99[10] = v5;
        _os_log_impl(&dword_196BCC000, v68, OS_LOG_TYPE_INFO, "Replaced a previously converted ad click with a new one with attribution data: %u and priority: %u because it had higher priority.", v99, 0xEu);
      }
      v99[0] = 4;
      v69 = (uint64_t *)&v99[8];
      WTF::makeString<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(&v99[8], "[Private Click Measurement] Replaced a previously converted ad click with a new one with attribution trigger data: '", 117, v4, v5, "' because it had higher priority.", 34);
      if ((_DWORD)v66 == (_DWORD)v85)
      {
        v70 = (_BYTE *)WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v84, v66 + 1, (unint64_t)v99);
        LODWORD(v66) = HIDWORD(v85);
        v82 = v84;
        v71 = v84 + 16 * HIDWORD(v85);
        v69 = (uint64_t *)(v70 + 8);
        *(_BYTE *)v71 = *v70;
      }
      else
      {
        v71 = v82 + 16 * v66;
        *(_BYTE *)v71 = v99[0];
      }
      v72 = *v69;
      *v69 = 0;
      *(_QWORD *)(v71 + 8) = v72;
      LODWORD(v66) = v66 + 1;
      v73 = *(WTF::StringImpl **)&v99[8];
      *(_QWORD *)&v99[8] = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
          WTF::StringImpl::destroy(v73, v27);
        else
          *(_DWORD *)v73 -= 2;
      }
      goto LABEL_115;
    }
LABEL_121:
    __break(1u);
  }
  if (!v92)
  {
LABEL_122:
    v80 = std::__throw_bad_optional_access[abi:sn180100]();
    return (unsigned int *)WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v80);
  }
  if (WebCore::PrivateClickMeasurement::hasHigherPriorityThan((WebCore::PrivateClickMeasurement *)buf, (const WebCore::PrivateClickMeasurement *)v93))goto LABEL_105;
LABEL_115:
  v99[0] = v81;
  *(_DWORD *)&v99[1] = (_DWORD)v95;
  *(_DWORD *)&v99[4] = *(_DWORD *)((char *)&v95 + 3);
  v99[8] = v36;
  *(_DWORD *)&v99[9] = (_DWORD)v87;
  *(_DWORD *)&v99[12] = *(_DWORD *)((char *)&v87 + 3);
  v99[16] = v37;
  *(_DWORD *)&v99[17] = (_DWORD)v86;
  *(_DWORD *)&v99[20] = *(_DWORD *)((char *)&v86 + 3);
  v99[24] = v38;
  *(_DWORD *)&v99[28] = *(_DWORD *)&v83[3];
  *(_DWORD *)&v99[25] = *(_DWORD *)v83;
  v100 = 1;
  v101 = v82;
  v74 = v85;
  v84 = 0;
  v85 = 0;
  v102 = __PAIR64__(v66, v74);
LABEL_65:
  if (v94)
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v93, v27);
  if (v92)
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v27);
  WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v84, v27);
  v21 = v101;
  *(_OWORD *)buf = *(_OWORD *)v99;
  *(_OWORD *)&buf[16] = *(_OWORD *)&v99[16];
  LOBYTE(v89) = v100;
  if (HIDWORD(v102))
  {
    v45 = v101 + 16 * HIDWORD(v102);
    goto LABEL_74;
  }
  v46 = 0;
LABEL_82:
  v53 = v102;
  v102 = 0;
  v101 = 0;
  v54 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  v90[0] = v21;
  v91 = v54;
  v55 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v55 = off_1E34C3508;
  v56 = v89;
  v57 = *(_OWORD *)buf;
  *(_OWORD *)(v55 + 24) = *(_OWORD *)&buf[16];
  *(_OWORD *)(v55 + 8) = v57;
  *(_QWORD *)(v55 + 40) = v56;
  *(_QWORD *)(v55 + 48) = v21;
  v90[0] = 0;
  v90[1] = 0;
  *(_DWORD *)(v55 + 56) = v53;
  *(_DWORD *)(v55 + 60) = v46;
  *(_QWORD *)(v55 + 64) = v54;
  v84 = v55;
  WTF::RunLoop::main((WTF::RunLoop *)v55);
  WTF::RunLoop::dispatch();
  v59 = v84;
  v84 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v91 = 0;
  WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v90, v58);
  return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v101, v60);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C34E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C34E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  _QWORD v4[2];
  _BYTE v5[40];

  v5[0] = 0;
  v5[32] = 0;
  v4[0] = 0;
  v4[1] = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *, _QWORD *))(*(_QWORD *)v1 + 16))(v1, v5, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  return WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v4, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34C3508;
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a1 + 48), a2);
  return a1;
}

{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34C3508;
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::PCM::DebugInfo::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(a1 + 48), a2);
  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::attributePrivateClickMeasurement(WebCore::PCM::SourceSite &&,WebCore::PCM::AttributionDestinationSite &&,WTF::String const&,WebCore::PCM::AttributionTriggerData &&,WebCore::PrivateClickMeasurement::IsRunningLayoutTest,WTF::CompletionHandler<void ()(std::optional<WebCore::PCM::AttributionSecondsUntilSendData> &&,WebKit::PCM::DebugInfo &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8, a1 + 48);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C3530;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34C3530;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::SQLiteDatabase *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  BOOL v9;
  size_t v10;
  const char *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _WORD *v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  BOOL v27;
  int v28;
  unsigned int v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  int v36;
  unsigned int v37;
  char *v38;
  NSObject *v39;
  uint64_t v40;
  WTF::RunLoop *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t result;
  int v48;
  int32x2_t v49;
  int64x2_t v50;
  int8x16_t v51;
  int8x16_t v52;
  unsigned int v53;
  int v54;
  WTF::StringImpl *v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  _WORD *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  _BYTE *v78;
  WTF::StringImpl *v79;
  NSObject *v80;
  uint64_t ErrorMsg;
  NSObject *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WebCore::SQLiteDatabase *v90;
  WebCore::SQLiteDatabase *v91[2];
  uint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WebCore::SQLiteStatement *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  int v98;
  char v99;
  WebCore::SQLiteStatement *v100;
  _QWORD v101[2];
  unsigned int v102;
  const char *v103;
  uint64_t v104;
  _BYTE buf[308];
  uint64_t v106;

  v1 = a1;
  v106 = *MEMORY[0x1E0C80C00];
  v93 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (v2)
  {
    v3 = (WebCore::SQLiteDatabase *)(v2 + 16);
    WebCore::SQLiteDatabase::prepareStatement();
    v92 = v2;
    if (v102 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v101) != 100)
    {
      v39 = qword_1ECE715F0;
      if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
      {
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v3);
        *(_DWORD *)buf = 134218243;
        *(_QWORD *)&buf[4] = v92;
        *(_WORD *)&buf[12] = 2081;
        *(_QWORD *)&buf[14] = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v39, OS_LOG_TYPE_ERROR, "%p - Database::privateClickMeasurementToStringForTesting failed, error message: %{private}s", buf, 0x16u);
      }
      v93 = 0;
      goto LABEL_59;
    }
    if (!v102)
    {
      if (WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v101))
        goto LABEL_8;
      if (!v102)
      {
        if (!WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v101))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_59:
          if (v102 != -1)
            (*(&off_1E34C2F78 + v102))((int)buf, (WebCore::SQLiteStatement *)v101);
          goto LABEL_61;
        }
LABEL_8:
        WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 144), (uint64_t)"privateClickMeasurementToStringForTesting", (WebCore::SQLiteStatementAutoResetScope *)&v100);
        if (!v100)
        {
          v80 = qword_1ECE715F0;
          if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
          {
            v86 = WebCore::SQLiteDatabase::lastErrorMsg(v3);
            *(_DWORD *)buf = 134218243;
            *(_QWORD *)&buf[4] = v92;
            *(_WORD *)&buf[12] = 2081;
            *(_QWORD *)&buf[14] = v86;
            _os_log_error_impl(&dword_196BCC000, v80, OS_LOG_TYPE_ERROR, "%p - Database::privateClickMeasurementToStringForTesting, error message: %{private}s", buf, 0x16u);
          }
          v93 = 0;
          goto LABEL_142;
        }
        v89 = v1;
        v90 = (WebCore::SQLiteDatabase *)(v2 + 16);
        v96 = 0;
        v97 = 0;
        v98 = 0;
        v99 = 1;
        v4 = 0;
        if (WebCore::SQLiteStatement::step(v100) == 100)
        {
          v4 = 0;
          do
          {
            v5 = v4++;
            WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase(v100, v2, 0, (uint64_t)buf);
            WebKit::PCM::Database::attributionToStringForTesting((WebKit::PCM::Database *)&v95, (const WebCore::PrivateClickMeasurement *)buf);
            v6 = 0;
            v7 = v95;
            v8 = v4;
            do
            {
              ++v6;
              v9 = v8 > 9;
              v8 /= 0xAu;
            }
            while (v9);
            if (v5)
              v10 = 0;
            else
              v10 = 40;
            if (v5)
              v11 = "";
            else
              v11 = "Unattributed Private Click Measurements:";
            v12 = v97;
            if ((v97 || (v12 = v96) != 0) && (*((_BYTE *)v12 + 16) & 4) == 0
              || v95 && (*((_BYTE *)v95 + 16) & 4) == 0)
            {
              v13 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v96);
              if (v13)
              {
                if (!v5)
                {
                  v15 = 2 * v10;
                  v16 = (_WORD *)v13;
                  v17 = "Unattributed Private Click Measurements:";
                  do
                  {
                    v18 = *(unsigned __int8 *)v17++;
                    *v16++ = v18;
                    v15 -= 2;
                  }
                  while (v15);
                }
                v19 = 0;
                v20 = v13 + 2 * v10;
                do
                {
                  *(_WORD *)(v20 + 2 * v19) = aWebcorePrivate[v19];
                  ++v19;
                }
                while (v19 != 34);
                v21 = -1;
                v22 = 12;
                v23 = v4;
                do
                {
                  v24 = v21;
                  *((_BYTE *)&v103 + v22--) = (v23 % 0xA) | 0x30;
                  --v21;
                  v9 = v23 > 9;
                  v23 /= 0xAu;
                }
                while (v9);
                v25 = (_WORD *)(v20 + 68);
                if (v22 + 2 <= 13)
                {
                  v26 = v25;
                  do
                  {
                    *v26++ = buf[v24 - 3];
                    v27 = __CFADD__(v24++, 1);
                  }
                  while (!v27);
                }
                v28 = 0;
                v29 = v4;
                do
                {
                  ++v28;
                  v9 = v29 > 9;
                  v29 /= 0xAu;
                }
                while (v9);
                v30 = (char *)&v25[v28];
                *(_WORD *)v30 = 10;
                v103 = (const char *)v7;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v103, v30 + 2);
              }
            }
            else
            {
              v31 = (char *)MEMORY[0x19AEAB398](&v96);
              if (v31)
              {
                v32 = v31;
                if ((_DWORD)v10)
                  memcpy(v31, v11, v10);
                v33 = 0;
                qmemcpy(&v32[v10], "\nWebCore::PrivateClickMeasurement ", 34);
                v34 = v4;
                do
                {
                  buf[v33-- - 4] = (v34 % 0xA) | 0x30;
                  v9 = v34 > 9;
                  v34 /= 0xAu;
                }
                while (v9);
                v35 = &v32[v10 + 34];
                if (v33 + 14 <= 13)
                  memcpy(v35, &buf[v33 - 3], -v33);
                v36 = 0;
                v37 = v4;
                do
                {
                  ++v36;
                  v9 = v37 > 9;
                  v37 /= 0xAu;
                }
                while (v9);
                v38 = &v35[v36];
                *v38 = 10;
                v103 = (const char *)v7;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v103, v38 + 1);
              }
            }
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, v14);
              else
                *(_DWORD *)v7 -= 2;
            }
            WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v14);
            v2 = v92;
          }
          while (WebCore::SQLiteStatement::step(v100) == 100);
        }
        WebKit::DatabaseUtilities::scopedStatement(v2, (WebCore::SQLiteStatement **)(v2 + 136), (uint64_t)"privateClickMeasurementToStringForTesting", (WebCore::SQLiteStatementAutoResetScope *)&v95);
        if (!v95)
        {
          v82 = qword_1ECE715F0;
          if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
          {
            v87 = WebCore::SQLiteDatabase::lastErrorMsg(v90);
            *(_DWORD *)buf = 134218243;
            *(_QWORD *)&buf[4] = v92;
            *(_WORD *)&buf[12] = 2081;
            *(_QWORD *)&buf[14] = v87;
            _os_log_error_impl(&dword_196BCC000, v82, OS_LOG_TYPE_ERROR, "%p - Database::privateClickMeasurementToStringForTesting, error message: %{private}s", buf, 0x16u);
          }
          v79 = 0;
          goto LABEL_134;
        }
        if (WebCore::SQLiteStatement::step(v95) == 100)
        {
          v48 = 0;
          v49 = vdup_n_s32(v4 == 0);
          v50.i64[0] = v49.u32[0];
          v50.i64[1] = v49.u32[1];
          v51 = (int8x16_t)vdupq_n_s64(2uLL);
          v51.i64[0] = (uint64_t)"\n";
          v52 = (int8x16_t)vdupq_n_s64(1uLL);
          v52.i64[0] = (uint64_t)"";
          *(int8x16_t *)v91 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v50, 0x3FuLL)), v52, v51);
          do
          {
            if (!v48)
            {
              *(_OWORD *)buf = *(_OWORD *)v91;
              v103 = "Attributed Private Click Measurements:";
              v104 = 39;
              WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&v96, (uint64_t)buf, (uint64_t)&v103);
            }
            v53 = ++v48 + v4;
            WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase(v95, v2, 1, (uint64_t)buf);
            WebKit::PCM::Database::attributionToStringForTesting((WebKit::PCM::Database *)&v94, (const WebCore::PrivateClickMeasurement *)buf);
            v54 = 0;
            v55 = (WTF::StringImpl *)v94;
            v56 = v48 + v4;
            do
            {
              ++v54;
              v9 = v56 > 9;
              v56 /= 0xAu;
            }
            while (v9);
            if (v94)
            {
              v57 = *(_DWORD *)(v94 + 4);
              v27 = __CFADD__(v57, 1);
              v58 = v57 + 1;
              if (v27)
                v58 = -1;
            }
            else
            {
              v58 = 1;
            }
            v27 = __CFADD__(v58, v54);
            v59 = v58 + v54;
            if (v27 || v59 >= 0xFFFFFFDE)
              v60 = -1;
            else
              v60 = v59 + 34;
            if (__CFADD__(v60, v98))
              v61 = 0xFFFFFFFFLL;
            else
              v61 = (v60 + v98);
            v62 = v97;
            if ((v97 || (v62 = v96) != 0) && (*((_BYTE *)v62 + 16) & 4) == 0
              || v94 && (*(_BYTE *)(v94 + 16) & 4) == 0)
            {
              v63 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v96);
              if (v63)
              {
                for (i = 0; i != 34; ++i)
                  *(_WORD *)(v63 + 2 * i) = aWebcorePrivate[i];
                v66 = -1;
                v67 = 12;
                v68 = v48 + v4;
                do
                {
                  v69 = v66;
                  *((_BYTE *)&v103 + v67--) = (v68 % 0xA) | 0x30;
                  --v66;
                  v9 = v68 > 9;
                  v68 /= 0xAu;
                }
                while (v9);
                if (v67 + 2 <= 13)
                {
                  v70 = (_WORD *)(v63 + 68);
                  do
                  {
                    *v70++ = buf[v69 - 3];
                    v27 = __CFADD__(v69++, 1);
                  }
                  while (!v27);
                }
                v71 = 0;
                do
                {
                  ++v71;
                  v9 = v53 > 9;
                  v53 /= 0xAu;
                }
                while (v9);
                v72 = v63 + 68 + 2 * v71;
                *(_WORD *)v72 = 10;
                v103 = (const char *)v55;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v103, (char *)(v72 + 2));
              }
            }
            else
            {
              v73 = MEMORY[0x19AEAB398](&v96, v61);
              if (v73)
              {
                v74 = 0;
                qmemcpy((void *)v73, "\nWebCore::PrivateClickMeasurement ", 34);
                v75 = v48 + v4;
                do
                {
                  buf[v74-- - 4] = (v75 % 0xA) | 0x30;
                  v9 = v75 > 9;
                  v75 /= 0xAu;
                }
                while (v9);
                v76 = v73 + 34;
                if (v74 + 14 <= 13)
                  memcpy((void *)(v73 + 34), &buf[v74 - 3], -v74);
                v77 = 0;
                do
                {
                  ++v77;
                  v9 = v53 > 9;
                  v53 /= 0xAu;
                }
                while (v9);
                v78 = (_BYTE *)(v76 + v77);
                *v78 = 10;
                v103 = (const char *)v55;
                WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v103, v78 + 1);
                v2 = v92;
              }
            }
            if (v55)
            {
              if (*(_DWORD *)v55 == 2)
                WTF::StringImpl::destroy(v55, v64);
              else
                *(_DWORD *)v55 -= 2;
            }
            WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)buf, v64);
          }
          while (WebCore::SQLiteStatement::step(v95) == 100);
        }
        v79 = v96;
        if (v96)
        {
          v1 = v89;
        }
        else
        {
          WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v96);
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v96);
          v79 = v96;
          v1 = v89;
          if (!v96)
          {
LABEL_134:
            v93 = v79;
            WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v95);
            v84 = v97;
            v97 = 0;
            if (v84)
            {
              if (*(_DWORD *)v84 == 2)
                WTF::StringImpl::destroy(v84, v83);
              else
                *(_DWORD *)v84 -= 2;
            }
            v85 = v96;
            v96 = 0;
            if (v85)
            {
              if (*(_DWORD *)v85 == 2)
                WTF::StringImpl::destroy(v85, v83);
              else
                *(_DWORD *)v85 -= 2;
            }
LABEL_142:
            WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v100);
            goto LABEL_59;
          }
        }
        *(_DWORD *)v79 += 2;
        goto LABEL_134;
      }
    }
    v88 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(v88);
  }
LABEL_61:
  WTF::String::isolatedCopy();
  v40 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)&buf[8] = v40;
  v41 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v41 = &off_1E34C3558;
  *((_QWORD *)v41 + 1) = *(_QWORD *)buf;
  v42 = *(_QWORD *)&buf[8];
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *((_QWORD *)v41 + 2) = v42;
  v101[0] = v41;
  WTF::RunLoop::main(v41);
  WTF::RunLoop::dispatch();
  v44 = v101[0];
  v101[0] = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *(_QWORD *)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v43);
    else
      *(_DWORD *)v46 -= 2;
  }
  result = (uint64_t)v93;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
      return WTF::StringImpl::destroy(v93, v43);
    else
      *(_DWORD *)v93 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C3558;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C3558;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::privateClickMeasurementToStringForTesting(WTF::CompletionHandler<void ()(WTF::String)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  v2 = (uint64_t *)(a1 + 16);
  v3 = *(WTF::StringImpl **)(a1 + 8);
  if (v3)
    *(_DWORD *)v3 += 2;
  v6 = v3;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(v2, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C3580;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34C3580;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::RunLoop *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::RunLoop *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::RunLoop *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(a1 + 8);
  v18[0] = 0;
  v18[1] = 0;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    WebKit::PCM::Database::allAttributedPrivateClickMeasurement((WebKit::PCM::Database *)&v14, v3);
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v18, (WTF::StringImpl *)&v14);
    WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v4);
  }
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)v18, (uint64_t)&v14);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v16 = v5;
  v6 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = off_1E34C35A8;
  *((_QWORD *)v6 + 1) = v14;
  v7 = v15;
  v14 = 0;
  v15 = 0;
  *((_QWORD *)v6 + 2) = v7;
  v8 = v16;
  v16 = 0;
  v17 = v6;
  *((_QWORD *)v6 + 3) = v8;
  WTF::RunLoop::main(v6);
  WTF::RunLoop::dispatch();
  v10 = v17;
  v17 = 0;
  if (v10)
    (*(void (**)(WTF::RunLoop *))(*(_QWORD *)v10 + 8))(v10);
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v9);
  return WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v12);
}

uint64_t WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v4;
  WebCore::PrivateClickMeasurement *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 12);
  if (v4)
  {
    v6 = *(WebCore::PrivateClickMeasurement **)a1;
    v7 = 312 * v4;
    do
    {
      WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(v6, a2);
      v6 = (WebCore::PrivateClickMeasurement *)(v8 + 312);
      v7 -= 312;
    }
    while (v7);
  }
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  *a1 = off_1E34C35A8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34C35A8;
  v3 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::allAttributedPrivateClickMeasurement(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::PrivateClickMeasurement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::markAttributedPrivateClickMeasurementsAsExpiredForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C35D0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::markAttributedPrivateClickMeasurementsAsExpiredForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34C35D0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::markAttributedPrivateClickMeasurementsAsExpiredForTesting(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  WTF::RunLoop *v6;
  _QWORD *result;
  uint64_t ErrorMsg;
  uint64_t v9;
  _QWORD *v10;
  _BYTE v11[16];
  unsigned int v12;
  _QWORD v13[2];
  unsigned int v14;
  uint64_t v15;
  char v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1[1] + 16);
  if (!v2)
    goto LABEL_20;
  WTF::WallTime::now((WTF::WallTime *)a1);
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)v2, (uint64_t)&v15);
  WebCore::SQLiteDatabase::prepareStatement();
  WebCore::SQLiteDatabase::prepareStatement();
  if (v14 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v13))
    goto LABEL_6;
  if (v14)
  {
    v10 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurement(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(v10);
  }
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v13) != 101)
  {
LABEL_6:
    v3 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
      *(_DWORD *)buf = 134218243;
      v18 = v2;
      v19 = 2081;
      v20 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "%p - Database::markAttributedPrivateClickMeasurementsAsExpiredForTesting, error message: %{private}s", buf, 0x16u);
    }
  }
  if (v12 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v11) != 101)
  {
    v4 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      v9 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 16));
      *(_DWORD *)buf = 134218243;
      v18 = v2;
      v19 = 2081;
      v20 = v9;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - Database::markAttributedPrivateClickMeasurementsAsExpiredForTesting, error message: %{private}s", buf, 0x16u);
    }
  }
  if (v12 != -1)
    (*(&off_1E34C2F78 + v12))((int)buf, (WebCore::SQLiteStatement *)v11);
  if (v14 != -1)
    (*(&off_1E34C2F78 + v14))((int)v11, (WebCore::SQLiteStatement *)v13);
  v5 = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  }
  else if (!v15)
  {
    goto LABEL_20;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
LABEL_20:
  v6 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v13, a1 + 3);
  WTF::RunLoop::main(v6);
  WTF::RunLoop::dispatch();
  result = (_QWORD *)v13[0];
  v13[0] = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurement(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C35F8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurement(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34C35F8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurement(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::SQLiteStatement **v2;
  WTF::RunLoop *v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[16];

  v2 = *(WebCore::SQLiteStatement ***)(*(_QWORD *)(a1 + 8) + 16);
  if (v2)
  {
    v6[0] = 0;
    v6[8] = 0;
    WebKit::PCM::Database::clearPrivateClickMeasurement(v2, (const WebCore::RegistrableDomain *)v6);
  }
  v3 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v5, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v3);
  WTF::RunLoop::dispatch();
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurementForRegistrableDomain(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E34C3620;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurementForRegistrableDomain(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34C3620;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearPrivateClickMeasurementForRegistrableDomain(WebCore::RegistrableDomain &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  WebCore::SQLiteStatement **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::RunLoop *v5;
  uint64_t result;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;

  v2 = *(WebCore::SQLiteStatement ***)(a1[1] + 16);
  if (v2)
  {
    v3 = (WTF::StringImpl *)a1[3];
    if (v3)
    {
      *(_DWORD *)v3 += 2;
      v8 = v3;
      v9 = 1;
      WebKit::PCM::Database::clearPrivateClickMeasurement(v2, (const WebCore::RegistrableDomain *)&v8);
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v4);
      else
        *(_DWORD *)v3 -= 2;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      WebKit::PCM::Database::clearPrivateClickMeasurement(v2, (const WebCore::RegistrableDomain *)&v8);
    }
  }
  v5 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, a1 + 4);
  WTF::RunLoop::main(v5);
  WTF::RunLoop::dispatch();
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearExpiredPrivateClickMeasurement(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C3648;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearExpiredPrivateClickMeasurement(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C3648;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearExpiredPrivateClickMeasurement(void)::$_0,void>::call(uint64_t a1)
{
  WebCore::SQLiteStatement **v1;

  v1 = *(WebCore::SQLiteStatement ***)(*(_QWORD *)(a1 + 8) + 16);
  if (v1)
    WebKit::PCM::Database::clearExpiredPrivateClickMeasurement(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearSentAttribution(WebCore::PrivateClickMeasurement &&,WebCore::PCM::AttributionReportEndpoint)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = off_1E34C3670;
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearSentAttribution(WebCore::PrivateClickMeasurement &&,WebCore::PCM::AttributionReportEndpoint)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34C3670;
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::clearSentAttribution(WebCore::PrivateClickMeasurement &&,WebCore::PCM::AttributionReportEndpoint)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore::SQLiteStatement **v2;
  int v4;
  const WebCore::RegistrableDomain *v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  double v11;
  double v12;
  NSObject *v13;
  unint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  BOOL v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t ErrorMsg;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _BYTE v27[12];
  __int16 v28;
  uint64_t v29;
  uint8_t buf[4];
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(WebCore::SQLiteStatement ***)(v1 + 16);
  if (!v2)
    return;
  v4 = *(unsigned __int8 *)(a1 + 336);
  v5 = (const WebCore::RegistrableDomain *)(a1 + 32);
  v6 = WebKit::PCM::Database::domainID(*(WebCore::SQLiteStatement ***)(v1 + 16), (const WebCore::RegistrableDomain *)(a1 + 32));
  v7 = (unint64_t)WebKit::PCM::Database::domainID(v2, (const WebCore::RegistrableDomain *)(a1 + 40)) >> 32;
  if (HIDWORD(v6))
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    goto LABEL_22;
  }
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 21, (uint64_t)"earliestTimesToSend", (WebCore::SQLiteStatementAutoResetScope *)v27);
  if (!*(_QWORD *)v27
    || WebCore::SQLiteStatement::bindInt(*(WebCore::SQLiteStatement **)v27)
    || WebCore::SQLiteStatement::bindInt(*(WebCore::SQLiteStatement **)v27)
    || WebCore::SQLiteStatement::bindText()
    || WebCore::SQLiteStatement::step(*(WebCore::SQLiteStatement **)v27) != 100)
  {
    v13 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 2));
      *(_DWORD *)buf = 136446210;
      v31 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "Database::earliestTimesToSend, error message: %{public}s", buf, 0xCu);
    }
    v9 = 0;
    goto LABEL_20;
  }
  WebCore::SQLiteStatement::columnDouble(*(WebCore::SQLiteStatement **)v27);
  v9 = 0;
  if (v11 > 0.0)
  {
    WebCore::SQLiteStatement::columnDouble(*(WebCore::SQLiteStatement **)v27);
    v9 = 1;
  }
  WebCore::SQLiteStatement::columnDouble(*(WebCore::SQLiteStatement **)v27);
  if (v12 <= 0.0)
  {
LABEL_20:
    v10 = 0;
    goto LABEL_21;
  }
  v10 = 1;
  WebCore::SQLiteStatement::columnDouble(*(WebCore::SQLiteStatement **)v27);
LABEL_21:
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v27);
LABEL_22:
  v14 = WebKit::PCM::Database::domainID(v2, v5);
  v15 = WebKit::PCM::Database::domainID(v2, (const WebCore::RegistrableDomain *)(a1 + 40));
  v17 = *(WTF::StringImpl **)(a1 + 328);
  if (v17)
    *(_DWORD *)v17 += 2;
  if (HIDWORD(v14))
    v18 = HIDWORD(v15) == 0;
  else
    v18 = 1;
  if (v18)
    goto LABEL_29;
  if (v4)
  {
    if (!v10)
      goto LABEL_29;
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 23, (uint64_t)"markReportAsSentToDestination", (WebCore::SQLiteStatementAutoResetScope *)v27);
    if (!*(_QWORD *)v27
      || WebCore::SQLiteStatement::bindInt(*(WebCore::SQLiteStatement **)v27)
      || WebCore::SQLiteStatement::bindInt(*(WebCore::SQLiteStatement **)v27)
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::step(*(WebCore::SQLiteStatement **)v27) != 101)
    {
      v19 = qword_1ECE715F0;
      if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
      {
        v23 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 2));
        *(_DWORD *)buf = 136446210;
        v31 = v23;
        _os_log_error_impl(&dword_196BCC000, v19, OS_LOG_TYPE_ERROR, "Database::markReportAsSentToDestination, error message: %{public}s", buf, 0xCu);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v27);
    if (v9)
      goto LABEL_29;
  }
  else
  {
    if (!v9)
      goto LABEL_29;
    WebKit::DatabaseUtilities::scopedStatement((uint64_t)v2, v2 + 22, (uint64_t)"markReportAsSentToSource", (WebCore::SQLiteStatementAutoResetScope *)v27);
    if (!*(_QWORD *)v27
      || WebCore::SQLiteStatement::bindInt(*(WebCore::SQLiteStatement **)v27)
      || WebCore::SQLiteStatement::bindInt(*(WebCore::SQLiteStatement **)v27)
      || WebCore::SQLiteStatement::bindText()
      || WebCore::SQLiteStatement::step(*(WebCore::SQLiteStatement **)v27) != 101)
    {
      v20 = qword_1ECE715F0;
      if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
      {
        v25 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 2));
        *(_DWORD *)buf = 136446210;
        v31 = v25;
        _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "Database::markReportAsSentToSource, error message: %{public}s", buf, 0xCu);
      }
    }
    WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)v27);
    if (v10)
      goto LABEL_29;
  }
  WebCore::SQLiteDatabase::prepareStatement();
  if (v32 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)buf))
    goto LABEL_62;
  if (v32)
    goto LABEL_66;
  if (WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)buf))
    goto LABEL_62;
  if (v32)
    goto LABEL_66;
  if (WebCore::SQLiteStatement::bindText())
    goto LABEL_62;
  if (v32)
  {
LABEL_66:
    v26 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::close(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(v26);
    return;
  }
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)buf) != 101)
  {
LABEL_62:
    v21 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      v24 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(v2 + 2));
      *(_DWORD *)v27 = 134218243;
      *(_QWORD *)&v27[4] = v2;
      v28 = 2081;
      v29 = v24;
      _os_log_error_impl(&dword_196BCC000, v21, OS_LOG_TYPE_ERROR, "%p - Database::clearSentAttribution failed to step, error message: %{private}s", v27, 0x16u);
    }
  }
  if (v32 != -1)
    (*(&off_1E34C2F78 + v32))((int)v27, (WebCore::SQLiteStatement *)buf);
LABEL_29:
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::close(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C3698;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::close(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34C3698;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PCM::PersistentStore::close(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::RunLoop *v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  v4 = (WTF::RunLoop *)WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v6, (uint64_t *)(a1 + 24));
  WTF::RunLoop::main(v4);
  WTF::RunLoop::dispatch();
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19715398C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197153C4C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF *a12)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_197153E98(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a20, a2);
  _Unwind_Resume(a1);
}

void sub_197153F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_197153FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_197154048(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_19715426C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

void sub_197154334(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1971543F0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197154570(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21)
{
  if (a20)
    WTF::fastFree(a20, a2);
  _Unwind_Resume(exception_object);
}

void API::ResourceLoadInfo::~ResourceLoadInfo(API::ResourceLoadInfo *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  JUMPOUT(0x19AEB936CLL);
}

void sub_197154750(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1971547FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_197154B60(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22)
{
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197154EA8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_197154F98(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19715539C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19715549C(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1971555C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1971556DC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19715578C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1971558A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t API::ObjectImpl<(API::Object::Type)17>::type()
{
  return 17;
}

void sub_197155A48(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197155B7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF *a10)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask(WebKit::ServiceWorkerDownloadTask *this, void *a2)
{
  const char ***v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;

  *(_QWORD *)this = off_1E34C3738;
  *((_QWORD *)this + 69) = &unk_1E34C37B8;
  *((_QWORD *)this + 70) = &unk_1E34C37E0;
  v3 = (const char ***)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v3)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v4)
  {
    v5 = v4 + 30;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (unsigned int *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  *((_QWORD *)this + 70) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 71, a2);
  WTF::FunctionDispatcher::~FunctionDispatcher((WebKit::ServiceWorkerDownloadTask *)((char *)this + 552));
  WebKit::NetworkDataTask::~NetworkDataTask(this, v11);
}

{
  WTF *v2;
  void *v3;

  WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask(WebKit::ServiceWorkerDownloadTask *this, void *a2)
{
  WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask((WebKit::ServiceWorkerDownloadTask *)((char *)this - 552), a2);
}

{
  WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask((WebKit::ServiceWorkerDownloadTask *)((char *)this - 560), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask((WebKit::ServiceWorkerDownloadTask *)((char *)this - 552), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::ServiceWorkerDownloadTask::~ServiceWorkerDownloadTask((WebKit::ServiceWorkerDownloadTask *)((char *)this - 560), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::ServiceWorkerDownloadTask::close(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::ServiceWorkerDownloadTask *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned __int8 **v11;
  __int16 v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(this + 576);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (WebKit::ServiceWorkerDownloadTask *)this;
      ++*(_DWORD *)(v2 + 16);
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 8);
      if (v4)
        v5 = v4 - 48;
      else
        v5 = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, *(unsigned __int8 ***)(v5 + 64));
      v6 = *((_QWORD *)v3 + 75);
      if (v6)
      {
        v13 = *((_QWORD *)v3 + 75);
        LOBYTE(v6) = 1;
      }
      else
      {
        LOBYTE(v13) = 0;
      }
      v12 = 391;
      v14 = v6;
      IPC::Connection::removeMessageReceiveQueue((uint64_t)v11, (unsigned __int8 *)&v12);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      WebKit::WebSWServerToContextConnection::unregisterDownload((WebKit::WebSWServerToContextConnection *)v2, v3);
      this = *((_QWORD *)v3 + 72);
      *((_QWORD *)v3 + 72) = 0;
      if (this)
      {
        do
        {
          v8 = __ldaxr((unsigned int *)this);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)this));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)this);
          this = WTF::fastFree((WTF *)this, v7);
        }
      }
      v10 = *(_DWORD *)(v2 + 16);
      if (v10)
      {
        *(_DWORD *)(v2 + 16) = v10 - 1;
      }
      else
      {
        this = 286;
        __break(0xC471u);
      }
    }
  }
  return this;
}

uint64_t WebKit::ServiceWorkerDownloadTask::dispatch(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v4 = WebKit::sharedServiceWorkerDownloadTaskQueue((WebKit *)a1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a1 + 1);
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E34C3A80;
  v6[1] = a1;
  v6[2] = v5;
  v8 = v6;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 32))(v4, &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::sharedServiceWorkerDownloadTaskQueue(WebKit *this)
{
  uint64_t result;
  uint64_t v2;

    return WebKit::sharedServiceWorkerDownloadTaskQueue(void)::queue;
  WTF::WorkQueue::create();
  result = v2;
  WebKit::sharedServiceWorkerDownloadTaskQueue(void)::queue = v2;
  return result;
}

uint64_t `non-virtual thunk to'WebKit::ServiceWorkerDownloadTask::dispatch(uint64_t a1, uint64_t *a2)
{
  return WebKit::ServiceWorkerDownloadTask::dispatch((unsigned __int8 **)(a1 - 552), a2);
}

uint64_t WebKit::ServiceWorkerDownloadTask::cancel(unsigned __int8 **this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t *v8[3];

  v2 = WebKit::sharedServiceWorkerDownloadTaskQueue((WebKit *)this);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  v3 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  *v3 = (uint64_t)&off_1E34C3AA8;
  v3[1] = (uint64_t)this;
  v3[2] = (uint64_t)this;
  v8[0] = v3;
  (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v2 + 32))(v2, v8);
  v4 = v8[0];
  v8[0] = 0;
  if (v4)
    (*(void (**)(uint64_t *))(*v4 + 8))(v4);
  v5 = this[78];
  this[78] = 0;
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 2) - 1;
    *((_QWORD *)v5 + 2) = v6;
    if (!v6)
    {
      *(_QWORD *)(*((_QWORD *)v5 + 1) + 8) = 0;
      sandbox_extension_release();
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v5);
  }
  v8[0] = (uint64_t *)(this + 74);
  v8[1] = (uint64_t *)(this + 73);
  v8[2] = (uint64_t *)(this + 75);
  WebKit::ServiceWorkerDownloadTask::sendToServiceWorker<Messages::WebSWContextManagerConnection::CancelFetch>((uint64_t)this, v8);
  *((_DWORD *)this + 166) = 3;
  return WebKit::ServiceWorkerDownloadTask::close((uint64_t)this);
}

BOOL WebKit::ServiceWorkerDownloadTask::sendToServiceWorker<Messages::WebSWContextManagerConnection::CancelFetch>(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  unsigned __int8 **v9;

  v2 = *(_QWORD *)(a1 + 576);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8);
  if (v5)
    v6 = v5 - 48;
  else
    v6 = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, *(unsigned __int8 ***)(v6 + 64));
  v7 = IPC::Connection::send<Messages::WebSWContextManagerConnection::CancelFetch>((uint64_t)v9, a2, 0, 0, 0) == 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v9);
  return v7;
}

uint64_t WebKit::ServiceWorkerDownloadTask::resume(uint64_t this)
{
  *(_DWORD *)(this + 664) = 0;
  return this;
}

unsigned __int8 *WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3, char a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  const char ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned __int8 *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char **v21;
  uint64_t v22;
  char v23;
  WTF::StringImpl *v24;
  uint64_t v25;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v21 = 0;
    WTF::String::operator=((WTF::StringImpl **)(a1 + 120), a2);
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v21);
    if (*a3)
    {
      v8 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v8 = 1;
      v9 = *a3;
      *a3 = 0;
      *(_QWORD *)(v8 + 8) = v9;
      *(_QWORD *)(v8 + 16) = 0;
    }
    else
    {
      v8 = 0;
    }
    v10 = *(const char ****)(a1 + 624);
    *(_QWORD *)(a1 + 624) = v8;
    if (v10)
    {
      v10 = WTF::RefCounted<WebKit::SandboxExtension>::deref(v10);
      v8 = *(_QWORD *)(a1 + 624);
    }
    if (v8)
    {
      ++*(_DWORD *)v8;
      v11 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v8 + 16) = v11 + 1;
      if (!v11)
        WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v8 + 8));
      v10 = WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v8);
    }
    v12 = WebKit::sharedServiceWorkerDownloadTaskQueue((WebKit *)v10);
    v21 = (const char **)a1;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
    v22 = a1;
    v23 = a4;
    WTF::String::isolatedCopy();
    v13 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v13 = &off_1E34C3AF8;
    *(_QWORD *)(v13 + 8) = v21;
    *(_QWORD *)(v13 + 16) = v22;
    *(_BYTE *)(v13 + 24) = v23;
    v14 = v24;
    v22 = 0;
    v24 = 0;
    v25 = v13;
    *(_QWORD *)(v13 + 32) = v14;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 32))(v12, &v25);
    v16 = v25;
    v25 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    result = (unsigned __int8 *)v24;
    v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v15);
      else
        *(_DWORD *)result -= 2;
    }
    v20 = v22;
    v22 = 0;
    if (v20)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v20 + 8));
  }
  else
  {
    v18 = WebKit::sharedServiceWorkerDownloadTaskQueue((WebKit *)a1);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
    v19 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v19 = &off_1E34C3AD0;
    *(_QWORD *)(v19 + 8) = a1;
    *(_QWORD *)(v19 + 16) = a1;
    v21 = (const char **)v19;
    (*(void (**)(uint64_t, const char ***))(*(_QWORD *)v18 + 32))(v18, &v21);
    result = (unsigned __int8 *)v21;
    v21 = 0;
    if (result)
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_DWORD *WebKit::ServiceWorkerDownloadTask::didReceiveData(_DWORD *this, const IPC::SharedBufferReference *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  int v8[20];
  char v9;

  if (this[158] != -1)
  {
    v3 = (uint64_t)this;
    IPC::SharedBufferReference::span(a2);
    v4 = WTF::FileSystemImpl::writeToFile();
    if (v4 == *(_QWORD *)a2)
    {
      v5 = v4;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v3 + 8));
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v6 = &off_1E34C3B48;
      v6[1] = v3;
      v6[2] = v3;
      v6[3] = v5;
      *(_QWORD *)v8 = v6;
      WTF::callOnMainRunLoop();
      this = *(_DWORD **)v8;
      *(_QWORD *)v8 = 0;
      if (this)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
    }
    else
    {
      LOBYTE(v8[0]) = 0;
      v9 = 0;
      WebKit::ServiceWorkerDownloadTask::didFailDownload(v3, v8);
      return (_DWORD *)std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v7);
    }
  }
  return this;
}

uint64_t WebKit::ServiceWorkerDownloadTask::didFailDownload(uint64_t a1, int *a2)
{
  _QWORD *v4;
  WTF::StringImpl *v5;
  _QWORD *v6;
  uint64_t v8[11];
  _QWORD *v9;

  if (*(_DWORD *)(a1 + 632) != -1)
  {
    WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)(a1 + 632), a2);
    *(_DWORD *)(a1 + 632) = -1;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
  WTF::CrossThreadCopierBase<false,false,std::optional<WebCore::ResourceError>>::copy<std::optional<WebCore::ResourceError>>((WebCore::ResourceErrorBase *)a2, (uint64_t)v8);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x70);
  *v4 = off_1E34C3B98;
  v4[1] = a1;
  v4[2] = a1;
  std::__optional_copy_assign_base<WebCore::ResourceError,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)(v4 + 3), v8);
  v9 = v4;
  WTF::callOnMainRunLoop();
  v6 = v9;
  v9 = 0;
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v5);
}

uint64_t WebKit::ServiceWorkerDownloadTask::didReceiveFormData(uint64_t a1)
{
  NSObject *v2;
  WTF::StringImpl *v3;
  int v5[20];
  char v6;

  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v5[0]) = 0;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "ServiceWorkerDownloadTask::didReceiveFormData not implemented", (uint8_t *)v5, 2u);
  }
  LOBYTE(v5[0]) = 0;
  v6 = 0;
  WebKit::ServiceWorkerDownloadTask::didFailDownload(a1, v5);
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

uint64_t WebKit::ServiceWorkerDownloadTask::didFinish(WebKit::ServiceWorkerDownloadTask *this, int *a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  WTF::FileSystemImpl::closeFile((WebKit::ServiceWorkerDownloadTask *)((char *)this + 632), a2);
  *((_DWORD *)this + 158) = -1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 1);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v3 = &off_1E34C3B70;
  v3[1] = this;
  v3[2] = this;
  v5 = (uint64_t)v3;
  WTF::callOnMainRunLoop();
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

uint64_t WebKit::ServiceWorkerDownloadTask::didFail(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v9;
  _QWORD v10[6];
  int v11;
  __int16 v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = *a2;
  *a2 = 0;
  v9 = v4;
  WTF::URL::URL((uint64_t)v10, a2 + 1);
  v5 = a2[6];
  a2[6] = 0;
  v10[5] = v5;
  v11 = *((_DWORD *)a2 + 14);
  v12 = *((_WORD *)a2 + 30);
  v6 = a2[8];
  a2[8] = 0;
  v13 = v6;
  v14 = *((_BYTE *)a2 + 72);
  v15 = 1;
  WebKit::ServiceWorkerDownloadTask::didFailDownload(a1, (int *)&v9);
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v9, v7);
}

void WebKit::ServiceWorkerFetchTask::fromNavigationPreloader(WebKit::ServiceWorkerFetchTask *this@<X0>, WebKit::WebSWServerConnection *a2@<X1>, const WebCore::ResourceRequest *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t IdentifierInternal;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint8_t v22[16];

  if (!*((_BYTE *)a2 + 3784))
  {
LABEL_8:
    v12 = 0;
    goto LABEL_9;
  }
  if (!a3
    || (*(_QWORD *)v22 = *((_QWORD *)a2 + 472),
        (v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3 + 92, v22)) == 0)|| (v10 = *(_QWORD *)(v9 + 280)) == 0|| *(_BYTE *)(v9 + 291))
  {
    v11 = qword_1ECE71848;
    if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v22 = 0;
      _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, "Unable to retrieve preloader, load will go to the network", v22, 2u);
    }
    goto LABEL_8;
  }
  *(_QWORD *)(v9 + 280) = 0;
  v12 = WTF::fastMalloc((WTF *)0x128);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v13 = (unsigned int *)*((_QWORD *)this + 1);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v12 + 16) = v13;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 14, (uint64_t)a2 + 48);
  v15 = (unsigned int *)*((_QWORD *)a2 + 7);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  *(_QWORD *)(v12 + 24) = v15;
  *(_QWORD *)(v12 + 32) = 0;
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 40) = IdentifierInternal;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(v12 + 64));
  *(_QWORD *)(v12 + 264) = 0;
  *(_QWORD *)(v12 + 272) = 0;
  *(_QWORD *)(v12 + 280) = v10;
  *(_DWORD *)(v12 + 288) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v12 + 8), v12);
  v18 = *(unsigned int **)(v12 + 8);
  if (v18)
  {
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v20 = &off_1E34C3BC0;
  v20[1] = v18;
  *(_QWORD *)v22 = v20;
  WTF::callOnMainRunLoop();
  v21 = *(_QWORD *)v22;
  *(_QWORD *)v22 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_9:
  *a4 = v12;
}

uint64_t WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::TimerBase *v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  __int128 v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  __int128 v47;
  const void *v48;
  const void *v49;
  CFTypeRef v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  _DWORD *v54;
  WTF::MonotonicTime *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  WebKit::ServiceWorkerFetchTask *v62;
  void *v63;
  WebKit::ServiceWorkerFetchTask *v64;
  CFTypeRef v65;
  CFTypeRef v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  double v69;
  uint64_t v71;
  uint64_t v72;
  WebKit::NetworkCache::Cache *v73;
  __int128 v74;
  int v75;
  unsigned int *v76;
  unsigned int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  const void *v85;
  WTF::StringImpl *v86;
  WebKit::ServiceWorkerFetchTask *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  __int16 v91;
  __int16 v92;
  WTF::StringImpl *v93;
  __int128 v94;
  __int128 v95;
  _BYTE buf[32];
  _BYTE v97[32];
  _BYTE v98[21];
  CFTypeRef v99[24];
  CFTypeRef v100;
  _DWORD v101[4];
  _BYTE v102[2560];
  char v103;
  char v104;
  _BYTE v105[24];
  uint64_t v106;
  char v107;
  CFTypeRef cf;
  char v109;
  int v110;
  __int16 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  WTF::StringImpl *v115;
  int v116;
  __int16 v117;
  const void *v118;
  char v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = (unsigned int *)(a1 + 8);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v18 = *(unsigned int **)(a2 + 8);
  if (v18)
  {
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  *(_QWORD *)(a1 + 16) = v18;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 56), a3 + 48);
  v20 = *(unsigned int **)(a3 + 56);
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 56) = a6;
  WTF::URL::URL(a1 + 64, (uint64_t *)a4);
  WTF::URL::URL(a1 + 104, (uint64_t *)(a4 + 40));
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a4 + 80);
  v22 = *(_QWORD *)(a4 + 88);
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = v22;
  v23 = *(_QWORD *)(a4 + 96);
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a1 + 160) = v23;
  LODWORD(v23) = *(_DWORD *)(a4 + 104);
  *(_DWORD *)(a4 + 104) = 0;
  *(_DWORD *)(a1 + 168) = v23;
  LODWORD(v23) = *(_DWORD *)(a4 + 108);
  *(_DWORD *)(a4 + 108) = 0;
  *(_DWORD *)(a1 + 172) = v23;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v24 = *(_QWORD *)(a4 + 112);
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a1 + 176) = v24;
  LODWORD(v24) = *(_DWORD *)(a4 + 120);
  *(_DWORD *)(a4 + 120) = 0;
  *(_DWORD *)(a1 + 184) = v24;
  LODWORD(v24) = *(_DWORD *)(a4 + 124);
  *(_DWORD *)(a4 + 124) = 0;
  *(_DWORD *)(a1 + 188) = v24;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v25 = *(_QWORD *)(a4 + 128);
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)(a1 + 192) = v25;
  LODWORD(v25) = *(_DWORD *)(a4 + 136);
  *(_DWORD *)(a4 + 136) = 0;
  *(_DWORD *)(a1 + 200) = v25;
  LODWORD(v25) = *(_DWORD *)(a4 + 140);
  *(_DWORD *)(a4 + 140) = 0;
  *(_DWORD *)(a1 + 204) = v25;
  LODWORD(v25) = *(_DWORD *)(a4 + 144);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a4 + 148);
  *(_DWORD *)(a1 + 208) = v25;
  v26 = *(_QWORD *)(a4 + 152);
  *(_QWORD *)(a4 + 152) = 0;
  *(_QWORD *)(a1 + 216) = v26;
  v27 = *(_QWORD *)(a4 + 160);
  *(_QWORD *)(a4 + 160) = 0;
  *(_QWORD *)(a1 + 224) = v27;
  v28 = *(_QWORD *)(a4 + 168);
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a1 + 232) = v28;
  v29 = *(_QWORD *)(a4 + 176);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a4 + 184);
  *(_QWORD *)(a1 + 240) = v29;
  v30 = *(_QWORD *)(a4 + 192);
  *(_QWORD *)(a4 + 192) = 0;
  *(_QWORD *)(a1 + 256) = v30;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a7 + 16);
  *(_QWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 290) = WebCore::SWServerRegistration::shouldSoftUpdate();
  *(_BYTE *)(a1 + 291) = 0;
  v31 = qword_1ECE71848;
  v32 = os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v32)
  {
    v33 = *(_QWORD *)(a1 + 40);
    v34 = *(_QWORD *)(a1 + 48);
    v35 = *(_QWORD *)(a1 + 272);
    v36 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v33;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v34;
    *(_WORD *)v97 = 2048;
    *(_QWORD *)&v97[2] = v35;
    *(_WORD *)&v97[10] = 2048;
    *(_QWORD *)&v97[12] = v36;
    *(_WORD *)&v97[20] = 1024;
    *(_DWORD *)&v97[22] = a9;
    _os_log_impl(&dword_196BCC000, v31, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::ServiceWorkerFetchTask: (serverConnectionIdentifier=%llu, serviceWorkerRegistrationIdentifier=%llu, serviceWorkerIdentifier=%llu, %d)", buf, 0x3Au);
  }
  if (*(_BYTE *)(a3 + 315) == 1)
  {
    v37 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)WebCore::TimerBase::TimerBase(v37) = off_1E34B3740;
    v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v38 = off_1E34C39F8;
    v38[1] = WebKit::ServiceWorkerFetchTask::timeoutTimerFired;
    v38[2] = 0;
    v38[3] = a1;
    *((_QWORD *)v37 + 6) = v38;
    v39 = *(_QWORD *)(a1 + 264);
    *(_QWORD *)(a1 + 264) = v37;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v32 = WebCore::TimerBase::start();
  }
  if (a8)
  {
    v40 = *(unsigned __int8 *)(a3 + 3072);
    if (v40 <= 0xA && ((1 << v40) & 0x498) != 0)
    {
      v41 = (_QWORD *)WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)(a1 + 64));
      v32 = MEMORY[0x19AEABBCC](*v41, "GET", 3);
      if ((_DWORD)v32)
      {
        if (!a9 || *(_BYTE *)(a7 + 376))
        {
          v42 = *(_OWORD *)(a3 + 96);
          *(_OWORD *)buf = *(_OWORD *)(a3 + 80);
          *(_OWORD *)&buf[16] = v42;
          v43 = *(unsigned int **)(a3 + 112);
          if (v43)
          {
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 + 1, v43));
          }
          *(_QWORD *)v97 = v43;
          v45 = *(unsigned int **)(a3 + 120);
          if (v45)
          {
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 + 1, v45));
          }
          *(_QWORD *)&v97[8] = v45;
          v47 = *(_OWORD *)(a3 + 144);
          *(_OWORD *)&v97[16] = *(_OWORD *)(a3 + 128);
          *(_OWORD *)v98 = v47;
          *(_QWORD *)&v98[13] = *(_QWORD *)(a3 + 157);
          WebCore::ResourceRequest::ResourceRequest(v99, (const WebCore::ResourceRequest *)(a3 + 168));
          *(_DWORD *)((char *)v101 + 3) = *(_DWORD *)(a3 + 371);
          v101[0] = *(_DWORD *)(a3 + 368);
          v102[0] = 0;
          v103 = 0;
          if (*(_BYTE *)(a3 + 2944))
          {
            WebKit::NavigationActionData::NavigationActionData((WebKit::NavigationActionData *)v102, (const WebKit::NavigationActionData *)(a3 + 384));
            v103 = 1;
          }
          v104 = *(_BYTE *)(a3 + 2960);
          WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v105, a3 + 2968);
          v105[16] = *(_BYTE *)(a3 + 2984);
          LOBYTE(v106) = 0;
          v109 = 0;
          if (*(_BYTE *)(a3 + 3016))
          {
            v106 = *(_QWORD *)(a3 + 2992);
            v107 = *(_BYTE *)(a3 + 3000);
            v48 = *(const void **)(a3 + 3008);
            cf = v48;
            if (v48)
              CFRetain(v48);
            v109 = 1;
          }
          v110 = *(_DWORD *)(a3 + 3024);
          v111 = *(_WORD *)(a3 + 3028);
          WebCore::ResourceRequestBase::operator=((uint64_t)v99, a1 + 64);
          v49 = *(const void **)(a1 + 256);
          if (v49)
            CFRetain(*(CFTypeRef *)(a1 + 256));
          v50 = v100;
          v100 = v49;
          if (v50)
            CFRelease(v50);
          v51 = WTF::fastMalloc((WTF *)0xDD0);
          *(_QWORD *)(v51 + 8) = 0;
          *(_DWORD *)(v51 + 16) = 0;
          *(_QWORD *)v51 = off_1E34C3818;
          *(_QWORD *)(v51 + 24) = 0;
          WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a8 + 8), a8);
          v52 = *(unsigned int **)(a8 + 8);
          if (v52)
          {
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 + 1, v52));
          }
          *(_QWORD *)(v51 + 32) = v52;
          WebKit::NetworkLoadParameters::NetworkLoadParameters(v51 + 48, (uint64_t)buf);
          *(_BYTE *)(v51 + 3008) = *(_BYTE *)(a7 + 376);
          v54 = *(_DWORD **)(a7 + 384);
          if (v54)
            *v54 += 2;
          *(_QWORD *)(v51 + 3016) = v54;
          *(_QWORD *)(v51 + 3024) = 0;
          WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)(v51 + 3032));
          WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v51 + 3160));
          *(_QWORD *)(v51 + 3400) = 0;
          *(_BYTE *)(v51 + 3408) = 0;
          *(_BYTE *)(v51 + 3298) = *(_BYTE *)(v51 + 3298) & 0xF1 | 4;
          *(_QWORD *)(v51 + 3416) = 0;
          *(_OWORD *)(v51 + 3424) = 0u;
          v55 = (WTF::MonotonicTime *)WTF::URL::invalidate((WTF::URL *)(v51 + 3432));
          *(_QWORD *)(v51 + 3488) = 0;
          *(_QWORD *)(v51 + 3472) = 0;
          *(_QWORD *)(v51 + 3478) = 0;
          *(_BYTE *)(v51 + 3496) = 1;
          *(_OWORD *)(v51 + 3504) = 0u;
          *(_WORD *)(v51 + 3520) = 0;
          WTF::MonotonicTime::now(v55);
          *(_QWORD *)(v51 + 3528) = v56;
          v57 = qword_1ECE71848;
          if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v112) = 134217984;
            *(_QWORD *)((char *)&v112 + 4) = v51;
            _os_log_impl(&dword_196BCC000, v57, OS_LOG_TYPE_DEFAULT, "ServiceWorkerNavigationPreloader::ServiceWorkerNavigationPreloader %p", (uint8_t *)&v112, 0xCu);
          }
          if (!*(_BYTE *)(v51 + 3520))
          {
            *(_BYTE *)(v51 + 3520) = 1;
            v71 = *(_QWORD *)(v51 + 32);
            if (v71 && (v72 = *(_QWORD *)(v71 + 8)) != 0)
            {
              v73 = *(WebKit::NetworkCache::Cache **)(v72 + 608);
              if (v73)
              {
                v74 = *(_OWORD *)(v51 + 64);
                v112 = *(_OWORD *)(v51 + 48);
                v113 = v74;
                v92 = *(_WORD *)(v51 + 2992);
                v75 = *(unsigned __int8 *)(v51 + 2995);
                v91 = *(_WORD *)(v51 + 2996);
                WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v51 + 8), v51);
                v76 = *(unsigned int **)(v51 + 8);
                if (v76)
                {
                  do
                    v77 = __ldaxr(v76);
                  while (__stlxr(v77 + 1, v76));
                }
                v78 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                *(_QWORD *)v78 = &off_1E34C3CB0;
                *((_QWORD *)v78 + 1) = v51;
                *((_QWORD *)v78 + 2) = v76;
                v93 = v78;
                WebKit::NetworkCache::Cache::retrieve(v73, (const WebCore::ResourceRequest *)(v51 + 136), (const WebCore::ResourceRequest *)&v112, v92, v75 != 0, v91, (WTF::MonotonicTime *)&v93);
                v79 = v93;
                v93 = 0;
                if (v79)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v79 + 8))(v79);
              }
              else
              {
                WebKit::ServiceWorkerNavigationPreloader::loadFromNetwork((WebKit::NetworkLoad **)v51);
              }
            }
            else
            {
              v80 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
              if (v80)
              {
                if (v80 == 1)
                {
                  v81 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                  *MEMORY[0x1E0CBEF70] += 2;
                }
                else
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v81 = (WTF::StringImpl *)v112;
                }
              }
              else
              {
                v81 = 0;
              }
              v93 = 0;
              WTF::URL::invalidate((WTF::URL *)&v93);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v82 = (WTF::StringImpl *)v112;
              if (v81)
                *(_DWORD *)v81 += 2;
              *(_QWORD *)&v112 = v81;
              v83 = v93;
              if (v93)
                *(_DWORD *)v93 += 2;
              *((_QWORD *)&v112 + 1) = v83;
              v113 = v94;
              v114 = v95;
              if (v82)
                *(_DWORD *)v82 += 2;
              v115 = v82;
              v116 = 0;
              v117 = 1;
              v118 = 0;
              v119 = 1;
              WebKit::ServiceWorkerNavigationPreloader::didFailLoading((WTF::StringImpl **)v51, (CFTypeRef *)&v112);
              v85 = v118;
              v118 = 0;
              if (v85)
                CFRelease(v85);
              v86 = v115;
              v115 = 0;
              if (v86)
              {
                if (*(_DWORD *)v86 == 2)
                  WTF::StringImpl::destroy(v86, v84);
                else
                  *(_DWORD *)v86 -= 2;
              }
              v88 = (WTF::StringImpl *)*((_QWORD *)&v112 + 1);
              *((_QWORD *)&v112 + 1) = 0;
              if (v88)
              {
                if (*(_DWORD *)v88 == 2)
                  WTF::StringImpl::destroy(v88, v84);
                else
                  *(_DWORD *)v88 -= 2;
              }
              v89 = (WTF::StringImpl *)v112;
              *(_QWORD *)&v112 = 0;
              if (v89)
              {
                if (*(_DWORD *)v89 == 2)
                  WTF::StringImpl::destroy(v89, v84);
                else
                  *(_DWORD *)v89 -= 2;
              }
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                  WTF::StringImpl::destroy(v82, v84);
                else
                  *(_DWORD *)v82 -= 2;
              }
              v90 = v93;
              v93 = 0;
              if (v90)
              {
                if (*(_DWORD *)v90 == 2)
                  WTF::StringImpl::destroy(v90, v84);
                else
                  *(_DWORD *)v90 -= 2;
              }
              if (v81)
              {
                if (*(_DWORD *)v81 == 2)
                  WTF::StringImpl::destroy(v81, v84);
                else
                  *(_DWORD *)v81 -= 2;
              }
            }
          }
          v58 = *(_QWORD *)(a1 + 280);
          *(_QWORD *)(a1 + 280) = v51;
          if (v58)
            (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
          v93 = *(WTF::StringImpl **)(a1 + 40);
          WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::ServiceWorkerFetchTask&>((uint64_t *)(a8 + 736), (uint64_t *)&v93, a1, (uint64_t)&v112);
          v59 = *(_QWORD *)(a1 + 280);
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v17, a1);
          v60 = *(unsigned int **)(a1 + 8);
          if (v60)
          {
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 + 1, v60));
          }
          v62 = (WebKit::ServiceWorkerFetchTask *)WTF::fastMalloc((WTF *)0x10);
          v64 = v62;
          *(_QWORD *)v62 = &off_1E34C3BE8;
          *((_QWORD *)v62 + 1) = v60;
          if (*(_BYTE *)(v59 + 3484) || *(_QWORD *)(v59 + 3416))
          {
            WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::SWServerRegistration &,WebKit::NetworkSession *,BOOL)::$_0,void>::call(v62);
          }
          else
          {
            v87 = *(WebKit::ServiceWorkerFetchTask **)(v59 + 3504);
            *(_QWORD *)(v59 + 3504) = v62;
            v64 = v87;
            if (!v87)
            {
LABEL_46:
              if (v109)
              {
                v65 = cf;
                cf = 0;
                if (v65)
                  CFRelease(v65);
              }
              WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v105, v63);
              if (v103)
                WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v102);
              v66 = v100;
              v100 = 0;
              if (v66)
                CFRelease(v66);
              WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v99);
              v68 = *(_QWORD *)&v97[8];
              *(_QWORD *)&v97[8] = 0;
              if (v68)
                WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v68, v67);
              v32 = *(_QWORD *)v97;
              *(_QWORD *)v97 = 0;
              if (v32)
                v32 = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v32, v67);
              goto LABEL_57;
            }
          }
          (*(void (**)(WebKit::ServiceWorkerFetchTask *))(*(_QWORD *)v64 + 8))(v64);
          goto LABEL_46;
        }
      }
    }
  }
LABEL_57:
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v32);
  WebKit::NetworkResourceLoader::setWorkerStart(a3, v69);
  return a1;
}

_DWORD *WebKit::ServiceWorkerFetchTask::timeoutTimerFired(WebKit::ServiceWorkerFetchTask *this)
{
  NSObject *v2;
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebKit::ServiceWorkerFetchTask *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
  {
    v8 = *((_QWORD *)this + 4);
    v7 = *((_QWORD *)this + 5);
    if (v8)
      LODWORD(v8) = *(_QWORD *)(v8 + 8) != 0;
    v9 = 134218496;
    v10 = this;
    v11 = 2048;
    v12 = v7;
    v13 = 1024;
    v14 = v8;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::timeoutTimerFired: (hasServiceWorkerConnection=%d)", (uint8_t *)&v9, 0x1Cu);
  }
  WebKit::ServiceWorkerFetchTask::softUpdateIfNeeded(this);
  result = (_DWORD *)WebKit::ServiceWorkerFetchTask::cannotHandle(this);
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      ++*(_DWORD *)(v5 + 16);
      result = WebKit::WebSWServerConnection::fetchTaskTimedOut(v5);
      v6 = *(_DWORD *)(v5 + 16);
      if (!v6)
      {
        __break(0xC471u);
        JUMPOUT(0x19715722CLL);
      }
      *(_DWORD *)(v5 + 16) = v6 - 1;
    }
  }
  return result;
}

void WebKit::ServiceWorkerFetchTask::~ServiceWorkerFetchTask(WebKit::ServiceWorkerFetchTask *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  WebKit::WebSWServerToContextConnection *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  WebKit::ServiceWorkerFetchTask *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 5);
    v24 = 134218240;
    v25 = this;
    v26 = 2048;
    v27 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::~ServiceWorkerFetchTask:", (uint8_t *)&v24, 0x16u);
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(WebKit::WebSWServerToContextConnection **)(v4 + 8);
    if (v5)
    {
      ++*((_DWORD *)v5 + 4);
      WebKit::WebSWServerToContextConnection::unregisterFetch(v5, this);
      v6 = *((_DWORD *)v5 + 4);
      if (!v6)
      {
        __break(0xC471u);
        JUMPOUT(0x19715745CLL);
      }
      *((_DWORD *)v5 + 4) = v6 - 1;
    }
  }
  WebKit::ServiceWorkerFetchTask::cancelPreloadIfNecessary((uint64_t *)this);
  v7 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::ServiceWorkerFetchTask *)((char *)this + 64));
  v11 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  v14 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v10);
    }
  }
  v17 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v10);
    }
  }
  v20 = *((_QWORD *)this + 1);
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 0;
    v21 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t *WebKit::ServiceWorkerFetchTask::cancelPreloadIfNecessary(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  WebKit::WebSWServerConnection *v3;
  WebKit::NetworkSession *v4;

  if (this[35])
  {
    v1 = this;
    v2 = this[2];
    if (v2)
    {
      v3 = *(WebKit::WebSWServerConnection **)(v2 + 8);
      if (v3)
      {
        v4 = (WebKit::NetworkSession *)WebKit::WebSWServerConnection::session(v3);
        if (v4)
          WebKit::NetworkSession::removeNavigationPreloaderTask(v4, (WebKit::ServiceWorkerFetchTask *)v1);
      }
    }
    WebKit::ServiceWorkerNavigationPreloader::cancel(v1[35]);
    this = (uint64_t *)v1[35];
    v1[35] = 0;
    if (this)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  return this;
}

_DWORD *WebKit::ServiceWorkerFetchTask::start(WebKit::ServiceWorkerFetchTask *this, WebKit::WebSWServerToContextConnection *a2)
{
  NSObject *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint8_t buf[4];
  WebKit::ServiceWorkerFetchTask *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 5);
    *(_DWORD *)buf = 134218240;
    v15 = this;
    v16 = 2048;
    v17 = v5;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::start:", buf, 0x16u);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v7 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v7;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v6);
    }
  }
  v13 = *((_QWORD *)this + 5);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::ServiceWorkerFetchTask&>((uint64_t *)a2 + 17, &v13, (uint64_t)this, (uint64_t)buf);
  return WebKit::ServiceWorkerFetchTask::startFetch(this);
}

_DWORD *WebKit::ServiceWorkerFetchTask::startFetch(WebKit::ServiceWorkerFetchTask *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::RefCountedBase *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  uint64_t v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  CFTypeRef v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::RefCountedBase *v32;
  WTF::RefCountedBase *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35[2];
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unsigned __int8 **v38;
  uint8_t buf[4];
  WebKit::ServiceWorkerFetchTask *v40;
  __int16 v41;
  uint64_t v42;
  CFTypeRef cf;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 5);
    *(_DWORD *)buf = 134218240;
    v40 = this;
    v41 = 2048;
    v42 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::startFetch", buf, 0x16u);
  }
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = v5 - 48;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = (_DWORD *)(v6 + 8);
  ++*(_DWORD *)(v6 + 8);
  if (!*(_BYTE *)(v6 + 4177))
    WebKit::NetworkResourceLoader::consumeSandboxExtensions((WebKit::NetworkResourceLoader *)v6);
  WebCore::ResourceRequestBase::httpReferrer((WebKit::ServiceWorkerFetchTask *)((char *)this + 64));
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, (WebKit::ServiceWorkerFetchTask *)((char *)this + 64));
  WebCore::cleanHTTPRequestHeadersForAccessControl();
  v36 = 0;
  if (*(_BYTE *)(v6 + 3073))
  {
    *(_OWORD *)v35 = *(_OWORD *)(v6 + 3088);
    if (*(_OWORD *)v35 != 0)
      WTF::UUID::toString((WTF::UUID *)v35);
  }
  v34 = 0;
  if (*(_OWORD *)(v6 + 3104) != 0)
  {
    WTF::UUID::toString((WTF::UUID *)(v6 + 3104));
    v34 = v35[0];
    v35[0] = 0;
  }
  WebCore::ResourceRequestBase::httpBody((WebKit::ServiceWorkerFetchTask *)((char *)this + 64));
  v9 = v32;
  v33 = v32;
  v10 = *((_QWORD *)this + 35);
  if (v10)
    v11 = *(_BYTE *)(v10 + 3008) != 0;
  else
    v11 = 0;
  v12 = *((_QWORD *)this + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = (uint64_t *)((char *)this + 40);
      v15 = (uint64_t *)((char *)this + 56);
      v16 = (uint64_t *)((char *)this + 48);
      v17 = v6 + 3072;
      v18 = *(_QWORD *)(*(_QWORD *)(v13 + 128) + 8);
      if (v18)
        v19 = v18 - 48;
      else
        v19 = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v38, *(unsigned __int8 ***)(v19 + 64));
      v20 = v38;
      v21 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v21 = 2715;
      *(_QWORD *)(v21 + 8) = 0;
      *(_QWORD *)(v21 + 528) = v21 + 16;
      *(_QWORD *)(v21 + 536) = v21 + 16;
      *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v21 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
      v35[0] = (WTF::StringImpl *)v21;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v21, v16);
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v21, v15);
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v21, v14);
      IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v21, (WebCore::ResourceRequest *)buf);
      IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode((IPC::Encoder *)v21, v17);
      IPC::ArgumentCoder<IPC::FormDataReference,void>::encode((IPC::Encoder *)v21, (_DWORD **)&v33);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, (uint64_t *)&v37);
      *IPC::Encoder::grow((IPC::Encoder *)v21, 1uLL, 1) = v11;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, (uint64_t *)&v36);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, (uint64_t *)&v34);
      IPC::Connection::sendMessageImpl((uint64_t)v20, (uint64_t *)v35, 0, 0);
      v23 = v35[0];
      v35[0] = 0;
      if (v23)
      {
        IPC::Encoder::~Encoder(v23, v22);
        WTF::fastFree(v24, v25);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v38);
      v9 = v33;
    }
  }
  if (v9)
    WTF::RefCounted<WebCore::FormData>::deref(v9);
  v26 = v34;
  v34 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v8);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v36;
  v36 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v8);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = cf;
  cf = 0;
  if (v28)
    CFRelease(v28);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
  v30 = v37;
  v37 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v7, v29);
}

uint64_t WebKit::ServiceWorkerFetchTask::workerClosed(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v2;
  WebKit::WebSWServerToContextConnection *v3;
  int v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return (uint64_t)WebKit::ServiceWorkerFetchTask::contextClosed(this);
  v3 = *(WebKit::WebSWServerToContextConnection **)(v2 + 8);
  if (!v3)
    return (uint64_t)WebKit::ServiceWorkerFetchTask::contextClosed(this);
  ++*((_DWORD *)v3 + 4);
  WebKit::WebSWServerToContextConnection::unregisterFetch(v3, this);
  v4 = *((_DWORD *)v3 + 4);
  if (v4)
  {
    *((_DWORD *)v3 + 4) = v4 - 1;
    return (uint64_t)WebKit::ServiceWorkerFetchTask::contextClosed(this);
  }
  result = 286;
  __break(0xC471u);
  return result;
}

unsigned int *WebKit::ServiceWorkerFetchTask::contextClosed(WebKit::ServiceWorkerFetchTask *this)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  CFTypeRef v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  _BYTE buf[48];
  WTF::StringImpl *v23;
  int v24;
  __int16 v25;
  CFTypeRef cf;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 5);
    v5 = *((unsigned __int8 *)this + 289);
    v6 = *((unsigned __int8 *)this + 288);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v5;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::contextClosed: (m_isDone=%d, m_wasHandled=%d)", buf, 0x22u);
  }
  result = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v3);
    }
  }
  if (!*((_BYTE *)this + 289))
  {
    if (!*((_BYTE *)this + 288) || *((_BYTE *)this + 291))
      return (unsigned int *)WebKit::ServiceWorkerFetchTask::cannotHandle(this);
    v10 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
    if (v10)
    {
      if (v10 == 1)
      {
        v11 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v11 = *(WTF::StringImpl **)buf;
      }
    }
    else
    {
      v11 = 0;
    }
    v19 = 0;
    WTF::URL::invalidate((WTF::URL *)&v19);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = *(WTF::StringImpl **)buf;
    if (v11)
      *(_DWORD *)v11 += 2;
    *(_QWORD *)buf = v11;
    v13 = v19;
    if (v19)
      *(_DWORD *)v19 += 2;
    *(_QWORD *)&buf[8] = v13;
    *(_OWORD *)&buf[16] = v20;
    *(_OWORD *)&buf[32] = v21;
    if (v12)
      *(_DWORD *)v12 += 2;
    v23 = v12;
    v24 = 0;
    v25 = 1;
    cf = 0;
    v27 = 1;
    WebKit::ServiceWorkerFetchTask::didFail(this, (const WebCore::ResourceError *)buf);
    v15 = cf;
    cf = 0;
    if (v15)
      CFRelease(v15);
    v16 = v23;
    v23 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = *(WTF::StringImpl **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v14);
        if (!v12)
          goto LABEL_40;
LABEL_37:
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v14);
        else
          *(_DWORD *)v12 -= 2;
LABEL_40:
        result = (unsigned int *)v19;
        v19 = 0;
        if (result)
        {
          if (*result == 2)
          {
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
            if (!v11)
              return result;
LABEL_46:
            if (*(_DWORD *)v11 == 2)
              return (unsigned int *)WTF::StringImpl::destroy(v11, v14);
            *(_DWORD *)v11 -= 2;
            return result;
          }
          *result -= 2;
        }
        if (!v11)
          return result;
        goto LABEL_46;
      }
      *(_DWORD *)v18 -= 2;
    }
    if (!v12)
      goto LABEL_40;
    goto LABEL_37;
  }
  return result;
}

uint64_t *WebKit::ServiceWorkerFetchTask::didFail(WebKit::ServiceWorkerFetchTask *this, const WebCore::ResourceError *a2)
{
  WebCore::TimerBase *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  WTF *v16;
  uint8_t buf[4];
  WebKit::ServiceWorkerFetchTask *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 289) = 1;
  v4 = (WebCore::TimerBase *)*((_QWORD *)this + 33);
  if (v4
    && (*((_QWORD *)v4 + 4) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)v4 + 4) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase(v4);
    WebKit::ServiceWorkerFetchTask::softUpdateIfNeeded(this);
  }
  WebKit::ServiceWorkerFetchTask::cancelPreloadIfNecessary((uint64_t *)this);
  v5 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
  {
    v12 = *((_QWORD *)this + 5);
    MEMORY[0x19AEB7BFC](a2);
    WTF::String::utf8();
    v13 = v16 ? (uint64_t)v16 + 16 : 0;
    MEMORY[0x19AEB7BFC](a2);
    v14 = *((_DWORD *)a2 + 14);
    *(_DWORD *)buf = 134218754;
    v18 = this;
    v19 = 2048;
    v20 = v12;
    v21 = 2082;
    v22 = v13;
    v23 = 1024;
    v24 = v14;
    _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::didFail: (error.domain=%{public}s, error.code=%d)", buf, 0x26u);
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::fastFree(v16, v15);
      else
        --*(_DWORD *)v16;
    }
  }
  v6 = *((_QWORD *)this + 3);
  if (!v6)
    return WebKit::NetworkResourceLoader::didFailLoading(0, a2);
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return WebKit::NetworkResourceLoader::didFailLoading(0, a2);
  v9 = *(_DWORD *)(v7 - 40);
  v8 = (_DWORD *)(v7 - 40);
  *v8 = v9 + 1;
  WebKit::NetworkResourceLoader::didFailLoading((WebKit::NetworkResourceLoader *)(v8 - 2), a2);
  return (uint64_t *)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v8, v10);
}

uint64_t WebKit::ServiceWorkerFetchTask::cannotHandle(WebKit::ServiceWorkerFetchTask *this)
{
  NSObject *v2;
  _BOOL8 v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t result;
  _BYTE v9[12];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71848;
  v3 = os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    v4 = *((_QWORD *)this + 5);
    *(_DWORD *)v9 = 134218240;
    *(_QWORD *)&v9[4] = this;
    v10 = 2048;
    v11 = v4;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::cannotHandle:", v9, 0x16u);
  }
  WTF::RunLoop::main((WTF::RunLoop *)v3);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E34C3C10;
  v7[1] = v5;
  *(_QWORD *)v9 = v7;
  WTF::RunLoop::dispatch();
  result = *(_QWORD *)v9;
  *(_QWORD *)v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_DWORD *WebKit::ServiceWorkerFetchTask::processRedirectResponse(_DWORD *result, uint64_t a2, int a3)
{
  _DWORD *v5;
  NSObject *v6;
  uint64_t v7;
  WebCore::TimerBase *v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  CFTypeRef v14[24];
  CFTypeRef cf;
  uint8_t buf[4];
  _DWORD *v17;
  __int16 v18;
  uint64_t v19;
  CFTypeRef v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)result + 289))
  {
    v5 = result;
    v6 = qword_1ECE71848;
    if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *((_QWORD *)v5 + 5);
      *(_DWORD *)buf = 134218240;
      v17 = v5;
      v18 = 2048;
      v19 = v7;
      _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::processRedirectResponse:", buf, 0x16u);
    }
    *((_BYTE *)v5 + 288) = 1;
    v8 = (WebCore::TimerBase *)*((_QWORD *)v5 + 33);
    if (v8 && (*((_QWORD *)v8 + 4) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase(v8);
    WebKit::ServiceWorkerFetchTask::softUpdateIfNeeded((WebKit::ServiceWorkerFetchTask *)v5);
    if (a3)
      *(_WORD *)(a2 + 232) = *(_WORD *)(a2 + 232) & 0xC3FF | 0x1800;
    v9 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    if (v9)
      v10 = v9 - 48;
    else
      v10 = 0;
    ++*(_DWORD *)(v10 + 8);
    WebCore::ResourceRequestBase::redirectedRequest();
    WebCore::ResourceRequest::ResourceRequest(v14, (const WebCore::ResourceRequest *)(v5 + 16));
    WebKit::NetworkResourceLoader::willSendServiceWorkerRedirectedRequest(v10, (WebCore::ResourceRequestBase *)v14, (WebCore::ResourceRequestBase *)buf, a2);
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v14);
    v12 = v20;
    v20 = 0;
    if (v12)
      CFRelease(v12);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v10 + 8), v13);
  }
  return result;
}

void WebKit::ServiceWorkerFetchTask::softUpdateIfNeeded(WebKit::ServiceWorkerFetchTask *this)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _DWORD *Registration;
  _DWORD *v12;
  int v13;
  int v14;
  WebKit::ServiceWorkerFetchTask *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 5);
    v4 = *((unsigned __int8 *)this + 290);
    v14 = 134218496;
    v15 = this;
    v16 = 2048;
    v17 = v3;
    v18 = 1024;
    v19 = v4;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::softUpdateIfNeeded: (m_shouldSoftUpdate=%d)", (uint8_t *)&v14, 0x1Cu);
  }
  if (*((_BYTE *)this + 290))
  {
    v5 = *((_QWORD *)this + 3);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        v7 = v6 - 48;
      else
        v7 = 0;
    }
    else
    {
      v7 = 0;
    }
    ++*(_DWORD *)(v7 + 8);
    v8 = WebKit::NetworkConnectionToWebProcess::swConnection(*(WebKit::NetworkConnectionToWebProcess **)(v7 + 3856));
    if (v8)
    {
      v10 = v8;
      ++*(_DWORD *)(v8 + 16);
      Registration = (_DWORD *)WebCore::SWServer::getRegistration();
      if (Registration)
      {
        v12 = Registration;
        ++*Registration;
        WebCore::SWServerRegistration::scheduleSoftUpdate();
        WTF::RefCounted<WebCore::SWServerRegistration>::deref(v12);
      }
      v13 = *(_DWORD *)(v10 + 16);
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x197158318);
      }
      *(_DWORD *)(v10 + 16) = v13 - 1;
    }
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v7 + 8), v9);
  }
}

_DWORD *WebKit::ServiceWorkerFetchTask::didReceiveResponse(WebKit::ServiceWorkerFetchTask *this, uint64_t a2, int a3)
{
  uint64_t v6;

  v6 = *((_QWORD *)this + 35);
  if (v6 && !*(_BYTE *)(v6 + 3008))
    WebKit::ServiceWorkerFetchTask::cancelPreloadIfNecessary((uint64_t *)this);
  return WebKit::ServiceWorkerFetchTask::processResponse(this, a2, a3, 1);
}

_DWORD *WebKit::ServiceWorkerFetchTask::processResponse(_DWORD *result, uint64_t a2, int a3, int a4)
{
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  char *v15;
  void *v16;
  WebCore::TimerBase *v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  const void *v26;
  unsigned int *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF *v34;
  uint8_t buf[4];
  _DWORD *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  char *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)result + 289))
  {
    v7 = result;
    v8 = *((_QWORD *)result + 3);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        v10 = v9 - 48;
      else
        v10 = 0;
    }
    else
    {
      v10 = 0;
    }
    ++*(_DWORD *)(v10 + 8);
    if (*(_QWORD *)(v10 + 4792) && !WebCore::ContentFilter::continueAfterResponseReceived())
      return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v10 + 8), v11);
    v12 = qword_1ECE71848;
    if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
    {
      v33 = a4;
      v13 = *((_QWORD *)v7 + 5);
      v14 = WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2);
      WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)a2);
      WTF::String::utf8();
      if (v34)
        v15 = (char *)v34 + 16;
      else
        v15 = 0;
      *(_DWORD *)buf = 134219522;
      v36 = v7;
      v37 = 2048;
      v38 = v13;
      v39 = 1024;
      v40 = v14;
      v41 = 2082;
      v42 = v15;
      v43 = 2048;
      v44 = WebCore::ResourceResponseBase::expectedContentLength((WebCore::ResourceResponseBase *)a2);
      v45 = 1024;
      v46 = a3;
      v47 = 1024;
      v48 = WebCore::ResourceResponseBase::source((WebCore::ResourceResponseBase *)a2);
      _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::processResponse: (httpStatusCode=%d, MIMEType=%{public}s, expectedContentLength=%lld, needsContinueDidReceiveResponseMessage=%d, source=%u)", buf, 0x3Cu);
      if (v34)
      {
        if (*(_DWORD *)v34 == 1)
          WTF::fastFree(v34, v16);
        else
          --*(_DWORD *)v34;
      }
      a4 = v33;
    }
    *((_BYTE *)v7 + 288) = 1;
    v17 = (WebCore::TimerBase *)*((_QWORD *)v7 + 33);
    if (v17 && (*((_QWORD *)v17 + 4) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase(v17);
    WebKit::ServiceWorkerFetchTask::softUpdateIfNeeded((WebKit::ServiceWorkerFetchTask *)v7);
    v18 = *(unsigned __int8 *)(v10 + 3073);
    if (!*(_BYTE *)(v10 + 3073))
    {
      if (*(_DWORD *)(v10 + 3332))
      {
        v27 = **(unsigned int ***)(v10 + 3320);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 + 1, v27));
        if (v27)
        {
          WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v7 + 16));
          WebCore::validateCrossOriginResourcePolicy();
          if (v49)
          {
            WebKit::ServiceWorkerFetchTask::didFail((WebKit::ServiceWorkerFetchTask *)v7, (const WebCore::ResourceError *)buf);
            std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v30);
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v27, v31);
            return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v10 + 8), v11);
          }
          std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v29);
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v27, v32);
        }
      }
      v18 = *(unsigned __int8 *)(v10 + 3073);
    }
    if (v18 == 2)
    {
      v19 = *(unsigned int **)(v10 + 120);
      if (v19)
      {
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
      }
      WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v7 + 16));
      WebCore::validateCrossOriginResourcePolicy();
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v19, v21);
      if (v49)
      {
LABEL_29:
        WebKit::ServiceWorkerFetchTask::didFail((WebKit::ServiceWorkerFetchTask *)v7, (const WebCore::ResourceError *)buf);
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v24);
        return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v10 + 8), v11);
      }
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v22);
    }
    WebKit::NetworkResourceLoader::doCrossOriginOpenerHandlingOfResponse((WebKit::NetworkResourceLoader *)v10, (const WebCore::ResourceResponse *)a2, buf);
    if (!v49)
    {
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v23);
      if (a4)
        *(_WORD *)(a2 + 232) = *(_WORD *)(a2 + 232) & 0xC3FF | 0x1800;
      WebKit::NetworkResourceLoader::sendDidReceiveResponsePotentiallyInNewBrowsingContextGroup((WebCore::ResourceResponse *)v10, (WebCore::ResourceResponseBase *)a2, 0, a3);
      if (a3)
      {
        WebCore::ResourceResponseBase::operator=(v10 + 3872, a2);
        v25 = *(_QWORD *)(a2 + 240);
        *(_QWORD *)(a2 + 240) = 0;
        v26 = *(const void **)(v10 + 4112);
        *(_QWORD *)(v10 + 4112) = v25;
        if (v26)
          CFRelease(v26);
        *(_BYTE *)(v10 + 4120) = *(_BYTE *)(a2 + 248);
      }
      return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v10 + 8), v11);
    }
    goto LABEL_29;
  }
  return result;
}

unsigned int *WebKit::ServiceWorkerFetchTask::didReceiveData(unsigned int *this, const IPC::SharedBufferReference *a2, uint64_t a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::SharedBuffer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WebCore::ContentFilter *v12;
  int v13;
  WTF::StringImpl *v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  _QWORD v24[2];
  WebCore::SharedBuffer *v25;

  if (!*((_BYTE *)this + 289))
  {
    v5 = (uint64_t)this;
    this = IPC::SharedBufferReference::unsafeBuffer((unsigned int *)a2, &v25);
    v7 = v25;
    if (v25)
    {
      v8 = *(_QWORD *)(v5 + 24);
      if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
      {
        v11 = *(_DWORD *)(v9 - 40);
        v10 = v9 - 40;
        *(_DWORD *)v10 = v11 + 1;
        v12 = *(WebCore::ContentFilter **)(v10 + 4784);
        if (v12)
        {
          v13 = WebCore::ContentFilter::continueAfterDataReceived(v12, v7);
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v10, v14);
          if (!v13)
            return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v15);
        }
        else
        {
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v10, v6);
        }
      }
      else if (MEMORY[0x12B8] && (WebCore::ContentFilter::continueAfterDataReceived(MEMORY[0x12B8], v25) & 1) == 0)
      {
        return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v15);
      }
      v16 = (unsigned int *)*((_QWORD *)a2 + 1);
      v21 = *(_QWORD *)a2;
      if (v16)
      {
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
      }
      v22 = v16;
      v18 = (unsigned int *)*((_QWORD *)a2 + 2);
      if (v18)
      {
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
      v23 = v18;
      v24[0] = &v21;
      v24[1] = a3;
      WebKit::ServiceWorkerFetchTask::sendToClient<Messages::WebResourceLoader::DidReceiveData>(v5, (uint64_t)v24);
      v20 = v23;
      v23 = 0;
      if (v20)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v20);
      this = v22;
      v22 = 0;
      if (this)
        this = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(this, v15);
      v7 = v25;
      if (v25)
        return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v7, v15);
    }
  }
  return this;
}

BOOL WebKit::ServiceWorkerFetchTask::sendToClient<Messages::WebResourceLoader::DidReceiveData>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  WTF::StringImpl *v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (v2)
    v3 = v2 - 48;
  else
    v3 = 0;
  v5 = *(_DWORD *)(v3 + 8);
  v4 = v3 + 8;
  *(_DWORD *)v4 = v5 + 1;
  v6 = IPC::Connection::send<Messages::WebResourceLoader::DidReceiveData>(*(_QWORD *)(*(_QWORD *)(v4 + 3848) + 64), a2, *(_QWORD *)(v4 + 3024), 0, 0) == 0;
  WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v4, v7);
  return v6;
}

uint64_t *WebKit::ServiceWorkerFetchTask::didFinish(WebKit::ServiceWorkerFetchTask *this, const WebCore::NetworkLoadMetrics *a2)
{
  NSObject *v4;
  uint64_t v5;
  WebCore::TimerBase *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _BYTE v24[12];
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 5);
    *(_DWORD *)v24 = 134218240;
    *(_QWORD *)&v24[4] = this;
    v25 = 2048;
    v26 = v5;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::didFinish:", v24, 0x16u);
  }
  *((_BYTE *)this + 289) = 1;
  v6 = (WebCore::TimerBase *)*((_QWORD *)this + 33);
  if (v6 && (*((_QWORD *)v6 + 4) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase(v6);
  v7 = *((_QWORD *)this + 3);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    v10 = *(_DWORD *)(v8 - 40);
    v9 = (_DWORD *)(v8 - 40);
    *v9 = v10 + 1;
    WebKit::NetworkResourceLoader::serviceWorkerDidFinish((uint64_t)(v9 - 2));
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v9, v11);
  }
  else
  {
    WebKit::NetworkResourceLoader::serviceWorkerDidFinish(0);
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v12)
    v13 = v12 - 48;
  else
    v13 = 0;
  v15 = *(_DWORD *)(v13 + 8);
  v14 = v13 + 8;
  *(_DWORD *)v14 = v15 + 1;
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 3848) + 64);
  v17 = *(_QWORD *)(v14 + 3024);
  v18 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v18 = 2666;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)(v18 + 528) = v18 + 16;
  *(_QWORD *)(v18 + 536) = v18 + 16;
  *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v18 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
  *(_QWORD *)v24 = v18;
  IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode((IPC::Encoder *)v18, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl(v16, (uint64_t *)v24, 0, 0);
  v20 = *(IPC::Encoder **)v24;
  *(_QWORD *)v24 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v19);
    WTF::fastFree(v21, v22);
  }
  WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v14, (WTF::StringImpl *)v19);
  return WebKit::ServiceWorkerFetchTask::cancelPreloadIfNecessary((uint64_t *)this);
}

void WebKit::ServiceWorkerFetchTask::didNotHandle(WebKit::ServiceWorkerFetchTask *this)
{
  NSObject *v2;
  uint64_t v3;
  WebCore::TimerBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  WebKit::ServiceWorkerFetchTask *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 289))
  {
    v2 = qword_1ECE71848;
    if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *((_QWORD *)this + 5);
      v11 = 134218240;
      v12 = this;
      v13 = 2048;
      v14 = v3;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::didNotHandle:", (uint8_t *)&v11, 0x16u);
    }
    v4 = (WebCore::TimerBase *)*((_QWORD *)this + 33);
    if (v4 && (*((_QWORD *)v4 + 4) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase(v4);
    WebKit::ServiceWorkerFetchTask::softUpdateIfNeeded(this);
    v5 = *((_QWORD *)this + 35);
    if (v5 && !*(_BYTE *)(v5 + 3008))
    {
      WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(this);
    }
    else
    {
      *((_BYTE *)this + 289) = 1;
      v6 = *((_QWORD *)this + 3);
      if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
      {
        v9 = *(_DWORD *)(v7 - 40);
        v8 = (_DWORD *)(v7 - 40);
        *v8 = v9 + 1;
        WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle((WebKit::NetworkResourceLoader *)(v8 - 2), this);
        WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v8, v10);
      }
      else
      {
        WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle(0, this);
      }
    }
  }
}

void WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(WebKit::ServiceWorkerFetchTask *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebKit::ServiceWorkerFetchTask *v7;
  WebKit::ServiceWorkerFetchTask *v8;
  WebKit::ServiceWorkerFetchTask *v9;
  int v10;
  WebKit::ServiceWorkerFetchTask *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 5);
    v10 = 134218240;
    v11 = this;
    v12 = 2048;
    v13 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::loadResponseFromPreloader", (uint8_t *)&v10, 0x16u);
  }
  if (!*((_BYTE *)this + 291))
  {
    *((_BYTE *)this + 291) = 1;
    v4 = *((_QWORD *)this + 35);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    if (v5)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    v7 = (WebKit::ServiceWorkerFetchTask *)WTF::fastMalloc((WTF *)0x10);
    v8 = v7;
    *(_QWORD *)v7 = &off_1E34C3C38;
    *((_QWORD *)v7 + 1) = v5;
    if (*(_BYTE *)(v4 + 3484) || *(_QWORD *)(v4 + 3416))
    {
      WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(void)::$_0,void>::call(v7);
    }
    else
    {
      v9 = *(WebKit::ServiceWorkerFetchTask **)(v4 + 3504);
      *(_QWORD *)(v4 + 3504) = v7;
      v8 = v9;
      if (!v9)
        return;
    }
    (*(void (**)(WebKit::ServiceWorkerFetchTask *))(*(_QWORD *)v8 + 8))(v8);
  }
}

void WebKit::ServiceWorkerFetchTask::usePreload(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  int v4;
  WTF::StringImpl *v5;

  if (!*((_BYTE *)this + 289))
  {
    if (*((_QWORD *)this + 35))
    {
      WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(this);
    }
    else
    {
      *((_BYTE *)this + 289) = 1;
      v1 = *((_QWORD *)this + 3);
      if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
      {
        v4 = *(_DWORD *)(v2 - 40);
        v3 = (_DWORD *)(v2 - 40);
        *v3 = v4 + 1;
        WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle((WebKit::NetworkResourceLoader *)(v3 - 2), this);
        WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v3, v5);
      }
      else
      {
        WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle(0, this);
      }
    }
  }
}

void WebKit::ServiceWorkerFetchTask::cancelFromClient(WebKit::ServiceWorkerFetchTask *this)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **v9;
  _BYTE buf[24];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 5);
    v4 = *((unsigned __int8 *)this + 289);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v3;
    *(_WORD *)&buf[22] = 1024;
    v11 = v4;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::cancelFromClient: isDone=%d", buf, 0x1Cu);
  }
  if (!*((_BYTE *)this + 289))
  {
    *(_QWORD *)buf = (char *)this + 48;
    *(_QWORD *)&buf[8] = (char *)this + 56;
    *(_QWORD *)&buf[16] = (char *)this + 40;
    v5 = *((_QWORD *)this + 4);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
        if (v7)
          v8 = v7 - 48;
        else
          v8 = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, *(unsigned __int8 ***)(v8 + 64));
        IPC::Connection::send<Messages::WebSWContextManagerConnection::CancelFetch>((uint64_t)v9, (uint64_t **)buf, 0, 0, 0);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v9);
      }
    }
  }
}

void WebKit::ServiceWorkerFetchTask::continueDidReceiveFetchResponse(WebKit::ServiceWorkerFetchTask *this)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WebKit::ServiceWorkerFetchTask *v9;
  WebKit::ServiceWorkerFetchTask *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  __int128 v27;
  WTF::StringImpl *v28;
  CFTypeRef v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  IPC::Encoder *v37;
  _BYTE buf[32];
  __int128 v39;
  WTF::StringImpl *v40;
  int v41;
  __int16 v42;
  CFTypeRef cf;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 5);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::continueDidReceiveFetchResponse:", buf, 0x16u);
  }
  if (*((_BYTE *)this + 291))
  {
    v4 = qword_1ECE71848;
    if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *((_QWORD *)this + 5);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v5;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::loadBodyFromPreloader", buf, 0x16u);
    }
    v6 = *((_QWORD *)this + 35);
    if (v6)
    {
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
      v7 = (unsigned int *)*((_QWORD *)this + 1);
      if (v7)
      {
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
      }
      v9 = (WebKit::ServiceWorkerFetchTask *)WTF::fastMalloc((WTF *)0x18);
      v10 = v9;
      *(_QWORD *)v9 = &off_1E34C3C60;
      *((_QWORD *)v9 + 1) = this;
      *((_QWORD *)v9 + 2) = v7;
      if (*(_BYTE *)(v6 + 3484) || (v31 = *(_QWORD *)(v6 + 3416)) == 0)
      {
        *(_QWORD *)buf = 0;
        WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadBodyFromPreloader(void)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer const,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer const>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer const>> &&,unsigned long long>::call(v9, (WebCore::FragmentedSharedBuffer **)buf, 0);
        (*(void (**)(WebKit::ServiceWorkerFetchTask *))(*(_QWORD *)v10 + 8))(v10);
      }
      else
      {
        v32 = *(_QWORD *)(v6 + 3512);
        *(_QWORD *)(v6 + 3512) = v10;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v31 = *(_QWORD *)(v6 + 3416);
        }
        *(_QWORD *)(v6 + 3416) = 0;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 16))(v31, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
      return;
    }
    v21 = qword_1ECE71848;
    if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
    {
      v35 = *((_QWORD *)this + 5);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v35;
      _os_log_error_impl(&dword_196BCC000, v21, OS_LOG_TYPE_ERROR, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::loadBodyFromPreloader preloader is null", buf, 0x16u);
    }
    v22 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
    if (v22)
    {
      if (v22 == 1)
      {
        v23 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v23 = *(WTF::StringImpl **)buf;
      }
    }
    else
    {
      v23 = 0;
    }
    v24 = WebCore::ResourceRequestBase::url((WebKit::ServiceWorkerFetchTask *)((char *)this + 64));
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = *(WTF::StringImpl **)buf;
    if (v23)
      *(_DWORD *)v23 += 2;
    *(_QWORD *)buf = v23;
    v26 = *(_DWORD **)v24;
    if (*(_QWORD *)v24)
      *v26 += 2;
    *(_QWORD *)&buf[8] = v26;
    v27 = *(_OWORD *)(v24 + 24);
    *(_OWORD *)&buf[16] = *(_OWORD *)(v24 + 8);
    v39 = v27;
    if (v25)
      *(_DWORD *)v25 += 2;
    v40 = v25;
    v41 = 0;
    v42 = 3;
    cf = 0;
    v44 = 1;
    WebKit::ServiceWorkerFetchTask::didFail(this, (const WebCore::ResourceError *)buf);
    v29 = cf;
    cf = 0;
    if (v29)
      CFRelease(v29);
    v30 = v40;
    v40 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
    v33 = *(WTF::StringImpl **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v28);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::destroy(v34, v28);
        if (!v25)
          goto LABEL_52;
LABEL_50:
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::destroy(v25, v28);
          if (!v23)
            return;
          goto LABEL_55;
        }
        *(_DWORD *)v25 -= 2;
LABEL_52:
        if (!v23)
          return;
LABEL_55:
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v28);
        else
          *(_DWORD *)v23 -= 2;
        return;
      }
      *(_DWORD *)v34 -= 2;
    }
    if (!v25)
      goto LABEL_52;
    goto LABEL_50;
  }
  *(_QWORD *)buf = (char *)this + 48;
  *(_QWORD *)&buf[8] = (char *)this + 56;
  *(_QWORD *)&buf[16] = (char *)this + 40;
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 128) + 8);
      if (v13)
        v14 = v13 - 48;
      else
        v14 = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v36, *(unsigned __int8 ***)(v14 + 64));
      v15 = v36;
      v16 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v16 = 2694;
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 528) = v16 + 16;
      *(_QWORD *)(v16 + 536) = v16 + 16;
      *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v16 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
      v37 = (IPC::Encoder *)v16;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v16, (uint64_t **)buf);
      IPC::Connection::sendMessageImpl((uint64_t)v15, (uint64_t *)&v37, 0, 0);
      v18 = v37;
      v37 = 0;
      if (v18)
      {
        IPC::Encoder::~Encoder(v18, v17);
        WTF::fastFree(v19, v20);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v36);
    }
  }
}

_DWORD *WebKit::ServiceWorkerFetchTask::continueFetchTaskWith(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::RefCountedBase *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  WTF::StringImpl *v17;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    if (v6)
      LODWORD(v6) = *(_QWORD *)(v6 + 8) != 0;
    v19 = 134218496;
    v20 = a1;
    v21 = 2048;
    v22 = v5;
    v23 = 1024;
    v24 = v6;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [fetchIdentifier=%llu] ServiceWorkerFetchTask::continueFetchTaskWith: (hasServiceWorkerConnection=%d)", (uint8_t *)&v19, 0x1Cu);
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v9 = (_DWORD *)(v8 - 48);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  v10 = v9 + 2;
  ++v9[2];
  v11 = *(_QWORD *)(a1 + 32);
  if (v11 && *(_QWORD *)(v11 + 8))
  {
    if (*(_QWORD *)(a1 + 264))
      WebCore::TimerBase::start();
    WebCore::ResourceRequestBase::RequestData::operator=(a1 + 64, a2);
    WTF::String::operator=((WTF::StringImpl **)(a1 + 216), (WTF::StringImpl *)(a2 + 152));
    WTF::String::operator=((WTF::StringImpl **)(a1 + 224), (WTF::StringImpl *)(a2 + 160));
    v12 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    v13 = *(WTF::RefCountedBase **)(a1 + 232);
    *(_QWORD *)(a1 + 232) = v12;
    if (v13)
      WTF::RefCounted<WebCore::FormData>::deref(v13);
    v14 = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 240) = v14;
    v15 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    v16 = *(const void **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v15;
    if (v16)
      CFRelease(v16);
    WebKit::ServiceWorkerFetchTask::startFetch((WebKit::ServiceWorkerFetchTask *)a1);
  }
  else
  {
    WebKit::NetworkResourceLoader::serviceWorkerDidNotHandle((WebKit::NetworkResourceLoader *)v9, (WebKit::ServiceWorkerFetchTask *)a1);
  }
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v10, v17);
}

void WebKit::ServiceWorkerFetchTask::preloadResponseIsReady(WebKit::ServiceWorkerFetchTask *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  __int128 v5;
  WTF::StringImpl *v6;
  const void *v7;
  WTF::StringImpl *v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::ResourceError *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  const void *v21;
  WTF::StringImpl *v22;
  CFTypeRef v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  WebCore::ResourceResponseBase *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  WTF::StringImpl *v42;
  int v43;
  __int16 v44;
  CFTypeRef v45;
  char v46;
  CFTypeRef cf;
  char v48;
  unsigned __int8 **v49;

  v2 = *((_QWORD *)this + 35);
  if (*((_BYTE *)this + 291))
  {
    if (*(_BYTE *)(v2 + 3484))
    {
      v3 = *(WTF::StringImpl **)(v2 + 3424);
      if (v3)
        *(_DWORD *)v3 += 2;
      v38 = v3;
      v4 = *(WTF::StringImpl **)(v2 + 3432);
      if (v4)
        *(_DWORD *)v4 += 2;
      v39 = v4;
      v5 = *(_OWORD *)(v2 + 3456);
      v40 = *(_OWORD *)(v2 + 3440);
      v41 = v5;
      v6 = *(WTF::StringImpl **)(v2 + 3472);
      if (v6)
        *(_DWORD *)v6 += 2;
      v42 = v6;
      v43 = *(_DWORD *)(v2 + 3480);
      v44 = *(_WORD *)(v2 + 3484);
      v7 = *(const void **)(v2 + 3488);
      v45 = v7;
      if (v7)
        CFRetain(v7);
      v46 = *(_BYTE *)(v2 + 3496);
      WebKit::ServiceWorkerFetchTask::didFail(this, (const WebCore::ResourceError *)&v38);
      v9 = v45;
      v45 = 0;
      if (v9)
        CFRelease(v9);
      v10 = v42;
      v42 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v8);
        else
          *(_DWORD *)v10 -= 2;
      }
      v24 = v39;
      v39 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v8);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = v38;
      v38 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v8);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
    else
    {
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v38, (const WebCore::ResourceResponseBase *)(v2 + 3160));
      v21 = *(const void **)(v2 + 3400);
      cf = v21;
      if (v21)
        CFRetain(v21);
      v48 = *(_BYTE *)(v2 + 3408);
      if (WebCore::ResourceResponseBase::isRedirection((WebCore::ResourceResponseBase *)&v38)
        && (WebCore::ResourceResponseBase::httpHeaderFields((WebCore::ResourceResponseBase *)&v38),
            WebCore::HTTPHeaderMap::contains()))
      {
        WebKit::ServiceWorkerFetchTask::processRedirectResponse(this, (uint64_t)&v38, 0);
      }
      else
      {
        WebKit::ServiceWorkerFetchTask::processResponse(this, (uint64_t)&v38, 1, 0);
      }
      v23 = cf;
      cf = 0;
      if (v23)
        CFRelease(v23);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v38, v22);
    }
  }
  else if (v2 && *(_BYTE *)(v2 + 3008))
  {
    v11 = *((_QWORD *)this + 4);
    if (*(_BYTE *)(v2 + 3484))
    {
      if (!v11)
        return;
      v12 = *(_QWORD *)(v11 + 8);
      if (!v12)
        return;
      v13 = (WebCore::ResourceError *)(v2 + 3424);
      v14 = (uint64_t *)((char *)this + 48);
      v15 = (uint64_t *)((char *)this + 56);
      v16 = (uint64_t *)((char *)this + 40);
      v17 = *(_QWORD *)(*(_QWORD *)(v12 + 128) + 8);
      if (v17)
        v18 = v17 - 48;
      else
        v18 = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, *(unsigned __int8 ***)(v18 + 64));
      v19 = v49;
      v20 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v20 = 2706;
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 528) = v20 + 16;
      *(_QWORD *)(v20 + 536) = v20 + 16;
      *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v20 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
      v38 = (WTF::StringImpl *)v20;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v20, v14);
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v20, v15);
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v20, v16);
      IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v20, v13);
    }
    else
    {
      if (!v11)
        return;
      v26 = *(_QWORD *)(v11 + 8);
      if (!v26)
        return;
      v27 = (uint64_t *)((char *)this + 48);
      v28 = (uint64_t *)((char *)this + 56);
      v29 = (uint64_t *)((char *)this + 40);
      v30 = (WebCore::ResourceResponseBase *)(v2 + 3160);
      v31 = *(_QWORD *)(*(_QWORD *)(v26 + 128) + 8);
      if (v31)
        v32 = v31 - 48;
      else
        v32 = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, *(unsigned __int8 ***)(v32 + 64));
      v19 = v49;
      v33 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v33 = 2707;
      *(_QWORD *)(v33 + 8) = 0;
      *(_QWORD *)(v33 + 528) = v33 + 16;
      *(_QWORD *)(v33 + 536) = v33 + 16;
      *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v33 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
      v38 = (WTF::StringImpl *)v33;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v33, v27);
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v33, v28);
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v33, v29);
      IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v33, v30);
    }
    IPC::Connection::sendMessageImpl((uint64_t)v19, (uint64_t *)&v38, 0, 0);
    v35 = v38;
    v38 = 0;
    if (v35)
    {
      IPC::Encoder::~Encoder(v35, v34);
      WTF::fastFree(v36, v37);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v49);
  }
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::cancel(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  *(_BYTE *)(this + 3521) = 1;
  v2 = *(_QWORD *)(this + 3416);
  if (v2)
  {
    *(_QWORD *)(this + 3416) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 2);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
  {
    this = *(_QWORD *)(v3 + 2992);
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
  }
  return this;
}

uint64_t WebKit::ServiceWorkerFetchTask::convertToDownload(uint64_t a1, uint64_t *a2, uint64_t a3, WebCore::ResourceRequest *a4, WebCore::ResourceResponseBase *a5)
{
  uint64_t v8;
  WebKit::NetworkLoad *v9;
  void *v11;
  void *v12;
  WebKit::NetworkLoad *v13;
  WTF *v14;
  void *v15;
  uint64_t result;
  uint64_t v18;
  WebKit::NetworkLoad *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebKit::NetworkLoad *v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  WebKit::NetworkLoad *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  WebKit::NetworkLoad *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  WebKit::NetworkLoad *v43;

  v40 = a3;
  v8 = *(_QWORD *)(a1 + 280);
  if (v8)
  {
    v9 = *(WebKit::NetworkLoad **)(v8 + 24);
    if (v9)
    {
      *(_QWORD *)(v8 + 24) = 0;
      v43 = v9;
      std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(v8 + 24), 0);
      v41 = 0;
      v42 = 0;
      WebKit::DownloadManager::convertNetworkLoadToDownload(a2, a3, (uint64_t *)&v43, (uint64_t *)(v8 + 3416), (uint64_t)&v41, a4, a5);
      WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v11);
      v13 = v43;
      v43 = 0;
      if (v13)
      {
        WebKit::NetworkLoad::~NetworkLoad(v13, v12);
        WTF::fastFree(v14, v15);
      }
      return 1;
    }
    return 0;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
    return 0;
  result = *(_QWORD *)(v18 + 8);
  if (result)
  {
    result = WebKit::WebSWServerConnection::session((WebKit::WebSWServerConnection *)result);
    v43 = (WebKit::NetworkLoad *)result;
    if (result)
    {
      v19 = (WebKit::NetworkLoad *)result;
      v20 = *(_DWORD *)(result + 16) + 1;
      *(_DWORD *)(result + 16) = v20;
      v21 = *(_QWORD *)(a1 + 32);
      if (v21 && *(_QWORD *)(v21 + 8))
      {
        *(_BYTE *)(a1 + 289) = 1;
        v39 = 0;
        v22 = *(_QWORD *)(a1 + 24);
        if (v22 && (v23 = *(_QWORD *)(v22 + 8)) != 0)
        {
          v24 = v23 - 48;
          ++*(_DWORD *)(v23 - 40);
        }
        else
        {
          v24 = 0;
        }
        v25 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0xC90);
        v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
        *v26 = off_1E34C3A30;
        v26[1] = a1;
        v26[2] = &v39;
        v26[3] = &v43;
        v26[4] = a4;
        v26[5] = a5;
        v26[6] = &v40;
        v41 = v26;
        WebKit::NetworkLoad::NetworkLoad(v25, v24, (uint64_t)v19, &v41);
        v38 = v25;
        (*(void (**)(_QWORD *))(*v26 + 8))(v26);
        WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v24 + 8), v27);
        v28 = v39;
        v39 = 0;
        v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v29 = &off_1E34C3C88;
        v29[1] = v28;
        v37 = v29;
        v41 = 0;
        v42 = 0;
        WebKit::DownloadManager::convertNetworkLoadToDownload(a2, v40, (uint64_t *)&v38, (uint64_t *)&v37, (uint64_t)&v41, a4, a5);
        WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v30);
        v32 = (uint64_t)v37;
        v37 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        v33 = v38;
        v38 = 0;
        if (v33)
        {
          WebKit::NetworkLoad::~NetworkLoad(v33, v31);
          WTF::fastFree(v34, v35);
        }
        v36 = v39;
        v39 = 0;
        if (v36)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v36 + 8));
        v19 = v43;
        if (!v43)
          return 1;
        v20 = *((_DWORD *)v43 + 4);
        result = 1;
        if (!v20)
          goto LABEL_27;
      }
      else
      {
        result = 0;
        if (!v20)
        {
LABEL_27:
          result = 286;
          __break(0xC471u);
          return result;
        }
      }
      *((_DWORD *)v19 + 4) = v20 - 1;
    }
  }
  return result;
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::shouldCaptureExtraNetworkLoadMetrics(WebKit::ServiceWorkerNavigationPreloader *this)
{
  return *((unsigned __int8 *)this + 3522);
}

WebKit::NetworkLoad *WebKit::ServiceWorkerNavigationPreloader::didFailLoading(WTF::StringImpl **this, CFTypeRef *a2)
{
  NSObject *v4;
  __int128 v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v10;
  WTF::StringImpl **v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 134217984;
    v11 = this;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "ServiceWorkerNavigationPreloader::didFailLoading %p", (uint8_t *)&v10, 0xCu);
  }
  WTF::String::operator=(this + 428, (WTF::StringImpl *)a2);
  WTF::String::operator=(this + 429, (WTF::StringImpl *)(a2 + 1));
  v5 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 215) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 216) = v5;
  WTF::String::operator=(this + 434, (WTF::StringImpl *)(a2 + 6));
  v6 = *((_DWORD *)a2 + 14);
  *((_WORD *)this + 1742) = *((_WORD *)a2 + 30);
  *((_DWORD *)this + 870) = v6;
  v7 = (WTF::StringImpl *)a2[8];
  if (v7)
    CFRetain(a2[8]);
  v8 = this[436];
  this[436] = v7;
  if (v8)
    CFRelease(v8);
  *((_BYTE *)this + 3496) = *((_BYTE *)a2 + 72);
  return WebKit::ServiceWorkerNavigationPreloader::didComplete(this);
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::loadFromNetwork(WebKit::NetworkLoad **this)
{
  NSObject *v2;
  WebKit::NetworkLoad *v3;
  WebKit::NetworkSession *v4;
  WebKit::NetworkLoad *v5;
  uint64_t result;
  int v7;
  WebKit::ServiceWorkerNavigationPreloader *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 134217984;
    v8 = (WebKit::ServiceWorkerNavigationPreloader *)this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "ServiceWorkerNavigationPreloader::loadFromNetwork %p", (uint8_t *)&v7, 0xCu);
  }
  if (*((_BYTE *)this + 3008))
    WebCore::ResourceRequestBase::addHTTPHeaderField();
  v3 = this[4];
  if (v3)
    v4 = (WebKit::NetworkSession *)*((_QWORD *)v3 + 1);
  else
    v4 = 0;
  v5 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0xC90);
  WebKit::NetworkLoad::NetworkLoad((uint64_t)v5, (uint64_t)this, (uint64_t)(this + 6), v4);
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](this + 3, v5);
  result = *((_QWORD *)this[3] + 374);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void WebKit::ServiceWorkerNavigationPreloader::~ServiceWorkerNavigationPreloader(WebKit::ServiceWorkerNavigationPreloader *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  const void *v10;
  WTF::StringImpl *v11;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const void *v16;
  const void *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  v3 = *((_QWORD *)this + 439);
  *((_QWORD *)this + 439) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 438);
  *((_QWORD *)this + 438) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (const void *)*((_QWORD *)this + 436);
  *((_QWORD *)this + 436) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 434);
  *((_QWORD *)this + 434) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 429);
  *((_QWORD *)this + 429) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 428);
  *((_QWORD *)this + 428) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (const void *)*((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::ServiceWorkerNavigationPreloader *)((char *)this + 3160), a2);
  v12 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = 0;
  if (v12)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v12);
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 390);
  *((_QWORD *)this + 390) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 378, 0);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (*((_BYTE *)this + 2984))
  {
    v16 = (const void *)*((_QWORD *)this + 372);
    *((_QWORD *)this + 372) = 0;
    if (v16)
      CFRelease(v16);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2936, v14);
  if (*((_BYTE *)this + 2912))
    WebKit::NavigationActionData::~NavigationActionData((WebKit::ServiceWorkerNavigationPreloader *)((char *)this + 352));
  v17 = (const void *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v17)
    CFRelease(v17);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::ServiceWorkerNavigationPreloader *)((char *)this + 136));
  v19 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v19)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v19, v18);
  v20 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v20)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v20, v18);
  v21 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v18);
    }
  }
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 3, 0);
  v25 = *((_QWORD *)this + 1);
  if (v25)
  {
    *(_QWORD *)(v25 + 8) = 0;
    v26 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v26)
    {
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, v24);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  _DWORD *v2;
  void *v3;

  WebKit::ServiceWorkerNavigationPreloader::~ServiceWorkerNavigationPreloader(this, a2);
  if (v2[4])
    bzero(v2, 0xDD0uLL);
  else
    WTF::fastFree((WTF *)v2, v3);
}

WebKit::NetworkLoad *WebKit::ServiceWorkerNavigationPreloader::loadWithCacheEntry(WebKit::ServiceWorkerNavigationPreloader *this, WebKit::NetworkCache::Entry *a2)
{
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  _QWORD *v13;
  _BYTE v14[240];
  CFTypeRef cf;
  char v16;

  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v14, (WebKit::NetworkCache::Entry *)((char *)a2 + 80));
  v4 = (const void *)*((_QWORD *)a2 + 40);
  cf = v4;
  if (v4)
    CFRetain(v4);
  v16 = *((_BYTE *)a2 + 328);
  v5 = (unsigned int *)*((_QWORD *)a2 + 70);
  if (v5
    || (WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord((unsigned int **)a2),
        (v5 = (unsigned int *)*((_QWORD *)a2 + 70)) != 0))
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = &off_1E34C3CD8;
  v9[1] = v5;
  v9[2] = v7;
  v13 = v9;
  WebKit::ServiceWorkerNavigationPreloader::didReceiveResponse(this, v14, 0, &v13);
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v14, v10);
  return WebKit::ServiceWorkerNavigationPreloader::didComplete((WebKit::NetworkLoad **)this);
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSObject *v7;
  WebKit::NetworkCache::Entry *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;
  uint64_t result;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v18 = 134217984;
    v19 = a1;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "ServiceWorkerNavigationPreloader::didReceiveResponse %p", (uint8_t *)&v18, 0xCu);
  }
  if (WebCore::ResourceResponseBase::isRedirection((WebCore::ResourceResponseBase *)a2))
    *(_WORD *)(a2 + 232) |= 0x300u;
  if (WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2) == 304
    && (v8 = *(WebKit::NetworkCache::Entry **)(a1 + 3024)) != 0)
  {
    *(_QWORD *)(a1 + 3024) = 0;
    WebKit::ServiceWorkerNavigationPreloader::loadWithCacheEntry((WebKit::ServiceWorkerNavigationPreloader *)a1, v8);
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    WebKit::NetworkCache::Entry::~Entry(v8, v10);
    return WTF::fastFree(v11, v12);
  }
  else
  {
    WebCore::ResourceResponseBase::operator=(a1 + 3160, a2);
    v14 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    v15 = *(const void **)(a1 + 3400);
    *(_QWORD *)(a1 + 3400) = v14;
    if (v15)
      CFRelease(v15);
    *(_BYTE *)(a1 + 3408) = *(_BYTE *)(a2 + 248);
    v16 = *a4;
    *a4 = 0;
    result = *(_QWORD *)(a1 + 3416);
    *(_QWORD *)(a1 + 3416) = v16;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v17 = *(_QWORD *)(a1 + 3504);
    *(_QWORD *)(a1 + 3504) = 0;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  return result;
}

WebKit::NetworkLoad *WebKit::ServiceWorkerNavigationPreloader::didComplete(WebKit::NetworkLoad **this)
{
  WebKit::NetworkLoad *result;
  WebKit::NetworkLoad *v3;
  WebKit::NetworkLoad *v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;

  result = std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](this + 3, 0);
  v3 = this[438];
  v4 = this[439];
  *((_OWORD *)this + 219) = 0u;
  if (v3)
    result = (WebKit::NetworkLoad *)(*(uint64_t (**)(WebKit::NetworkLoad *))(*(_QWORD *)v3 + 16))(v3);
  if (v4)
  {
    v7 = 0;
    (*(void (**)(WebKit::NetworkLoad *, unsigned int **, _QWORD))(*(_QWORD *)v4 + 16))(v4, &v7, 0);
    v6 = v7;
    v7 = 0;
    if (v6)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v5);
    result = (WebKit::NetworkLoad *)(*(uint64_t (**)(WebKit::NetworkLoad *))(*(_QWORD *)v4 + 8))(v4);
  }
  if (v3)
    return (WebKit::NetworkLoad *)(*(uint64_t (**)(WebKit::NetworkLoad *))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::willSendRedirectedRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v8 = *(unsigned int **)(a1 + 8);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = *a5;
  *a5 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E34C3D00;
  v11[1] = v8;
  v11[2] = v10;
  v13 = v11;
  WebKit::ServiceWorkerNavigationPreloader::didReceiveResponse(a1, a4, 0, (uint64_t *)&v13);
  result = (uint64_t)v13;
  if (v13)
    return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

unsigned int *WebKit::ServiceWorkerNavigationPreloader::didReceiveBuffer(unsigned int *this, const WebCore::FragmentedSharedBuffer *a2)
{
  unsigned int v2;
  void *v3;
  unsigned int *v4;

  if (*((_QWORD *)this + 439))
  {
    do
      v2 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v2 + 1, (unsigned int *)a2));
    v4 = (unsigned int *)a2;
    (*(void (**)(_QWORD, unsigned int **))(**((_QWORD **)this + 439) + 16))(*((_QWORD *)this + 439), &v4);
    this = v4;
    v4 = 0;
    if (this)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(this, v3);
  }
  return this;
}

WebKit::NetworkLoad *WebKit::ServiceWorkerNavigationPreloader::didFinishLoading(WebKit::ServiceWorkerNavigationPreloader *this, const WebCore::NetworkLoadMetrics *a2)
{
  NSObject *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v11;
  int v13;
  WebKit::ServiceWorkerNavigationPreloader *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 134217984;
    v14 = this;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "ServiceWorkerNavigationPreloader::didFinishLoading %p", (uint8_t *)&v13, 0xCu);
  }
  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 3032) = *(_OWORD *)a2;
  *(_OWORD *)((char *)this + 3048) = v5;
  v6 = *((_OWORD *)a2 + 2);
  v7 = *((_OWORD *)a2 + 3);
  v8 = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 389) = *((_QWORD *)a2 + 10);
  *(_OWORD *)((char *)this + 3080) = v7;
  *(_OWORD *)((char *)this + 3096) = v8;
  *(_OWORD *)((char *)this + 3064) = v6;
  WTF::String::operator=((WTF::StringImpl **)this + 390, (const WebCore::NetworkLoadMetrics *)((char *)a2 + 88));
  v9 = *((_OWORD *)a2 + 6);
  *((_QWORD *)this + 393) = *((_QWORD *)a2 + 14);
  *(_OWORD *)((char *)this + 3128) = v9;
  v10 = (_DWORD *)*((_QWORD *)a2 + 15);
  if (v10)
    ++*v10;
  v11 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = v10;
  if (v11)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v11);
  return WebKit::ServiceWorkerNavigationPreloader::didComplete((WebKit::NetworkLoad **)this);
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(uint64_t a1, uint64_t a2, uint64_t a3, char a4, const WebCore::ResourceRequest *a5, uint64_t *a6)
{
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  WebKit::NetworkCache::Cache *v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CFTypeRef v35;
  uint64_t v36;
  CFTypeRef v37;
  WTF *v39;
  CFTypeRef v40[5];
  uint64_t v41[6];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  CFTypeRef cf;
  char v55;
  uint64_t v56;
  _BYTE v57[32];

  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E34C3898;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 24) = v11;
  WTF::URL::URL(a1 + 32, (uint64_t *)a3);
  WTF::URL::URL(a1 + 72, (uint64_t *)(a3 + 40));
  *(_BYTE *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 112, a3 + 80);
  WTF::URL::URL(a1 + 144, (uint64_t *)(a3 + 112));
  v12 = *(_OWORD *)(a3 + 160);
  v13 = *(_OWORD *)(a3 + 176);
  v14 = *(_OWORD *)(a3 + 192);
  *(_WORD *)(a1 + 240) = *(_WORD *)(a3 + 208);
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 192) = v12;
  v15 = *(_QWORD *)(a3 + 216);
  *(_QWORD *)(a3 + 216) = 0;
  *(_QWORD *)(a1 + 248) = v15;
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a3 + 224);
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  if (*(_BYTE *)(a3 + 248))
  {
    v16 = *(_QWORD *)(a3 + 232);
    *(_QWORD *)(a3 + 232) = 0;
    *(_QWORD *)(a1 + 264) = v16;
    *(_WORD *)(a1 + 272) = *(_WORD *)(a3 + 240);
    *(_BYTE *)(a1 + 280) = 1;
  }
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a3 + 256);
  *(_QWORD *)(a1 + 304) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v17 = *(unsigned int **)(a2 + 8);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 312) = v17;
  *(_WORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 349) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_BYTE *)(a1 + 420) = 1;
  *(_QWORD *)(a1 + 424) = 0;
  if (*(_QWORD *)(a2 + 608))
  {
    WebCore::ResourceRequestBase::setCachePolicy();
    v19 = *(WebKit::NetworkCache::Cache **)(a2 + 608);
    memset(v57, 0, sizeof(v57));
    v20 = *(_QWORD *)(a1 + 8);
    if (v20)
      goto LABEL_22;
    v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = a1;
    v22 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v20;
    if (!v22)
      goto LABEL_22;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v21);
    }
    v20 = *(_QWORD *)(a1 + 8);
    if (v20)
    {
LABEL_22:
      do
        v25 = __ldaxr((unsigned int *)v20);
      while (__stlxr(v25 + 1, (unsigned int *)v20));
    }
    v39 = (WTF *)v20;
    WebCore::ResourceRequest::ResourceRequest(v40, a5);
    v55 = a4;
    v26 = WTF::fastMalloc((WTF *)0xE8);
    *(_QWORD *)v26 = off_1E34C3D28;
    *(_QWORD *)(v26 + 8) = a1;
    *(_QWORD *)(v26 + 16) = v39;
    WTF::URL::URL(v26 + 24, (uint64_t *)v40);
    WTF::URL::URL(v26 + 64, v41);
    *(_QWORD *)(v26 + 104) = v41[5];
    *(_QWORD *)(v26 + 112) = v42;
    v27 = *((_QWORD *)&v42 + 1);
    v42 = 0u;
    *(_QWORD *)(v26 + 120) = v27;
    v28 = v43;
    v43 = 0;
    *(_QWORD *)(v26 + 128) = v28;
    v29 = v44;
    v44 = 0;
    *(_QWORD *)(v26 + 136) = v29;
    v30 = v45;
    v45 = 0;
    *(_QWORD *)(v26 + 144) = v30;
    v31 = v46;
    v46 = 0;
    *(_QWORD *)(v26 + 152) = v31;
    v32 = v47;
    v47 = 0;
    *(_QWORD *)(v26 + 160) = v32;
    LODWORD(v31) = v48;
    *(_BYTE *)(v26 + 172) = v49;
    *(_DWORD *)(v26 + 168) = v31;
    *(_QWORD *)(v26 + 176) = v50;
    v33 = *((_QWORD *)&v50 + 1);
    v50 = 0u;
    *(_QWORD *)(v26 + 184) = v33;
    *(_QWORD *)(v26 + 192) = v51;
    v34 = v52;
    *(_BYTE *)(v26 + 208) = v53;
    *(_QWORD *)(v26 + 200) = v34;
    v35 = cf;
    v51 = 0;
    cf = 0;
    *(_QWORD *)(v26 + 216) = v35;
    *(_BYTE *)(v26 + 224) = v55;
    v56 = v26;
    WebKit::NetworkCache::Cache::retrieve(v19, a5, (const WebCore::ResourceRequest *)v57, 256, 1, 0, (WTF::MonotonicTime *)&v56);
    v36 = v56;
    v56 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = cf;
    cf = 0;
    if (v37)
      CFRelease(v37);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v40);
  }
  else
  {
    WebKit::ServiceWorkerSoftUpdateLoader::loadFromNetwork(a1, (WebKit::NetworkSession *)a2, (uint64_t)a5);
  }
  return a1;
}

WTF *WebKit::ServiceWorkerSoftUpdateLoader::loadFromNetwork(uint64_t a1, WebKit::NetworkSession *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::RefCountedBase *v11;
  WTF::RefCountedBase *v12;
  const void *v13;
  CFTypeRef v14;
  WebKit::NetworkLoad *v15;
  void *v16;
  uint64_t v17;
  CFTypeRef v18;
  CFTypeRef v19;
  WTF::StringImpl *v20;
  WTF *v21;
  WTF *result;
  _BYTE v23[32];
  WTF *v24;
  WTF *v25;
  _BYTE v26[152];
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::RefCountedBase *v29;
  uint64_t v30;
  char v31;
  CFTypeRef v32;
  __int16 v33;
  char v34;
  char v35;
  _BYTE v36[2584];
  uint64_t v37;
  CFTypeRef cf;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v23);
  v34 = 1;
  v33 = 1;
  v35 = 1;
  WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v26, a3);
  v7 = *(WTF::StringImpl **)(a3 + 152);
  *(_QWORD *)(a3 + 152) = 0;
  v8 = v27;
  v27 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)(a3 + 160);
  *(_QWORD *)(a3 + 160) = 0;
  v10 = v28;
  v28 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::RefCountedBase **)(a3 + 168);
  *(_QWORD *)(a3 + 168) = 0;
  v12 = v29;
  v29 = v11;
  if (v12)
    WTF::RefCounted<WebCore::FormData>::deref(v12);
  v30 = *(_QWORD *)(a3 + 176);
  v31 = *(_BYTE *)(a3 + 184);
  v13 = *(const void **)(a3 + 192);
  *(_QWORD *)(a3 + 192) = 0;
  v14 = v32;
  v32 = v13;
  if (v14)
    CFRelease(v14);
  v15 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0xC90);
  WebKit::NetworkLoad::NetworkLoad((uint64_t)v15, a1, (uint64_t)v23, a2);
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 304), v15);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 2992);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  *((_BYTE *)a2 + 818) = 1;
  if (v39)
  {
    v18 = cf;
    cf = 0;
    if (v18)
      CFRelease(v18);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v16);
  if (v36[2560])
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v36);
  v19 = v32;
  v32 = 0;
  if (v19)
    CFRelease(v19);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v26);
  v21 = v25;
  v25 = 0;
  if (v21)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v21, v20);
  result = v24;
  v24 = 0;
  if (result)
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v20);
  return result;
}

void WebKit::ServiceWorkerSoftUpdateLoader::~ServiceWorkerSoftUpdateLoader(WebKit::ServiceWorkerSoftUpdateLoader *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  CFTypeRef v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebCore::TextResourceDecoder *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  WTF::StringImpl *v33;
  int v34;
  __int16 v35;
  CFTypeRef cf;
  char v37;
  uint64_t v38;
  _QWORD v39[5];
  __int128 v40;
  __int128 v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  __int128 v48;
  __int128 v49;
  WTF::StringImpl *v50;
  int v51;
  __int16 v52;
  CFTypeRef v53;
  char v54;

  if (*((_QWORD *)this + 3))
  {
    v30 = 0;
    WTF::URL::invalidate((WTF::URL *)&v30);
    v33 = 0;
    v34 = 0;
    v35 = 3;
    cf = 0;
    v37 = 1;
    v38 = 0;
    v39[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v39);
    v42 = 0;
    v40 = 0u;
    v41 = 0u;
    v44 = 0;
    v45 = 0;
    v43 = 0;
    v46 = 0;
    v3 = v30;
    if (v30)
      *(_DWORD *)v30 += 2;
    v47 = v3;
    v48 = v31;
    v49 = v32;
    v4 = v33;
    if (v33)
      *(_DWORD *)v33 += 2;
    v50 = v4;
    v51 = v34;
    v52 = v35;
    v53 = cf;
    if (cf)
      CFRetain(cf);
    v54 = v37;
    v5 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, &v38);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v38, v6);
    v7 = cf;
    cf = 0;
    if (v7)
      CFRelease(v7);
    v8 = v33;
    v33 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v30;
    v30 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (const void *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WebCore::TextResourceDecoder *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v13)
    WTF::RefCounted<WebCore::TextResourceDecoder>::deref(v13);
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)this + 48, 0);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 336, v14);
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (unsigned int *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v17);
    }
  }
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 38, 0);
  WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebKit::ServiceWorkerSoftUpdateLoader *)((char *)this + 32), v23);
  v25 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 1);
  if (v26)
  {
    *(_QWORD *)(v26 + 8) = 0;
    v27 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v24);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::ServiceWorkerSoftUpdateLoader::~ServiceWorkerSoftUpdateLoader(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 25) = 0u;
    *((_OWORD *)v2 + 26) = 0u;
    *((_OWORD *)v2 + 23) = 0u;
    *((_OWORD *)v2 + 24) = 0u;
    *((_OWORD *)v2 + 21) = 0u;
    *((_OWORD *)v2 + 22) = 0u;
    *((_OWORD *)v2 + 19) = 0u;
    *((_OWORD *)v2 + 20) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_OWORD *)v2 + 18) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree(v2, v3);
  }
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::fail(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  _DWORD *v7;
  const void *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD v12[5];
  __int128 v13;
  __int128 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  __int128 v21;
  __int128 v22;
  _DWORD *v23;
  int v24;
  __int16 v25;
  const void *v26;
  char v27;

  if (*(_QWORD *)(result + 24))
  {
    v3 = result;
    v11 = 0;
    v12[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v12);
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    v17 = 0;
    v18 = 0;
    v16 = 0;
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v4 += 2;
    v19 = v4;
    v5 = *(_DWORD **)(a2 + 8);
    if (v5)
      *v5 += 2;
    v20 = v5;
    v6 = *(_OWORD *)(a2 + 32);
    v21 = *(_OWORD *)(a2 + 16);
    v22 = v6;
    v7 = *(_DWORD **)(a2 + 48);
    if (v7)
      *v7 += 2;
    v23 = v7;
    v24 = *(_DWORD *)(a2 + 56);
    v25 = *(_WORD *)(a2 + 60);
    v8 = *(const void **)(a2 + 64);
    v26 = v8;
    if (v8)
      CFRetain(v8);
    v27 = *(_BYTE *)(a2 + 72);
    v9 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v11, v10);
    return WebKit::ServiceWorkerSoftUpdateLoader::didComplete((WebKit::NetworkLoad **)v3);
  }
  return result;
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::didComplete(WebKit::NetworkLoad **this)
{
  uint64_t result;
  WebKit::NetworkLoad *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebKit::ServiceWorkerSoftUpdateLoader *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  result = (uint64_t)std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](this + 38, 0);
  v3 = this[39];
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 1);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 16) + 1;
      *(_DWORD *)(v4 + 16) = v5;
      v6 = *(_QWORD *)(v4 + 728);
      if (v6)
      {
        v7 = *(_DWORD *)(v6 - 8);
        v8 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
        v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        v11 = v7 & ((v10 >> 31) ^ v10);
        v12 = *(WebKit::ServiceWorkerSoftUpdateLoader **)(v6 + 8 * v11);
        if (v12 != (WebKit::ServiceWorkerSoftUpdateLoader *)this)
        {
          v13 = 1;
          while (v12)
          {
            v11 = ((_DWORD)v11 + v13) & v7;
            v12 = *(WebKit::ServiceWorkerSoftUpdateLoader **)(v6 + 8 * v11);
            ++v13;
            if (v12 == (WebKit::ServiceWorkerSoftUpdateLoader *)this)
              goto LABEL_10;
          }
          v11 = *(unsigned int *)(v6 - 4);
        }
LABEL_10:
        if (v11 != *(_DWORD *)(v6 - 4))
        {
          v14 = (uint64_t *)(v4 + 728);
          result = *(_QWORD *)(v6 + 8 * v11);
          *(_QWORD *)(v6 + 8 * v11) = -1;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++*(_DWORD *)(*v14 - 16);
          v15 = *v14;
          if (*v14)
            v16 = *(_DWORD *)(v15 - 12) - 1;
          else
            v16 = -1;
          *(_DWORD *)(v15 - 12) = v16;
          v17 = *v14;
          if (*v14)
          {
            v18 = 6 * *(_DWORD *)(v17 - 12);
            v19 = *(_DWORD *)(v17 - 4);
            if (v18 < v19 && v19 >= 9)
              result = (uint64_t)WTF::HashTable<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>,WTF::HashTraits<std::unique_ptr<WebKit::ServiceWorkerSoftUpdateLoader>>>::rehash((uint64_t *)(v4 + 728), v19 >> 1, 0);
          }
        }
        v5 = *(_DWORD *)(v4 + 16);
      }
      if (v5)
      {
        *(_DWORD *)(v4 + 16) = v5 - 1;
      }
      else
      {
        result = 286;
        __break(0xC471u);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::ServiceWorkerSoftUpdateLoader::loadWithCacheEntry(WTF::StringImpl **this, WebKit::NetworkCache::Entry *a2)
{
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  void *v7;
  const WebCore::NetworkLoadMetrics *v8;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v9;
  WTF::StringImpl *v10;
  const void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  const void *v22;

  WebKit::ServiceWorkerSoftUpdateLoader::processResponse((WebKit::ServiceWorkerSoftUpdateLoader *)&v18, this, (WebKit::NetworkCache::Entry *)((char *)a2 + 80));
  if (v21)
  {
    WebKit::ServiceWorkerSoftUpdateLoader::fail((uint64_t)this, (uint64_t)&v18);
  }
  else
  {
    v5 = (unsigned int *)*((_QWORD *)a2 + 70);
    if (v5
      || (WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord((unsigned int **)a2),
          (v5 = (unsigned int *)*((_QWORD *)a2 + 70)) != 0))
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      WebKit::ServiceWorkerSoftUpdateLoader::didReceiveBuffer((WebKit::ServiceWorkerSoftUpdateLoader *)this, (const WebCore::FragmentedSharedBuffer *)v5);
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, v7);
    }
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v15);
    WebKit::ServiceWorkerSoftUpdateLoader::didFinishLoading((WebKit::ServiceWorkerSoftUpdateLoader *)this, v8);
    v9 = v17;
    v17 = 0;
    if (v9)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v9);
    v10 = v16;
    v16 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v4);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  v11 = v22;
  v22 = 0;
  if (v11)
    CFRelease(v11);
  v12 = v20;
  v20 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v4);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v4);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::ServiceWorkerSoftUpdateLoader::processResponse(WebKit::ServiceWorkerSoftUpdateLoader *this, WTF::StringImpl **a2, WebCore::ResourceResponseBase *a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  CFTypeRef v15;
  CFTypeRef v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  CFTypeRef v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  void *v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  CFTypeRef v43;
  CFTypeRef v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  __int16 v50;
  CFTypeRef v51;
  char v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54[5];
  WTF::StringImpl *v55;
  int v56;
  __int16 v57;
  CFTypeRef cf;
  char v59;

  WebCore::WorkerScriptLoader::validateWorkerResponse();
  if ((_BYTE)v57)
  {
    v6 = v53;
    v53 = 0;
    *(_QWORD *)this = v6;
    WTF::URL::URL((uint64_t)this + 8, (uint64_t *)v54);
    v8 = v55;
    v55 = 0;
    *((_QWORD *)this + 6) = v8;
    *((_DWORD *)this + 14) = v56;
    *((_WORD *)this + 30) = v57;
    *((_QWORD *)this + 8) = cf;
LABEL_27:
    *((_BYTE *)this + 72) = v59;
    cf = 0;
    goto LABEL_28;
  }
  WebCore::ServiceWorkerJob::validateServiceWorkerResponse();
  v10 = v45;
  v45 = 0;
  v11 = v53;
  v53 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::URL::operator=((uint64_t)v54, (WTF::StringImpl *)&v46);
  v13 = v48;
  v48 = 0;
  v14 = v55;
  v55 = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v56 = v49;
  v57 = v50;
  v15 = v51;
  v51 = 0;
  v16 = cf;
  cf = v15;
  if (v16)
  {
    CFRelease(v16);
    v44 = v51;
    v59 = v52;
    v51 = 0;
    if (v44)
      CFRelease(v44);
  }
  else
  {
    v59 = v52;
    v51 = 0;
  }
  v17 = v48;
  v48 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v46;
  v46 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v12);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v45;
  v45 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v12);
    else
      *(_DWORD *)v19 -= 2;
  }
  if ((_BYTE)v57)
  {
    v20 = v53;
    v53 = 0;
    *(_QWORD *)this = v20;
    WTF::URL::URL((uint64_t)this + 8, (uint64_t *)v54);
    v21 = v55;
    v22 = cf;
    v55 = 0;
    *((_QWORD *)this + 6) = v21;
    *((_DWORD *)this + 14) = v56;
    *((_WORD *)this + 30) = v57;
    *((_QWORD *)this + 8) = v22;
    goto LABEL_27;
  }
  MEMORY[0x19AEB40D4](&v45, a3);
  v27 = *((unsigned int *)a2 + 87);
  if ((_DWORD)v27)
    WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(a2[42], (WTF::StringImpl *)((char *)a2[42] + 16 * v27));
  v28 = a2[42];
  if (v28)
  {
    a2[42] = 0;
    *((_DWORD *)a2 + 86) = 0;
    WTF::fastFree(v28, v26);
  }
  a2[42] = v45;
  v29 = v46;
  v45 = 0;
  v46 = 0;
  a2[43] = v29;
  *((_DWORD *)a2 + 88) = (_DWORD)v47;
  *((_BYTE *)a2 + 356) = BYTE4(v47);
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v26);
  WebCore::obtainCrossOriginEmbedderPolicy();
  *((_WORD *)a2 + 180) = (_WORD)v45;
  v31 = v46;
  v46 = 0;
  v32 = a2[46];
  a2[46] = v31;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v30);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v47;
  v47 = 0;
  v34 = a2[47];
  a2[47] = v33;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::destroy(v34, v30);
      v35 = v47;
      v47 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v30);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v34 -= 2;
      v47 = 0;
    }
  }
  v36 = v46;
  v46 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v30);
    else
      *(_DWORD *)v36 -= 2;
  }
  WebCore::ResourceResponseBase::httpHeaderField();
  v38 = v45;
  v45 = 0;
  v39 = a2[41];
  a2[41] = v38;
  if (v39)
  {
    v40 = *(_DWORD *)v39 - 2;
    if (*(_DWORD *)v39 != 2)
      goto LABEL_64;
    WTF::StringImpl::destroy(v39, v37);
    v39 = v45;
    v45 = 0;
    if (!v39)
      goto LABEL_65;
    v40 = *(_DWORD *)v39 - 2;
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v41);
    else
LABEL_64:
      *(_DWORD *)v39 = v40;
  }
LABEL_65:
  v42 = (WTF::StringImpl *)WebCore::ResourceResponseBase::textEncodingName(a3);
  WTF::String::operator=(a2 + 40, v42);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  WTF::URL::invalidate((WebKit::ServiceWorkerSoftUpdateLoader *)((char *)this + 8));
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)((char *)this + 54) = 0;
  *((_BYTE *)this + 72) = 1;
  v43 = cf;
  cf = 0;
  if (v43)
    CFRelease(v43);
LABEL_28:
  v23 = v55;
  v55 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v7);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v54[0];
  v54[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v7);
    else
      *(_DWORD *)v24 -= 2;
  }
  result = v53;
  v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::didReceiveBuffer(WebKit::ServiceWorkerSoftUpdateLoader *this, const WebCore::FragmentedSharedBuffer *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WebCore::TextResourceDecoder *v5;
  WebCore::TextResourceDecoder *v6;
  WebCore::TextResourceDecoder *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD v11[4];
  WTF::StringImpl *v12;
  WebCore::TextResourceDecoder *v13;

  if (!*((_QWORD *)this + 49))
  {
    v3 = *((_QWORD *)this + 40);
    if (v3 && *(_DWORD *)(v3 + 4))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      PAL::TextEncoding::TextEncoding((PAL::TextEncoding *)v11, (WebKit::ServiceWorkerSoftUpdateLoader *)((char *)this + 320));
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      PAL::TextEncoding::TextEncoding((PAL::TextEncoding *)v11, "UTF-8");
    }
    WebCore::TextResourceDecoder::create((WebCore::TextResourceDecoder *)&v12, (const WTF::String *)v11, 0);
    v5 = v13;
    v13 = 0;
    v6 = (WebCore::TextResourceDecoder *)*((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = v5;
    if (v6)
    {
      WTF::RefCounted<WebCore::TextResourceDecoder>::deref(v6);
      v7 = v13;
      v13 = 0;
      if (v7)
        WTF::RefCounted<WebCore::TextResourceDecoder>::deref(v7);
    }
    v8 = v12;
    v12 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v4);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E34C3D50;
  v9[1] = this;
  v11[0] = v9;
  WebCore::FragmentedSharedBuffer::forEachSegment();
  result = v11[0];
  v11[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::didFinishLoading(WebKit::ServiceWorkerSoftUpdateLoader *this, const WebCore::NetworkLoadMetrics *a2)
{
  WebCore::TextResourceDecoder *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  const void *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22[2];
  __int128 v23;
  __int128 v24;
  const void *v25;
  _DWORD v26[5];
  char v27;
  __int16 v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  _QWORD v33[8];
  char v34;

  v3 = (WebCore::TextResourceDecoder *)*((_QWORD *)this + 49);
  if (v3)
  {
    WebCore::TextResourceDecoder::flush(v3);
    if (*((_DWORD *)this + 104) || *((_QWORD *)this + 51))
    {
      if (v22[0])
      {
        v19 = *((_QWORD *)v22[0] + 1);
        v20 = *((unsigned int *)v22[0] + 1) | ((unint64_t)((*((_DWORD *)v22[0] + 4) >> 2) & 1) << 32);
      }
      else
      {
        v19 = 0;
        v20 = 0x100000000;
      }
      WTF::StringBuilder::append((uint64_t)this + 400, v19, v20);
      v5 = v22[0];
    }
    else
    {
      WTF::String::operator=((WTF::StringImpl **)this + 50, (WTF::StringImpl *)v22);
      v5 = v22[0];
      v6 = v22[0] ? *((_DWORD *)v22[0] + 1) : 0;
      *((_DWORD *)this + 104) = v6;
    }
    v22[0] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 50);
  if (v7
    || (WTF::StringBuilder::shrinkToFit((WebKit::ServiceWorkerSoftUpdateLoader *)((char *)this + 400)),
        WTF::StringBuilder::reifyString((WebKit::ServiceWorkerSoftUpdateLoader *)((char *)this + 400)),
        (v7 = (WTF::StringImpl *)*((_QWORD *)this + 50)) != 0))
  {
    *(_DWORD *)v7 += 2;
  }
  v21 = v7;
  WebCore::ScriptBuffer::ScriptBuffer((WebCore::ScriptBuffer *)v22, (const WTF::String *)&v21);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  if (v8)
    *(_DWORD *)v8 += 2;
  v22[1] = v8;
  v9 = *(_OWORD *)((char *)this + 56);
  v23 = *(_OWORD *)((char *)this + 40);
  v24 = v9;
  v10 = (const void *)*((_QWORD *)this + 53);
  v25 = v10;
  if (v10)
    CFRetain(v10);
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v26, (uint64_t *)this + 42);
  v26[4] = *((_DWORD *)this + 88);
  v27 = *((_BYTE *)this + 356);
  v28 = *((_WORD *)this + 180);
  v11 = (_DWORD *)*((_QWORD *)this + 46);
  if (v11)
    *v11 += 2;
  v29 = v11;
  v12 = (_DWORD *)*((_QWORD *)this + 47);
  if (v12)
    *v12 += 2;
  v30 = v12;
  v13 = (_DWORD *)*((_QWORD *)this + 41);
  if (v13)
    *v13 += 2;
  v32 = 0;
  v33[0] = 0;
  v31 = v13;
  WTF::URL::invalidate((WTF::URL *)v33);
  v33[7] = 0;
  memset(&v33[5], 0, 14);
  v34 = 1;
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, v22);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)v22, v15);
  v17 = v21;
  v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  return WebKit::ServiceWorkerSoftUpdateLoader::didComplete((WebKit::NetworkLoad **)this);
}

void WebKit::ServiceWorkerSoftUpdateLoader::willSendRedirectedRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl *v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  CFTypeRef v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  __int16 v18;
  CFTypeRef v19;
  char v20;
  CFTypeRef cf;

  v14 = 0;
  v15 = 0;
  WTF::URL::invalidate((WTF::URL *)&v15);
  v16 = 0;
  v17 = 0;
  v18 = 3;
  v19 = 0;
  v20 = 1;
  WebKit::ServiceWorkerSoftUpdateLoader::fail(a1, (uint64_t)&v14);
  v8 = v19;
  v19 = 0;
  if (v8)
    CFRelease(v8);
  v9 = v16;
  v16 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v14);
  v12 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, &v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = cf;
  cf = 0;
  if (v13)
    CFRelease(v13);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v14);
}

WTF::StringImpl *WebKit::ServiceWorkerSoftUpdateLoader::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *this, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v5;
  WebCore::ResourceResponseBase *v6;
  const void *v7;
  const void *v8;
  WebKit::NetworkCache::Entry *v9;
  uint64_t v10;
  WTF::StringImpl *result;
  uint64_t v12;
  WTF::StringImpl *v13;
  CFTypeRef v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  CFTypeRef cf;

  v7 = (const void *)*((unsigned __int8 *)this + 128);
  if (*((_BYTE *)this + 128))
  {
    v4 = a4;
    v6 = this;
    v5 = a1;
    v7 = (const void *)*((_QWORD *)this + 15);
    if (!v7)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v17 = v7;
  CFRetain(v7);
  v7 = v17;
LABEL_3:
  v8 = *(const void **)(v5 + 424);
  *(_QWORD *)(v5 + 424) = v7;
  if (v8)
    CFRelease(v8);
  if (WebCore::ResourceResponseBase::httpStatusCode(v6) == 304
    && (v9 = *(WebKit::NetworkCache::Entry **)(v5 + 384)) != 0)
  {
    WebKit::ServiceWorkerSoftUpdateLoader::loadWithCacheEntry((WTF::StringImpl **)v5, v9);
    v10 = *v4;
    *v4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 2);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    WebKit::ServiceWorkerSoftUpdateLoader::processResponse((WebKit::ServiceWorkerSoftUpdateLoader *)&v18, (WTF::StringImpl **)v5, v6);
    if (v21)
    {
      WebKit::ServiceWorkerSoftUpdateLoader::fail(v5, (uint64_t)&v18);
      v12 = *v4;
      *v4 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 2);
    }
    else
    {
      v12 = *v4;
      *v4 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v14 = cf;
    cf = 0;
    if (v14)
      CFRelease(v14);
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v19;
    v19 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::ServiceWorkerSoftUpdateLoader::didFailLoading(WebKit::ServiceWorkerSoftUpdateLoader *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  __int128 v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  WTF::StringImpl *v13;
  int v14;
  __int16 v15;
  WTF::StringImpl *v16;
  char v17;

  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v10[0] = v4;
  v5 = a2[1];
  if (v5)
    *(_DWORD *)v5 += 2;
  v10[1] = v5;
  v6 = *((_OWORD *)a2 + 2);
  v11 = *((_OWORD *)a2 + 1);
  v12 = v6;
  v7 = a2[6];
  if (v7)
    *(_DWORD *)v7 += 2;
  v13 = v7;
  v14 = *((_DWORD *)a2 + 14);
  v15 = *((_WORD *)a2 + 30);
  v8 = a2[8];
  v16 = v8;
  if (v8)
  {
    CFRetain(v8);
    v17 = *((_BYTE *)a2 + 72);
    WebKit::ServiceWorkerSoftUpdateLoader::fail((uint64_t)this, (uint64_t)v10);
    CFRelease(v8);
    if (!v7)
      goto LABEL_12;
  }
  else
  {
    v17 = *((_BYTE *)a2 + 72);
    WebKit::ServiceWorkerSoftUpdateLoader::fail((uint64_t)this, (uint64_t)v10);
    if (!v7)
      goto LABEL_12;
  }
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v9);
  else
    *(_DWORD *)v7 -= 2;
LABEL_12:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v9);
      if (!v4)
        return;
      goto LABEL_18;
    }
    *(_DWORD *)v5 -= 2;
  }
  if (!v4)
    return;
LABEL_18:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v9);
  else
    *(_DWORD *)v4 -= 2;
}

uint64_t WebKit::WebSWRegistrationStore::updateTimerFired(WebKit::WebSWRegistrationStore *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34C3A58;
  v4 = (uint64_t)v2;
  WebKit::WebSWRegistrationStore::updateToStorage(this, (WTF::StringImpl *)&v4);
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

uint64_t WebKit::WebSWRegistrationStore::clearAll(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::SecurityOriginData *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;

  v4 = (WebCore::SecurityOriginData *)a1[11];
  if (v4)
  {
    a1[11] = 0;
    WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::deallocateTable(v4, a2);
  }
  if ((a1[8] & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 4));
  v5 = a1[3];
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    ++*(_DWORD *)(v6 + 24);
    result = WebKit::NetworkStorageManager::clearServiceWorkerRegistrations(v6, (uint64_t *)a2);
    v8 = *(_DWORD *)(v6 + 24);
    if (v8)
    {
      *(_DWORD *)(v6 + 24) = v8 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  else
  {
    v9 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::WebSWRegistrationStore::flushChanges(_QWORD *a1, WTF::StringImpl *a2)
{
  if ((a1[8] & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((a1[8] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    return WebKit::WebSWRegistrationStore::updateToStorage(a1, a2);
  WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 4));
  return WebKit::WebSWRegistrationStore::updateToStorage(a1, a2);
}

uint64_t WebKit::WebSWRegistrationStore::updateToStorage(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::SecurityOriginData *v4;
  char *v5;
  char *v6;
  WebCore::SecurityOriginData *v7;
  unsigned int v8;
  WebCore::SecurityOriginData *v9;
  __int128 *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WebCore::SecurityOriginData *v38;
  WTF::StringImpl *v39;
  WebCore::SecurityOriginData *v40;
  int v41;
  uint64_t v42;
  void *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::SecurityOriginData *v49;
  char *v50;

  v47 = 0;
  v48 = 0;
  v45 = 0;
  v46 = 0;
  v4 = (WebCore::SecurityOriginData *)a1[11];
  if (v4)
  {
    if (*((_DWORD *)v4 - 3))
    {
      v5 = (char *)v4 + 688 * *((unsigned int *)v4 - 1);
      v49 = v4;
      v50 = v5;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>,WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::skipEmptyBuckets(&v49);
      v7 = v49;
      v6 = v50;
      v4 = (WebCore::SecurityOriginData *)a1[11];
      goto LABEL_7;
    }
    v8 = *((_DWORD *)v4 - 1);
    v7 = (WebCore::SecurityOriginData *)((char *)v4 + 688 * v8);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v6 = (char *)v4 + 688 * v8;
LABEL_7:
  v49 = v7;
  v50 = v6;
  if (v4)
    v9 = (WebCore::SecurityOriginData *)((char *)v4 + 688 * *((unsigned int *)v4 - 1));
  else
    v9 = 0;
  if (v9 != v7)
  {
    do
    {
      if (*((_BYTE *)v7 + 672))
      {
        v10 = (__int128 *)((char *)v7 + 80);
        if (HIDWORD(v46) == (_DWORD)v46)
        {
          WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerContextData>((uint64_t)&v45, (unint64_t)v10);
        }
        else
        {
          v17 = v45 + 592 * HIDWORD(v46);
          v18 = *v10;
          *(_QWORD *)(v17 + 16) = *((_QWORD *)v7 + 12);
          *(_OWORD *)v17 = v18;
          WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v17 + 24, (uint64_t)v7 + 104);
          *(_QWORD *)(v17 + 376) = *((_QWORD *)v7 + 57);
          v19 = *((_QWORD *)v7 + 58);
          *((_QWORD *)v7 + 58) = 0;
          *(_QWORD *)(v17 + 384) = v19;
          v20 = *((_QWORD *)v7 + 59);
          *((_QWORD *)v7 + 59) = 0;
          *(_QWORD *)(v17 + 400) = 0;
          *(_QWORD *)(v17 + 408) = 0;
          *(_QWORD *)(v17 + 392) = v20;
          v21 = *((_QWORD *)v7 + 60);
          *((_QWORD *)v7 + 60) = 0;
          *(_QWORD *)(v17 + 400) = v21;
          LODWORD(v21) = *((_DWORD *)v7 + 122);
          *((_DWORD *)v7 + 122) = 0;
          *(_DWORD *)(v17 + 408) = v21;
          LODWORD(v21) = *((_DWORD *)v7 + 123);
          *((_DWORD *)v7 + 123) = 0;
          *(_DWORD *)(v17 + 412) = v21;
          LODWORD(v21) = *((_DWORD *)v7 + 124);
          *(_BYTE *)(v17 + 420) = *((_BYTE *)v7 + 500);
          *(_DWORD *)(v17 + 416) = v21;
          *(_WORD *)(v17 + 424) = *((_WORD *)v7 + 252);
          v22 = *((_QWORD *)v7 + 64);
          *((_QWORD *)v7 + 64) = 0;
          *(_QWORD *)(v17 + 432) = v22;
          v23 = *((_QWORD *)v7 + 65);
          *((_QWORD *)v7 + 65) = 0;
          *(_QWORD *)(v17 + 440) = v23;
          v24 = *((_QWORD *)v7 + 66);
          *((_QWORD *)v7 + 66) = 0;
          *(_QWORD *)(v17 + 448) = v24;
          WTF::URL::URL(v17 + 456, (uint64_t *)v7 + 67);
          *(_DWORD *)(v17 + 496) = *((_DWORD *)v7 + 144);
          *(_QWORD *)(v17 + 517) = 0;
          *(_QWORD *)(v17 + 504) = 0;
          *(_QWORD *)(v17 + 512) = 0;
          v25 = *((_QWORD *)v7 + 73);
          *((_QWORD *)v7 + 73) = 0;
          *(_QWORD *)(v17 + 504) = v25;
          LODWORD(v25) = *((_DWORD *)v7 + 148);
          *((_DWORD *)v7 + 148) = 0;
          *(_DWORD *)(v17 + 512) = v25;
          LODWORD(v25) = *((_DWORD *)v7 + 149);
          *((_DWORD *)v7 + 149) = 0;
          *(_DWORD *)(v17 + 516) = v25;
          LODWORD(v25) = *((_DWORD *)v7 + 150);
          *((_DWORD *)v7 + 150) = 0;
          *(_DWORD *)(v17 + 520) = v25;
          LOBYTE(v25) = *((_BYTE *)v7 + 604);
          *((_BYTE *)v7 + 604) = 0;
          *(_BYTE *)(v17 + 524) = v25;
          v26 = *((_OWORD *)v7 + 38);
          v27 = *((_OWORD *)v7 + 40);
          *(_OWORD *)(v17 + 544) = *((_OWORD *)v7 + 39);
          *(_OWORD *)(v17 + 560) = v27;
          *(_OWORD *)(v17 + 528) = v26;
          *(_BYTE *)(v17 + 576) = *((_BYTE *)v7 + 656);
          v28 = *((_QWORD *)v7 + 83);
          *((_QWORD *)v7 + 83) = 0;
          *(_QWORD *)(v17 + 584) = v28;
          ++HIDWORD(v46);
        }
      }
      else
      {
        v11 = HIDWORD(v48);
        if (HIDWORD(v48) == (_DWORD)v48)
        {
          v7 = (WebCore::SecurityOriginData *)WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v47, HIDWORD(v48) + 1, (unint64_t)v7);
          v11 = HIDWORD(v48);
        }
        v12 = v47;
        v13 = v47 + 72 * v11;
        *(_BYTE *)v13 = 0;
        *(_DWORD *)(v13 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v13, (uint64_t)v7);
        v14 = (_DWORD *)*((_QWORD *)v7 + 4);
        if (v14)
          *v14 += 2;
        v15 = v12 + 72 * v11;
        *(_QWORD *)(v15 + 32) = v14;
        v16 = *(_OWORD *)((char *)v7 + 56);
        *(_OWORD *)(v15 + 40) = *(_OWORD *)((char *)v7 + 40);
        *(_OWORD *)(v15 + 56) = v16;
        ++HIDWORD(v48);
      }
      v49 = (WebCore::SecurityOriginData *)((char *)v49 + 688);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>,WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::skipEmptyBuckets(&v49);
      v7 = v49;
    }
    while (v49 != v9);
    v4 = (WebCore::SecurityOriginData *)a1[11];
  }
  if (v4)
  {
    a1[11] = 0;
    WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::deallocateTable(v4, a2);
  }
  v29 = a1[3];
  if (v29 && (v30 = *(_QWORD *)(v29 + 8)) != 0)
  {
    ++*(_DWORD *)(v30 + 24);
    v31 = a1[1];
    if (v31)
      goto LABEL_43;
    v31 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = a1;
    v33 = (unsigned int *)a1[1];
    a1[1] = v31;
    if (!v33)
      goto LABEL_43;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, v32);
    }
    v31 = a1[1];
    if (v31)
    {
LABEL_43:
      do
        v36 = __ldaxr((unsigned int *)v31);
      while (__stlxr(v36 + 1, (unsigned int *)v31));
    }
    v37 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v38 = (WebCore::SecurityOriginData *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v38 = &off_1E34C3DA0;
    *((_QWORD *)v38 + 1) = a1;
    *((_QWORD *)v38 + 2) = v31;
    *((_QWORD *)v38 + 3) = v37;
    v49 = v38;
    WebKit::NetworkStorageManager::updateServiceWorkerRegistrations(v30, &v45, (uint64_t)&v47, (uint64_t *)&v49);
    v40 = v49;
    v49 = 0;
    if (v40)
      (*(void (**)(WebCore::SecurityOriginData *))(*(_QWORD *)v40 + 8))(v40);
    v41 = *(_DWORD *)(v30 + 24);
    if (!v41)
    {
      __break(0xC471u);
      JUMPOUT(0x19715C468);
    }
    *(_DWORD *)(v30 + 24) = v41 - 1;
  }
  else
  {
    v42 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v39);
  return WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v43);
}

uint64_t WebKit::WebSWRegistrationStore::closeFiles(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    ++*(_DWORD *)(v3 + 24);
    result = WebKit::NetworkStorageManager::closeServiceWorkerRegistrationFiles(v3, a2);
    v5 = *(_DWORD *)(v3 + 24);
    if (v5)
    {
      *(_DWORD *)(v3 + 24) = v5 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

double WebKit::WebSWRegistrationStore::updateRegistration(WebKit::WebSWRegistrationStore *this, const WebCore::ServiceWorkerContextData *a2)
{
  WebKit::WebSWRegistrationStore *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  WebCore::ServiceWorkerRegistrationKey *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  double result;
  WebKit::WebSWRegistrationStore *v22;

  v3 = this;
  v4 = (uint64_t *)((char *)this + 88);
  v5 = *((_QWORD *)this + 11);
  v6 = (char *)a2 + 24;
  if (v5
    || (WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::expand((uint64_t *)this + 11, 0), (v5 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::computeHash<WebCore::ServiceWorkerRegistrationKey>((uint64_t)v6) & v7;
  v9 = v5 + 688 * v8;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>((WebCore::ServiceWorkerRegistrationKey *)v9) & 1) == 0)
  {
    v22 = v3;
    v10 = 0;
    v11 = 1;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v9);
      if ((v12 & 1) != 0)
      {
        v10 = v9;
      }
      else if (WebCore::operator==(v9, (uint64_t)v6))
      {
        std::optional<WebCore::ServiceWorkerContextData>::operator=[abi:sn180100]<WebCore::ServiceWorkerContextData const&,void>((WebCore::ServiceWorkerContextData *)(v5 + 688 * v8 + 80), (__int128 *)a2);
        v3 = v22;
        goto LABEL_22;
      }
      v8 = ((_DWORD)v8 + v11) & v7;
      v9 = v5 + 688 * v8;
      v13 = (WebCore::ServiceWorkerRegistrationKey *)WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>((WebCore::ServiceWorkerRegistrationKey *)v9);
      ++v11;
    }
    while (!(_DWORD)v13);
    v3 = v22;
    if (v10)
    {
      WebCore::ServiceWorkerRegistrationKey::emptyKey(v13);
      *(_BYTE *)(v10 + 80) = 0;
      *(_BYTE *)(v10 + 672) = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = v10;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v9, (uint64_t)v6);
  WTF::String::operator=((WTF::StringImpl **)(v9 + 32), (const WebCore::ServiceWorkerContextData *)((char *)a2 + 56));
  v14 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(v9 + 40) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(v9 + 56) = v14;
  std::optional<WebCore::ServiceWorkerContextData>::operator=[abi:sn180100]<WebCore::ServiceWorkerContextData const&,void>((WebCore::ServiceWorkerContextData *)(v9 + 80), (__int128 *)a2);
  v15 = *v4;
  if (*v4)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_22;
    goto LABEL_20;
  }
  if (3 * v20 <= 4 * v19)
LABEL_20:
    WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::expand(v4, v9);
LABEL_22:
  if ((*((_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

double WebKit::WebSWRegistrationStore::removeRegistration(WebKit::WebSWRegistrationStore *this, const WebCore::ServiceWorkerRegistrationKey *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  WTF::StringImpl *v12;
  WebCore::ServiceWorkerRegistrationKey *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  double result;

  v4 = (uint64_t *)((char *)this + 88);
  v5 = *((_QWORD *)this + 11);
  if (v5
    || (WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::expand((uint64_t *)this + 11, 0), (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = WTF::computeHash<WebCore::ServiceWorkerRegistrationKey>((uint64_t)a2) & v6;
  v8 = v5 + 688 * v7;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>((WebCore::ServiceWorkerRegistrationKey *)v8) & 1) != 0)
  {
LABEL_12:
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v8, (uint64_t)a2);
    WTF::String::operator=((WTF::StringImpl **)(v8 + 32), (const WebCore::ServiceWorkerRegistrationKey *)((char *)a2 + 32));
    v15 = *(_OWORD *)((char *)a2 + 56);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)(v8 + 56) = v15;
    if (*(_BYTE *)(v8 + 672))
    {
      WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(v8 + 80), v14);
      *(_BYTE *)(v8 + 672) = 0;
    }
    v16 = *v4;
    if (*v4)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *v4;
    if (*v4)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        goto LABEL_25;
    }
    else if (3 * v21 > 4 * v20)
    {
      goto LABEL_25;
    }
    WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::expand(v4, v8);
    goto LABEL_25;
  }
  v9 = 0;
  v10 = 1;
  while (1)
  {
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v8);
    if ((v11 & 1) == 0)
      break;
    v9 = v8;
LABEL_9:
    v7 = ((_DWORD)v7 + v10) & v6;
    v8 = v5 + 688 * v7;
    v13 = (WebCore::ServiceWorkerRegistrationKey *)WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>((WebCore::ServiceWorkerRegistrationKey *)v8);
    ++v10;
    if ((_DWORD)v13)
    {
      if (v9)
      {
        WebCore::ServiceWorkerRegistrationKey::emptyKey(v13);
        *(_BYTE *)(v9 + 80) = 0;
        *(_BYTE *)(v9 + 672) = 0;
        --*(_DWORD *)(*v4 - 16);
        v8 = v9;
      }
      goto LABEL_12;
    }
  }
  if (!WebCore::operator==(v8, (uint64_t)a2))
    goto LABEL_9;
  v22 = v5 + 688 * v7;
  if (*(_BYTE *)(v22 + 672))
  {
    v23 = (_BYTE *)(v22 + 672);
    WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(v5 + 688 * v7 + 80), v12);
    *v23 = 0;
  }
LABEL_25:
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

void WebKit::WebSharedWorker::~WebSharedWorker(WTF::StringImpl **this)
{
  uint64_t v2;
  void *v3;
  unint64_t *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  _QWORD *v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  void *v24;
  WTF *v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  char v37;

  v2 = WebKit::WebSharedWorker::contextConnection((WebKit::WebSharedWorker *)this);
  if (v2)
  {
    v4 = (unint64_t *)this[20];
    if (v4)
    {
      v5 = v2;
      do
      {
        WebKit::WebSharedWorkerServerToContextConnection::removeSharedWorkerObject(v5, *v4, v4[1]);
        v4 = (unint64_t *)v4[8];
      }
      while (v4);
    }
  }
  if ((_MergedGlobals_70 & 1) != 0)
  {
    if (qword_1ECE729E8)
    {
      v6 = this[1];
      v7 = *(_DWORD *)(qword_1ECE729E8 - 8);
      v8 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = *(WTF::StringImpl **)(qword_1ECE729E8 + 16 * v11);
      if (v12 != v6)
      {
        v13 = 1;
        while (v12)
        {
          v11 = ((_DWORD)v11 + v13) & v7;
          v12 = *(WTF::StringImpl **)(qword_1ECE729E8 + 16 * v11);
          ++v13;
          if (v12 == v6)
            goto LABEL_13;
        }
        v11 = *(unsigned int *)(qword_1ECE729E8 - 4);
      }
LABEL_13:
      if (v11 != *(_DWORD *)(qword_1ECE729E8 - 4))
      {
        v14 = (_QWORD *)(qword_1ECE729E8 + 16 * v11);
        v15 = (unsigned int *)v14[1];
        *v14 = -1;
        v14[1] = 0;
        if (v15)
        {
          do
          {
            v18 = __ldaxr(v15);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v15));
          if (!v19)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v3);
          }
        }
        v16 = qword_1ECE729E8;
        ++*(_DWORD *)(qword_1ECE729E8 - 16);
        if (v16)
          v17 = *(_DWORD *)(v16 - 12) - 1;
        else
          v17 = -1;
        *(_DWORD *)(v16 - 12) = v17;
        if (qword_1ECE729E8)
        {
          v20 = *(_DWORD *)(qword_1ECE729E8 - 4);
          if (6 * *(_DWORD *)(qword_1ECE729E8 - 12) < v20 && v20 >= 9)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v20 >> 1);
        }
      }
    }
  }
  else
  {
    qword_1ECE729E8 = 0;
    _MergedGlobals_70 = 1;
  }
  v22 = this[63];
  this[63] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v22 -= 2;
  }
  std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(this + 46), (WTF::StringImpl *)v3);
  WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)(this + 22), v23);
  v25 = this[20];
  if (v25)
  {
    do
    {
      v26 = (WTF *)*((_QWORD *)v25 + 8);
      WTF::fastFree(v25, v24);
      v25 = v26;
    }
    while (v26);
  }
  v27 = this[19];
  if (v27)
    WTF::fastFree((WTF::StringImpl *)((char *)v27 - 16), v24);
  v28 = this[18];
  this[18] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = this[16];
  this[16] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = this[11];
  this[11] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = *((unsigned int *)this + 20);
  if ((_DWORD)v31 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E34C3A10[v31])(&v36, this + 7);
  *((_DWORD *)this + 20) = -1;
  v32 = *((unsigned int *)this + 12);
  if ((_DWORD)v32 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E34C3A10[v32])(&v37, this + 3);
  *((_DWORD *)this + 12) = -1;
  if (*this)
  {
    *((_QWORD *)*this + 1) = 0;
    v33 = (unsigned int *)*this;
    *this = 0;
    if (v33)
    {
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, v24);
      }
    }
  }
  else
  {
    *this = 0;
  }
}

uint64_t WebKit::WebSharedWorker::contextConnection(WebKit::WebSharedWorker *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;

  v1 = *((_QWORD *)this + 2);
  WebCore::RegistrableDomain::RegistrableDomain(&v6, (WebKit::WebSharedWorker *)((char *)this + 24));
  v3 = WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v1 + 24), &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

WTF::StringImpl **WebCore::RegistrableDomain::RegistrableDomain(WTF::StringImpl **this, const WebCore::SecurityOriginData *a2)
{
  WebCore::RegistrableDomain *v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7[2];

  v3 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host(a2);
  WebCore::RegistrableDomain::registrableDomainFromHost(v3, v7);
  if (v7[0] && *((_DWORD *)v7[0] + 1))
  {
    *this = v7[0];
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = v7[0];
    *this = v7[1];
    v7[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebSharedWorker::launch(WebKit::WebSharedWorker *this, WebKit::WebSharedWorkerServerToContextConnection *a2)
{
  IPC::Encoder *result;

  result = WebKit::WebSharedWorkerServerToContextConnection::launchSharedWorker(a2, this);
  if (*((_BYTE *)this + 513))
    return WebKit::WebSharedWorkerServerToContextConnection::suspendSharedWorker((uint64_t)a2, *((_QWORD *)this + 1));
  return result;
}

IPC::Encoder *WebKit::WebSharedWorker::resumeIfNeeded(IPC::Encoder *this)
{
  IPC::Encoder *v1;

  if (*((_BYTE *)this + 513))
  {
    v1 = this;
    *((_BYTE *)this + 513) = 0;
    this = (IPC::Encoder *)WebKit::WebSharedWorker::contextConnection(this);
    if (this)
      return WebKit::WebSharedWorkerServerToContextConnection::resumeSharedWorker((uint64_t)this, *((_QWORD *)v1 + 1));
  }
  return this;
}

IPC::Encoder *WebKit::WebSharedWorker::removeSharedWorkerObject(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  WTF **v7;
  void *v8;
  uint64_t v9;
  WTF **v10;
  WTF *v11;
  unsigned int v12;
  int v13;
  int i;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD v33[2];
  char v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  __int16 v38;
  char v39;

  v6 = a1 + 19;
  v33[0] = a2;
  v33[1] = a3;
  v34 = 0;
  v35 = 0u;
  v36 = 0u;
  v7 = (WTF **)WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WebKit::WebSharedWorker::Object>(a1 + 19, v33);
  v9 = a1[19];
  if (v9)
    v10 = (WTF **)(v9 + 8 * *(unsigned int *)(v9 - 4));
  else
    v10 = 0;
  if (v10 != v7)
  {
    v11 = *v7;
    if (*v7)
    {
      if (v9)
      {
        v12 = *(_DWORD *)(v9 - 8);
        v37 = -1640531527;
        v38 = 0;
        v39 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v37, v11);
        v13 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v37);
        for (i = 0; ; v13 = i + v15)
        {
          v15 = v13 & v12;
          v16 = *(uint64_t **)(v9 + 8 * v15);
          if (v16 != (uint64_t *)-1)
          {
            if (!v16)
            {
              v20 = *v6;
              if (!*v6)
                goto LABEL_30;
              v21 = (_QWORD *)(v20 + 8 * *(unsigned int *)(v20 - 4));
              goto LABEL_18;
            }
            v18 = *v16;
            v17 = v16[1];
            if (v18 == *(_QWORD *)v11 && v17 == *((_QWORD *)v11 + 1))
              break;
          }
          ++i;
        }
        v21 = (_QWORD *)(v9 + 8 * v15);
        v20 = *v6;
        if (!*v6)
          goto LABEL_19;
LABEL_18:
        v20 += 8 * *(unsigned int *)(v20 - 4);
LABEL_19:
        if ((_QWORD *)v20 != v21)
        {
          *v21 = -1;
          ++*(_DWORD *)(*v6 - 16);
          v22 = *v6;
          v23 = *v6 ? *(_DWORD *)(v22 - 12) - 1 : -1;
          *(_DWORD *)(v22 - 12) = v23;
          v24 = *v6;
          if (*v6)
          {
            v25 = 6 * *(_DWORD *)(v24 - 12);
            v26 = *(_DWORD *)(v24 - 4);
            if (v25 < v26 && v26 >= 9)
              WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::rehash(v6, v26 >> 1, 0);
          }
        }
      }
LABEL_30:
      v28 = *((_QWORD *)v11 + 7);
      v29 = *((_QWORD *)v11 + 8);
      if (v28)
      {
        *(_QWORD *)(v28 + 64) = v29;
        v29 = *((_QWORD *)v11 + 8);
      }
      else
      {
        a1[20] = v29;
      }
      if (v29)
        v30 = (_QWORD *)(v29 + 56);
      else
        v30 = a1 + 21;
      *v30 = v28;
      WTF::fastFree(v11, v8);
    }
  }
  v31 = WebKit::WebSharedWorker::contextConnection((WebKit::WebSharedWorker *)a1);
  if (v31)
    WebKit::WebSharedWorkerServerToContextConnection::removeSharedWorkerObject(v31, a2, a3);
  return WebKit::WebSharedWorker::suspendIfNeeded((IPC::Encoder *)a1);
}

IPC::Encoder *WebKit::WebSharedWorker::suspendIfNeeded(IPC::Encoder *this)
{
  IPC::Encoder *v1;
  uint64_t v2;

  if (!*((_BYTE *)this + 513))
  {
    v1 = this;
    v2 = *((_QWORD *)this + 20);
    if (v2)
    {
      while (*(_BYTE *)(v2 + 16))
      {
        v2 = *(_QWORD *)(v2 + 64);
        if (!v2)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      *((_BYTE *)this + 513) = 1;
      this = (IPC::Encoder *)WebKit::WebSharedWorker::contextConnection(this);
      if (this)
        return WebKit::WebSharedWorkerServerToContextConnection::suspendSharedWorker((uint64_t)this, *((_QWORD *)v1 + 1));
    }
  }
  return this;
}

void WebKit::WebSharedWorkerServer::~WebSharedWorkerServer(WebKit::WebSharedWorkerServer *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::deallocateTable(v3, a2);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v5, a2);
  v6 = *((_QWORD *)this + 2);
  if (v6)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v6, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

void WebKit::WebSharedWorkerServer::requestSharedWorker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 *a6)
{
  uint64_t v7;
  uint64_t *v8;
  int v9;
  _DWORD **v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  _DWORD *v17;
  __int128 v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  NSObject *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  WTF *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  __int128 v57;
  int v58;
  unsigned int v59;
  uint64_t *v60;
  int i;
  unsigned int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v68;
  uint64_t v69;
  _QWORD *v70;
  WTF::StringImpl *v71;
  CFTypeRef v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  NSObject *v92;
  uint64_t v93;
  _QWORD *v94;
  WTF::StringImpl *v95;
  CFTypeRef v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  _QWORD *v99;
  NSObject *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int *v104;
  unsigned int v105;
  _QWORD *v106;
  NSObject *v107;
  uint64_t v108;
  char *v109;
  void *v110;
  WTF *v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  IPC::Encoder *v119;
  WTF *v120;
  void *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  _QWORD *v125;
  unsigned int *v126;
  unsigned int v127;
  _DWORD *v128;
  _DWORD *v129;
  uint64_t v130;
  __int128 v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _DWORD *v138;
  WTF::StringImpl *v139;
  WTF *v140;
  uint64_t *v141;
  uint64_t v142;
  __int128 v144;
  WTF::StringImpl *v147;
  WTF *v148;
  _BYTE buf[62];
  CFTypeRef cf;
  int v151;
  _DWORD *v152;
  __int128 v153;
  __int128 v154;
  _DWORD *v155;
  __int128 v156;
  _BYTE v157[40];
  __int16 v158;
  _DWORD *v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v144 = a3;
  *((_QWORD *)&v144 + 1) = a4;
  if (v7
    || (WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::expand((uint64_t *)(a1 + 40), 0), (v7 = *v8) != 0))
  {
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v9 = 0;
  }
  *(_DWORD *)buf = -1640531527;
  *(_WORD *)&buf[4] = 0;
  buf[6] = 0;
  v10 = (_DWORD **)(a2 + 104);
  WTF::add<WebCore::ClientOrigin,WTF::URL,WTF::String>((unsigned int *)buf, a2, (uint64_t *)(a2 + 64), (uint64_t *)(a2 + 104));
  v11 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf) & v9;
  v12 = v7 + 120 * v11;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v12) & 1) == 0)
  {
    v141 = v8;
    v13 = 0;
    v14 = 1;
    do
    {
      if (*(_QWORD *)(v12 + 64) == -1)
      {
        v13 = v12;
      }
      else if ((WebCore::operator==(v12, a2) & 1) != 0)
      {
        goto LABEL_53;
      }
      v11 = (v11 + v14) & v9;
      v12 = v7 + 120 * v11;
      ++v14;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v12));
    v8 = v141;
    if (v13)
    {
      *(_OWORD *)(v13 + 80) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)v13 = 0u;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      WTF::URL::invalidate((WTF::URL *)(v13 + 64));
      *(_QWORD *)(v13 + 104) = 0;
      *(_QWORD *)(v13 + 112) = 0;
      --*(_DWORD *)(*v141 - 16);
      v12 = v13;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v12, a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v12 + 32, a2 + 32);
  WTF::String::operator=((WTF::StringImpl **)(v12 + 64), (WTF::StringImpl *)(a2 + 64));
  v15 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v12 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v12 + 88) = v15;
  WTF::String::operator=((WTF::StringImpl **)(v12 + 104), (WTF::StringImpl *)(a2 + 104));
  v16 = WTF::fastMalloc((WTF *)0x210);
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)(v16 + 16) = a1;
  *(_BYTE *)(v16 + 24) = 0;
  *(_DWORD *)(v16 + 48) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v16 + 24, a2);
  *(_BYTE *)(v16 + 56) = 0;
  *(_DWORD *)(v16 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v16 + 56, a2 + 32);
  v17 = *(_DWORD **)(a2 + 64);
  if (v17)
    *v17 += 2;
  *(_QWORD *)(v16 + 88) = v17;
  v18 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v16 + 96) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v16 + 112) = v18;
  v19 = *v10;
  if (*v10)
    *v19 += 2;
  *(_QWORD *)(v16 + 128) = v19;
  *(_WORD *)(v16 + 136) = *a6;
  v20 = (_DWORD *)*((_QWORD *)a6 + 1);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(v16 + 184) = 0;
  *(_QWORD *)(v16 + 144) = v20;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 168) = 0u;
  WTF::URL::invalidate((WTF::URL *)(v16 + 184));
  *(_WORD *)(v16 + 256) = 0;
  *(_QWORD *)(v16 + 232) = 0;
  *(_QWORD *)(v16 + 240) = 0;
  *(_QWORD *)(v16 + 224) = 0;
  *(_QWORD *)(v16 + 245) = 0;
  *(_OWORD *)(v16 + 264) = 0u;
  *(_OWORD *)(v16 + 280) = 0u;
  *(_QWORD *)(v16 + 296) = 0;
  WTF::URL::invalidate((WTF::URL *)(v16 + 296));
  *(_QWORD *)(v16 + 352) = 0;
  *(_QWORD *)(v16 + 336) = 0;
  *(_QWORD *)(v16 + 342) = 0;
  *(_BYTE *)(v16 + 360) = 1;
  *(_BYTE *)(v16 + 368) = 0;
  *(_BYTE *)(v16 + 432) = 0;
  *(_BYTE *)(v16 + 448) = 0;
  *(_BYTE *)(v16 + 480) = 0;
  *(_WORD *)(v16 + 496) = 0;
  *(_QWORD *)(v16 + 504) = 0;
  *(_WORD *)(v16 + 512) = 0;
  if ((_MergedGlobals_70 & 1) != 0)
  {
    v21 = qword_1ECE729E8;
    v22 = *(_QWORD *)(v16 + 8);
    if (qword_1ECE729E8)
    {
LABEL_22:
      v23 = *(_DWORD *)(v21 - 8);
      goto LABEL_23;
    }
  }
  else
  {
    qword_1ECE729E8 = 0;
    _MergedGlobals_70 = 1;
    v22 = *(_QWORD *)(v16 + 8);
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand();
  v21 = qword_1ECE729E8;
  if (qword_1ECE729E8)
    goto LABEL_22;
  v23 = 0;
LABEL_23:
  v24 = (v22 + ~(v22 << 32)) ^ ((unint64_t)(v22 + ~(v22 << 32)) >> 22);
  v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
  v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
  v27 = v23 & ((v26 >> 31) ^ v26);
  v28 = (_QWORD *)(v21 + 16 * v27);
  v29 = *v28;
  if (!*v28)
  {
LABEL_31:
    *v28 = v22;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v16, v16);
    v33 = *(unsigned int **)v16;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    v35 = (unsigned int *)v28[1];
    v28[1] = v33;
    if (v35)
    {
      do
      {
        v37 = __ldaxr(v35);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v35));
      if (!v38)
      {
        atomic_store(1u, v35);
        WTF::fastFree((WTF *)v35, v32);
      }
    }
    if (qword_1ECE729E8)
      v36 = *(_DWORD *)(qword_1ECE729E8 - 12) + 1;
    else
      v36 = 1;
    *(_DWORD *)(qword_1ECE729E8 - 12) = v36;
    if (qword_1ECE729E8)
      v39 = *(_DWORD *)(qword_1ECE729E8 - 12);
    else
      v39 = 0;
    v40 = (*(_DWORD *)(qword_1ECE729E8 - 16) + v39);
    v41 = *(unsigned int *)(qword_1ECE729E8 - 4);
    if (v41 > 0x400)
    {
      if (v41 > 2 * v40)
        goto LABEL_46;
    }
    else if (3 * v41 > 4 * v40)
    {
      goto LABEL_46;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand();
    goto LABEL_46;
  }
  v30 = 0;
  v31 = 1;
  while (v29 != v22)
  {
    if (v29 == -1)
      v30 = v28;
    v27 = (v27 + v31) & v23;
    v28 = (_QWORD *)(v21 + 16 * v27);
    v29 = *v28;
    ++v31;
    if (!*v28)
    {
      if (v30)
      {
        *v30 = 0;
        v30[1] = 0;
        --*(_DWORD *)(v21 - 16);
        v28 = v30;
      }
      goto LABEL_31;
    }
  }
LABEL_46:
  std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100]((WTF::StringImpl ***)(v12 + 112), (WTF::StringImpl **)v16);
  v42 = *v8;
  if (*v8)
    v43 = *(_DWORD *)(v42 - 12) + 1;
  else
    v43 = 1;
  *(_DWORD *)(v42 - 12) = v43;
  v44 = *v8;
  if (*v8)
    v45 = *(_DWORD *)(v44 - 12);
  else
    v45 = 0;
  v46 = (*(_DWORD *)(v44 - 16) + v45);
  v47 = *(unsigned int *)(v44 - 4);
  if (v47 > 0x400)
  {
    if (v47 > 2 * v46)
      goto LABEL_53;
    goto LABEL_52;
  }
  if (3 * v47 <= 4 * v46)
LABEL_52:
    v12 = WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::expand(v8, v12);
LABEL_53:
  v48 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    WTF::makeString<unsigned long long,char,unsigned long long>(*((uint64_t *)&v144 + 1), 45, v144, &v147);
    WTF::String::utf8();
    if (v148)
      v49 = (char *)v148 + 16;
    else
      v49 = 0;
    v50 = *(_QWORD *)(*(_QWORD *)(v12 + 112) + 8);
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v49;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v50;
    _os_log_impl(&dword_196BCC000, v48, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::requestSharedWorker: sharedWorkerObjectIdentifier=%{private}s, sharedWorkerIdentifier=%llu", buf, 0x16u);
    v52 = v148;
    v148 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
        WTF::fastFree(v52, v51);
      else
        --*(_DWORD *)v52;
    }
    v53 = v147;
    v147 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v51);
      else
        *(_DWORD *)v53 -= 2;
    }
  }
  v54 = *(_QWORD *)(v12 + 112);
  if ((*(_BYTE *)(v54 + 136) != 0) != (*(_BYTE *)a6 != 0)
    || *(unsigned __int8 *)(v54 + 137) != *((unsigned __int8 *)a6 + 1))
  {
    v68 = qword_1ECE718C0;
    if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v68, OS_LOG_TYPE_ERROR, "WebSharedWorkerServer::requestSharedWorker: A worker already exists with this name but has different type / credentials", buf, 2u);
    }
    v69 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 16), *((uint64_t *)&v144 + 1));
    if (v69)
    {
      v70 = (_QWORD *)v69;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      WTF::URL::invalidate((WTF::URL *)&buf[8]);
      *(_QWORD *)&buf[48] = 0;
      *(_DWORD *)&buf[56] = 0;
      *(_WORD *)&buf[60] = 2;
      cf = 0;
      LOBYTE(v151) = 1;
      WebKit::WebSharedWorkerServerConnection::notifyWorkerObjectOfLoadCompletion(v70, v144, *((uint64_t *)&v144 + 1), (WebCore::ResourceError *)buf);
      v72 = cf;
      cf = 0;
      if (v72)
        CFRelease(v72);
      v73 = *(WTF::StringImpl **)&buf[48];
      *(_QWORD *)&buf[48] = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
          WTF::StringImpl::destroy(v73, v71);
        else
          *(_DWORD *)v73 -= 2;
      }
      v74 = *(WTF::StringImpl **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, v71);
        else
          *(_DWORD *)v74 -= 2;
      }
      v75 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v71);
        else
          *(_DWORD *)v75 -= 2;
      }
    }
    return;
  }
  v56 = (uint64_t *)(v54 + 152);
  v55 = *(_QWORD *)(v54 + 152);
  *(_OWORD *)buf = v144;
  buf[16] = 0;
  v57 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)&buf[24] = *(_OWORD *)a5;
  *(_OWORD *)&buf[40] = v57;
  if (v55
    || (WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::expand((uint64_t *)(v54 + 152), 0), (v55 = *v56) != 0))
  {
    v58 = *(_DWORD *)(v55 - 8);
  }
  else
  {
    v58 = 0;
  }
  LODWORD(v148) = -1640531527;
  WORD2(v148) = 0;
  BYTE6(v148) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)&v148, buf);
  v59 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v148);
  v60 = 0;
  for (i = 1; ; ++i)
  {
    v62 = v59 & v58;
    v63 = (uint64_t *)(v55 + 8 * (v59 & v58));
    v64 = (uint64_t *)*v63;
    if (*v63 == -1)
    {
      v60 = (uint64_t *)(v55 + 8 * v62);
      goto LABEL_80;
    }
    if (!v64)
      break;
    v66 = *v64;
    v65 = v64[1];
    if (v66 == *(_QWORD *)buf && v65 == *(_QWORD *)&buf[8])
      goto LABEL_117;
LABEL_80:
    v59 = i + v62;
  }
  if (v60)
  {
    *v60 = 0;
    --*(_DWORD *)(*v56 - 16);
    v63 = v60;
  }
  v76 = WTF::fastMalloc((WTF *)0x48);
  v77 = *(_OWORD *)&buf[32];
  v78 = *(_QWORD *)&buf[48];
  v79 = *(_OWORD *)buf;
  *(_OWORD *)(v76 + 16) = *(_OWORD *)&buf[16];
  *(_OWORD *)(v76 + 32) = v77;
  *(_OWORD *)v76 = v79;
  *(_QWORD *)(v76 + 56) = 0;
  *(_QWORD *)(v76 + 64) = 0;
  *(_QWORD *)(v76 + 48) = v78;
  *v63 = v76;
  v80 = *v56;
  if (*v56)
    v81 = *(_DWORD *)(v80 - 12) + 1;
  else
    v81 = 1;
  *(_DWORD *)(v80 - 12) = v81;
  v82 = *v56;
  if (*v56)
    v83 = *(_DWORD *)(v82 - 12);
  else
    v83 = 0;
  v84 = (*(_DWORD *)(v82 - 16) + v83);
  v85 = *(unsigned int *)(v82 - 4);
  if (v85 > 0x400)
  {
    if (v85 <= 2 * v84)
LABEL_112:
      v76 = *(_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::expand((uint64_t *)(v54 + 152), (_QWORD **)v63);
  }
  else if (3 * v85 <= 4 * v84)
  {
    goto LABEL_112;
  }
  v86 = *(_QWORD *)(v54 + 168);
  *(_QWORD *)(v76 + 56) = v86;
  *(_QWORD *)(v76 + 64) = 0;
  if (v86)
    v87 = (uint64_t *)(v86 + 64);
  else
    v87 = (uint64_t *)(v54 + 160);
  *v87 = v76;
  *(_QWORD *)(v54 + 168) = v76;
LABEL_117:
  v88 = (_QWORD *)WebKit::WebSharedWorker::contextConnection((WebKit::WebSharedWorker *)v54);
  if (v88)
    WebKit::WebSharedWorkerServerToContextConnection::addSharedWorkerObject(v88, v144, *((uint64_t *)&v144 + 1));
  WebKit::WebSharedWorker::resumeIfNeeded((IPC::Encoder *)v54);
  v89 = *(_QWORD *)(v12 + 112);
  v90 = *(_QWORD *)(v89 + 152);
  if (v90 && (v91 = *(_DWORD *)(v90 - 12), v91 >= 2))
  {
    v92 = qword_1ECE718C0;
    if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v91;
      _os_log_impl(&dword_196BCC000, v92, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::requestSharedWorker: A shared worker with this URL already exists (now shared by %u shared worker objects)", buf, 8u);
      v89 = *(_QWORD *)(v12 + 112);
    }
    if (*(_QWORD *)(v89 + 176))
    {
      v93 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 16), *((uint64_t *)&v144 + 1));
      if (v93)
      {
        v94 = (_QWORD *)v93;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        WTF::URL::invalidate((WTF::URL *)&buf[8]);
        cf = 0;
        *(_QWORD *)&buf[48] = 0;
        *(_QWORD *)&buf[54] = 0;
        LOBYTE(v151) = 1;
        WebKit::WebSharedWorkerServerConnection::notifyWorkerObjectOfLoadCompletion(v94, v144, *((uint64_t *)&v144 + 1), (WebCore::ResourceError *)buf);
        v96 = cf;
        cf = 0;
        if (v96)
          CFRelease(v96);
        v97 = *(WTF::StringImpl **)&buf[48];
        *(_QWORD *)&buf[48] = 0;
        if (v97)
        {
          if (*(_DWORD *)v97 == 2)
            WTF::StringImpl::destroy(v97, v95);
          else
            *(_DWORD *)v97 -= 2;
        }
        v122 = *(WTF::StringImpl **)&buf[8];
        *(_QWORD *)&buf[8] = 0;
        if (v122)
        {
          if (*(_DWORD *)v122 == 2)
            WTF::StringImpl::destroy(v122, v95);
          else
            *(_DWORD *)v122 -= 2;
        }
        v123 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v123)
        {
          if (*(_DWORD *)v123 == 2)
            WTF::StringImpl::destroy(v123, v95);
          else
            *(_DWORD *)v123 -= 2;
        }
        v89 = *(_QWORD *)(v12 + 112);
      }
    }
    if (*(_BYTE *)(v89 + 512))
    {
      v124 = WebKit::WebSharedWorker::contextConnection((WebKit::WebSharedWorker *)v89);
      if (v124)
      {
        v125 = (_QWORD *)v124;
        v142 = *(_QWORD *)(v12 + 112);
        *(_QWORD *)buf = a1;
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
        v126 = *(unsigned int **)a1;
        if (*(_QWORD *)a1)
        {
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 + 1, v126));
        }
        *(_QWORD *)&buf[8] = v126;
        buf[16] = 0;
        *(_DWORD *)&buf[40] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&buf[16], a2);
        buf[48] = 0;
        v151 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&buf[48], a2 + 32);
        v128 = *(_DWORD **)(a2 + 64);
        if (v128)
          *v128 += 2;
        v152 = v128;
        v153 = *(_OWORD *)(a2 + 72);
        v154 = *(_OWORD *)(a2 + 88);
        v129 = *(_DWORD **)(a2 + 104);
        if (v129)
          *v129 += 2;
        v155 = v129;
        v156 = v144;
        v130 = *(_QWORD *)(*(_QWORD *)(v12 + 112) + 8);
        v131 = *(_OWORD *)(a5 + 16);
        *(_OWORD *)&v157[8] = *(_OWORD *)a5;
        *(_QWORD *)v157 = v130;
        *(_OWORD *)&v157[24] = v131;
        v158 = *a6;
        v132 = (_DWORD *)*((_QWORD *)a6 + 1);
        if (v132)
          *v132 += 2;
        v159 = v132;
        v133 = WTF::fastMalloc((WTF *)0xD0);
        *(_QWORD *)v133 = off_1E34C3DC8;
        *(_QWORD *)(v133 + 8) = *(_QWORD *)buf;
        v134 = *(_QWORD *)&buf[8];
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)(v133 + 16) = v134;
        *(_BYTE *)(v133 + 24) = 0;
        *(_DWORD *)(v133 + 48) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v133 + 24, (uint64_t)&buf[16]);
        *(_BYTE *)(v133 + 56) = 0;
        *(_DWORD *)(v133 + 80) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v133 + 56, (uint64_t)&buf[48]);
        WTF::URL::URL(v133 + 88, (uint64_t *)&v152);
        *(_QWORD *)(v133 + 128) = v155;
        v135 = v156;
        v136 = *(_OWORD *)v157;
        v137 = *(_OWORD *)&v157[16];
        *(_QWORD *)(v133 + 184) = *(_QWORD *)&v157[32];
        *(_OWORD *)(v133 + 168) = v137;
        *(_OWORD *)(v133 + 152) = v136;
        *(_OWORD *)(v133 + 136) = v135;
        *(_WORD *)(v133 + 192) = v158;
        v138 = v159;
        v155 = 0;
        v159 = 0;
        *(_QWORD *)(v133 + 200) = v138;
        v148 = (WTF *)v133;
        WebKit::WebSharedWorkerServerToContextConnection::postConnectEvent(v125, v142, (uint64_t *)a5, (uint64_t *)&v148);
        v140 = v148;
        v148 = 0;
        if (v140)
          (*(void (**)(WTF *))(*(_QWORD *)v140 + 8))(v140);
        WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1::~$_1((uint64_t)buf, v139);
      }
    }
  }
  else
  {
    v98 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 16), *((uint64_t *)&v144 + 1));
    if (v98)
    {
      v99 = (_QWORD *)v98;
      v100 = qword_1ECE718C0;
      if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_196BCC000, v100, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::requestSharedWorker: Fetching shared worker script in client", buf, 2u);
        v89 = *(_QWORD *)(v12 + 112);
      }
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
      v101 = *(unsigned int **)a1;
      if (*(_QWORD *)a1)
      {
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 + 1, v101));
      }
      v103 = *(unsigned int **)(v12 + 112);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v103, (uint64_t)v103);
      v104 = *(unsigned int **)v103;
      if (v104)
      {
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 + 1, v104));
      }
      v106 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v106 = &off_1E34C3DF0;
      v106[1] = v101;
      v106[2] = v104;
      v107 = qword_1ECE718C0;
      if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
      {
        v108 = v99[6];
        WTF::makeString<unsigned long long,char,unsigned long long>(*((uint64_t *)&v144 + 1), 45, v144, &v147);
        WTF::String::utf8();
        if (v148)
          v109 = (char *)v148 + 16;
        else
          v109 = 0;
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v99;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v108;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v109;
        _os_log_impl(&dword_196BCC000, v107, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::fetchScriptInClient: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
        v111 = v148;
        v148 = 0;
        if (v111)
        {
          if (*(_DWORD *)v111 == 1)
            WTF::fastFree(v111, v110);
          else
            --*(_DWORD *)v111;
        }
        v112 = v147;
        v147 = 0;
        if (v112)
        {
          if (*(_DWORD *)v112 == 2)
            WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v110);
          else
            *(_DWORD *)v112 -= 2;
        }
      }
      v113 = (*(uint64_t (**)(_QWORD *))(*v99 + 56))(v99);
      v114 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v114 = 2782;
      *(_QWORD *)(v114 + 8) = v113;
      *(_QWORD *)(v114 + 528) = v114 + 16;
      *(_QWORD *)(v114 + 536) = v114 + 16;
      *(_OWORD *)(v114 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v114 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v114);
      v148 = (WTF *)v114;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v114, (uint64_t *)(v89 + 88));
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v114, 8uLL, 8) = v144;
      *(_QWORD *)buf = *((_QWORD *)&v144 + 1);
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v114, (uint64_t *)buf);
      IPC::ArgumentCoder<WebKit::PolicyDecisionConsoleMessage,void>::encode((IPC::Encoder *)v114, v89 + 136);
      v115 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v115 = &off_1E34C3EB8;
      v115[1] = v106;
      v116 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      *(_QWORD *)buf = v115;
      *(_QWORD *)&buf[8] = v116;
      (*(void (**)(_QWORD *, WTF **, _BYTE *, _QWORD))(*v99 + 40))(v99, &v148, buf, 0);
      v118 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v118)
        (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
      v119 = v148;
      v148 = 0;
      if (v119)
      {
        IPC::Encoder::~Encoder(v119, v117);
        WTF::fastFree(v120, v121);
      }
    }
    else
    {
      WebKit::WebSharedWorker::removeSharedWorkerObject((uint64_t *)v89, v144, *((uint64_t *)&v144 + 1));
    }
  }
}

IPC::Encoder *WebKit::WebSharedWorkerServerConnection::notifyWorkerObjectOfLoadCompletion(_QWORD *a1, unint64_t a2, uint64_t a3, WebCore::ResourceError *a4)
{
  NSObject *v8;
  uint64_t v9;
  char *v10;
  _BOOL4 v11;
  void *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *result;
  WTF *v19;
  void *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  _BYTE buf[12];
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  _BOOL4 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a1[6];
    WTF::makeString<unsigned long long,char,unsigned long long>(a3, 45, a2, &v21);
    WTF::String::utf8();
    if (v22)
      v10 = (char *)v22 + 16;
    else
      v10 = 0;
    v11 = *((_BYTE *)a4 + 60) == 0;
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)&buf[4] = a1;
    v24 = 2048;
    v25 = v9;
    v26 = 2082;
    v27 = v10;
    v28 = 1024;
    v29 = v11;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::notifyWorkerObjectOfLoadCompletion: sharedWorkerObjectIdentifier=%{public}s, success=%d", buf, 0x26u);
    v13 = v22;
    v22 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v12);
      else
        --*(_DWORD *)v13;
    }
    v14 = v21;
    v21 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  v16 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v16 = 2783;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 528) = v16 + 16;
  *(_QWORD *)(v16 + 536) = v16 + 16;
  *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v16 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
  v22 = (WTF *)v16;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = a2;
  *(_QWORD *)buf = a3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v16, (uint64_t *)buf);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v16, a4);
  (*(void (**)(_QWORD *, WTF **, _QWORD))(*a1 + 32))(a1, &v22, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

uint64_t WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1::~$_1(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v12;
  char v13;

  v3 = *(WTF::StringImpl **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, uint64_t))off_1E34C3A10[v6])(&v12, a1 + 48);
  *(_DWORD *)(a1 + 72) = -1;
  v7 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_1E34C3A10[v7])(&v13, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  v8 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

uint64_t WebKit::WebSharedWorkerServer::createContextConnection(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t result;
  NSObject *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  unsigned int *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  char v25[8];
  WTF::ASCIICaseInsensitiveHash **v26;
  _QWORD *v27;
  uint8_t *v28;
  uint64_t *v29;
  _QWORD v30[2];
  uint64_t v31[2];
  IPC::Encoder *v32;
  uint8_t buf[32];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v30[0] = a3;
  v30[1] = a4;
  v6 = (uint64_t *)(a1 + 32);
  result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 32), a2);
  if ((result & 1) == 0)
  {
    v8 = qword_1ECE718C0;
    if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::createContextConnection will create a connection", buf, 2u);
    }
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v6, a2, (uint64_t)buf);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(os_unfair_lock_s **)(*(_QWORD *)(v9 + 32) + 32);
    buf[0] = 0;
    v34 = 0;
    v24 = *(_QWORD *)(v9 + 24);
    v25[0] = 2;
    v26 = a2;
    v27 = v30;
    v28 = buf;
    v29 = &v24;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
    v11 = *(unsigned int **)a1;
    if (*(_QWORD *)a1)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    v13 = *a2;
    if (v13)
      *(_DWORD *)v13 += 4;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    v16 = (uint64_t)v14;
    *v14 = &off_1E34C3E40;
    v14[1] = a1;
    v14[2] = v11;
    if (v13)
    {
      v17 = *(_DWORD *)v13;
      *(_DWORD *)v13 += 2;
      v14[3] = v13;
      if (v17)
        *(_DWORD *)v13 = v17;
      else
        WTF::StringImpl::destroy(v13, v15);
    }
    else
    {
      v14[3] = 0;
    }
    v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v19 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v19 = 315;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 528) = v19 + 16;
    *(_QWORD *)(v19 + 536) = v19 + 16;
    *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v19 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
    v32 = (IPC::Encoder *)v19;
    IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&,PAL::SessionID const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&,PAL::SessionID const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v19, (uint64_t)v25);
    v31[0] = v16;
    v31[1] = v18;
    IPC::Connection::sendMessageWithAsyncReply(v10, &v32, v31, 0, 0);
    v21 = v31[0];
    v31[0] = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    result = (uint64_t)v32;
    v32 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v20);
      result = WTF::fastFree(v22, v23);
    }
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        return WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebSharedWorkerServer::addContextConnection(WebKit::WebSharedWorkerServer *this, WebKit::WebSharedWorkerServerToContextConnection *a2)
{
  NSObject *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WTF::ASCIICaseInsensitiveHash **v9;
  int v10;
  unsigned int v11;
  WTF::StringImpl **v12;
  const WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  int v16;
  WTF::StringImpl **v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WebKit::WebSharedWorker *v41;
  unint64_t *i;
  WebKit::WebSharedWorkerServer *v43;
  _BYTE buf[12];
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 256);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a2;
    v45 = 2048;
    v46 = v6;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::addContextConnection(%p) webProcessIdentifier=%llu", buf, 0x16u);
  }
  v7 = (uint64_t *)((char *)this + 24);
  v8 = *((_QWORD *)this + 3);
  v9 = (WTF::ASCIICaseInsensitiveHash **)((char *)a2 + 40);
  v43 = this;
  if (v8
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)this + 3),
        (v8 = *v7) != 0))
  {
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = WTF::ASCIICaseInsensitiveHash::hash(*v9, v5) & v10;
  v12 = (WTF::StringImpl **)(v8 + 16 * v11);
  if ((WTF::equal(*v12, 0, v13) & 1) != 0)
  {
LABEL_13:
    WTF::String::operator=(v12, (WebKit::WebSharedWorkerServerToContextConnection *)((char *)a2 + 40));
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2 + 8);
    v19 = (unsigned int *)*((_QWORD *)a2 + 2);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v21 = (unsigned int *)v12[1];
    v12[1] = (WTF::StringImpl *)v19;
    if (v21)
    {
      do
      {
        v24 = __ldaxr(v21);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v21));
      if (!v25)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v18);
      }
    }
    v22 = *v7;
    if (*v7)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v26 = *v7;
    if (*v7)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_28;
    }
    else if (3 * v29 > 4 * v28)
    {
      goto LABEL_28;
    }
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v7);
    goto LABEL_28;
  }
  v15 = 0;
  v16 = 1;
  while (1)
  {
    v17 = v12;
    if (*v12 != (WTF::StringImpl *)-1)
    {
      v17 = v15;
      if ((WTF::equalIgnoringASCIICase(*v12, *v9, v14) & 1) != 0)
        break;
    }
    v11 = (v11 + v16) & v10;
    v12 = (WTF::StringImpl **)(v8 + 16 * v11);
    ++v16;
    v15 = v17;
    if (WTF::equal(*v12, 0, v14))
    {
      if (v17)
      {
        *v17 = 0;
        v17[1] = 0;
        --*(_DWORD *)(*v7 - 16);
        v12 = v17;
      }
      goto LABEL_13;
    }
  }
LABEL_28:
  v30 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v31 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 256);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a2;
    v45 = 2048;
    v46 = v31;
    _os_log_impl(&dword_196BCC000, v30, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::contextConnectionCreated(%p) webProcessIdentifier=%llu", buf, 0x16u);
  }
  result = WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::begin(*((_QWORD *)v43 + 5));
  v33 = result;
  v35 = v34;
  v36 = *((_QWORD *)v43 + 5);
  if (v36)
    v37 = v36 + 120 * *(unsigned int *)(v36 - 4);
  else
    v37 = 0;
  if (v37 != result)
  {
    while (1)
    {
      WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, (const WebCore::SecurityOriginData *)(*(_QWORD *)(v33 + 112) + 24));
      v40 = WTF::equal(*v9, *(const WTF::StringImpl **)buf, v38);
      result = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (!result)
        goto LABEL_36;
      if (*(_DWORD *)result != 2)
        break;
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v39);
      if (!v40)
        goto LABEL_43;
LABEL_39:
      v41 = *(WebKit::WebSharedWorker **)(v33 + 112);
      for (i = (unint64_t *)*((_QWORD *)v41 + 20); i; i = (unint64_t *)i[8])
        result = WebKit::WebSharedWorkerServerToContextConnection::addSharedWorkerObject(a2, *i, i[1]);
      if (*((_QWORD *)v41 + 22))
        result = (uint64_t)WebKit::WebSharedWorker::launch(v41, a2);
LABEL_43:
      while (1)
      {
        v33 += 120;
        if (v33 == v35)
          break;
        result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v33);
        if ((result & 1) == 0 && *(_QWORD *)(v33 + 64) != -1)
          goto LABEL_48;
      }
      v33 = v35;
LABEL_48:
      if (v33 == v37)
        return result;
    }
    *(_DWORD *)result -= 2;
LABEL_36:
    if (!v40)
      goto LABEL_43;
    goto LABEL_39;
  }
  return result;
}

WTF::StringImpl *WebKit::WebSharedWorkerServer::removeContextConnection(WebKit::WebSharedWorkerServer *this, WebKit::WebSharedWorkerServerToContextConnection *a2)
{
  NSObject *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  WTF::ASCIICaseInsensitiveHash *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  WTF::StringImpl *result;
  _BYTE v31[12];
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 256);
    *(_DWORD *)v31 = 134218240;
    *(_QWORD *)&v31[4] = a2;
    v32 = 2048;
    v33 = v6;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::removeContextConnection(%p) webProcessIdentifier=%llu", v31, 0x16u);
  }
  v7 = (WTF::ASCIICaseInsensitiveHash *)*((_QWORD *)a2 + 5);
  if (v7)
    *(_DWORD *)v7 += 2;
  *(_QWORD *)v31 = v7;
  v8 = (uint64_t *)((char *)this + 24);
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = WTF::ASCIICaseInsensitiveHash::hash(v7, v5) & v10;
    v12 = v9 + 16 * v11;
    if ((WTF::equal(*(WTF **)v12, 0, v13) & 1) != 0)
    {
LABEL_11:
      v16 = *v8;
      if (!*v8)
        goto LABEL_31;
      v12 = v16 + 16 * *(unsigned int *)(v16 - 4);
    }
    else
    {
      v15 = 1;
      while (*(_QWORD *)v12 == -1 || (WTF::equalIgnoringASCIICase(*(WTF **)v12, v7, v14) & 1) == 0)
      {
        v11 = (v11 + v15) & v10;
        v12 = v9 + 16 * v11;
        ++v15;
        if (WTF::equal(*(WTF **)v12, 0, v14))
          goto LABEL_11;
      }
      v16 = *v8;
      if (!*v8)
      {
LABEL_14:
        if (v16 != v12)
        {
          WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>((WTF::StringImpl **)v12, v5);
          v17 = *(unsigned int **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v17)
          {
            do
            {
              v20 = __ldaxr(v17);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v17));
            if (!v21)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, v5);
            }
          }
          ++*(_DWORD *)(*v8 - 16);
          v18 = *v8;
          if (*v8)
            v19 = *(_DWORD *)(v18 - 12) - 1;
          else
            v19 = -1;
          *(_DWORD *)(v18 - 12) = v19;
          v22 = *v8;
          if (*v8)
          {
            v23 = 6 * *(_DWORD *)(v22 - 12);
            v24 = *(_DWORD *)(v22 - 4);
            if (v23 < v24 && v24 >= 9)
              WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash((uint64_t *)this + 3, v24 >> 1);
          }
        }
        goto LABEL_31;
      }
    }
    v16 += 16 * *(unsigned int *)(v16 - 4);
    if (v16 == v12)
      goto LABEL_31;
    goto LABEL_14;
  }
LABEL_31:
  v26 = (uint64_t *)*((_QWORD *)a2 + 6);
  if (v26 && *((_DWORD *)v26 - 3))
  {
    v27 = *((unsigned int *)v26 - 1);
    if ((_DWORD)v27)
    {
      v28 = 16 * v27;
      v29 = &v26[2 * v27];
      while ((unint64_t)(*v26 + 1) <= 1)
      {
        v26 += 2;
        v28 -= 16;
        if (!v28)
        {
          v26 = v29;
          break;
        }
      }
    }
    WebKit::WebSharedWorkerServer::createContextConnection((uint64_t)this, (WTF::ASCIICaseInsensitiveHash **)v31, *v26, 1);
  }
  result = *(WTF::StringImpl **)v31;
  *(_QWORD *)v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebSharedWorkerServer::sharedWorkerObjectIsGoingAway(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  NSObject *v9;
  char *v10;
  void *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::WebSharedWorker *v17;
  uint64_t v18;
  NSObject *v19;
  char *v20;
  _QWORD *v21;
  WTF *v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint8_t buf[4];
  char *v27;
  __int16 v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t *)(a1 + 40);
  v8 = (uint64_t *)WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>(*(_QWORD *)(a1 + 40), a2);
  v9 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v24);
    WTF::String::utf8();
    if (v25)
      v10 = (char *)v25 + 16;
    else
      v10 = 0;
    *(_DWORD *)buf = 136446466;
    v27 = v10;
    v28 = 2048;
    v29 = v8;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::sharedWorkerObjectIsGoingAway: sharedWorkerObjectIdentifier=%{public}s, sharedWorker=%p", buf, 0x16u);
    v12 = v25;
    v25 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v11);
      else
        --*(_DWORD *)v12;
    }
    v13 = v24;
    v24 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
        if (!v8)
          return;
        goto LABEL_13;
      }
      *(_DWORD *)v13 -= 2;
    }
  }
  if (!v8)
    return;
LABEL_13:
  WebKit::WebSharedWorker::removeSharedWorkerObject(v8, a3, a4);
  v14 = v8[19];
  if (v14 && *(_DWORD *)(v14 - 12))
    return;
  v15 = WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>(v7, a2);
  v16 = *v7;
  if (*v7)
    v16 += 120 * *(unsigned int *)(v16 - 4);
  if (v16 == v15)
  {
    v19 = qword_1ECE718C0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
      return;
    v17 = 0;
LABEL_30:
    v20 = 0;
    goto LABEL_31;
  }
  v17 = *(WebKit::WebSharedWorker **)(v15 + 112);
  *(_QWORD *)(v15 + 112) = 0;
  if (*v7)
  {
    v18 = *v7 + 120 * *(unsigned int *)(*v7 - 4);
    if (v18 == v15)
      goto LABEL_23;
  }
  else
  {
    if (!v15)
      goto LABEL_23;
    v18 = 0;
  }
  if (v18 != v15)
    WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::remove(v7, (WTF::StringImpl ***)v15);
LABEL_23:
  v19 = qword_1ECE718C0;
  if (!os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
    goto LABEL_32;
  if (!v17)
    goto LABEL_30;
  v20 = (char *)*((_QWORD *)v17 + 1);
LABEL_31:
  *(_DWORD *)buf = 134218240;
  v27 = v20;
  v28 = 2048;
  v29 = (uint64_t *)v17;
  _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::shutDownSharedWorker: sharedWorkerIdentifier=%llu, sharedWorker=%p", buf, 0x16u);
LABEL_32:
  if (v17)
  {
    v21 = (_QWORD *)WebKit::WebSharedWorker::contextConnection(v17);
    if (v21)
      WebKit::WebSharedWorkerServerToContextConnection::terminateSharedWorker(v21, (uint64_t)v17);
    WebKit::WebSharedWorker::~WebSharedWorker((WTF::StringImpl **)v17);
    WTF::fastFree(v22, v23);
  }
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 16 * (result & v9));
  v13 = *v12;
  v14 = *a3;
  if (*v12)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v13 == v14)
      {
        v26 = *a2;
        if (*a2)
          v27 = *(unsigned int *)(v26 - 4);
        else
          v27 = 0;
        v23 = 0;
        v22 = v26 + 16 * v27;
        goto LABEL_14;
      }
      if (v13 == -1)
        v24 = v12;
      v11 = (v11 + v25) & v9;
      v12 = (_QWORD *)(v8 + 16 * v11);
      v13 = *v12;
      ++v25;
    }
    while (*v12);
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v12 = v24;
    }
  }
  *v12 = v14;
  v15 = *a4;
  *a4 = 0;
  result = v12[1];
  v12[1] = v15;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_13;
LABEL_26:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v12);
    v12 = (_QWORD *)result;
    v18 = *a2;
    if (*a2)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_13;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_26;
LABEL_13:
  v22 = v18 + 16 * v21;
  v23 = 1;
LABEL_14:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v22;
  *(_BYTE *)(a1 + 16) = v23;
  return result;
}

uint64_t WebKit::WebSharedWorkerServer::removeConnection(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t (***v12)();
  _QWORD *v13;
  uint64_t (**v14)();
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE buf[22];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v18 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::take(&v17, (uint64_t *)(a1 + 16), &v18);
  v3 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v17;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v18;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::removeConnection(%p): processIdentifier=%llu", buf, 0x16u);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v4 = WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::begin(*(_QWORD *)(a1 + 40));
  v6 = v4;
  v7 = v5;
  v8 = 0;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    v8 = v9 + 120 * *(unsigned int *)(v9 - 4);
  if (v8 != v4)
  {
    do
    {
      v11 = *(_QWORD *)(v6 + 112);
      v12 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
      *v12 = off_1E34C3E68;
      v12[1] = (uint64_t (**)())&v18;
      v12[2] = (uint64_t (**)())buf;
      v12[3] = (uint64_t (**)())(v6 + 112);
      v13 = *(_QWORD **)(v11 + 160);
      if (v13)
      {
        do
        {
          ((void (*)(uint64_t (***)(), _QWORD, _QWORD, _QWORD *))(*v12)[2])(v12, *v13, v13[1], v13 + 3);
          v13 = (_QWORD *)v13[8];
        }
        while (v13);
        v14 = *v12;
      }
      else
      {
        v14 = off_1E34C3E68;
      }
      ((void (*)(uint64_t (***)()))v14[1])(v12);
      while (1)
      {
        v6 += 120;
        if ((void *)v6 == v7)
          break;
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v6) & 1) == 0
          && *(_QWORD *)(v6 + 64) != -1)
        {
          goto LABEL_18;
        }
      }
      v6 = (uint64_t)v7;
LABEL_18:
      ;
    }
    while (v6 != v8);
    if (*(_DWORD *)&buf[12])
    {
      v15 = *(_QWORD *)buf;
      v16 = (unint64_t)*(unsigned int *)&buf[12] << 7;
      do
      {
        WebKit::WebSharedWorkerServer::sharedWorkerObjectIsGoingAway(a1, v15, *(_QWORD *)(v15 + 112), *(_QWORD *)(v15 + 120));
        v15 += 128;
        v16 -= 128;
      }
      while (v16);
    }
  }
  WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v5);
  result = v17;
  if (v17)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return result;
}

_QWORD *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::take(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  result = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2, a3);
  v6 = *a2;
  if (*a2)
    v6 += 16 * *(unsigned int *)(v6 - 4);
  if ((_QWORD *)v6 == result)
  {
    v7 = 0;
  }
  else
  {
    v7 = result[1];
    result[1] = 0;
    result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::remove(a2, result);
  }
  *a1 = v7;
  return result;
}

void WebKit::WebSharedWorkerServer::postErrorToWorkerObject(uint64_t (**a1)(), uint64_t a2, uint64_t (**a3)(), int a4, int a5, uint64_t (**a6)(), char a7)
{
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t (***v21)();
  uint64_t (**v22)();
  _QWORD *v23;
  char v24;
  int v25;
  int v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v25 = a5;
  v26 = a4;
  v24 = a7;
  if ((_MergedGlobals_70 & 1) != 0)
  {
    if (qword_1ECE729E8)
    {
      v11 = *(_DWORD *)(qword_1ECE729E8 - 8);
      v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(_QWORD *)(qword_1ECE729E8 + 16 * v15);
      if (v16 == a2)
      {
LABEL_7:
        v18 = *(_QWORD *)(qword_1ECE729E8 + 16 * v15 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          goto LABEL_10;
        }
      }
      else
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(_QWORD *)(qword_1ECE729E8 + 16 * v15);
          ++v17;
          if (v16 == a2)
            goto LABEL_7;
        }
      }
    }
    v19 = 0;
  }
  else
  {
    v19 = 0;
    qword_1ECE729E8 = 0;
    _MergedGlobals_70 = 1;
  }
LABEL_10:
  v20 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218240;
    v28 = a2;
    v29 = 2048;
    v30 = v19;
    _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "WebSharedWorkerServer::postErrorToWorkerObject: sharedWorkerIdentifier=%llu, sharedWorker=%p", buf, 0x16u);
    if (!v19)
      return;
  }
  else if (!v19)
  {
    return;
  }
  v21 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x38);
  v22 = off_1E34C3E90;
  *v21 = off_1E34C3E90;
  v21[1] = a1;
  v21[2] = a3;
  v21[3] = (uint64_t (**)())&v26;
  v21[4] = (uint64_t (**)())&v25;
  v21[5] = a6;
  v21[6] = (uint64_t (**)())&v24;
  v23 = *(_QWORD **)(v19 + 160);
  if (v23)
  {
    do
    {
      ((void (*)(uint64_t (***)(), _QWORD, _QWORD, _QWORD *))(*v21)[2])(v21, *v23, v23[1], v23 + 3);
      v23 = (_QWORD *)v23[8];
    }
    while (v23);
    v22 = *v21;
  }
  ((void (*)(uint64_t (***)()))v22[1])(v21);
}

void WebKit::WebSharedWorkerServer::sharedWorkerTerminated(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_ERROR))
  {
    v29 = 134217984;
    v30 = a2;
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "WebSharedWorkerServer::sharedWorkerTerminated: sharedWorkerIdentifier=%llu", (uint8_t *)&v29, 0xCu);
  }
  v7 = *(_QWORD *)(a1 + 40);
  v5 = (uint64_t *)(a1 + 40);
  v6 = v7;
  if (v7)
  {
    v8 = *(_DWORD *)(v6 - 4);
    if (v8)
    {
      v9 = 0;
      v10 = v8 - 1;
      do
      {
        v11 = v10;
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v6 + 120 * v10) & 1) == 0
          && *(_QWORD *)(v6 + 120 * v10 + 64) != -1)
        {
          v13 = v6 + 120 * v10;
          v15 = *(_QWORD *)(v13 + 112);
          v14 = (WTF::StringImpl ***)(v13 + 112);
          if (*(_QWORD *)(v15 + 8) == a2)
          {
            WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::SharedWorkerKey>,WebCore::SharedWorkerKey>(v6 + 120 * v10, v12);
            std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100](v14, 0);
            ++v9;
          }
        }
        --v10;
      }
      while (v11);
      v16 = *v5;
      if (v9)
      {
        *(_DWORD *)(v16 - 16) += v9;
        v17 = *v5;
        if (*v5)
          v18 = *(_DWORD *)(v17 - 12);
        else
          v18 = 0;
        *(_DWORD *)(v17 - 12) = v18 - v9;
        v16 = *v5;
      }
      if (v16)
      {
        v19 = *(_DWORD *)(v16 - 4);
        v20 = *(unsigned int *)(v16 - 12);
        if (v19 >= 9 && 6 * (int)v20 < v19)
        {
          v22 = (v20 - 1) | ((v20 - 1) >> 1) | ((((_DWORD)v20 - 1) | ((v20 - 1) >> 1)) >> 2);
          v23 = v22 | (v22 >> 4) | ((v22 | (v22 >> 4)) >> 8);
          v24 = (v23 | HIWORD(v23)) + 1;
          if (v24 > 0x400)
          {
            if (v24 > 2 * v20)
              goto LABEL_27;
          }
          else if (3 * v24 > 4 * v20)
          {
LABEL_24:
            v25 = (double)v20;
            v26 = (double)v24;
            v27 = 0.604166667;
LABEL_28:
            if (v26 * v27 <= v25)
              LODWORD(v24) = 2 * v24;
            if (v24 <= 8)
              v28 = 8;
            else
              v28 = v24;
            WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::rehash(v5, v28, 0);
            return;
          }
          LODWORD(v24) = 2 * v24;
          if (v24 <= 0x400)
            goto LABEL_24;
LABEL_27:
          v25 = (double)v20;
          v26 = (double)v24;
          v27 = 0.416666667;
          goto LABEL_28;
        }
      }
    }
  }
}

void WebKit::WebSharedWorkerServer::terminateContextConnectionWhenPossible(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 24), a2);
  v5 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134218240;
    v7 = a3;
    v8 = 2048;
    v9 = v4;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::terminateContextConnectionWhenPossible: processIdentifier=%llu, contextConnection=%p", (uint8_t *)&v6, 0x16u);
  }
  if (v4)
  {
    if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 256) == a3)
      *(_BYTE *)(v4 + 112) = 1;
  }
}

uint64_t WebKit::WebSharedWorkerServerConnection::WebSharedWorkerServerConnection(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4, uint64_t a5)
{
  unsigned int *v9;
  unsigned int v10;
  NSObject *v11;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E34C3968;
  *(_QWORD *)(a1 + 8) = &unk_1E34C39C0;
  *(_QWORD *)(a1 + 16) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)(a1 + 24), a4);
  v9 = (unsigned int *)(a2 + 120);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a5;
  v11 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 134218240;
    v14 = a1;
    v15 = 2048;
    v16 = a5;
    _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::WebSharedWorkerServerConnection:", (uint8_t *)&v13, 0x16u);
  }
  return a1;
}

void WebKit::WebSharedWorkerServerConnection::~WebSharedWorkerServerConnection(WebKit::WebSharedWorkerServerConnection *this)
{
  NSObject *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  int v9;
  WebKit::WebSharedWorkerServerConnection *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E34C3968;
  *((_QWORD *)this + 1) = &unk_1E34C39C0;
  v2 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 6);
    v9 = 134218240;
    v10 = this;
    v11 = 2048;
    v12 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::~WebSharedWorkerServerConnection:", (uint8_t *)&v9, 0x16u);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    v5 = v4 + 30;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 3);
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v8);
  WTF::isIntegralOrPointerType(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSharedWorkerServerConnection::~WebSharedWorkerServerConnection(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebSharedWorkerServerConnection::~WebSharedWorkerServerConnection(WebKit::WebSharedWorkerServerConnection *this)
{
  WebKit::WebSharedWorkerServerConnection::~WebSharedWorkerServerConnection((WebKit::WebSharedWorkerServerConnection *)((char *)this - 8));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSharedWorkerServerConnection::~WebSharedWorkerServerConnection((WebKit::WebSharedWorkerServerConnection *)((char *)this - 8));
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebSharedWorkerServerConnection::messageSenderConnection(WebKit::WebSharedWorkerServerConnection *this)
{
  return *((_QWORD *)this + 3);
}

void WebKit::WebSharedWorkerServerConnection::requestSharedWorker(_QWORD *a1, WTF **this, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  WebCore::RegistrableDomain *v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  char PartyForCookies;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  WTF *v24;
  NSObject *v25;
  const char *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WebKit::NetworkSession *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF *v33;
  _BYTE buf[12];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v13 = a1 + 6;
  v12 = a1[6];
  v14 = a1[4];
  v15 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host((WebCore::SecurityOriginData *)this);
  WebCore::RegistrableDomain::uncheckedCreateFromHost(v15, (WTF::StringImpl **)buf);
  PartyForCookies = WebKit::NetworkProcess::allowsFirstPartyForCookies(v14, v12, (WTF **)buf);
  v19 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (!v19)
  {
LABEL_4:
    if ((PartyForCookies & 1) != 0)
      goto LABEL_5;
LABEL_15:
    v25 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "void WebKit::WebSharedWorkerServerConnection::requestSharedWorker(WebCore::SharedWorkerKey &&"
                           ", WebCore::SharedWorkerObjectIdentifier, WebCore::TransferredMessagePort &&, WebCore::WorkerOptions &&)";
      v26 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/SharedWorker/WebSharedWorkerServer"
            "Connection.cpp 88: Invalid message dispatched %{public}s";
      goto LABEL_30;
    }
LABEL_28:
    v31 = *(_QWORD *)(a1[4] + 32);
    *(_QWORD *)buf = v13;
    IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(v31, (uint64_t **)buf, 0, 0, 0);
    return;
  }
  if (*(_DWORD *)v19 != 2)
  {
    *(_DWORD *)v19 -= 2;
    goto LABEL_4;
  }
  WTF::StringImpl::destroy(v19, v16);
  if ((PartyForCookies & 1) == 0)
    goto LABEL_15;
LABEL_5:
  if (a4 != *v13)
  {
    v25 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "void WebKit::WebSharedWorkerServerConnection::requestSharedWorker(WebCore::SharedWorkerKey &&"
                           ", WebCore::SharedWorkerObjectIdentifier, WebCore::TransferredMessagePort &&, WebCore::WorkerOptions &&)";
      v26 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/SharedWorker/WebSharedWorkerServer"
            "Connection.cpp 89: Invalid message dispatched %{public}s";
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  if ((WTF::equal(this[13], *(const WTF::StringImpl **)(a6 + 8), v17) & 1) == 0)
  {
    v25 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_28;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "void WebKit::WebSharedWorkerServerConnection::requestSharedWorker(WebCore::SharedWorkerKey &&, "
                         "WebCore::SharedWorkerObjectIdentifier, WebCore::TransferredMessagePort &&, WebCore::WorkerOptions &&)";
    v26 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/SharedWorker/WebSharedWorkerServerCo"
          "nnection.cpp 90: Invalid message dispatched %{public}s";
LABEL_30:
    _os_log_fault_impl(&dword_196BCC000, v25, OS_LOG_TYPE_FAULT, v26, buf, 0xCu);
    goto LABEL_28;
  }
  v20 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v21 = a1[6];
    WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v32);
    WTF::String::utf8();
    if (v33)
      v22 = (char *)v33 + 16;
    else
      v22 = 0;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = a1;
    v35 = 2048;
    v36 = v21;
    v37 = 2082;
    v38 = v22;
    _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::requestSharedWorker: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    v24 = v33;
    v33 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, v23);
      else
        --*(_DWORD *)v24;
    }
    v27 = v32;
    v32 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  v28 = a1[4];
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  v29 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v28 + 208), buf);
  if (v29)
  {
    v30 = WebKit::NetworkSession::ensureSharedWorkerServer(v29);
    WebKit::WebSharedWorkerServer::requestSharedWorker(v30, (uint64_t)this, a3, a4, a5, (__int16 *)a6);
  }
}

void WebKit::WebSharedWorkerServerConnection::sharedWorkerObjectIsGoingAway(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  NSObject *v9;
  char *v10;
  void *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebKit::NetworkSession *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  _BYTE buf[12];
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 6;
  if (a4 == a1[6])
  {
    v9 = qword_1ECE718C0;
    if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
    {
      WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v19);
      WTF::String::utf8();
      if (v20)
        v10 = (char *)v20 + 16;
      else
        v10 = 0;
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = a1;
      v22 = 2048;
      v23 = a4;
      v24 = 2082;
      v25 = v10;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::sharedWorkerObjectIsGoingAway: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
      v12 = v20;
      v20 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          WTF::fastFree(v12, v11);
        else
          --*(_DWORD *)v12;
      }
      v13 = v19;
      v19 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v14 = a1[4];
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v15 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v14 + 208), buf);
    if (v15)
    {
      v16 = WebKit::NetworkSession::ensureSharedWorkerServer(v15);
      WebKit::WebSharedWorkerServer::sharedWorkerObjectIsGoingAway(v16, a2, a3, a4);
    }
  }
  else
  {
    v17 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "void WebKit::WebSharedWorkerServerConnection::sharedWorkerObjectIsGoingAway(WebCore::SharedWo"
                           "rkerKey &&, WebCore::SharedWorkerObjectIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/SharedWorker/WebSharedWorkerServerConnection.cpp 98: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    v18 = *(_QWORD *)(a1[4] + 32);
    *(_QWORD *)buf = v5;
    IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(v18, (uint64_t **)buf, 0, 0, 0);
  }
}

uint64_t WebKit::WebSharedWorkerServerConnection::suspendForBackForwardCache(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  NSObject *v9;
  char *v10;
  void *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;
  NSObject *v18;
  char *v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF *v26;
  _BYTE buf[22];
  __int16 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 6;
  if (a4 == a1[6])
  {
    v9 = qword_1ECE718C0;
    if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
    {
      WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v25);
      WTF::String::utf8();
      if (v26)
        v10 = (char *)v26 + 16;
      else
        v10 = 0;
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a4;
      v28 = 2082;
      *(_QWORD *)&v29 = v10;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::suspendForBackForwardCache: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
      v12 = v26;
      v26 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          WTF::fastFree(v12, v11);
        else
          --*(_DWORD *)v12;
      }
      v13 = v25;
      v25 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v14 = a1[4];
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v14 + 208), buf);
    if (result)
    {
      v16 = WebKit::NetworkSession::ensureSharedWorkerServer((WebKit::NetworkSession *)result);
      v17 = (uint64_t *)WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>(*(_QWORD *)(v16 + 40), a2);
      v18 = qword_1ECE718C0;
      result = os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)result)
      {
        WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v25);
        WTF::String::utf8();
        if (v26)
          v19 = (char *)v26 + 16;
        else
          v19 = 0;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v19;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v17;
        _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::suspendForBackForwardCache: sharedWorkerObjectIdentifier=%{public}s, sharedWorker=%p", buf, 0x16u);
        v21 = v26;
        v26 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
            WTF::fastFree(v21, v20);
          else
            --*(_DWORD *)v21;
        }
        result = (uint64_t)v25;
        v25 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v20);
            if (!v17)
              return result;
            goto LABEL_27;
          }
          *(_DWORD *)result -= 2;
        }
      }
      if (!v17)
        return result;
LABEL_27:
      *(_QWORD *)buf = a3;
      *(_QWORD *)&buf[8] = a4;
      buf[16] = 0;
      v29 = 0u;
      v30 = 0u;
      result = WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WebKit::WebSharedWorker::Object>(v17 + 19, buf);
      v22 = v17[19];
      if (v22)
        v22 += 8 * *(unsigned int *)(v22 - 4);
      if (v22 != result)
      {
        if (*(_QWORD *)result)
        {
          *(_BYTE *)(*(_QWORD *)result + 16) = 1;
          return (uint64_t)WebKit::WebSharedWorker::suspendIfNeeded((IPC::Encoder *)v17);
        }
      }
    }
  }
  else
  {
    v23 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "void WebKit::WebSharedWorkerServerConnection::suspendForBackForwardCache(WebCore::SharedWorke"
                           "rKey &&, WebCore::SharedWorkerObjectIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v23, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/SharedWorker/WebSharedWorkerServerConnection.cpp 106: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    v24 = *(_QWORD *)(a1[4] + 32);
    *(_QWORD *)buf = v5;
    return IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(v24, (uint64_t **)buf, 0, 0, 0);
  }
  return result;
}

uint64_t WebKit::WebSharedWorkerServerConnection::resumeForBackForwardCache(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  NSObject *v9;
  char *v10;
  void *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;
  NSObject *v18;
  char *v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF *v26;
  _BYTE buf[22];
  __int16 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 6;
  if (a4 == a1[6])
  {
    v9 = qword_1ECE718C0;
    if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
    {
      WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v25);
      WTF::String::utf8();
      if (v26)
        v10 = (char *)v26 + 16;
      else
        v10 = 0;
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a4;
      v28 = 2082;
      *(_QWORD *)&v29 = v10;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::resumeForBackForwardCache: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
      v12 = v26;
      v26 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          WTF::fastFree(v12, v11);
        else
          --*(_DWORD *)v12;
      }
      v13 = v25;
      v25 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v14 = a1[4];
    *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v14 + 208), buf);
    if (result)
    {
      v16 = WebKit::NetworkSession::ensureSharedWorkerServer((WebKit::NetworkSession *)result);
      v17 = (uint64_t *)WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>(*(_QWORD *)(v16 + 40), a2);
      v18 = qword_1ECE718C0;
      result = os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)result)
      {
        WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v25);
        WTF::String::utf8();
        if (v26)
          v19 = (char *)v26 + 16;
        else
          v19 = 0;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v19;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v17;
        _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::resumeForBackForwardCache: sharedWorkerObjectIdentifier=%{public}s, sharedWorker=%p", buf, 0x16u);
        v21 = v26;
        v26 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
            WTF::fastFree(v21, v20);
          else
            --*(_DWORD *)v21;
        }
        result = (uint64_t)v25;
        v25 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v20);
            if (!v17)
              return result;
            goto LABEL_27;
          }
          *(_DWORD *)result -= 2;
        }
      }
      if (!v17)
        return result;
LABEL_27:
      *(_QWORD *)buf = a3;
      *(_QWORD *)&buf[8] = a4;
      buf[16] = 0;
      v29 = 0u;
      v30 = 0u;
      result = WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WebKit::WebSharedWorker::Object>(v17 + 19, buf);
      v22 = v17[19];
      if (v22)
        v22 += 8 * *(unsigned int *)(v22 - 4);
      if (v22 != result)
      {
        if (*(_QWORD *)result)
        {
          *(_BYTE *)(*(_QWORD *)result + 16) = 0;
          return (uint64_t)WebKit::WebSharedWorker::resumeIfNeeded((IPC::Encoder *)v17);
        }
      }
    }
  }
  else
  {
    v23 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "void WebKit::WebSharedWorkerServerConnection::resumeForBackForwardCache(WebCore::SharedWorker"
                           "Key &&, WebCore::SharedWorkerObjectIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v23, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/SharedWorker/WebSharedWorkerServerConnection.cpp 114: Invalid message dispatched %{public}s", buf, 0xCu);
    }
    v24 = *(_QWORD *)(a1[4] + 32);
    *(_QWORD *)buf = v5;
    return IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(v24, (uint64_t **)buf, 0, 0, 0);
  }
  return result;
}

uint64_t WebKit::ServiceWorkerDownloadTask::state(WebKit::ServiceWorkerDownloadTask *this)
{
  return *((unsigned int *)this + 166);
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::isSynchronous(WebKit::ServiceWorkerNavigationPreloader *this)
{
  return 0;
}

uint64_t WebKit::ServiceWorkerNavigationPreloader::isAllowedToAskUserForCredentials(WebKit::ServiceWorkerNavigationPreloader *this)
{
  return 0;
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::isSynchronous(WebKit::ServiceWorkerSoftUpdateLoader *this)
{
  return 0;
}

uint64_t WebKit::ServiceWorkerSoftUpdateLoader::isAllowedToAskUserForCredentials(WebKit::ServiceWorkerSoftUpdateLoader *this)
{
  return 0;
}

void WebKit::WebSWRegistrationStore::~WebSWRegistrationStore(WebKit::WebSWRegistrationStore *this, WTF::StringImpl *a2)
{
  WebCore::SecurityOriginData *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 11);
  if (v3)
    WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::deallocateTable(v3, a2);
  *((_QWORD *)this + 4) = off_1E34B3740;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebKit::WebSWRegistrationStore *)((char *)this + 32));
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v5);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  WebCore::SecurityOriginData *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;

  v3 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 11);
  if (v3)
    WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::deallocateTable(v3, a2);
  *((_QWORD *)this + 4) = off_1E34B3740;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase((WebKit::WebSWRegistrationStore *)((char *)this + 32));
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v5);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
  WTF::fastFree(this, v12);
}

uint64_t WebKit::WebSharedWorkerServerConnection::messageSenderDestinationID(WebKit::WebSharedWorkerServerConnection *this)
{
  return 0;
}

WebCore::ResourceErrorBase *WTF::CrossThreadCopierBase<false,false,std::optional<WebCore::ResourceError>>::copy<std::optional<WebCore::ResourceError>>@<X0>(WebCore::ResourceErrorBase *result@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  char v11;

  if (*((_BYTE *)result + 80))
  {
    WebCore::ResourceErrorBase::isolatedCopy(result);
    *(_QWORD *)a2 = v5;
    WTF::URL::URL(a2 + 8, (uint64_t *)&v6);
    v4 = v6;
    *(_QWORD *)(a2 + 48) = v7;
    *(_DWORD *)(a2 + 56) = v8;
    *(_WORD *)(a2 + 60) = v9;
    *(_QWORD *)(a2 + 64) = v10;
    *(_BYTE *)(a2 + 72) = v11;
    *(_BYTE *)(a2 + 80) = 1;
    v10 = 0;
    v7 = 0;
    v6 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    return 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ServiceWorkerFetchTask::*&)(void),WebKit::ServiceWorkerFetchTask*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unsigned int *WTF::add(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v2 = *a2;
  if (!*a2)
    return result;
  v3 = *(_DWORD *)(v2 + 4);
  v4 = v3 & 0xFFFFFFFE;
  if ((v3 & 0xFFFFFFFE) == 0)
  {
    if ((v3 & 1) == 0)
      return result;
    v14 = 1;
    goto LABEL_13;
  }
  v5 = 0;
  v6 = *result;
  do
  {
    v7 = *(unsigned int *)(v2 + 4);
    if (v5 >= v7)
    {
      v9 = 0;
    }
    else
    {
      v8 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        v9 = *(unsigned __int8 *)(v8 + v5);
      else
        v9 = *(unsigned __int16 *)(v8 + 2 * v5);
    }
    v10 = v5 + 1;
    if (v5 + 1 >= v7)
    {
      v12 = 0;
    }
    else
    {
      v11 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        v12 = *(unsigned __int8 *)(v11 + v5 + 1);
      else
        v12 = *(unsigned __int16 *)(v11 + 2 * v5 + 2);
    }
    v13 = (v9 << 11) ^ ((v6 + v12) << 16) ^ (v6 + v12);
    v6 = v13 + (v13 >> 11);
    *result = v6;
    v5 = v10 + 1;
  }
  while (v10 + 1 < v4);
  if ((v3 & 1) != 0)
  {
    v14 = *(_DWORD *)(v2 + 4);
LABEL_13:
    if (v14 <= v4)
    {
      v16 = 0;
    }
    else
    {
      v15 = *(_QWORD *)(v2 + 8);
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
        v16 = *(unsigned __int8 *)(v15 + v4);
      else
        v16 = *(unsigned __int16 *)(v15 + 2 * v4);
    }
    *result = ((*result + v16) ^ ((*result + v16) << 16)) + (((*result + v16) ^ ((*result + v16) << 16)) >> 11);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::convertToDownload(WebKit::DownloadManager &,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_0,WTF::RefPtr<WebKit::NetworkDataTask,WTF::RawPtrTraits<WebKit::NetworkDataTask>,WTF::DefaultRefDerefTraits<WebKit::NetworkDataTask>>,WebKit::NetworkDataTaskClient &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::ResourceRequestBase *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::FunctionDispatcher *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *result;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::ResourceResponseBase *v30;
  unsigned __int8 **v32[3];
  uint64_t v33;

  v5 = *(_QWORD **)(a1 + 8);
  v6 = **(_QWORD **)(a1 + 24);
  v7 = v5[4];
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v10 = v5[6];
  v9 = v5[7];
  v11 = v5[5];
  v12 = *(WebCore::ResourceRequestBase **)(a1 + 32);
  v30 = *(WebCore::ResourceResponseBase **)(a1 + 40);
  v13 = **(_QWORD **)(a1 + 48);
  v14 = WTF::fastMalloc((WTF *)0x2A0);
  v15 = (WTF::FunctionDispatcher *)(WebKit::NetworkDataTask::NetworkDataTask(v14, v6, a2, v12, 0, 0, 0) + 552);
  WTF::FunctionDispatcher::FunctionDispatcher(v15);
  *(_QWORD *)(v14 + 568) = 0;
  *(_QWORD *)v14 = off_1E34C3738;
  *(_QWORD *)(v14 + 552) = &unk_1E34C37B8;
  *(_QWORD *)(v14 + 560) = &unk_1E34C37E0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 8), v8);
  v16 = *(unsigned int **)(v8 + 8);
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  *(_QWORD *)(v14 + 576) = v16;
  *(_QWORD *)(v14 + 584) = v9;
  *(_QWORD *)(v14 + 592) = v10;
  *(_QWORD *)(v14 + 600) = v11;
  *(_QWORD *)(v14 + 608) = v13;
  v18 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
  if (v18)
    v19 = v18 - 48;
  else
    v19 = 0;
  v20 = *(_QWORD *)(v19 + 72);
  v21 = (unsigned int *)(v20 + 120);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  *(_QWORD *)(v14 + 616) = v20;
  *(_QWORD *)(v14 + 624) = 0;
  *(_DWORD *)(v14 + 632) = -1;
  *(_QWORD *)(v14 + 640) = 0;
  *(_BYTE *)(v14 + 648) = 0;
  *(_BYTE *)(v14 + 656) = 0;
  *(_DWORD *)(v14 + 664) = 1;
  v23 = WebCore::ResourceResponseBase::expectedContentLength(v30);
  if (v23 != -1)
  {
    if (!*(_BYTE *)(v14 + 656))
      *(_BYTE *)(v14 + 656) = 1;
    *(_QWORD *)(v14 + 648) = v23;
  }
  v33 = *(_QWORD *)(v14 + 600);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::ServiceWorkerDownloadTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::ServiceWorkerDownloadTask>>,WTF::HashTableTraits>::add<WebKit::ServiceWorkerDownloadTask&>((uint64_t *)(v8 + 144), &v33, v14, (uint64_t)v32);
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 576) + 8) + 128) + 8);
  if (v24)
    v25 = v24 - 48;
  else
    v25 = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v32, *(unsigned __int8 ***)(v25 + 64));
  IPC::Connection::addMessageReceiver((uint64_t)v32[0], (uint64_t)v15, v14 + 560, 0x87u, *(_QWORD *)(v14 + 600));
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v32);
  v27 = *(uint64_t **)(a1 + 16);
  v28 = *v27;
  *v27 = v14;
  if (v28)
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v28 + 8));
  v29 = **(_QWORD **)(a1 + 16);
  if (v29)
    result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v29 + 8));
  *a3 = v29;
  return result;
}

uint64_t WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl ***)(a1 + 112);
    do
    {
      if (*(v4 - 6) != (WTF::StringImpl **)-1)
      {
        std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100](v4, 0);
        v5 = (WTF::StringImpl *)*(v4 - 1);
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
        v6 = (WTF::StringImpl *)*(v4 - 6);
        *(v4 - 6) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v7 = *((unsigned int *)v4 - 14);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, WTF::StringImpl ***))off_1E34C3A10[v7])(&v10, v4 - 10);
        *((_DWORD *)v4 - 14) = -1;
        v8 = *((unsigned int *)v4 - 22);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, WTF::StringImpl ***))off_1E34C3A10[v8])(&v11, v4 - 14);
        *((_DWORD *)v4 - 22) = -1;
      }
      v4 += 15;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 16 * i;
      if (*(_QWORD *)v5 != -1)
      {
        v6 = *(unsigned int **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v6)
        {
          do
          {
            v8 = __ldaxr(v6);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v6));
          if (!v9)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
        v7 = *(WTF::StringImpl **)v5;
        *(_QWORD *)v5 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v7 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerData,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (*(_BYTE *)(a1 + 64))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      WTF::URL::operator=(a1 + 16, (WTF::StringImpl *)(a2 + 16));
      *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    }
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    WTF::URL::URL(a1 + 16, (uint64_t *)(a2 + 16));
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
  }
}

uint64_t std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(result + 64))
  {
    v2 = result;
    result = *(_QWORD *)(result + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v2 + 64) = 0;
  }
  return result;
}

WTF::StringImpl **std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100](WTF::StringImpl ***a1, WTF::StringImpl **a2)
{
  WTF::StringImpl **result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebSharedWorker::~WebSharedWorker(result);
    return (WTF::StringImpl **)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::deallocateTable(WebCore::SecurityOriginData *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::SecurityOriginData *v4;
  __n128 v5;
  char v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v10;

  v3 = *((unsigned int *)this - 1);
  if ((_DWORD)v3)
  {
    v4 = this;
    do
    {
      v5.n128_f64[0] = WebCore::SecurityOriginData::isHashTableDeletedValue(v4);
      if ((v6 & 1) == 0)
      {
        if (*((_BYTE *)v4 + 672))
          WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::SecurityOriginData *)((char *)v4 + 80), a2);
        v7 = (WTF::StringImpl *)*((_QWORD *)v4 + 4);
        *((_QWORD *)v4 + 4) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = *((unsigned int *)v4 + 6);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, WebCore::SecurityOriginData *, __n128))off_1E34C3A10[v8])(&v10, v4, v5);
        *((_DWORD *)v4 + 6) = -1;
      }
      v4 = (WebCore::SecurityOriginData *)((char *)v4 + 688);
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WebCore::SecurityOriginData *)((char *)this - 16), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::dispatch(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34C3A80;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::dispatch(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C3A80;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::dispatch(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::cancel(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C3AA8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::cancel(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C3AA8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::cancel(void)::$_0,void>::call(uint64_t result, int *a2)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v2 + 632) != -1)
  {
    v3 = (_DWORD *)(v2 + 632);
    result = WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)(v2 + 632), a2);
    *v3 = -1;
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::WebSWContextManagerConnection::CancelFetch>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2692;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, a2[1]);
  return IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, a2[2]);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(WTF::String const&,WebKit::SandboxExtensionHandle &&,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C3AD0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(WTF::String const&,WebKit::SandboxExtensionHandle &&,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C3AD0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(WTF::String const&,WebKit::SandboxExtensionHandle &&,BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  int v4[20];
  char v5;

  v1 = *(_QWORD *)(a1 + 8);
  LOBYTE(v4[0]) = 0;
  v5 = 0;
  WebKit::ServiceWorkerDownloadTask::didFailDownload(v1, v4);
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(WTF::String const&,WebKit::SandboxExtensionHandle &&,BOOL)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34C3AF8;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(WTF::String const&,WebKit::SandboxExtensionHandle &&,BOOL)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C3AF8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::setPendingDownloadLocation(WTF::String const&,WebKit::SandboxExtensionHandle &&,BOOL)::$_1,void>::call(uint64_t a1, const WTF::String *a2)
{
  uint64_t v2;
  WTF::FileSystemImpl *v3;
  const WTF::String *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  int v7[20];
  char v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 24)
    && (v3 = (WTF::FileSystemImpl *)(a1 + 32),
        WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)(a1 + 32), a2))
    && (WTF::FileSystemImpl::deleteFile(v3, v4) & 1) == 0
    || (result = WTF::FileSystemImpl::openFile(), *(_DWORD *)(v2 + 632) = result, (_DWORD)result == -1))
  {
    LOBYTE(v7[0]) = 0;
    v8 = 0;
    WebKit::ServiceWorkerDownloadTask::didFailDownload(v2, v7);
    return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v6);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::start(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C3B20;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::start(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C3B20;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::start(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  int v4[20];
  char v5;

  v1 = *(_QWORD *)(a1 + 8);
  LOBYTE(v4[0]) = 0;
  v5 = 0;
  WebKit::ServiceWorkerDownloadTask::didFailDownload(v1, v4);
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didReceiveData(IPC::SharedBufferReference const&,unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C3B48;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didReceiveData(IPC::SharedBufferReference const&,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C3B48;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didReceiveData(IPC::SharedBufferReference const&,unsigned long long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  IPC::Encoder *result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 640) += *(_QWORD *)(a1 + 24);
  v3 = (uint64_t *)(*(_QWORD *)(v2 + 616) + 176);
  v8 = *(_QWORD *)(v2 + 40);
  result = (IPC::Encoder *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3, &v8);
  if (result)
  {
    v5 = *(_QWORD *)(v2 + 640);
    if (*(_BYTE *)(v2 + 656))
      v6 = *(_QWORD *)(v2 + 648);
    else
      v6 = 0;
    if (v6 <= v5)
      v7 = *(_QWORD *)(v2 + 640);
    else
      v7 = v6;
    return WebKit::Download::didReceiveData(result, *(_QWORD *)(a1 + 24), v5, v7);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didFinish(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C3B70;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didFinish(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C3B70;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didFinish(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  WebKit::NetworkDataTaskClient *v7;
  WTF::StringImpl *v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD v14[2];
  CFTypeRef cf;
  char v16;

  v1 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v1 + 664) = 3;
  WebKit::ServiceWorkerDownloadTask::close(v1);
  v2 = *(_QWORD *)(v1 + 624);
  *(_QWORD *)(v1 + 624) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16) - 1;
    *(_QWORD *)(v2 + 16) = v3;
    if (!v3)
    {
      *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8) = 0;
      sandbox_extension_release();
    }
    WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v2);
  }
  v4 = (uint64_t *)(*(_QWORD *)(v1 + 616) + 176);
  v12 = *(WTF::StringImpl **)(v1 + 40);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4, &v12);
  if (result)
    result = WebKit::Download::didFinish((WebKit::Download *)result);
  v6 = *(_QWORD *)(v1 + 24);
  if (v6)
  {
    v7 = *(WebKit::NetworkDataTaskClient **)(v6 + 8);
    if (v7)
    {
      v12 = 0;
      v13 = 0;
      WTF::URL::invalidate((WTF::URL *)&v13);
      cf = 0;
      v14[0] = 0;
      *(_QWORD *)((char *)v14 + 6) = 0;
      v16 = 1;
      WebKit::NetworkDataTaskClient::didCompleteWithError(v7, (const WebCore::ResourceError *)&v12);
      v9 = cf;
      cf = 0;
      if (v9)
        CFRelease(v9);
      v10 = (WTF::StringImpl *)v14[0];
      v14[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v8);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v8);
        else
          *(_DWORD *)v11 -= 2;
      }
      result = (uint64_t)v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didFailDownload(std::optional<WebCore::ResourceError> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  *a1 = off_1E34C3B98;
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 3), a2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didFailDownload(std::optional<WebCore::ResourceError> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34C3B98;
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 24, a2);
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 8));
  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerDownloadTask::didFailDownload(std::optional<WebCore::ResourceError> &&)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  const void *v11;
  __int128 v12;
  CFTypeRef v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WebKit::NetworkDataTaskClient *v21;
  CFTypeRef v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25[2];
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;
  int v29;
  __int16 v30;
  CFTypeRef cf;
  WTF::StringImpl *v32[2];
  __int128 v33;
  __int128 v34;
  WTF::StringImpl *v35;
  int v36;
  __int16 v37;
  CFTypeRef v38;
  char v39;

  v1 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v1 + 664) != 3)
  {
    v2 = result;
    *(_DWORD *)(v1 + 664) = 3;
    WebKit::ServiceWorkerDownloadTask::close(v1);
    v3 = *(_QWORD *)(v1 + 624);
    *(_QWORD *)(v1 + 624) = 0;
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16) - 1;
      *(_QWORD *)(v3 + 16) = v4;
      if (!v4)
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) = 0;
        sandbox_extension_release();
      }
      WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v3);
    }
    WebKit::cancelledError((WebKit *)(v1 + 128), (uint64_t)v25);
    if (*((_BYTE *)v2 + 104))
    {
      v6 = (WTF::StringImpl **)((char *)v2 + 24);
      v7 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
      if (v7)
        *(_DWORD *)v7 += 2;
      v32[0] = v7;
      v8 = (WTF::StringImpl *)*((_QWORD *)v2 + 4);
      if (v8)
        *(_DWORD *)v8 += 2;
      v32[1] = v8;
      v9 = *(_OWORD *)((char *)v2 + 56);
      v33 = *(_OWORD *)((char *)v2 + 40);
      v34 = v9;
      v10 = (WTF::StringImpl *)*((_QWORD *)v2 + 9);
      if (v10)
        *(_DWORD *)v10 += 2;
      v35 = v10;
      v36 = *((_DWORD *)v2 + 20);
      v37 = *((_WORD *)v2 + 42);
      v11 = (const void *)*((_QWORD *)v2 + 11);
      v38 = v11;
      if (v11)
        CFRetain(v11);
    }
    else
    {
      v12 = *(_OWORD *)v25;
      v25[0] = 0;
      v25[1] = 0;
      *(_OWORD *)v32 = v12;
      v33 = v26;
      v34 = v27;
      LODWORD(v26) = v26 & 0xFFFFFFFE;
      v35 = v28;
      v36 = v29;
      v37 = v30;
      v38 = cf;
      v6 = v25;
      v28 = 0;
      cf = 0;
    }
    v39 = *((_BYTE *)v6 + 72);
    v13 = cf;
    cf = 0;
    if (v13)
      CFRelease(v13);
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v5);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v25[1];
    v25[1] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v5);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v25[0];
    v25[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v5);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = (uint64_t *)(*(_QWORD *)(v1 + 616) + 176);
    v25[0] = *(WTF::StringImpl **)(v1 + 40);
    v18 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v17, v25);
    if (v18)
      WebKit::Download::didFail(v18, (uint64_t)v32, 0, 0);
    v20 = *(_QWORD *)(v1 + 24);
    if (v20)
    {
      v21 = *(WebKit::NetworkDataTaskClient **)(v20 + 8);
      if (v21)
        WebKit::NetworkDataTaskClient::didCompleteWithError(v21, (const WebCore::ResourceError *)v32);
    }
    v22 = v38;
    v38 = 0;
    if (v22)
      CFRelease(v22);
    v23 = v35;
    v35 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v19);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v32[1];
    v32[1] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v19);
      else
        *(_DWORD *)v24 -= 2;
    }
    result = v32[0];
    v32[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::__optional_copy_assign_base<WebCore::ResourceError,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v4 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v4;
    WTF::URL::URL(a1 + 8, a2 + 1);
    v5 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(a1 + 48) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 14);
    *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
    *(_DWORD *)(a1 + 56) = v5;
    v6 = a2[8];
    a2[8] = 0;
    *(_QWORD *)(a1 + 64) = v6;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_BYTE *)(a1 + 80) = 1;
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,std::unique_ptr<WebKit::ServiceWorkerNavigationPreloader> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34C3BC0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,std::unique_ptr<WebKit::ServiceWorkerNavigationPreloader> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3BC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::ServiceWorkerFetchTask *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,std::unique_ptr<WebKit::ServiceWorkerNavigationPreloader> &&)::$_0,void>::call(WebKit::ServiceWorkerFetchTask *result)
{
  uint64_t v1;
  WebKit::ServiceWorkerFetchTask *v2;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(WebKit::ServiceWorkerFetchTask **)(v1 + 8);
    if (v2)
    {
      ++*(_DWORD *)v2;
      WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(v2);
      return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v2);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::SWServerRegistration &,WebKit::NetworkSession *,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34C3BE8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::SWServerRegistration &,WebKit::NetworkSession *,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3BE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::ServiceWorkerFetchTask *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::ServiceWorkerFetchTask(WebKit::WebSWServerConnection &,WebKit::NetworkResourceLoader &,WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::SWServerRegistration &,WebKit::NetworkSession *,BOOL)::$_0,void>::call(WebKit::ServiceWorkerFetchTask *result)
{
  uint64_t v1;
  WebKit::ServiceWorkerFetchTask *v2;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(WebKit::ServiceWorkerFetchTask **)(v1 + 8);
    if (v2)
    {
      ++*(_DWORD *)v2;
      WebKit::ServiceWorkerFetchTask::preloadResponseIsReady(v2);
      return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v2);
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::WebResourceLoader::DidReceiveData>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  IPC::Encoder *v18;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2667;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v18 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode((IPC::Encoder *)v10, *(IPC::SharedBufferReference **)a2);
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v11;
  v13 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v18, a4, a5);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v15, v16);
  }
  return v13;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::cannotHandle(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34C3C10;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::cannotHandle(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3C10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::ServiceWorkerFetchTask *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::cannotHandle(void)::$_0,void>::call(WebKit::ServiceWorkerFetchTask *result)
{
  uint64_t v1;
  WebKit::ServiceWorkerFetchTask *v2;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(WebKit::ServiceWorkerFetchTask **)(v1 + 8);
    if (v2)
    {
      ++*(_DWORD *)v2;
      WebKit::ServiceWorkerFetchTask::didNotHandle(v2);
      return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v2);
    }
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::SWServerRegistration>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEB0BE8]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34C3C38;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3C38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::ServiceWorkerFetchTask *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadResponseFromPreloader(void)::$_0,void>::call(WebKit::ServiceWorkerFetchTask *result)
{
  uint64_t v1;
  WebKit::ServiceWorkerFetchTask *v2;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(WebKit::ServiceWorkerFetchTask **)(v1 + 8);
    if (v2)
    {
      ++*(_DWORD *)v2;
      WebKit::ServiceWorkerFetchTask::preloadResponseIsReady(v2);
      return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v2);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadBodyFromPreloader(void)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer const,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer const>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer const>> &&,unsigned long long>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C3C60;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadBodyFromPreloader(void)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer const,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer const>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer const>> &&,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34C3C60;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::ServiceWorkerFetchTask *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::loadBodyFromPreloader(void)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer const,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer const>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer const>> &&,unsigned long long>::call(WebKit::ServiceWorkerFetchTask *result, WebCore::FragmentedSharedBuffer **a2, uint64_t a3)
{
  uint64_t v3;
  WebKit::ServiceWorkerFetchTask *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  const void *v11;
  WTF::StringImpl *v12;
  CFTypeRef v13;
  WTF::StringImpl *v14;
  WebCore::FragmentedSharedBuffer *v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WebCore::ContentFilter *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  WTF::StringImpl *v36;
  int v37;
  __int16 v38;
  CFTypeRef cf;
  char v40;
  _QWORD v41[2];

  v3 = *((_QWORD *)result + 2);
  if (v3)
  {
    v4 = *(WebKit::ServiceWorkerFetchTask **)(v3 + 8);
    if (v4)
    {
      v5 = *((_QWORD *)result + 1);
      ++*(_DWORD *)v4;
      v6 = *(_QWORD *)(v5 + 280);
      if (*(_BYTE *)(v6 + 3484))
      {
        v7 = *(WTF::StringImpl **)(v6 + 3424);
        if (v7)
          *(_DWORD *)v7 += 2;
        v32 = v7;
        v8 = *(WTF::StringImpl **)(v6 + 3432);
        if (v8)
          *(_DWORD *)v8 += 2;
        v33 = v8;
        v9 = *(_OWORD *)(v6 + 3456);
        v34 = *(_OWORD *)(v6 + 3440);
        v35 = v9;
        v10 = *(WTF::StringImpl **)(v6 + 3472);
        if (v10)
          *(_DWORD *)v10 += 2;
        v36 = v10;
        v37 = *(_DWORD *)(v6 + 3480);
        v38 = *(_WORD *)(v6 + 3484);
        v11 = *(const void **)(v6 + 3488);
        cf = v11;
        if (v11)
          CFRetain(v11);
        v40 = *(_BYTE *)(v6 + 3496);
        WebKit::ServiceWorkerFetchTask::didFail((WebKit::ServiceWorkerFetchTask *)v5, (const WebCore::ResourceError *)&v32);
        v13 = cf;
        cf = 0;
        if (v13)
          CFRelease(v13);
        v14 = v36;
        v36 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v12);
          else
            *(_DWORD *)v14 -= 2;
        }
        v27 = v33;
        v33 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v12);
          else
            *(_DWORD *)v27 -= 2;
        }
        v28 = v32;
        v32 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v12);
          else
            *(_DWORD *)v28 -= 2;
        }
        return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v4);
      }
      v15 = *a2;
      if (!*a2)
      {
        WebKit::ServiceWorkerFetchTask::didFinish((WebKit::ServiceWorkerFetchTask *)v5, (const WebCore::NetworkLoadMetrics *)(v6 + 3032));
        return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v4);
      }
      if (*(_BYTE *)(v5 + 289))
        return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v4);
      WebCore::FragmentedSharedBuffer::makeContiguous(*a2);
      v18 = v32;
      if (!v32)
        return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v4);
      v19 = *(_QWORD *)(v5 + 24);
      if (v19 && (v20 = *(_QWORD *)(v19 + 8)) != 0)
      {
        v22 = *(_DWORD *)(v20 - 40);
        v21 = v20 - 40;
        *(_DWORD *)v21 = v22 + 1;
        v23 = *(WebCore::ContentFilter **)(v21 + 4784);
        if (v23)
        {
          v24 = WebCore::ContentFilter::continueAfterDataReceived(v23, v18);
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v21, v25);
          if (!v24)
          {
LABEL_45:
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v18, v26);
            return WTF::RefCounted<WebKit::ServiceWorkerFetchTask>::deref(v4);
          }
        }
        else
        {
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v21, v17);
        }
      }
      else if (MEMORY[0x12B8] && (WebCore::ContentFilter::continueAfterDataReceived(MEMORY[0x12B8], v32) & 1) == 0)
      {
        goto LABEL_45;
      }
      v32 = (WTF::StringImpl *)*((_QWORD *)v15 + 6);
      do
        v29 = __ldaxr((unsigned int *)v15);
      while (__stlxr(v29 + 1, (unsigned int *)v15));
      v33 = v15;
      *(_QWORD *)&v34 = 0;
      v41[0] = &v32;
      v41[1] = a3;
      WebKit::ServiceWorkerFetchTask::sendToClient<Messages::WebResourceLoader::DidReceiveData>(v5, (uint64_t)v41);
      v30 = (unsigned int *)v34;
      *(_QWORD *)&v34 = 0;
      if (v30)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v30);
      v31 = (unsigned int *)v33;
      v33 = 0;
      if (v31)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v31, v26);
      goto LABEL_45;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::convertToDownload(WebKit::DownloadManager &,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_1,void,WebCore::PolicyAction>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C3C88;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::convertToDownload(WebKit::DownloadManager &,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_1,void,WebCore::PolicyAction>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3C88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerFetchTask::convertToDownload(WebKit::DownloadManager &,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&)::$_1,void,WebCore::PolicyAction>::call(unsigned __int8 ***a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;
  void *v9;
  int v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *result;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WebKit::Download *v20;
  uint64_t *v21[3];
  unsigned __int8 **v22;
  IPC::Encoder *v23;

  v2 = (uint64_t)a1[1];
  if (a2 != 1)
    return (uint64_t *)WebKit::ServiceWorkerDownloadTask::cancel(a1[1]);
  v21[0] = (uint64_t *)(v2 + 592);
  v21[1] = (uint64_t *)(v2 + 584);
  v21[2] = (uint64_t *)(v2 + 600);
  v3 = *(_QWORD *)(v2 + 576);
  if (!v3)
    goto LABEL_10;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_10;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8);
  if (v5)
    v6 = v5 - 48;
  else
    v6 = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v22, *(unsigned __int8 ***)(v6 + 64));
  v7 = v22;
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2695;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v23 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, v21);
  v10 = IPC::Connection::sendMessageImpl((uint64_t)v7, (uint64_t *)&v23, 0, 0);
  v11 = v23;
  v23 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v12, v13);
  }
  a1 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v22);
  if (!v10)
  {
    *(_DWORD *)(v2 + 664) = 0;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 616) + 152);
    v18 = *(_QWORD *)(v2 + 16);
    if (v18)
      v19 = *(_QWORD *)(v18 + 8);
    else
      v19 = 0;
    v20 = (WebKit::Download *)WTF::fastMalloc((WTF *)0x180);
    v21[0] = (uint64_t *)WebKit::Download::Download((uint64_t)v20, v17, *(_QWORD *)(v2 + 608), v2, v19);
    WebKit::DownloadManager::dataTaskBecameDownloadTask(v17, *(_QWORD *)(v2 + 608), (const char ****)v21);
    WebKit::Download::didCreateDestination(v20, (const WTF::String *)(v2 + 120));
  }
  else
  {
LABEL_10:
    v14 = WebKit::sharedServiceWorkerDownloadTaskQueue((WebKit *)a1);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v2 + 8));
    v15 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
    *v15 = (uint64_t)&off_1E34C3B20;
    v15[1] = v2;
    v15[2] = v2;
    v21[0] = v15;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v14 + 32))(v14, v21);
  }
  result = v21[0];
  v21[0] = 0;
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::start(void)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C3CB0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::start(void)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34C3CB0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::start(void)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&>::call(uint64_t result, WebKit::NetworkCache::Entry **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  CFTypeRef v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  __int16 v20;
  CFTypeRef cf;
  char v22;
  WTF::StringImpl *v23;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(result + 8);
      v5 = *(_DWORD *)(v3 + 16) + 1;
      *(_DWORD *)(v3 + 16) = v5;
      if (!*(_BYTE *)(v4 + 3521))
      {
        if (*a2
          && WebCore::ResourceResponseBase::source((WebKit::NetworkCache::Entry *)((char *)*a2 + 80)) != 3)
        {
          result = (uint64_t)WebKit::ServiceWorkerNavigationPreloader::loadWithCacheEntry((WebKit::ServiceWorkerNavigationPreloader *)v4, *a2);
        }
        else
        {
          WebCore::ResourceRequestBase::setCachePolicy();
          v7 = *a2;
          if (*a2)
          {
            *a2 = 0;
            std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v4 + 3024), v7);
            WebCore::ResourceResponseBase::httpHeaderField();
            if (v16 && *((_DWORD *)v16 + 1))
              WebCore::ResourceRequestBase::setHTTPHeaderField();
            WebCore::ResourceResponseBase::httpHeaderField();
            v9 = v23;
            if (v23)
            {
              if (*((_DWORD *)v23 + 1))
              {
                WebCore::ResourceRequestBase::setHTTPHeaderField();
                v9 = v23;
              }
              v23 = 0;
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, v8);
              else
                *(_DWORD *)v9 -= 2;
            }
            v10 = v16;
            v16 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v8);
              else
                *(_DWORD *)v10 -= 2;
            }
          }
          v11 = *(_QWORD *)(v4 + 32);
          if (v11 && *(_QWORD *)(v11 + 8))
          {
            result = WebKit::ServiceWorkerNavigationPreloader::loadFromNetwork((WebKit::NetworkLoad **)v4);
          }
          else
          {
            v16 = 0;
            v17 = 0;
            WTF::URL::invalidate((WTF::URL *)&v17);
            v18 = 0;
            v19 = 0;
            v20 = 3;
            cf = 0;
            v22 = 1;
            WebKit::ServiceWorkerNavigationPreloader::didFailLoading((WTF::StringImpl **)v4, (CFTypeRef *)&v16);
            v13 = cf;
            cf = 0;
            if (v13)
              CFRelease(v13);
            v14 = v18;
            v18 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v12);
              else
                *(_DWORD *)v14 -= 2;
            }
            v15 = v17;
            v17 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v12);
              else
                *(_DWORD *)v15 -= 2;
            }
            result = (uint64_t)v16;
            v16 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
              else
                *(_DWORD *)result -= 2;
            }
          }
        }
        v5 = *(_DWORD *)(v3 + 16);
      }
      if (v5)
      {
        *(_DWORD *)(v3 + 16) = v5 - 1;
      }
      else
      {
        result = 286;
        __break(0xC471u);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::loadWithCacheEntry(WebKit::NetworkCache::Entry &)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;

  *a1 = &off_1E34C3CD8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::loadWithCacheEntry(WebKit::NetworkCache::Entry &)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;

  *(_QWORD *)this = &off_1E34C3CD8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::loadWithCacheEntry(WebKit::NetworkCache::Entry &)::$_0,void,WebCore::PolicyAction>::call(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  const WebCore::FragmentedSharedBuffer *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v8;
  uint64_t v9;
  WebKit::ServiceWorkerNavigationPreloader *v10;
  WTF::StringImpl *v11;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v12;
  _BYTE v13[88];
  WTF::StringImpl *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v18;

  v1 = result[2];
  if (v1)
  {
    v2 = result;
    result = *(_QWORD **)(v1 + 8);
    if (result)
    {
      if (!*((_BYTE *)result + 3521))
      {
        v3 = (const WebCore::FragmentedSharedBuffer *)v2[1];
        if (v3)
        {
          v4 = *((_QWORD *)v3 + 6);
          v2[1] = 0;
          WebKit::ServiceWorkerNavigationPreloader::didReceiveBuffer((unsigned int *)result, v3);
          result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v3, v5);
          v6 = v2[2];
          if (!v6 || !*(_QWORD *)(v6 + 8))
            return result;
        }
        else
        {
          v4 = 0;
        }
        WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v13);
        v15 |= 1u;
        v16 = 0;
        v17 = v4;
        if (*(_BYTE *)(*(_QWORD *)(v2[2] + 8) + 3522))
        {
          v7 = WTF::fastMalloc((WTF *)0x68);
          *(_DWORD *)v7 = 1;
          *(_BYTE *)(v7 + 4) = 3;
          *(_OWORD *)(v7 + 8) = 0u;
          *(_OWORD *)(v7 + 24) = 0u;
          WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v7 + 40));
          *(_QWORD *)(v7 + 72) = 0;
          *(_QWORD *)(v7 + 80) = 0;
          *(_BYTE *)(v7 + 96) = 0;
          *(_QWORD *)(v7 + 88) = 0;
          v8 = v18;
          v18 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)v7;
          if (v8)
            WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v8);
        }
        v9 = v2[2];
        if (v9)
          v10 = *(WebKit::ServiceWorkerNavigationPreloader **)(v9 + 8);
        else
          v10 = 0;
        WebKit::ServiceWorkerNavigationPreloader::didFinishLoading(v10, (const WebCore::NetworkLoadMetrics *)v13);
        v12 = v18;
        v18 = 0;
        if (v12)
          WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v12);
        result = v14;
        v14 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::willSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C3D00;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::willSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C3D00;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::ServiceWorkerNavigationPreloader::willSendRedirectedRequest(WebCore::ResourceRequest &&,WebCore::ResourceRequest &,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::PolicyAction>::call(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef v3;
  uint64_t v4;
  WebKit::NetworkLoad **v5;
  _BYTE v6[192];
  CFTypeRef cf;

  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v6);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v6);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(WebKit::NetworkLoad ***)(v4 + 8);
    if (v5)
      WebKit::ServiceWorkerNavigationPreloader::didComplete(v5);
  }
}

WebCore::TextResourceDecoder *WTF::RefCounted<WebCore::TextResourceDecoder>::deref(WebCore::TextResourceDecoder *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::TextResourceDecoder::~TextResourceDecoder(result);
    return (WebCore::TextResourceDecoder *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(WebKit::NetworkSession &,WebCore::ServiceWorkerJobData &&,BOOL,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)>::default_delete<WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(WebKit::NetworkSession &,WebCore::ServiceWorkerJobData &&,BOOL,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&)::$_0>>,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&::Cache::RetrieveInfo const&>::~CallableWrapper(_QWORD *a1)
{
  WebCore::ResourceRequestBase *v2;
  const void *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34C3D28;
  v2 = (WebCore::ResourceRequestBase *)(a1 + 3);
  v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(WebKit::NetworkSession &,WebCore::ServiceWorkerJobData &&,BOOL,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)>::default_delete<WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(WebKit::NetworkSession &,WebCore::ServiceWorkerJobData &&,BOOL,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&)::$_0>>,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&::Cache::RetrieveInfo const&>::~CallableWrapper(_QWORD *a1)
{
  WebCore::ResourceRequestBase *v2;
  const void *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34C3D28;
  v2 = (WebCore::ResourceRequestBase *)(a1 + 3);
  v3 = (const void *)a1[27];
  a1[27] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return WTF::fastFree((WTF *)a1, v4);
}

WTF *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(WebKit::NetworkSession &,WebCore::ServiceWorkerJobData &&,BOOL,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)>::default_delete<WebKit::ServiceWorkerSoftUpdateLoader::ServiceWorkerSoftUpdateLoader(WebKit::NetworkSession &,WebCore::ServiceWorkerJobData &&,BOOL,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&)::$_0>>,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&)> &&::Cache::RetrieveInfo const&>::call(WTF *result, WebKit::NetworkCache::Entry **a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  __int16 v21;
  CFTypeRef cf;
  char v23;

  v2 = *((_QWORD *)result + 2);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = result;
    v4 = *((_QWORD *)result + 1);
    v5 = *(_QWORD *)(v4 + 312);
    if (v5 && *(_QWORD *)(v5 + 8))
    {
      if (*((_BYTE *)result + 224)
        || !*a2
        || WebCore::ResourceResponseBase::source((WebKit::NetworkCache::Entry *)((char *)*a2 + 80)) == 3)
      {
        v7 = (uint64_t)v3 + 24;
        WebCore::ResourceRequestBase::setCachePolicy();
        v8 = *a2;
        if (*a2)
        {
          *a2 = 0;
          std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v4 + 384), v8);
          WebCore::ResourceResponseBase::httpHeaderField();
          if (v17 && *((_DWORD *)v17 + 1))
            WebCore::ResourceRequestBase::setHTTPHeaderField();
          WebCore::ResourceResponseBase::httpHeaderField();
          v10 = v16;
          if (v16)
          {
            if (*((_DWORD *)v16 + 1))
            {
              WebCore::ResourceRequestBase::setHTTPHeaderField();
              v10 = v16;
            }
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v9);
            else
              *(_DWORD *)v10 -= 2;
          }
          v15 = v17;
          v17 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v9);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
        return WebKit::ServiceWorkerSoftUpdateLoader::loadFromNetwork(v4, *(WebKit::NetworkSession **)(*(_QWORD *)(v4 + 312) + 8), v7);
      }
      else
      {
        return WebKit::ServiceWorkerSoftUpdateLoader::loadWithCacheEntry((WTF::StringImpl **)v4, *a2);
      }
    }
    else
    {
      v17 = 0;
      v18 = 0;
      WTF::URL::invalidate((WTF::URL *)&v18);
      v19 = 0;
      v20 = 0;
      v21 = 3;
      cf = 0;
      v23 = 1;
      WebKit::ServiceWorkerSoftUpdateLoader::fail(v4, (uint64_t)&v17);
      v12 = cf;
      cf = 0;
      if (v12)
        CFRelease(v12);
      v13 = v19;
      v19 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v18;
      v18 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v11);
        else
          *(_DWORD *)v14 -= 2;
      }
      result = v17;
      v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::ServiceWorkerSoftUpdateLoader::didReceiveBuffer(WebCore::FragmentedSharedBuffer const&,unsigned long long)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call(WTF::StringImpl *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;

  if (a3)
  {
    v3 = *((_QWORD *)result + 1);
    WebCore::TextResourceDecoder::decode();
    if (*(_DWORD *)(v3 + 416) || *(_QWORD *)(v3 + 408))
    {
      if (v8)
      {
        v6 = *((_QWORD *)v8 + 1);
        v7 = *((unsigned int *)v8 + 1) | ((unint64_t)((*((_DWORD *)v8 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v6 = 0;
        v7 = 0x100000000;
      }
      WTF::StringBuilder::append(v3 + 400, v6, v7);
      result = v8;
    }
    else
    {
      WTF::String::operator=((WTF::StringImpl **)(v3 + 400), (WTF::StringImpl *)&v8);
      result = v8;
      if (v8)
        v5 = *((_DWORD *)v8 + 1);
      else
        v5 = 0;
      *(_DWORD *)(v3 + 416) = v5;
    }
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebSWRegistrationStore::*&)(void),WebKit::WebSWRegistrationStore*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WebCore::ServiceWorkerContextData *std::optional<WebCore::ServiceWorkerContextData>::operator=[abi:sn180100]<WebCore::ServiceWorkerContextData const&,void>(WebCore::ServiceWorkerContextData *this, __int128 *a2)
{
  if (*((_BYTE *)this + 592))
  {
    WebCore::ServiceWorkerContextData::operator=((uint64_t)this, a2);
  }
  else
  {
    WebCore::ServiceWorkerContextData::ServiceWorkerContextData(this, (const WebCore::ServiceWorkerContextData *)a2);
    *((_BYTE *)this + 592) = 1;
  }
  return this;
}

void WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  WebCore::ServiceWorkerRegistrationKey *v6;
  WTF::StringImpl *v7;
  WebCore::ServiceWorkerRegistrationKey *v8;
  char *v9;
  uint64_t v10;
  WebCore::ServiceWorkerRegistrationKey *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  WTF::StringImpl **v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v52;
  char v53;
  char v54;
  char v55;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = (WebCore::ServiceWorkerRegistrationKey *)WTF::fastMalloc((WTF *)(688 * v5 + 16));
  v8 = v6;
  v9 = (char *)v6 + 16;
  if (v5)
  {
    v10 = v5;
    v11 = v6;
    do
    {
      v6 = (WebCore::ServiceWorkerRegistrationKey *)WebCore::ServiceWorkerRegistrationKey::emptyKey(v6);
      *((_BYTE *)v11 + 96) = 0;
      *((_BYTE *)v11 + 688) = 0;
      v11 = (WebCore::ServiceWorkerRegistrationKey *)((char *)v11 + 688);
      --v10;
    }
    while (v10);
  }
  *a1 = (uint64_t)v9;
  *((_DWORD *)v8 + 3) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v12 = 0;
    v13 = 0;
    v14 = v3;
    do
    {
      v15 = v2 + 688 * v12;
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v15);
      if ((v16 & 1) == 0)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>((WebCore::ServiceWorkerRegistrationKey *)(v2 + 688 * v12)))
        {
          if (*(_BYTE *)(v2 + 688 * v12 + 672))
            WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(v2 + 688 * v12 + 80), v7);
          v17 = *(WTF::StringImpl **)(v15 + 32);
          *(_QWORD *)(v15 + 32) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v7);
            else
              *(_DWORD *)v17 -= 2;
          }
          v28 = *(unsigned int *)(v15 + 24);
          if ((_DWORD)v28 != -1)
            ((void (*)(char *, uint64_t))off_1E34C3A10[v28])(&v53, v2 + 688 * v12);
          *(_DWORD *)(v15 + 24) = -1;
        }
        else
        {
          v18 = *a1;
          v52 = v13;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = WTF::computeHash<WebCore::ServiceWorkerRegistrationKey>(v2 + 688 * v12);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v23 = v18 + 688 * (v20 & v19);
            v25 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>((WebCore::ServiceWorkerRegistrationKey *)v23);
            v20 = ++v21 + v22;
          }
          while (!v25);
          v26 = v18 + 688 * v22;
          if (*(_BYTE *)(v26 + 672))
            WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(v18 + 688 * v22 + 80), v24);
          v27 = *(WTF::StringImpl **)(v23 + 32);
          *(_QWORD *)(v23 + 32) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v24);
            else
              *(_DWORD *)v27 -= 2;
          }
          v29 = *(unsigned int *)(v23 + 24);
          if ((_DWORD)v29 != -1)
            ((void (*)(char *, uint64_t))off_1E34C3A10[v29])(&v55, v18 + 688 * v22);
          v30 = (_BYTE *)(v26 + 672);
          *(_BYTE *)v23 = 0;
          *(_DWORD *)(v23 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v18 + 688 * v22, v2 + 688 * v12);
          v31 = (WTF::StringImpl **)(v15 + 32);
          v32.n128_f64[0] = WTF::URL::URL(v23 + 32, (uint64_t *)(v15 + 32));
          v33 = v18 + 688 * v22;
          *(_BYTE *)(v33 + 80) = 0;
          v34 = v33 + 80;
          *v30 = 0;
          v35 = v2 + 688 * v12;
          if (*(_BYTE *)(v35 + 672))
          {
            v36 = v2 + 688 * v12;
            v37 = *(_OWORD *)(v36 + 80);
            v38 = (_BYTE *)(v35 + 672);
            *(_QWORD *)(v34 + 16) = *(_QWORD *)(v36 + 96);
            *(_OWORD *)v34 = v37;
            WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v34 + 24, v36 + 104);
            *(_QWORD *)(v34 + 376) = *(_QWORD *)(v36 + 456);
            v39 = *(_QWORD *)(v36 + 464);
            *(_QWORD *)(v36 + 464) = 0;
            *(_QWORD *)(v34 + 384) = v39;
            v40 = *(_QWORD *)(v36 + 472);
            *(_QWORD *)(v36 + 472) = 0;
            *(_QWORD *)(v34 + 400) = 0;
            *(_QWORD *)(v34 + 408) = 0;
            *(_QWORD *)(v34 + 392) = v40;
            v41 = *(_QWORD *)(v36 + 480);
            *(_QWORD *)(v36 + 480) = 0;
            *(_QWORD *)(v34 + 400) = v41;
            LODWORD(v41) = *(_DWORD *)(v36 + 488);
            *(_DWORD *)(v36 + 488) = 0;
            *(_DWORD *)(v34 + 408) = v41;
            LODWORD(v41) = *(_DWORD *)(v36 + 492);
            *(_DWORD *)(v36 + 492) = 0;
            *(_DWORD *)(v34 + 412) = v41;
            LODWORD(v41) = *(_DWORD *)(v36 + 496);
            *(_BYTE *)(v34 + 420) = *(_BYTE *)(v36 + 500);
            *(_DWORD *)(v34 + 416) = v41;
            *(_WORD *)(v34 + 424) = *(_WORD *)(v36 + 504);
            v42 = *(_QWORD *)(v36 + 512);
            *(_QWORD *)(v36 + 512) = 0;
            *(_QWORD *)(v34 + 432) = v42;
            v43 = *(_QWORD *)(v36 + 520);
            *(_QWORD *)(v36 + 520) = 0;
            *(_QWORD *)(v34 + 440) = v43;
            v44 = *(_QWORD *)(v36 + 528);
            *(_QWORD *)(v36 + 528) = 0;
            *(_QWORD *)(v34 + 448) = v44;
            WTF::URL::URL(v34 + 456, (uint64_t *)(v36 + 536));
            *(_DWORD *)(v34 + 496) = *(_DWORD *)(v36 + 576);
            *(_QWORD *)(v34 + 517) = 0;
            *(_QWORD *)(v34 + 504) = 0;
            *(_QWORD *)(v34 + 512) = 0;
            v45 = *(_QWORD *)(v36 + 584);
            *(_QWORD *)(v36 + 584) = 0;
            *(_QWORD *)(v34 + 504) = v45;
            LODWORD(v45) = *(_DWORD *)(v36 + 592);
            *(_DWORD *)(v36 + 592) = 0;
            *(_DWORD *)(v34 + 512) = v45;
            LODWORD(v45) = *(_DWORD *)(v36 + 596);
            *(_DWORD *)(v36 + 596) = 0;
            *(_DWORD *)(v34 + 516) = v45;
            LODWORD(v45) = *(_DWORD *)(v36 + 600);
            *(_DWORD *)(v36 + 600) = 0;
            *(_DWORD *)(v34 + 520) = v45;
            LOBYTE(v45) = *(_BYTE *)(v36 + 604);
            *(_BYTE *)(v36 + 604) = 0;
            *(_BYTE *)(v34 + 524) = v45;
            v32 = *(__n128 *)(v36 + 608);
            v46 = *(_OWORD *)(v36 + 640);
            *(_OWORD *)(v34 + 544) = *(_OWORD *)(v36 + 624);
            *(_OWORD *)(v34 + 560) = v46;
            *(__n128 *)(v34 + 528) = v32;
            *(_BYTE *)(v34 + 576) = *(_BYTE *)(v36 + 656);
            v47 = *(_QWORD *)(v36 + 664);
            *(_QWORD *)(v36 + 664) = 0;
            *(_QWORD *)(v34 + 584) = v47;
            *v30 = 1;
            if (*v38)
              WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(v36 + 80), v7);
          }
          v48 = *v31;
          *v31 = 0;
          v13 = v52;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, v7);
            else
              *(_DWORD *)v48 -= 2;
          }
          v49 = *(unsigned int *)(v15 + 24);
          if ((_DWORD)v49 != -1)
            ((void (*)(char *, uint64_t, __n128))off_1E34C3A10[v49])(&v54, v2 + 688 * v12, v32);
          *(_DWORD *)(v15 + 24) = -1;
          if (v15 == a2)
            v13 = v23;
          v14 = v3;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  if (v2)
    WTF::fastFree((WTF *)(v2 - 16), v7);
}

uint64_t WTF::computeHash<WebCore::ServiceWorkerRegistrationKey>(uint64_t a1)
{
  uint64_t *v1;
  unsigned int v3;
  __int16 v4;
  char v5;

  v3 = -1640531527;
  v4 = 0;
  v5 = 0;
  v1 = (uint64_t *)(a1 + 32);
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v3, a1);
  WTF::add(&v3, v1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v3);
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>(WebCore::ServiceWorkerRegistrationKey *a1)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;
  _BYTE v7[24];
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  WebCore::ServiceWorkerRegistrationKey::emptyKey(a1);
  v3 = WebCore::operator==((uint64_t)a1, (uint64_t)v7);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (v8 != -1)
    ((void (*)(char *, _BYTE *))off_1E34C3A10[v8])(&v6, v7);
  return v3;
}

uint64_t WebCore::ServiceWorkerContextData::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  const void *v11;
  const void *v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  const void *v18;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 24, (uint64_t)a2 + 24);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)((char *)a2 + 56));
  v5 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 104), (WTF::StringImpl *)((char *)a2 + 104));
  v6 = a2[8];
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = a2[9];
  std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::ServiceWorkerData,false> const&>(a1 + 160, (uint64_t)(a2 + 10));
  std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::ServiceWorkerData,false> const&>(a1 + 232, (uint64_t)a2 + 232);
  std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::ServiceWorkerData,false> const&>(a1 + 304, (uint64_t)(a2 + 19));
  *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
  v8 = (unsigned int *)*((_QWORD *)a2 + 48);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = *(unsigned int **)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v8;
  if (v10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v7);
  v11 = (const void *)*((_QWORD *)a2 + 49);
  if (v11)
  {
    v18 = (const void *)*((_QWORD *)a2 + 49);
    CFRetain(v11);
    v11 = v18;
  }
  v12 = *(const void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v11;
  if (v12)
    CFRelease(v12);
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 400), (uint64_t)(a2 + 25));
  v13 = *((_DWORD *)a2 + 104);
  *(_BYTE *)(a1 + 420) = *((_BYTE *)a2 + 420);
  *(_DWORD *)(a1 + 416) = v13;
  *(_WORD *)(a1 + 424) = *((_WORD *)a2 + 212);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 432), (WTF::StringImpl *)(a2 + 27));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 440), (WTF::StringImpl *)((char *)a2 + 440));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 448), (WTF::StringImpl *)(a2 + 28));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 456), (WTF::StringImpl *)((char *)a2 + 456));
  v14 = a2[30];
  *(_OWORD *)(a1 + 464) = a2[29];
  *(_OWORD *)(a1 + 480) = v14;
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a2 + 124);
  WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(a1 + 504, (uint64_t *)a2 + 63);
  v16 = a2[33];
  v15 = a2[34];
  *(_BYTE *)(a1 + 560) = *((_BYTE *)a2 + 560);
  *(_OWORD *)(a1 + 528) = v16;
  *(_OWORD *)(a1 + 544) = v15;
  *(_BYTE *)(a1 + 576) = *((_BYTE *)a2 + 576);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 584), (WTF::StringImpl *)((char *)a2 + 584));
  return a1;
}

__n128 std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::ServiceWorkerData,false> const&>(uint64_t a1, uint64_t a2)
{
  __n128 result;
  _DWORD *v5;

  if (*(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (*(_BYTE *)(a1 + 64))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      WTF::String::operator=((WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(a2 + 16));
      result = *(__n128 *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(__n128 *)(a1 + 24) = result;
      *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    }
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(_DWORD **)(a2 + 16);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(a1 + 16) = v5;
    result = *(__n128 *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(__n128 *)(a1 + 24) = result;
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
  }
  return result;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  if ((unsigned int *)a2 != a1)
  {
    v4 = a1[3];
    v5 = *(unsigned int *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > a1[2])
      {
        WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
        LODWORD(v4) = a1[3];
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v4));
      a1[3] = v5;
      LODWORD(v4) = v5;
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::ContentType const*,WebCore::ContentType const*,WebCore::ContentType*,0>(*(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 16 * v4), *(_QWORD *)a1);
    v6 = a1[3];
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6 != (_DWORD)v7)
    {
      v8 = *(_QWORD *)a2 + 16 * v7;
      v9 = *(_QWORD *)a1 + 16 * v6;
      v10 = *(_QWORD *)a2 + 16 * v6;
      do
      {
        v11 = *(_DWORD **)v10;
        if (*(_QWORD *)v10)
          *v11 += 2;
        *(_QWORD *)v9 = v11;
        *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
        v10 += 16;
        v9 += 16;
      }
      while (v10 != v8);
    }
    a1[3] = v7;
  }
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::operator=(uint64_t a1, uint64_t *a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  WTF *v7;
  uint64_t v8;
  int v9;
  char v10;

  WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)&v7, a2);
  v3 = *(WTF **)a1;
  *(_QWORD *)a1 = v7;
  v7 = v3;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v8 = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v9;
  v9 = v5;
  LOBYTE(v5) = *(_BYTE *)(a1 + 20);
  *(_BYTE *)(a1 + 20) = v10;
  v10 = v5;
  if (v3)
    WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)v4);
  return a1;
}

uint64_t WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t Table;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  __int128 v19;
  WTF::StringImpl *v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  WTF::StringImpl **v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned int *v35;
  WTF::StringImpl *v36;
  uint64_t *v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  unsigned int *v42;
  WTF::StringImpl *v43;
  __int128 v44;
  __int128 v45;
  WTF::StringImpl *v46;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 13) = 0;
  v3 = *((_DWORD *)a2 + 2);
  if (v3)
    v4 = *((_DWORD *)a2 + 3) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = a2;
    Table = WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::allocateTable(v3);
    *(_QWORD *)a1 = Table;
    *(_QWORD *)(a1 + 8) = v5[1];
    v7 = (~(Table << 32) + Table) ^ ((unint64_t)(~(Table << 32) + Table) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    *(_DWORD *)(a1 + 16) = (v9 >> 31) ^ v9;
    *(_BYTE *)(a1 + 20) = *((_BYTE *)v5 + 20);
    if (*((_DWORD *)v5 + 2))
    {
      v10 = 0;
      v38 = v5;
      do
      {
        v11 = *v5;
        v12 = *v5 + 96 * v10;
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)v12) & 1) == 0)
        {
          v13 = *(WTF::StringImpl **)v12;
          if (*(_QWORD *)v12)
            *(_DWORD *)v13 += 2;
          v39 = v13;
          v14 = *(_OWORD *)(v12 + 24);
          v40 = *(_OWORD *)(v12 + 8);
          v41 = v14;
          v15 = *(unsigned int **)(v11 + 96 * v10 + 40);
          if (v15)
          {
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 + 1, v15));
          }
          v42 = v15;
          v17 = *(WTF::StringImpl **)(v11 + 96 * v10 + 48);
          if (v17)
            *(_DWORD *)v17 += 2;
          v43 = v17;
          v18 = v11 + 96 * v10;
          v19 = *(_OWORD *)(v18 + 72);
          v44 = *(_OWORD *)(v18 + 56);
          v45 = v19;
          v20 = *(WTF::StringImpl **)(v18 + 88);
          if (v20)
            *(_DWORD *)v20 += 2;
          v46 = v20;
          v21 = *(_DWORD *)(a1 + 8);
          v22 = *(_DWORD *)(a1 + 16);
          v23 = *((_DWORD *)v39 + 4);
          if (v23 >= 0x100)
            v24 = v23 >> 8;
          else
            v24 = WTF::StringImpl::hashSlowCase(v39);
          v25 = v21 - 1;
          v26 = (v24 ^ v22) & (v21 - 1);
          v27 = (WTF::StringImpl **)(*(_QWORD *)a1 + 96 * v26);
          if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v27) & 1) == 0)
          {
            v28 = 0;
            do
            {
              v29 = *((_DWORD *)*v27 + 4);
              if (v29 >= 0x100)
                v30 = v29 >> 8;
              else
                v30 = WTF::StringImpl::hashSlowCase(*v27);
              v31 = (v26 + v21 - ((v30 ^ v22) & v25)) & v25;
              if (v28 > v31)
              {
                std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>((uint64_t)&v39, v27);
                v28 = v31;
              }
              ++v28;
              v26 = (v26 + 1) & v25;
              v27 = (WTF::StringImpl **)(*(_QWORD *)a1 + 96 * v26);
            }
            while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v27));
          }
          WTF::GenericHashTraits<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>::assignToEmpty<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>((uint64_t)v27, &v39);
          v33 = v46;
          v46 = 0;
          v5 = v38;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v32);
            else
              *(_DWORD *)v33 -= 2;
          }
          v34 = v43;
          v43 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v32);
            else
              *(_DWORD *)v34 -= 2;
          }
          v35 = v42;
          v42 = 0;
          if (v35)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v35, v32);
          v36 = v39;
          v39 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v32);
            else
              *(_DWORD *)v36 -= 2;
          }
        }
        ++v10;
      }
      while (v10 < *((unsigned int *)v5 + 2));
    }
  }
  return a1;
}

WebCore::ServiceWorkerContextData *WebCore::ServiceWorkerContextData::ServiceWorkerContextData(WebCore::ServiceWorkerContextData *this, const WebCore::ServiceWorkerContextData *a2)
{
  __int128 v4;
  unsigned int *v5;
  unsigned int v6;
  const void *v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _DWORD *v16;

  v4 = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)this = v4;
  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)this + 24, (uint64_t)a2 + 24);
  *((_QWORD *)this + 47) = *((_QWORD *)a2 + 47);
  v5 = (unsigned int *)*((_QWORD *)a2 + 48);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = (const void *)*((_QWORD *)a2 + 49);
  *((_QWORD *)this + 48) = v5;
  *((_QWORD *)this + 49) = v7;
  if (v7)
    CFRetain(v7);
  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 400, (uint64_t *)a2 + 50);
  v8 = *((_DWORD *)a2 + 104);
  *((_BYTE *)this + 420) = *((_BYTE *)a2 + 420);
  *((_DWORD *)this + 104) = v8;
  *((_WORD *)this + 212) = *((_WORD *)a2 + 212);
  v9 = (_DWORD *)*((_QWORD *)a2 + 54);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 54) = v9;
  v10 = (_DWORD *)*((_QWORD *)a2 + 55);
  if (v10)
    *v10 += 2;
  *((_QWORD *)this + 55) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 56);
  if (v11)
    *v11 += 2;
  *((_QWORD *)this + 56) = v11;
  v12 = (_DWORD *)*((_QWORD *)a2 + 57);
  if (v12)
    *v12 += 2;
  *((_QWORD *)this + 57) = v12;
  v13 = *((_OWORD *)a2 + 30);
  *((_OWORD *)this + 29) = *((_OWORD *)a2 + 29);
  *((_OWORD *)this + 30) = v13;
  *((_DWORD *)this + 124) = *((_DWORD *)a2 + 124);
  WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::RobinHoodHashTable((uint64_t)this + 504, (uint64_t *)a2 + 63);
  v14 = *((_OWORD *)a2 + 33);
  v15 = *((_OWORD *)a2 + 35);
  *((_OWORD *)this + 34) = *((_OWORD *)a2 + 34);
  *((_OWORD *)this + 35) = v15;
  *((_OWORD *)this + 33) = v14;
  *((_BYTE *)this + 576) = *((_BYTE *)a2 + 576);
  v16 = (_DWORD *)*((_QWORD *)a2 + 73);
  if (v16)
    *v16 += 2;
  *((_QWORD *)this + 73) = v16;
  return this;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ServiceWorkerRegistrationKey>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v8 = v2;
    v9 = v3;
    v5 = result;
    do
    {
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v6 = *((unsigned int *)v5 + 6);
      if ((_DWORD)v6 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl *))off_1E34C3A10[v6])(&v7, v5);
      *((_DWORD *)v5 + 6) = -1;
      v5 = (WTF::StringImpl *)((char *)v5 + 72);
    }
    while (v5 != a2);
  }
  return result;
}

void WTF::HashTableConstIterator<WTF::HashTable<WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>,WebCore::ServiceWorkerRegistrationKey,WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>>>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashMap<WebCore::ServiceWorkerRegistrationKey,std::optional<WebCore::ServiceWorkerContextData>,WTF::DefaultHash<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,WTF::HashTraits<std::optional<WebCore::ServiceWorkerContextData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>>::skipEmptyBuckets(WebCore::SecurityOriginData **a1)
{
  WebCore::SecurityOriginData *v1;
  int v3;
  WebCore::SecurityOriginData *v4;

  v1 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ServiceWorkerRegistrationKey>,false>::isEmptyValue<WebCore::ServiceWorkerRegistrationKey>(v1) & 1) == 0)
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue(v1);
        if (!v3)
          break;
      }
      v4 = a1[1];
      v1 = (WebCore::SecurityOriginData *)((char *)*a1 + 688);
      *a1 = v1;
    }
    while (v1 != v4);
  }
}

unint64_t WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x197163FD4);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12));
    v5 = 72 * a2;
    v6 = WTF::fastMalloc((WTF *)(72 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::ServiceWorkerRegistrationKey>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ServiceWorkerRegistrationKey>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v13 = v3;
    v14 = v4;
    v6 = a3 + 32;
    v7 = (uint64_t *)((char *)result + 32);
    do
    {
      *(_BYTE *)(v6 - 32) = 0;
      *(_DWORD *)(v6 - 8) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v6 - 32, (uint64_t)(v7 - 4));
      v9.n128_f64[0] = WTF::URL::URL(v6, v7);
      result = (WTF::StringImpl *)*v7;
      *v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      v10 = *((unsigned int *)v7 - 2);
      if ((_DWORD)v10 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *, __n128))off_1E34C3A10[v10])(&v12, v7 - 4, v9);
      *((_DWORD *)v7 - 2) = -1;
      v6 += 72;
      v11 = v7 + 5;
      v7 += 9;
    }
    while (v11 != (uint64_t *)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerContextData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v3 = WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 592 * *(unsigned int *)(a1 + 12);
  v5 = *(_OWORD *)v3;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
  *(_OWORD *)v4 = v5;
  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v4 + 24, v3 + 24);
  *(_QWORD *)(v4 + 376) = *(_QWORD *)(v3 + 376);
  v6 = *(_QWORD *)(v3 + 384);
  *(_QWORD *)(v3 + 384) = 0;
  *(_QWORD *)(v4 + 384) = v6;
  v7 = *(_QWORD *)(v3 + 392);
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v4 + 400) = 0;
  *(_QWORD *)(v4 + 408) = 0;
  *(_QWORD *)(v4 + 392) = v7;
  v8 = *(_QWORD *)(v3 + 400);
  *(_QWORD *)(v3 + 400) = 0;
  *(_QWORD *)(v4 + 400) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 408);
  *(_DWORD *)(v3 + 408) = 0;
  *(_DWORD *)(v4 + 408) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 412);
  *(_DWORD *)(v3 + 412) = 0;
  *(_DWORD *)(v4 + 412) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 416);
  *(_BYTE *)(v4 + 420) = *(_BYTE *)(v3 + 420);
  *(_DWORD *)(v4 + 416) = v8;
  *(_WORD *)(v4 + 424) = *(_WORD *)(v3 + 424);
  v9 = *(_QWORD *)(v3 + 432);
  *(_QWORD *)(v3 + 432) = 0;
  *(_QWORD *)(v4 + 432) = v9;
  v10 = *(_QWORD *)(v3 + 440);
  *(_QWORD *)(v3 + 440) = 0;
  *(_QWORD *)(v4 + 440) = v10;
  v11 = *(_QWORD *)(v3 + 448);
  *(_QWORD *)(v3 + 448) = 0;
  *(_QWORD *)(v4 + 448) = v11;
  WTF::URL::URL(v4 + 456, (uint64_t *)(v3 + 456));
  *(_DWORD *)(v4 + 496) = *(_DWORD *)(v3 + 496);
  *(_QWORD *)(v4 + 517) = 0;
  *(_QWORD *)(v4 + 504) = 0;
  *(_QWORD *)(v4 + 512) = 0;
  v12 = *(_QWORD *)(v3 + 504);
  *(_QWORD *)(v3 + 504) = 0;
  *(_QWORD *)(v4 + 504) = v12;
  LODWORD(v12) = *(_DWORD *)(v3 + 512);
  *(_DWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v4 + 512) = v12;
  LODWORD(v12) = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = 0;
  *(_DWORD *)(v4 + 516) = v12;
  LODWORD(v12) = *(_DWORD *)(v3 + 520);
  *(_DWORD *)(v3 + 520) = 0;
  *(_DWORD *)(v4 + 520) = v12;
  LOBYTE(v12) = *(_BYTE *)(v3 + 524);
  *(_BYTE *)(v3 + 524) = 0;
  *(_BYTE *)(v4 + 524) = v12;
  v13 = *(_OWORD *)(v3 + 528);
  v14 = *(_OWORD *)(v3 + 560);
  *(_OWORD *)(v4 + 544) = *(_OWORD *)(v3 + 544);
  *(_OWORD *)(v4 + 560) = v14;
  *(_OWORD *)(v4 + 528) = v13;
  *(_BYTE *)(v4 + 576) = *(_BYTE *)(v3 + 576);
  v15 = *(_QWORD *)(v3 + 584);
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v4 + 584) = v15;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 592 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;
  __int128 *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6EB3E5)
    {
      __break(0xC471u);
      JUMPOUT(0x19716436CLL);
    }
    v3 = *(__int128 **)a1;
    v4 = (__int128 *)(*(_QWORD *)a1 + 592 * *(unsigned int *)(a1 + 12));
    v5 = 592 * a2;
    v6 = WTF::fastMalloc((WTF *)(592 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x250;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::ServiceWorkerContextData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(__int128 **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebCore::ServiceWorkerContextData>::move(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(a3 + 24, (uint64_t)v5 + 24);
      *(_QWORD *)(a3 + 376) = *((_QWORD *)v5 + 47);
      v7 = *((_QWORD *)v5 + 48);
      *((_QWORD *)v5 + 48) = 0;
      *(_QWORD *)(a3 + 384) = v7;
      v8 = *((_QWORD *)v5 + 49);
      *((_QWORD *)v5 + 49) = 0;
      *(_QWORD *)(a3 + 400) = 0;
      *(_QWORD *)(a3 + 408) = 0;
      *(_QWORD *)(a3 + 392) = v8;
      v9 = *((_QWORD *)v5 + 50);
      *((_QWORD *)v5 + 50) = 0;
      *(_QWORD *)(a3 + 400) = v9;
      LODWORD(v9) = *((_DWORD *)v5 + 102);
      *((_DWORD *)v5 + 102) = 0;
      *(_DWORD *)(a3 + 408) = v9;
      LODWORD(v9) = *((_DWORD *)v5 + 103);
      *((_DWORD *)v5 + 103) = 0;
      *(_DWORD *)(a3 + 412) = v9;
      LODWORD(v9) = *((_DWORD *)v5 + 104);
      *(_BYTE *)(a3 + 420) = *((_BYTE *)v5 + 420);
      *(_DWORD *)(a3 + 416) = v9;
      *(_WORD *)(a3 + 424) = *((_WORD *)v5 + 212);
      v10 = *((_QWORD *)v5 + 54);
      *((_QWORD *)v5 + 54) = 0;
      *(_QWORD *)(a3 + 432) = v10;
      v11 = *((_QWORD *)v5 + 55);
      *((_QWORD *)v5 + 55) = 0;
      *(_QWORD *)(a3 + 440) = v11;
      v12 = *((_QWORD *)v5 + 56);
      *((_QWORD *)v5 + 56) = 0;
      *(_QWORD *)(a3 + 448) = v12;
      WTF::URL::URL(a3 + 456, (uint64_t *)v5 + 57);
      *(_DWORD *)(a3 + 496) = *((_DWORD *)v5 + 124);
      *(_QWORD *)(a3 + 517) = 0;
      *(_QWORD *)(a3 + 504) = 0;
      *(_QWORD *)(a3 + 512) = 0;
      v13 = *((_QWORD *)v5 + 63);
      *((_QWORD *)v5 + 63) = 0;
      *(_QWORD *)(a3 + 504) = v13;
      LODWORD(v13) = *((_DWORD *)v5 + 128);
      *((_DWORD *)v5 + 128) = 0;
      *(_DWORD *)(a3 + 512) = v13;
      LODWORD(v13) = *((_DWORD *)v5 + 129);
      *((_DWORD *)v5 + 129) = 0;
      *(_DWORD *)(a3 + 516) = v13;
      LODWORD(v13) = *((_DWORD *)v5 + 130);
      *((_DWORD *)v5 + 130) = 0;
      *(_DWORD *)(a3 + 520) = v13;
      LOBYTE(v13) = *((_BYTE *)v5 + 524);
      *((_BYTE *)v5 + 524) = 0;
      *(_BYTE *)(a3 + 524) = v13;
      v14 = v5[33];
      v15 = v5[35];
      *(_OWORD *)(a3 + 544) = v5[34];
      *(_OWORD *)(a3 + 560) = v15;
      *(_OWORD *)(a3 + 528) = v14;
      *(_BYTE *)(a3 + 576) = *((_BYTE *)v5 + 576);
      v16 = *((_QWORD *)v5 + 73);
      *((_QWORD *)v5 + 73) = 0;
      *(_QWORD *)(a3 + 584) = v16;
      WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)v5, v17);
      v5 += 37;
      a3 += 592;
    }
    while (v5 != a2);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSWRegistrationStore::updateToStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C3DA0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWRegistrationStore::updateToStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C3DA0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWRegistrationStore::updateToStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::call(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  int v20;

  v3 = a1[2];
  if (v3
    && *(_QWORD *)(v3 + 8)
    && (v4 = a1[1], (v5 = *(_QWORD *)(v4 + 16)) != 0)
    && (*(_QWORD *)(v5 + 8) ? (v6 = *((_BYTE *)a2 + 16) == 0) : (v6 = 1), !v6))
  {
    v9 = *a2;
    v18 = *a2;
    v11 = *((_DWORD *)a2 + 2);
    v10 = *((unsigned int *)a2 + 3);
    *a2 = 0;
    a2[1] = 0;
    v19 = v11;
    v20 = v10;
    if ((_DWORD)v10)
    {
      v12 = 40 * v10;
      v13 = v9 + 8;
      do
      {
        v14 = *(_QWORD *)(v4 + 16);
        if (v14 && (v15 = *(_DWORD **)(v14 + 8)) != 0)
        {
          ++*v15;
          WebCore::SWServer::didSaveWorkerScriptsToDisk();
          WTF::RefCounted<WebCore::SWServer>::deref(v15);
        }
        else
        {
          WebCore::SWServer::didSaveWorkerScriptsToDisk();
        }
        v13 += 40;
        v12 -= 40;
      }
      while (v12);
    }
    v16 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    return WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v17);
  }
  else
  {
    v7 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

unsigned int *WTF::VectorDestructor<true,WebCore::ServiceWorkerScripts>::destruct(unsigned int *result, unsigned int *a2)
{
  unsigned int *v3;
  WTF *v4;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (WTF *)*((_QWORD *)v3 + 2);
      if (v4)
        WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, (void *)v3[6]);
      result = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (result)
        result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
      v3 += 10;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ScriptBuffer>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ScriptBuffer,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ScriptBuffer>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *v5;
  WTF::StringImpl *v6;

  if ((_DWORD)a2)
  {
    v3 = a2;
    v4 = this;
    do
    {
      v5 = (unsigned int *)*((_QWORD *)v4 + 5);
      *((_QWORD *)v4 + 5) = 0;
      if (v5)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, a2);
      v6 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 48);
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand()
{
  int v0;

  if (qword_1ECE729E8 && (v0 = *(_DWORD *)(qword_1ECE729E8 - 4)) != 0)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1ECE729E8 - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(8u);
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorker,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  v2 = qword_1ECE729E8;
  if (qword_1ECE729E8)
  {
    v3 = *(_DWORD *)(qword_1ECE729E8 - 4);
    v4 = *(_DWORD *)(qword_1ECE729E8 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE729E8 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE729E8 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    while (1)
    {
      v8 = (uint64_t *)(v2 + 16 * v7);
      v9 = *v8;
      if (*v8 != -1)
      {
        if (v9)
        {
          if (qword_1ECE729E8)
            v14 = *(_DWORD *)(qword_1ECE729E8 - 8);
          else
            v14 = 0;
          v15 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          v18 = v14 & ((v17 >> 31) ^ v17);
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = *(_QWORD *)(qword_1ECE729E8 + 16 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (v21);
          v22 = (uint64_t *)(qword_1ECE729E8 + 16 * v20);
          v23 = (unsigned int *)v22[1];
          v22[1] = 0;
          if (v23)
          {
            do
            {
              v26 = __ldaxr(v23);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v23));
            if (!v27)
            {
              atomic_store(1u, v23);
              WTF::fastFree((WTF *)v23, v6);
            }
          }
          *v22 = *v8;
          v24 = v2 + 16 * v7;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          v22[1] = v25;
          v11 = *(unsigned int **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (!v11)
            goto LABEL_19;
          do
          {
            v28 = __ldaxr(v11);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v11));
          if (v29)
            goto LABEL_19;
        }
        else
        {
          v10 = v2 + 16 * v7;
          v11 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (!v11)
            goto LABEL_19;
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (v13)
            goto LABEL_19;
        }
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v6);
      }
LABEL_19:
      if (++v7 == v3)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::expand(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  unsigned int v20;
  __int16 v21;
  char v22;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD **)(v6 + 8 * v11);
      v10 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v20 = -1640531527;
        v21 = 0;
        v22 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v20, v10);
        v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
        v17 = 0;
        do
        {
          v18 = v16 & v15;
          v16 = ++v17 + v18;
        }
        while (*(_QWORD *)(v14 + 8 * v18));
        *(_QWORD *)(v14 + 8 * v18) = *v13;
        if (v13 == a3)
          v12 = v14 + 8 * v18;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::WebSharedWorker::Object> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::WebSharedWorker::Object>>,WebKit::WebSharedWorker::Object>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  int i;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v14;
  __int16 v15;
  char v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v14 = -1640531527;
  v15 = 0;
  v16 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v14, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v14);
  for (i = 0; ; v6 = i + v8)
  {
    v8 = v6 & v5;
    v9 = *(uint64_t **)(v2 + 8 * v8);
    if (v9 == (uint64_t *)-1)
      goto LABEL_9;
    if (!v9)
      break;
    v11 = *v9;
    v10 = v9[1];
    if (v11 == *a2 && v10 == a2[1])
      return v2 + 8 * v8;
LABEL_9:
    ++i;
  }
  if (!*a1)
    return 0;
  return *a1 + 8 * *(unsigned int *)(*a1 - 4);
}

uint64_t WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  WTF::StringImpl ***v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  unsigned int v51;
  __int16 v52;
  char v53;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(120 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
  {
    v11 = a2;
    v12 = v7 + 80;
    do
    {
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)(v12 - 16) = 0u;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 - 48) = 0u;
      *(_OWORD *)(v12 - 32) = 0u;
      *(_OWORD *)(v12 - 64) = 0u;
      WTF::URL::invalidate((WTF::URL *)v12);
      *(_QWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      v12 += 120;
      --v11;
    }
    while (v11);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v15 = v5;
    do
    {
      v16 = v4 + 120 * v13;
      v17 = (uint64_t *)(v16 + 64);
      if (*(_QWORD *)(v16 + 64) != -1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v4 + 120 * v13))
        {
          std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100]((WTF::StringImpl ***)(v4 + 120 * v13 + 112), 0);
          v18 = *(WTF::StringImpl **)(v16 + 104);
          *(_QWORD *)(v16 + 104) = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v8);
            else
              *(_DWORD *)v18 -= 2;
          }
          v28 = (WTF::StringImpl *)*v17;
          *v17 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v8);
            else
              *(_DWORD *)v28 -= 2;
          }
          v30 = *(unsigned int *)(v16 + 56);
          if ((_DWORD)v30 != -1)
            ((void (*)(char *, uint64_t))off_1E34C3A10[v30])(&v45, v16 + 32);
          *(_DWORD *)(v16 + 56) = -1;
          v31 = *(unsigned int *)(v16 + 24);
          if ((_DWORD)v31 != -1)
            ((void (*)(char *, uint64_t))off_1E34C3A10[v31])(&v46, v4 + 120 * v13);
          *(_DWORD *)(v16 + 24) = -1;
        }
        else
        {
          v19 = *a1;
          v44 = v14;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v51 = -1640531527;
          v52 = 0;
          v53 = 0;
          WTF::add<WebCore::ClientOrigin,WTF::URL,WTF::String>(&v51, v4 + 120 * v13, v17, (uint64_t *)(v16 + 104));
          v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v51);
          v22 = 0;
          do
          {
            v23 = v21 & v20;
            v14 = v19 + 120 * (v21 & v20);
            v24 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v14);
            v21 = ++v22 + v23;
          }
          while (!v24);
          v25 = (WTF::StringImpl ***)(v19 + 120 * v23 + 112);
          std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100](v25, 0);
          v27 = *(WTF::StringImpl **)(v14 + 104);
          *(_QWORD *)(v14 + 104) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v26);
            else
              *(_DWORD *)v27 -= 2;
          }
          v29 = *(WTF::StringImpl **)(v14 + 64);
          *(_QWORD *)(v14 + 64) = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v26);
            else
              *(_DWORD *)v29 -= 2;
          }
          v32 = *(unsigned int *)(v14 + 56);
          if ((_DWORD)v32 != -1)
            ((void (*)(char *, uint64_t))off_1E34C3A10[v32])(&v49, v14 + 32);
          *(_DWORD *)(v14 + 56) = -1;
          v33 = *(unsigned int *)(v14 + 24);
          if ((_DWORD)v33 != -1)
            ((void (*)(char *, uint64_t))off_1E34C3A10[v33])(&v50, v14);
          *(_BYTE *)v14 = 0;
          *(_DWORD *)(v14 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v14, v4 + 120 * v13);
          *(_BYTE *)(v14 + 32) = 0;
          *(_DWORD *)(v14 + 56) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v14 + 32, v16 + 32);
          WTF::URL::URL(v14 + 64, v17);
          v34 = *(_QWORD *)(v16 + 104);
          *(_QWORD *)(v16 + 104) = 0;
          *(_QWORD *)(v14 + 104) = v34;
          v35 = (WTF::StringImpl ***)(v4 + 120 * v13);
          v36 = v35[14];
          v35 += 14;
          *v35 = 0;
          *v25 = v36;
          std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100](v35, 0);
          v37 = *(WTF::StringImpl **)(v16 + 104);
          *(_QWORD *)(v16 + 104) = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v8);
            else
              *(_DWORD *)v37 -= 2;
          }
          v38 = (WTF::StringImpl *)*v17;
          *v17 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v8);
            else
              *(_DWORD *)v38 -= 2;
          }
          v39 = *(unsigned int *)(v16 + 56);
          if ((_DWORD)v39 != -1)
            ((void (*)(char *, uint64_t))off_1E34C3A10[v39])(&v47, v16 + 32);
          *(_DWORD *)(v16 + 56) = -1;
          v40 = *(unsigned int *)(v16 + 24);
          if ((_DWORD)v40 != -1)
            ((void (*)(char *, uint64_t))off_1E34C3A10[v40])(&v48, v4 + 120 * v13);
          *(_DWORD *)(v16 + 24) = -1;
          v15 = v5;
          if (v16 != a3)
            v14 = v44;
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v14;
}

unsigned int *WTF::add<WebCore::ClientOrigin,WTF::URL,WTF::String>(unsigned int *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;

  v7 = a2 + 32;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2);
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, v7);
  WTF::add(a1, a3);
  return WTF::add(a1, a4);
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(uint64_t a1)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  WTF::StringImpl *v12[2];
  __int128 v13;
  WTF::StringImpl *v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  *(_OWORD *)v14 = 0u;
  v11 = 0u;
  *(_OWORD *)v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  WTF::URL::invalidate((WTF::URL *)v12);
  v14[1] = 0;
  v3 = WebCore::operator==(a1, (uint64_t)&v8);
  v4 = v14[1];
  v14[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v12[0];
  v12[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (DWORD2(v11) != -1)
    ((void (*)(char *, __int128 *))off_1E34C3A10[DWORD2(v11)])(&v7, &v10);
  DWORD2(v11) = -1;
  if (DWORD2(v9) != -1)
    ((void (*)(char *, __int128 *))off_1E34C3A10[DWORD2(v9)])(&v7, &v8);
  return v3;
}

uint64_t WTF::makeString<unsigned long long,char,unsigned long long>@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  unint64_t v6;
  char v7;
  uint64_t v8;

  v8 = a1;
  v7 = a2;
  v6 = a3;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>((uint64_t)&v8, &v7, &v6, a4);
  if (!*a4)
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>@<X0>(uint64_t result@<X0>, char *a2@<X1>, unint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;

  v5 = 0;
  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)result;
  do
  {
    ++v5;
    v8 = v7 > 9;
    v7 /= 0xAuLL;
  }
  while (v8);
  v9 = 0;
  v10 = *a3;
  v11 = *a3;
  do
  {
    ++v9;
    v8 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v8);
  if ((v9 & 0x80000000) == 0)
  {
    v12 = v9 + 1;
    v13 = __OFADD__(v9, 1);
    if ((v5 & 0x80000000) == 0 && !v13)
    {
      result = (v5 + v12);
      if (!__OFADD__(v5, v12))
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(result, 1, v6, *a2, v10, a4);
    }
  }
  *a4 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, unint64_t a3@<X2>, char a4@<W3>, unint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _WORD *v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  _WORD *v26;
  _QWORD v27[5];

  v9 = result;
  v27[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v27[0];
        if (v27[0])
        {
          v12 = 0;
          v13 = v27[0] + 20;
          *(_DWORD *)v27[0] = 2;
          *(_DWORD *)(v11 + 4) = v9;
          *(_QWORD *)(v11 + 8) = v11 + 20;
          *(_DWORD *)(v11 + 16) = 4;
          v14 = a3;
          do
          {
            *((_BYTE *)&v27[3] + v12--) = (v14 % 0xA) | 0x30;
            v15 = v14 > 9;
            v14 /= 0xAuLL;
          }
          while (v15);
          if (v12 + 26 <= 25)
            result = (uint64_t)memcpy((void *)(v11 + 20), (char *)&v27[3] + v12 + 1, -v12);
          v16 = 0;
          do
          {
            ++v16;
            v15 = a3 > 9;
            a3 /= 0xAuLL;
          }
          while (v15);
          v17 = 0;
          v18 = (_BYTE *)(v13 + v16);
          *v18 = a4;
          do
          {
            *((_BYTE *)&v27[3] + v17--) = (a5 % 0xA) | 0x30;
            v15 = a5 > 9;
            a5 /= 0xAuLL;
          }
          while (v15);
          if (v17 + 26 <= 25)
            result = (uint64_t)memcpy(v18 + 1, (char *)&v27[3] + v17 + 1, -v17);
        }
        goto LABEL_34;
      }
LABEL_17:
      v11 = 0;
      goto LABEL_34;
    }
LABEL_18:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_34;
  }
  if (!(_DWORD)result)
    goto LABEL_18;
  if (result > 0x7FFFFFEF)
    goto LABEL_17;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v27[0];
  if (v27[0])
  {
    v19 = 0;
    v20 = v27[0] + 20;
    *(_DWORD *)v27[0] = 2;
    *(_DWORD *)(v11 + 4) = v9;
    *(_QWORD *)(v11 + 8) = v11 + 20;
    *(_DWORD *)(v11 + 16) = 0;
    v21 = a3;
    do
    {
      *((_BYTE *)&v27[3] + v19--) = (v21 % 0xA) | 0x30;
      v15 = v21 > 9;
      v21 /= 0xAuLL;
    }
    while (v15);
    if (v19 + 26 <= 25)
    {
      v22 = (_WORD *)(v11 + 20);
      do
      {
        *v22++ = *((unsigned __int8 *)&v27[3] + v19 + 1);
        v23 = __CFADD__(v19++, 1);
      }
      while (!v23);
    }
    v24 = 0;
    do
    {
      ++v24;
      v15 = a3 > 9;
      a3 /= 0xAuLL;
    }
    while (v15);
    v25 = 0;
    *(_WORD *)(v20 + 2 * v24) = a4;
    do
    {
      *((_BYTE *)&v27[3] + v25--) = (a5 % 0xA) | 0x30;
      v15 = a5 > 9;
      a5 /= 0xAuLL;
    }
    while (v15);
    if (v25 + 26 <= 25)
    {
      v26 = (_WORD *)(v11 + 2 * v24 + 22);
      do
      {
        *v26++ = *((unsigned __int8 *)&v27[3] + v25 + 1);
        v23 = __CFADD__(v25++, 1);
      }
      while (!v23);
    }
  }
LABEL_34:
  *a6 = v11;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1,void,BOOL>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34C3DC8;
  WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1::~$_1((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1,void,BOOL>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C3DC8;
  WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WebCore::ProcessQualified::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1::~$_1((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_1,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 8))
      {
        v4 = *(_QWORD *)(a1 + 8);
        v5 = qword_1ECE718C0;
        if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_ERROR))
        {
          v10 = *(_QWORD *)(a1 + 152);
          v11 = 134217984;
          v12 = v10;
          _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "WebSharedWorkerServer::requestSharedWorker: Failed to connect to existing shared worker %llu, will create a new one instead.", (uint8_t *)&v11, 0xCu);
        }
        v6 = WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>((uint64_t *)(v4 + 40), a1 + 24);
        v7 = *(_QWORD *)(v4 + 40);
        if (v7)
          v8 = v7 + 120 * *(unsigned int *)(v7 - 4);
        else
          v8 = 0;
        if (v8 == v6 || *(_QWORD *)(*(_QWORD *)(v6 + 112) + 8) != *(_QWORD *)(a1 + 152))
          goto LABEL_15;
        if (v7)
        {
          v9 = v7 + 120 * *(unsigned int *)(v7 - 4);
          if (v9 != v6)
          {
LABEL_13:
            if (v9 != v6)
              WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::remove((uint64_t *)(v4 + 40), (WTF::StringImpl ***)v6);
          }
        }
        else if (v6)
        {
          v9 = 0;
          goto LABEL_13;
        }
LABEL_15:
        WebKit::WebSharedWorkerServer::requestSharedWorker(v4, a1 + 24, *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), a1 + 160, (__int16 *)(a1 + 192));
      }
    }
  }
}

uint64_t WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v10;
  __int16 v11;
  char v12;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v10 = -1640531527;
  v11 = 0;
  v12 = 0;
  WTF::add<WebCore::ClientOrigin,WTF::URL,WTF::String>(&v10, a2, (uint64_t *)(a2 + 64), (uint64_t *)(a2 + 104));
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v10) & v5;
  v7 = v2 + 120 * v6;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v7) & 1) != 0)
  {
LABEL_7:
    if (*a1)
      return *a1 + 120 * *(unsigned int *)(*a1 - 4);
    return 0;
  }
  v8 = 1;
  while (*(_QWORD *)(v7 + 64) == -1 || (WebCore::operator==(v7, a2) & 1) == 0)
  {
    v6 = (v6 + v8) & v5;
    v7 = v2 + 120 * v6;
    ++v8;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v7))
      goto LABEL_7;
  }
  return v7;
}

WTF::StringImpl **WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::remove(uint64_t *a1, WTF::StringImpl ***a2)
{
  WTF::StringImpl **result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::SharedWorkerKey>,WebCore::SharedWorkerKey>((uint64_t)a2, (WTF::StringImpl *)a2);
  result = std::unique_ptr<WebKit::WebSharedWorker>::reset[abi:sn180100](a2 + 14, 0);
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return (WTF::StringImpl **)WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::rehash(a1, v9 >> 1, 0);
  }
  return result;
}

WTF::StringImpl *WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::SharedWorkerKey>,WebCore::SharedWorkerKey>(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = *(WTF::StringImpl **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E34C3A10[v5])(&v7, a1 + 32);
  *(_DWORD *)(a1 + 56) = -1;
  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E34C3A10[v6])(&v8, a1);
  *(_DWORD *)(a1 + 24) = -1;
  *(_QWORD *)(a1 + 64) = -1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_2,void,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E34C3DF0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_2,void,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34C3DF0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::requestSharedWorker(WebCore::SharedWorkerKey &&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,std::pair> &&,WebCore::WorkerOptions &&)::$_2,void,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t (***v12)();
  uint64_t (**v13)();
  _QWORD *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  uint64_t (*v21)();
  unsigned int *v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  const void *v29;
  WTF::StringImpl *v30;
  WebKit::WebSharedWorkerServerToContextConnection *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _BYTE v37[12];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  _BOOL4 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return result;
  v5 = *((_QWORD *)result + 2);
  if (!v5)
    return result;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return result;
  v9 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(v6 + 8);
    v11 = *(_BYTE *)(a2 + 172) == 0;
    *(_DWORD *)v37 = 134218496;
    *(_QWORD *)&v37[4] = v10;
    v38 = 2048;
    v39 = v6;
    v40 = 1024;
    v41 = v11;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::didFinishFetchingSharedWorkerScript sharedWorkerIdentifier=%llu, sharedWorker=%p, success=%d", v37, 0x1Cu);
  }
  v12 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
  v13 = off_1E34C3E18;
  *v12 = off_1E34C3E18;
  v12[1] = (uint64_t (**)())v4;
  v12[2] = (uint64_t (**)())a2;
  v14 = *(_QWORD **)(v6 + 160);
  if (v14)
  {
    do
    {
      ((void (*)(uint64_t (***)(), _QWORD, _QWORD, _QWORD *))(*v12)[2])(v12, *v14, v14[1], v14 + 3);
      v14 = (_QWORD *)v14[8];
    }
    while (v14);
    v13 = *v12;
  }
  ((void (*)(uint64_t (***)()))v13[1])(v12);
  if (!*(_BYTE *)(a2 + 172))
  {
    std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerData,false>>(v6 + 368, a3);
    v17 = *(_OWORD *)(a3 + 80);
    v18 = *(_OWORD *)(a3 + 96);
    v19 = *(_OWORD *)(a3 + 112);
    *(_WORD *)(v6 + 496) = *(_WORD *)(a3 + 128);
    *(_OWORD *)(v6 + 464) = v18;
    *(_OWORD *)(v6 + 480) = v19;
    *(_OWORD *)(v6 + 448) = v17;
    WTF::String::operator=((WTF::StringImpl **)(v6 + 504), (WTF::StringImpl *)(a3 + 136));
    v21 = *(uint64_t (**)())a2;
    *(_QWORD *)a2 = 0;
    v22 = *(unsigned int **)(v6 + 176);
    *(_QWORD *)(v6 + 176) = v21;
    if (v22)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v22, v20);
    WTF::URL::operator=(v6 + 184, (WTF::StringImpl *)(a2 + 8));
    v23 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    v24 = *(const void **)(v6 + 224);
    *(_QWORD *)(v6 + 224) = v23;
    if (v24)
      CFRelease(v24);
    v25 = *(unsigned int *)(v6 + 244);
    if ((_DWORD)v25)
      WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)(v6 + 232), (WTF::StringImpl *)(*(_QWORD *)(v6 + 232) + 16 * v25));
    WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(v6 + 232, (_DWORD *)(a2 + 56));
    v26 = *(_DWORD *)(a2 + 72);
    *(_BYTE *)(v6 + 252) = *(_BYTE *)(a2 + 76);
    *(_DWORD *)(v6 + 248) = v26;
    *(_WORD *)(v6 + 256) = *(_WORD *)(a2 + 80);
    WTF::String::operator=((WTF::StringImpl **)(v6 + 264), (WTF::StringImpl *)(a2 + 88));
    WTF::String::operator=((WTF::StringImpl **)(v6 + 272), (WTF::StringImpl *)(a2 + 96));
    WTF::String::operator=((WTF::StringImpl **)(v6 + 280), (WTF::StringImpl *)(a2 + 104));
    WTF::String::operator=((WTF::StringImpl **)(v6 + 288), (WTF::StringImpl *)(a2 + 112));
    WTF::URL::operator=(v6 + 296, (WTF::StringImpl *)(a2 + 120));
    WTF::String::operator=((WTF::StringImpl **)(v6 + 336), (WTF::StringImpl *)(a2 + 160));
    v27 = *(_DWORD *)(a2 + 168);
    *(_WORD *)(v6 + 348) = *(_WORD *)(a2 + 172);
    *(_DWORD *)(v6 + 344) = v27;
    v28 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 176) = 0;
    v29 = *(const void **)(v6 + 352);
    *(_QWORD *)(v6 + 352) = v28;
    if (v29)
      CFRelease(v29);
    *(_BYTE *)(v6 + 360) = *(_BYTE *)(a2 + 184);
    WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)v37, (const WebCore::SecurityOriginData *)(v6 + 24));
    v31 = (WebKit::WebSharedWorkerServerToContextConnection *)WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v4 + 24), (WTF::ASCIICaseInsensitiveHash **)v37);
    v32 = *(WTF::StringImpl **)v37;
    *(_QWORD *)v37 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::destroy(v32, v30);
        if (v31)
          return WebKit::WebSharedWorker::launch((WebKit::WebSharedWorker *)v6, v31);
        goto LABEL_30;
      }
      *(_DWORD *)v32 -= 2;
    }
    if (v31)
      return WebKit::WebSharedWorker::launch((WebKit::WebSharedWorker *)v6, v31);
LABEL_30:
    WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)v37, (const WebCore::SecurityOriginData *)(v6 + 24));
    v33 = *(_QWORD *)(v6 + 152);
    if (v33)
    {
      if (*(_DWORD *)(v33 - 12))
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v6 + 160) + 8) & 0xFFFFFFFFFFFFFF00;
        v33 = *(_QWORD *)(*(_QWORD *)(v6 + 160) + 8);
        v35 = 1;
        goto LABEL_36;
      }
      v35 = 0;
      v33 = 0;
    }
    else
    {
      v35 = 0;
    }
    v34 = 0;
LABEL_36:
    WebKit::WebSharedWorkerServer::createContextConnection(v4, (WTF::ASCIICaseInsensitiveHash **)v37, v34 | v33, v35);
    result = *(IPC::Encoder **)v37;
    *(_QWORD *)v37 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (IPC::Encoder *)WTF::StringImpl::destroy(result, v36);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  result = (IPC::Encoder *)WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>((uint64_t *)(v4 + 40), v6 + 24);
  v15 = *(_QWORD *)(v4 + 40);
  if (v15)
  {
    v16 = (IPC::Encoder *)(v15 + 120 * *(unsigned int *)(v15 - 4));
    if (v16 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v16 = 0;
  }
  if (v16 != result)
    return (IPC::Encoder *)WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::remove((uint64_t *)(v4 + 40), (WTF::StringImpl ***)result);
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::didFinishFetchingSharedWorkerScript(WebKit::WebSharedWorker &,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)::$_0,void,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,std::__1> const&>::call(uint64_t a1, unint64_t a2, uint64_t a3)
{
  IPC::Encoder *result;

  result = (IPC::Encoder *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), a3);
  if (result)
    return WebKit::WebSharedWorkerServerConnection::notifyWorkerObjectOfLoadCompletion(result, a2, a3, (WebCore::ResourceError *)(*(_QWORD *)(a1 + 16) + 112));
  return result;
}

uint64_t WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  WTF **v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  char v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v4;
  v6 = (WTF **)(v2 + 16 * v5);
  v9 = WTF::equal(*v6, 0, v7);
  result = 0;
  if ((v9 & 1) != 0)
    return result;
  v11 = 1;
  while (*v6 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v6, *a2, v8) & 1) == 0)
  {
    v5 = ((_DWORD)v5 + v11) & v4;
    v6 = (WTF **)(v2 + 16 * v5);
    ++v11;
    if ((WTF::equal(*v6, 0, v8) & 1) != 0)
      return 0;
  }
  v12 = *(_QWORD *)(v2 + 16 * v5 + 8);
  if (!v12)
    return 0;
  v13 = *(_QWORD *)(v12 + 8);
  if (v13)
    return v13 - 8;
  else
    return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::WebSharedWorkerServer::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0>(WebKit::WebSharedWorkerServer::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C3E40;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::WebSharedWorkerServer::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0>(WebKit::WebSharedWorkerServer::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C3E40;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::EstablishRemoteWorkerContextConnectionToNetworkProcess,WebKit::WebSharedWorkerServer::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0>(WebKit::WebSharedWorkerServer::createContextConnection(WebCore::RegistrableDomain const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;
  WTF::ASCIICaseInsensitiveHash **v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  WTF **v13;
  const WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t v27[8];
  WTF::StringImpl *v28;

  v2 = result;
  if (a2 && *a2)
    result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return result;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::createContextConnection should now have created a connection", v27, 2u);
  }
  v6 = (WTF::ASCIICaseInsensitiveHash **)(v2 + 24);
  result = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v4 + 4, v6);
  v7 = (const WTF::StringImpl *)result;
  v8 = v4[4];
  if (v8)
  {
    v9 = v8 + 8 * *(unsigned int *)(v8 - 4);
    if (v9 == result)
      goto LABEL_12;
  }
  else
  {
    if (!result)
      goto LABEL_12;
    v9 = 0;
  }
  if (v9 != result)
    result = (uint64_t)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(v4 + 4, (WTF::StringImpl **)result);
LABEL_12:
  v10 = v4[3];
  if (!v10
    || (v11 = *(_DWORD *)(v10 - 8),
        v12 = WTF::ASCIICaseInsensitiveHash::hash(*v6, v7) & v11,
        v13 = (WTF **)(v10 + 16 * v12),
        result = WTF::equal(*v13, 0, v14),
        (result & 1) != 0))
  {
LABEL_18:
    v17 = v4[5];
    if (v17)
    {
      v19 = *(unsigned int *)(v17 - 4);
      v20 = v17 + 120 * v19;
      if (*(_DWORD *)(v17 - 12))
      {
        if ((_DWORD)v19)
        {
          v26 = 120 * v19;
          while (1)
          {
            result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v17);
            if ((result & 1) == 0 && *(_QWORD *)(v17 + 64) != -1)
              break;
            v17 += 120;
            v26 -= 120;
            if (!v26)
            {
              v17 = v20;
              break;
            }
          }
          v18 = v17;
          v17 = v4[5];
        }
        else
        {
          v18 = v4[5];
        }
LABEL_21:
        if (v17)
          v21 = v17 + 120 * *(unsigned int *)(v17 - 4);
        else
          v21 = 0;
        if (v21 == v18)
          return result;
        while (1)
        {
          WebCore::RegistrableDomain::RegistrableDomain(&v28, (const WebCore::SecurityOriginData *)(*(_QWORD *)(v18 + 112) + 24));
          v24 = WTF::equal(*v6, v28, v22);
          result = (uint64_t)v28;
          v28 = 0;
          if (!result)
            goto LABEL_27;
          if (*(_DWORD *)result != 2)
            break;
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
          if ((v24 & 1) != 0)
            return WebKit::WebSharedWorkerServer::createContextConnection((uint64_t)v4, v6, 0, 0);
LABEL_30:
          v25 = v18 + 120;
          v18 = v20;
          if (v25 != v20)
          {
            v18 = v25;
            while (1)
            {
              result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v18);
              if ((result & 1) == 0 && *(_QWORD *)(v18 + 64) != -1)
                break;
              v18 += 120;
              if (v18 == v20)
              {
                v18 = v20;
                break;
              }
            }
          }
          if (v18 == v21)
            return result;
        }
        *(_DWORD *)result -= 2;
LABEL_27:
        if ((v24 & 1) != 0)
          return WebKit::WebSharedWorkerServer::createContextConnection((uint64_t)v4, v6, 0, 0);
        goto LABEL_30;
      }
      v18 = v17 + 120 * v19;
    }
    else
    {
      v18 = 0;
      LODWORD(v19) = 0;
    }
    v20 = v17 + 120 * v19;
    goto LABEL_21;
  }
  v16 = 1;
  while (1)
  {
    if (*v13 != (WTF *)-1)
    {
      result = WTF::equalIgnoringASCIICase(*v13, *v6, v15);
      if ((result & 1) != 0)
        return result;
    }
    v12 = (v12 + v16) & v11;
    v13 = (WTF **)(v10 + 16 * v12);
    result = WTF::equal(*v13, 0, v15);
    ++v16;
    if ((_DWORD)result)
      goto LABEL_18;
  }
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  WTF::ASCIICaseInsensitiveHash **v11;
  uint64_t v12;
  unsigned int *v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  WTF::ASCIICaseInsensitiveHash *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    while (1)
    {
      v11 = (WTF::ASCIICaseInsensitiveHash **)(v4 + 16 * v10);
      if (*v11 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v11, 0, v9))
        {
          v12 = v4 + 16 * v10;
          v13 = *(unsigned int **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            do
            {
              v15 = __ldaxr(v13);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v13));
            if (!v16)
            {
              atomic_store(1u, v13);
              WTF::fastFree((WTF *)v13, v8);
            }
          }
          v14 = *v11;
          *v11 = 0;
          if (!v14)
            goto LABEL_37;
          if (*(_DWORD *)v14 == 2)
          {
LABEL_36:
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v8);
            goto LABEL_37;
          }
          *(_DWORD *)v14 -= 2;
        }
        else
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::ASCIICaseInsensitiveHash::hash(*v11, (const WTF::StringImpl *)v8);
          v20 = 0;
          do
          {
            v21 = v19 & v18;
            v22 = WTF::equal(*(WTF **)(v17 + 16 * v21), 0, v9);
            v19 = ++v20 + v21;
          }
          while (!v22);
          v23 = v17 + 16 * v21;
          v24 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            do
            {
              v26 = __ldaxr(v24);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v24));
            if (!v27)
            {
              atomic_store(1u, v24);
              WTF::fastFree((WTF *)v24, v8);
            }
          }
          v25 = *(WTF::StringImpl **)v23;
          *(_QWORD *)v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v25 -= 2;
          }
          v28 = *v11;
          *v11 = 0;
          *(_QWORD *)v23 = v28;
          v29 = v4 + 16 * v10;
          v30 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v30;
          v31 = *(unsigned int **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, v8);
            }
          }
          v14 = *v11;
          *v11 = 0;
          if (!v14)
            goto LABEL_37;
          if (*(_DWORD *)v14 == 2)
            goto LABEL_36;
          *(_DWORD *)v14 -= 2;
        }
      }
LABEL_37:
      if (++v10 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::begin(uint64_t a1)
{
  if (!a1)
    return 0;
  if (!*(_DWORD *)(a1 - 12))
    return a1 + 120 * *(unsigned int *)(a1 - 4);
  return WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::makeIterator(a1, a1);
}

uint64_t WTF::HashTable<WebCore::SharedWorkerKey,WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>>>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SharedWorkerKey>>::makeIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  v2 = a2;
  if (a1)
    v3 = *(_DWORD *)(a1 - 4);
  else
    v3 = 0;
  v4 = a1 + 120 * v3;
  if (v4 != a2)
  {
    while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v2) & 1) != 0
         || *(_QWORD *)(v2 + 64) == -1)
    {
      v2 += 120;
      if (v2 == v4)
        return v4;
    }
  }
  return v2;
}

uint64_t WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SharedWorkerKey,std::unique_ptr<WebKit::WebSharedWorker>,WTF::DefaultHash<WebCore::SharedWorkerKey>,WTF::HashTraits<WebCore::SharedWorkerKey>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorker>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SharedWorkerKey>>,WebCore::SharedWorkerKey>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  __int16 v9;
  char v10;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v8 = -1640531527;
    v9 = 0;
    v10 = 0;
    WTF::add<WebCore::ClientOrigin,WTF::URL,WTF::String>(&v8, a2, (uint64_t *)(a2 + 64), (uint64_t *)(a2 + 104));
    v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v8) & v4;
    v6 = v3 + 120 * v5;
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v6) & 1) != 0)
    {
      return 0;
    }
    else
    {
      v7 = 1;
      while (*(_QWORD *)(v6 + 64) == -1 || (WebCore::operator==(v6, a2) & 1) == 0)
      {
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = v3 + 120 * v5;
        ++v7;
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::SharedWorkerKey>,false>::isEmptyValue<WebCore::SharedWorkerKey>(v6) & 1) != 0)
          return 0;
      }
      return *(_QWORD *)(v3 + 120 * v5 + 112);
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v16 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(*a1, v14);
          v17 = v14[1];
          v14[1] = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          v15 = v14[1];
          v14[1] = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::reinsert(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = (*a2 + ~(*a2 << 32)) ^ ((*a2 + ~(*a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(a1 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  v11 = (_QWORD *)(a1 + 16 * v9);
  v12 = v11[1];
  v11[1] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *v11 = *a2;
  v13 = a2[1];
  a2[1] = 0;
  v11[1] = v13;
  return v11;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;

  if (*a1)
  {
    v2 = (_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v2 = 0;
  }
  if (v2 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return a1;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (_QWORD *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + (v3 << 7)));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v11 = v2;
    v12 = v3;
    v5 = result;
    do
    {
      v6 = (WTF::StringImpl *)*((_QWORD *)v5 + 13);
      *((_QWORD *)v5 + 13) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 8);
      *((_QWORD *)v5 + 8) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v7 = *((unsigned int *)v5 + 14);
      if ((_DWORD)v7 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(char *, char *))off_1E34C3A10[v7])(&v9, (char *)v5 + 32);
      *((_DWORD *)v5 + 14) = -1;
      v8 = *((unsigned int *)v5 + 6);
      if ((_DWORD)v8 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl *))off_1E34C3A10[v8])(&v10, v5);
      *((_DWORD *)v5 + 6) = -1;
      v5 = (WTF::StringImpl *)((char *)v5 + 128);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::removeConnection(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier> const&>::call(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  _BYTE v16[24];
  int v17;
  _BYTE v18[24];
  int v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a3 == **(_QWORD **)(result + 8))
  {
    v5 = *(unsigned int **)(result + 16);
    v6 = **(_QWORD **)(result + 24);
    v16[0] = 0;
    v17 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v16, v6 + 24);
    v18[0] = 0;
    v19 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v18, v6 + 56);
    v7 = *(WTF::StringImpl **)(v6 + 88);
    if (v7)
      *(_DWORD *)v7 += 2;
    v20 = v7;
    v8 = *(_OWORD *)(v6 + 112);
    v21 = *(_OWORD *)(v6 + 96);
    v22 = v8;
    v9 = *(WTF::StringImpl **)(v6 + 128);
    if (v9)
      *(_DWORD *)v9 += 2;
    v23 = v9;
    v24 = a2;
    v25 = a3;
    v10 = v5[3];
    if ((_DWORD)v10 == v5[2])
    {
      v11 = (_BYTE *)WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v10 + 1, (unint64_t)v16);
      v12 = *(_QWORD *)v5 + ((unint64_t)v5[3] << 7);
    }
    else
    {
      v12 = *(_QWORD *)v5 + (v10 << 7);
      v11 = v16;
    }
    std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::pair[abi:sn180100](v12, (uint64_t)v11);
    ++v5[3];
    v14 = v23;
    v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = (uint64_t)v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v13);
      else
        *(_DWORD *)result -= 2;
    }
    if (v19 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))off_1E34C3A10[v19])(&v15, v18);
    v19 = -1;
    if (v17 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34C3A10[v17])(&v15, v16);
  }
  return result;
}

uint64_t std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, a2 + 32);
  WTF::URL::URL(a1 + 64, (uint64_t *)(a2 + 64));
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

unint64_t WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)a1[3] << 7) <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 25)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(a2 << 7));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = (uint64_t)result;
        v8 = v5 << 7;
        v9 = (uint64_t)v4;
        do
        {
          std::pair<WebCore::SharedWorkerKey,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::pair[abi:sn180100](v7, v9);
          v10 = *(WTF::StringImpl **)(v9 + 104);
          *(_QWORD *)(v9 + 104) = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v6);
            else
              *(_DWORD *)v10 -= 2;
          }
          result = *(unsigned int **)(v9 + 64);
          *(_QWORD *)(v9 + 64) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v11 = *(unsigned int *)(v9 + 56);
          if ((_DWORD)v11 != -1)
            result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E34C3A10[v11])(&v13, v9 + 32);
          *(_DWORD *)(v9 + 56) = -1;
          v12 = *(unsigned int *)(v9 + 24);
          if ((_DWORD)v12 != -1)
            result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E34C3A10[v12])(&v14, v9);
          *(_DWORD *)(v9 + 24) = -1;
          v7 += 128;
          v9 += 128;
          v8 -= 128;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServer::postErrorToWorkerObject(WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,int,int,WTF::String const&,BOOL)::$_0,void,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier> const&>::call(uint64_t a1, unint64_t a2, uint64_t a3)
{
  IPC::Encoder *result;
  IPC::Encoder *v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  int v11;
  char v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  _BYTE buf[12];
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  result = (IPC::Encoder *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), a3);
  if (result)
  {
    v7 = result;
    v8 = *(uint64_t **)(a1 + 16);
    v9 = **(_DWORD **)(a1 + 24);
    v10 = *(uint64_t **)(a1 + 40);
    v11 = **(_DWORD **)(a1 + 32);
    v12 = **(_BYTE **)(a1 + 48);
    v13 = qword_1ECE718C0;
    if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_ERROR))
    {
      v19 = *((_QWORD *)v7 + 6);
      WTF::makeString<unsigned long long,char,unsigned long long>(a3, 45, a2, &v24);
      WTF::String::utf8();
      if (v25)
        v20 = (char *)v25 + 16;
      else
        v20 = 0;
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v7;
      v27 = 2048;
      v28 = v19;
      v29 = 2082;
      v30 = v20;
      _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerConnection::postErrorToWorkerObject: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
      v22 = v25;
      v25 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          WTF::fastFree(v22, v21);
        else
          --*(_DWORD *)v22;
      }
      v23 = v24;
      v24 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v21);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
    v14 = (*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)v7 + 56))(v7);
    v15 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v15 = 2784;
    *(_QWORD *)(v15 + 8) = v14;
    *(_QWORD *)(v15 + 528) = v15 + 16;
    *(_QWORD *)(v15 + 536) = v15 + 16;
    *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v15 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
    v25 = (WTF *)v15;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v15, 8uLL, 8) = a2;
    *(_QWORD *)buf = a3;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v15, (uint64_t *)buf);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, v8);
    *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v15, 4uLL, 4) = v9;
    *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v15, 4uLL, 4) = v11;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, v10);
    *IPC::Encoder::grow((IPC::Encoder *)v15, 1uLL, 1) = v12;
    (*(void (**)(IPC::Encoder *, WTF **, _QWORD))(*(_QWORD *)v7 + 32))(v7, &v25, 0);
    result = v25;
    v25 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v16);
      return (IPC::Encoder *)WTF::fastFree(v17, v18);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSharedWorkerObjectConnection::FetchScriptInClient,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>>(WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C3EB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSharedWorkerObjectConnection::FetchScriptInClient,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>>(WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C3EB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSharedWorkerObjectConnection::FetchScriptInClient,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>>(WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  char v26;
  __int16 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  char v37;
  char v38;
  _OWORD v39[4];
  uint64_t v40;
  int v41;
  char v42;
  __int16 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int16 v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int16 v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int16 v70;
  char v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int16 v75;
  uint64_t v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<WebCore::WorkerFetchResult>(a2, (uint64_t)&v20);
    if (v38)
    {
      IPC::Decoder::decode<WebCore::WorkerInitializationData>(a2, (uint64_t)&v66);
      v5 = v77;
      if (v77)
      {
        if (!v38)
          __break(1u);
        v6 = v20;
        v20 = 0u;
        v39[0] = v6;
        v39[1] = v21;
        LODWORD(v21) = v21 & 0xFFFFFFFE;
        v7 = v23;
        v23 = 0u;
        v39[2] = v22;
        v39[3] = v7;
        *(_QWORD *)&v6 = v24;
        v24 = 0;
        v40 = v6;
        v41 = v25;
        v42 = v26;
        v43 = v27;
        v8 = v28;
        v28 = 0u;
        v44 = v8;
        v9 = v29;
        v29 = 0u;
        v45 = v9;
        v10 = v30;
        v30 = 0;
        v46 = v10;
        v47 = v31;
        v48 = v32;
        LODWORD(v31) = v31 & 0xFFFFFFFE;
        v49 = v33;
        v51 = v35;
        v50 = v34;
        v11 = v36;
        v33 = 0;
        v36 = 0;
        v52 = v11;
        v53 = v37;
        LOBYTE(v54) = 0;
        v59 = 0;
        if (v71)
        {
          v54 = v66;
          v12 = v67;
          v67 = 0;
          v55 = v12;
          v56 = v68;
          v57 = v69;
          LODWORD(v68) = v68 & 0xFFFFFFFE;
          v58 = v70;
          v59 = 1;
        }
        v60 = v72;
        v61 = v73;
        v62 = v74;
        v63 = v75;
        v13 = v76;
        v76 = 0;
        v5 = 1;
        v64 = v13;
      }
      else
      {
        LOBYTE(v39[0]) = 0;
      }
      v65 = v5;
      std::__optional_destruct_base<WebCore::WorkerInitializationData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66, v4);
      if (v38)
        WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v20, v14);
    }
    else
    {
      LOBYTE(v39[0]) = 0;
      v65 = 0;
    }
    if (v65
      || (v17 = (WTF::StringImpl *)*a2, v18 = a2[1], *a2 = 0, a2[1] = 0, (v19 = a2[3]) != 0)
      && v18
      && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v19 + 16))(v19, v17), v65))
    {
      v15 = *v2;
      *v2 = 0;
      (*(void (**)(uint64_t, _OWORD *, __int128 *))(*(_QWORD *)v15 + 16))(v15, v39, &v54);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      std::__optional_destruct_base<std::tuple<WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39, v16);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39, v17);
      _ZZN3IPC10Connection11cancelReplyIN8Messages31WebSharedWorkerObjectConnection19FetchScriptInClientEN3WTF17CompletionHandlerIFvON7WebCore17WorkerFetchResultEONS7_24WorkerInitializationDataEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_(v2);
    }
  }
  else
  {
    _ZZN3IPC10Connection11cancelReplyIN8Messages31WebSharedWorkerObjectConnection19FetchScriptInClientEN3WTF17CompletionHandlerIFvON7WebCore17WorkerFetchResultEONS7_24WorkerInitializationDataEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_((uint64_t *)(a1 + 8));
  }
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::WorkerFetchResult,WebCore::WorkerInitializationData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 336))
  {
    v3 = *(WTF::StringImpl **)(a1 + 328);
    *(_QWORD *)(a1 + 328) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](a1 + 192, a2);
    WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)a1, v4);
  }
  return a1;
}

void _ZZN3IPC10Connection11cancelReplyIN8Messages31WebSharedWorkerObjectConnection19FetchScriptInClientEN3WTF17CompletionHandlerIFvON7WebCore17WorkerFetchResultEONS7_24WorkerInitializationDataEEEEEEvOT0_ENKUlTpTnmNSt3__116integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_(uint64_t *a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _QWORD v7[5];
  __int128 v8;
  __int128 v9;
  __int16 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[5];
  _QWORD v14[3];
  char v15;
  _BYTE v16[16];
  WTF::StringImpl *v17;
  char v18;
  char v19;
  char v20;
  __int16 v21;
  WTF::StringImpl *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v7);
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v13);
  v14[2] = 0;
  v14[0] = 0;
  *(_QWORD *)((char *)v14 + 6) = 0;
  v15 = 1;
  v16[0] = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v2 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v2 + 16))(v2, &v6, v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = v22;
  v22 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (v18)
  {
    v5 = v17;
    v17 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  WebCore::WorkerFetchResult::~WorkerFetchResult((WebCore::WorkerFetchResult *)&v6, v3);
}

void API::TargetedElementRequest::~TargetedElementRequest(API::TargetedElementRequest *this)
{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 8);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E34C3FA8[v2])(&v3, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
}

{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 8);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E34C3FA8[v2])(&v3, (char *)this + 16);
  *((_DWORD *)this + 8) = -1;
  MEMORY[0x19AEB936C](this, 0x10E3C40C92AF5B7);
}

void sub_1971679A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  uint64_t v14;
  uint64_t v15;

  if (a14 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E34C3FA8[a14])(v15 - 33, v14);
  _Unwind_Resume(exception_object);
}

void sub_197167D74(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a31, a2);
  _Unwind_Resume(a1);
}

void sub_197168534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_197168C08(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t toUserContentRuleListStoreError(uint64_t result)
{
  void *v1;
  uint64_t v2;

  if (result)
  {
    v1 = (void *)result;
    v2 = objc_msgSend((id)result, "code");
    if ((unint64_t)(v2 - 6) >= 4)
    {
      result = 55;
      __break(0xC471u);
    }
    else
    {
      return objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("WKErrorDomain"), qword_1978CFA08[v2 - 6], objc_msgSend(v1, "userInfo"));
    }
  }
  return result;
}

void sub_197168D8C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t API::ObjectImpl<(API::Object::Type)23>::type()
{
  return 23;
}

WebKit::WebSharedWorkerServerToContextConnection *WebKit::WebSharedWorkerServerToContextConnection::WebSharedWorkerServerToContextConnection(WebKit::WebSharedWorkerServerToContextConnection *this, WebKit::NetworkConnectionToWebProcess *a2, const WebCore::RegistrableDomain *a3, WebKit::WebSharedWorkerServer *a4)
{
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  int v14;
  WebKit::WebSharedWorkerServerToContextConnection *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E34C3FF8;
  *((_QWORD *)this + 1) = &unk_1E34C4050;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a4, (uint64_t)a4);
  v7 = *(unsigned int **)a4;
  if (*(_QWORD *)a4)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *((_QWORD *)this + 4) = v7;
  v9 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v9 += 2;
  *((_QWORD *)this + 5) = v9;
  *((_QWORD *)this + 6) = 0;
  WebCore::TimerBase::TimerBase((WebKit::WebSharedWorkerServerToContextConnection *)((char *)this + 56));
  *((_QWORD *)this + 7) = off_1E34B3740;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34C4108;
  v10[1] = WebKit::WebSharedWorkerServerToContextConnection::idleTerminationTimerFired;
  v10[2] = 0;
  v10[3] = this;
  *((_QWORD *)this + 13) = v10;
  *((_BYTE *)this + 112) = 0;
  v11 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 256);
    v14 = 134218240;
    v15 = this;
    v16 = 2048;
    v17 = v12;
    _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::WebSharedWorkerServerToContextConnection:", (uint8_t *)&v14, 0x16u);
  }
  WebKit::WebSharedWorkerServer::addContextConnection(a4, this);
  return this;
}

WebKit::WebSharedWorkerServerToContextConnection *WebKit::WebSharedWorkerServerToContextConnection::idleTerminationTimerFired(WebKit::WebSharedWorkerServerToContextConnection *this)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  WebKit::WebSharedWorkerServerToContextConnection *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 6);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    __break(0xC471u);
    JUMPOUT(0x197169180);
  }
  v3 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 256);
    v6 = 134218240;
    v7 = this;
    v8 = 2048;
    v9 = v4;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::connectionIsNoLongerNeeded:", (uint8_t *)&v6, 0x16u);
  }
  return WebKit::NetworkConnectionToWebProcess::sharedWorkerServerToContextConnectionIsNoLongerNeeded(*((WebKit::NetworkConnectionToWebProcess **)this + 3));
}

void WebKit::WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection(WebKit::WebSharedWorkerServerToContextConnection *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::WebSharedWorkerServer *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  WebKit::WebSharedWorkerServerToContextConnection *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 256);
    v17 = 134218240;
    v18 = this;
    v19 = 2048;
    v20 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection:", (uint8_t *)&v17, 0x16u);
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if ((WebKit::WebSharedWorkerServerToContextConnection *)WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WeakRef<WebKit::WebSharedWorkerServerToContextConnection,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v5 + 24), (WTF::ASCIICaseInsensitiveHash **)this + 5) == this)
      {
        v6 = *((_QWORD *)this + 4);
        if (v6)
          v7 = *(WebKit::WebSharedWorkerServer **)(v6 + 8);
        else
          v7 = 0;
        WebKit::WebSharedWorkerServer::removeContextConnection(v7, this);
      }
    }
  }
  *((_QWORD *)this + 7) = off_1E34B3740;
  v8 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebCore::TimerBase::~TimerBase((WebKit::WebSharedWorkerServerToContextConnection *)((char *)this + 56));
  v10 = *((_QWORD *)this + 6);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v11)
    {
      v12 = (_QWORD *)(v10 + 8);
      do
      {
        if (*(v12 - 1) != -1 && *v12)
          WTF::fastFree((WTF *)(*v12 - 16), v9);
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v10 - 16), v9);
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v9);
    }
  }
  *((_QWORD *)this + 1) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v9);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection(WebKit::WebSharedWorkerServerToContextConnection *this)
{
  WebKit::WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection((WebKit::WebSharedWorkerServerToContextConnection *)((char *)this - 8));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection((WebKit::WebSharedWorkerServerToContextConnection *)((char *)this - 8));
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebSharedWorkerServerToContextConnection::messageSenderConnection(WebKit::WebSharedWorkerServerToContextConnection *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 64);
}

uint64_t WebKit::WebSharedWorkerServerToContextConnection::messageSenderDestinationID(WebKit::WebSharedWorkerServerToContextConnection *this)
{
  return 0;
}

void WebKit::WebSharedWorkerServerToContextConnection::postErrorToWorkerObject(uint64_t a1, uint64_t a2, uint64_t (**a3)(), int a4, int a5, uint64_t (**a6)(), char a7)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v14 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 256);
    v18 = 134218496;
    v19 = a1;
    v20 = 2048;
    v21 = v15;
    v22 = 2048;
    v23 = a2;
    _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::postErrorToWorkerObject: sharedWorkerIdentifier=%llu", (uint8_t *)&v18, 0x20u);
  }
  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
  {
    v17 = *(uint64_t (***)())(v16 + 8);
    if (v17)
      WebKit::WebSharedWorkerServer::postErrorToWorkerObject(v17, a2, a3, a4, a5, a6, a7);
  }
}

void WebKit::WebSharedWorkerServerToContextConnection::sharedWorkerTerminated(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 256);
    v8 = 134218496;
    v9 = a1;
    v10 = 2048;
    v11 = v5;
    v12 = 2048;
    v13 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::sharedWorkerTerminated: sharedWorkerIdentifier=%llu", (uint8_t *)&v8, 0x20u);
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      WebKit::WebSharedWorkerServer::sharedWorkerTerminated(v7, a2);
  }
}

WTF::StringImpl *WebKit::WebSharedWorkerServerToContextConnection::launchSharedWorker(WebKit::WebSharedWorkerServerToContextConnection *this, WebKit::WebSharedWorker *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  WebCore::RegistrableDomain *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebKit::NetworkConnectionToWebProcess *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  uint64_t (***v38)();
  uint64_t (**v39)();
  _QWORD *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *result;
  char v43;
  _OWORD v44[2];
  _BYTE buf[12];
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  WTF::StringImpl *v64;
  __int128 v65;
  __int128 v66;
  __int16 v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int16 v72;
  WTF::StringImpl *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(_QWORD *)(v4 + 256);
  v7 = (char *)a2 + 24;
  v8 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host((WebKit::WebSharedWorker *)((char *)a2 + 24));
  WebCore::RegistrableDomain::uncheckedCreateFromHost(v8, (WTF::StringImpl **)buf);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E34C4130;
  *(_QWORD *)&v63 = v9;
  WebKit::NetworkProcess::addAllowedFirstPartyForCookies(v5, v6, (WTF::ASCIICaseInsensitiveHash **)buf, 0, (uint64_t *)&v63);
  v11 = v63;
  *(_QWORD *)&v63 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(*((_QWORD *)this + 3) + 256);
    v15 = *((_QWORD *)a2 + 1);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = this;
    v46 = 2048;
    v47 = v14;
    v48 = 2048;
    v49 = v15;
    _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::launchSharedWorker: sharedWorkerIdentifier=%llu", buf, 0x20u);
  }
  *((_BYTE *)a2 + 512) = 1;
  LOBYTE(v63) = 0;
  v68 = 0;
  if (*((_BYTE *)a2 + 432))
  {
    v63 = *((_OWORD *)a2 + 23);
    v16 = (WTF::StringImpl *)*((_QWORD *)a2 + 48);
    if (v16)
      *(_DWORD *)v16 += 2;
    v64 = v16;
    v65 = *(_OWORD *)((char *)a2 + 392);
    v66 = *(_OWORD *)((char *)a2 + 408);
    v67 = *((_WORD *)a2 + 212);
    v68 = 1;
  }
  v17 = *((_OWORD *)a2 + 29);
  v69 = *((_OWORD *)a2 + 28);
  v70 = v17;
  v71 = *((_OWORD *)a2 + 30);
  v72 = *((_WORD *)a2 + 248);
  v18 = (WTF::StringImpl *)*((_QWORD *)a2 + 63);
  if (v18)
    *(_DWORD *)v18 += 2;
  v73 = v18;
  v61 = v70;
  v62 = v71;
  v60 = v69;
  if ((_BYTE)v71)
  {
    v19 = *((_QWORD *)this + 3);
    v20 = *(_QWORD *)(v19 + 256);
    v69 = v60;
    *(_QWORD *)&v70 = v20;
    v21 = *(_QWORD *)(v19 + 72);
    *(_QWORD *)buf = v61;
    v22 = (WebKit::NetworkConnectionToWebProcess *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v21 + 128), buf);
    if (v22)
    {
      v23 = WebKit::NetworkConnectionToWebProcess::swConnection(v22);
      if (v23)
      {
        v24 = v23;
        v44[0] = v60;
        v44[1] = v61;
        WebKit::WebSWServerConnection::gatherClientData(v23, (uint64_t *)v44, buf);
        if (v59)
        {
          WebKit::WebSWServerConnection::unregisterServiceWorkerClient(v24, (uint64_t *)&v60);
          v25 = WebKit::NetworkConnectionToWebProcess::swConnection(*((WebKit::NetworkConnectionToWebProcess **)this + 3));
          if (v25)
          {
            if (!v59)
              __break(1u);
            v52 = v69;
            v53 = v70;
            WebKit::WebSWServerConnection::registerServiceWorkerClient(v25, (WebCore::SecurityOriginData *)buf, (uint64_t)&v52, (uint64_t)&v57, (uint64_t)&v58);
          }
          if (v59)
          {
            v27 = v58;
            v58 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v26);
              else
                *(_DWORD *)v27 -= 2;
            }
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v26);
            v29 = v55;
            v55 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v28);
              else
                *(_DWORD *)v29 -= 2;
            }
            v30 = v54;
            v54 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v28);
              else
                *(_DWORD *)v30 -= 2;
            }
            if (v51 != -1)
              ((void (*)(char *, uint64_t *))off_1E34C4098[v51])(&v43, &v50);
            v51 = -1;
            if ((_DWORD)v49 != -1)
              ((void (*)(char *, _BYTE *))off_1E34C4098[v49])(&v43, buf);
          }
        }
      }
    }
  }
  v31 = *((_QWORD *)a2 + 1);
  v32 = (*(uint64_t (**)(WebKit::WebSharedWorkerServerToContextConnection *))(*(_QWORD *)this + 56))(this);
  v33 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v33 = 2775;
  *(_QWORD *)(v33 + 8) = v32;
  *(_QWORD *)(v33 + 528) = v33 + 16;
  *(_QWORD *)(v33 + 536) = v33 + 16;
  *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v33 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
  *(_QWORD *)buf = v33;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v33, (uint64_t)v7);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 8uLL, 8) = v31;
  IPC::ArgumentCoder<WebKit::PolicyDecisionConsoleMessage,void>::encode((IPC::Encoder *)v33, (uint64_t)a2 + 136);
  IPC::ArgumentCoder<WebCore::WorkerFetchResult,void>::encode((IPC::Encoder *)v33, (uint64_t *)a2 + 22);
  IPC::ArgumentCoder<WebCore::WorkerInitializationData,void>::encode((IPC::Encoder *)v33, (uint64_t)&v63);
  (*(void (**)(WebKit::WebSharedWorkerServerToContextConnection *, _BYTE *, _QWORD))(*(_QWORD *)this + 32))(this, buf, 0);
  v35 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v35)
  {
    IPC::Encoder::~Encoder(v35, v34);
    WTF::fastFree(v36, v37);
  }
  v38 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
  v39 = off_1E34C4158;
  *v38 = off_1E34C4158;
  v38[1] = (uint64_t (**)())this;
  v38[2] = (uint64_t (**)())a2;
  v40 = (_QWORD *)*((_QWORD *)a2 + 20);
  if (v40)
  {
    do
    {
      ((void (*)(uint64_t (***)(), _QWORD, _QWORD, _QWORD *))(*v38)[2])(v38, *v40, v40[1], v40 + 3);
      v40 = (_QWORD *)v40[8];
    }
    while (v40);
    v39 = *v38;
  }
  ((void (*)(uint64_t (***)()))v39[1])(v38);
  result = v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v41);
    else
      *(_DWORD *)result -= 2;
  }
  if (v68)
  {
    result = v64;
    v64 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v41);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerServerToContextConnection::suspendSharedWorker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2779;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerServerToContextConnection::resumeSharedWorker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2777;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

WTF::StringImpl *WebKit::WebSharedWorkerServerToContextConnection::postConnectEvent(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  WTF::StringImpl *result;
  WTF::StringImpl *v23;
  IPC::Encoder *v24;
  _BYTE buf[22];
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1[3] + 256);
    v10 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v9;
    v26 = 2048;
    v27 = v10;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::postConnectEvent: sharedWorkerIdentifier=%llu", buf, 0x20u);
  }
  v11 = *(_QWORD *)(a2 + 8);
  WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(a2 + 56));
  v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 2776;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v24 = (IPC::Encoder *)v13;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = v11;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v13, a3);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v13, a3 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, (uint64_t *)&v23);
  v14 = *a4;
  *a4 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34C41A8;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)buf = v15;
  *(_QWORD *)&buf[8] = v16;
  (*(void (**)(_QWORD *, IPC::Encoder **, _BYTE *, _QWORD))(*a1 + 40))(a1, &v24, buf, 0);
  v18 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v24;
  v24 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v17);
    WTF::fastFree(v20, v21);
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerServerToContextConnection::terminateSharedWorker(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _BYTE v14[12];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1[3] + 256);
    v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)v14 = 134218496;
    *(_QWORD *)&v14[4] = a1;
    v15 = 2048;
    v16 = v5;
    v17 = 2048;
    v18 = v6;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::terminateSharedWorker: sharedWorkerIdentifier=%llu", v14, 0x20u);
  }
  v7 = *(_QWORD *)(a2 + 8);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2780;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  *(_QWORD *)v14 = v9;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v7;
  (*(void (**)(_QWORD *, _BYTE *, _QWORD))(*a1 + 32))(a1, v14, 0);
  result = *(IPC::Encoder **)v14;
  *(_QWORD *)v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::WebSharedWorkerServerToContextConnection::addSharedWorkerObject(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  NSObject *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t result;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  __int128 v55;
  WTF *v56;
  uint8_t buf[4];
  _BYTE v58[20];
  char *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v55 = a2;
  *((_QWORD *)&v55 + 1) = a3;
  v6 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1[3] + 256);
    WTF::makeString<unsigned long long,char,unsigned long long>(a3, 45, a2, &v54);
    WTF::String::utf8();
    if (v56)
      v9 = (char *)v56 + 16;
    else
      v9 = 0;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)v58 = a1;
    *(_WORD *)&v58[8] = 2048;
    *(_QWORD *)&v58[10] = v8;
    *(_WORD *)&v58[18] = 2082;
    v59 = v9;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::addSharedWorkerObject: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    v10 = v56;
    v56 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v7);
      else
        --*(_DWORD *)v10;
    }
    v11 = v54;
    v54 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v13 = a1 + 6;
  v12 = a1[6];
  if (v12
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 6, 0), (v12 = *v13) != 0))
  {
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = (a3 + ~(a3 << 32)) ^ ((unint64_t)(a3 + ~(a3 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v12 + 16 * v18);
  v20 = *v19;
  if (!*v19)
  {
LABEL_24:
    v23 = v19[1];
    *v19 = a3;
    v19[1] = 0;
    if (v23)
      WTF::fastFree((WTF *)(v23 - 16), v7);
    v24 = *v13;
    if (*v13)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v26 = *v13;
    if (*v13)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_35;
    }
    else if (3 * v29 > 4 * v28)
    {
      goto LABEL_35;
    }
    v19 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 6, v19);
    goto LABEL_35;
  }
  v21 = 0;
  v22 = 1;
  while (v20 != a3)
  {
    if (v20 == -1)
      v21 = v19;
    v18 = (v18 + v22) & v14;
    v19 = (uint64_t *)(v12 + 16 * v18);
    v20 = *v19;
    ++v22;
    if (!*v19)
    {
      if (v21)
      {
        *v21 = 0;
        v21[1] = 0;
        --*(_DWORD *)(*v13 - 16);
        v19 = v21;
      }
      goto LABEL_24;
    }
  }
LABEL_35:
  v32 = v19[1];
  v30 = v19 + 1;
  v31 = v32;
  if (v32
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v30),
        (v31 = *v30) != 0))
  {
    v33 = *(_DWORD *)(v31 - 8);
  }
  else
  {
    v33 = 0;
  }
  *(_DWORD *)buf = -1640531527;
  *(_WORD *)v58 = 0;
  v58[2] = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)buf, &v55);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf);
  v35 = result & v33;
  v36 = (unint64_t *)(v31 + 16 * (result & v33));
  v38 = *v36;
  v37 = v36[1];
  if (*(_OWORD *)v36 == 0)
  {
LABEL_46:
    *(_OWORD *)v36 = v55;
    v41 = *v30;
    if (*v30)
      v42 = *(_DWORD *)(v41 - 12) + 1;
    else
      v42 = 1;
    *(_DWORD *)(v41 - 12) = v42;
    v43 = *v30;
    if (*v30)
      v44 = *(_DWORD *)(v43 - 12);
    else
      v44 = 0;
    v45 = (*(_DWORD *)(v43 - 16) + v44);
    v46 = *(unsigned int *)(v43 - 4);
    if (v46 > 0x400)
    {
      if (v46 > 2 * v45)
        goto LABEL_55;
    }
    else if (3 * v46 > 4 * v45)
    {
      goto LABEL_55;
    }
    result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v30);
    goto LABEL_55;
  }
  v39 = 0;
  v40 = 1;
  while (__PAIR128__(v37, v38) != v55)
  {
    if (v37 == -1)
      v39 = v36;
    v35 = (v35 + v40) & v33;
    v36 = (unint64_t *)(v31 + 16 * v35);
    v38 = *v36;
    v37 = v36[1];
    ++v40;
    if (*(_OWORD *)v36 == 0)
    {
      if (v39)
      {
        *v39 = 0;
        v39[1] = 0;
        --*(_DWORD *)(*v30 - 16);
        v36 = v39;
      }
      goto LABEL_46;
    }
  }
LABEL_55:
  v47 = a1[3];
  if (*(_QWORD *)(v47 + 256) != *((_QWORD *)&v55 + 1))
  {
    if (*v30)
    {
      if (*(_DWORD *)(*v30 - 12) == 1)
      {
        v48 = *(_QWORD *)(v47 + 72);
        v53 = *(_QWORD *)(v47 + 256);
        v54 = (WTF::StringImpl *)*((_QWORD *)&v55 + 1);
        buf[0] = 2;
        *(_QWORD *)&v58[4] = &v54;
        *(_QWORD *)&v58[12] = &v53;
        v49 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v49 = 330;
        *(_QWORD *)(v49 + 8) = 0;
        *(_QWORD *)(v49 + 528) = v49 + 16;
        *(_QWORD *)(v49 + 536) = v49 + 16;
        *(_OWORD *)(v49 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v49 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v49);
        v56 = (WTF *)v49;
        IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v49, (uint64_t)buf);
        (*(void (**)(uint64_t, WTF **, _QWORD))(*(_QWORD *)(v48 + 16) + 32))(v48 + 16, &v56, 0);
        result = (uint64_t)v56;
        v56 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)result, v50);
          result = WTF::fastFree(v51, v52);
        }
      }
    }
  }
  if ((a1[11] & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 7));
  return result;
}

uint64_t WebKit::WebSharedWorkerServerToContextConnection::removeSharedWorkerObject(uint64_t a1, unint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  char *v10;
  WTF *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  int v30;
  uint64_t *v31;
  _OWORD *v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  _QWORD *v40;
  _QWORD *v41;
  int v42;
  _QWORD *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  WTF *v51;
  void *v52;
  NSObject *v53;
  _BOOL8 v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  WTF::StringImpl *v59;
  WTF *v60;
  uint8_t buf[4];
  _BYTE v62[20];
  char *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v58 = a2;
  v59 = (WTF::StringImpl *)a3;
  v6 = qword_1ECE718C0;
  result = os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 256);
    WTF::makeString<unsigned long long,char,unsigned long long>(a3, 45, a2, &v57);
    WTF::String::utf8();
    if (v60)
      v10 = (char *)v60 + 16;
    else
      v10 = 0;
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)v62 = a1;
    *(_WORD *)&v62[8] = 2048;
    *(_QWORD *)&v62[10] = v9;
    *(_WORD *)&v62[18] = 2082;
    v63 = v10;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::removeSharedWorkerObject: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    v11 = v60;
    v60 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, v8);
      else
        --*(_DWORD *)v11;
    }
    result = (uint64_t)v57;
    v57 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v13 = (_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12)
  {
    v14 = *(_DWORD *)(v12 - 8);
    v15 = (a3 + ~(a3 << 32)) ^ ((unint64_t)(a3 + ~(a3 << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = *(_QWORD *)(v12 + 16 * v18);
    if (v19 != a3)
    {
      v20 = 1;
      while (v19)
      {
        v18 = ((_DWORD)v18 + v20) & v14;
        v19 = *(_QWORD *)(v12 + 16 * v18);
        ++v20;
        if (v19 == a3)
          goto LABEL_20;
      }
      v18 = *(unsigned int *)(v12 - 4);
    }
LABEL_20:
    if (v18 != *(_DWORD *)(v12 - 4))
    {
      v21 = (_QWORD *)(v12 + 16 * v18);
      v22 = v21 + 1;
      v23 = v21[1];
      if (!v23)
      {
        v34 = 0;
        goto LABEL_52;
      }
      v24 = *(_DWORD *)(v23 - 8);
      *(_DWORD *)buf = -1640531527;
      *(_WORD *)v62 = 0;
      v62[2] = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)buf, &v58);
      result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)buf);
      v25 = result & v24;
      v26 = (uint64_t *)(v23 + 16 * v25);
      v27 = *v26;
      v28 = v26[1];
      if (*v26 == v58 && v28 == (_QWORD)v59)
      {
LABEL_33:
        v33 = (_OWORD *)(v23 + 16 * v25);
        v34 = *v22;
        if (!*v22)
        {
          v35 = 0;
LABEL_39:
          if (v35 != v33)
          {
            *v33 = xmmword_1978CF7D0;
            ++*(_DWORD *)(*v22 - 16);
            v36 = *v22;
            if (*v22)
              v37 = *(_DWORD *)(v36 - 12) - 1;
            else
              v37 = -1;
            *(_DWORD *)(v36 - 12) = v37;
            v34 = *v22;
            if (!*v22)
              goto LABEL_52;
            v38 = *(_DWORD *)(v34 - 4);
            if (6 * *(_DWORD *)(v34 - 12) >= v38 || v38 < 9)
            {
LABEL_51:
              if (*(_DWORD *)(v34 - 12))
                return result;
              goto LABEL_52;
            }
            result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v22, v38 >> 1);
            v34 = *v22;
          }
          if (v34)
            goto LABEL_51;
LABEL_52:
          v40 = (_QWORD *)*v13;
          if (!*v13 || (v40 += 2 * *((unsigned int *)v40 - 1), v40 != v21))
          {
            if (v40 != v21)
            {
              *v21 = -1;
              if (v34)
                result = WTF::fastFree((WTF *)(v34 - 16), v8);
              ++*(_DWORD *)(*v13 - 16);
              v41 = (_QWORD *)*v13;
              if (*v13)
                v42 = *((_DWORD *)v41 - 3) - 1;
              else
                v42 = -1;
              *((_DWORD *)v41 - 3) = v42;
              v43 = (_QWORD *)*v13;
              if (*v13)
              {
                v44 = 6 * *((_DWORD *)v43 - 3);
                v45 = *((_DWORD *)v43 - 1);
                if (v44 < v45 && v45 >= 9)
                  result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(a1 + 48), v45 >> 1, 0);
              }
            }
          }
          v47 = *(_QWORD *)(a1 + 24);
          if (*(WTF::StringImpl **)(v47 + 256) != v59)
          {
            v48 = *(_QWORD *)(v47 + 72);
            v56 = *(_QWORD *)(v47 + 256);
            v57 = v59;
            buf[0] = 2;
            *(_QWORD *)&v62[4] = &v57;
            *(_QWORD *)&v62[12] = &v56;
            v49 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v49 = 349;
            *(_QWORD *)(v49 + 8) = 0;
            *(_QWORD *)(v49 + 528) = v49 + 16;
            *(_QWORD *)(v49 + 536) = v49 + 16;
            *(_OWORD *)(v49 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v49 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v49);
            v60 = (WTF *)v49;
            IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v49, (uint64_t)buf);
            (*(void (**)(uint64_t, WTF **, _QWORD))(*(_QWORD *)(v48 + 16) + 32))(v48 + 16, &v60, 0);
            result = (uint64_t)v60;
            v60 = 0;
            if (result)
            {
              IPC::Encoder::~Encoder((IPC::Encoder *)result, v50);
              result = WTF::fastFree(v51, v52);
            }
          }
          if (!*v13 || !*(_DWORD *)(*v13 - 12))
          {
            v53 = qword_1ECE718C0;
            v54 = os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT);
            if (v54)
            {
              v55 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 256);
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)v62 = a1;
              *(_WORD *)&v62[8] = 2048;
              *(_QWORD *)&v62[10] = v55;
              _os_log_impl(&dword_196BCC000, v53, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerServerToContextConnection::removeSharedWorkerObject: connection is now idle, starting a timer to terminate it", buf, 0x16u);
            }
            atomic_load((unsigned __int8 *)(WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v54) + 4));
            return WebCore::TimerBase::start();
          }
          return result;
        }
      }
      else
      {
        v30 = 1;
        while (v27 | v28)
        {
          v25 = ((_DWORD)v25 + v30) & v24;
          v31 = (uint64_t *)(v23 + 16 * v25);
          v27 = *v31;
          v28 = v31[1];
          ++v30;
          if (v27 == v58 && v28 == (_QWORD)v59)
            goto LABEL_33;
        }
        v34 = *v22;
        if (!*v22)
          goto LABEL_52;
        v33 = (_OWORD *)(v34 + 16 * *(unsigned int *)(v34 - 4));
      }
      v35 = (_OWORD *)(v34 + 16 * *(unsigned int *)(v34 - 4));
      if (v35 == v33)
        goto LABEL_51;
      goto LABEL_39;
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::AsyncRevalidation::staleWhileRevalidateEnding(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 72);
  if (v1)
  {
    *(_QWORD *)(this + 72) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return this;
}

_QWORD *WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,std::optional<WebKit::NavigatingToAppBoundDomain>::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0::~$_0(_QWORD *a1)
{
  WebCore::ResourceRequestBase *v2;
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v2 = (WebCore::ResourceRequestBase *)(a1 + 10);
  v3 = (const void *)a1[34];
  a1[34] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v5 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

uint64_t WebKit::NetworkCache::Cache::Cache(uint64_t a1, uint64_t a2, _DWORD **a3, uint64_t *a4, char a5, uint64_t a6)
{
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD handler[5];
  uint64_t v16;
  int out_token[2];

  *(_DWORD *)a1 = 1;
  v7 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 8) = v7;
  v9 = (unsigned int *)(a2 + 120);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 16) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a6;
  v11 = *a3;
  if (*a3)
    *v11 += 2;
  *(_QWORD *)(a1 + 72) = v11;
  if ((a5 & 4) != 0)
  {
    v16 = a1;
    std::make_unique[abi:sn180100]<WebCore::LowPowerModeNotifier,WebKit::NetworkCache::Cache::Cache(WebKit::NetworkProcess &,WTF::String const&,WTF::Ref<WebKit::NetworkCache::Storage,WTF::RawPtrTraits<WebKit::NetworkCache::Storage>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::Storage>> &&,WTF::OptionSet<WebKit::NetworkCache::CacheOption>,PAL::SessionID)::$_0>((uint64_t *)out_token, &v16);
    std::unique_ptr<WebCore::LowPowerModeNotifier>::reset[abi:sn180100]((WebCore::LowPowerModeNotifier **)(a1 + 24), *(WebCore::LowPowerModeNotifier **)out_token);
    if ((WebCore::LowPowerModeNotifier::isLowPowerModeEnabled(*(WebCore::LowPowerModeNotifier **)(a1 + 24)) & 1) == 0)
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = a1;
      *(_QWORD *)(v13 + 16) = v12;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_QWORD *)(v13 + 56) = 0;
      std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager>::reset[abi:sn180100]((WebKit::NetworkCache::SpeculativeLoadManager **)(a1 + 32), (WTF::StringImpl *)v13);
    }
  }
  if ((a5 & 2) != 0)
  {
    out_token[0] = 0;
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = ___ZN6WebKit12NetworkCache5CacheC2ERNS_14NetworkProcessERKN3WTF6StringEONS4_3RefINS0_7StorageENS4_12RawPtrTraitsIS9_EENS4_21DefaultRefDerefTraitsIS9_EEEENS4_9OptionSetINS0_11CacheOptionEEEN3PAL9SessionIDE_block_invoke;
    handler[3] = &__block_descriptor_tmp;
    handler[4] = a1;
    notify_register_dispatch("com.apple.WebKit.Cache.dump", out_token, MEMORY[0x1E0C80D38], handler);
  }
  return a1;
}

void WebKit::NetworkCache::Cache::~Cache(WebKit::NetworkCache::Cache *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
    WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::deallocateTable(v4, a2);
  v5 = (WTF::StringImpl **)*((_QWORD *)this + 5);
  if (v5)
    WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(v5, a2);
  std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager>::reset[abi:sn180100]((WebKit::NetworkCache::SpeculativeLoadManager **)this + 4, 0);
  std::unique_ptr<WebCore::LowPowerModeNotifier>::reset[abi:sn180100]((WebCore::LowPowerModeNotifier **)this + 3, 0);
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    v7 = v6 + 30;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v10 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v10);
}

uint64_t WebKit::NetworkCache::Cache::updateCapacity(WebKit::NetworkCache::Cache *this)
{
  int v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;

  v2 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 137);
  WTF::String::isolatedCopy();
  v4 = WebKit::NetworkCache::computeCapacity(v2, (WTF::FileSystemImpl *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *((_QWORD *)this + 1);
  if (*(_QWORD *)(result + 40) != v4)
  {
    *(_QWORD *)(result + 40) = v4;
    return WebKit::NetworkCache::Storage::shrinkIfNeeded(result);
  }
  return result;
}

_QWORD *WebKit::NetworkCache::Cache::browsingContextRemoved(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD *result;
  WebKit::NetworkCache::Entry *v15;
  _QWORD **v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25[2];

  v21 = a2;
  v22 = a3;
  v6 = (uint64_t *)(a1 + 48);
  v23 = a4;
  v24 = a5;
  v7 = WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>((uint64_t *)(a1 + 48), &v21);
  v8 = *(_QWORD **)(a1 + 48);
  if (v8)
    v8 += 6 * *((unsigned int *)v8 - 1);
  if (v8 == v7)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = (_QWORD *)v7[4];
    v10 = (_QWORD *)v7[5];
    v7[4] = 0;
    WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::remove(v6, v7);
  }
  v25[0] = v9;
  v25[1] = v10;
  WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v25, &v21);
  if (v25[0])
  {
    v11 = *((unsigned int *)v25[0] - 1);
    v12 = &v25[0][v11];
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v16 = v25;
  v17 = v12;
  v18 = v12;
  v19 = v12;
  v20 = &v25[0][v11];
  WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v16);
  while (v22 != v17)
  {
    v15 = *(WebKit::NetworkCache::Entry **)(*(_QWORD *)(*v22 + 8) + 8);
    if (v15)
      WebKit::NetworkCache::SpeculativeLoad::cancel(v15);
    WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v21);
  }
  result = v25[0];
  if (v25[0])
    return (_QWORD *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((uint64_t)v25[0], v13);
  return result;
}

_QWORD *WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[2];
  v3 = (_QWORD *)(a1[1] + 8);
  a1[1] = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
    a1[1] = ++v3;
  WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
  ++*(_DWORD *)(*a1 + 8);
  return a1;
}

uint64_t *WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::Function<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = WTF::fastMalloc((WTF *)0x158);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = off_1E34C4220;
  *(_QWORD *)(v4 + 8) = v5;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v4 + 16), (const WebCore::ResourceRequest *)(a2 + 1));
  v6 = a2[26];
  a2[26] = 0;
  *(_QWORD *)(v4 + 216) = v6;
  v7 = *(_OWORD *)(a2 + 27);
  v8 = *(_OWORD *)(a2 + 29);
  v9 = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(v4 + 256) = *(_OWORD *)(a2 + 31);
  *(_OWORD *)(v4 + 272) = v9;
  *(_OWORD *)(v4 + 224) = v7;
  *(_OWORD *)(v4 + 240) = v8;
  v10 = *(_OWORD *)(a2 + 35);
  v11 = *(_OWORD *)(a2 + 37);
  v12 = *(_OWORD *)(a2 + 39);
  *(_QWORD *)(v4 + 336) = a2[41];
  *(_OWORD *)(v4 + 304) = v11;
  *(_OWORD *)(v4 + 320) = v12;
  *(_OWORD *)(v4 + 288) = v10;
  *a1 = v4;
  return a1;
}

uint64_t WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(const void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  v4 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    v5 = v4 + 30;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

_QWORD *WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::~$_1(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  const void *v12;
  WTF::StringImpl *v13;
  WebKit::NetworkCache::Cache *v14;

  v3 = (unsigned int *)a1[51];
  a1[51] = 0;
  if (v3)
  {
    v4 = v3 + 30;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WTF::StringImpl *)a1[45];
  a1[45] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)a1[44];
  a1[44] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)a1[43];
  a1[43] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)a1[42];
  a1[42] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = a1[27];
  a1[27] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (const void *)a1[26];
  a1[26] = 0;
  if (v12)
    CFRelease(v12);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  v14 = (WebKit::NetworkCache::Cache *)a1[1];
  a1[1] = 0;
  if (v14)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v14, v13);
  return a1;
}

void WebKit::NetworkCache::Cache::makeRedirectEntry(WebKit::NetworkCache::Cache *this@<X0>, const WebCore::ResourceRequest *a2@<X1>, const WebCore::ResourceResponse *a3@<X2>, const WebCore::ResourceRequest *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  WebCore *v10;
  const WebCore::ResourceResponse *v11;
  uint64_t v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  CFTypeRef v19;
  _QWORD v20[2];
  CFTypeRef v21[24];
  CFTypeRef cf;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  WebCore::ResourceRequest::ResourceRequest(v21, a4);
  WebCore::ResourceRequestBase::clearHTTPAuthorization((WebCore::ResourceRequestBase *)v21);
  WebKit::NetworkCache::Cache::makeCacheKey(this, a2, (WTF::SHA1 *)&v23);
  v9 = *((_QWORD *)this + 2);
  v20[0] = *((_QWORD *)this + 8);
  v10 = (WebCore *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 216), v20);
  WebCore::collectVaryingRequestHeaders(v10, a2, a3, v11);
  v12 = WTF::fastMalloc((WTF *)0x300);
  *a5 = WebKit::NetworkCache::Entry::Entry(v12, (uint64_t)&v23, (uint64_t)a3, (const WebCore::ResourceRequest *)v21, (uint64_t)v20);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v13);
  v15 = v26;
  v26 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v25;
  v25 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v24;
  v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v23;
  v23 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v14);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = cf;
  cf = 0;
  if (v19)
    CFRelease(v19);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v21);
}

void WebKit::NetworkCache::Cache::storeRedirect(WebKit::NetworkCache *this@<X1>, WebCore::ResourceRequest *a2@<X2>, WebKit::NetworkCache::Cache *a3@<X0>, const WebCore::ResourceRequest *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[168];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (WebKit::NetworkCache::makeStoreDecision(this, a2, a2))
  {
    *a7 = 0;
  }
  else
  {
    WebKit::NetworkCache::Cache::makeRedirectEntry(a3, this, a2, a4, a7);
    v16 = *a7;
    if (a6)
    {
      if (!*(_BYTE *)(v16 + 752))
        *(_BYTE *)(v16 + 752) = 1;
      *(_QWORD *)(v16 + 744) = a5;
    }
    WebKit::NetworkCache::Entry::encodeAsStorageRecord((WebKit::NetworkCache::Entry *)v16, v14, v15);
    v17 = *((_QWORD *)a3 + 1);
    v21 = 0;
    v22 = 0;
    WebKit::NetworkCache::Storage::store(v17, (const WebKit::NetworkCache::Key *)v23, &v22, &v21);
    v19 = v21;
    v21 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v22;
    v22 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)v23, v18);
  }
}

void WebKit::NetworkCache::Cache::update(_QWORD *a1@<X0>, WebCore::NetworkStorageSession *a2@<X1>, uint64_t a3@<X2>, WebCore::ResourceResponse *a4@<X3>, char a5@<W4>, WebKit::NetworkCache::Entry **a6@<X8>)
{
  const WebCore::ResourceResponse *v12;
  const void *v13;
  unsigned int *v14;
  uint64_t v15;
  WebCore *v16;
  const WebCore::ResourceResponse *v17;
  uint64_t v18;
  WebKit::NetworkCache::Entry *v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int *v27;
  WTF::StringImpl *v28;
  CFTypeRef v29;
  uint64_t v30;
  _BYTE v31[240];
  CFTypeRef cf;
  char v33;
  unsigned int *v34;
  _QWORD v35[22];

  v35[21] = *MEMORY[0x1E0C80C00];
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v31, (const WebCore::ResourceResponseBase *)(a3 + 80));
  v13 = *(const void **)(a3 + 320);
  cf = v13;
  if (v13)
    CFRetain(v13);
  v33 = *(_BYTE *)(a3 + 328);
  WebCore::updateResponseHeadersAfterRevalidation((WebCore *)v31, a4, v12);
  v14 = *(unsigned int **)(a3 + 560);
  if (!v14)
  {
    WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord((unsigned int **)a3);
    v14 = *(unsigned int **)(a3 + 560);
  }
  v15 = a1[2];
  v35[0] = a1[8];
  v16 = (WebCore *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v15 + 216), v35);
  WebCore::collectVaryingRequestHeaders(v16, a2, (const WebCore::ResourceRequest *)v31, v17);
  v18 = WTF::fastMalloc((WTF *)0x300);
  v19 = (WebKit::NetworkCache::Entry *)v18;
  if (v14)
  {
    do
      v20 = __ldaxr(v14);
    while (__stlxr(v20 + 1, v14));
  }
  v34 = v14;
  WebKit::NetworkCache::Entry::Entry(v18, a3, (uint64_t)v31, a5, (uint64_t *)&v34, (uint64_t)v35);
  *a6 = v19;
  if (v34)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v34, v21);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v21);
  WebKit::NetworkCache::Entry::encodeAsStorageRecord(v19, v22, v23);
  v24 = a1[1];
  v34 = 0;
  v30 = 0;
  WebKit::NetworkCache::Storage::store(v24, (const WebKit::NetworkCache::Key *)v35, (uint64_t *)&v34, &v30);
  v26 = v30;
  v30 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v34;
  v34 = 0;
  if (v27)
    (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)v35, v25);
  v29 = cf;
  cf = 0;
  if (v29)
    CFRelease(v29);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v31, v28);
}

uint64_t WebKit::NetworkCache::Entry::buffer(WebKit::NetworkCache::Entry *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 70);
  if (!result)
  {
    WebKit::NetworkCache::Entry::initializeBufferFromStorageRecord((unsigned int **)this);
    return *((_QWORD *)this + 70);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Cache::remove(WebKit::NetworkCache::Storage **this, const WebCore::ResourceRequest *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WebKit::NetworkCache::Cache::makeCacheKey((WebKit::NetworkCache::Cache *)this, a2, (WTF::SHA1 *)&v8);
  WebKit::NetworkCache::Storage::remove(this[1], (const WebKit::NetworkCache::Key *)&v8);
  v4 = v11;
  v11 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v10;
  v10 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkCache::Cache::remove(uint64_t a1, const WebKit::NetworkCache::Key **a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  WebKit::NetworkCache::Storage::remove(v3, a2, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::NetworkCache::Cache::traverse(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  WTF::RunLoop *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12[2];

  v3 = *(_DWORD *)(a1 + 56);
  if (v3 >= 3)
  {
    v4 = (WTF::RunLoop *)WTFLogAlways();
    WTF::RunLoop::main(v4);
    v5 = *a2;
    *a2 = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = &off_1E34C4298;
    v6[1] = v5;
    v12[0] = (uint64_t)v6;
    WTF::RunLoop::dispatch();
    result = v12[0];
    v12[0] = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  *(_DWORD *)(a1 + 56) = v3 + 1;
  v9 = *(_QWORD *)(a1 + 8);
  {
    v12[0] = (uint64_t)"Resource";
    v12[1] = 9;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebKit::NetworkCache::resourceType(void)::resource, (uint64_t)v12);
  }
  ++*(_DWORD *)a1;
  v10 = *a2;
  *a2 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = &off_1E34C42C0;
  v11[1] = a1;
  v11[2] = a1;
  v11[3] = v10;
  v12[0] = (uint64_t)v11;
  WebKit::NetworkCache::Storage::traverse(v9, &WebKit::NetworkCache::resourceType(void)::resource, 0, v12);
  result = v12[0];
  if (v12[0])
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::NetworkCache::Cache::traverse(uint64_t a1, WTF::SHA1 *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9[2];

  v4 = *(_QWORD *)(a1 + 8);
  {
    v9[0] = (uint64_t)"Resource";
    v9[1] = 9;
    v8 = a3;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebKit::NetworkCache::resourceType(void)::resource, (uint64_t)v9);
    a3 = v8;
  }
  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34C42E8;
  v6[1] = v5;
  v9[0] = (uint64_t)v6;
  WebKit::NetworkCache::Storage::traverse(v4, &WebKit::NetworkCache::resourceType(void)::resource, a2, 0, v9);
  result = v9[0];
  if (v9[0])
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9[0] + 8))(v9[0]);
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Cache::dumpFilePath(WebKit::NetworkCache::Storage **this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;

  WebKit::NetworkCache::Storage::versionPath(this[1]);
  WTF::FileSystemImpl::pathByAppendingComponent();
  result = v3;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkCache::Cache::deleteDumpFile(WebKit::NetworkCache::Storage **this)
{
  uint64_t v2;
  _QWORD *v3;
  WTF::StringImpl *v4;
  _QWORD *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  uint64_t v10;

  WTF::WorkQueue::create();
  v2 = v10;
  WebKit::NetworkCache::Cache::dumpFilePath(this);
  WTF::String::isolatedCopy();
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E34C4338;
  v9 = v3;
  v3[1] = v8;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 32))(v2, &v9);
  v5 = v9;
  v9 = 0;
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Cache::clear(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  uint64_t v8;
  WTF::StringImpl *v9;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  *a2 = 0;
  v8 = v5;
  v9 = 0;
  WebKit::NetworkCache::Storage::clear(v4, a3, (uint64_t)&v9, &v8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebKit::NetworkCache::Cache::deleteDumpFile((WebKit::NetworkCache::Storage **)a1);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkCache::Cache::fetchData(_DWORD *a1, char a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  ++*a1;
  v5 = *a3;
  *a3 = 0;
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = &off_1E34C4360;
  *(_QWORD *)(v6 + 8) = a1;
  *(_BYTE *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v5;
  *(_QWORD *)(v6 + 32) = 0;
  v8 = v6;
  WebKit::NetworkCache::Cache::traverse((uint64_t)a1, &v8);
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

WebCore::SecurityOriginData *WebKit::NetworkCache::Cache::deleteData(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::SecurityOriginData *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  WebKit::NetworkCache::Cache *v14;
  void *v15;
  WebCore::SecurityOriginData *result;
  _DWORD *v17;
  WebCore::SecurityOriginData *v18[2];
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  WebCore::SecurityOriginData *v23;

  v23 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)a2;
    v7 = 32 * v5;
    do
    {
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v23, v6, (uint64_t)&v17);
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
    v8 = v23;
  }
  else
  {
    v8 = 0;
  }
  v17 = a1;
  ++*a1;
  v23 = 0;
  v9 = *a3;
  *a3 = 0;
  v22 = 0u;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v10 = off_1E34C4388;
  v10[1] = a1;
  v10[2] = a1;
  v10[3] = v8;
  *(_OWORD *)v18 = 0u;
  v10[4] = v9;
  v10[5] = 0;
  v19 = 0u;
  v20 = 0;
  v10[6] = 0;
  v21 = v10;
  WebKit::NetworkCache::Cache::traverse((uint64_t)a1, (uint64_t *)&v21);
  if (v21)
    (*(void (**)(_QWORD *))(*v21 + 8))(v21);
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19 + 8, v11);
  v13 = v19;
  *(_QWORD *)&v19 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v18[1])
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v18[1], v12);
  v14 = v18[0];
  v18[0] = 0;
  if (v14)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v14, (WTF::StringImpl *)v12);
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v12);
  result = v23;
  if (v23)
    return (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v23, v15);
  return result;
}

WTF::StringImpl **WebKit::NetworkCache::Cache::deleteDataForRegistrableDomains(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  WTF::ASCIICaseInsensitiveHash **v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WebKit::NetworkCache::Cache *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl **result;
  _DWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  WTF::StringImpl **v24;

  v24 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(WTF::ASCIICaseInsensitiveHash ***)a2;
    v7 = 8 * v5;
    do
    {
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v24, v6++, (uint64_t)&v17);
      v7 -= 8;
    }
    while (v7);
    v8 = v24;
  }
  else
  {
    v8 = 0;
  }
  v17 = a1;
  ++*a1;
  v24 = 0;
  v9 = *a3;
  *a3 = 0;
  v23 = 0u;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
  *v10 = off_1E34C43B0;
  v10[1] = a1;
  v10[2] = a1;
  v10[3] = v8;
  v10[4] = v9;
  v10[5] = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v10[6] = 0;
  v21 = 0;
  v22 = v10;
  v10[7] = 0;
  WebKit::NetworkCache::Cache::traverse((uint64_t)a1, (uint64_t *)&v22);
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 8))(v22);
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19 + 8, v11);
  v13 = v19;
  *(_QWORD *)&v19 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (*((_QWORD *)&v18 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v18 + 1), v12);
  v14 = (WebKit::NetworkCache::Cache *)v18;
  *(_QWORD *)&v18 = 0;
  if (v14)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v14, v12);
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v12);
  result = v24;
  if (v24)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v24, v15);
  return result;
}

double WebKit::NetworkCache::BlobStorage::add@<D0>(WebKit::NetworkCache::BlobStorage *this@<X0>, const WTF::String *a2@<X1>, const WebKit::NetworkCache::Data *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  const WTF::String *v11;
  const WTF::String *v12;
  const WTF::String *v13;
  void *v14;
  NSObject *v15;
  size_t v16;
  size_t v17;
  NSObject *v18;
  const WTF::String *v19;
  void *v20;
  void *v21;
  void *v22;
  double result;
  WTF::StringImpl *v24;
  void *v25;
  const WTF::String *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF *v33;
  void *object;
  __int128 v35;
  char v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v39 = 0uLL;
  v40 = 0;
  WebKit::NetworkCache::computeSHA1((uint64_t)a3, (uint64_t)this + 8);
  if (*((_QWORD *)a3 + 2))
  {
    WTF::SHA1::hexDigest();
    WTF::String::isolatedCopy();
    if (object)
      strlen((const char *)object + 16);
    WTF::FileSystemImpl::pathByAppendingComponent();
    v9 = v38;
    v38 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = (WTF *)object;
    object = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v8);
      else
        --*(_DWORD *)v10;
    }
    WTF::FileSystemImpl::deleteFile(a2, v8);
    if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v37, v11))
    {
      if (WTF::FileSystemImpl::makeSafeToUseMemoryMapForPath((WTF::FileSystemImpl *)&v37, v12))
      {
        WebKit::NetworkCache::mapFile((uint64_t)&object);
        v14 = object;
        if (object && *(_QWORD *)a3)
        {
          v15 = WebKit::NetworkCache::Data::span((WebKit::NetworkCache::Data *)&object);
          v17 = v16;
          v18 = WebKit::NetworkCache::Data::span(a3);
          if ((const WTF::String *)v17 == v13 && !memcmp(v15, v18, v17))
          {
            if ((WTF::FileSystemImpl::hardLink((WTF::FileSystemImpl *)&v37, a2, v19) & 1) == 0)
            {
              WTF::String::utf8();
              WTF::String::utf8();
              WTFLogAlways();
              if (v33)
              {
                if (*(_DWORD *)v33 == 1)
                  WTF::fastFree(v33, v20);
                else
                  --*(_DWORD *)v33;
              }
              v32 = v38;
              v38 = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 1)
                  WTF::fastFree(v32, v20);
                else
                  --*(_DWORD *)v32;
              }
            }
            v21 = object;
            *(_QWORD *)a4 = object;
            if (v21)
            {
              os_retain(v21);
              v22 = object;
              *(_OWORD *)(a4 + 8) = v35;
              *(_BYTE *)(a4 + 24) = v36;
              result = *(double *)&v39;
              *(_OWORD *)(a4 + 32) = v39;
              *(_DWORD *)(a4 + 48) = v40;
              if (!v22)
                goto LABEL_20;
              goto LABEL_19;
            }
            goto LABEL_40;
          }
          v14 = object;
        }
        if (v14)
          os_release(v14);
      }
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v37, v13);
    }
    WebKit::NetworkCache::Data::mapToFile((WebKit::NetworkCache::Data *)&object, a3);
    if (!object)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
      *(_DWORD *)(a4 + 48) = 0;
LABEL_20:
      v24 = v37;
      v37 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v20);
        else
          *(_DWORD *)v24 -= 2;
      }
      return result;
    }
    if ((WTF::FileSystemImpl::hardLink((WTF::FileSystemImpl *)&v37, a2, v26) & 1) == 0)
    {
      WTF::String::utf8();
      WTF::String::utf8();
      WTFLogAlways();
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
          WTF::fastFree(v33, v20);
        else
          --*(_DWORD *)v33;
      }
      v31 = v38;
      v38 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
          WTF::fastFree(v31, v20);
        else
          --*(_DWORD *)v31;
      }
    }
    v27 = *((_QWORD *)&v35 + 1);
    v28 = (unint64_t *)((char *)this + 16);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + v27, v28));
    v30 = object;
    *(_QWORD *)a4 = object;
    if (v30)
    {
      os_retain(v30);
      *(_OWORD *)(a4 + 8) = v35;
      *(_BYTE *)(a4 + 24) = v36;
      *(_OWORD *)(a4 + 32) = v39;
      *(_DWORD *)(a4 + 48) = v40;
      v22 = v30;
LABEL_19:
      os_release(v22);
      goto LABEL_20;
    }
LABEL_40:
    *(_OWORD *)(a4 + 8) = v35;
    *(_BYTE *)(a4 + 24) = v36;
    result = *(double *)&v39;
    *(_OWORD *)(a4 + 32) = v39;
    *(_DWORD *)(a4 + 48) = v40;
    goto LABEL_20;
  }
  v25 = *(void **)a3;
  *(_QWORD *)a4 = *(_QWORD *)a3;
  if (v25)
    os_retain(v25);
  *(_OWORD *)(a4 + 8) = *(_OWORD *)((char *)a3 + 8);
  *(_BYTE *)(a4 + 24) = *((_BYTE *)a3 + 24);
  result = *(double *)&v39;
  *(_OWORD *)(a4 + 32) = v39;
  *(_DWORD *)(a4 + 48) = v40;
  return result;
}

void WebKit::NetworkCache::Data::mapToFile(WebKit::NetworkCache::Data *this, const WTF::String *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[2];
  unsigned int v7;

  v7 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34C4428;
  v4[1] = a2;
  v5 = v4;
  WTF::FileSystemImpl::mapToFile();
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  if (v6[0])
  {
    WebKit::NetworkCache::Data::adoptMap((uint64_t)v6, (int *)v7, (uint64_t)this);
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_BYTE *)this + 24) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)v6);
}

uint64_t WTF::Persistence::Coder<WebKit::NetworkCache::Key>::encodeForPersistence()
{
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence();
  return WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence();
}

uint64_t WTF::Persistence::Coder<WebKit::NetworkCache::SubresourceInfo>::encodeForPersistence(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;

  WTF::Persistence::Coder<WebKit::NetworkCache::Key>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::WallTime>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::WallTime>::encodeForPersistence();
  result = MEMORY[0x19AEAB26C](a1, a2[88]);
  if (!a2[88])
  {
    MEMORY[0x19AEAB26C](a1, a2[89]);
    MEMORY[0x19AEAB26C](a1, a2[90]);
    WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
    WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::encodeForPersistence();
    return WTF::Persistence::Encoder::operator<<();
  }
  return result;
}

uint64_t WTF::Persistence::Coder<WebKit::NetworkCache::SubresourceInfo>::decodeForPersistence@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v3;
  __int16 v5;
  __int128 v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  LOBYTE(v6) = 0;
  v7 = 0;
  WTF::Persistence::Decoder::operator>><WebKit::NetworkCache::Key,(void *)0>(a1, (uint64_t)&v6);
  if (v7)
  {
    WTF::Persistence::Coder<WTF::WallTime>::decodeForPersistence();
    if ((_BYTE)v3)
    {
      WTF::Persistence::Coder<WTF::WallTime>::decodeForPersistence();
      if ((_BYTE)v3)
      {
        v5 = 0;
        WTF::Persistence::Decoder::operator>>();
      }
    }
  }
  *a2 = 0;
  a2[176] = 0;
  return std::__optional_destruct_base<WebKit::NetworkCache::Key,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v6, v3);
}

uint64_t WebKit::NetworkCache::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::ResourceRequest *a4, uint64_t a5)
{
  WTF::WallTime *v9;
  uint64_t v10;
  const void *v11;
  WebCore::ResourceRequest *v12;
  uint64_t result;

  v9 = (WTF::WallTime *)WebKit::NetworkCache::Key::Key(a1, a2);
  WTF::WallTime::now(v9);
  *(_QWORD *)(a1 + 72) = v10;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 80), (const WebCore::ResourceResponseBase *)a3);
  v11 = *(const void **)(a3 + 240);
  *(_QWORD *)(a1 + 320) = v11;
  if (v11)
    CFRetain(v11);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a3 + 248);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 336, a5);
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 740) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_BYTE *)(a1 + 680) = 0;
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::reset[abi:sn180100]((WebCore::ResourceRequestBase *)(a1 + 352));
  v12 = WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 352));
  *(_BYTE *)(a1 + 552) = 1;
  result = WebCore::ResourceRequestBase::setAsIsolatedCopy(v12, a4);
  if (*(_BYTE *)(a1 + 552))
  {
    WebCore::ResourceRequestBase::setHTTPBody();
    return a1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

WebKit::NetworkCache::Entry *WebKit::NetworkCache::Entry::Entry(WebKit::NetworkCache::Entry *this, const WebKit::NetworkCache::Entry *a2)
{
  uint64_t v4;
  const void *v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  __int128 v9;
  void *v10;
  __int128 v11;
  __int128 v12;

  v4 = WebKit::NetworkCache::Key::Key((uint64_t)this, (uint64_t)a2);
  *(_QWORD *)(v4 + 72) = *((_QWORD *)a2 + 9);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v4 + 80), (const WebKit::NetworkCache::Entry *)((char *)a2 + 80));
  v5 = (const void *)*((_QWORD *)a2 + 40);
  *((_QWORD *)this + 40) = v5;
  if (v5)
    CFRetain(v5);
  *((_BYTE *)this + 328) = *((_BYTE *)a2 + 328);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 336, (uint64_t)a2 + 336);
  *((_BYTE *)this + 352) = 0;
  *((_BYTE *)this + 552) = 0;
  if (*((_BYTE *)a2 + 552))
  {
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)this + 44, (const WebKit::NetworkCache::Entry *)((char *)a2 + 352));
    *((_BYTE *)this + 552) = 1;
  }
  v6 = (unsigned int *)*((_QWORD *)a2 + 70);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *((_QWORD *)this + 70) = v6;
  *((_QWORD *)this + 71) = 0;
  WebKit::NetworkCache::Key::Key((uint64_t)this + 576, (uint64_t)a2 + 576);
  *((_QWORD *)this + 81) = *((_QWORD *)a2 + 81);
  v8 = (void *)*((_QWORD *)a2 + 82);
  *((_QWORD *)this + 82) = v8;
  if (v8)
    os_retain(v8);
  v9 = *(_OWORD *)((char *)a2 + 664);
  *((_BYTE *)this + 680) = *((_BYTE *)a2 + 680);
  *(_OWORD *)((char *)this + 664) = v9;
  v10 = (void *)*((_QWORD *)a2 + 86);
  *((_QWORD *)this + 86) = v10;
  if (v10)
    os_retain(v10);
  v11 = *(_OWORD *)((char *)a2 + 696);
  *((_BYTE *)this + 712) = *((_BYTE *)a2 + 712);
  *(_OWORD *)((char *)this + 696) = v11;
  v12 = *((_OWORD *)a2 + 45);
  *(_QWORD *)((char *)this + 733) = *(_QWORD *)((char *)a2 + 733);
  *((_OWORD *)this + 45) = v12;
  *((_BYTE *)this + 744) = 0;
  *((_BYTE *)this + 752) = 0;
  *((_BYTE *)this + 760) = 0;
  return this;
}

uint64_t WTF::Persistence::Decoder::operator>><std::optional<WebCore::ResourceRequest>,(void *)0>(uint64_t a1, WebCore::ResourceRequestBase *a2)
{
  _BYTE v5[200];
  char v6;
  __int16 v7;

  v7 = 0;
  WTF::Persistence::Decoder::operator>>();
  v5[0] = 0;
  v6 = 0;
  if (*((_BYTE *)a2 + 208))
  {
    std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100](a2);
    *((_BYTE *)a2 + 208) = 0;
    if (v6)
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v5);
  }
  return a1;
}

WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++(WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *this)
{
  uint64_t v2;
  UncommonHeader *v3;

  v2 = *((_QWORD *)this + 1);
  if (v2 == **(_QWORD **)this + 16 * *(unsigned int *)(*(_QWORD *)this + 12))
  {
    v3 = (UncommonHeader *)(*((_QWORD *)this + 2) + 16);
    *((_QWORD *)this + 2) = v3;
    goto LABEL_5;
  }
  *((_QWORD *)this + 1) = v2 + 16;
  if (!WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue((WTF::StringImpl **)this, (const CommonHeader *)(v2 + 16)))
  {
    v3 = (UncommonHeader *)*((_QWORD *)this + 2);
LABEL_5:
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue((WTF::StringImpl **)this, v3);
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34C40B8;
  WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,std::optional<WebKit::NavigatingToAppBoundDomain>::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0::~$_0(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(WTF *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34C40B8;
  WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,std::optional<WebKit::NavigatingToAppBoundDomain>::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0::~$_0((_QWORD *)a1 + 1);
  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::call(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    v4 = *a2 != 0;
    *(_QWORD *)(v2 + 72) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, (2 * v4));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

WebKit::NetworkCache::Entry **std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>::reset[abi:sn180100](WebKit::NetworkCache::Entry ***a1, WebKit::NetworkCache::Entry **a2)
{
  WebKit::NetworkCache::Entry **result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkCache::SpeculativeLoad::~SpeculativeLoad(result);
    return (WebKit::NetworkCache::Entry **)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t std::make_unique[abi:sn180100]<WebCore::LowPowerModeNotifier,WebKit::NetworkCache::Cache::Cache(WebKit::NetworkProcess &,WTF::String const&,WTF::Ref<WebKit::NetworkCache::Storage,WTF::RawPtrTraits<WebKit::NetworkCache::Storage>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::Storage>> &&,WTF::OptionSet<WebKit::NetworkCache::CacheOption>,PAL::SessionID)::$_0>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;

  v4 = WTF::fastMalloc((WTF *)0x10);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v6 = *a2;
  *v5 = off_1E34C40E0;
  v5[1] = v6;
  v8 = v5;
  WebCore::LowPowerModeNotifier::LowPowerModeNotifier();
  *a1 = v4;
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

WebKit::NetworkCache::SpeculativeLoadManager *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::Cache(WebKit::NetworkProcess &,WTF::String const&,WTF::Ref<WebKit::NetworkCache::Storage,WTF::RawPtrTraits<WebKit::NetworkCache::Storage>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::Storage>> &&,WTF::OptionSet<WebKit::NetworkCache::CacheOption>,PAL::SessionID)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v2;
  WebKit::NetworkCache::SpeculativeLoadManager **v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
    v3 = (WebKit::NetworkCache::SpeculativeLoadManager **)(v2 + 32);
    v4 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 8);
    v4 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = v2;
    *(_QWORD *)(v4 + 16) = v5;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_QWORD *)(v4 + 56) = 0;
    v3 = (WebKit::NetworkCache::SpeculativeLoadManager **)(v2 + 32);
  }
  return std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager>::reset[abi:sn180100](v3, (WTF::StringImpl *)v4);
}

WebKit::NetworkCache::SpeculativeLoadManager *std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager>::reset[abi:sn180100](WebKit::NetworkCache::SpeculativeLoadManager **a1, WTF::StringImpl *a2)
{
  WebKit::NetworkCache::SpeculativeLoadManager *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkCache::SpeculativeLoadManager::~SpeculativeLoadManager(result, a2);
    return (WebKit::NetworkCache::SpeculativeLoadManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebCore::LowPowerModeNotifier *std::unique_ptr<WebCore::LowPowerModeNotifier>::reset[abi:sn180100](WebCore::LowPowerModeNotifier **a1, WebCore::LowPowerModeNotifier *a2)
{
  WebCore::LowPowerModeNotifier *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::LowPowerModeNotifier::~LowPowerModeNotifier(result);
    return (WebCore::LowPowerModeNotifier *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      if (*(v4 - 3) != -1 && *v4)
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v4, a2);
      v4 += 6;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (a1[2] != (WTF::StringImpl *)-1)
        a1 = WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>::~KeyValuePair(a1, a2);
      a1 += 10;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

WTF::StringImpl **WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>::~KeyValuePair(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    std::default_delete<WebKit::NetworkCache::AsyncRevalidation>::operator()[abi:sn180100](v3);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return a1;
}

uint64_t std::default_delete<WebKit::NetworkCache::AsyncRevalidation>::operator()[abi:sn180100](WTF *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)a1 + 2) = off_1E34B3740;
  v3 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase((WTF *)((char *)a1 + 16));
  std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>::reset[abi:sn180100]((WebKit::NetworkCache::Entry ***)a1 + 1, 0);
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8) = 0;
    v5 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v4);
      }
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  return WTF::fastFree(a1, v4);
}

uint64_t WebKit::NetworkCache::isMediaMIMEType(WebKit::NetworkCache *this, const WTF::String *a2)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
  {
    if (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, (uint64_t)"video/", 6uLL))
    {
      return 1;
    }
    else
    {
      result = *(_QWORD *)this;
      if (*(_QWORD *)this)
        return WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(result, (uint64_t)"audio/", 6uLL);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(WebCore::SecurityOriginData *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  double v5;
  char v6;
  uint64_t v7;
  char v9;

  v3 = *((unsigned int *)this - 1);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int *)this;
    do
    {
      v5 = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v4);
      if ((v6 & 1) == 0)
      {
        v7 = v4[6];
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, unsigned int *, double))off_1E34C4098[v7])(&v9, v4, v5);
        v4[6] = -1;
      }
      v4 += 10;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WebCore::SecurityOriginData *)((char *)this - 16), a2);
}

uint64_t std::__optional_destruct_base<WebKit::NetworkCache::SubresourceInfo,false>::__optional_destruct_base[abi:sn180100]<WebKit::NetworkCache::SubresourceInfo>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  v10 = *(_OWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 87) = *(_DWORD *)((char *)a2 + 87);
  *(_OWORD *)(a1 + 72) = v10;
  WTF::URL::URL(a1 + 96, a2 + 12);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v11 = a2[17];
  a2[17] = 0;
  *(_QWORD *)(a1 + 136) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = 0;
  *(_DWORD *)(a1 + 144) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = 0;
  *(_DWORD *)(a1 + 148) = v11;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v12 = a2[19];
  a2[19] = 0;
  *(_QWORD *)(a1 + 152) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = 0;
  *(_DWORD *)(a1 + 160) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = 0;
  *(_DWORD *)(a1 + 164) = v12;
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  *(_BYTE *)(a1 + 176) = 1;
  return a1;
}

void WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo(WebKit::NetworkCache::SubresourceInfo *this)
{
  WTF::ASCIILiteral *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v2 = (WebKit::NetworkCache::SubresourceInfo *)((char *)this + 136);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebKit::NetworkCache::SubresourceInfo *)((char *)this + 152));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(v2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
}

uint64_t std::__optional_destruct_base<WebKit::NetworkCache::Key,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

void std::__optional_destruct_base<WebCore::ResourceRequest,false>::reset[abi:sn180100](WebCore::ResourceRequestBase *this)
{
  const void *v2;

  if (*((_BYTE *)this + 200))
  {
    v2 = (const void *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = 0;
    if (v2)
      CFRelease(v2);
    WebCore::ResourceRequestBase::~ResourceRequestBase(this);
    *((_BYTE *)this + 200) = 0;
  }
}

void std::__optional_storage_base<WebCore::ResourceRequest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ResourceRequest,false>>(WTF::StringImpl **this, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::RefCountedBase *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (*((unsigned __int8 *)this + 200) == *(unsigned __int8 *)(a2 + 200))
  {
    if (*((_BYTE *)this + 200))
    {
      WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)this, a2);
      WTF::String::operator=(this + 19, (WTF::StringImpl *)(a2 + 152));
      WTF::String::operator=(this + 20, (WTF::StringImpl *)(a2 + 160));
      v4 = *(WTF::StringImpl **)(a2 + 168);
      *(_QWORD *)(a2 + 168) = 0;
      v5 = this[21];
      this[21] = v4;
      if (v5)
        WTF::RefCounted<WebCore::FormData>::deref(v5);
      v6 = *(WTF::StringImpl **)(a2 + 176);
      *((_BYTE *)this + 184) = *(_BYTE *)(a2 + 184);
      this[22] = v6;
      v7 = *(WTF::StringImpl **)(a2 + 192);
      *(_QWORD *)(a2 + 192) = 0;
      v8 = this[24];
      this[24] = v7;
      if (v8)
        CFRelease(v8);
    }
  }
  else if (*((_BYTE *)this + 200))
  {
    std::__optional_destruct_base<WebCore::ResourceRequest,false>::reset[abi:sn180100]((WebCore::ResourceRequestBase *)this);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::ResourceRequest,WebCore::ResourceRequest,WebCore::ResourceRequest*>((uint64_t)this, a2);
    *((_BYTE *)this + 200) = 1;
  }
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ResourceRequest,WebCore::ResourceRequest,WebCore::ResourceRequest*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (result)
  {
    v3 = result;
    WTF::URL::URL(result, (uint64_t *)a2);
    WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
    *(_QWORD *)(v3 + 80) = *(_QWORD *)(a2 + 80);
    v5 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(v3 + 96) = 0;
    *(_QWORD *)(v3 + 104) = 0;
    *(_QWORD *)(v3 + 88) = v5;
    v6 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(v3 + 96) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(a2 + 104) = 0;
    *(_DWORD *)(v3 + 104) = v6;
    LODWORD(v6) = *(_DWORD *)(a2 + 108);
    *(_DWORD *)(a2 + 108) = 0;
    *(_DWORD *)(v3 + 108) = v6;
    *(_QWORD *)(v3 + 112) = 0;
    *(_QWORD *)(v3 + 120) = 0;
    v7 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(v3 + 112) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 120);
    *(_DWORD *)(a2 + 120) = 0;
    *(_DWORD *)(v3 + 120) = v7;
    LODWORD(v7) = *(_DWORD *)(a2 + 124);
    *(_DWORD *)(a2 + 124) = 0;
    *(_DWORD *)(v3 + 124) = v7;
    *(_QWORD *)(v3 + 128) = 0;
    *(_QWORD *)(v3 + 136) = 0;
    v8 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(v3 + 128) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a2 + 136) = 0;
    *(_DWORD *)(v3 + 136) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 140);
    *(_DWORD *)(a2 + 140) = 0;
    *(_DWORD *)(v3 + 140) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 144);
    *(_BYTE *)(v3 + 148) = *(_BYTE *)(a2 + 148);
    *(_DWORD *)(v3 + 144) = v8;
    v9 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(v3 + 152) = v9;
    v10 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(v3 + 160) = v10;
    v11 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(v3 + 168) = v11;
    v12 = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(v3 + 184) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(v3 + 176) = v12;
    v13 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(v3 + 192) = v13;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator(WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *this, const WebCore::HTTPHeaderMap *a2, const CommonHeader *a3, const UncommonHeader *a4)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 34) = 0;
  *((_QWORD *)this + 5) = 0;
  if (!WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue((WTF::StringImpl **)this, a3))
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue((WTF::StringImpl **)this, *((UncommonHeader **)this + 2));
  return this;
}

BOOL WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue(WTF::StringImpl **this, const CommonHeader *a2)
{
  const CommonHeader *v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  v3 = (const CommonHeader *)(*(_QWORD *)*this + 16 * *((unsigned int *)*this + 3));
  if (v3 != a2)
  {
    WebCore::httpHeaderNameString();
    if (v5)
    {
      v5 = (WTF::StringImpl *)((char *)v5 - 1);
      if (v5)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v6 = v9;
      }
      else
      {
        v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = this[3];
    this[3] = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    *((_WORD *)this + 16) = *(_WORD *)a2;
    *((_BYTE *)this + 34) = 1;
    WTF::String::operator=(this + 5, (WTF::StringImpl *)((char *)a2 + 8));
  }
  return v3 != a2;
}

BOOL WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::updateKeyValue(WTF::StringImpl **this, UncommonHeader *a2)
{
  const UncommonHeader *v3;

  v3 = (const UncommonHeader *)(*((_QWORD *)*this + 2) + 16 * *((unsigned int *)*this + 7));
  if (v3 != a2)
  {
    WTF::String::operator=(this + 3, (WTF::StringImpl *)a2);
    if (*((_BYTE *)this + 34))
      *((_BYTE *)this + 34) = 0;
    WTF::String::operator=(this + 5, (WTF::StringImpl *)((char *)a2 + 8));
  }
  return v3 != a2;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebSharedWorkerServerToContextConnection::*&)(void),WebKit::WebSharedWorkerServerToContextConnection*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerServerToContextConnection::launchSharedWorker(WebKit::WebSharedWorker &)::$_1,void,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier> const&>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E34C4180;
  v9 = v7;
  WebKit::WebSharedWorkerServerToContextConnection::postConnectEvent(v5, v6, a4, (uint64_t *)&v9);
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSharedWorkerContextManagerConnection::PostConnectEvent,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C41A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSharedWorkerContextManagerConnection::PostConnectEvent,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C41A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSharedWorkerContextManagerConnection::PostConnectEvent,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (_QWORD *)(v19 + 16 * v26);
          v30 = v28 + 1;
          v29 = v28[1];
          if (v29)
          {
            WTF::fastFree((WTF *)(v29 - 16), v10);
            v17 = *v16;
          }
          *v28 = v17;
          v31 = v6 + 16 * v13;
          *v30 = 0;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          *v30 = v32;
          v33 = *(_QWORD *)(v31 + 8);
          if (v33)
            WTF::fastFree((WTF *)(v33 - 16), v10);
          if (v16 == a3)
            v14 = v28;
        }
        else
        {
          v18 = *(_QWORD *)(v6 + 16 * v13 + 8);
          if (v18)
            WTF::fastFree((WTF *)(v18 - 16), v10);
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  __int16 v17;
  char v18;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = v4 + 16 * i;
      if (*(_QWORD *)(v10 + 8) != -1 && *(_OWORD *)v10 != 0)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v16 = -1640531527;
        v17 = 0;
        v18 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v16, (_QWORD *)(v4 + 16 * i));
        v13 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v16);
        v14 = 0;
        do
        {
          v15 = v13 & v12;
          v13 = ++v14 + v15;
        }
        while (*(_OWORD *)(v11 + 16 * v15) != 0);
        *(_OWORD *)(v11 + 16 * v15) = *(_OWORD *)v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

char *IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = **(_QWORD **)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = **(_QWORD **)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NetworkCache::AsyncRevalidation::*&)(void),WebKit::NetworkCache::AsyncRevalidation*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WebKit::NetworkCache::Storage *WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  WebKit::NetworkCache::Storage *result;
  WTF *v3;
  void *v4;

  result = *(WebKit::NetworkCache::Storage **)(a1 + 8);
  if (result)
  {
    WebKit::NetworkCache::Storage::~Storage(result, a2);
    return (WebKit::NetworkCache::Storage *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    v8 = a2;
    v9 = (_QWORD *)(result + 88);
    do
    {
      *(_OWORD *)(v9 - 7) = 0uLL;
      *(_OWORD *)(v9 - 9) = 0uLL;
      *v9 = 0;
      v9 += 10;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    do
    {
      v12 = (uint64_t *)(v3 + 80 * v10);
      v13 = v12[2];
      if (v13 != -1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = *((_DWORD *)v12 + 8);
          do
          {
            v18 = v17 & v15;
            v19 = v14 + 80 * (v17 & v15);
            v17 = ++v16 + (v17 & v15);
          }
          while (*(_QWORD *)(v19 + 16));
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>::~KeyValuePair((WTF::StringImpl **)(v14 + 80 * v18), v7);
          v20 = *v12;
          *v12 = 0;
          *(_QWORD *)v19 = v20;
          v21 = v12[1];
          v12[1] = 0;
          *(_QWORD *)(v19 + 8) = v21;
          v22 = v12[2];
          v12[2] = 0;
          *(_QWORD *)(v19 + 16) = v22;
          v23 = v12[3];
          v12[3] = 0;
          *(_QWORD *)(v19 + 24) = v23;
          v24 = *((_OWORD *)v12 + 2);
          v25 = *((_OWORD *)v12 + 3);
          *(_QWORD *)(v19 + 64) = v12[8];
          *(_OWORD *)(v19 + 32) = v24;
          *(_OWORD *)(v19 + 48) = v25;
          v26 = v3 + 80 * v10;
          v27 = *(_QWORD *)(v26 + 72);
          *(_QWORD *)(v26 + 72) = 0;
          *(_QWORD *)(v14 + 80 * v18 + 72) = v27;
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>::~KeyValuePair((WTF::StringImpl **)v26, v28);
        }
        else
        {
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>::~KeyValuePair((WTF::StringImpl **)(v3 + 80 * v10), v7);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v3)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v3 - 16), v7);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  unsigned int v34;
  __int16 v35;
  char v36;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 48 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = v4 + 48 * v11;
      v8 = (_QWORD *)(v14 + 8);
      v15 = *(_QWORD *)(v14 + 8);
      if (v15 != -1)
      {
        if (v15 || *(_OWORD *)(v14 + 16) != 0)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v34 = -1640531527;
          v35 = 0;
          v36 = 0;
          WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v34, v8, (_QWORD *)(v14 + 16));
          v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v34);
          for (i = 0; ; v19 = i + v21)
          {
            v21 = v19 & v18;
            v22 = v17 + 48 * (v19 & v18);
            if (!*(_QWORD *)(v22 + 8) && *(_OWORD *)(v22 + 16) == 0)
              break;
            ++i;
          }
          v23 = v17 + 48 * v21;
          v26 = *(_QWORD *)(v23 + 32);
          v25 = (_QWORD *)(v23 + 32);
          v24 = v26;
          if (v26)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v24, v8);
          v27 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)v22 = *(_OWORD *)v14;
          *(_OWORD *)(v22 + 16) = v27;
          v28 = v4 + 48 * v11;
          *v25 = 0;
          v29 = *(_QWORD *)(v28 + 32);
          *(_QWORD *)(v28 + 32) = 0;
          *v25 = v29;
          *(_QWORD *)(v17 + 48 * v21 + 40) = *(_QWORD *)(v28 + 40);
          v30 = *(_QWORD *)(v28 + 32);
          if (v30)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v30, v8);
          if (v14 == a3)
            v12 = v17 + 48 * v21;
        }
        else
        {
          v16 = *(_QWORD *)(v4 + 48 * v11 + 32);
          if (v16)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v16, v8);
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

unsigned int *WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(unsigned int *result, _QWORD *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  int v14;

  v3 = *result + (unsigned __int16)*a2;
  v4 = (*a2 >> 5) & 0x7FFF800 ^ (v3 << 16) ^ v3;
  v5 = v4 + (unsigned __int16)WORD2(*a2) + (v4 >> 11);
  v6 = (*a2 >> 37) & 0x7FFF800 ^ (v5 << 16) ^ v5;
  v7 = v6 + (unsigned __int16)*a3 + (v6 >> 11);
  v8 = (*a3 >> 5) & 0x7FFF800 ^ (v7 << 16) ^ v7;
  v9 = v8 + (unsigned __int16)WORD2(*a3) + (v8 >> 11);
  v10 = (*a3 >> 37) & 0x7FFF800 ^ (v9 << 16) ^ v9;
  v11 = v10 + (v10 >> 11);
  *result = v11;
  v12 = a3[1];
  v13 = (v12 >> 5) & 0x7FFF800 ^ ((v11 + (unsigned __int16)v12) << 16) ^ (v11 + (unsigned __int16)v12);
  v14 = v13 + WORD2(v12) + (v13 >> 11);
  LODWORD(v12) = (v12 >> 37) & 0x7FFF800 ^ (v14 << 16);
  *result = (v12 ^ v14) + ((v12 ^ v14) >> 11);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12NetworkCache5Cache30startAsyncRevalidationIfNeededERKN7WebCore15ResourceRequestERKNS3_3KeyEONSt3__110unique_ptrINS3_5EntryENSC_14default_deleteISE_EEEERKNS3_13GlobalFrameIDENSC_8optionalINS2_26NavigatingToAppBoundDomainEEEbNS_9OptionSetINS5_26AdvancedPrivacyProtectionsEEEENK3__0clEvEUlT_E_vJNS3_17AsyncRevalidation6ResultEEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E34C41F8;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12NetworkCache5Cache30startAsyncRevalidationIfNeededERKN7WebCore15ResourceRequestERKNS3_3KeyEONSt3__110unique_ptrINS3_5EntryENSC_14default_deleteISE_EEEERKNS3_13GlobalFrameIDENSC_8optionalINS2_26NavigatingToAppBoundDomainEEEbNS_9OptionSetINS5_26AdvancedPrivacyProtectionsEEEENK3__0clEvEUlT_E_vJNS3_17AsyncRevalidation6ResultEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E34C41F8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12NetworkCache5Cache30startAsyncRevalidationIfNeededERKN7WebCore15ResourceRequestERKNS3_3KeyEONSt3__110unique_ptrINS3_5EntryENSC_14default_deleteISE_EEEERKNS3_13GlobalFrameIDENSC_8optionalINS2_26NavigatingToAppBoundDomainEEEbNS_9OptionSetINS5_26AdvancedPrivacyProtectionsEEEENK3__0clEvEUlT_E_vJNS3_17AsyncRevalidation6ResultEEE4callESW_(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v3 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(v3 + 40);
  v4 = (uint64_t *)(v3 + 40);
  v5 = v6;
  if (v6)
  {
    v7 = 0;
    v8 = result + 16;
    v9 = *(_DWORD *)(v5 - 8);
    for (i = *(_DWORD *)(result + 48); ; i = v7 + v11)
    {
      v11 = i & v9;
      v12 = v5 + 80 * (i & v9);
      v13 = *(_QWORD *)(v12 + 16);
      if (v13 != -1)
      {
        if (!v13)
        {
          v14 = *v4;
          if (!*v4)
            return result;
          v12 = v14 + 80 * *(unsigned int *)(v14 - 4);
          goto LABEL_10;
        }
        result = WebKit::NetworkCache::Key::operator==(v5 + 80 * v11, v8, a3);
        if ((result & 1) != 0)
          break;
      }
      ++v7;
    }
    v14 = *v4;
    if (!*v4)
      goto LABEL_11;
LABEL_10:
    v14 += 80 * *(unsigned int *)(v14 - 4);
    if (v14 == v12)
      return result;
LABEL_11:
    if (v14 != v12)
    {
      WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebKit::NetworkCache::Key>,WebKit::NetworkCache::Key>((WTF::StringImpl **)v12, a2);
      result = *(_QWORD *)(v12 + 72);
      *(_QWORD *)(v12 + 72) = 0;
      if (result)
        result = std::default_delete<WebKit::NetworkCache::AsyncRevalidation>::operator()[abi:sn180100]((WTF *)result);
      ++*(_DWORD *)(*v4 - 16);
      v15 = *v4;
      if (*v4)
        v16 = *(_DWORD *)(v15 - 12) - 1;
      else
        v16 = -1;
      *(_DWORD *)(v15 - 12) = v16;
      v17 = *v4;
      if (*v4)
      {
        v18 = 6 * *(_DWORD *)(v17 - 12);
        v19 = *(_DWORD *)(v17 - 4);
        if (v18 < v19 && v19 >= 9)
          return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::AsyncRevalidation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(v4, v19 >> 1);
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebKit::NetworkCache::Key>,WebKit::NetworkCache::Key>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *a1;
  *a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = (WTF::StringImpl *)-1;
  a1[3] = 0;
  return result;
}

uint64_t WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  if (*a1)
  {
    v3 = *a1 + 48 * *(unsigned int *)(*a1 - 4);
    if ((_QWORD *)v3 != a2)
      goto LABEL_4;
    return 0;
  }
  if (!a2)
    return 0;
  v3 = 0;
LABEL_4:
  if ((_QWORD *)v3 != a2)
  {
    a2[1] = -1;
    v4 = a2[4];
    if (v4)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, a2);
    ++*(_DWORD *)(*a1 - 16);
    v5 = *a1;
    if (*a1)
      v6 = *(_DWORD *)(v5 - 12) - 1;
    else
      v6 = -1;
    *(_DWORD *)(v5 - 12) = v6;
    v7 = *a1;
    if (*a1)
    {
      v8 = 6 * *(_DWORD *)(v7 - 12);
      v9 = *(_DWORD *)(v7 - 4);
      if (v8 < v9 && v9 >= 9)
        WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::rehash(a1, v9 >> 1, 0);
    }
  }
  return 1;
}

_QWORD *WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::WeakHashSet<WebKit::NetworkCache::AsyncRevalidation,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  int i;
  int v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int v11;
  __int16 v12;
  char v13;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v11 = -1640531527;
  v12 = 0;
  v13 = 0;
  WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v11, a2 + 1, a2 + 2);
  v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v11);
  for (i = 0; ; v5 = i + v7)
  {
    v7 = v5 & v4;
    result = (_QWORD *)(v2 + 48 * (v5 & v4));
    v9 = result[1];
    if (v9 == a2[1] && result[2] == a2[2] && result[3] == a2[3])
      break;
    if (!v9 && *((_OWORD *)result + 1) == 0)
      return 0;
    ++i;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34C4220;
  v2 = a1[27];
  a1[27] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[26];
  a1[26] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = v4 + 30;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = off_1E34C4220;
  v2 = a1[27];
  a1[27] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[26];
  a1[26] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    v6 = v5 + 30;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return WTF::fastFree((WTF *)a1, v4);
}

WebKit::NetworkCache::Entry *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::call(uint64_t a1, WebKit::NetworkCache::Entry **a2)
{
  WebKit::NetworkCache::Entry *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebKit::NetworkCache::Entry *result;
  WTF *v8;
  void *v9;
  WTF *v10;
  void *v11;
  WebKit::NetworkCache::Entry *v12;
  WebKit::NetworkCache::Entry *v13;
  uint64_t v14;

  v3 = *a2;
  *a2 = 0;
  v4 = a1 + 224;
  *(_BYTE *)(a1 + 328) = 1;
  if (v3
    && (v5 = *(_QWORD *)(a1 + 8),
        v14 = *(_QWORD *)(a1 + 336),
        WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 216), &v14), WebCore::verifyVaryingRequestHeaders()))
  {
    v13 = v3;
    WebKit::NetworkCache::Cache::completeRetrieve((WTF::MonotonicTime *)(a1 + 216), &v13, v4);
    result = v13;
    if (!v13)
      return result;
    v3 = 0;
  }
  else
  {
    v12 = 0;
    WebKit::NetworkCache::Cache::completeRetrieve((WTF::MonotonicTime *)(a1 + 216), &v12, v4);
    result = v12;
    if (!v12)
      goto LABEL_7;
  }
  WebKit::NetworkCache::Entry::~Entry(result, v6);
  result = (WebKit::NetworkCache::Entry *)WTF::fastFree(v8, v9);
LABEL_7:
  if (v3)
  {
    WebKit::NetworkCache::Entry::~Entry(v3, v6);
    return (WebKit::NetworkCache::Entry *)WTF::fastFree(v10, v11);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::Timings const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34C4248;
  WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::~$_1(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::Timings const&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C4248;
  WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::~$_1((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

BOOL WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Cache::retrieve(WebCore::ResourceRequest const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::Cache::RetrieveInfo const&)> &&)::$_1::Timings const&>::call(_QWORD *a1, WebKit::NetworkCache::Entry **a2, void *__src)
{
  WebKit::NetworkCache::Entry *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;
  _BOOL8 v13;
  WTF::StringImpl *v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v20;
  uint64_t v21;
  WebCore *v22;
  const WebCore::HTTPHeaderMap *v23;
  WTF::StringImpl *v24;
  double v25;
  double v26;
  double v27;
  WTF *v28;
  void *v29;
  WebKit::NetworkCache::Entry *v30;
  uint64_t v31;
  WebKit::NetworkCache::Entry *v32;
  WTF::StringImpl *v33[2];
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  *a2 = 0;
  v5 = (uint64_t)(a1 + 29);
  memmove(a1 + 32, __src, 0x4BuLL);
  if (v4)
  {
    WebKit::NetworkCache::Entry::decodeStorageRecord(v4, &v31);
    v6 = v31;
    if (!v31)
    {
      v9 = 5;
      goto LABEL_10;
    }
    v7 = a1[52];
    v8 = (WTF::StringImpl *)a1[53];
    if (WebCore::ResourceRequestBase::isConditional((WebCore::ResourceRequestBase *)(a1 + 3))
      && !*(_BYTE *)(v6 + 552))
    {
LABEL_5:
      *(_WORD *)(v6 + 312) = *(_WORD *)(v6 + 312) & 0xC3FF | 0xC00;
      v9 = 1;
LABEL_10:
      v30 = (WebKit::NetworkCache::Entry *)v6;
      WebKit::NetworkCache::Cache::completeRetrieve((WTF::MonotonicTime *)(a1 + 28), &v30, v5);
      if (v30)
      {
        WebKit::NetworkCache::Entry::~Entry(v30, v14);
        WTF::fastFree(v15, v16);
      }
      v13 = v9 != 5;
      WebKit::NetworkCache::Storage::Record::~Record(v4, v14);
      WTF::fastFree(v17, v18);
      return v13;
    }
    v33[0] = v8;
    WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 216), v33);
    if (WebCore::verifyVaryingRequestHeaders())
    {
      if ((WebCore::ResourceRequestBase::cachePolicy((WebCore::ResourceRequestBase *)(a1 + 3)) & 0xFE) == 2)
        goto LABEL_31;
      v21 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 3));
      if ((*(_BYTE *)(v21 + 8) & 1) != 0
        && *(_QWORD *)v21
        && *(_DWORD *)(*(_QWORD *)v21 + 4) > *(_DWORD *)(v21 + 36)
        && *(_BYTE *)(v6 + 552))
      {
        v9 = 7;
        goto LABEL_30;
      }
      v33[0] = v8;
      WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 208), v33);
      v22 = (WebCore *)WebCore::ResourceRequestBase::httpHeaderFields((WebCore::ResourceRequestBase *)(a1 + 3));
      WebCore::parseCacheControlDirectives(v22, v23);
      if ((v34 & 1) == 0 && *(double *)v33 != 0.0)
      {
        v24 = v33[1];
        if ((WebCore::ResourceResponseBase::cacheControlContainsNoCache((WebCore::ResourceResponseBase *)(v6 + 80)) & 1) == 0)
        {
          WebCore::computeCurrentAge();
          v26 = v25;
          WebCore::computeFreshnessLifetimeForHTTPFamily();
          if (v26 - v27 <= *(double *)&v24)
          {
LABEL_31:
            v9 = 0;
            goto LABEL_10;
          }
        }
      }
      if (WebCore::ResourceResponseBase::hasCacheValidatorFields((WebCore::ResourceResponseBase *)(v6 + 80)))
      {
        if (!*(_BYTE *)(v6 + 552))
          goto LABEL_5;
        v9 = 6;
      }
      else
      {
        v9 = 4;
      }
    }
    else
    {
      v9 = 3;
    }
LABEL_30:
    WebKit::NetworkCache::Entry::~Entry((WebKit::NetworkCache::Entry *)v6, v20);
    WTF::fastFree(v28, v29);
    v6 = 0;
    goto LABEL_10;
  }
  v32 = 0;
  WebKit::NetworkCache::Cache::completeRetrieve((WTF::MonotonicTime *)(a1 + 28), &v32, v5);
  if (v32)
  {
    WebKit::NetworkCache::Entry::~Entry(v32, v10);
    WTF::fastFree(v11, v12);
  }
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::store(WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebKit::PrivateRelayed,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::Function<void ()(WebKit::NetworkCache::MappedBody &&)> &&)::$_0,void,WebKit::NetworkCache::Data const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::NetworkCache::Cache *v4;

  *a1 = &off_1E34C4270;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebKit::NetworkCache::Cache *)a1[1];
  a1[1] = 0;
  if (v4)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::store(WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebKit::PrivateRelayed,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::Function<void ()(WebKit::NetworkCache::MappedBody &&)> &&)::$_0,void,WebKit::NetworkCache::Data const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::NetworkCache::Cache *v4;

  *(_QWORD *)this = &off_1E34C4270;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebKit::NetworkCache::Cache *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v4, a2);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::store(WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebKit::PrivateRelayed,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::Function<void ()(WebKit::NetworkCache::MappedBody &&)> &&)::$_0,void,WebKit::NetworkCache::Data const&>::call(uint64_t a1, WebKit::NetworkCache::Data *this)
{
  WebCore::ShareableResource *v3;
  unsigned int *v4;
  unsigned int *v5;
  __int128 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *result;
  WebCore::ShareableResource *v12;
  __int128 v13;
  char v14;
  unsigned int *v15;
  unsigned int *v16;
  WebCore::ShareableResource *v17;
  _BYTE v18[8];
  __int128 v19;
  char v20;

  v17 = 0;
  v18[0] = 0;
  v20 = 0;
  WebKit::NetworkCache::Data::tryCreateSharedMemory(this, &v16);
  if (!v16)
  {
LABEL_16:
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      (*(void (**)(uint64_t, WebCore::ShareableResource **))(*(_QWORD *)v10 + 16))(v10, &v17);
    goto LABEL_18;
  }
  v15 = v16;
  v16 = 0;
  WebCore::ShareableResource::create();
  v3 = v12;
  v12 = 0;
  v4 = (unsigned int *)v17;
  v17 = v3;
  if (v4)
  {
    WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(v4);
    v12 = 0;
  }
  v5 = v15;
  v15 = 0;
  WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v5);
  if (v17)
  {
    WebCore::ShareableResource::createHandle(v17);
    if (v14)
    {
      if (v20)
      {
        WTF::MachSendRight::operator=();
        v6 = v13;
      }
      else
      {
        WTF::MachSendRight::MachSendRight();
        v6 = v13;
        v20 = 1;
      }
      v19 = v6;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v12);
    }
    v9 = v16;
    v16 = 0;
    if (v9)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v9);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
    (*(void (**)(uint64_t, WebCore::ShareableResource **))(*(_QWORD *)v7 + 16))(v7, &v17);
  v8 = v16;
  v16 = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
LABEL_18:
  if (v20)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v18);
  result = (unsigned int *)v17;
  v17 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::ShareableResource,(WTF::DestructionThread)0>::deref(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C4298;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C4298;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_1,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_1::RecordInfo const&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::NetworkCache::Cache *v4;

  *a1 = &off_1E34C42C0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebKit::NetworkCache::Cache *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_1,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_1::RecordInfo const&>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::NetworkCache::Cache *v4;

  *(_QWORD *)this = &off_1E34C42C0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebKit::NetworkCache::Cache *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v4, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_1,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Cache::traverse(WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_1::RecordInfo const&>::call(uint64_t a1, WebKit::NetworkCache::Entry *this, uint64_t a3)
{
  WebKit::NetworkCache::Entry *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  void *v8;
  _QWORD v9[2];
  WebKit::NetworkCache::Entry *v10;

  if (this)
  {
    WebKit::NetworkCache::Entry::decodeStorageRecord(this, &v10);
    v5 = v10;
    if (v10)
    {
      v9[0] = v10;
      v9[1] = a3;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v9);
      WebKit::NetworkCache::Entry::~Entry(v5, v6);
      WTF::fastFree(v7, v8);
    }
  }
  else
  {
    --*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::String const&,WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Cache::traverse(WTF::String const&,WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0::RecordInfo const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C42E8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::String const&,WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Cache::traverse(WTF::String const&,WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0::RecordInfo const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C42E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::traverse(WTF::String const&,WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Cache::traverse(WTF::String const&,WTF::Function<void ()(WebKit::NetworkCache::Cache::TraversalEntry const*)> &&)::$_0::RecordInfo const&>::call(uint64_t a1, WebKit::NetworkCache::Entry *this, uint64_t a3)
{
  WebKit::NetworkCache::Entry *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  void *v8;
  _QWORD v9[2];
  WebKit::NetworkCache::Entry *v10;

  if (this)
  {
    WebKit::NetworkCache::Entry::decodeStorageRecord(this, &v10);
    v5 = v10;
    if (v10)
    {
      v9[0] = v10;
      v9[1] = a3;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v9);
      WebKit::NetworkCache::Entry::~Entry(v5, v6);
      WTF::fastFree(v7, v8);
    }
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  }
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::dumpContentsToFile(void)::$_0,void,WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&>::call(uint64_t a1, WebKit::NetworkCache::Entry *this, uint64_t a3)
{
  WTF::FileSystemImpl *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  int v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  char *v33;
  int v34;
  char *v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _WORD *v58;
  unsigned int v59;
  uint64_t i;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  int8x16_t *v65;
  __int128 v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  char *v70;
  char *v71;
  char *v72;
  int *v73;
  void *v74;
  WTF *v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  int8x16_t *v93;
  __int128 v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  char *v98;
  char *v99;
  char *v100;
  __int16 v101;
  uint64_t j;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  _BYTE *v106;
  const WTF::String *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  uint64_t k;
  uint64_t v116;
  unsigned int v117;
  _WORD *v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  char v129;
  BOOL v130;
  const char *v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  void *v138;
  WTF *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  int v146;
  char v147;
  uint64_t v148;
  WTF::StringImpl *v149[2];
  char __s[16];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _BYTE v158[32];
  WTF::StringImpl *v159[2];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _BYTE __src[32];
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  int8x16x2_t v173;
  int8x16x2_t v174;
  int8x16x2_t v175;
  int8x16x2_t v176;
  int8x16x2_t v177;
  int8x16x2_t v178;

  v172 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::FileSystemImpl *)(a1 + 8);
  if (this)
  {
    WebKit::NetworkCache::Entry::decodeStorageRecord(this, &v148);
    v6 = v148;
    if (!v148)
      return;
    ++*(_DWORD *)(a1 + 16);
    *(double *)(a1 + 24) = *(double *)(a3 + 8) + *(double *)(a1 + 24);
    *(_QWORD *)(a1 + 32) += *(_QWORD *)a3;
    v144 = 0;
    v145 = 0;
    v146 = 0;
    v147 = 1;
    WTF::StringBuilder::append();
    WebKit::NetworkCache::Key::hashAsString(v6 + 32, (WTF::StringImpl **)__src);
    WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v144, (const WTF::String *)__src);
    v8 = *(WTF::StringImpl **)__src;
    *(_QWORD *)__src = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v41 = *(_QWORD *)a3;
    WTF::numberToString();
    v42 = strlen(__s);
    v43 = 0;
    HIDWORD(v157) = v42;
    v44 = v41;
    do
    {
      ++v43;
      v15 = v44 > 9;
      v44 /= 0xAuLL;
    }
    while (v15);
    if (v42 >= 0xFFFFFFE5)
      v45 = -27;
    else
      v45 = v42;
    v46 = v45 + v43;
    v47 = v46 + 26;
    v48 = v46 + 40;
    v49 = v47 < v43 || v47 >= 0xFFFFFFF2;
    if (v49)
      v50 = -1;
    else
      v50 = v48;
    v49 = __CFADD__(v50, v146);
    v51 = v50 + v146;
    if (v49)
      v52 = 0xFFFFFFFFLL;
    else
      v52 = v51;
    v53 = v145;
    if ((v145 || (v53 = v144) != 0) && (*((_BYTE *)v53 + 16) & 4) == 0)
    {
      v54 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v144);
      if (v54)
      {
        v55 = 0;
        v161 = v154;
        v162 = v155;
        v163 = v156;
        v164 = v157;
        *(_OWORD *)v158 = *(_OWORD *)__s;
        *(_OWORD *)&v158[16] = v151;
        *(_OWORD *)v159 = v152;
        v160 = v153;
        do
        {
          *(_WORD *)(v54 + 2 * v55) = aBodysize[v55];
          ++v55;
        }
        while (v55 != 14);
        v56 = 0;
        v57 = v41;
        do
        {
          __src[v56-- + 24] = (v57 % 0xA) | 0x30;
          v15 = v57 > 9;
          v57 /= 0xAuLL;
        }
        while (v15);
        if (v56 + 26 <= 25)
        {
          v58 = (_WORD *)(v54 + 28);
          do
          {
            *v58++ = __src[v56 + 25];
            v49 = __CFADD__(v56++, 1);
          }
          while (!v49);
        }
        v59 = 0;
        do
        {
          ++v59;
          v15 = v41 > 9;
          v41 /= 0xAuLL;
        }
        while (v15);
        for (i = 0; i != 11; ++i)
          *(_WORD *)(v54 + 2 * v59 + 28 + 2 * i) = aWorth[i];
        v61 = (char *)(v54 + 28 + 2 * v59 + 22);
        v168 = v161;
        v169 = v162;
        v170 = v163;
        v171 = v164;
        *(_OWORD *)__src = *(_OWORD *)v158;
        *(_OWORD *)&__src[16] = *(_OWORD *)&v158[16];
        v166 = *(_OWORD *)v159;
        v167 = v160;
        v62 = HIDWORD(v164);
        v63 = &v61[2 * HIDWORD(v164)];
        if (HIDWORD(v164) < 0x40)
        {
          v65 = (int8x16_t *)__src;
        }
        else
        {
          v64 = &v61[2 * (HIDWORD(v164) & 0xFFFFFFC0)];
          v65 = (int8x16_t *)__src;
          v66 = 0uLL;
          do
          {
            v173.val[0] = *v65;
            v67 = v65[1];
            v175.val[0] = v65[2];
            v68 = v65[3];
            v65 += 4;
            v69 = v68;
            v175.val[1] = 0uLL;
            v177.val[0] = v67;
            v173.val[1] = 0uLL;
            v70 = v61;
            vst2q_s8(v70, v173);
            v70 += 32;
            v177.val[1] = 0uLL;
            vst2q_s8(v70, v177);
            v71 = v61 + 64;
            vst2q_s8(v71, v175);
            v72 = v61 + 96;
            vst2q_s8(v72, *(int8x16x2_t *)(&v66 - 1));
            v61 += 128;
          }
          while (v61 != v64);
          v61 = v64;
        }
        while (v61 != v63)
        {
          v76 = v65->u8[0];
          v65 = (int8x16_t *)((char *)v65 + 1);
          *(_WORD *)v61 = v76;
          v61 += 2;
        }
        v77 = 0;
        v78 = v54 + 2 * v62 + 2 * v59 + 50;
        do
        {
          *(_WORD *)(v78 + 2 * v77) = aPartition[v77];
          ++v77;
        }
        while (v77 != 15);
      }
    }
    else
    {
      v79 = MEMORY[0x19AEAB398](&v144, v52);
      if (v79)
      {
        v80 = 0;
        v161 = v154;
        v162 = v155;
        v163 = v156;
        v164 = v157;
        *(_OWORD *)v158 = *(_OWORD *)__s;
        *(_OWORD *)&v158[16] = v151;
        *(_OWORD *)v159 = v152;
        v160 = v153;
        qmemcpy((void *)v79, ",\n\"bodySize\": ", 14);
        v81 = v41;
        do
        {
          __src[v80-- + 24] = (v81 % 0xA) | 0x30;
          v15 = v81 > 9;
          v81 /= 0xAuLL;
        }
        while (v15);
        v82 = v79 + 14;
        if (v80 + 26 <= 25)
          memcpy((void *)(v79 + 14), &__src[v80 + 25], -v80);
        v83 = 0;
        do
        {
          ++v83;
          v15 = v41 > 9;
          v41 /= 0xAuLL;
        }
        while (v15);
        v84 = v82 + v83;
        *(_QWORD *)v84 = *(_QWORD *)",\n\"worth\": ";
        *(_DWORD *)(v84 + 7) = 540680808;
        v85 = (_BYTE *)(v84 + 11);
        v168 = v161;
        v169 = v162;
        v170 = v163;
        v171 = v164;
        *(_OWORD *)__src = *(_OWORD *)v158;
        *(_OWORD *)&__src[16] = *(_OWORD *)&v158[16];
        v166 = *(_OWORD *)v159;
        v167 = v160;
        v86 = HIDWORD(v164);
        if (HIDWORD(v164))
        {
          if (HIDWORD(v164) == 1)
            *v85 = __src[0];
          else
            memcpy((void *)(v84 + 11), __src, HIDWORD(v171));
        }
        qmemcpy(&v85[v86], ",\n\"partition\": ", 15);
      }
    }
    WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v144, (const WTF::String *)v6);
    WTF::numberToString();
    HIDWORD(v157) = strlen(__s);
    v87 = v145;
    if ((v145 || (v87 = v144) != 0) && (*((_BYTE *)v87 + 16) & 4) == 0)
    {
      v88 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v144);
      if (v88)
      {
        v89 = 0;
        v161 = v154;
        v162 = v155;
        v163 = v156;
        v164 = v157;
        *(_OWORD *)v158 = *(_OWORD *)__s;
        *(_OWORD *)&v158[16] = v151;
        *(_OWORD *)v159 = v152;
        v160 = v153;
        do
        {
          *(_WORD *)(v88 + 2 * v89) = aTimestamp_0[v89];
          ++v89;
        }
        while (v89 != 15);
        v90 = (char *)(v88 + 30);
        v168 = v161;
        v169 = v162;
        v170 = v163;
        v171 = v164;
        *(_OWORD *)__src = *(_OWORD *)v158;
        *(_OWORD *)&__src[16] = *(_OWORD *)&v158[16];
        v166 = *(_OWORD *)v159;
        v167 = v160;
        v91 = v88 + 30 + 2 * HIDWORD(v164);
        if (HIDWORD(v164) < 0x40)
        {
          v93 = (int8x16_t *)__src;
        }
        else
        {
          v92 = &v90[2 * (HIDWORD(v164) & 0xFFFFFFC0)];
          v93 = (int8x16_t *)__src;
          v94 = 0uLL;
          do
          {
            v174.val[0] = *v93;
            v95 = v93[1];
            v176.val[0] = v93[2];
            v96 = v93[3];
            v93 += 4;
            v97 = v96;
            v176.val[1] = 0uLL;
            v178.val[0] = v95;
            v174.val[1] = 0uLL;
            v98 = v90;
            vst2q_s8(v98, v174);
            v98 += 32;
            v178.val[1] = 0uLL;
            vst2q_s8(v98, v178);
            v99 = v90 + 64;
            vst2q_s8(v99, v176);
            v100 = v90 + 96;
            vst2q_s8(v100, *(int8x16x2_t *)(&v94 - 1));
            v90 += 128;
          }
          while (v90 != v92);
          v90 = v92;
        }
        while (v90 != (char *)v91)
        {
          v101 = v93->u8[0];
          v93 = (int8x16_t *)((char *)v93 + 1);
          *(_WORD *)v90 = v101;
          v90 += 2;
        }
        for (j = 0; j != 9; ++j)
          *(_WORD *)(v91 + 2 * j) = aUrl_1[j];
      }
    }
    else
    {
      v103 = MEMORY[0x19AEAB398](&v144);
      if (v103)
      {
        v168 = v154;
        v169 = v155;
        v170 = v156;
        v171 = v157;
        *(_OWORD *)__src = *(_OWORD *)__s;
        *(_OWORD *)&__src[16] = v151;
        v166 = v152;
        v167 = v153;
        qmemcpy((void *)v103, ",\n\"timestamp\": ", 15);
        v104 = (_BYTE *)(v103 + 15);
        v105 = HIDWORD(v171);
        if (HIDWORD(v171))
        {
          if (HIDWORD(v171) == 1)
            *v104 = __src[0];
          else
            memcpy((void *)(v103 + 15), __src, HIDWORD(v171));
        }
        v106 = &v104[v105];
        *(_QWORD *)v106 = *(_QWORD *)",\n\"URL\": ";
        v106[8] = 32;
      }
    }
    v107 = (const WTF::String *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(v6 + 80));
    WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v144, v107);
    WTF::StringBuilder::append();
    WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v144, (const WTF::String *)(a3 + 24));
    v108 = *(_DWORD *)(a3 + 16);
    v109 = 35;
    v110 = v108;
    do
    {
      ++v109;
      v15 = v110 > 9;
      v110 /= 0xAu;
    }
    while (v15);
    if (v109 - 20 < v109 - 35 || v109 <= 0x13)
      v109 = -1;
    v49 = __CFADD__(v109, v146);
    v111 = v109 + v146;
    if (v49)
      v112 = 0xFFFFFFFFLL;
    else
      v112 = v111;
    v113 = v145;
    if ((v145 || (v113 = v144) != 0) && (*((_BYTE *)v113 + 16) & 4) == 0)
    {
      v114 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v144);
      if (v114)
      {
        for (k = 0; k != 20; ++k)
          *(_WORD *)(v114 + 2 * k) = aBodysharecount[k];
        v116 = 0;
        v117 = v108;
        do
        {
          __src[v116-- + 12] = (v117 % 0xA) | 0x30;
          v15 = v117 > 9;
          v117 /= 0xAu;
        }
        while (v15);
        if (v116 + 14 <= 13)
        {
          v118 = (_WORD *)(v114 + 40);
          do
          {
            *v118++ = __src[v116 + 13];
            v49 = __CFADD__(v116++, 1);
          }
          while (!v49);
        }
        v119 = 0;
        do
        {
          ++v119;
          v15 = v108 > 9;
          v108 /= 0xAu;
        }
        while (v15);
        v120 = 0;
        v121 = v114 + 2 * v119 + 40;
        do
        {
          *(_WORD *)(v121 + 2 * v120) = aHeaders[v120];
          ++v120;
        }
        while (v120 != 15);
      }
    }
    else
    {
      v122 = MEMORY[0x19AEAB398](&v144, v112);
      if (v122)
      {
        v123 = 0;
        *(_DWORD *)(v122 + 16) = 540680820;
        *(_OWORD *)v122 = *(_OWORD *)",\n\"bodyShareCount\": ";
        v124 = v108;
        do
        {
          __src[v123-- + 12] = (v124 % 0xA) | 0x30;
          v15 = v124 > 9;
          v124 /= 0xAu;
        }
        while (v15);
        v125 = v122 + 20;
        if (v123 + 14 <= 13)
          memcpy((void *)(v122 + 20), &__src[v123 + 13], -v123);
        v126 = 0;
        do
        {
          ++v126;
          v15 = v108 > 9;
          v108 /= 0xAu;
        }
        while (v15);
        qmemcpy((void *)(v125 + v126), ",\n\"headers\": {\n", 15);
      }
    }
    v127 = WebCore::ResourceResponseBase::httpHeaderFields((WebCore::ResourceResponseBase *)(v6 + 80));
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)__src, (const WebCore::HTTPHeaderMap *)v127, *(const CommonHeader **)v127, *(const UncommonHeader **)(v127 + 16));
    WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)v158, (const WebCore::HTTPHeaderMap *)v127, (const CommonHeader *)(*(_QWORD *)v127 + 16 * *(unsigned int *)(v127 + 12)), (const UncommonHeader *)(*(_QWORD *)(v127 + 16) + 16 * *(unsigned int *)(v127 + 28)));
    v129 = 0;
    while (*(_OWORD *)&__src[8] != *(_OWORD *)&v158[8])
    {
      v130 = (v129 & 1) == 0;
      if ((v129 & 1) != 0)
        v131 = ",\n";
      else
        v131 = "";
      if (v130)
        v132 = 1;
      else
        v132 = 3;
      *(_QWORD *)__s = v131;
      *(_QWORD *)&__s[8] = v132;
      v149[0] = (WTF::StringImpl *)"    ";
      v149[1] = (WTF::StringImpl *)5;
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)&v144, (uint64_t)__s, (uint64_t)v149);
      WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v144, (const WTF::String *)&__src[24]);
      WTF::StringBuilder::append();
      WTF::StringBuilder::appendQuotedJSONString((WTF::StringBuilder *)&v144, (const WTF::String *)((char *)&v166 + 8));
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator *)__src);
      v129 = 1;
    }
    v133 = v159[1];
    v159[1] = 0;
    if (v133)
    {
      if (*(_DWORD *)v133 == 2)
        WTF::StringImpl::destroy(v133, v128);
      else
        *(_DWORD *)v133 -= 2;
    }
    v134 = *(WTF::StringImpl **)&v158[24];
    *(_QWORD *)&v158[24] = 0;
    if (v134)
    {
      if (*(_DWORD *)v134 == 2)
        WTF::StringImpl::destroy(v134, v128);
      else
        *(_DWORD *)v134 -= 2;
    }
    v135 = (WTF::StringImpl *)*((_QWORD *)&v166 + 1);
    *((_QWORD *)&v166 + 1) = 0;
    if (v135)
    {
      if (*(_DWORD *)v135 == 2)
        WTF::StringImpl::destroy(v135, v128);
      else
        *(_DWORD *)v135 -= 2;
    }
    v136 = *(WTF::StringImpl **)&__src[24];
    *(_QWORD *)&__src[24] = 0;
    if (v136)
    {
      if (*(_DWORD *)v136 == 2)
        WTF::StringImpl::destroy(v136, v128);
      else
        *(_DWORD *)v136 -= 2;
    }
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    v137 = v144;
    if (v144
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v144),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v144),
          (v137 = v144) != 0))
    {
      *(_DWORD *)v137 += 2;
    }
    *(_QWORD *)v158 = v137;
    WTF::String::utf8();
    WTF::FileSystemImpl::writeToFile();
    v139 = *(WTF **)__src;
    *(_QWORD *)__src = 0;
    if (v139)
    {
      if (*(_DWORD *)v139 == 1)
        WTF::fastFree(v139, v138);
      else
        --*(_DWORD *)v139;
    }
    v140 = *(WTF::StringImpl **)v158;
    *(_QWORD *)v158 = 0;
    if (v140)
    {
      if (*(_DWORD *)v140 == 2)
        WTF::StringImpl::destroy(v140, (WTF::StringImpl *)v138);
      else
        *(_DWORD *)v140 -= 2;
    }
    v141 = v145;
    v145 = 0;
    if (v141)
    {
      if (*(_DWORD *)v141 == 2)
        WTF::StringImpl::destroy(v141, (WTF::StringImpl *)v138);
      else
        *(_DWORD *)v141 -= 2;
    }
    v142 = v144;
    v144 = 0;
    if (v142)
    {
      if (*(_DWORD *)v142 == 2)
        WTF::StringImpl::destroy(v142, (WTF::StringImpl *)v138);
      else
        *(_DWORD *)v142 -= 2;
    }
    WebKit::NetworkCache::Entry::~Entry((WebKit::NetworkCache::Entry *)v6, (WTF::StringImpl *)v138);
    goto LABEL_195;
  }
  v9 = *(_DWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  WTF::numberToString();
  v12 = strlen(__s);
  v13 = 0;
  HIDWORD(v157) = v12;
  v14 = v11;
  do
  {
    ++v13;
    v15 = v14 > 9;
    v14 /= 0xAuLL;
  }
  while (v15);
  v16 = 0;
  v17 = v9;
  do
  {
    ++v16;
    v15 = v17 > 9;
    v17 /= 0xAu;
  }
  while (v15);
  v18 = 0;
  v19 = v10;
  do
  {
    ++v18;
    v15 = v19 > 9;
    v19 /= 0xAuLL;
  }
  while (v15);
  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(30, v13, 11, v16, 14, v18, 18, v12, (uint64_t)&v144, 5);
  if ((_BYTE)v144)
    goto LABEL_202;
  v20 = HIDWORD(v144);
  v161 = v154;
  v162 = v155;
  v163 = v156;
  v164 = v157;
  *(_OWORD *)v158 = *(_OWORD *)__s;
  *(_OWORD *)&v158[16] = v151;
  *(_OWORD *)v159 = v152;
  v160 = v153;
  if (!HIDWORD(v144))
  {
    v143 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v149[0] = v143;
    goto LABEL_38;
  }
  if ((HIDWORD(v144) & 0x80000000) != 0
    || (WTF::tryFastCompactMalloc((WTF *)(HIDWORD(v144) + 20)), (v21 = *(_QWORD *)__src) == 0))
  {
LABEL_202:
    __break(0xC471u);
    return;
  }
  v22 = 0;
  **(_DWORD **)__src = 2;
  *(_DWORD *)(v21 + 4) = v20;
  *(_QWORD *)(v21 + 8) = v21 + 20;
  *(_DWORD *)(v21 + 16) = 4;
  qmemcpy((void *)(v21 + 20), "{}\n],\n\"totals\": {\n\"capacity\": ", 30);
  v23 = v11;
  do
  {
    __src[v22-- + 24] = (v23 % 0xA) | 0x30;
    v15 = v23 > 9;
    v23 /= 0xAuLL;
  }
  while (v15);
  if (v22 + 26 <= 25)
    memcpy((void *)(v21 + 50), &__src[v22 + 25], -v22);
  v24 = 0;
  do
  {
    ++v24;
    v15 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v15);
  v25 = 0;
  v26 = v21 + 50 + v24;
  *(_QWORD *)v26 = *(_QWORD *)",\n\"count\": ";
  *(_DWORD *)(v26 + 7) = 540680820;
  v27 = v9;
  do
  {
    __src[v25-- + 12] = (v27 % 0xA) | 0x30;
    v15 = v27 > 9;
    v27 /= 0xAu;
  }
  while (v15);
  v28 = (char *)(v26 + 11);
  if (v25 + 14 <= 13)
    memcpy(v28, &__src[v25 + 13], -v25);
  v29 = 0;
  do
  {
    ++v29;
    v15 = v9 > 9;
    v9 /= 0xAu;
  }
  while (v15);
  v30 = 0;
  v31 = &v28[v29];
  qmemcpy(v31, ",\n\"bodySize\": ", 14);
  v32 = v10;
  do
  {
    __src[v30-- + 24] = (v32 % 0xA) | 0x30;
    v15 = v32 > 9;
    v32 /= 0xAuLL;
  }
  while (v15);
  v33 = v31 + 14;
  if (v30 + 26 <= 25)
    memcpy(v33, &__src[v30 + 25], -v30);
  v34 = 0;
  do
  {
    ++v34;
    v15 = v10 > 9;
    v10 /= 0xAuLL;
  }
  while (v15);
  v35 = &v33[v34];
  *(_OWORD *)v35 = *(_OWORD *)",\n\"averageWorth\": ";
  *((_WORD *)v35 + 8) = 8250;
  v36 = v35 + 18;
  v168 = v161;
  v169 = v162;
  v170 = v163;
  v171 = v164;
  *(_OWORD *)__src = *(_OWORD *)v158;
  *(_OWORD *)&__src[16] = *(_OWORD *)&v158[16];
  v166 = *(_OWORD *)v159;
  v167 = v160;
  v37 = HIDWORD(v164);
  if (HIDWORD(v164))
  {
    if (HIDWORD(v164) == 1)
      *v36 = __src[0];
    else
      memcpy(v35 + 18, __src, HIDWORD(v171));
  }
  v38 = &v36[v37];
  v38[4] = 10;
  *(_DWORD *)v38 = 2097839370;
  v149[0] = (WTF::StringImpl *)v21;
LABEL_38:
  WTF::String::utf8();
  v40 = v149[0];
  v149[0] = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  WTF::FileSystemImpl::writeToFile();
  WTF::FileSystemImpl::closeFile(v4, v73);
  v75 = *(WTF **)__src;
  *(_QWORD *)__src = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 != 1)
    {
      --*(_DWORD *)v75;
      return;
    }
LABEL_195:
    WTF::fastFree(v75, v74);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteDumpFile(void)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34C4338;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteDumpFile(void)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C4338;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteDumpFile(void)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  return WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::fetchData(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::SecurityOriginData *v3;
  uint64_t v4;
  WebKit::NetworkCache::Cache *v5;

  *a1 = &off_1E34C4360;
  v3 = (WebCore::SecurityOriginData *)a1[4];
  if (v3)
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v3, a2);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WebKit::NetworkCache::Cache *)a1[1];
  a1[1] = 0;
  if (v5)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v5, (WTF::StringImpl *)a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::fetchData(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::SecurityOriginData *v3;
  uint64_t v4;
  WebKit::NetworkCache::Cache *v5;

  *(_QWORD *)this = &off_1E34C4360;
  v3 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WebKit::NetworkCache::Cache *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v5, (WTF::StringImpl *)a2);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::fetchData(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::call(WTF::StringImpl *result, _QWORD **a2)
{
  WTF::StringImpl *v2;
  uint64_t v4;
  WTF::StringImpl *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  int v16;
  char v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  char *v33;
  WebCore::SecurityOriginData *v34;
  WebCore::SecurityOriginData *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WebCore::SecurityOriginData *v44[2];
  WTF::StringImpl *v45;
  __int128 v46;
  _BYTE v47[24];
  _BYTE v48[24];
  int v49;
  uint64_t v50;

  v2 = result;
  v50 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(*a2 + 10));
    v5 = *(WTF::StringImpl **)v4;
    if (*(_QWORD *)v4)
      *(_DWORD *)v5 += 2;
    v45 = v5;
    v6 = *(_OWORD *)(v4 + 24);
    v46 = *(_OWORD *)(v4 + 8);
    *(_OWORD *)v47 = v6;
    WTF::URL::protocol((WTF::URL *)&v45);
    if ((v7 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    v8 = (uint64_t *)((char *)v2 + 32);
    WTF::URL::host((WTF::URL *)&v45);
    if ((v9 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    v10 = WTF::URL::port((WTF::URL *)&v45);
    WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)v48, (_DWORD **)&v41, (_DWORD **)&v43, v10);
    v11 = *v8;
    if (*v8
      || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)v2 + 4, 0), (v11 = *v8) != 0))
    {
      v12 = *(_DWORD *)(v11 - 8);
    }
    else
    {
      v12 = 0;
    }
    LODWORD(v44[0]) = -1640531527;
    WORD2(v44[0]) = 0;
    BYTE6(v44[0]) = 0;
    WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v44, (uint64_t)v48);
    v13 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v44) & v12;
    v14 = (unsigned int *)(v11 + 40 * v13);
    if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v14) & 1) == 0)
    {
      v15 = 0;
      v16 = 1;
      do
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v14);
        if ((v17 & 1) != 0)
        {
          v15 = v14;
        }
        else if ((WebCore::operator==() & 1) != 0)
        {
          goto LABEL_33;
        }
        v13 = (v13 + v16) & v12;
        v14 = (unsigned int *)(v11 + 40 * v13);
        ++v16;
      }
      while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v14));
      if (v15)
      {
        *((_QWORD *)v15 + 4) = 0;
        *(_OWORD *)v15 = 0u;
        *((_OWORD *)v15 + 1) = 0u;
        --*(_DWORD *)(*v8 - 16);
        v14 = v15;
      }
    }
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, (uint64_t)v48);
    *((_QWORD *)v14 + 4) = 0;
    v19 = *v8;
    if (*v8)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v25 = *v8;
    if (*v8)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        goto LABEL_33;
    }
    else if (3 * v28 > 4 * v27)
    {
LABEL_33:
      if (v49 != -1)
        ((void (*)(WebCore::SecurityOriginData **, _BYTE *))off_1E34C4098[v49])(v44, v48);
      v49 = -1;
      v29 = v43;
      v43 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v18);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = v41;
      v41 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v18);
        else
          *(_DWORD *)v30 -= 2;
      }
      if (*((_BYTE *)v2 + 16))
        *((_QWORD *)v14 + 4) += *a2[1] + (*a2)[84];
      result = v45;
      v45 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    v14 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)v2 + 4, v14);
    goto LABEL_33;
  }
  v41 = 0;
  v42 = 0;
  v21 = (WTF::StringImpl *)*((_QWORD *)result + 4);
  if (!v21)
  {
    v24 = 0;
LABEL_50:
    v31 = 0;
    v32 = 0;
LABEL_56:
    v34 = (WTF::StringImpl *)((char *)v21 + 40 * v32);
    goto LABEL_57;
  }
  v22 = *((unsigned int *)v21 - 3);
  if ((_DWORD)v22)
  {
    if (v22 >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    v23 = 48 * v22;
    v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(48 * v22));
    LODWORD(v42) = (v23 & 0xFFFFFFF0) / 0x30;
    v41 = v24;
    v21 = (WTF::StringImpl *)*((_QWORD *)v2 + 4);
    if (!v21)
      goto LABEL_50;
  }
  else
  {
    v24 = 0;
  }
  if (!*((_DWORD *)v21 - 3))
  {
    v32 = *((_DWORD *)v21 - 1);
    v31 = (WTF::StringImpl *)((char *)v21 + 40 * v32);
    goto LABEL_56;
  }
  v33 = (char *)v21 + 40 * *((unsigned int *)v21 - 1);
  v45 = v21;
  *(_QWORD *)&v46 = v33;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(&v45);
  v31 = v45;
  v34 = (WebCore::SecurityOriginData *)v46;
  v21 = (WTF::StringImpl *)*((_QWORD *)v2 + 4);
LABEL_57:
  v44[0] = v31;
  v44[1] = v34;
  if (v21)
    v35 = (WTF::StringImpl *)((char *)v21 + 40 * *((unsigned int *)v21 - 1));
  else
    v35 = 0;
  if (v35 != v31)
  {
    v36 = 0;
    do
    {
      v48[0] = 0;
      v49 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v48, (uint64_t)v31);
      v37 = *((_QWORD *)v31 + 4);
      LOBYTE(v45) = 0;
      *(_DWORD *)v47 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v45, (uint64_t)v48);
      *(_DWORD *)&v47[8] = 2;
      *(_QWORD *)&v47[16] = v37;
      if (v49 != -1)
        ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34C4098[v49])(&v43, v48);
      v38 = (uint64_t)v24 + 48 * v36;
      *(_BYTE *)v38 = 0;
      *(_DWORD *)(v38 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v38, (uint64_t)&v45);
      *(_OWORD *)(v38 + 32) = *(_OWORD *)&v47[8];
      if (*(_DWORD *)v47 != -1)
        ((void (*)(_BYTE *, WTF::StringImpl **))off_1E34C4098[*(unsigned int *)v47])(v48, &v45);
      v44[0] = (WebCore::SecurityOriginData *)((char *)v44[0] + 40);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v44);
      v31 = v44[0];
      ++v36;
    }
    while (v44[0] != v35);
    HIDWORD(v42) = v36;
  }
  v39 = *((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v39 + 16))(v39, &v41);
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  return (WTF::StringImpl *)WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v40);
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  int isNull;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v28;
  char v29;
  char v30;
  char v31;
  int v32;
  __int16 v33;
  char v34;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(40 * v5 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
    bzero((void *)(v6 + 16), 40 * v5);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (!v3)
  {
    v11 = 0;
    if (!v2)
      return v11;
    goto LABEL_28;
  }
  v10 = 0;
  v11 = 0;
  v12 = v3;
  do
  {
    v13 = (unsigned int *)(v2 + 40 * v10);
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v13);
    if ((v14 & 1) == 0)
    {
      if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v2 + 40 * v10)))
      {
        v15 = v13[6];
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, uint64_t))off_1E34C4098[v15])(&v29, v2 + 40 * v10);
        v13[6] = -1;
      }
      else
      {
        v16 = *a1;
        v28 = v11;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v32 = -1640531527;
        v33 = 0;
        v34 = 0;
        WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v32, v2 + 40 * v10);
        v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v32);
        v19 = 0;
        do
        {
          v20 = v18 & v17;
          v21 = (unsigned int *)(v16 + 40 * (v18 & v17));
          isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v21);
          v18 = ++v19 + v20;
        }
        while (!isNull);
        v23 = v21[6];
        if ((_DWORD)v23 != -1)
          ((void (*)(char *, uint64_t))off_1E34C4098[v23])(&v30, v16 + 40 * v20);
        *(_BYTE *)v21 = 0;
        v21[6] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v16 + 40 * v20, v2 + 40 * v10);
        *(_QWORD *)(v16 + 40 * v20 + 32) = *(_QWORD *)(v2 + 40 * v10 + 32);
        v24 = v13[6];
        if ((_DWORD)v24 != -1)
          ((void (*)(char *, uint64_t))off_1E34C4098[v24])(&v31, v2 + 40 * v10);
        v13[6] = -1;
        v11 = v28;
        if (v13 == a2)
          v11 = v21;
      }
    }
    ++v10;
  }
  while (v10 != v12);
  if (v2)
LABEL_28:
    WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

void WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(WebCore::SecurityOriginData **a1)
{
  WebCore::SecurityOriginData *v1;
  int v3;
  WebCore::SecurityOriginData *v4;

  v1 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      if ((WebCore::SecurityOriginData::isNull(v1) & 1) == 0)
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue(v1);
        if (!v3)
          break;
      }
      v4 = a1[1];
      v1 = (WebCore::SecurityOriginData *)((char *)*a1 + 40);
      *a1 = v1;
    }
    while (v1 != v4);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteData(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  WebCore::SecurityOriginData *v5;
  WebKit::NetworkCache::Cache *v6;

  *a1 = off_1E34C4388;
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 5), a2);
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WebCore::SecurityOriginData *)a1[3];
  if (v5)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v5, v3);
  v6 = (WebKit::NetworkCache::Cache *)a1[2];
  a1[2] = 0;
  if (v6)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v6, (WTF::StringImpl *)v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteData(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  WebCore::SecurityOriginData *v5;
  WebKit::NetworkCache::Cache *v6;

  *(_QWORD *)a1 = off_1E34C4388;
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 40, a2);
  v4 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WebCore::SecurityOriginData *)*((_QWORD *)a1 + 3);
  if (v5)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v5, v3);
  v6 = (WebKit::NetworkCache::Cache *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v6)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v6, (WTF::StringImpl *)v3);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteData(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::call(uint64_t a1, unint64_t *a2)
{
  WebCore::SecurityOriginData *v4;
  const WTF::URL *v5;
  uint64_t result;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  uint64_t v11[3];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = (WebCore::SecurityOriginData *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(*a2 + 80));
    WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v4, v5);
    result = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)(a1 + 24), (uint64_t)v11);
    if ((_DWORD)result)
    {
      v7 = *a2;
      v8 = *(_DWORD *)(a1 + 52);
      if (v8 == *(_DWORD *)(a1 + 48))
      {
        result = WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::Key const&>(a1 + 40, v7);
      }
      else
      {
        result = WebKit::NetworkCache::Key::Key(*(_QWORD *)(a1 + 40) + 72 * v8, v7);
        ++*(_DWORD *)(a1 + 52);
      }
    }
    if (v12 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E34C4098[v12])(&v10, v11);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 8);
    WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(v11, (uint64_t *)(a1 + 32));
    WebKit::NetworkCache::Cache::remove(v9, (const WebKit::NetworkCache::Key **)(a1 + 40), v11);
    result = v11[0];
    v11[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteDataForRegistrableDomains(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WebKit::NetworkCache::Cache *v7;

  *a1 = off_1E34C43B0;
  v3 = (WTF::StringImpl **)a1[7];
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 5), a2);
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (WTF::StringImpl **)a1[3];
  if (v6)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v4);
  v7 = (WebKit::NetworkCache::Cache *)a1[2];
  a1[2] = 0;
  if (v7)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v7, v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteDataForRegistrableDomains(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WebKit::NetworkCache::Cache *v7;

  *(_QWORD *)a1 = off_1E34C43B0;
  v3 = (WTF::StringImpl **)*((_QWORD *)a1 + 7);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 40, a2);
  v5 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (WTF::StringImpl **)*((_QWORD *)a1 + 3);
  if (v6)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v4);
  v7 = (WebKit::NetworkCache::Cache *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v7)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v7, v4);
  return WTF::fastFree(a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Cache::deleteDataForRegistrableDomains(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WebKit::NetworkCache::Cache::TraversalEntry const*>::call(uint64_t a1, unint64_t *a2)
{
  const WTF::URL *v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *result;
  uint64_t v13[3];
  WTF::StringImpl *v14;

  if (a2)
  {
    v4 = (const WTF::URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(*a2 + 80));
    WebCore::RegistrableDomain::RegistrableDomain(&v14, v4);
    if (WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 24), &v14))
    {
      v6 = *a2;
      v7 = *(_DWORD *)(a1 + 52);
      if (v7 == *(_DWORD *)(a1 + 48))
      {
        WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::Key const&>(a1 + 40, v6);
      }
      else
      {
        WebKit::NetworkCache::Key::Key(*(_QWORD *)(a1 + 40) + 72 * v7, v6);
        ++*(_DWORD *)(a1 + 52);
      }
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(a1 + 56), &v14, (uint64_t)v13);
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    v10 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v11 = &off_1E34C43D8;
    v11[1] = v9;
    v11[2] = v10;
    v13[0] = (uint64_t)v11;
    WebKit::NetworkCache::Cache::remove(v8, (const WebKit::NetworkCache::Key **)(a1 + 40), v13);
    result = (WTF::StringImpl *)v13[0];
    if (v13[0])
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13[0] + 8))(v13[0]);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit12NetworkCache5Cache31deleteDataForRegistrableDomainsERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetIS7_NS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEEEEEEEN3__0clIKNS4_14TraversalEntryEEEDaPT_EUlvE_vJEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;

  *a1 = &off_1E34C43D8;
  v3 = (WTF::StringImpl **)a1[2];
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12NetworkCache5Cache31deleteDataForRegistrableDomainsERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetIS7_NS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEEEEEEEN3__0clIKNS4_14TraversalEntryEEEDaPT_EUlvE_vJEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34C43D8;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 2);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit12NetworkCache5Cache31deleteDataForRegistrableDomainsERKNS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS_7HashSetIS7_NS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEEEEEEEN3__0clIKNS4_14TraversalEntryEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::BlobStorage::synchronize(void)::$_0,void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(WTF::StringImpl *result, uint64_t a2, int a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  const WTF::String *v6;
  uint64_t v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  WTF::StringImpl *v14[5];

  if (a3 == 1)
  {
    v14[3] = v3;
    v14[4] = v4;
    v5 = *((_QWORD *)result + 1);
    WTF::FileSystemImpl::pathByAppendingComponent();
    v7 = WTF::FileSystemImpl::hardLinkCount((WTF::FileSystemImpl *)v14, v6);
    if ((_BYTE)v8 && v7 == 1)
    {
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)v14, v8);
    }
    else
    {
      v10 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)v14, v8);
      if ((_BYTE)v9)
        v11 = v10;
      else
        v11 = 0;
      v12 = (unint64_t *)(v5 + 16);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + v11, v12));
    }
    result = v14[0];
    v14[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

__n128 std::__optional_storage_base<WebKit::NetworkCache::Key,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::NetworkCache::Key,false>>(uint64_t a1, uint64_t a2)
{
  __n128 result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(_BYTE *)(a1 + 72))
      WebKit::NetworkCache::Key::operator=(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    std::__optional_destruct_base<WebKit::NetworkCache::Key,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v3;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 16) = v5;
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 24) = v6;
    result = *(__n128 *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(__n128 *)(a1 + 32) = result;
    *(_OWORD *)(a1 + 48) = v7;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::NetworkCache::Key,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(result + 72))
  {
    v2 = result;
    v3 = *(WTF::StringImpl **)(result + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v2 + 72) = 0;
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebKit::NetworkCache::Data::mapToFile(WTF::String const&)::$_0,void,WTF::Function<BOOL ()(std::span<unsigned char const,18446744073709551615ul>)> const&>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::NetworkCache::Data::apply(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::computeSHA1(WebKit::NetworkCache::Data const&,std::array<unsigned char,8ul> const&)::$_0,BOOL,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t a1)
{
  MEMORY[0x19AEABB6C](*(_QWORD *)(a1 + 8));
  return 1;
}

uint64_t WTF::Persistence::Coder<std::optional<WebCore::ResourceRequest>>::encodeForPersistence<WTF::Persistence::Encoder>(uint64_t a1, uint64_t a2)
{
  id v4;

  if (!*(_BYTE *)(a2 + 200))
    JUMPOUT(0x19AEAB26CLL);
  MEMORY[0x19AEAB26C](a1, 1);
  if (*(_BYTE *)(a2 + 200))
    return WTF::Persistence::Coder<WebCore::ResourceRequest>::encodeForPersistence();
  v4 = std::__throw_bad_optional_access[abi:sn180100]();
  return WTF::Persistence::Decoder::operator>><WebCore::ResourceRequest,(void *)0>(v4);
}

uint64_t WTF::Persistence::Decoder::operator>><WebCore::ResourceRequest,(void *)0>(uint64_t a1, WTF::StringImpl **a2)
{
  _BYTE v5[208];

  WTF::Persistence::Coder<WebCore::ResourceRequest>::decodeForPersistence();
  std::__optional_storage_base<WebCore::ResourceRequest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ResourceRequest,false>>(a2, (uint64_t)v5);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v5);
  return a1;
}

void sub_197172508(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23)
{
  uint64_t v23;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 + 64, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 + 48, v25);
  v27 = a23;
  a23 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = a22;
  a22 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v26);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, v29);
  v31 = a16;
  a16 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = a21;
  a21 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v30);
    else
      *(_DWORD *)v32 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *API::Object::constructInWrapper<API::UserStyleSheet,WebCore::UserStyleSheet,API::ContentWorld &>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  __int128 v21;
  char v22;

  v6 = objc_msgSend(a1, "_apiObject");
  v7 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v17 = v7;
  WTF::URL::URL((uint64_t)&v18, (uint64_t *)(a2 + 8));
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v19[0] = v8;
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v19[1] = v9;
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v20[0] = v10;
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v20[1] = v11;
  v21 = *(_OWORD *)(a2 + 80);
  v22 = *(_BYTE *)(a2 + 96);
  API::UserStyleSheet::UserStyleSheet(v6, (uint64_t)&v17, a3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v13);
  v15 = v18;
  v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)(v6 + 8) = a1;
  return result;
}

void sub_1971726EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1971728E8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23)
{
  uint64_t v23;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 + 64, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 + 48, v25);
  v27 = a23;
  a23 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = a22;
  a22 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v26);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, v29);
  v31 = a16;
  a16 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = a21;
  a21 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v30);
    else
      *(_DWORD *)v32 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_197172B30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197172BC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197172C74(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197172D18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197172E68(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_197172F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_19717314C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<WebKit::WebAuthenticationPanelClient>::reset[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1971731D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_1971732CC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197173354(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_1971735B4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197173B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, char a18, uint64_t a19, WTF::StringImpl *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,WTF *a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  const void *v32;
  WTF::StringImpl *v34;

  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a21);
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, v34);
    else
      *(_DWORD *)a20 -= 2;
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&a25, a26);
  if (a32)
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a28);
  if (cf)
    CFRelease(cf);
  if (v32)
    CFRelease(v32);
  _Unwind_Resume(a1);
}

void sub_197174280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, char a18, uint64_t a19, WTF::StringImpl *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,WTF *a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  const void *v32;
  WTF::StringImpl *v34;

  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a21);
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, v34);
    else
      *(_DWORD *)a20 -= 2;
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&a25, a26);
  if (a32)
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a28);
  if (cf)
    CFRelease(cf);
  if (v32)
    CFRelease(v32);
  _Unwind_Resume(a1);
}

void sub_197174D4C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CFTypeRef a23,CFTypeRef a24,CFTypeRef cf,CFTypeRef a26,PAL::CryptoDigest *a27,uint64_t a28,WTF *a29,int a30,int a31,char a32,WTF *a33,int a34)
{
  const void *v34;
  WTF::StringImpl *v35;
  const void *v36;
  uint64_t v37;
  WTF *v39;
  void *v40;

  if (a27)
  {
    PAL::CryptoDigest::~CryptoDigest(a27);
    WTF::fastFree(v39, v40);
  }
  if (cf)
    CFRelease(cf);
  if (a24)
    CFRelease(a24);
  if (v36)
    CFRelease(v36);
  if (a32 && a29)
    WTF::fastFree(a29, a2);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (v34)
    CFRelease(v34);
  if (*(_BYTE *)(v37 - 152))
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)(v37 - 184));
  _Unwind_Resume(exception_object);
}

void sub_19717563C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,int a23,int a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,char a34,char a35)
{
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  uint64_t v40;

  if (a31)
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)&a27);
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(v40 - 160, *(WTF **)(v40 - 152));
  if (v39)
    CFRelease(v39);
  if (v38)
  {
    CFRelease(v38);
    if (!v37)
    {
LABEL_7:
      if (!v36)
        goto LABEL_11;
      goto LABEL_8;
    }
  }
  else if (!v37)
  {
    goto LABEL_7;
  }
  CFRelease(v37);
  if (!v36)
  {
LABEL_11:
    if (v35)
      CFRelease(v35);
    _Unwind_Resume(a1);
  }
LABEL_8:
  CFRelease(v36);
  goto LABEL_11;
}

uint64_t WebCore::toBufferSource(WebCore *this, NSData *a2)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;

  if (a2)
  {
    -[NSData bytes](a2, "bytes");
    -[NSData length](a2, "length");
  }
  JSC::ArrayBuffer::tryCreate();
  v6 = v5;
  v7 = 1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)this, (uint64_t)&v6);
  if (v7 != -1)
    ((void (*)(char *, uint64_t *))off_1E34C44E0[v7])(&v8, &v6);
  v7 = -1;
  return 0;
}

void sub_1971758C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::DeferrableRefCountedBase *a9, char a10, int a11, int a12, int a13, int a14, __int16 a15, char a16, char a17)
{
  if (a12 != -1)
    ((void (*)(char *, char *))off_1E34C44E0[a12])(&a17, &a10);
  a12 = -1;
  if (a9)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a9);
  _Unwind_Resume(exception_object);
}

void sub_1971760C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, int a13, WTF::StringImpl *a14)
{
  WebCore::PublicKeyCredentialCreationOptions *v14;
  uint64_t v15;
  WTF::StringImpl *v17;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)(v15 + 64));
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)(v15 + 16));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions(v14);
  _Unwind_Resume(a1);
}

unint64_t publicKeyCredentialDescriptors(uint64_t a1, void *a2)
{
  unint64_t result;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  WTF *v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  _BYTE *v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v21;
  int v22;
  WTF *v23;
  uint64_t v24;
  char v25;

  result = objc_msgSend(a2, "count");
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    v4 = result;
    if (result < 0x6666667)
    {
      v5 = 40 * result;
      v6 = WTF::fastMalloc((WTF *)(40 * result));
      v7 = 0;
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v6;
      while (1)
      {
        v8 = (void *)objc_msgSend(a2, "objectAtIndexedSubscript:", v7);
        WebCore::toBufferSource((WebCore *)&v21, (NSData *)objc_msgSend(v8, "identifier"));
        v9 = (void *)objc_msgSend(v8, "transports");
        v10 = objc_msgSend(v9, "count");
        v11 = v10;
        v23 = 0;
        v24 = 0;
        if (v10)
        {
          if (HIDWORD(v10))
          {
            __break(0xC471u);
            goto LABEL_19;
          }
          v12 = (WTF *)WTF::fastMalloc((WTF *)v10);
          v13 = 0;
          LODWORD(v24) = v11;
          v23 = v12;
          do
          {
            v14 = objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", v13), "intValue");
            if (v14 >= 7)
              v15 = 0;
            else
              v15 = v14;
            *((_BYTE *)v12 + v13) = v15;
            HIDWORD(v24) = ++v13;
          }
          while (v11 != v13);
        }
        v16 = (_BYTE *)(v6 + 40 * v7);
        *v16 = 0;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v16 + 8), (uint64_t)&v21);
        v18 = v6 + 40 * v7;
        *(_QWORD *)(v18 + 32) = 0;
        v19 = v23;
        v23 = 0;
        *(_QWORD *)(v18 + 24) = v19;
        LODWORD(v19) = v24;
        LODWORD(v24) = 0;
        *(_DWORD *)(v18 + 32) = (_DWORD)v19;
        LODWORD(v19) = HIDWORD(v24);
        HIDWORD(v24) = 0;
        *(_DWORD *)(v18 + 36) = (_DWORD)v19;
        *(_DWORD *)(a1 + 12) = ++v7;
        result = (unint64_t)v23;
        if (v23)
        {
          LODWORD(v24) = 0;
          result = WTF::fastFree(v23, v17);
        }
        if (v22 != -1)
          result = ((uint64_t (*)(char *, uint64_t *))off_1E34C44E0[v22])(&v25, &v21);
        if (v7 == v4)
          return result;
      }
    }
    __break(0xC471u);
LABEL_19:
    JUMPOUT(0x19717648CLL);
  }
  return result;
}

void sub_197176498(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, WTF *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  WTF *v19;
  uint64_t v20;

  if (a14)
    WTF::fastFree(a14, a2);
  if (a13 != -1)
    ((void (*)(char *, uint64_t))off_1E34C44E0[a13])(&a19, v20);
  *(_QWORD *)a10 = 0;
  *(_DWORD *)(a10 + 8) = 0;
  WTF::fastFree(v19, a2);
  _Unwind_Resume(a1);
}

uint64_t authenticationExtensionsClientInputs(_WKAuthenticationExtensionsClientInputs *a1, void *a2)
{
  uint64_t result;
  objc_class *v4;

  LOBYTE(a1[1].super.isa) = 0;
  a1->super.isa = 0;
  LOBYTE(a1[3]._appid) = 0;
  LOBYTE(a1[4].super.isa) = 0;
  LOBYTE(a1[8]._appid) = 0;
  result = MEMORY[0x19AEABCC8](&v4, objc_msgSend(a2, "appid"));
  a1->super.isa = v4;
  return result;
}

void sub_197176578(_Unwind_Exception *a1)
{
  WTF::StringImpl **v1;
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *v2;
  WebCore::AuthenticationExtensionsClientInputs::PRFInputs *v3;
  WebCore::AuthenticationExtensionsClientInputs::PRFInputs *v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v4 = v3;
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100](v4);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100](v2);
  v7 = *v1;
  *v1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,void>(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(_BYTE *)(a1 + 144))
  {
    WTF::String::operator=((WTF::StringImpl **)a1, a2);
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>>((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)(a1 + 16), (uint64_t)a2 + 16);
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>>((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)(a1 + 64), (uint64_t)a2 + 64);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs*>(a1, (uint64_t)a2);
    *(_BYTE *)(a1 + 144) = 1;
  }
  return a1;
}

void sub_1971767D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,WTF *a48,int a49,CFTypeRef cf,WTF *a51)
{
  const void *v51;
  const void *v52;
  void *v54;
  WTF *v55;

  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)&a51);
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&a11);
  if (v51)
    CFRelease(v51);
  _Block_release(v52);
  v55 = a48;
  if (a48)
  {
    a48 = 0;
    a49 = 0;
    WTF::fastFree(v55, v54);
  }
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_1971768D8()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1971768D0);
  JUMPOUT(0x1971768C8);
}

void sub_1971768E4()
{
  JUMPOUT(0x1971768D0);
}

WTF::DeferrableRefCountedBase *produceClientDataJson(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  const WTF::String *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::DeferrableRefCountedBase *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  WTF::StringImpl *v19;
  WTF::DeferrableRefCountedBase *v20;
  WTF *v21;
  WTF::DeferrableRefCountedBase *result;
  WTF::StringImpl *v23;
  WTF::DeferrableRefCountedBase *v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  JSC::ArrayBuffer *v28;
  WTF *v29;
  WTF::DeferrableRefCountedBase *v30;

  if (a3)
  {
    objc_msgSend(a3, "bytes");
    objc_msgSend(a3, "length");
  }
  JSC::ArrayBuffer::tryCreate();
  MEMORY[0x19AEABCC8](&v26, a4);
  WebCore::SecurityOrigin::createFromString((WebCore::SecurityOrigin *)&v26, v9);
  v11 = v26;
  v26 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v30;
  if (v30)
    *(_DWORD *)v30 += 2;
  v24 = v12;
  v25 = 1;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v26, (uint64_t)&v24);
  MEMORY[0x19AEABCC8](&v23, a5);
  WebCore::buildClientDataJson();
  v14 = v23;
  v23 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v27 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34C44E0[v27])(&v23, &v26);
  v27 = -1;
  if (v25 != -1)
    ((void (*)(WTF::StringImpl **, WTF::DeferrableRefCountedBase **))off_1E34C44E0[v25])(&v23, &v24);
  v15 = JSC::ArrayBuffer::span(v28);
  v17 = v16;
  v18 = objc_alloc(MEMORY[0x1E0C99D50]);
  *a1 = objc_msgSend(v18, "initWithBytes:length:", v15, v17, v23);
  v20 = v28;
  v28 = 0;
  if (v20)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v20);
  v21 = v29;
  v29 = 0;
  if (v21)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v21, v19);
  result = v30;
  v30 = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

void sub_197176ADC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, int a11, int a12, WTF::StringImpl *a13, int a14, uint64_t a15, WTF *a16, WTF::DeferrableRefCountedBase *a17)
{
  WTF::StringImpl *v18;
  WTF *v19;
  WTF::DeferrableRefCountedBase *v20;

  v18 = a9;
  a9 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (a14 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34C44E0[a14])(&a9, &a13);
  a14 = -1;
  if (a12 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E34C44E0[a12])(&a9, &a10);
  v19 = a16;
  a16 = 0;
  if (v19)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v19, a2);
  v20 = a17;
  a17 = 0;
  if (v20)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v20);
  _Unwind_Resume(exception_object);
}

PAL::CryptoDigest *produceClientDataJsonHash(NSData *a1, void *a2)
{
  PAL::CryptoDigest *result;
  WTF *v4;
  void *v5;
  PAL::CryptoDigest *v6;

  PAL::CryptoDigest::create();
  if (a2)
  {
    objc_msgSend(a2, "bytes");
    objc_msgSend(a2, "length");
  }
  PAL::CryptoDigest::addBytes();
  PAL::CryptoDigest::computeHash(v6);
  result = v6;
  if (v6)
  {
    PAL::CryptoDigest::~CryptoDigest(v6);
    return (PAL::CryptoDigest *)WTF::fastFree(v4, v5);
  }
  return result;
}

void sub_197176C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PAL::CryptoDigest *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    PAL::CryptoDigest::~CryptoDigest(a10);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_197176E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,WTF *a47)
{
  const void *v47;

  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)&a47);
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&a10);
  _Block_release(v47);
  _Unwind_Resume(a1);
}

void sub_1971771C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  WebCore::AuthenticationExtensionsClientInputs *v11;
  uint64_t v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;

  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)(v12 + 64));
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)(v12 + 16));
  v15 = a10;
  a10 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100](v11);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v10 + 32));
  v17 = *(WTF::StringImpl **)(v10 + 24);
  *(_QWORD *)(v10 + 24) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(unsigned int *)(v10 + 8);
  if ((_DWORD)v18 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t))off_1E34C44E0[v18])(&a10, v10);
  *(_DWORD *)(v10 + 8) = -1;
  _Unwind_Resume(a1);
}

void sub_1971774A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, __int16 a12, int a13, int a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,WTF *a40,int a41,CFTypeRef cf,WTF *a43)
{
  const void *v43;
  const void *v44;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  void *v48;
  WTF *v49;

  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)&a43);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)&a20);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a17);
  v47 = a16;
  a16 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v46);
    else
      *(_DWORD *)v47 -= 2;
  }
  if (a14 != -1)
    ((void (*)(char *, __int16 *))off_1E34C44E0[a14])(&a10, &a12);
  if (v43)
    CFRelease(v43);
  _Block_release(v44);
  v49 = a40;
  if (a40)
  {
    a40 = 0;
    a41 = 0;
    WTF::fastFree(v49, v48);
  }
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_197177600()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x1971775F8);
  JUMPOUT(0x1971775F0);
}

void sub_19717760C()
{
  JUMPOUT(0x1971775F8);
}

void sub_197177838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,WTF *a38)
{
  const void *v38;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;

  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)&a38);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)&a18);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a15);
  v41 = a14;
  a14 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  if (a12 != -1)
    ((void (*)(uint64_t *, char *))off_1E34C44E0[a12])(&a9, &a10);
  _Block_release(v38);
  _Unwind_Resume(a1);
}

void sub_197177B10(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;
  void *v22;
  WTF *v23;

  if (a14 && a11)
    WTF::fastFree(a11, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&a20);
  v23 = *(WTF **)(v20 - 48);
  if (v23)
  {
    *(_QWORD *)(v20 - 48) = 0;
    *(_DWORD *)(v20 - 40) = 0;
    WTF::fastFree(v23, v22);
  }
  _Unwind_Resume(a1);
}

void sub_197177CF8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,int a21,int a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF *v32;

  if (a14 && a11)
    WTF::fastFree(a11, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)&a28);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a25);
  v31 = a24;
  a24 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  if (a22 != -1)
    ((void (*)(__int16 *, char *))off_1E34C44E0[a22])(&a16, &a20);
  v32 = *(WTF **)(v28 - 48);
  if (v32)
  {
    *(_QWORD *)(v28 - 48) = 0;
    *(_DWORD *)(v28 - 40) = 0;
    WTF::fastFree(v32, v30);
  }
  _Unwind_Resume(a1);
}

void sub_197177F60(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;
  void *v22;
  WTF *v23;

  if (a14 && a11)
    WTF::fastFree(a11, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&a20);
  v23 = *(WTF **)(v20 - 96);
  if (v23)
  {
    *(_QWORD *)(v20 - 96) = 0;
    *(_DWORD *)(v20 - 88) = 0;
    WTF::fastFree(v23, v22);
  }
  _Unwind_Resume(a1);
}

void sub_1971781B0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,int a21,int a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF *v32;

  if (a14 && a11)
    WTF::fastFree(a11, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a16, a2);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)&a28);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&a25);
  v31 = a24;
  a24 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  if (a22 != -1)
    ((void (*)(__int16 *, char *))off_1E34C44E0[a22])(&a16, &a20);
  v32 = *(WTF **)(v28 - 80);
  if (v32)
  {
    *(_QWORD *)(v28 - 80) = 0;
    *(_DWORD *)(v28 - 72) = 0;
    WTF::fastFree(v32, v30);
  }
  _Unwind_Resume(a1);
}

void WebCore::AuthenticatorAssertionResponse::setLAContext(WebCore::AuthenticatorAssertionResponse *this, CFTypeRef cf)
{
  const void *v4;

  if (cf)
    CFRetain(cf);
  v4 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = cf;
  if (v4)
    CFRelease(v4);
}

uint64_t *std::unique_ptr<WebKit::WebAuthenticationPanelClient>::reset[abi:sn180100](uint64_t *result)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    objc_destroyWeak((id *)(v1 + 24));
    WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v1 + 8), v2);
    return (uint64_t *)WTF::fastFree((WTF *)v1, v3);
  }
  return result;
}

void API::UserInitiatedAction::~UserInitiatedAction(API::UserInitiatedAction *this)
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)105>::type()
{
  return 105;
}

uint64_t *std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>(uint64_t **a1, cbor::CBORValue *this)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v7[3];
  uint64_t v8;

  v3 = (uint64_t **)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>((uint64_t)a1, &v8, this);
  v4 = *v3;
  if (!*v3)
  {
    v5 = v3;
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)a1, (uint64_t)v7);
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__insert_node_at(a1, v8, v5, v7[0]);
    v4 = v7[0];
    v7[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::reset[abi:sn180100]((uint64_t)v7, 0);
  }
  return v4;
}

_QWORD *std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>(uint64_t a1, _QWORD *a2, cbor::CBORValue *this)
{
  _QWORD *v4;
  _QWORD *v5;
  int v7;
  _QWORD *v8;
  cbor::CBORValue *v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (cbor::CBORValue *)(v4 + 4);
        if (!cbor::CBORValue::CTAPLess::operator()(v7, this, (cbor::CBORValue *)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!cbor::CBORValue::CTAPLess::operator()(v7, v9, this))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1 + 8;
  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = 0;
  result = std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue&&>(v4 + 32);
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void sub_197178B1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL cbor::CBORValue::CTAPLess::operator()(int a1, cbor::CBORValue *this, cbor::CBORValue *a3)
{
  int v3;
  BOOL v4;
  uint64_t v6;
  WTF **String;
  unsigned int v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  unsigned int v12;
  uint64_t v13;

  v3 = *(_DWORD *)this;
  v4 = *(_DWORD *)this < *(_DWORD *)a3;
  if (*(_DWORD *)this != *(_DWORD *)a3)
    return v4;
  if (v3 != 3)
  {
    if (v3 == 1)
    {
      v13 = *(_QWORD *)cbor::CBORValue::getInteger(this);
      return v13 > *(_QWORD *)cbor::CBORValue::getInteger(a3);
    }
    if (v3)
      return 0;
    v6 = *(_QWORD *)cbor::CBORValue::getInteger(this);
    return v6 < *(_QWORD *)cbor::CBORValue::getInteger(a3);
  }
  String = (WTF **)cbor::CBORValue::getString(this);
  if (*String)
    v9 = *((_DWORD *)*String + 1);
  else
    v9 = 0;
  v10 = *(const WTF::StringImpl **)cbor::CBORValue::getString(a3);
  if (v10)
    v12 = *((_DWORD *)v10 + 1);
  else
    v12 = 0;
  if (v9 == v12)
    return WTF::codePointCompare(*String, v10, v11) >> 31;
  else
    return v9 < v12;
}

uint64_t std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue&&>(uint64_t a1)
{
  uint64_t v2;

  v2 = cbor::CBORValue::CBORValue();
  cbor::CBORValue::CBORValue((cbor::CBORValue *)(v2 + 32));
  return a1;
}

void sub_197178CA4(_Unwind_Exception *a1)
{
  cbor::CBORValue *v1;

  cbor::CBORValue::~CBORValue(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::reset[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)result;
  *(_QWORD *)result = a2;
  if (v2)
  {
    if (*(_BYTE *)(result + 16))
    {
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)(v2 + 64));
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)(v2 + 32));
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(uint64_t a1, cbor::CBORValue *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v5;
  _QWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = cbor::CBORValue::CTAPLess::operator()(v5, (cbor::CBORValue *)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || cbor::CBORValue::CTAPLess::operator()(v5, a2, (cbor::CBORValue *)(v6 + 4)))
    return v2;
  return v6;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<-[_WKWebAuthenticationPanel makeCredentialWithChallenge:origin:options:completionHandler:]::$_0::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::{lambda(WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>> const&)#1},-[_WKWebAuthenticationPanel makeCredentialWithChallenge:origin:options:completionHandler:]::$_0::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)::{lambda(WebCore::ExceptionData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>(uint64_t **a1, WebCore::AuthenticatorResponse **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const void *v7;
  void *v8;
  _QWORD v9[20];
  const void *v10;

  v3 = *a1;
  v4 = **a1;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)*a2 + 24))(v9);
  v5 = *(_QWORD *)v3[1];
  v6 = WebCore::AuthenticatorResponse::attachment(*a2);
  wkAuthenticatorAttestationResponse(&v10, (uint64_t)v9, v5, v6);
  v7 = v10;
  (*(void (**)(void))(*(_QWORD *)v4 + 16))();
  if (v7)
    CFRelease(v7);
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v9, v8);
}

void sub_197178F08(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<-[_WKWebAuthenticationPanel makeCredentialWithChallenge:origin:options:completionHandler:]::$_0::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::{lambda(WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>> const&)#1},-[_WKWebAuthenticationPanel makeCredentialWithChallenge:origin:options:completionHandler:]::$_0::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)::{lambda(WebCore::ExceptionData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  const __CFString *v5;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = (void *)MEMORY[0x1E0CB35C8];
  v4 = *a2;
  v7 = *MEMORY[0x1E0CB2D50];
  if (*((_QWORD *)a2 + 1))
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  v8[0] = v5;
  objc_msgSend(v3, "errorWithDomain:code:userInfo:", CFSTR("WKErrorDomain"), v4, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1));
  return (*(uint64_t (**)(void))(*(_QWORD *)v2 + 16))();
}

void wkAuthenticatorAttestationResponse(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  _WKAuthenticatorAttestationResponse *v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  void *v19;
  const void *v20;
  WTF *v21;
  unsigned int v22;

  v8 = [_WKAuthenticatorAttestationResponse alloc];
  v9 = JSC::ArrayBuffer::span(*(JSC::ArrayBuffer **)(a2 + 8));
  v20 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v9, v10);
  if (*(_BYTE *)(a2 + 96))
  {
    WebCore::AuthenticationExtensionsClientOutputs::toCBOR((WebCore::AuthenticationExtensionsClientOutputs *)(a2 + 16));
    v11 = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v21, v22));
    v12 = JSC::ArrayBuffer::span(*(JSC::ArrayBuffer **)(a2 + 112));
    v14 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v12, v13);
    if (a4)
      v15 = 2;
    else
      v15 = 1;
    v16 = (void *)objc_opt_new();
    v17 = *(unsigned int *)(a2 + 156);
    if ((_DWORD)v17)
    {
      v18 = *(unsigned __int8 **)(a2 + 144);
      do
      {
        objc_msgSend(v16, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *v18++));
        --v17;
      }
      while (v17);
    }
    *a1 = -[_WKAuthenticatorAttestationResponse initWithClientDataJSON:rawId:extensionOutputsCBOR:attestationObject:attachment:transports:](v8, "initWithClientDataJSON:rawId:extensionOutputsCBOR:attestationObject:attachment:transports:", a3, v20, v11, v14, v15, (id)CFMakeCollectable(v16));
    if (v14)
      CFRelease(v14);
    if (v21)
      WTF::fastFree(v21, v19);
    if (v20)
      CFRelease(v20);
  }
  else
  {
    __break(1u);
  }
}

void sub_1971791BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF *a11, int a12)
{
  const void *v12;

  if (v12)
    CFRelease(v12);
  if (a11)
    WTF::fastFree(a11, a2);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<-[_WKWebAuthenticationPanel makeCredentialWithMediationRequirement:clientDataHash:options:completionHandler:]::$_1::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::{lambda(WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>> const&)#1},-[_WKWebAuthenticationPanel makeCredentialWithMediationRequirement:clientDataHash:options:completionHandler:]::$_1::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)::{lambda(WebCore::ExceptionData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>(uint64_t **a1, WebCore::AuthenticatorResponse **a2)
{
  uint64_t v3;
  int v4;
  const void *v5;
  void *v6;
  _QWORD v7[20];
  const void *v8;

  v3 = **a1;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)*a2 + 24))(v7);
  v4 = WebCore::AuthenticatorResponse::attachment(*a2);
  wkAuthenticatorAttestationResponse(&v8, (uint64_t)v7, 0, v4);
  v5 = v8;
  (*(void (**)(void))(*(_QWORD *)v3 + 16))();
  if (v5)
    CFRelease(v5);
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v7, v6);
}

void sub_197179364(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<-[_WKWebAuthenticationPanel makeCredentialWithMediationRequirement:clientDataHash:options:completionHandler:]::$_1::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::{lambda(WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>> const&)#1},-[_WKWebAuthenticationPanel makeCredentialWithMediationRequirement:clientDataHash:options:completionHandler:]::$_1::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)::{lambda(WebCore::ExceptionData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  const __CFString *v5;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v3 = (void *)MEMORY[0x1E0CB35C8];
  v4 = *a2;
  v7 = *MEMORY[0x1E0CB2D50];
  if (*((_QWORD *)a2 + 1))
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  v8[0] = v5;
  objc_msgSend(v3, "errorWithDomain:code:userInfo:", CFSTR("WKErrorDomain"), v4, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1));
  return (*(uint64_t (**)(void))(*(_QWORD *)v2 + 16))();
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<-[_WKWebAuthenticationPanel getAssertionWithChallenge:origin:options:completionHandler:]::$_2::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::{lambda(WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>> const&)#1},-[_WKWebAuthenticationPanel getAssertionWithChallenge:origin:options:completionHandler:]::$_2::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)::{lambda(WebCore::ExceptionData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>(uint64_t **a1, WebCore::AuthenticatorResponse **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const void *v7;
  void *v8;
  _QWORD v9[20];
  const void *v10;

  v3 = *a1;
  v4 = **a1;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)*a2 + 24))(v9);
  v5 = *(_QWORD *)v3[1];
  v6 = WebCore::AuthenticatorResponse::attachment(*a2);
  wkAuthenticatorAssertionResponse(&v10, (uint64_t)v9, v5, v6);
  v7 = v10;
  (*(void (**)(void))(*(_QWORD *)v4 + 16))();
  if (v7)
    CFRelease(v7);
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v9, v8);
}

void sub_1971795E0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<-[_WKWebAuthenticationPanel getAssertionWithChallenge:origin:options:completionHandler:]::$_2::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::{lambda(WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>> const&)#1},-[_WKWebAuthenticationPanel getAssertionWithChallenge:origin:options:completionHandler:]::$_2::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)::{lambda(WebCore::ExceptionData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  const __CFString *v5;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = (void *)MEMORY[0x1E0CB35C8];
  v4 = *a2;
  v7 = *MEMORY[0x1E0CB2D50];
  if (*((_QWORD *)a2 + 1))
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  v8[0] = v5;
  objc_msgSend(v3, "errorWithDomain:code:userInfo:", CFSTR("WKErrorDomain"), v4, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1));
  return (*(uint64_t (**)(void))(*(_QWORD *)v2 + 16))();
}

void wkAuthenticatorAssertionResponse(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  JSC::ArrayBuffer *v8;
  uint64_t v9;
  uint64_t v10;
  _WKAuthenticatorAssertionResponse *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  WTF *v26;
  unsigned int v27;

  v8 = *(JSC::ArrayBuffer **)(a2 + 136);
  if (v8)
  {
    v9 = JSC::ArrayBuffer::span(v8);
    v25 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v9, v10);
  }
  else
  {
    v25 = 0;
  }
  v11 = [_WKAuthenticatorAssertionResponse alloc];
  v12 = JSC::ArrayBuffer::span(*(JSC::ArrayBuffer **)(a2 + 8));
  v14 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v12, v13);
  if (*(_BYTE *)(a2 + 96))
  {
    v15 = (const void *)v14;
    WebCore::AuthenticationExtensionsClientOutputs::toCBOR((WebCore::AuthenticationExtensionsClientOutputs *)(a2 + 16));
    v16 = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v26, v27));
    v17 = JSC::ArrayBuffer::span(*(JSC::ArrayBuffer **)(a2 + 120));
    v19 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v17, v18);
    v20 = JSC::ArrayBuffer::span(*(JSC::ArrayBuffer **)(a2 + 128));
    v22 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v20, v21);
    v23 = 1;
    if (a4)
      v23 = 2;
    *a1 = -[_WKAuthenticatorAssertionResponse initWithClientDataJSON:rawId:extensionOutputsCBOR:authenticatorData:signature:userHandle:attachment:](v11, "initWithClientDataJSON:rawId:extensionOutputsCBOR:authenticatorData:signature:userHandle:attachment:", a3, v15, v16, v19, v22, v25, v23);
    if (v22)
      CFRelease(v22);
    if (v19)
      CFRelease(v19);
    if (v26)
      WTF::fastFree(v26, v24);
    if (v15)
      CFRelease(v15);
    if (v25)
      CFRelease(v25);
  }
  else
  {
    __break(1u);
  }
}

void sub_1971798B4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF *a11, int a12)
{
  const void *v12;
  const void *v13;
  const void *v14;

  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  if (a11)
    WTF::fastFree(a11, a2);
  if (v12)
    CFRelease(v12);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<-[_WKWebAuthenticationPanel getAssertionWithMediationRequirement:clientDataHash:options:completionHandler:]::$_3::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::{lambda(WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>> const&)#1},-[_WKWebAuthenticationPanel getAssertionWithMediationRequirement:clientDataHash:options:completionHandler:]::$_3::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)::{lambda(WebCore::ExceptionData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>(uint64_t **a1, WebCore::AuthenticatorResponse **a2)
{
  uint64_t v3;
  int v4;
  const void *v5;
  void *v6;
  _QWORD v7[20];
  const void *v8;

  v3 = **a1;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)*a2 + 24))(v7);
  v4 = WebCore::AuthenticatorResponse::attachment(*a2);
  wkAuthenticatorAssertionResponse(&v8, (uint64_t)v7, 0, v4);
  v5 = v8;
  (*(void (**)(void))(*(_QWORD *)v3 + 16))();
  if (v5)
    CFRelease(v5);
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v7, v6);
}

void sub_197179A70(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<-[_WKWebAuthenticationPanel getAssertionWithMediationRequirement:clientDataHash:options:completionHandler:]::$_3::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::{lambda(WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>> const&)#1},-[_WKWebAuthenticationPanel getAssertionWithMediationRequirement:clientDataHash:options:completionHandler:]::$_3::operator()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)::{lambda(WebCore::ExceptionData const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  const __CFString *v5;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v3 = (void *)MEMORY[0x1E0CB35C8];
  v4 = *a2;
  v7 = *MEMORY[0x1E0CB2D50];
  if (*((_QWORD *)a2 + 1))
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  v8[0] = v5;
  objc_msgSend(v3, "errorWithDomain:code:userInfo:", CFSTR("WKErrorDomain"), v4, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1));
  return (*(uint64_t (**)(void))(*(_QWORD *)v2 + 16))();
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::SpeculativeLoad(uint64_t a1, _DWORD *a2, _OWORD *a3, WebCore::ResourceRequest *a4, uint64_t *a5, __int16 a6, char a7, __int16 a8, uint64_t *a9)
{
  uint64_t v15;
  uint64_t v16;
  WebCore::FragmentedSharedBuffer *v17;
  void *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebKit::NetworkSession *v24;
  __int128 v25;
  const void *v26;
  CFTypeRef v27;
  WebKit::NetworkLoad *v28;
  void *v29;
  CFTypeRef v30;
  CFTypeRef v31;
  WTF::StringImpl *v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _OWORD v39[2];
  WTF *v40;
  WTF *v41;
  _BYTE v42[192];
  CFTypeRef v43;
  __int16 v44;
  char v45;
  _BYTE v46[2584];
  uint64_t v47;
  CFTypeRef cf;
  char v49;
  __int16 v50;
  char v51;
  __int16 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E34C4618;
  ++*a2;
  *(_QWORD *)(a1 + 8) = a2;
  v15 = *a9;
  *a9 = 0;
  *(_QWORD *)(a1 + 16) = v15;
  v16 = a1 + 24;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 24), a4);
  *(_QWORD *)(a1 + 224) = 0;
  v17 = (WebCore::FragmentedSharedBuffer *)WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 232));
  *(_QWORD *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 370) = *(_BYTE *)(a1 + 370) & 0xF1 | 4;
  WebCore::FragmentedSharedBuffer::create(v17);
  *(_QWORD *)(a1 + 488) = 0;
  WebCore::SharedBufferBuilder::initialize();
  v19 = *(unsigned int **)&v39[0];
  *(_QWORD *)&v39[0] = 0;
  if (v19)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v18);
  v20 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 496) = v20;
  *(_WORD *)(a1 + 504) = 0;
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(v21 + 16);
  *(_QWORD *)&v39[0] = *(_QWORD *)(v21 + 64);
  v23 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v22 + 208), v39);
  if (v23)
  {
    v24 = (WebKit::NetworkSession *)v23;
    WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v39);
    v25 = a3[1];
    v39[0] = *a3;
    v39[1] = v25;
    v45 = 1;
    v44 = 1;
    WebCore::ResourceRequestBase::operator=((uint64_t)v42, v16);
    v26 = *(const void **)(a1 + 216);
    if (v26)
      CFRetain(*(CFTypeRef *)(a1 + 216));
    v27 = v43;
    v43 = v26;
    if (v27)
      CFRelease(v27);
    v50 = a6;
    v51 = a7;
    v52 = a8;
    v28 = (WebKit::NetworkLoad *)WTF::fastMalloc((WTF *)0xC90);
    WebKit::NetworkLoad::NetworkLoad((uint64_t)v28, a1, (uint64_t)v39, v24);
    std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)(a1 + 224), v28);
    WebKit::NetworkLoad::startWithScheduling(*(unsigned int **)(a1 + 224));
    if (v49)
    {
      v30 = cf;
      cf = 0;
      if (v30)
        CFRelease(v30);
    }
    WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v29);
    if (v46[2560])
      WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v46);
    v31 = v43;
    v43 = 0;
    if (v31)
      CFRelease(v31);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v42);
    v33 = v41;
    v41 = 0;
    if (v33)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v33, v32);
    v34 = v40;
    v40 = 0;
    if (v34)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v34, v32);
  }
  else
  {
    WTF::RunLoop::main(0);
    v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v36 = &off_1E34C4940;
    v36[1] = v35;
    *(_QWORD *)&v39[0] = v36;
    WTF::RunLoop::dispatch();
    v37 = *(_QWORD *)&v39[0];
    *(_QWORD *)&v39[0] = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  return a1;
}

void WebKit::NetworkCache::SpeculativeLoad::~SpeculativeLoad(WebKit::NetworkCache::Entry **this)
{
  void *v2;
  unsigned int *v3;
  WebKit::NetworkCache::Entry *v4;
  WebKit::NetworkCache::Entry *v5;
  WebKit::NetworkCache::Entry *v6;
  WebKit::NetworkCache::Entry *v7;

  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100](this + 62, 0);
  v3 = (unsigned int *)this[61];
  this[61] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, v2);
  v4 = this[59];
  this[59] = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(this + 29), (WTF::StringImpl *)v2);
  std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](this + 28, 0);
  v5 = this[27];
  this[27] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(this + 3));
  v6 = this[2];
  this[2] = 0;
  if (v6)
    (*(void (**)(WebKit::NetworkCache::Entry *))(*(_QWORD *)v6 + 8))(v6);
  v7 = this[1];
  this[1] = 0;
  if (v7)
    WTF::RefCounted<WebKit::NetworkCache::Cache>::deref();
}

{
  WTF *v1;
  void *v2;

  WebKit::NetworkCache::SpeculativeLoad::~SpeculativeLoad(this);
  WTF::fastFree(v1, v2);
}

WebKit::NetworkCache::Entry *WebKit::NetworkCache::SpeculativeLoad::cancel(WebKit::NetworkCache::Entry *this)
{
  uint64_t v1;
  WebKit::NetworkLoad **v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;
  void *v7;
  WebKit::NetworkCache::Entry *v8;

  v2 = (WebKit::NetworkLoad **)((char *)this + 224);
  v1 = *((_QWORD *)this + 28);
  if (v1)
  {
    v3 = (uint64_t)this;
    v4 = *(_QWORD *)(v1 + 2992);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100](v2, 0);
    v8 = 0;
    WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()((uint64_t *)(v3 + 16), &v8);
    this = v8;
    if (v8)
    {
      WebKit::NetworkCache::Entry::~Entry(v8, v5);
      return (WebKit::NetworkCache::Entry *)WTF::fastFree(v6, v7);
    }
  }
  return this;
}

uint64_t WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(uint64_t *a1, WebKit::NetworkCache::Entry **a2)
{
  uint64_t v2;
  WebKit::NetworkCache::Entry *v3;
  WTF::StringImpl *v4;
  uint64_t result;
  WTF *v6;
  void *v7;
  WebKit::NetworkCache::Entry *v8;

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v8 = v3;
  WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(v2, &v8);
  result = (uint64_t)v8;
  if (v8)
  {
    WebKit::NetworkCache::Entry::~Entry(v8, v4);
    result = WTF::fastFree(v6, v7);
  }
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return result;
}

void WebKit::NetworkCache::SpeculativeLoad::willSendRedirectedRequest(WebKit::NetworkCache::Cache **a1, const WebCore::ResourceRequest *a2, const WebCore::ResourceRequest *a3, WebCore::ResourceRequest *a4, uint64_t *a5)
{
  WebKit::NetworkCache::Cache *v10;
  uint64_t v11;
  WebCore::NetworkStorageSession *v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  CFTypeRef v17;
  WTF::StringImpl *v18[24];
  CFTypeRef cf;

  v10 = a1[1];
  v11 = *((_QWORD *)v10 + 2);
  v18[0] = *((WTF::StringImpl **)v10 + 8);
  v12 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 216), v18);
  if (v12)
  {
    v13 = WebCore::NetworkStorageSession::maxAgeCacheCap(v12, a2);
    v15 = v14;
  }
  else
  {
    v15 = 0;
    v13 = 0;
  }
  WebKit::NetworkCache::Cache::storeRedirect(a2, a4, a1[1], a3, v13, v15, (uint64_t *)v18);
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100](a1 + 62, v18[0]);
  if (!a1[62])
  {
    WebKit::NetworkCache::Cache::makeRedirectEntry(a1[1], a2, a4, a3, (uint64_t *)v18);
    std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100](a1 + 62, v18[0]);
  }
  WebKit::NetworkCache::SpeculativeLoad::didComplete((WebKit::NetworkCache::SpeculativeLoad *)a1);
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v18);
  v16 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 16))(v16, v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = cf;
  cf = 0;
  if (v17)
    CFRelease(v17);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v18);
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::didComplete(WebKit::NetworkCache::SpeculativeLoad *this)
{
  WTF::RunLoop *v2;
  uint64_t result;
  WebKit::NetworkCache::Entry *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  void *v7;
  WebKit::NetworkCache::Entry *v8;

  v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  result = WTF::RunLoop::isCurrent(v2);
  if ((result & 1) != 0)
  {
    if (!*((_BYTE *)this + 504))
    {
      *((_BYTE *)this + 504) = 1;
      std::unique_ptr<WebKit::NetworkLoad>::reset[abi:sn180100]((WebKit::NetworkLoad **)this + 28, 0);
      v4 = (WebKit::NetworkCache::Entry *)*((_QWORD *)this + 62);
      if (v4)
      {
        *((_WORD *)v4 + 156) = *((_WORD *)v4 + 156) & 0xC3FF | 0x800;
        v4 = (WebKit::NetworkCache::Entry *)*((_QWORD *)this + 62);
      }
      *((_QWORD *)this + 62) = 0;
      v8 = v4;
      WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()((uint64_t *)this + 2, &v8);
      result = (uint64_t)v8;
      if (v8)
      {
        WebKit::NetworkCache::Entry::~Entry(v8, v5);
        return WTF::fastFree(v6, v7);
      }
    }
  }
  else
  {
    result = 165;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::didReceiveResponse(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  WebCore::ResourceResponseBase *v8;
  uint64_t v9;
  const void *v10;
  _QWORD *v11;
  void *v12;
  unsigned int *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebKit::NetworkCache::Entry **v16;
  uint64_t v17;
  WebKit::NetworkCache::Entry *v19;

  v8 = (WebCore::ResourceResponseBase *)(a1 + 232);
  WebCore::ResourceResponseBase::operator=(a1 + 232, a2);
  v9 = *(_QWORD *)(a2 + 240);
  if (v9)
    CFRetain(*(CFTypeRef *)(a2 + 240));
  v10 = *(const void **)(a1 + 472);
  *(_QWORD *)(a1 + 472) = v9;
  if (v10)
    CFRelease(v10);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 248);
  *(_BYTE *)(a1 + 505) = a3;
  v11 = (_QWORD *)WebCore::ResourceResponseBase::mimeType(v8);
  if (MEMORY[0x19AEABBCC](*v11, "multipart/x-mixed-replace", 25))
  {
    v13 = *(unsigned int **)(a1 + 488);
    *(_QWORD *)(a1 + 488) = 0;
    if (v13)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v12);
  }
  if (WebCore::ResourceResponseBase::httpStatusCode(v8) == 304 && (v14 = *(_QWORD *)(a1 + 496)) != 0)
  {
    WebKit::NetworkCache::Cache::update(*(_QWORD **)(a1 + 8), (WebCore::NetworkStorageSession *)(a1 + 24), v14, v8, a3, &v19);
    v15 = v19;
    v16 = (WebKit::NetworkCache::Entry **)(a1 + 496);
  }
  else
  {
    v16 = (WebKit::NetworkCache::Entry **)(a1 + 496);
    v15 = 0;
  }
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100](v16, v15);
  v17 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
}

unsigned int *WebKit::NetworkCache::SpeculativeLoad::didReceiveBuffer(WebKit::NetworkCache::SpeculativeLoad *this, const WebCore::FragmentedSharedBuffer *a2)
{
  unsigned int *result;
  WebCore::SharedBufferBuilder *v4;

  result = (unsigned int *)*((_QWORD *)this + 61);
  if (result)
  {
    v4 = (WebKit::NetworkCache::SpeculativeLoad *)((char *)this + 488);
    if (*((_QWORD *)a2 + 6) + *((_QWORD *)result + 6) > 0xA00000uLL)
    {
      *(_QWORD *)v4 = 0;
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
    }
    else
    {
      WebCore::SharedBufferBuilder::ensureBuffer(v4);
      return (unsigned int *)WebCore::FragmentedSharedBuffer::append();
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::didFinishLoading(uint64_t this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v2;
  unsigned int *v3;
  _QWORD *v4;
  WebKit::NetworkCache::Storage **v5;
  int v6;
  unsigned int v7;
  char v8;
  unsigned int *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebKit::NetworkCache::Entry *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  WebCore *v17;
  WebKit::NetworkCache::Cache *v18;
  char v19;
  unsigned int *v20;
  void *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  WebKit::NetworkCache::Entry *v25;

  if (!*(_BYTE *)(this + 504))
  {
    v2 = this;
    if (!*(_QWORD *)(this + 496))
    {
      v3 = *(unsigned int **)(this + 488);
      if (v3)
      {
        v4 = (_QWORD *)(this + 496);
        v5 = *(WebKit::NetworkCache::Storage ***)(this + 8);
        v6 = *(unsigned __int8 *)(this + 505);
        do
          v7 = __ldaxr(v3);
        while (__stlxr(v7 + 1, v3));
        v8 = v6 != 0;
        v24 = v3;
        v9 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v9 = off_1E34C4968;
        v23 = v9;
        WebKit::NetworkCache::Cache::store((WebKit::NetworkCache *)(v2 + 24), (WebCore::ResourceRequest *)(v2 + 232), v5, v8, (uint64_t *)&v24, (uint64_t *)&v23, (uint64_t *)&v25);
        v10 = v25;
        v25 = 0;
        std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v2 + 496), v10);
        v12 = v25;
        v25 = 0;
        if (v12)
        {
          WebKit::NetworkCache::Entry::~Entry(v12, v11);
          WTF::fastFree(v13, v14);
        }
        v15 = (uint64_t)v23;
        v23 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v16 = v24;
        v24 = 0;
        if (v16)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v16, v11);
        if (!*v4)
        {
          v17 = (WebCore *)WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)(v2 + 232));
          if (WebCore::isStatusCodeCacheableByDefault(v17))
          {
            v18 = *(WebKit::NetworkCache::Cache **)(v2 + 8);
            v19 = *(_BYTE *)(v2 + 505);
            WebCore::SharedBufferBuilder::take((WebCore::SharedBufferBuilder *)(v2 + 488));
            v20 = v23;
            v23 = 0;
            v24 = v20;
            WebKit::NetworkCache::Cache::makeEntry(v18, (const WebCore::ResourceRequest *)(v2 + 24), (const WebCore::ResourceRequest *)(v2 + 232), v19, (uint64_t *)&v24, (uint64_t *)&v25);
            std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v2 + 496), v25);
            if (v24)
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v24, v21);
            v22 = v23;
            v23 = 0;
            if (v22)
              WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v22, v21);
          }
        }
      }
    }
    return WebKit::NetworkCache::SpeculativeLoad::didComplete((WebKit::NetworkCache::SpeculativeLoad *)v2);
  }
  return this;
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::didFailLoading(uint64_t this, const WebCore::ResourceError *a2)
{
  WebKit::NetworkCache::SpeculativeLoad *v2;

  if (!*(_BYTE *)(this + 504))
  {
    v2 = (WebKit::NetworkCache::SpeculativeLoad *)this;
    std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(this + 496), 0);
    return WebKit::NetworkCache::SpeculativeLoad::didComplete(v2);
  }
  return this;
}

uint64_t WebKit::NetworkCache::requestsHeadersMatch(WebKit::NetworkCache *this, const WebCore::ResourceRequest *a2, const WebCore::ResourceRequest *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  CFTypeRef v21;
  CFTypeRef v23[24];
  CFTypeRef cf;
  WTF *v25;

  WebCore::ResourceRequest::ResourceRequest(v23, this);
  WebCore::ResourceRequestBase::makeUnconditional((WebCore::ResourceRequestBase *)v23);
  v4 = WebCore::ResourceRequestBase::httpHeaderFields((WebCore::ResourceRequestBase *)v23);
  v5 = WebCore::ResourceRequestBase::httpHeaderFields(a2);
  v6 = *(unsigned int *)(v4 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(v5 + 12) || (v7 = *(_DWORD *)(v4 + 28), v7 != *(_DWORD *)(v5 + 28)))
  {
LABEL_23:
    v18 = 0;
    goto LABEL_24;
  }
  if ((_DWORD)v6)
  {
    v8 = *(_QWORD *)v4;
    v9 = *(_QWORD *)v4 + 16 * v6;
    while (1)
    {
      WebCore::HTTPHeaderMap::get();
      v12 = WTF::equal(v25, *(const WTF::StringImpl **)(v8 + 8), v10);
      v13 = v25;
      v25 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      if ((v12 & 1) == 0)
        goto LABEL_23;
      v8 += 16;
      if (v8 == v9)
      {
        v7 = *(_DWORD *)(v4 + 28);
        break;
      }
    }
  }
  if (v7)
  {
    v14 = *(_QWORD *)(v4 + 16);
    v15 = v14 + 16 * v7;
    do
    {
      WebCore::HTTPHeaderMap::getUncommonHeader();
      v18 = WTF::equal(v25, *(const WTF::StringImpl **)(v14 + 8), v16);
      v19 = v25;
      v25 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
      v14 += 16;
      if (v14 == v15)
        v20 = 0;
      else
        v20 = v18;
    }
    while ((v20 & 1) != 0);
  }
  else
  {
    v18 = 1;
  }
LABEL_24:
  v21 = cf;
  cf = 0;
  if (v21)
    CFRelease(v21);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v23);
  return v18;
}

void WebKit::NetworkCache::SpeculativeLoadManager::~SpeculativeLoadManager(WebKit::NetworkCache::SpeculativeLoadManager *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 7);
  if (v3)
    WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 6);
  if (v4)
    WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 5);
  if (v5)
    WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(v5, a2);
  v6 = *((_QWORD *)this + 4);
  if (v6)
    WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(v6, a2);
  v7 = *((_QWORD *)this + 3);
  if (v7)
    WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::deallocateTable(v7, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

uint64_t WebKit::NetworkCache::SpeculativeLoadManager::canRetrieve(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::DiagnosticLoggingKeys *v11;
  unsigned int *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  uint64_t v17;
  int v19;
  int v20;
  unsigned int i;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int j;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int k;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WebCore::DiagnosticLoggingKeys *v39;
  uint64_t v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;

  v7 = (_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 48);
  if (!v8)
    goto LABEL_2;
  v19 = 0;
  v20 = *(_DWORD *)(v8 - 8);
  for (i = *(_DWORD *)(a2 + 32); ; i = ++v19 + v22)
  {
    v22 = i & v20;
    a1 = v8 + 80 * (i & v20);
    v23 = *(_QWORD *)(a1 + 16);
    if (v23 != -1)
    {
      if (!v23)
        goto LABEL_2;
      a1 = WebKit::NetworkCache::Key::operator==(a1, a2, a3);
      if ((a1 & 1) != 0)
        break;
    }
  }
  v34 = *(_QWORD *)(v8 + 80 * v22 + 72);
  if (v34)
  {
    if (!*(_BYTE *)(v34 + 264)
      || (a1 = WebKit::NetworkCache::requestsHeadersMatch((WebKit::NetworkCache *)(v34 + 64), a3, a3), (a1 & 1) != 0))
    {
      v11 = *(WebCore::DiagnosticLoggingKeys **)(v7[1] + 16);
      v12 = (unsigned int *)((char *)v11 + 120);
      do
        v35 = __ldaxr(v12);
      while (__stlxr(v35 + 1, v12));
      if (*(_BYTE *)(v34 + 264))
        WebCore::DiagnosticLoggingKeys::successfulSpeculativeWarmupWithRevalidationKey((WebCore::DiagnosticLoggingKeys *)a1);
      else
        WebCore::DiagnosticLoggingKeys::successfulSpeculativeWarmupWithoutRevalidationKey((WebCore::DiagnosticLoggingKeys *)a1);
      WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage(v11, *a4, (uint64_t *)&v50);
      v37 = v50;
      v50 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v36);
        else
          *(_DWORD *)v37 -= 2;
      }
      do
        v16 = __ldaxr(v12);
      while (__stlxr(v16 - 1, v12));
      v17 = 1;
      goto LABEL_11;
    }
    v11 = *(WebCore::DiagnosticLoggingKeys **)(v7[1] + 16);
    v12 = (unsigned int *)((char *)v11 + 120);
    do
      v47 = __ldaxr(v12);
    while (__stlxr(v47 + 1, v12));
    if (*(_BYTE *)(v34 + 264))
      WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithRevalidationKey((WebCore::DiagnosticLoggingKeys *)a1);
    else
      WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithoutRevalidationKey((WebCore::DiagnosticLoggingKeys *)a1);
    WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage(v11, *a4, (uint64_t *)&v50);
    v49 = v50;
    v50 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v48);
      else
        *(_DWORD *)v49 -= 2;
    }
    do
      v16 = __ldaxr(v12);
    while (__stlxr(v16 - 1, v12));
  }
  else
  {
LABEL_2:
    v9 = v7[4];
    if (v9)
    {
      v24 = 0;
      v25 = *(_DWORD *)(v9 - 8);
      for (j = *(_DWORD *)(a2 + 32); ; j = v24 + v27)
      {
        v27 = j & v25;
        a1 = v9 + 80 * (j & v25);
        v28 = *(_QWORD *)(a1 + 16);
        if (v28 != -1)
        {
          if (!v28)
            goto LABEL_3;
          a1 = WebKit::NetworkCache::Key::operator==(a1, a2, a3);
          if ((a1 & 1) != 0)
            break;
        }
        ++v24;
      }
      v38 = *(_QWORD *)(v9 + 80 * v27 + 72);
      if (v38)
      {
        v39 = (WebCore::DiagnosticLoggingKeys *)WebKit::NetworkCache::requestsHeadersMatch((WebKit::NetworkCache *)(v38 + 24), a3, a3);
        if ((v39 & 1) != 0)
          return 1;
        v11 = *(WebCore::DiagnosticLoggingKeys **)(v7[1] + 16);
        v12 = (unsigned int *)((char *)v11 + 120);
        do
          v44 = __ldaxr(v12);
        while (__stlxr(v44 + 1, v12));
        WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithRevalidationKey(v39);
        WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage(v11, *a4, (uint64_t *)&v50);
        v46 = v50;
        v50 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v45);
          else
            *(_DWORD *)v46 -= 2;
        }
        do
          v16 = __ldaxr(v12);
        while (__stlxr(v16 - 1, v12));
        goto LABEL_10;
      }
    }
LABEL_3:
    v10 = v7[7];
    if (v10)
    {
      v29 = 0;
      v30 = *(_DWORD *)(v10 - 8);
      for (k = *(_DWORD *)(a2 + 32); ; k = v29 + v32)
      {
        v32 = k & v30;
        a1 = v10 + 80 * (k & v30);
        v33 = *(_QWORD *)(a1 + 16);
        if (v33 != -1)
        {
          if (!v33)
            goto LABEL_4;
          a1 = WebKit::NetworkCache::Key::operator==(a1, a2, a3);
          if ((a1 & 1) != 0)
            break;
        }
        ++v29;
      }
      v40 = *(_QWORD *)(v10 + 80 * v32 + 72);
      v11 = *(WebCore::DiagnosticLoggingKeys **)(v7[1] + 16);
      v12 = (unsigned int *)((char *)v11 + 120);
      do
        v41 = __ldaxr(v12);
      while (__stlxr(v41 + 1, v12));
      if (v40)
      {
        WebCore::DiagnosticLoggingKeys::entryWronglyNotWarmedUpKey((WebCore::DiagnosticLoggingKeys *)a1);
        WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage(v11, *a4, (uint64_t *)&v50);
        v43 = v50;
        v50 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v42);
          else
            *(_DWORD *)v43 -= 2;
        }
        do
          v16 = __ldaxr(v12);
        while (__stlxr(v16 - 1, v12));
        goto LABEL_10;
      }
    }
    else
    {
LABEL_4:
      v11 = *(WebCore::DiagnosticLoggingKeys **)(v7[1] + 16);
      v12 = (unsigned int *)((char *)v11 + 120);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    WebCore::DiagnosticLoggingKeys::unknownEntryRequestKey((WebCore::DiagnosticLoggingKeys *)a1);
    WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage(v11, *a4, (uint64_t *)&v50);
    v15 = v50;
    v50 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    do
      v16 = __ldaxr(v12);
    while (__stlxr(v16 - 1, v12));
  }
LABEL_10:
  v17 = 0;
LABEL_11:
  if (v16 == 1)
  {
    atomic_store(1u, v12);
    (*(void (**)(WebCore::DiagnosticLoggingKeys *))(*(_QWORD *)v11 + 8))(v11);
  }
  return v17;
}

WTF::StringImpl *WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage(WebCore::DiagnosticLoggingKeys *a1, uint64_t a2, uint64_t *a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  WebCore::DiagnosticLoggingKeys::networkCacheKey(a1);
  WebKit::NetworkProcess::logDiagnosticMessage(a1, a2, (uint64_t *)&v8, a3, 1);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkCache::SpeculativeLoadManager::retrieve(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::RunLoop *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int i;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v6 = (WTF::StringImpl *)(a1 + 48);
  v7 = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>((uint64_t *)(a1 + 48), a2, a3);
  v8 = (WTF::RunLoop *)WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::take(&v38, v6, v7);
  v10 = v38;
  if (v38)
  {
    WTF::RunLoop::main(v8);
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    v12 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v10 + 56) = 0;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E34C4990;
    v13[1] = v11;
    v13[2] = v12;
    v37 = v13;
    WTF::RunLoop::dispatch();
    if (v37)
      (*(void (**)(_QWORD *))(*v37 + 8))(v37);
    return std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100](v10);
  }
  v17 = *(_QWORD *)(a1 + 40);
  v15 = (uint64_t *)(a1 + 40);
  v16 = v17;
  if (v17
    || (WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v15, 0), (v16 = *v15) != 0))
  {
    v18 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v18 = 0;
  }
  v19 = 0;
  v20 = *(_DWORD *)(a2 + 32);
  for (i = 1; ; ++i)
  {
    v22 = v20 & v18;
    v23 = (uint64_t *)(v16 + 80 * (v20 & v18));
    v24 = v23[2];
    if (v24 == -1)
    {
      v19 = v16 + 80 * v22;
      goto LABEL_14;
    }
    if (!v24)
      break;
    result = WebKit::NetworkCache::Key::operator==(v16 + 80 * v22, a2, v9);
    if ((result & 1) != 0)
      goto LABEL_26;
LABEL_14:
    v20 = i + v22;
  }
  if (v19)
  {
    *(_OWORD *)v19 = 0u;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_QWORD *)(v19 + 72) = 0;
    --*(_DWORD *)(*v15 - 16);
    v23 = (uint64_t *)v19;
  }
  WebKit::NetworkCache::Key::operator=((uint64_t)v23, a2);
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v25 = 0;
  v25[1] = 0;
  result = std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](v23 + 9, v25);
  v26 = *v15;
  if (*v15)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *v15;
  if (*v15)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_25:
      result = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v15, v23);
      v23 = (uint64_t *)result;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_25;
  }
LABEL_26:
  v32 = v23[9];
  v33 = *(unsigned int *)(v32 + 12);
  if ((_DWORD)v33 == *(_DWORD *)(v32 + 8))
  {
    result = WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)v23[9], v33 + 1, (unint64_t)a3);
    v33 = *(unsigned int *)(v32 + 12);
    v34 = v33 + 1;
    v35 = *(_QWORD *)v32;
    v36 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
  }
  else
  {
    v34 = v33 + 1;
    v35 = *(_QWORD *)v32;
    v36 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
  }
  *(_QWORD *)(v35 + 8 * v33) = v36;
  *(_DWORD *)(v32 + 12) = v34;
  return result;
}

BOOL WebKit::NetworkCache::SpeculativeLoadManager::shouldRegisterLoad(WebKit::NetworkCache::SpeculativeLoadManager *this, const WebCore::ResourceRequest *a2)
{
  _QWORD *v2;
  WTF::StringImpl *v3;
  _BOOL8 v4;
  WTF::StringImpl *v6;

  v2 = (_QWORD *)WebCore::ResourceRequestBase::httpMethod(this);
  if (!MEMORY[0x19AEABBCC](*v2, "GET", 3))
    return 0;
  WebCore::ResourceRequestBase::httpHeaderField();
  if (!v6)
    return 1;
  v4 = *((_DWORD *)v6 + 1) == 0;
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v3);
  else
    *(_DWORD *)v6 -= 2;
  return v4;
}

uint64_t WebKit::NetworkCache::SpeculativeLoadManager::registerLoad(uint64_t a1, const WebCore::ResourceRequest *a2, WebKit::NetworkCache::SpeculativeLoadManager *this, _DWORD **a4, __int16 a5, char a6, __int16 a7)
{
  uint64_t result;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  CFTypeRef *v18;
  CFTypeRef *v19;
  uint64_t v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebKit::NetworkCache::SubresourceLoad *v26;
  WTF *v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  int i;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v46;
  WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  __int16 v67;
  char v68;
  __int16 v69;
  __int128 v70;
  __int128 v71;
  _QWORD *v72;
  WTF::StringImpl *v73[2];
  WTF::StringImpl *v74[2];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  result = WebKit::NetworkCache::SpeculativeLoadManager::shouldRegisterLoad(this, a2);
  if ((_DWORD)result)
  {
    v15 = *((unsigned __int8 *)this + 147);
    v16 = (uint64_t *)(a1 + 24);
    result = WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(*(_QWORD *)(a1 + 24), a2);
    v17 = result;
    if (v15 == 1)
    {
      v67 = a5;
      if (result && !*(_BYTE *)(result + 192))
      {
        *(_BYTE *)(result + 192) = 1;
        WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::saveToDiskIfReady((WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)result);
        (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 104) + 16))(*(_QWORD *)(v17 + 104));
      }
      v69 = a7;
      v29 = *(unsigned int **)(a1 + 16);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
      v31 = *((_OWORD *)a2 + 1);
      *(_OWORD *)v73 = *(_OWORD *)a2;
      *(_OWORD *)v74 = v31;
      v32 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v32 = off_1E34C49B8;
      *(_QWORD *)(v32 + 8) = a1;
      *(_OWORD *)(v32 + 16) = *(_OWORD *)v73;
      *(_OWORD *)(v32 + 32) = *(_OWORD *)v74;
      v33 = WTF::fastMalloc((WTF *)0xC8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = v29;
      WebKit::NetworkCache::Key::Key(v33 + 16, (uint64_t)a4);
      *(_QWORD *)(v33 + 88) = 0;
      *(_QWORD *)(v33 + 96) = 0;
      *(_QWORD *)(v33 + 104) = v32;
      v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v34 = off_1E34C4770;
      v34[1] = v33;
      *(_QWORD *)&v70 = v34;
      PAL::HysteresisActivity::HysteresisActivity(v33 + 112, (uint64_t *)&v70, 5.0);
      v35 = v70;
      *(_QWORD *)&v70 = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v68 = a6;
      *(_QWORD *)(v33 + 168) = 0;
      *(_QWORD *)(v33 + 176) = 0;
      *(_DWORD *)(v33 + 191) = 0;
      *(_QWORD *)(v33 + 184) = 0;
      PAL::HysteresisActivity::impulse((_BYTE *)(v33 + 112));
      WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v29);
      ++*(_DWORD *)v33;
      v36 = *v16;
      if (*v16
        || (WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::expand((uint64_t *)(a1 + 24)),
            (v36 = *v16) != 0))
      {
        v37 = *(_DWORD *)(v36 - 8);
      }
      else
      {
        v37 = 0;
      }
      LODWORD(v73[0]) = -1640531527;
      WORD2(v73[0]) = 0;
      BYTE6(v73[0]) = 0;
      WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)v73, (_QWORD *)a2 + 1, (_QWORD *)a2 + 2);
      v38 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v73);
      v40 = 0;
      for (i = 1; ; ++i)
      {
        v42 = v38 & v37;
        v43 = v36 + 40 * (v38 & v37);
        v44 = *(_QWORD *)(v43 + 8);
        if (!v44 && *(_OWORD *)(v43 + 16) == 0)
          break;
        if (v44 == *((_QWORD *)a2 + 1)
          && *(_QWORD *)(v43 + 16) == *((_QWORD *)a2 + 2)
          && *(_QWORD *)(v43 + 24) == *((_QWORD *)a2 + 3))
        {
          WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref((WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)v33, v39);
          goto LABEL_40;
        }
        if (v44 == -1)
          v40 = v36 + 40 * v42;
        v38 = i + v42;
      }
      if (v40)
      {
        *(_QWORD *)(v40 + 32) = 0;
        *(_OWORD *)v40 = 0u;
        *(_OWORD *)(v40 + 16) = 0u;
        --*(_DWORD *)(*v16 - 16);
        v43 = v40;
      }
      v46 = *((_OWORD *)a2 + 1);
      *(_OWORD *)v43 = *(_OWORD *)a2;
      *(_OWORD *)(v43 + 16) = v46;
      v47 = *(WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad **)(v43 + 32);
      *(_QWORD *)(v43 + 32) = v33;
      if (v47)
        WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v47, v39);
      v48 = *v16;
      if (*v16)
        v49 = *(_DWORD *)(v48 - 12) + 1;
      else
        v49 = 1;
      *(_DWORD *)(v48 - 12) = v49;
      v50 = *v16;
      if (*v16)
        v51 = *(_DWORD *)(v50 - 12);
      else
        v51 = 0;
      v52 = (*(_DWORD *)(v50 - 16) + v51);
      v53 = *(unsigned int *)(v50 - 4);
      if (v53 > 0x400)
      {
        if (v53 > 2 * v52)
          goto LABEL_40;
      }
      else if (3 * v53 > 4 * v52)
      {
        goto LABEL_40;
      }
      WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::expand((uint64_t *)(a1 + 24));
LABEL_40:
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
      v54 = *(unsigned int **)a1;
      if (*(_QWORD *)a1)
      {
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 + 1, v54));
      }
      v56 = *((_OWORD *)a2 + 1);
      v70 = *(_OWORD *)a2;
      v71 = v56;
      v57 = (*((unsigned __int8 *)this + 148) >> 2) & 1;
      v58 = WTF::fastMalloc((WTF *)0x48);
      *(_QWORD *)v58 = &off_1E34C49E0;
      *(_QWORD *)(v58 + 8) = a1;
      *(_QWORD *)(v58 + 16) = v54;
      *(_OWORD *)(v58 + 24) = v70;
      *(_OWORD *)(v58 + 40) = v71;
      *(_QWORD *)(v58 + 56) = v33;
      *(_BYTE *)(v58 + 64) = v57;
      *(_WORD *)(v58 + 65) = v67;
      *(_BYTE *)(v58 + 67) = v68;
      *(_WORD *)(v58 + 68) = v69;
      v59 = *(_QWORD *)(a1 + 16) + 28;
      if ((_MergedGlobals_71 & 1) == 0)
      {
        v73[0] = (WTF::StringImpl *)"SubResources";
        v73[1] = (WTF::StringImpl *)13;
        WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE729F8, (uint64_t)v73);
        _MergedGlobals_71 = 1;
      }
      WebKit::NetworkCache::Key::Key((WTF::SHA1 *)v73, a4, &qword_1ECE729F8, a4 + 3, a4 + 2, v59);
      v60 = *(_QWORD *)(a1 + 16);
      v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v61 = &off_1E34C4AA8;
      v61[1] = v58;
      v72 = v61;
      WebKit::NetworkCache::Storage::retrieve(v60, (uint64_t)v73, 2, (uint64_t *)&v72);
      v63 = (uint64_t)v72;
      v72 = 0;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      v64 = v74[1];
      v74[1] = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, v62);
        else
          *(_DWORD *)v64 -= 2;
      }
      v65 = v74[0];
      v74[0] = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, v62);
        else
          *(_DWORD *)v65 -= 2;
      }
      v66 = v73[1];
      v73[1] = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v62);
        else
          *(_DWORD *)v66 -= 2;
      }
      result = (uint64_t)v73[0];
      v73[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v62);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else if (result)
    {
      v18 = (CFTypeRef *)WTF::fastMalloc((WTF *)0x110);
      v19 = WebCore::ResourceRequest::ResourceRequest(v18, this);
      WebKit::NetworkCache::Key::Key((uint64_t)(v19 + 25), (uint64_t)a4);
      v73[0] = (WTF::StringImpl *)v18;
      v20 = *(unsigned int *)(v17 + 100);
      if ((_DWORD)v20 == *(_DWORD *)(v17 + 96))
      {
        v21 = (uint64_t *)WTF::Vector<std::unique_ptr<WebKit::NetworkCache::SubresourceLoad>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 88, v20 + 1, (unint64_t)v73);
        v23 = *(unsigned int *)(v17 + 100);
        v24 = *(_QWORD *)(v17 + 88);
        v25 = *v21;
        *v21 = 0;
        *(_QWORD *)(v24 + 8 * v23) = v25;
        v26 = v73[0];
        *(_DWORD *)(v17 + 100) = v23 + 1;
        v73[0] = 0;
        if (v26)
        {
          WebKit::NetworkCache::SubresourceLoad::~SubresourceLoad(v26, v22);
          WTF::fastFree(v27, v28);
        }
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v17 + 88) + 8 * v20) = v18;
        *(_DWORD *)(v17 + 100) = v20 + 1;
      }
      return (uint64_t)PAL::HysteresisActivity::impulse((_BYTE *)(v17 + 112));
    }
  }
  return result;
}

uint64_t WebKit::NetworkCache::SpeculativeLoadManager::registerMainResourceLoadResponse(uint64_t a1, const WebCore::ResourceRequest *a2, WebKit::NetworkCache::SpeculativeLoadManager *this, WebCore::ResourceResponseBase *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  result = WebKit::NetworkCache::SpeculativeLoadManager::shouldRegisterLoad(this, a2);
  if ((_DWORD)result)
  {
    result = WebCore::ResourceResponseBase::isRedirection(a4);
    if ((result & 1) == 0)
    {
      result = WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(*(_QWORD *)(a1 + 24), a2);
      if (result)
      {
        *(_BYTE *)(result + 194) = 1;
        v8 = *(unsigned int *)(result + 188);
        if ((_DWORD)v8)
        {
          v9 = *(uint64_t **)(result + 176);
          v10 = 8 * v8;
          do
          {
            v11 = *v9++;
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
            v10 -= 8;
          }
          while (v10);
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::SpeculativeLoadManager::addPreloadedEntry(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4)
{
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *result;
  uint64_t v43;
  WTF::StringImpl *v44[2];
  WTF::StringImpl *v45[2];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unsigned int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  WebKit::NetworkCache::Key::Key((uint64_t)&v51, *a2);
  v8 = (uint64_t *)(a1 + 48);
  v43 = a1;
  WebKit::NetworkCache::Key::Key((uint64_t)v44, (uint64_t)&v51);
  v9 = a3[1];
  v49 = *a3;
  v50 = v9;
  v10 = WTF::fastMalloc((WTF *)0x110);
  v11 = *a2;
  *a2 = 0;
  v12 = WTF::fastMalloc((WTF *)0x78);
  *(_QWORD *)v12 = &off_1E34C47C0;
  *(_QWORD *)(v12 + 8) = v43;
  *(WTF::StringImpl **)(v12 + 16) = v44[0];
  v13 = v44[1];
  *(_OWORD *)v44 = 0u;
  *(_QWORD *)(v12 + 24) = v13;
  *(WTF::StringImpl **)(v12 + 32) = v45[0];
  v14 = v45[1];
  *(_OWORD *)v45 = 0u;
  *(_QWORD *)(v12 + 40) = v14;
  v15 = v46;
  v16 = v47;
  *(_QWORD *)(v12 + 80) = v48;
  *(_OWORD *)(v12 + 48) = v15;
  *(_OWORD *)(v12 + 64) = v16;
  v17 = v49;
  *(_OWORD *)(v12 + 104) = v50;
  *(_OWORD *)(v12 + 88) = v17;
  WebCore::TimerBase::TimerBase((WebCore::TimerBase *)v10);
  *(_QWORD *)v10 = off_1E34B3740;
  *(_QWORD *)(v10 + 48) = v12;
  WebCore::TimerBase::start();
  *(_QWORD *)(v10 + 56) = v11;
  *(_BYTE *)(v10 + 64) = 0;
  *(_BYTE *)(v10 + 264) = 0;
  if (*(_BYTE *)(a4 + 200))
  {
    std::construct_at[abi:sn180100]<WebCore::ResourceRequest,WebCore::ResourceRequest,WebCore::ResourceRequest*>(v10 + 64, a4);
    *(_BYTE *)(v10 + 264) = 1;
  }
  v19 = *v8;
  if (*v8
    || (WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v8),
        (v19 = *v8) != 0))
  {
    v20 = *(_DWORD *)(v19 - 8);
  }
  else
  {
    v20 = 0;
  }
  v21 = 0;
  v22 = 1;
  v23 = v55;
  while (1)
  {
    v24 = v23 & v20;
    v25 = v19 + 80 * (v23 & v20);
    v26 = *(_QWORD *)(v25 + 16);
    if (v26 == -1)
    {
      v21 = v19 + 80 * v24;
      goto LABEL_12;
    }
    if (!v26)
      break;
    if (WebKit::NetworkCache::Key::operator==(v19 + 80 * v24, (uint64_t)&v51, v18))
    {
      std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100](v10);
      goto LABEL_26;
    }
LABEL_12:
    v23 = v22 + v24;
    ++v22;
  }
  if (v21)
  {
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_QWORD *)(v21 + 72) = 0;
    --*(_DWORD *)(*v8 - 16);
    v25 = v21;
  }
  WebKit::NetworkCache::Key::operator=(v25, (uint64_t)&v51);
  v27 = *(_QWORD *)(v25 + 72);
  *(_QWORD *)(v25 + 72) = v10;
  if (v27)
    std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100](v27);
  v28 = *v8;
  if (*v8)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v31 = *v8;
  if (*v8)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 <= 2 * v33)
LABEL_25:
      WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v8);
  }
  else if (3 * v34 <= 4 * v33)
  {
    goto LABEL_25;
  }
LABEL_26:
  v35 = v45[1];
  v45[1] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v30);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = v45[0];
  v45[0] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v30);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = v44[1];
  v44[1] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v30);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = v44[0];
  v44[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v30);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = v54;
  v54 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v30);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v53;
  v53 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v30);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v52;
  v52 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v30);
    else
      *(_DWORD *)v41 -= 2;
  }
  result = v51;
  v51 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkCache::SpeculativeLoadManager::satisfyPendingRequests(WebKit::NetworkCache::SpeculativeLoadManager *this, const WebKit::NetworkCache::Key *a2, WebKit::NetworkCache::Entry *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v7;
  int v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  WebKit::NetworkCache::Entry *v24;
  WebKit::NetworkCache::Entry *v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  WebKit::NetworkCache::Entry *v31;

  v3 = (uint64_t *)((char *)this + 40);
  v4 = *((_QWORD *)this + 5);
  if (!v4)
    return 0;
  v7 = 0;
  v8 = *(_DWORD *)(v4 - 8);
  for (i = *((_DWORD *)a2 + 8); ; i = ++v7 + v10)
  {
    v10 = i & v8;
    v11 = v4 + 80 * (i & v8);
    v12 = *(_QWORD *)(v11 + 16);
    if (v12 != -1)
    {
      if (!v12)
      {
        v13 = *v3;
        if (!*v3)
          return 0;
        v11 = v13 + 80 * *(unsigned int *)(v13 - 4);
        goto LABEL_10;
      }
      if ((WebKit::NetworkCache::Key::operator==(v4 + 80 * v10, (uint64_t)a2, a3) & 1) != 0)
        break;
    }
  }
  v13 = *v3;
  if (!*v3)
    goto LABEL_11;
LABEL_10:
  v13 += 80 * *(unsigned int *)(v13 - 4);
LABEL_11:
  if (v13 == v11)
    return 0;
  v14 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v11 + 72) = 0;
  v15 = *v3;
  if (!*v3 || (v15 += 80 * *(unsigned int *)(v15 - 4), v15 != v11))
  {
    if (v15 != v11)
    {
      WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebKit::NetworkCache::Key>,WebKit::NetworkCache::Key>((WTF::StringImpl **)v11, a2);
      std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)(v11 + 72), 0);
      ++*(_DWORD *)(*v3 - 16);
      v16 = *v3;
      v17 = *v3 ? *(_DWORD *)(v16 - 12) - 1 : -1;
      *(_DWORD *)(v16 - 12) = v17;
      v18 = *v3;
      if (*v3)
      {
        v19 = 6 * *(_DWORD *)(v18 - 12);
        v20 = *(_DWORD *)(v18 - 4);
        if (v19 < v20 && v20 >= 9)
          WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(v3, v20 >> 1, 0);
      }
    }
  }
  if (!v14)
    return 0;
  v21 = *(unsigned int *)(v14 + 12);
  if ((_DWORD)v21)
  {
    v22 = *(uint64_t **)v14;
    v23 = 8 * v21;
    do
    {
      if (a3)
      {
        v24 = (WebKit::NetworkCache::Entry *)WTF::fastMalloc((WTF *)0x300);
        v31 = WebKit::NetworkCache::Entry::Entry(v24, a3);
      }
      else
      {
        v31 = 0;
      }
      WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(*v22, &v31);
      v25 = v31;
      v31 = 0;
      if (v25)
      {
        WebKit::NetworkCache::Entry::~Entry(v25, a2);
        WTF::fastFree(v26, v27);
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  v28 = (WTF *)WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, a2);
  WTF::fastFree(v28, v29);
  return 1;
}

WebKit::NetworkCache::Entry *WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(uint64_t a1, WebKit::NetworkCache::Entry **a2)
{
  WebKit::NetworkCache::Entry *v2;
  WTF::StringImpl *v3;
  WebKit::NetworkCache::Entry *result;
  WTF *v5;
  void *v6;
  WebKit::NetworkCache::Entry *v7;

  v2 = *a2;
  *a2 = 0;
  v7 = v2;
  (*(void (**)(uint64_t, WebKit::NetworkCache::Entry **))(*(_QWORD *)a1 + 16))(a1, &v7);
  result = v7;
  v7 = 0;
  if (result)
  {
    WebKit::NetworkCache::Entry::~Entry(result, v3);
    return (WebKit::NetworkCache::Entry *)WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebKit::NetworkCache::constructRevalidationRequest(WebKit::NetworkCache *this, const WebKit::NetworkCache::Key *a2, const WebKit::NetworkCache::SubresourceInfo *a3, const WebKit::NetworkCache::Entry *a4)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _BYTE v13[16];
  _BYTE v14[16];

  WebCore::ResourceRequest::ResourceRequest(this, (const WebKit::NetworkCache::Key *)((char *)a2 + 16));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v13, (const WebKit::NetworkCache::SubresourceInfo *)((char *)a3 + 136));
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v14, (const WebKit::NetworkCache::SubresourceInfo *)((char *)a3 + 152));
  WebCore::ResourceRequestBase::setHTTPHeaderFields();
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v14);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v13);
  WebCore::ResourceRequestBase::setFirstPartyForCookies(this, (const WebKit::NetworkCache::SubresourceInfo *)((char *)a3 + 96));
  WebCore::ResourceRequestBase::setIsSameSite(this);
  WebCore::ResourceRequestBase::setIsTopSite(this);
  WebCore::ResourceRequestBase::setIsAppInitiated(this);
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
    WebCore::ResourceRequestBase::setCachePartition(this, a2);
  WebCore::ResourceRequestBase::makeUnconditional(this);
  if (a4)
  {
    WebCore::ResourceResponseBase::httpHeaderField();
    if (v12 && *((_DWORD *)v12 + 1))
      WebCore::ResourceRequestBase::setHTTPHeaderField();
    WebCore::ResourceResponseBase::httpHeaderField();
    v9 = v11;
    if (v11)
    {
      if (*((_DWORD *)v11 + 1))
      {
        WebCore::ResourceRequestBase::setHTTPHeaderField();
        v9 = v11;
      }
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return WebCore::ResourceRequestBase::setPriority();
}

void WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(uint64_t a1, uint64_t a2, const WebKit::NetworkCache::Entry **a3, __int128 *a4, __int16 a5, char a6, __int16 a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const WebKit::NetworkCache::Entry *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebKit::NetworkSession *v27;
  __int128 v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  __int128 v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  WebKit::NetworkCache::Entry *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::RefCountedBase *v43;
  uint64_t v44;
  __int128 v45;
  WTF::StringImpl *v46;
  WTF *v47;
  void *v48;
  const WTF::StringImpl *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  int i;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  WTF *v61;
  void *v62;
  WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  CFTypeRef v68;
  void *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::RefCountedBase *v72;
  WTF::RefCountedBase *v73;
  CFTypeRef v74;
  const void *v75;
  _QWORD *v76;
  WTF::StringImpl *v77;
  WebKit::NetworkLoad **v78;
  void *v79;
  CFTypeRef v80;
  const void *v81;
  WTF::StringImpl *v82;
  WTF *v83;
  WTF *v84;
  _DWORD *v85;
  __int128 v86;
  WebKit::NetworkCache::Entry *v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  _DWORD *v91;
  __int128 v92;
  WTF::StringImpl *v93;
  WebKit::NetworkCache::Entry *v94;
  __int128 v95;
  __int128 v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  WTF::StringImpl *v101;
  WebKit::NetworkCache::Entry *v102;
  WTF *v103;
  void *v104;
  CFTypeRef v105;
  _DWORD *v106;
  uint64_t v107;
  WebKit::NetworkCache::Entry **v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112[19];
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF::RefCountedBase *v115;
  uint64_t v116;
  char v117;
  CFTypeRef cf;
  _OWORD v119[2];
  WTF *v120;
  WTF *v121;
  _BYTE v122[19];
  _DWORD *v123;
  __int128 v124;
  __int128 v125;
  _BYTE v126[16];
  uint64_t v127;
  __int128 v128;
  WebKit::NetworkCache::Entry *v129;
  __int128 v130;
  _BYTE v131[22];
  __int128 v132;
  WTF::StringImpl *v133;
  WTF::RefCountedBase *v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  char v139;
  _BYTE v140[40];
  CFTypeRef v141;
  char v142;
  __int16 v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a2 + 24);
  if (v14 && *(_DWORD *)(v14 + 4))
    return;
  v15 = WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(*(_QWORD *)(a1 + 24), a4);
  v109 = v15;
  if (v15)
  {
    ++*(_DWORD *)v15;
    if (!*(_BYTE *)(v15 + 194))
    {
      WebCore::RegistrableDomain::RegistrableDomain(&v111, (const WTF::URL *)(a2 + 96));
      v112[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v112);
      MEMORY[0x19AEABB24](v119, v112, a2 + 16, 0);
      v16 = WTF::URL::host((WTF::URL *)v119);
      v19 = WebCore::RegistrableDomain::matches(&v111, v16, v17);
      v20 = *(WTF::StringImpl **)&v119[0];
      *(_QWORD *)&v119[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v18);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = v112[0];
      v112[0] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v18);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = v111;
      v111 = 0;
      if (!v22)
      {
LABEL_16:
        if (v19)
        {
LABEL_17:
          v23 = *a3;
          v24 = *(_QWORD *)(a1 + 8);
          v25 = *(_QWORD *)(v24 + 16);
          *(_QWORD *)&v119[0] = *(_QWORD *)(v24 + 64);
          v26 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v25 + 208), v119);
          if (v26)
          {
            v27 = (WebKit::NetworkSession *)v26;
            WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v119);
            v28 = a4[1];
            v119[0] = *a4;
            v119[1] = v28;
            BYTE10(v137) = 1;
            WORD4(v137) = 1;
            v140[16] = 1;
            WebKit::NetworkCache::constructRevalidationRequest((WebKit::NetworkCache *)v112, (const WebKit::NetworkCache::Key *)a2, (const WebKit::NetworkCache::SubresourceInfo *)a2, v23);
            WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v122[8], (uint64_t)v112);
            v30 = v113;
            v113 = 0;
            v31 = (WTF::StringImpl *)*((_QWORD *)&v132 + 1);
            *((_QWORD *)&v132 + 1) = v30;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v29);
              else
                *(_DWORD *)v31 -= 2;
            }
            v70 = v114;
            v114 = 0;
            v71 = v133;
            v133 = v70;
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
                WTF::StringImpl::destroy(v71, v29);
              else
                *(_DWORD *)v71 -= 2;
            }
            v72 = v115;
            v115 = 0;
            v73 = v134;
            v134 = v72;
            if (v73)
              WTF::RefCounted<WebCore::FormData>::deref(v73);
            v135 = v116;
            LOBYTE(v136) = v117;
            v74 = cf;
            cf = 0;
            v75 = (const void *)v137;
            *(_QWORD *)&v137 = v74;
            if (v75)
            {
              CFRelease(v75);
              v105 = cf;
              cf = 0;
              if (v105)
                CFRelease(v105);
            }
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v112);
            v143 = a5;
            v76 = (_QWORD *)operator new();
            v77 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v77 = off_1E34C4A30;
            v112[0] = v77;
            v78 = (WebKit::NetworkLoad **)WebKit::PreconnectTask::PreconnectTask(v76, v27, (uint64_t)v119, (uint64_t *)v112);
            WebKit::PreconnectTask::start(v78);
            if (v112[0])
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v112[0] + 8))(v112[0]);
            if (v142)
            {
              v80 = v141;
              v141 = 0;
              if (v80)
                CFRelease(v80);
            }
            WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v140, v79);
            if (v139)
              WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)((char *)&v138 + 8));
            v81 = (const void *)v137;
            *(_QWORD *)&v137 = 0;
            if (v81)
              CFRelease(v81);
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v122[8]);
            v83 = v121;
            v121 = 0;
            if (v83)
              WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v83, v82);
            v84 = v120;
            v120 = 0;
            if (v84)
              WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v84, v82);
          }
          *(_QWORD *)&v119[0] = a1;
          WebKit::NetworkCache::Key::Key((uint64_t)v119 + 8, a2);
          *(_OWORD *)v122 = *(_OWORD *)(a2 + 72);
          *(_DWORD *)&v122[15] = *(_DWORD *)(a2 + 87);
          v85 = *(_DWORD **)(a2 + 96);
          if (v85)
            *v85 += 2;
          v123 = v85;
          v86 = *(_OWORD *)(a2 + 120);
          v124 = *(_OWORD *)(a2 + 104);
          v125 = v86;
          WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v126, (WTF::ASCIILiteral *)(a2 + 136));
          WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)&v127, (WTF::ASCIILiteral *)(a2 + 152));
          BYTE8(v128) = *(_BYTE *)(a2 + 168);
          v87 = *a3;
          *a3 = 0;
          v129 = v87;
          v88 = a4[1];
          v130 = *a4;
          *(_OWORD *)v131 = v88;
          *(_WORD *)&v131[16] = a5;
          v131[18] = a6;
          *(_WORD *)&v131[20] = a7;
          v89 = WTF::fastMalloc((WTF *)0xF0);
          *(_QWORD *)v89 = off_1E34C4A58;
          *(_QWORD *)(v89 + 8) = *(_QWORD *)&v119[0];
          WebKit::NetworkCache::Key::Key(v89 + 16, (uint64_t)v119 + 8);
          v90 = *(_OWORD *)v122;
          *(_DWORD *)(v89 + 103) = *(_DWORD *)&v122[15];
          *(_OWORD *)(v89 + 88) = v90;
          v91 = v123;
          if (v123)
            *v123 += 2;
          *(_QWORD *)(v89 + 112) = v91;
          v92 = v124;
          *(_OWORD *)(v89 + 136) = v125;
          *(_OWORD *)(v89 + 120) = v92;
          WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)(v89 + 152), (WTF::ASCIILiteral *)v126);
          WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)(v89 + 168), (WTF::ASCIILiteral *)&v127);
          *(_BYTE *)(v89 + 184) = BYTE8(v128);
          v94 = v129;
          v129 = 0;
          *(_QWORD *)(v89 + 192) = v94;
          v95 = v130;
          v96 = *(_OWORD *)v131;
          *(_QWORD *)(v89 + 230) = *(_QWORD *)&v131[14];
          *(_OWORD *)(v89 + 216) = v96;
          *(_OWORD *)(v89 + 200) = v95;
          v112[0] = (WTF::StringImpl *)v89;
          v63 = (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)v109;
          v97 = (_QWORD *)(v109 + 176);
          v98 = *(unsigned int *)(v109 + 188);
          if ((_DWORD)v98 == *(_DWORD *)(v109 + 184))
          {
            v99 = (uint64_t *)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v97, v98 + 1, (unint64_t)v112);
            v98 = *(unsigned int *)(v109 + 188);
            v100 = (uint64_t *)(*(_QWORD *)(v109 + 176) + 8 * v98);
            v89 = *v99;
          }
          else
          {
            v100 = (uint64_t *)(*v97 + 8 * v98);
            v99 = (uint64_t *)v112;
          }
          *v99 = 0;
          *v100 = v89;
          *(_DWORD *)(v109 + 188) = v98 + 1;
          v101 = v112[0];
          v112[0] = 0;
          if (v101)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v101 + 8))(v101);
          v102 = v129;
          v129 = 0;
          if (v102)
          {
            WebKit::NetworkCache::Entry::~Entry(v102, v93);
            WTF::fastFree(v103, v104);
          }
          WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)((char *)v119 + 8));
          goto LABEL_50;
        }
        goto LABEL_22;
      }
      if (*(_DWORD *)v22 != 2)
      {
        *(_DWORD *)v22 -= 2;
        goto LABEL_16;
      }
      WTF::StringImpl::destroy(v22, v18);
      if (v19)
        goto LABEL_17;
    }
  }
LABEL_22:
  WebKit::NetworkCache::constructRevalidationRequest((WebKit::NetworkCache *)v112, (const WebKit::NetworkCache::Key *)a2, (const WebKit::NetworkCache::SubresourceInfo *)a2, *a3);
  v106 = *(_DWORD **)(a1 + 8);
  v107 = a1;
  *(_QWORD *)&v119[0] = a1;
  WebKit::NetworkCache::Key::Key((uint64_t)v119 + 8, a2);
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)v122, (const WebCore::ResourceRequest *)v112);
  v32 = a4[1];
  v137 = *a4;
  v138 = v32;
  v33 = WTF::fastMalloc((WTF *)0x200);
  v34 = *a3;
  *a3 = 0;
  v111 = v34;
  v35 = WTF::fastMalloc((WTF *)0x140);
  *(_QWORD *)v35 = off_1E34C47E8;
  *(_QWORD *)(v35 + 8) = *(_QWORD *)&v119[0];
  WebKit::NetworkCache::Key::Key(v35 + 16, (uint64_t)v119 + 8);
  WTF::URL::URL(v35 + 88, (uint64_t *)v122);
  WTF::URL::URL(v35 + 128, (uint64_t *)&v124 + 1);
  *(_QWORD *)(v35 + 168) = v127;
  *(_QWORD *)(v35 + 176) = v128;
  v36 = *((_QWORD *)&v128 + 1);
  v128 = 0u;
  *(_QWORD *)(v35 + 184) = v36;
  v37 = v129;
  v129 = 0;
  *(_QWORD *)(v35 + 192) = v37;
  v38 = v130;
  *(_QWORD *)&v130 = 0;
  *(_QWORD *)(v35 + 200) = v38;
  v39 = *((_QWORD *)&v130 + 1);
  *((_QWORD *)&v130 + 1) = 0;
  *(_QWORD *)(v35 + 208) = v39;
  v40 = *(_QWORD *)v131;
  *(_QWORD *)v131 = 0;
  *(_QWORD *)(v35 + 216) = v40;
  v41 = *(_QWORD *)&v131[8];
  *(_QWORD *)&v131[8] = 0;
  *(_QWORD *)(v35 + 224) = v41;
  LODWORD(v40) = *(_DWORD *)&v131[16];
  *(_BYTE *)(v35 + 236) = v131[20];
  *(_DWORD *)(v35 + 232) = v40;
  *(_QWORD *)(v35 + 240) = v132;
  v42 = *((_QWORD *)&v132 + 1);
  v132 = 0u;
  *(_QWORD *)(v35 + 248) = v42;
  *(_QWORD *)(v35 + 256) = v133;
  v43 = v134;
  *(_BYTE *)(v35 + 272) = v135;
  *(_QWORD *)(v35 + 264) = v43;
  v44 = v136;
  v133 = 0;
  v136 = 0;
  *(_QWORD *)(v35 + 280) = v44;
  v45 = v138;
  *(_OWORD *)(v35 + 288) = v137;
  *(_OWORD *)(v35 + 304) = v45;
  v110 = v35;
  v108 = (WebKit::NetworkCache::Entry **)v33;
  WebKit::NetworkCache::SpeculativeLoad::SpeculativeLoad(v33, v106, a4, (WebCore::ResourceRequest *)v112, (uint64_t *)&v111, a5, a6, a7, &v110);
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  if (v111)
  {
    WebKit::NetworkCache::Entry::~Entry(v111, v46);
    WTF::fastFree(v47, v48);
  }
  WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,std::optional<WebKit::NavigatingToAppBoundDomain>::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0::~$_0(v119);
  v50 = (uint64_t *)(v107 + 32);
  v51 = *(_QWORD *)(v107 + 32);
  if (v51
    || (WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand((uint64_t *)(v107 + 32)),
        (v51 = *v50) != 0))
  {
    v52 = *(_DWORD *)(v51 - 8);
  }
  else
  {
    v52 = 0;
  }
  v53 = 0;
  v54 = *(_DWORD *)(a2 + 32);
  for (i = 1; ; ++i)
  {
    v56 = v54 & v52;
    v57 = v51 + 80 * (v54 & v52);
    v58 = *(_QWORD *)(v57 + 16);
    if (v58 == -1)
    {
      v53 = v51 + 80 * v56;
      goto LABEL_35;
    }
    if (!v58)
      break;
    if (WebKit::NetworkCache::Key::operator==(v51 + 80 * v56, a2, v49))
    {
      WebKit::NetworkCache::SpeculativeLoad::~SpeculativeLoad(v108);
      WTF::fastFree(v61, v62);
      v63 = (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)v109;
      goto LABEL_47;
    }
LABEL_35:
    v54 = i + v56;
  }
  if (v53)
  {
    *(_OWORD *)v53 = 0u;
    *(_OWORD *)(v53 + 16) = 0u;
    *(_QWORD *)(v53 + 72) = 0;
    --*(_DWORD *)(*v50 - 16);
    v57 = v53;
  }
  WebKit::NetworkCache::Key::operator=(v57, a2);
  std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>::reset[abi:sn180100]((WebKit::NetworkCache::Entry ***)(v57 + 72), v108);
  v59 = *v50;
  if (*v50)
    v60 = *(_DWORD *)(v59 - 12) + 1;
  else
    v60 = 1;
  v63 = (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)v109;
  *(_DWORD *)(v59 - 12) = v60;
  v64 = *v50;
  if (*v50)
    v65 = *(_DWORD *)(v64 - 12);
  else
    v65 = 0;
  v66 = (*(_DWORD *)(v64 - 16) + v65);
  v67 = *(unsigned int *)(v64 - 4);
  if (v67 > 0x400)
  {
    if (v67 <= 2 * v66)
LABEL_46:
      WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v50);
  }
  else if (3 * v67 <= 4 * v66)
  {
    goto LABEL_46;
  }
LABEL_47:
  v68 = cf;
  cf = 0;
  if (v68)
    CFRelease(v68);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v112);
  if (v63)
LABEL_50:
    WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v63, v69);
}

_QWORD *WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0::~$_0(_QWORD *a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)(a1 + 11));
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v2);
    }
  }
  return a1;
}

WebKit::NetworkCache::Storage::Record *WebKit::NetworkCache::Storage::ReadOperation::cancel(WebKit::NetworkCache::Storage::Record *this)
{
  WebKit::NetworkCache::Storage::Record *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF *v4;
  void *v5;
  WebKit::NetworkCache::Storage::Record *v6;

  if (!*((_BYTE *)this + 196))
  {
    v1 = this;
    WTF::MonotonicTime::now(this);
    *((_QWORD *)v1 + 31) = v2;
    *((_BYTE *)v1 + 274) = 1;
    *((_BYTE *)v1 + 196) = 1;
    v6 = 0;
    WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()((uint64_t *)v1 + 12, &v6);
    this = v6;
    v6 = 0;
    if (this)
    {
      WebKit::NetworkCache::Storage::Record::~Record(this, v3);
      return (WebKit::NetworkCache::Storage::Record *)WTF::fastFree(v4, v5);
    }
  }
  return this;
}

_QWORD *WebKit::NetworkCache::Storage::cancelAllReadOperations(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  WebKit::NetworkCache::Storage::Record **v4;
  WebKit::NetworkCache::Storage::Record **v5;
  uint64_t v6;
  WebKit::NetworkCache::Storage::Record **v7;
  WebKit::NetworkCache::Storage::Record **v8;
  WTF *v9;
  void *v10;
  WebKit::NetworkCache::Storage::ReadOperation *v11;

  v1 = this;
  v2 = this[18];
  if (!v2)
  {
    v5 = 0;
    v3 = 0;
    goto LABEL_9;
  }
  v3 = *(unsigned int *)(v2 - 4);
  v4 = (WebKit::NetworkCache::Storage::Record **)(v2 + 8 * v3);
  if (!*(_DWORD *)(v2 - 12))
  {
    v5 = (WebKit::NetworkCache::Storage::Record **)(v2 + 8 * v3);
LABEL_9:
    v4 = (WebKit::NetworkCache::Storage::Record **)(v2 + 8 * v3);
    goto LABEL_10;
  }
  v5 = (WebKit::NetworkCache::Storage::Record **)this[18];
  if ((_DWORD)v3)
  {
    v6 = 8 * v3;
    v5 = (WebKit::NetworkCache::Storage::Record **)this[18];
    while ((unint64_t)*v5 + 1 <= 1)
    {
      ++v5;
      v6 -= 8;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_10:
  if (v2)
    v7 = (WebKit::NetworkCache::Storage::Record **)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v7 = 0;
  while (v5 != v7)
  {
    v8 = v5 + 1;
    this = WebKit::NetworkCache::Storage::ReadOperation::cancel(*v5);
    v5 = v4;
    if (v8 != v4)
    {
      v5 = v8;
      while ((unint64_t)*v5 + 1 <= 1)
      {
        if (++v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  while (*((_DWORD *)v1 + 35))
  {
    WTF::PriorityQueue<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,&WebKit::NetworkCache::Storage::isHigherPriority,0ul>::dequeue(v1 + 16, &v11);
    WebKit::NetworkCache::Storage::ReadOperation::cancel(v11);
    this = v11;
    v11 = 0;
    if (this)
    {
      WebKit::NetworkCache::Storage::ReadOperation::~ReadOperation((WebKit::NetworkCache::Storage::ReadOperation *)this);
      this = (_QWORD *)WTF::fastFree(v9, v10);
    }
  }
  return this;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::NetworkCache::Storage,WebKit::NetworkCache::Storage>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E34B3740;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E34C4AD0;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a2;
  *((_QWORD *)a1 + 6) = v8;
  return a1;
}

_QWORD *WebKit::NetworkCache::Storage::dispatchPendingWriteOperations(_QWORD *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  unsigned int **v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int ***v16;
  unsigned int **v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int **v24;
  _QWORD *v25;
  unsigned int ***v26;
  int v27;
  uint64_t v28;

  v2 = this[27];
  if (this[26] != v2)
  {
    v3 = (uint64_t)this;
    v4 = this + 30;
    do
    {
      if (*v4 && *(_DWORD *)(*v4 - 12))
        return this;
      if (!v2)
        v2 = *(unsigned int *)(v3 + 232);
      v5 = v2 - 1;
      v6 = *(_QWORD *)(v3 + 224);
      v7 = *(unsigned int ***)(v6 + 8 * v5);
      *(_QWORD *)(v6 + 8 * v5) = 0;
      *(_QWORD *)(v3 + 216) = v5;
      v8 = *(_QWORD *)(v3 + 224);
      v9 = *(unsigned int ***)(v8 + 8 * v5);
      *(_QWORD *)(v8 + 8 * v5) = 0;
      if (v9)
        std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v9, a2);
      v10 = *v4;
      if (*v4
        || (WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>>::expand(v4),
            (v10 = *v4) != 0))
      {
        v11 = *(_DWORD *)(v10 - 8);
      }
      else
      {
        v11 = 0;
      }
      v12 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = (unsigned int ***)(v10 + 8 * v15);
      v17 = *v16;
      if (*v16)
      {
        v26 = 0;
        v27 = 1;
        do
        {
          if (v17 == v7)
          {
            v24 = v7;
            goto LABEL_19;
          }
          if (v17 == (unsigned int **)-1)
            v26 = v16;
          v15 = (v15 + v27) & v11;
          v16 = (unsigned int ***)(v10 + 8 * v15);
          v17 = *v16;
          ++v27;
        }
        while (*v16);
        if (v26)
        {
          *v26 = 0;
          --*(_DWORD *)(*v4 - 16);
          v16 = v26;
        }
      }
      *v16 = v7;
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_18;
      }
      else if (3 * v23 > 4 * v22)
      {
        goto LABEL_18;
      }
      WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>>::expand(v4);
LABEL_18:
      v24 = 0;
LABEL_19:
      WebKit::NetworkCache::Storage::addToRecordFilter(v3, (const WebKit::NetworkCache::Key *)(v7 + 1));
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v25 = off_1E34C4D50;
      v25[1] = v3;
      v25[2] = v7;
      v28 = (uint64_t)v25;
      WTF::ConcurrentWorkQueue::dispatch();
      this = (_QWORD *)v28;
      if (v28)
        this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      if (v24)
        this = (_QWORD *)std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v24, a2);
      v2 = *(_QWORD *)(v3 + 216);
    }
    while (*(_QWORD *)(v3 + 208) != v2);
  }
  return this;
}

void WebKit::NetworkCache::Storage::~Storage(WebKit::NetworkCache::Storage *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int ***v21;
  unsigned int **v22;
  unint64_t v23;
  unint64_t v24;
  WTF *v25;
  uint64_t v26;
  unsigned int **v27;
  uint64_t v28;
  unsigned int ***v29;
  uint64_t v30;
  unsigned int **v31;
  unsigned int ***v32;
  uint64_t v33;
  unsigned int **v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WebKit::NetworkCache::Storage::ReadOperation **v39;
  uint64_t v40;
  WebKit::NetworkCache::Storage::ReadOperation **v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 38);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v14)
    {
      v15 = (WTF **)*((_QWORD *)this + 38);
      do
      {
        v16 = *v15;
        if (*v15 != (WTF *)-1)
        {
          *v15 = 0;
          if (v16)
            std::default_delete<WebKit::NetworkCache::Storage::TraverseOperation>::operator()[abi:sn180100](v16, a2);
        }
        ++v15;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WTF *)(v13 - 16), a2);
  }
  *((_QWORD *)this + 31) = off_1E34B3740;
  v17 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WebCore::TimerBase::~TimerBase((WebKit::NetworkCache::Storage *)((char *)this + 248));
  v19 = *((_QWORD *)this + 30);
  if (v19)
  {
    v20 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v20)
    {
      v21 = (unsigned int ***)*((_QWORD *)this + 30);
      do
      {
        v22 = *v21;
        if (*v21 != (unsigned int **)-1)
        {
          *v21 = 0;
          if (v22)
            std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v22, v18);
        }
        ++v21;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((WTF *)(v19 - 16), v18);
  }
  v23 = *((_QWORD *)this + 26);
  v24 = *((_QWORD *)this + 27);
  v25 = (WTF *)*((_QWORD *)this + 28);
  if (v23 <= v24)
  {
    if (v23 == v24)
      goto LABEL_54;
    v32 = (unsigned int ***)((char *)v25 + 8 * v23);
    v33 = 8 * v24 - 8 * v23;
    do
    {
      v34 = *v32;
      *v32 = 0;
      if (v34)
        std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v34, v18);
      ++v32;
      v33 -= 8;
    }
    while (v33);
  }
  else
  {
    if (v24)
    {
      v26 = 8 * v24;
      do
      {
        v27 = *(unsigned int ***)v25;
        *(_QWORD *)v25 = 0;
        if (v27)
          std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v27, v18);
        v25 = (WTF *)((char *)v25 + 8);
        v26 -= 8;
      }
      while (v26);
      v25 = (WTF *)*((_QWORD *)this + 28);
      v23 = *((_QWORD *)this + 26);
    }
    v28 = *((unsigned int *)this + 58);
    if (v23 != v28)
    {
      v29 = (unsigned int ***)((char *)v25 + 8 * v23);
      v30 = 8 * v28 - 8 * v23;
      do
      {
        v31 = *v29;
        *v29 = 0;
        if (v31)
          std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v31, v18);
        ++v29;
        v30 -= 8;
      }
      while (v30);
    }
  }
  v25 = (WTF *)*((_QWORD *)this + 28);
LABEL_54:
  if (v25)
  {
    *((_QWORD *)this + 28) = 0;
    *((_DWORD *)this + 58) = 0;
    WTF::fastFree(v25, v18);
  }
  *((_QWORD *)this + 19) = off_1E34B3740;
  v35 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  WebCore::TimerBase::~TimerBase((WebKit::NetworkCache::Storage *)((char *)this + 152));
  v37 = *((_QWORD *)this + 18);
  if (v37)
  {
    v38 = *(unsigned int *)(v37 - 4);
    if ((_DWORD)v38)
    {
      v39 = (WebKit::NetworkCache::Storage::ReadOperation **)*((_QWORD *)this + 18);
      do
      {
        if (*v39 != (WebKit::NetworkCache::Storage::ReadOperation *)-1)
          std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100](v39, 0);
        ++v39;
        --v38;
      }
      while (v38);
    }
    WTF::fastFree((WTF *)(v37 - 16), v36);
  }
  v40 = *((unsigned int *)this + 35);
  if ((_DWORD)v40)
  {
    v41 = (WebKit::NetworkCache::Storage::ReadOperation **)*((_QWORD *)this + 16);
    v42 = 8 * v40;
    do
    {
      std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100](v41++, 0);
      v42 -= 8;
    }
    while (v42);
  }
  v43 = (WTF *)*((_QWORD *)this + 16);
  if (v43)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v43, v36);
  }
  v44 = (WTF *)*((_QWORD *)this + 14);
  if (v44)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v44, v36);
  }
  v45 = (WTF *)*((_QWORD *)this + 12);
  if (v45)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v45, v36);
  }
  v46 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v46)
    WTF::fastFree(v46, v36);
  v47 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v47)
    WTF::fastFree(v47, v36);
  v48 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v36);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v36);
    else
      *(_DWORD *)v49 -= 2;
  }
}

WTF::StringImpl *WebKit::NetworkCache::Storage::versionPath(WebKit::NetworkCache::Storage *this)
{
  const WTF::String *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WTF::String::isolatedCopy();
  WebKit::NetworkCache::makeVersionedDirectoryPath((WebKit::NetworkCache *)&v4, v1);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Storage::encodeRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  dispatch_data_t v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  _QWORD v21[3];
  char v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  _BYTE buffer[24];
  char v38;
  uint64_t v39;

  v3 = MEMORY[0x1E0C80A78](a1, a2, a3);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v3;
  v39 = *MEMORY[0x1E0C80C00];
  v23 = 17;
  WebKit::NetworkCache::Key::Key((uint64_t)&v24, v6);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v11 = *(_QWORD *)(v7 + 72);
  v31 = 0;
  v28 = v11;
  WebKit::NetworkCache::computeSHA1(v7 + 80, v9 + 28);
  v29 = *(_OWORD *)buffer;
  v30 = *(_DWORD *)&buffer[16];
  v31 = *(_QWORD *)(v7 + 96);
  if (*(_BYTE *)(v5 + 56))
  {
    v12 = 0;
    *(_OWORD *)buffer = *(_OWORD *)(v5 + 32);
    *(_DWORD *)&buffer[16] = *(_DWORD *)(v5 + 48);
  }
  else
  {
    WebKit::NetworkCache::computeSHA1(v7 + 112, v9 + 28);
    v12 = *(_BYTE *)(v5 + 56) ^ 1;
  }
  v32 = *(_OWORD *)buffer;
  v33 = *(_DWORD *)&buffer[16];
  v34 = *(_QWORD *)(v7 + 128);
  v35 = v12;
  WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)buffer);
  MEMORY[0x19AEAB290](buffer, v23);
  WTF::Persistence::Coder<WebKit::NetworkCache::Key>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::WallTime>::encodeForPersistence();
  WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence();
  WTF::Persistence::Encoder::operator<<();
  MEMORY[0x19AEAB26C](buffer, v35);
  WTF::Persistence::Encoder::encodeChecksum((WTF::Persistence::Encoder *)buffer);
  v13 = *(unsigned int *)&buffer[12];
  v14 = dispatch_data_create(*(const void **)buffer, *(unsigned int *)&buffer[12], 0, 0);
  v21[0] = v14;
  v21[1] = 0;
  v21[2] = v13;
  v22 = 0;
  WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)buffer);
  WebKit::NetworkCache::concatenate((WebKit::NetworkCache *)v21, (NSObject **)(v7 + 80), (uint64_t)buffer);
  if (v35)
  {
    WebKit::NetworkCache::concatenate((WebKit::NetworkCache *)buffer, (NSObject **)(v7 + 112), v10);
    v16 = *(void **)buffer;
  }
  else
  {
    v16 = *(void **)buffer;
    *(_QWORD *)v10 = *(_QWORD *)buffer;
    if (v16)
      os_retain(v16);
    *(_OWORD *)(v10 + 8) = *(_OWORD *)&buffer[8];
    *(_BYTE *)(v10 + 24) = v38;
  }
  if (v16)
    os_release(v16);
  if (v14)
    os_release(v14);
  v17 = v27;
  v27 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v26;
  v26 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkCache::Storage::removeFromPendingWriteOperations(uint64_t this, const WebKit::NetworkCache::Key *a2, const WTF::StringImpl *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int ***v10;
  unsigned int **v11;
  unint64_t v12;

  v4 = *(_QWORD *)(this + 208);
  v3 = *(_QWORD *)(this + 216);
  if (v4 != v3)
  {
    v6 = this;
    while (1)
    {
      this = WebKit::NetworkCache::Key::operator==(*(_QWORD *)(*(_QWORD *)(v6 + 224) + 8 * v4) + 8, (uint64_t)a2, a3);
      if ((this & 1) != 0)
        goto LABEL_8;
      v8 = *(unsigned int *)(v6 + 232);
      v4 += v8 + 1;
      do
        v4 -= v8;
      while (v4 >= v8);
      if (v3 == v4)
      {
        v4 = v3;
LABEL_8:
        if (v4 == *(_QWORD *)(v6 + 216))
          return this;
        v9 = *(_QWORD *)(v6 + 224);
        v10 = (unsigned int ***)(v9 + 8 * v4);
        v11 = *v10;
        *v10 = 0;
        if (v11)
          std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v11, v7);
        v12 = *(_QWORD *)(v6 + 208);
        if (v12 <= v4)
        {
          this = (uint64_t)memmove((void *)(v9 + 8 * v12 + 8), (const void *)(v9 + 8 * v12), 8 * v4 - 8 * v12);
          v3 = *(_QWORD *)(v6 + 216);
          v4 = (*(_QWORD *)(v6 + 208) + 1) % (unint64_t)*(unsigned int *)(v6 + 232);
          *(_QWORD *)(v6 + 208) = v4;
        }
        else
        {
          this = (uint64_t)memmove((void *)(v9 + 8 * v4), (const void *)(v9 + 8 * v4 + 8), 8 * *(_QWORD *)(v6 + 216) - (8 * v4 + 8));
          v4 = *(_QWORD *)(v6 + 208);
          v3 = (*(_QWORD *)(v6 + 216) + (unint64_t)*(unsigned int *)(v6 + 232) - 1) % *(unsigned int *)(v6 + 232);
          *(_QWORD *)(v6 + 216) = v3;
        }
        if (v4 == v3)
          return this;
      }
    }
  }
  return this;
}

unsigned int *WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Storage *this, const WebKit::NetworkCache::Key *a2)
{
  unsigned int *result;
  const WTF::StringImpl *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  WebKit::NetworkCache::Storage *v17;
  unsigned int *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  result = (unsigned int *)WebKit::NetworkCache::Storage::mayContain((uint64_t)this, (uint64_t)a2);
  if ((_DWORD)result)
  {
    do
      v6 = __ldaxr((unsigned int *)this);
    while (__stlxr(v6 + 1, (unsigned int *)this));
    WebKit::NetworkCache::Storage::removeFromPendingWriteOperations((uint64_t)this, a2, v5);
    v7 = *((_QWORD *)this + 41);
    v17 = this;
    v18 = (unsigned int *)this;
    WebKit::NetworkCache::Key::Key((uint64_t)&v19, (uint64_t)a2);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
    *v8 = off_1E34C4C60;
    v8[1] = v17;
    v9 = v18;
    v18 = 0;
    v8[2] = v9;
    WebKit::NetworkCache::Key::Key((uint64_t)(v8 + 3), (uint64_t)&v19);
    v16 = v8;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v7 + 32))(v7, &v16);
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v21;
    v21 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v20;
    v20 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }
    result = v18;
    v18 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(result);
  }
  return result;
}

_QWORD *WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;

  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v7);
  return a1;
}

uint64_t WebKit::NetworkCache::Storage::remove(uint64_t a1, const WebKit::NetworkCache::Key **a2, uint64_t *a3)
{
  uint64_t v5;
  int v7;
  WTF *v8;
  uint64_t v9;
  const WebKit::NetworkCache::Key *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  int v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  unsigned int v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  void *v43;
  WTF::StringImpl *v44;
  void *v45;
  unsigned int *v46;
  WTF *v48;
  uint64_t v49;
  WTF::StringImpl *v50[2];
  WTF::StringImpl *v51[2];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v48 = 0;
  v49 = 0;
  v5 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v5)
    goto LABEL_28;
  if (v5 >= 0x38E38E4)
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  v7 = 72 * v5;
  v8 = (WTF *)WTF::fastMalloc((WTF *)(72 * v5));
  LODWORD(v5) = (v7 & 0xFFFFFFF8) / 0x48;
  LODWORD(v49) = v5;
  v48 = v8;
  v9 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v9)
  {
    v10 = *a2;
    v11 = 72 * v9;
    do
    {
      if ((WebKit::NetworkCache::Storage::mayContain(a1, (uint64_t)v10) & 1) != 0)
      {
        WebKit::NetworkCache::Storage::removeFromPendingWriteOperations(a1, v10, v13);
        WebKit::NetworkCache::Key::Key((uint64_t)&v55, (uint64_t)v10);
        v60 = 1;
        v14 = v55;
        v15 = v56;
        v55 = 0u;
        v56 = 0u;
        *(_OWORD *)v50 = v14;
        *(_OWORD *)v51 = v15;
        v52 = v57;
        v53 = v58;
        v54 = v59;
        v16 = HIDWORD(v49);
        if (HIDWORD(v49) == (_DWORD)v49)
        {
          v17 = WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)v50);
          v16 = HIDWORD(v49);
          v18 = (char *)v48 + 72 * HIDWORD(v49);
          v19 = *(_QWORD *)v17;
          *(_QWORD *)v17 = 0;
          *(_QWORD *)v18 = v19;
          v20 = *(_QWORD *)(v17 + 8);
          *(_QWORD *)(v17 + 8) = 0;
          *((_QWORD *)v18 + 1) = v20;
          v21 = *(_QWORD *)(v17 + 16);
          *(_QWORD *)(v17 + 16) = 0;
          *((_QWORD *)v18 + 2) = v21;
          v22 = *(_QWORD *)(v17 + 24);
          *(_QWORD *)(v17 + 24) = 0;
          *((_QWORD *)v18 + 3) = v22;
          v23 = *(_OWORD *)(v17 + 32);
          v24 = *(_OWORD *)(v17 + 48);
          *((_QWORD *)v18 + 8) = *(_QWORD *)(v17 + 64);
        }
        else
        {
          v18 = (char *)v48 + 72 * HIDWORD(v49);
          v50[0] = 0;
          *(_QWORD *)v18 = v14;
          v25 = v50[1];
          v50[1] = 0;
          *((_QWORD *)v18 + 1) = v25;
          v26 = v51[0];
          v51[0] = 0;
          *((_QWORD *)v18 + 2) = v26;
          v27 = v51[1];
          v51[1] = 0;
          *((_QWORD *)v18 + 3) = v27;
          v23 = v52;
          v24 = v53;
          *((_QWORD *)v18 + 8) = v54;
        }
        *((_OWORD *)v18 + 2) = v23;
        *((_OWORD *)v18 + 3) = v24;
        HIDWORD(v49) = v16 + 1;
        v28 = v51[1];
        v51[1] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v12);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = v51[0];
        v51[0] = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v12);
          else
            *(_DWORD *)v29 -= 2;
        }
        v30 = v50[1];
        v50[1] = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v12);
          else
            *(_DWORD *)v30 -= 2;
        }
        v31 = v50[0];
        v50[0] = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v12);
          else
            *(_DWORD *)v31 -= 2;
        }
      }
      else
      {
        LOBYTE(v55) = 0;
        v60 = 0;
      }
      std::__optional_destruct_base<WebKit::NetworkCache::Key,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v12);
      v10 = (const WebKit::NetworkCache::Key *)((char *)v10 + 72);
      v11 -= 72;
    }
    while (v11);
    LODWORD(v5) = v49;
    v32 = HIDWORD(v49);
    v33 = HIDWORD(v49);
  }
  else
  {
LABEL_28:
    v32 = 0;
    v33 = 0;
  }
  if (v33 >= v5)
    goto LABEL_40;
  v34 = v48;
  if (v33 < v32)
  {
    WTF::VectorDestructor<true,WebKit::NetworkCache::Key>::destruct((WTF *)((char *)v48 + 72 * v33), (WTF *)((char *)v48 + 72 * v32));
    HIDWORD(v49) = v33;
    v34 = v48;
    v32 = v33;
  }
  if (v33)
  {
    if (v33 < 0x38E38E4)
    {
      v35 = (WTF *)(72 * v33);
      v36 = (WTF *)WTF::fastMalloc(v35);
      LODWORD(v49) = (v35 & 0xFFFFFFF8) / 0x48;
      v48 = v36;
      if (v36 != v34)
        WTF::VectorMover<false,WebKit::NetworkCache::Key>::move(v34, (WTF::StringImpl *)((char *)v34 + 72 * v32), (uint64_t)v36);
      goto LABEL_36;
    }
    __break(0xC471u);
LABEL_49:
    JUMPOUT(0x19717D9BCLL);
  }
LABEL_36:
  if (v34)
  {
    if (v48 == v34)
    {
      v48 = 0;
      LODWORD(v49) = 0;
    }
    WTF::fastFree(v34, a2);
  }
LABEL_40:
  v37 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)&v55 = a1;
  do
    v38 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v38 + 1, (unsigned int *)a1));
  v39 = v48;
  v48 = 0;
  v40 = *a3;
  *a3 = 0;
  v41 = v49;
  v49 = 0;
  v42 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v42 = off_1E34C4C88;
  *((_QWORD *)v42 + 1) = v55;
  *((_QWORD *)v42 + 2) = a1;
  *((_QWORD *)&v55 + 1) = 0;
  *(_QWORD *)&v56 = 0;
  *((_QWORD *)v42 + 3) = v39;
  *((_QWORD *)&v56 + 1) = 0;
  *((_QWORD *)v42 + 4) = v41;
  *((_QWORD *)v42 + 5) = v40;
  v50[0] = v42;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v37 + 32))(v37, v50);
  v44 = v50[0];
  v50[0] = 0;
  if (v44)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v44 + 8))(v44);
  *(_QWORD *)&v57 = 0;
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v43);
  v46 = (unsigned int *)*((_QWORD *)&v55 + 1);
  *((_QWORD *)&v55 + 1) = 0;
  if (v46)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v46);
  return WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v45);
}

WTF::StringImpl *WebKit::NetworkCache::Storage::deleteFiles(WebKit::NetworkCache::Storage *this, const WebKit::NetworkCache::Key *a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  WebKit::NetworkCache::Storage::recordPathForKey((WebKit::NetworkCache::Storage *)&v10, this, (uint64_t)a2);
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v10, v4);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebKit::NetworkCache::Storage::blobPathForKey((WebKit::NetworkCache::Storage *)&v10, this, (uint64_t)a2);
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v10, v7);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebKit::NetworkCache::Storage::finishWriteOperation(unsigned int *this, unsigned int *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  unint64_t v26;
  int v27;

  v4 = (uint64_t)this;
  v5 = a2 + 48;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    do
      v8 = __ldaxr(this);
    while (__stlxr(v8 + 1, this));
    v9 = *((_QWORD *)a2 + 23);
    if (v9)
    {
      *((_QWORD *)a2 + 23) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a3);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    v11 = (uint64_t *)(v4 + 240);
    v10 = *(_QWORD *)(v4 + 240);
    if (v10)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(unsigned int **)(v10 + 8 * v16);
      if (v17 != a2)
      {
        v27 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v27) & v12;
          v17 = *(unsigned int **)(v10 + 8 * v16);
          ++v27;
          if (v17 == a2)
            goto LABEL_9;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_9:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v18 = *(unsigned int ***)(v10 + 8 * v16);
        *(_QWORD *)(v10 + 8 * v16) = -1;
        if (v18)
          std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v18, (WTF::StringImpl *)a2);
        ++*(_DWORD *)(*v11 - 16);
        v19 = *v11;
        if (*v11)
          v20 = *(_DWORD *)(v19 - 12) - 1;
        else
          v20 = -1;
        *(_DWORD *)(v19 - 12) = v20;
        v21 = *v11;
        if (*v11)
        {
          v22 = 6 * *(_DWORD *)(v21 - 12);
          v23 = *(_DWORD *)(v21 - 4);
          if (v22 < v23 && v23 >= 9)
            WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>>::rehash((uint64_t *)(v4 + 240), v23 >> 1);
        }
      }
    }
    WebKit::NetworkCache::Storage::dispatchPendingWriteOperations((_QWORD *)v4, (WTF::StringImpl *)a2);
    if (*(_DWORD *)(v4 + 24) != 1)
    {
      v25 = *(_QWORD *)(v4 + 48);
      v26 = atomic_load((unint64_t *)(v4 + 352));
      if (v26 + v25 > *(_QWORD *)(v4 + 40))
        WebKit::NetworkCache::Storage::shrink(v4);
    }
    return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref((unsigned int *)v4);
  }
  return this;
}

uint64_t WebKit::NetworkCache::Storage::shrinkIfNeeded(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;

  if (*(_DWORD *)(this + 24) != 1)
  {
    v1 = *(_QWORD *)(this + 48);
    v2 = atomic_load((unint64_t *)(this + 352));
    if (v2 + v1 > *(_QWORD *)(this + 40))
      return WebKit::NetworkCache::Storage::shrink(this);
  }
  return this;
}

uint64_t WebKit::NetworkCache::Storage::traverseWithinRootPath(uint64_t a1, uint64_t a2, _DWORD **a3, char a4, uint64_t *a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  WTF *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t result;
  __int128 v35;
  WTF::StringImpl *v36;
  uint64_t v37;

  do
    v9 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v9 + 1, (unsigned int *)a1));
  v10 = WTF::fastMalloc((WTF *)0x28);
  v11 = v10;
  *(_QWORD *)v10 = a1;
  v12 = *a3;
  if (*a3)
    *v12 += 2;
  *(_QWORD *)(v10 + 8) = v12;
  *(_BYTE *)(v10 + 16) = a4;
  v13 = *a5;
  *a5 = 0;
  *(_QWORD *)(v10 + 24) = v13;
  *(_WORD *)(v10 + 32) = 0;
  *(_DWORD *)(v10 + 36) = 0;
  v14 = (uint64_t *)(a1 + 304);
  v15 = *(_QWORD *)(a1 + 304);
  if (v15
    || (WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>>::expand((uint64_t *)(a1 + 304)),
        (v15 = *v14) != 0))
  {
    v16 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v15 + 8 * v20);
  v22 = *v21;
  if (*v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v11)
      {
        v27 = (WTF *)v11;
        goto LABEL_26;
      }
      if (v22 == -1)
        v23 = v21;
      v20 = (v20 + v24) & v16;
      v21 = (uint64_t *)(v15 + 8 * v20);
      v22 = *v21;
      ++v24;
    }
    while (*v21);
    if (v23)
    {
      *v23 = 0;
      --*(_DWORD *)(*v14 - 16);
      v21 = v23;
    }
  }
  *v21 = v11;
  v25 = *v14;
  if (*v14)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v28 = *v14;
  if (*v14)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 > 2 * v30)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (3 * v31 <= 4 * v30)
LABEL_24:
    WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>>::expand((uint64_t *)(a1 + 304));
LABEL_25:
  v27 = 0;
LABEL_26:
  *(_QWORD *)&v35 = a1;
  *((_QWORD *)&v35 + 1) = v11;
  WTF::String::isolatedCopy();
  v32 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v32 = &off_1E34C4DF0;
  *(_OWORD *)(v32 + 8) = v35;
  v37 = v32;
  *(_QWORD *)(v32 + 24) = v36;
  WTF::ConcurrentWorkQueue::dispatch();
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  result = 0;
  if (v27)
    return std::default_delete<WebKit::NetworkCache::Storage::TraverseOperation>::operator()[abi:sn180100](v27, v33);
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Storage::traverse(uint64_t a1, _DWORD **a2, char a3, uint64_t *a4)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  WTF::String::isolatedCopy();
  WebKit::NetworkCache::Storage::traverseWithinRootPath(a1, (uint64_t)&v10, a2, a3, a4);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkCache::Storage::traverse(uint64_t a1, _DWORD **a2, WTF::SHA1 *a3, char a4, uint64_t *a5)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[4];

  v15[3] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WebKit::NetworkCache::Key::partitionToPartitionHash(a3, a1 + 28);
  WebKit::NetworkCache::Key::hashAsString((uint64_t)v15, &v14);
  WTF::String::isolatedCopy();
  v9 = v14;
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebKit::NetworkCache::Storage::traverseWithinRootPath(a1, (uint64_t)v15, a2, a4, a5);
  result = v15[0];
  v15[0] = 0;
  if (!result)
  {
LABEL_8:
    if (!v9)
      return result;
    goto LABEL_11;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_8;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
  if (!v9)
    return result;
LABEL_11:
  if (*(_DWORD *)v9 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v11);
  *(_DWORD *)v9 -= 2;
  return result;
}

uint64_t WebKit::NetworkCache::Storage::clear(uint64_t a1, double a2, uint64_t a3, uint64_t *a4)
{
  void *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  v7 = *(void **)(a1 + 64);
  if (v7)
    bzero(v7, 0x8000uLL);
  v8 = *(void **)(a1 + 72);
  if (v8)
    bzero(v8, 0x8000uLL);
  *(_QWORD *)(a1 + 48) = 0;
  do
    v9 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v9 + 1, (unsigned int *)a1));
  v10 = *a4;
  *a4 = 0;
  v13 = v10;
  WTF::String::isolatedCopy();
  v11 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v11 = &off_1E34C4E90;
  *(_QWORD *)(v11 + 8) = a1;
  *(_QWORD *)(v11 + 16) = a1;
  *(double *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v14;
  v15 = v11;
  WTF::ConcurrentWorkQueue::dispatch();
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return 0;
}

uint64_t WebKit::NetworkCache::Storage::shrink(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;

  if (!*(_BYTE *)(this + 81))
  {
    v1 = this;
    if (!*(_BYTE *)(this + 80))
    {
      *(_BYTE *)(this + 81) = 1;
      do
        v2 = __ldaxr((unsigned int *)this);
      while (__stlxr(v2 + 1, (unsigned int *)this));
      v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v3 = &off_1E34C4EE0;
      v3[1] = v1;
      v3[2] = v1;
      v4 = (uint64_t)v3;
      WTF::ConcurrentWorkQueue::dispatch();
      this = v4;
      if (v4)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return this;
}

void WebKit::NetworkCache::SubresourcesEntry::encodeAsStorageRecord(WebKit::NetworkCache::SubresourcesEntry *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *buffer;
  size_t size;

  v3 = MEMORY[0x1E0C80A78](this, a2, a3);
  v5 = v4;
  v6 = v3;
  WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&buffer);
  WTF::Persistence::Encoder::operator<<();
  if (*(_DWORD *)(v5 + 92))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      WTF::Persistence::Coder<WebKit::NetworkCache::SubresourceInfo>::encodeForPersistence((uint64_t)&buffer, (unsigned __int8 *)(*(_QWORD *)(v5 + 80) + v7));
      ++v8;
      v7 += 176;
    }
    while (v8 < *(unsigned int *)(v5 + 92));
  }
  WTF::Persistence::Encoder::encodeChecksum((WTF::Persistence::Encoder *)&buffer);
  WebKit::NetworkCache::Key::Key(v6, v5);
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v5 + 72);
  v9 = size;
  *(_QWORD *)(v6 + 80) = dispatch_data_create(buffer, size, 0, 0);
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 96) = v9;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_BYTE *)(v6 + 136) = 0;
  *(_BYTE *)(v6 + 144) = 0;
  *(_BYTE *)(v6 + 164) = 0;
  WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&buffer);
}

WebKit::NetworkCache::SubresourceInfo *WebKit::NetworkCache::SubresourceInfo::SubresourceInfo(WebKit::NetworkCache::SubresourceInfo *this, const WebKit::NetworkCache::Key *a2, const WebCore::ResourceRequest *a3, const WebKit::NetworkCache::SubresourceInfo *a4)
{
  WTF::WallTime *v7;
  uint64_t v8;
  uint64_t PartyForCookies;
  _DWORD *v10;
  __int128 v11;
  uint64_t v12;

  v7 = (WTF::WallTime *)WebKit::NetworkCache::Key::Key((uint64_t)this, (uint64_t)a2);
  WTF::WallTime::now(v7);
  *((_QWORD *)this + 9) = v8;
  if (a4)
    v8 = *((_QWORD *)a4 + 10);
  *((_QWORD *)this + 10) = v8;
  *((_BYTE *)this + 88) = a4 == 0;
  *((_BYTE *)this + 89) = WebCore::ResourceRequestBase::isSameSite(a3);
  *((_BYTE *)this + 90) = (*((_BYTE *)a3 + 148) & 4) != 0;
  PartyForCookies = WebCore::ResourceRequestBase::firstPartyForCookies(a3);
  v10 = *(_DWORD **)PartyForCookies;
  if (*(_QWORD *)PartyForCookies)
    *v10 += 2;
  *((_QWORD *)this + 12) = v10;
  v11 = *(_OWORD *)(PartyForCookies + 8);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)(PartyForCookies + 24);
  *(_OWORD *)((char *)this + 104) = v11;
  v12 = WebCore::ResourceRequestBase::httpHeaderFields(a3);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WebKit::NetworkCache::SubresourceInfo *)((char *)this + 136), (WTF::ASCIILiteral *)v12);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WebKit::NetworkCache::SubresourceInfo *)((char *)this + 152), (WTF::ASCIILiteral *)(v12 + 16));
  *((_BYTE *)this + 168) = WebCore::ResourceRequestBase::priority(a3);
  return this;
}

uint64_t WebKit::NetworkCache::makeSubresourceInfoVector(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v3;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::ResourceRequest **v10;
  const WebCore::ResourceRequest *v11;
  uint64_t v12;
  int v13;
  _OWORD *v14;
  uint64_t v15;
  unsigned int v16;
  int j;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  const WebKit::NetworkCache::SubresourceInfo *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int i;
  unsigned int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _BYTE v77[19];
  uint64_t v78[5];
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  char v85;
  uint64_t v86;

  v3 = a3;
  v86 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *((_DWORD *)a2 + 3);
  if (v6)
  {
    if (v6 >= 0x1745D18)
    {
      __break(0xC471u);
LABEL_97:
      JUMPOUT(0x19717EA5CLL);
    }
    v7 = 176 * v6;
    v8 = WTF::fastMalloc((WTF *)(176 * v6));
    *(_DWORD *)(a1 + 8) = (v7 & 0xFFFFFFF0) / 0xB0;
    *(_QWORD *)a1 = v8;
  }
  v69 = 0;
  v67 = (unsigned int *)v3;
  if (!v3 || !*((_DWORD *)v3 + 3))
    goto LABEL_5;
  v51 = 0;
  do
  {
    v52 = *(_QWORD *)v3;
    v53 = v69;
    if (v69
      || (WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,unsigned int,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(&v69),
          (v53 = v69) != 0))
    {
      v54 = *(_DWORD *)(v53 - 8);
    }
    else
    {
      v54 = 0;
    }
    v55 = 0;
    v66 = v51;
    v56 = v52 + 176 * v51;
    v57 = *(_DWORD *)(v56 + 32);
    for (i = 1; ; ++i)
    {
      v59 = v57 & v54;
      v60 = *(_QWORD *)(v53 + 80 * (v57 & v54) + 16);
      if (v60 == -1)
      {
        v55 = v53 + 80 * v59;
        goto LABEL_79;
      }
      if (!v60)
        break;
      if ((WebKit::NetworkCache::Key::operator==(v53 + 80 * v59, v56, a3) & 1) != 0)
        goto LABEL_85;
LABEL_79:
      v57 = i + v59;
    }
    if (v55)
    {
      *(_OWORD *)v55 = 0u;
      *(_OWORD *)(v55 + 16) = 0u;
      *(_DWORD *)(v55 + 72) = 0;
      --*(_DWORD *)(v53 - 16);
      v53 = v69;
      WebKit::NetworkCache::Key::operator=(v55, v56);
      *(_DWORD *)(v55 + 72) = v51;
    }
    else
    {
      WebKit::NetworkCache::Key::operator=(v53 + 80 * v59, v56);
      *(_DWORD *)(v53 + 80 * v59 + 72) = v51;
    }
    v61 = *(_DWORD *)(v53 - 16);
    v62 = *(_DWORD *)(v53 - 12) + 1;
    *(_DWORD *)(v53 - 12) = v62;
    v63 = (v61 + v62);
    v64 = *(unsigned int *)(v53 - 4);
    if (v64 > 0x400)
    {
      if (v64 <= 2 * v63)
LABEL_84:
        WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,unsigned int,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(&v69);
    }
    else if (3 * v64 <= 4 * v63)
    {
      goto LABEL_84;
    }
LABEL_85:
    v3 = (const WTF::StringImpl *)v67;
    ++v51;
  }
  while (v67[3] > (unint64_t)(v66 + 1));
LABEL_5:
  v68 = 0;
  v9 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v9)
    goto LABEL_54;
  v10 = *(const WebCore::ResourceRequest ***)a2;
  v65 = *(_QWORD *)a2 + 8 * v9;
  while (2)
  {
    v11 = *v10;
    v12 = v68;
    if (v68
      || (WTF::HashTable<WebKit::NetworkCache::Key,WebKit::NetworkCache::Key,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(&v68, 0), (v12 = v68) != 0))
    {
      v13 = *(_DWORD *)(v12 - 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = 0;
    v15 = (uint64_t)v11 + 200;
    v16 = *((_DWORD *)v11 + 58);
    for (j = 1; ; ++j)
    {
      v18 = v16 & v13;
      v19 = v12 + 72 * (v16 & v13);
      v20 = *(_QWORD *)(v19 + 16);
      if (!v20)
        break;
      if (v20 == -1)
      {
        v14 = (_OWORD *)(v12 + 72 * v18);
      }
      else if ((WebKit::NetworkCache::Key::operator==(v12 + 72 * v18, v15, a3) & 1) != 0)
      {
        goto LABEL_25;
      }
      v16 = j + v18;
    }
    if (v14)
    {
      *v14 = 0u;
      v14[1] = 0u;
      --*(_DWORD *)(v12 - 16);
      v19 = (uint64_t)v14;
    }
    WebKit::NetworkCache::Key::operator=(v19, v15);
    v22 = v68;
    if (v68)
      v23 = *(_DWORD *)(v68 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v68 - 12) = v23;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
        goto LABEL_29;
    }
    else
    {
      if (3 * v25 > 4 * v24)
        goto LABEL_20;
LABEL_29:
      WTF::HashTable<WebKit::NetworkCache::Key,WebKit::NetworkCache::Key,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(&v68, (WTF::StringImpl **)v19);
    }
LABEL_20:
    if (v67)
    {
      v46 = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(&v69, (uint64_t)*v10 + 200, v21);
      v47 = v69;
      if (v69)
        v47 = v69 + 80 * *(unsigned int *)(v69 - 4);
      if (v47 == v46)
      {
        v49 = 0;
      }
      else
      {
        v48 = *(_DWORD *)(v46 + 72);
        if (v67[3] <= v48)
        {
          __break(0xC471u);
          JUMPOUT(0x19717EA64);
        }
        v49 = (const WebKit::NetworkCache::SubresourceInfo *)(*(_QWORD *)v67 + 176 * v48);
      }
      WebKit::NetworkCache::SubresourceInfo::SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)&v70, (const WebCore::ResourceRequest *)((char *)*v10 + 200), *v10, v49);
      v50 = *(_DWORD *)(a1 + 12);
      if (v50 == *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::SubresourceInfo>(a1, (unint64_t)&v70);
      }
      else
      {
        WebKit::NetworkCache::SubresourceInfo::SubresourceInfo(*(_QWORD *)a1 + 176 * v50, &v70);
        *(_DWORD *)(a1 + 12) = v50 + 1;
      }
      WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)&v70);
    }
    else
    {
      WebKit::NetworkCache::SubresourceInfo::SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)&v70, (const WebCore::ResourceRequest *)((char *)*v10 + 200), *v10, 0);
      v26 = *(_DWORD *)(a1 + 12);
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::SubresourceInfo>(a1, (unint64_t)&v70);
      }
      else
      {
        v27 = *(_QWORD *)a1 + 176 * v26;
        v28 = v70;
        v70 = 0;
        *(_QWORD *)v27 = v28;
        v29 = v71;
        v71 = 0;
        *(_QWORD *)(v27 + 8) = v29;
        v30 = v72;
        v72 = 0;
        *(_QWORD *)(v27 + 16) = v30;
        v31 = v73;
        v73 = 0;
        *(_QWORD *)(v27 + 24) = v31;
        v33 = v74;
        v32 = v75;
        *(_QWORD *)(v27 + 64) = v76;
        *(_OWORD *)(v27 + 32) = v33;
        *(_OWORD *)(v27 + 48) = v32;
        v34 = *(_OWORD *)v77;
        *(_DWORD *)(v27 + 87) = *(_DWORD *)&v77[15];
        *(_OWORD *)(v27 + 72) = v34;
        WTF::URL::URL(v27 + 96, v78);
        *(_QWORD *)(v27 + 136) = 0;
        *(_QWORD *)(v27 + 144) = 0;
        v35 = v79;
        v79 = 0;
        *(_QWORD *)(v27 + 136) = v35;
        LODWORD(v35) = v80;
        v80 = 0;
        *(_DWORD *)(v27 + 144) = v35;
        LODWORD(v35) = v81;
        v81 = 0;
        *(_DWORD *)(v27 + 148) = v35;
        *(_QWORD *)(v27 + 152) = 0;
        *(_QWORD *)(v27 + 160) = 0;
        v36 = v82;
        v82 = 0;
        *(_QWORD *)(v27 + 152) = v36;
        LODWORD(v36) = v83;
        v83 = 0;
        *(_DWORD *)(v27 + 160) = v36;
        LODWORD(v36) = v84;
        v84 = 0;
        *(_DWORD *)(v27 + 164) = v36;
        *(_BYTE *)(v27 + 168) = v85;
        *(_DWORD *)(a1 + 12) = v26 + 1;
      }
      WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)&v70);
      v37 = *(_DWORD *)(a1 + 12);
      if (!v37)
      {
        __break(0xC471u);
        goto LABEL_97;
      }
      *(_BYTE *)(*(_QWORD *)a1 + 176 * v37 - 88) = 0;
    }
LABEL_25:
    if (++v10 != (const WebCore::ResourceRequest **)v65)
      continue;
    break;
  }
  v38 = v68;
  if (v68)
  {
    v39 = *(unsigned int *)(v68 - 4);
    if ((_DWORD)v39)
    {
      v40 = (WTF::StringImpl **)(v68 + 16);
      do
      {
        v41 = *v40;
        if (*v40 != (WTF::StringImpl *)-1)
        {
          v42 = v40[1];
          v40[1] = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
            {
              WTF::StringImpl::destroy(v42, a2);
              v41 = *v40;
            }
            else
            {
              *(_DWORD *)v42 -= 2;
            }
          }
          *v40 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, a2);
            else
              *(_DWORD *)v41 -= 2;
          }
          v43 = *(v40 - 1);
          *(v40 - 1) = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, a2);
            else
              *(_DWORD *)v43 -= 2;
          }
          v44 = *(v40 - 2);
          *(v40 - 2) = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, a2);
            else
              *(_DWORD *)v44 -= 2;
          }
        }
        v40 += 9;
        --v39;
      }
      while (v39);
    }
    WTF::fastFree((WTF *)(v38 - 16), a2);
  }
LABEL_54:
  result = v69;
  if (v69)
    return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,unsigned int,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(v69, a2);
  return result;
}

uint64_t WebKit::NetworkCache::SubresourcesEntry::updateSubresourceLoads(_DWORD *a1, WTF::StringImpl *a2)
{
  WebKit::NetworkCache::SubresourceInfo **v3;
  void *v4;
  unsigned int v5;
  WebKit::NetworkCache::SubresourceInfo *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = (WebKit::NetworkCache::SubresourceInfo **)(a1 + 20);
  WebKit::NetworkCache::makeSubresourceInfoVector((uint64_t)&v12, a2, (const WTF::StringImpl *)(a1 + 20));
  v5 = a1[23];
  if (v5)
  {
    v6 = *v3;
    v7 = 176 * v5;
    do
    {
      WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo(v6);
      v6 = (WebKit::NetworkCache::SubresourceInfo *)(v8 + 176);
      v7 -= 176;
    }
    while (v7);
  }
  v9 = *v3;
  if (*v3)
  {
    *((_QWORD *)a1 + 10) = 0;
    a1[22] = 0;
    WTF::fastFree(v9, v4);
  }
  *((_QWORD *)a1 + 10) = v12;
  v10 = v13;
  v12 = 0;
  v13 = 0;
  *((_QWORD *)a1 + 11) = v10;
  return WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v4);
}

uint64_t WebKit::PrefetchCache::Entry::Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  WTF::URL::URL(a1, (uint64_t *)a2);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v8 + 40) = v6;
  *(_QWORD *)(v8 + 48) = v7;
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v8 + 56) = v9;
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(v8 + 64) = v10;
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 72) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(v8 + 80) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(v8 + 88) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(v8 + 92) = v12;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(v8 + 96) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(v8 + 104) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(v8 + 108) = v13;
  v14 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(v8 + 112) = v14;
  *(_BYTE *)(v8 + 120) = 0;
  *(_BYTE *)(v8 + 128) = 0;
  if (*(_BYTE *)(a2 + 128))
  {
    v15 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a1 + 120) = v15;
    *(_BYTE *)(a1 + 128) = 1;
  }
  v16 = *(_OWORD *)(a2 + 136);
  v17 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v17;
  *(_OWORD *)(a1 + 136) = v16;
  v18 = *(_OWORD *)(a2 + 184);
  v19 = *(_OWORD *)(a2 + 200);
  v20 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
  *(_OWORD *)(a1 + 216) = v20;
  *(_OWORD *)(a1 + 200) = v19;
  *(_OWORD *)(a1 + 184) = v18;
  v21 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 240) = v21;
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  WTF::URL::URL(a1 + 272, (uint64_t *)a3);
  WTF::URL::URL(a1 + 312, (uint64_t *)(a3 + 40));
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a3 + 80);
  v22 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = v22;
  v23 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a1 + 368) = v23;
  LODWORD(v23) = *(_DWORD *)(a3 + 104);
  *(_DWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a1 + 376) = v23;
  LODWORD(v23) = *(_DWORD *)(a3 + 108);
  *(_DWORD *)(a3 + 108) = 0;
  *(_DWORD *)(a1 + 380) = v23;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  v24 = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a1 + 384) = v24;
  LODWORD(v24) = *(_DWORD *)(a3 + 120);
  *(_DWORD *)(a3 + 120) = 0;
  *(_DWORD *)(a1 + 392) = v24;
  LODWORD(v24) = *(_DWORD *)(a3 + 124);
  *(_DWORD *)(a3 + 124) = 0;
  *(_DWORD *)(a1 + 396) = v24;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  v25 = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a1 + 400) = v25;
  LODWORD(v25) = *(_DWORD *)(a3 + 136);
  *(_DWORD *)(a3 + 136) = 0;
  *(_DWORD *)(a1 + 408) = v25;
  LODWORD(v25) = *(_DWORD *)(a3 + 140);
  *(_DWORD *)(a3 + 140) = 0;
  *(_DWORD *)(a1 + 412) = v25;
  LODWORD(v25) = *(_DWORD *)(a3 + 144);
  *(_BYTE *)(a1 + 420) = *(_BYTE *)(a3 + 148);
  *(_DWORD *)(a1 + 416) = v25;
  v26 = *(_QWORD *)(a3 + 152);
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a1 + 424) = v26;
  v27 = *(_QWORD *)(a3 + 160);
  *(_QWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a1 + 432) = v27;
  v28 = *(_QWORD *)(a3 + 168);
  *(_QWORD *)(a3 + 168) = 0;
  *(_QWORD *)(a1 + 440) = v28;
  v29 = *(_QWORD *)(a3 + 176);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a3 + 184);
  *(_QWORD *)(a1 + 448) = v29;
  v30 = *(_QWORD *)(a3 + 192);
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)(a1 + 464) = v30;
  return a1;
}

uint64_t WebKit::PrefetchCache::clearExpiredEntries(WebKit::PrefetchCache *this)
{
  uint64_t result;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = WTF::WallTime::now(this);
  v4 = *((_QWORD *)this + 1);
  if (v4 != *((_QWORD *)this + 2))
  {
    v5 = v3;
    do
    {
      v6 = *((_QWORD *)this + 3) + 48 * v4;
      if (v5 - *(double *)(v6 + 40) <= 5.0)
        return WebCore::TimerBase::start();
      v7 = *(uint64_t **)this;
      v8 = WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>,WTF::URL>(*(uint64_t **)this, (WTF::StringImpl **)v6);
      if (*v7)
      {
        v9 = *v7 + 48 * *(unsigned int *)(*v7 - 4);
        if (v9 == v8)
          goto LABEL_11;
      }
      else
      {
        if (!v8)
          goto LABEL_11;
        v9 = 0;
      }
      if (v9 != v8)
        WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::remove(v7, v8);
LABEL_11:
      v10 = *((_QWORD *)this + 1);
      if (v10 == *((_QWORD *)this + 2))
      {
        result = 512;
        __break(0xC471u);
        return result;
      }
      result = (uint64_t)WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct((WTF::StringImpl *)(*((_QWORD *)this + 3) + 48 * v10), (WTF::StringImpl *)(*((_QWORD *)this + 3) + 48 * v10 + 48));
      v11 = *((_QWORD *)this + 1);
      v12 = *((_QWORD *)this + 2);
      if (v11 == *((unsigned int *)this + 8) - 1)
        v4 = 0;
      else
        v4 = v11 + 1;
      *((_QWORD *)this + 1) = v4;
    }
    while (v4 != v12);
  }
  return result;
}

void WebKit::PrefetchCache::~PrefetchCache(WebKit::PrefetchCache *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  void *v10;
  WTF *v11;

  *((_QWORD *)this + 5) = off_1E34B3740;
  v2 = (WebKit::PrefetchCache *)((char *)this + 40);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  if (v4 <= v5)
  {
    v9 = (WTF::StringImpl *)((char *)v6 + 48 * v5);
    v8 = (WTF::StringImpl *)((char *)v6 + 48 * v4);
  }
  else
  {
    WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct(v6, (WTF::StringImpl *)((char *)v6 + 48 * v5));
    v7 = *((_QWORD *)this + 3);
    v8 = (WTF::StringImpl *)(v7 + 48 * *((_QWORD *)this + 1));
    v9 = (WTF::StringImpl *)(v7 + 48 * *((unsigned int *)this + 8));
  }
  WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct(v8, v9);
  v11 = (WTF *)*((_QWORD *)this + 3);
  if (v11)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v11, v10);
  }
  std::unique_ptr<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)this, 0);
}

WTF::StringImpl *WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::removeAllMatching<WebKit::PrefetchCache::take(WTF::URL const&)::$_0>(WTF::StringImpl *result, const WTF::StringImpl ***a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11[6];

  v3 = (uint64_t)result;
  v4 = *(_QWORD *)result;
  v5 = *((_QWORD *)result + 1);
  if (*(_QWORD *)result > v5)
    v5 += *((unsigned int *)result + 6);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    do
    {
      if (*(_QWORD *)v3 == *(_QWORD *)(v3 + 8)
        || (v7 = *(_QWORD *)(v3 + 16) + 48 * *(_QWORD *)v3,
            WTF::URL::URL((uint64_t)v11, (uint64_t *)v7),
            v11[5] = *(WTF::StringImpl **)(v7 + 40),
            *(_QWORD *)v3 == *(_QWORD *)(v3 + 8)))
      {
        __break(0xC471u);
        JUMPOUT(0x19717F024);
      }
      WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct((WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 48 * *(_QWORD *)v3), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 48 * *(_QWORD *)v3 + 48));
      if (*(_QWORD *)v3 == *(unsigned int *)(v3 + 24) - 1)
        v9 = 0;
      else
        v9 = *(_QWORD *)v3 + 1;
      *(_QWORD *)v3 = v9;
      if ((WTF::equal(v11[0], **a2, v8) & 1) == 0)
        WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::append(v3, (uint64_t *)v11);
      result = v11[0];
      v11[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
      --v6;
    }
    while (v6);
  }
  return result;
}

double WebKit::PrefetchCache::store(uint64_t **a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  WTF **v34;
  const WTF::StringImpl *v35;
  WTF **v36;
  int v37;
  WTF **v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t **v53;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v9 = a1;
  v10 = *a1;
  if (!*a1)
  {
    v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v11 = 0;
    v54 = 0;
    std::unique_ptr<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>>::reset[abi:sn180100](v9, v11);
    std::unique_ptr<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)&v54, 0);
    v10 = *v9;
  }
  v12 = WTF::fastMalloc((WTF *)0x1D8);
  WTF::URL::URL(v12, (uint64_t *)a3);
  v13 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(v14 + 40) = v13;
  *(_QWORD *)(v14 + 48) = *(_QWORD *)(a3 + 48);
  v15 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(v14 + 56) = v15;
  v16 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(v14 + 64) = v16;
  v17 = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 88) = 0;
  *(_QWORD *)(v14 + 72) = v17;
  v18 = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(v14 + 80) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 88);
  *(_DWORD *)(a3 + 88) = 0;
  *(_DWORD *)(v14 + 88) = v18;
  LODWORD(v18) = *(_DWORD *)(a3 + 92);
  *(_DWORD *)(a3 + 92) = 0;
  *(_DWORD *)(v14 + 92) = v18;
  *(_QWORD *)(v14 + 96) = 0;
  *(_QWORD *)(v14 + 104) = 0;
  v19 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(v14 + 96) = v19;
  LODWORD(v19) = *(_DWORD *)(a3 + 104);
  *(_DWORD *)(a3 + 104) = 0;
  *(_DWORD *)(v14 + 104) = v19;
  LODWORD(v19) = *(_DWORD *)(a3 + 108);
  *(_DWORD *)(a3 + 108) = 0;
  *(_DWORD *)(v14 + 108) = v19;
  v20 = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(v14 + 112) = v20;
  *(_BYTE *)(v14 + 120) = 0;
  *(_BYTE *)(v14 + 128) = 0;
  if (*(_BYTE *)(a3 + 128))
  {
    v21 = *(_QWORD *)(a3 + 120);
    *(_QWORD *)(a3 + 120) = 0;
    *(_QWORD *)(v12 + 120) = v21;
    *(_BYTE *)(v12 + 128) = 1;
  }
  v22 = *(_OWORD *)(a3 + 136);
  v23 = *(_OWORD *)(a3 + 152);
  *(_OWORD *)(v12 + 168) = *(_OWORD *)(a3 + 168);
  *(_OWORD *)(v12 + 152) = v23;
  *(_OWORD *)(v12 + 136) = v22;
  v24 = *(_OWORD *)(a3 + 184);
  v25 = *(_OWORD *)(a3 + 200);
  v26 = *(_OWORD *)(a3 + 216);
  *(_DWORD *)(v12 + 231) = *(_DWORD *)(a3 + 231);
  *(_OWORD *)(v12 + 216) = v26;
  *(_OWORD *)(v12 + 200) = v25;
  *(_OWORD *)(v12 + 184) = v24;
  v27 = *(_QWORD *)(a3 + 240);
  *(_QWORD *)(a3 + 240) = 0;
  *(_QWORD *)(v12 + 240) = v27;
  *(_BYTE *)(v12 + 248) = *(_BYTE *)(a3 + 248);
  *(_BYTE *)(v12 + 256) = a4;
  v28 = *a5;
  *a5 = 0;
  *(_QWORD *)(v12 + 264) = v28;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(v12 + 272));
  v54 = (WTF::StringImpl *)v12;
  v29 = *v10;
  if (*v10
    || (WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(v10, 0), (v29 = *v10) != 0))
  {
    v30 = *(_DWORD *)(v29 - 8);
  }
  else
  {
    v30 = 0;
  }
  v31 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v31 >= 0x100)
    v32 = v31 >> 8;
  else
    v32 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  v33 = v32 & v30;
  v34 = (WTF **)(v29 + 48 * (v32 & v30));
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v34) & 1) == 0)
  {
    v53 = v9;
    v36 = 0;
    v37 = 1;
    do
    {
      v38 = v34;
      if (*v34 != (WTF *)-1)
      {
        v39 = WTF::equal(*v34, *(const WTF::StringImpl **)a2, v35);
        v38 = v36;
        if ((v39 & 1) != 0)
        {
          v47 = 1;
          v9 = v53;
          goto LABEL_28;
        }
      }
      v33 = (v33 + v37) & v30;
      v34 = (WTF **)(v29 + 48 * v33);
      ++v37;
      v36 = v38;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v34));
    v9 = v53;
    if (v38)
    {
      *((_OWORD *)v38 + 1) = 0u;
      *((_OWORD *)v38 + 2) = 0u;
      *(_OWORD *)v38 = 0u;
      --*(_DWORD *)(*v10 - 16);
      v34 = v38;
    }
  }
  WTF::HashMapTranslator<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry>>((uint64_t)v34, a2, (uint64_t *)&v54);
  v41 = *v10;
  if (*v10)
    v42 = *(_DWORD *)(v41 - 12) + 1;
  else
    v42 = 1;
  *(_DWORD *)(v41 - 12) = v42;
  v43 = *v10;
  if (*v10)
    v44 = *(_DWORD *)(v43 - 12);
  else
    v44 = 0;
  v45 = (*(_DWORD *)(v43 - 16) + v44);
  v46 = *(unsigned int *)(v43 - 4);
  if (v46 > 0x400)
  {
    if (v46 > 2 * v45)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (3 * v46 <= 4 * v45)
LABEL_26:
    v39 = (uint64_t)WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(v10, v34);
LABEL_27:
  v47 = 0;
LABEL_28:
  v48 = v54;
  v54 = 0;
  if (v48)
    std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)&v54, v48);
  if ((v47 & 1) == 0)
  {
    WTF::WallTime::now((WTF::WallTime *)v39);
    v50 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v50 += 2;
    v54 = v50;
    v55 = *(_OWORD *)(a2 + 8);
    v56 = *(_OWORD *)(a2 + 24);
    v57 = v49;
    WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::append((uint64_t)(v9 + 1), (uint64_t *)&v54);
    v52 = v54;
    v54 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v51);
      else
        *(_DWORD *)v52 -= 2;
    }
    if (((unint64_t)v9[9] & 0xFFFFFFFFFFFFLL) == 0
      || (result = *(double *)(((unint64_t)v9[9] & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
    {
      WebCore::TimerBase::start();
    }
  }
  return result;
}

void WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::append(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1)
  {
    if (v4 + 1 != *(_QWORD *)a1)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = *(unsigned int *)(a1 + 24);
  if (!v4)
  {
    if ((_DWORD)v5)
    {
      v4 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v4 == v5 - 1)
  {
LABEL_9:
    WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::expandCapacity(a1);
    v4 = *(_QWORD *)(a1 + 8);
  }
LABEL_10:
  WTF::URL::URL(*(_QWORD *)(a1 + 16) + 48 * v4, a2);
  *(_QWORD *)(v6 + 40) = a2[5];
  v7 = *(_QWORD *)(a1 + 8);
  if (v7 == *(unsigned int *)(a1 + 24) - 1)
    v8 = 0;
  else
    v8 = v7 + 1;
  *(_QWORD *)(a1 + 8) = v8;
}

double WebKit::PrefetchCache::storeRedirect(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *this)
{
  WTF::StringImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  WTF::WallTime *v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  double result;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;

  if (!*(_QWORD *)a1)
  {
    v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v8 = 0;
    v19 = 0;
    std::unique_ptr<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)a1, v8);
    std::unique_ptr<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)&v19, 0);
  }
  WebCore::ResourceRequestBase::clearPurpose(this);
  v9 = *(uint64_t **)a1;
  v10 = WTF::fastMalloc((WTF *)0x1D8);
  v23 = (_QWORD *)WebKit::PrefetchCache::Entry::Entry(v10, a3, (uint64_t)this);
  WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::inlineSet<WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry>>(v9, (WTF::StringImpl **)a2, (uint64_t *)&v23, (uint64_t)&v19);
  v12 = v23;
  v23 = 0;
  if (v12)
    std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)&v23, v12);
  WTF::WallTime::now(v11);
  v14 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v14 += 2;
  v19 = v14;
  v15 = *(_OWORD *)(a2 + 24);
  v20 = *(_OWORD *)(a2 + 8);
  v21 = v15;
  v22 = v13;
  WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::append(a1 + 8, (uint64_t *)&v19);
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

uint64_t WebKit::webSecItemCopyMatching(WebKit *this, const __CFDictionary *a2, const void **a3)
{
  uint64_t v3;
  WebKit *v5;
  const __CFDictionary *v6;
  const void **v7;
  unsigned int v8;
  _BYTE v9[16];
  int v10;
  char v11;
  const __CFDictionary *v12;
  _QWORD v13[3];
  _QWORD *v14;

  v12 = a2;
  WebKit::sendSecItemRequest((uint64_t)&v8, 1, this, 0);
  if (!v11)
    return 4294941988;
  v13[0] = &v12;
  v13[1] = &v12;
  v13[2] = &v12;
  if (v10 != -1)
  {
    v14 = v13;
    ((void (*)(_QWORD **, _BYTE *))off_1E34C4908[v10])(&v14, v9);
    if (v11)
    {
      v3 = v8;
      if (v10 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E34C4850[v10])(v13, v9);
      return v3;
    }
    __break(1u);
  }
  v5 = (WebKit *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::webSecItemAdd(v5, v6, v7);
}

uint64_t WebKit::webSecItemAdd(WebKit *this, const __CFDictionary *a2, const void **a3)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  int v7;
  char v8;
  char v9;

  if (a2)
    return 4294967246;
  WebKit::sendSecItemRequest((uint64_t)&v5, 2, this, 0);
  if (!v8)
    return 4294941988;
  v3 = v5;
  if (v7 != -1)
    ((void (*)(char *, uint64_t *))off_1E34C4850[v7])(&v9, &v6);
  return v3;
}

uint64_t WebKit::webSecItemUpdate(WebKit *this, const __CFDictionary *a2, const __CFDictionary *a3)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  int v7;
  char v8;
  char v9;

  WebKit::sendSecItemRequest((uint64_t)&v5, 3, this, a2);
  if (!v8)
    return 4294941988;
  v3 = v5;
  if (v7 != -1)
    ((void (*)(char *, uint64_t *))off_1E34C4850[v7])(&v9, &v6);
  return v3;
}

uint64_t WebKit::webSecItemDelete(WebKit *this, const __CFDictionary *a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  int v6;
  char v7;
  char v8;

  WebKit::sendSecItemRequest((uint64_t)&v4, 4, this, 0);
  if (!v7)
    return 4294941988;
  v2 = v4;
  if (v6 != -1)
    ((void (*)(char *, uint64_t *))off_1E34C4850[v6])(&v8, &v5);
  return v2;
}

void WebKit::BackgroundFetchStoreImpl::~BackgroundFetchStoreImpl(WebKit::BackgroundFetchStoreImpl *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  char v29;
  char v30;
  char v31;

  *(_QWORD *)this = off_1E34C46C0;
  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      v8 = v6 + 40;
      do
      {
        if (*(_QWORD *)(v8 - 40) != -1)
        {
          v9 = *(WTF::StringImpl **)(v8 + 40);
          *(_QWORD *)(v8 + 40) = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v9 -= 2;
          }
          v10 = *(WTF::StringImpl **)(v8 + 32);
          *(_QWORD *)(v8 + 32) = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          v11 = *(unsigned int *)(v8 + 24);
          if ((_DWORD)v11 != -1)
            ((void (*)(char *, uint64_t))off_1E34C4700[v11])(&v28, v8);
          *(_DWORD *)(v8 + 24) = -1;
          v12 = *(unsigned int *)(v8 - 8);
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, uint64_t))off_1E34C4700[v12])(&v29, v8 - 32);
          *(_DWORD *)(v8 - 8) = -1;
          v13 = *(WTF::StringImpl **)(v8 - 40);
          *(_QWORD *)(v8 - 40) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
        v8 += 88;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v14 = *((_QWORD *)this + 4);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v15)
    {
      v16 = v14 + 72;
      do
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)(v16 - 72));
        if ((v17 & 1) == 0)
        {
          WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, a2);
          v18 = *(WTF::StringImpl ***)(v16 - 8);
          if (v18)
            WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v18, (WTF::StringImpl *)a2);
          v19 = *(unsigned int *)(v16 - 16);
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, uint64_t))off_1E34C4700[v19])(&v30, v16 - 40);
          *(_DWORD *)(v16 - 16) = -1;
          v20 = *(unsigned int *)(v16 - 48);
          if ((_DWORD)v20 != -1)
            ((void (*)(char *, uint64_t))off_1E34C4700[v20])(&v31, v16 - 72);
          *(_DWORD *)(v16 - 48) = -1;
        }
        v16 += 88;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
  v21 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, a2);
    }
  }
  v24 = *((_QWORD *)this + 2);
  if (v24)
  {
    *(_QWORD *)(v24 + 8) = 0;
    v25 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::BackgroundFetchStoreImpl::~BackgroundFetchStoreImpl(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WebKit::BackgroundFetchStoreImpl::registerFetch(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, WTF::StringImpl **a5)
{
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int i;
  unsigned int v20;
  WTF **v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t *result;
  uint64_t *v37;
  WTF::StringImpl *v38;
  uint64_t *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  const WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  const WTF::StringImpl *v48;
  WTF::StringImpl **v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  char v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  _BYTE v68[24];
  int v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  LOBYTE(v65) = 0;
  v67 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v65, a2);
  v68[0] = 0;
  v69 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v68, a2 + 32);
  v11 = *(WTF::StringImpl **)(a3 + 32);
  if (v11)
    *(_DWORD *)v11 += 2;
  v12 = (uint64_t *)(a1 + 40);
  v70 = v11;
  v13 = *a4;
  if (*a4)
    *(_DWORD *)v13 += 2;
  v71 = v13;
  v14 = *v12;
  if (*v12
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(a1 + 40), 0), (v14 = *v12) != 0))
  {
    v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = *((_DWORD *)*a5 + 4);
  v62 = a1;
  v63 = a4;
  if (v16 >= 0x100)
    v17 = v16 >> 8;
  else
    v17 = WTF::StringImpl::hashSlowCase(*a5);
  v18 = 0;
  for (i = 1; ; ++i)
  {
    v20 = v17 & v15;
    v21 = (WTF **)(v14 + 88 * (v17 & v15));
    v22 = *v21;
    if (*v21 == (WTF *)-1)
    {
      v18 = v14 + 88 * v20;
      goto LABEL_17;
    }
    if (!v22)
      break;
    if ((WTF::equal(v22, *a5, v10) & 1) != 0)
      goto LABEL_37;
LABEL_17:
    v17 = i + v20;
  }
  if (v18)
  {
    *(_QWORD *)(v18 + 80) = 0;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)v18 = 0u;
    --*(_DWORD *)(*v12 - 16);
    v21 = (WTF **)v18;
  }
  WTF::String::operator=(v21, (WTF::StringImpl *)a5);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v21 + 1), (uint64_t)&v65);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v21 + 5), (uint64_t)v68);
  v24 = v70;
  v70 = 0;
  v25 = v21[9];
  v21[9] = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v71;
  v71 = 0;
  v27 = v21[10];
  v21[10] = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v23);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = *v12;
  if (*v12)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *v12;
  if (*v12)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 <= 2 * v32)
LABEL_36:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v12, v21);
  }
  else if (3 * v33 <= 4 * v32)
  {
    goto LABEL_36;
  }
LABEL_37:
  v34 = v71;
  v71 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v23);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v70;
  v70 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v23);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (v69 != -1)
    ((void (*)(char *, _BYTE *))off_1E34C4700[v69])(&v64, v68);
  v69 = -1;
  if (v67 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E34C4700[v67])(&v64, &v65);
  result = (uint64_t *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(v62 + 32), a2);
  v37 = *(uint64_t **)(v62 + 32);
  if (v37)
    v37 += 11 * *((unsigned int *)v37 - 1);
  if (v37 != result)
  {
    v38 = *(WTF::StringImpl **)(a3 + 32);
    if (v38)
      *(_DWORD *)v38 += 2;
    v39 = result + 8;
    v65 = v38;
    v40 = *v63;
    if (*v63)
      *(_DWORD *)v40 += 2;
    v66 = v40;
    v41 = *v39;
    if (*v39
      || (WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(result + 8),
          (v41 = *v39) != 0))
    {
      v42 = *(_DWORD *)(v41 - 8);
    }
    else
    {
      v42 = 0;
    }
    v43 = WTF::PairHash<WTF::String,WTF::String>::hash(&v65) & v42;
    v44 = (WTF::StringImpl **)(v41 + 24 * v43);
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v44, v45, v46) & 1) == 0)
    {
      v49 = 0;
      v50 = 1;
      do
      {
        if (*v44 == (WTF::StringImpl *)-1)
        {
          v49 = v44;
        }
        else if ((WTF::PairHash<WTF::String,WTF::String>::equal(v44, &v65, v48) & 1) != 0)
        {
          goto LABEL_85;
        }
        v43 = (v43 + v50) & v42;
        v44 = (WTF::StringImpl **)(v41 + 24 * v43);
        ++v50;
      }
      while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v44, (uint64_t)v47, v48));
      if (v49)
      {
        *v49 = 0;
        v49[1] = 0;
        v49[2] = 0;
        --*(_DWORD *)(*v39 - 16);
        v44 = v49;
      }
    }
    v51 = v65;
    v65 = 0;
    v52 = *v44;
    *v44 = v51;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v47);
      else
        *(_DWORD *)v52 -= 2;
    }
    v53 = v66;
    v66 = 0;
    v54 = v44[1];
    v44[1] = v53;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v47);
      else
        *(_DWORD *)v54 -= 2;
    }
    WTF::String::operator=(v44 + 2, (WTF::StringImpl *)a5);
    v55 = *v39;
    if (*v39)
      v56 = *(_DWORD *)(v55 - 12) + 1;
    else
      v56 = 1;
    *(_DWORD *)(v55 - 12) = v56;
    v57 = *v39;
    if (*v39)
      v58 = *(_DWORD *)(v57 - 12);
    else
      v58 = 0;
    v59 = (*(_DWORD *)(v57 - 16) + v58);
    v60 = *(unsigned int *)(v57 - 4);
    if (v60 > 0x400)
    {
      if (v60 <= 2 * v59)
LABEL_84:
        WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(v39);
    }
    else if (3 * v60 <= 4 * v59)
    {
      goto LABEL_84;
    }
LABEL_85:
    v61 = v66;
    v66 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v47);
      else
        *(_DWORD *)v61 -= 2;
    }
    result = (uint64_t *)v65;
    v65 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v47);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WebKit::BackgroundFetchStoreImpl::initializeFetches(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const WTF::URL *v6;
  unsigned int *result;
  char v8;
  _BYTE v9[24];
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9[0] = 0;
  v10 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v9, a2);
  WebCore::SecurityOriginData::fromURL((WebCore::SecurityOriginData *)(a2 + 32), v6);
  result = WebKit::BackgroundFetchStoreImpl::initializeFetches(a1, (uint64_t)v9, a3);
  if (v12 != -1)
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1E34C4700[v12])(&v8, &v11);
  v12 = -1;
  if (v10 != -1)
    return (unsigned int *)((uint64_t (*)(char *, _BYTE *))off_1E34C4700[v10])(&v8, v9);
  return result;
}

{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int *result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::SWServer *v39;
  unsigned int *Engine;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  _DWORD *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  _DWORD *v56;
  unsigned int v57;
  unsigned int v58;
  _QWORD *v61;
  WTF::StringImpl **v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _BYTE v66[24];
  int v67;
  WTF *v68;
  _DWORD *v69;
  WTF *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3 || !*(_QWORD *)(v3 + 8))
  {
    v24 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  v5 = (uint64_t *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  v62 = 0;
  v63 = 0;
  v64 = 0;
  if (v6
    || (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand((uint64_t *)(a1 + 32), 0), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::computeHash<WebCore::ClientOrigin>(a2) & v7;
  v9 = v6 + 88 * v8;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v9);
      if ((v12 & 1) != 0)
      {
        v10 = v9;
      }
      else if (WebCore::operator==() && (WebCore::operator==() & 1) != 0)
      {
        v30 = 1;
        v15 = a3;
        goto LABEL_35;
      }
      v8 = (v8 + v11) & v7;
      v9 = v6 + 88 * v8;
      ++v11;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>());
    if (v10)
    {
      *(_QWORD *)(v10 + 80) = 0;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)v10 = 0u;
      --*(_DWORD *)(*v5 - 16);
      v9 = v10;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v9, a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v9 + 32, a2 + 32);
  v62 = 0;
  v14 = *(WTF::StringImpl ***)(v9 + 64);
  *(_QWORD *)(v9 + 64) = 0;
  v15 = a3;
  if (v14)
    WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v14, v13);
  v16 = *(unsigned int *)(v9 + 84);
  if ((_DWORD)v16)
  {
    v17 = *(uint64_t **)(v9 + 72);
    v18 = 8 * v16;
    do
    {
      v19 = *v17;
      *v17 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  v20 = *(WTF **)(v9 + 72);
  if (v20)
  {
    *(_QWORD *)(v9 + 72) = 0;
    *(_DWORD *)(v9 + 80) = 0;
    WTF::fastFree(v20, v13);
  }
  *(_QWORD *)(v9 + 72) = v63;
  v21 = v64;
  v63 = 0;
  v64 = 0;
  *(_QWORD *)(v9 + 80) = v21;
  v22 = *v5;
  if (*v5)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v26 = *v5;
  if (*v5)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 <= 0x400)
  {
    if (3 * v29 > 4 * v28)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (v29 <= 2 * v28)
LABEL_33:
    v9 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v5, (unsigned int *)v9);
LABEL_34:
  v30 = 0;
LABEL_35:
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v13);
  if (v62)
    WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v62, v31);
  v32 = *(unsigned int *)(v9 + 84);
  if (*(_DWORD *)(v9 + 84))
    v33 = 0;
  else
    v33 = v30;
  if (v33 == 1)
  {
    v34 = *v15;
    *v15 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  else
  {
    v35 = (_QWORD *)(v9 + 72);
    if ((_DWORD)v32 == *(_DWORD *)(v9 + 80))
    {
      v15 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v32 + 1, (unint64_t)v15);
      v32 = *(unsigned int *)(v9 + 84);
      v36 = (_QWORD *)(*(_QWORD *)(v9 + 72) + 8 * v32);
    }
    else
    {
      v36 = (_QWORD *)(*v35 + 8 * v32);
    }
    v37 = *v15;
    *v15 = 0;
    *v36 = v37;
    *(_DWORD *)(v9 + 84) = v32 + 1;
    LOBYTE(v62) = 0;
    v65 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v62, a2);
    v66[0] = 0;
    v67 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v66, a2 + 32);
    v38 = *(_QWORD *)(a1 + 48);
    if (v38)
      v39 = *(WebCore::SWServer **)(v38 + 8);
    else
      v39 = 0;
    Engine = (unsigned int *)WebCore::SWServer::backgroundFetchEngine(v39);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Engine, (uint64_t)Engine);
    v41 = *(unsigned int **)Engine;
    if (*(_QWORD *)Engine)
    {
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 + 1, v41));
    }
    ++*(_DWORD *)(a1 + 8);
    v68 = (WTF *)v41;
    v69 = (_DWORD *)a1;
    v43 = *(unsigned int **)(a1 + 24);
    if (v43)
    {
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 + 1, v43));
    }
    v70 = (WTF *)v43;
    v45 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v45 = &off_1E34C4FD0;
    *(_BYTE *)(v45 + 8) = 0;
    *(_DWORD *)(v45 + 32) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v45 + 8, (uint64_t)&v62);
    *(_BYTE *)(v45 + 40) = 0;
    *(_DWORD *)(v45 + 64) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v45 + 40, (uint64_t)v66);
    *(_QWORD *)(v45 + 72) = v68;
    v46 = v69;
    v68 = 0;
    v69 = 0;
    *(_QWORD *)(v45 + 80) = v46;
    v47 = v70;
    v70 = 0;
    *(_QWORD *)(v45 + 88) = v47;
    v48 = *(_QWORD *)(a1 + 24);
    if (v48)
      v49 = *(_QWORD *)(v48 + 8);
    else
      v49 = 0;
    v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v50 = &off_1E34C5070;
    v50[1] = v45;
    v61 = v50;
    WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v49, a2, (uint64_t *)&v61);
    v52 = (uint64_t)v61;
    v61 = 0;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    v53 = (unsigned int *)v70;
    v70 = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        WTF::fastFree((WTF *)v53, v51);
      }
    }
    v56 = v69;
    v69 = 0;
    if (v56)
    {
      if (v56[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
      else
        --v56[2];
    }
    result = (unsigned int *)v68;
    v68 = 0;
    if (result)
    {
      do
      {
        v57 = __ldaxr(result);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, result));
      if (!v58)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v51);
      }
    }
    if (v67 != -1)
      result = (unsigned int *)((uint64_t (*)(_QWORD **, _BYTE *))off_1E34C4700[v67])(&v61, v66);
    v67 = -1;
    if (v65 != -1)
      return (unsigned int *)((uint64_t (*)(_QWORD **, WTF::StringImpl ***))off_1E34C4700[v65])(&v61, &v62);
  }
  return result;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreImpl::clearFetch(uint64_t a1, WTF::StringImpl **this, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  WTF **v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *result;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  _QWORD *v53;
  _BYTE v54[24];
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5 || !*(_QWORD *)(v5 + 8))
  {
    v28 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v28 + 16))(v28, this);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  WebCore::ServiceWorkerRegistrationKey::clientOrigin((WebCore::ServiceWorkerRegistrationKey *)this);
  v9 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 32), (uint64_t)v54);
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
    v12 += 88 * *(unsigned int *)(v12 - 4);
  if (v12 != v9)
  {
    v13 = this[4];
    if (v13)
      *(_DWORD *)v13 += 2;
    v14 = (uint64_t *)(v9 + 64);
    v51 = v13;
    v15 = *a3;
    if (*a3)
      *(_DWORD *)v15 += 2;
    v52 = v15;
    v16 = *v14;
    if (!*v14)
      goto LABEL_26;
    v17 = *(_DWORD *)(v16 - 8);
    v18 = WTF::PairHash<WTF::String,WTF::String>::hash(&v51) & v17;
    v19 = (WTF **)(v16 + 24 * v18);
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v19, v20, v21) & 1) != 0)
    {
LABEL_16:
      v23 = *v14;
      if (!*v14)
        goto LABEL_26;
      v19 = (WTF **)(v23 + 24 * *(unsigned int *)(v23 - 4));
    }
    else
    {
      v22 = 1;
      while (*v19 == (WTF *)-1 || (WTF::PairHash<WTF::String,WTF::String>::equal(v19, &v51, v11) & 1) == 0)
      {
        v18 = (v18 + v22) & v17;
        v19 = (WTF **)(v16 + 24 * v18);
        ++v22;
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v19, (uint64_t)v10, v11))goto LABEL_16;
      }
      v23 = *v14;
      if (!*v14)
      {
LABEL_19:
        if ((WTF **)v23 != v19)
        {
          v24 = v19[2];
          v19[2] = 0;
          v50 = v24;
          v25 = *v14;
          if (!*v14 || (v25 += 24 * *(unsigned int *)(v25 - 4), (WTF **)v25 != v19))
          {
            if ((WTF **)v25 != v19)
            {
              WTF::KeyValuePairHashTraits<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>>::customDeleteBucket(v19, v10);
              ++*(_DWORD *)(*v14 - 16);
              v26 = *v14;
              v27 = *v14 ? *(_DWORD *)(v26 - 12) - 1 : -1;
              *(_DWORD *)(v26 - 12) = v27;
              v46 = *v14;
              if (*v14)
              {
                v47 = 6 * *(_DWORD *)(v46 - 12);
                v48 = *(_DWORD *)(v46 - 4);
                if (v47 < v48 && v48 >= 9)
                  WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::rehash(v14, v48 >> 1);
              }
            }
          }
LABEL_27:
          v30 = v52;
          v52 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          v32 = v51;
          v51 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::destroy(v32, v10);
              if (!v24)
                goto LABEL_42;
              goto LABEL_38;
            }
            *(_DWORD *)v32 -= 2;
          }
          if (!v24)
            goto LABEL_42;
LABEL_38:
          if (*((_DWORD *)v24 + 1))
          {
            v33 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 40), &v50, v11);
            v34 = *(_QWORD *)(a1 + 40);
            if (v34)
            {
              v35 = v34 + 88 * *(unsigned int *)(v34 - 4);
              if (v35 == v33)
                goto LABEL_47;
            }
            else
            {
              if (!v33)
              {
LABEL_47:
                ++*(_DWORD *)(a1 + 8);
                *(_DWORD *)v24 += 2;
                v38 = *a4;
                *a4 = 0;
                v39 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
                *(_QWORD *)v39 = &off_1E34C5110;
                *((_QWORD *)v39 + 1) = a1;
                *((_QWORD *)v39 + 2) = v24;
                *((_QWORD *)v39 + 3) = v38;
                v40 = *(_QWORD *)(a1 + 24);
                if (v40)
                  v41 = *(_QWORD *)(v40 + 8);
                else
                  v41 = 0;
                WTF::String::isolatedCopy();
                v52 = v39;
                v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                *v42 = &off_1E34C5138;
                v42[1] = v51;
                v43 = v52;
                v51 = 0;
                v52 = 0;
                v42[2] = v43;
                v53 = v42;
                WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v41, (uint64_t)v54, (uint64_t *)&v53);
                v44 = (uint64_t)v53;
                v53 = 0;
                if (v44)
                  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
                v45 = v52;
                v52 = 0;
                if (v45)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v45 + 8))(v45);
                result = v51;
                v51 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
                  else
                    *(_DWORD *)result -= 2;
                }
                v24 = v50;
                goto LABEL_58;
              }
              v35 = 0;
            }
            if (v35 != v33)
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 40), v33);
            goto LABEL_47;
          }
LABEL_42:
          v36 = *a4;
          *a4 = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
          result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
LABEL_58:
          v50 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(v24, v37);
            else
              *(_DWORD *)v24 -= 2;
          }
          goto LABEL_62;
        }
LABEL_26:
        v24 = 0;
        v50 = 0;
        goto LABEL_27;
      }
    }
    v23 += 24 * *(unsigned int *)(v23 - 4);
    goto LABEL_19;
  }
  v31 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
LABEL_62:
  if (v57 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E34C4700[v57])(&v51, &v56);
  v57 = -1;
  if (v55 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34C4700[v55])(&v51, v54);
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::clearAllFetches(uint64_t a1, const WTF::StringImpl **this, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  WTF **v19;
  _DWORD **v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  double v39;
  double v40;
  double v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  _DWORD *v58;
  _QWORD *v59;
  uint64_t *v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _BYTE v71[24];
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;

  v3 = a3;
  v75 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    v27 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, const WTF::StringImpl **))(*(_QWORD *)v27 + 16))(v27, this);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  WebCore::ServiceWorkerRegistrationKey::clientOrigin((WebCore::ServiceWorkerRegistrationKey *)this);
  v7 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 32), (uint64_t)v71);
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    v10 += 88 * *(unsigned int *)(v10 - 4);
  if (v10 == v7)
  {
    v29 = *v3;
    *v3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    goto LABEL_65;
  }
  v65 = 0;
  v66 = 0;
  v13 = *(_QWORD *)(v7 + 64);
  v11 = (uint64_t *)(v7 + 64);
  v12 = v13;
  if (!v13)
    goto LABEL_52;
  v14 = *(_DWORD *)(v12 - 4);
  if (!v14)
    goto LABEL_52;
  v59 = v3;
  v60 = v11;
  v15 = 0;
  v16 = (_QWORD *)(a1 + 40);
  v17 = v14 - 1;
  do
  {
    v18 = v17;
    v19 = (WTF **)(v12 + 24 * v17);
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v19, v8, v9) & 1) == 0&& *v19 != (WTF *)-1&& WTF::equal(*v19, this[4], v9))
    {
      v20 = (_DWORD **)(v12 + 24 * v17 + 16);
      v21 = HIDWORD(v66);
      if (HIDWORD(v66) == (_DWORD)v66)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v65, v12 + 24 * v17 + 16);
      }
      else
      {
        v22 = v65;
        v23 = *v20;
        if (*v20)
          *v23 += 2;
        *(_QWORD *)(v22 + 8 * v21) = v23;
        HIDWORD(v66) = v21 + 1;
      }
      v24 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 40), (WTF::StringImpl **)(v12 + 24 * v17 + 16), v9);
      v25 = (WTF::StringImpl *)v24;
      if (*v16)
      {
        v26 = *v16 + 88 * *(unsigned int *)(*v16 - 4);
        if (v26 == v24)
          goto LABEL_23;
      }
      else
      {
        if (!v24)
        {
LABEL_23:
          WTF::KeyValuePairHashTraits<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>>::customDeleteBucket((WTF::StringImpl **)(v12 + 24 * v17), v25);
          ++v15;
          goto LABEL_24;
        }
        v26 = 0;
      }
      if (v26 != v24)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 40), v24);
      goto LABEL_23;
    }
LABEL_24:
    --v17;
  }
  while (v18);
  v30 = *v60;
  if (v15)
  {
    *(_DWORD *)(v30 - 16) += v15;
    v31 = *v60;
    if (*v60)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v3 = v59;
    *(_DWORD *)(v31 - 12) = v32 - v15;
    v30 = *v60;
  }
  else
  {
    v3 = v59;
  }
  if (v30)
  {
    v33 = *(_DWORD *)(v30 - 4);
    v34 = *(unsigned int *)(v30 - 12);
    if (v33 >= 9 && 6 * (int)v34 < v33)
    {
      v36 = (v34 - 1) | ((v34 - 1) >> 1) | ((((_DWORD)v34 - 1) | ((v34 - 1) >> 1)) >> 2);
      v37 = v36 | (v36 >> 4) | ((v36 | (v36 >> 4)) >> 8);
      v38 = (v37 | HIWORD(v37)) + 1;
      if (v38 > 0x400)
      {
        if (v38 <= 2 * v34)
        {
LABEL_42:
          LODWORD(v38) = 2 * v38;
          if (v38 <= 0x400)
            goto LABEL_43;
        }
        v39 = (double)v34;
        v40 = (double)v38;
        v41 = 0.416666667;
      }
      else
      {
        if (3 * v38 <= 4 * v34)
          goto LABEL_42;
LABEL_43:
        v39 = (double)v34;
        v40 = (double)v38;
        v41 = 0.604166667;
      }
      if (v40 * v41 <= v39)
        LODWORD(v38) = 2 * v38;
      if (v38 <= 8)
        v42 = 8;
      else
        v42 = v38;
      WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::rehash(v60, v42);
    }
  }
LABEL_52:
  ++*(_DWORD *)(a1 + 8);
  v61 = (_DWORD *)a1;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v62, (uint64_t)&v65);
  v43 = *v3;
  *v3 = 0;
  v64 = v43;
  v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v44 = off_1E34C5188;
  v44[1] = v61;
  v45 = v62;
  v61 = 0;
  v62 = 0;
  v44[2] = v45;
  v44[3] = v63;
  v46 = v64;
  v63 = 0;
  v64 = 0;
  v44[4] = v46;
  v47 = *(_QWORD *)(a1 + 24);
  if (v47)
    v48 = *(_QWORD *)(v47 + 8);
  else
    v48 = 0;
  v67 = 0;
  v68 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS6_EUlRT_E_S6_S9_vE3mapERS6_S9_RKSC_((uint64_t)&v67, &v65);
  v69 = v44;
  v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v49 = off_1E34C51B0;
  v49[1] = v67;
  v50 = v68;
  v67 = 0;
  v68 = 0;
  v49[2] = v50;
  v51 = v69;
  v69 = 0;
  v70 = v49;
  v49[3] = v51;
  WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v48, (uint64_t)v71, (uint64_t *)&v70);
  v53 = (uint64_t)v70;
  v70 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = v69;
  v69 = 0;
  if (v54)
    (*(void (**)(_QWORD *))(*v54 + 8))(v54);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v52);
  v56 = v64;
  v64 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v55);
  v58 = v61;
  v61 = 0;
  if (v58)
  {
    if (v58[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 8))(v58);
    else
      --v58[2];
  }
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v57);
LABEL_65:
  if (v74 != -1)
    result = ((uint64_t (*)(_DWORD **, uint64_t *))off_1E34C4700[v74])(&v61, &v73);
  v74 = -1;
  if (v72 != -1)
    return ((uint64_t (*)(_DWORD **, _BYTE *))off_1E34C4700[v72])(&v61, v71);
  return result;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreImpl::storeFetch(uint64_t a1, WebCore::ServiceWorkerRegistrationKey *this, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *result;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  char v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  __int128 v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  __int128 v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  WTF *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl **v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  _BYTE v64[25];
  WTF *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70[3];
  int v71;
  _BYTE v72[24];
  int v73;
  _BYTE v74[24];
  int v75;
  _DWORD *v76;
  __int128 v77;
  __int128 v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  char v81;
  uint64_t v82;
  _BYTE v83[24];
  int v84;
  _BYTE v85[24];
  int v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 24);
  if (v9 && *(_QWORD *)(v9 + 8))
  {
    WebCore::ServiceWorkerRegistrationKey::clientOrigin(this);
    v18 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 32), (uint64_t)v83);
    v19 = *(_QWORD *)(a1 + 32);
    if (v19)
      v19 += 88 * *(unsigned int *)(v19 - 4);
    if (v19 == v18)
    {
      v26 = *a9;
      *a9 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, 2);
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    else
    {
      v20 = (WTF::StringImpl *)*((_QWORD *)this + 4);
      if (v20)
        *(_DWORD *)v20 += 2;
      v69 = v20;
      v21 = *a3;
      if (*a3)
        *(_DWORD *)v21 += 2;
      v70[0] = v21;
      WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>>,std::pair<WTF::String,WTF::String>>((uint64_t)&v62, *(_QWORD *)(v18 + 64), &v69);
      v23 = v70[0];
      v70[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
      v27 = v69;
      v69 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          v27 = (WTF::StringImpl *)WTF::StringImpl::destroy(v27, v22);
        else
          *(_DWORD *)v27 -= 2;
      }
      v58 = a3;
      *(_QWORD *)&v59 = a4;
      v28 = v62;
      v61 = a8;
      *((_QWORD *)&v59 + 1) = a5;
      v60 = a6;
      if (v62 && *((_DWORD *)v62 + 1))
      {
        v29 = 0;
      }
      else
      {
        WebKit::BackgroundFetchStoreManager::createNewStorageIdentifier(v27, &v69);
        v31 = v69;
        v69 = 0;
        v62 = v31;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
          {
            WTF::StringImpl::destroy(v28, v30);
            v33 = v69;
            v69 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2)
                WTF::StringImpl::destroy(v33, v32);
              else
                *(_DWORD *)v33 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v28 -= 2;
          }
        }
        v29 = 1;
        v28 = v31;
      }
      ++*(_DWORD *)(a1 + 8);
      v69 = (WTF::StringImpl *)a1;
      LOBYTE(v70[0]) = 0;
      v71 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v70, (uint64_t)v83);
      v72[0] = 0;
      v73 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v72, (uint64_t)v85);
      v74[0] = 0;
      v75 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v74, (uint64_t)this);
      v34 = (_DWORD *)*((_QWORD *)this + 4);
      if (v34)
        *v34 += 2;
      v76 = v34;
      v35 = *(_OWORD *)((char *)this + 56);
      v77 = *(_OWORD *)((char *)this + 40);
      v78 = v35;
      v36 = *v58;
      if (*v58)
        *(_DWORD *)v36 += 2;
      v79 = v36;
      if (v28)
        *(_DWORD *)v28 += 2;
      v80 = v28;
      v81 = v29;
      v37 = *a9;
      *a9 = 0;
      v82 = v37;
      v38 = WTF::fastMalloc((WTF *)0xB8);
      *(_QWORD *)v38 = off_1E34C5200;
      v39 = v69;
      v69 = 0;
      *(_QWORD *)(v38 + 8) = v39;
      *(_BYTE *)(v38 + 16) = 0;
      *(_DWORD *)(v38 + 40) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v38 + 16, (uint64_t)v70);
      *(_BYTE *)(v38 + 48) = 0;
      *(_DWORD *)(v38 + 72) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v38 + 48, (uint64_t)v72);
      *(_BYTE *)(v38 + 80) = 0;
      *(_DWORD *)(v38 + 104) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v38 + 80, (uint64_t)v74);
      v40 = v76;
      if (v76)
        *v76 += 2;
      *(_QWORD *)(v38 + 112) = v40;
      v41 = v77;
      *(_OWORD *)(v38 + 136) = v78;
      *(_OWORD *)(v38 + 120) = v41;
      v42 = v79;
      if (v79)
        *(_DWORD *)v79 += 2;
      *(_QWORD *)(v38 + 152) = v42;
      *(_QWORD *)(v38 + 160) = v80;
      *(_BYTE *)(v38 + 168) = v81;
      v43 = v82;
      v80 = 0;
      v82 = 0;
      *(_QWORD *)(v38 + 176) = v43;
      v44 = *(_QWORD *)(a1 + 24);
      if (v44)
        v45 = *(_QWORD *)(v44 + 8);
      else
        v45 = 0;
      WTF::String::isolatedCopy();
      *(_OWORD *)v64 = v59;
      *(_QWORD *)&v64[16] = v60;
      v64[24] = a7;
      v46 = *(WTF **)v61;
      *(_QWORD *)v61 = 0;
      v65 = v46;
      v47 = *(_QWORD *)(v61 + 8);
      *(_QWORD *)(v61 + 8) = 0;
      v66 = v47;
      v67 = v38;
      v48 = WTF::fastMalloc((WTF *)0x48);
      *(_QWORD *)v48 = &off_1E34C5228;
      *(_QWORD *)(v48 + 8) = v63;
      v49 = *(_OWORD *)v64;
      *(_OWORD *)(v48 + 25) = *(_OWORD *)&v64[9];
      *(_OWORD *)(v48 + 16) = v49;
      v50 = v65;
      v63 = 0;
      v65 = 0;
      *(_QWORD *)(v48 + 48) = v50;
      *(_QWORD *)&v49 = v66;
      v66 = 0;
      *(_QWORD *)(v48 + 56) = v49;
      v51 = v67;
      v67 = 0;
      v68 = v48;
      *(_QWORD *)(v48 + 64) = v51;
      WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v45, (uint64_t)v83, &v68);
      v53 = v68;
      v68 = 0;
      if (v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
      v54 = v67;
      v67 = 0;
      if (v54)
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
      v55 = v65;
      if (v65)
      {
        v65 = 0;
        LODWORD(v66) = 0;
        WTF::fastFree(v55, v52);
      }
      v56 = v63;
      v63 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v52);
        else
          *(_DWORD *)v56 -= 2;
      }
      WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::~$_0((uint64_t)&v69, (WTF::StringImpl *)v52);
      result = v62;
      v62 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v57);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (v86 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34C4700[v86])(&v69, v85);
    v86 = -1;
    if (v84 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34C4700[v84])(&v69, v83);
  }
  else
  {
    v24 = *a9;
    *a9 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, 2);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  char v12;
  char v13;
  char v14;

  v3 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_1E34C4700[v7])(&v12, a1 + 72);
  *(_DWORD *)(a1 + 96) = -1;
  v8 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_1E34C4700[v8])(&v13, a1 + 40);
  *(_DWORD *)(a1 + 64) = -1;
  v9 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E34C4700[v9])(&v14, a1 + 8);
  *(_DWORD *)(a1 + 32) = -1;
  v10 = *(_DWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  return a1;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunk(uint64_t a1, WTF::StringImpl **this, WTF::StringImpl **a3, WTF::StringImpl *a4, unsigned int *a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *result;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38[2];
  _QWORD *v39;
  uint64_t v40;
  _BYTE v41[24];
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 && *(_QWORD *)(v7 + 8))
  {
    WebCore::ServiceWorkerRegistrationKey::clientOrigin((WebCore::ServiceWorkerRegistrationKey *)this);
    v13 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 32), (uint64_t)v41);
    v14 = *(_QWORD *)(a1 + 32);
    if (v14)
      v14 += 88 * *(unsigned int *)(v14 - 4);
    if (v14 == v13)
    {
      v21 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, 2);
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    else
    {
      v15 = this[4];
      if (v15)
        *(_DWORD *)v15 += 2;
      v37 = v15;
      v16 = *a3;
      if (*a3)
        *(_DWORD *)v16 += 2;
      v38[0] = v16;
      WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>>,std::pair<WTF::String,WTF::String>>((uint64_t)&v36, *(_QWORD *)(v13 + 64), &v37);
      v18 = v38[0];
      v38[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
      v22 = v37;
      v37 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v17);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = v36;
      if (v36 && *((_DWORD *)v36 + 1))
      {
        ++*(_DWORD *)(a1 + 8);
        *(_DWORD *)v23 += 2;
        v24 = *a6;
        *a6 = 0;
        v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v25 = &off_1E34C52C8;
        v25[1] = a1;
        v25[2] = v23;
        v25[3] = v24;
        v26 = *(_QWORD *)(a1 + 24);
        if (v26)
          v27 = *(_QWORD *)(v26 + 8);
        else
          v27 = 0;
        WTF::String::isolatedCopy();
        v38[0] = a4;
        do
          v28 = __ldaxr(a5);
        while (__stlxr(v28 + 1, a5));
        v38[1] = (WTF::StringImpl *)a5;
        v39 = v25;
        v29 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v29 = &off_1E34C52F0;
        *(_QWORD *)(v29 + 8) = v37;
        *(_OWORD *)(v29 + 16) = *(_OWORD *)v38;
        v30 = v39;
        v37 = 0;
        v38[1] = 0;
        v39 = 0;
        *(_QWORD *)(v29 + 32) = v30;
        v40 = v29;
        WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v27, (uint64_t)v41, &v40);
        v32 = v40;
        v40 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        v33 = v39;
        v39 = 0;
        if (v33)
          (*(void (**)(_QWORD *))(*v33 + 8))(v33);
        v34 = (unsigned int *)v38[1];
        v38[1] = 0;
        if (v34)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v34, v31);
        result = v37;
        v37 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v31);
          else
            *(_DWORD *)result -= 2;
        }
        v23 = v36;
      }
      else
      {
        v35 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, 2);
        result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      }
      v36 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v31);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
    if (v44 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, uint64_t *))off_1E34C4700[v44])(&v37, &v43);
    v44 = -1;
    if (v42 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34C4700[v42])(&v37, v41);
  }
  else
  {
    v19 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, 2);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  return result;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreImpl::retrieveResponseBody(uint64_t a1, WTF::StringImpl **this, WTF::StringImpl **a3, WTF::StringImpl *a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *result;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int128 v45;
  __int128 v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  __int128 v50;
  __int128 v51;
  char v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  int v56;
  WTF::StringImpl *v57[2];
  __int128 v58;
  __int128 v59;
  WTF::StringImpl *v60;
  int v61;
  __int16 v62;
  uint64_t v63;
  char v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    v17 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
    if (v17)
    {
      if (v17 == 1)
      {
        v18 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v18 = v57[0];
      }
    }
    else
    {
      v18 = 0;
    }
    v53 = 0;
    WTF::URL::invalidate((WTF::URL *)&v53);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v19 = v57[0];
    if (v18)
      *(_DWORD *)v18 += 2;
    v20 = v53;
    if (v53)
      *(_DWORD *)v53 += 2;
    v21 = v54;
    v22 = v55;
    if (v19)
      *(_DWORD *)v19 += 2;
    v57[0] = v18;
    v57[1] = v20;
    v58 = v21;
    v59 = v22;
    v60 = v19;
    v61 = 0;
    v62 = 1;
    v63 = 0;
    v64 = 1;
    v65 = 1;
    (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a5 + 16))(*a5, v57);
    if (v65 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34C4920[v65])(&v49, v57);
    v65 = -1;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v23);
      else
        *(_DWORD *)v19 -= 2;
    }
    result = v53;
    v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
        if (!v18)
          return result;
        goto LABEL_48;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v18)
      return result;
LABEL_48:
    if (*(_DWORD *)v18 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v18, v23);
    *(_DWORD *)v18 -= 2;
    return result;
  }
  WebCore::ServiceWorkerRegistrationKey::clientOrigin((WebCore::ServiceWorkerRegistrationKey *)this);
  v11 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 32), (uint64_t)&v53);
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
    v12 += 88 * *(unsigned int *)(v12 - 4);
  if (v12 != v11)
  {
    v13 = this[4];
    if (v13)
      *(_DWORD *)v13 += 2;
    v57[0] = v13;
    v14 = *a3;
    if (*a3)
      *(_DWORD *)v14 += 2;
    v57[1] = v14;
    WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>>,std::pair<WTF::String,WTF::String>>((uint64_t)&v48, *(_QWORD *)(v11 + 64), v57);
    v16 = v57[1];
    v57[1] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v32 = v57[0];
    v57[0] = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v15);
      else
        *(_DWORD *)v32 -= 2;
    }
    if (v48 && *((_DWORD *)v48 + 1))
    {
      v33 = *(_QWORD *)(a1 + 24);
      if (v33)
        v34 = *(_QWORD *)(v33 + 8);
      else
        v34 = 0;
      WTF::String::isolatedCopy();
      v35 = *a5;
      *a5 = 0;
      v57[1] = a4;
      *(_QWORD *)&v58 = v35;
      v36 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v36 = &off_1E34C5390;
      *(_OWORD *)(v36 + 8) = *(_OWORD *)v57;
      v37 = v58;
      v57[0] = 0;
      *(_QWORD *)&v58 = 0;
      *(_QWORD *)(v36 + 24) = v37;
      v49 = (WTF::StringImpl *)v36;
      WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v34, (uint64_t)&v53, (uint64_t *)&v49);
      v38 = v49;
      v49 = 0;
      if (v38)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v38 + 8))(v38);
      v39 = v58;
      *(_QWORD *)&v58 = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      v40 = v57[0];
      v57[0] = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 != 2)
        {
          *(_DWORD *)v40 -= 2;
          goto LABEL_102;
        }
LABEL_101:
        WTF::StringImpl::destroy(v40, v30);
      }
LABEL_102:
      result = v48;
      v48 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          goto LABEL_106;
        }
LABEL_105:
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
        goto LABEL_106;
      }
      goto LABEL_106;
    }
    v41 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
    if (v41)
    {
      if (v41 == 1)
      {
        v42 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v42 = v57[0];
      }
    }
    else
    {
      v42 = 0;
    }
    v49 = 0;
    WTF::URL::invalidate((WTF::URL *)&v49);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v43 = v57[0];
    if (v42)
      *(_DWORD *)v42 += 2;
    v44 = v49;
    if (v49)
      *(_DWORD *)v49 += 2;
    v45 = v50;
    v46 = v51;
    if (v43)
      *(_DWORD *)v43 += 2;
    v57[0] = v42;
    v57[1] = v44;
    v58 = v45;
    v59 = v46;
    v60 = v43;
    v61 = 0;
    v62 = 1;
    v63 = 0;
    v64 = 1;
    v65 = 1;
    (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a5 + 16))(*a5, v57);
    if (v65 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E34C4920[v65])(&v52, v57);
    v65 = -1;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v30);
      else
        *(_DWORD *)v43 -= 2;
    }
    v47 = v49;
    v49 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::destroy(v47, v30);
        if (!v42)
          goto LABEL_102;
        goto LABEL_98;
      }
      *(_DWORD *)v47 -= 2;
    }
    if (!v42)
      goto LABEL_102;
LABEL_98:
    if (*(_DWORD *)v42 != 2)
    {
      *(_DWORD *)v42 -= 2;
      goto LABEL_102;
    }
    v40 = v42;
    goto LABEL_101;
  }
  v24 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
  if (v24)
  {
    if (v24 == 1)
    {
      v25 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v25 = v57[0];
    }
  }
  else
  {
    v25 = 0;
  }
  v49 = 0;
  WTF::URL::invalidate((WTF::URL *)&v49);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = v57[0];
  if (v25)
    *(_DWORD *)v25 += 2;
  v27 = v49;
  if (v49)
    *(_DWORD *)v49 += 2;
  v28 = v50;
  v29 = v51;
  if (v26)
    *(_DWORD *)v26 += 2;
  v57[0] = v25;
  v57[1] = v27;
  v58 = v28;
  v59 = v29;
  v60 = v26;
  v61 = 0;
  v62 = 1;
  v63 = 0;
  v64 = 1;
  v65 = 1;
  (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a5 + 16))(*a5, v57);
  if (v65 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34C4920[v65])(&v48, v57);
  v65 = -1;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v30);
    else
      *(_DWORD *)v26 -= 2;
  }
  result = v49;
  v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
      if (!v25)
        goto LABEL_106;
      goto LABEL_88;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v25)
    goto LABEL_106;
LABEL_88:
  if (*(_DWORD *)v25 == 2)
  {
    result = v25;
    goto LABEL_105;
  }
  *(_DWORD *)v25 -= 2;
LABEL_106:
  if (v56 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, char *))off_1E34C4700[v56])(v57, (char *)&v55 + 8);
  v56 = -1;
  if ((_DWORD)v55 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34C4700[v55])(v57, &v53);
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t result;
  _QWORD *v9;

  ++*(_DWORD *)(a1 + 8);
  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E34C5430;
  v6[1] = a1;
  if (v4)
    *(_DWORD *)v4 += 2;
  v6[2] = v4;
  v6[3] = v5;
  v9 = v6;
  WebKit::BackgroundFetchStoreImpl::loadAllFetches(a1, (uint64_t *)&v9);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::loadAllFetches(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    ++*(_DWORD *)(a1 + 8);
    v4 = *a2;
    *a2 = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v5 = &off_1E34C5458;
    v5[1] = a1;
    v5[2] = v4;
    v8 = v5;
    WebCore::SWServer::getAllOrigins();
    result = (uint64_t)v8;
    if (v8)
      return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  }
  else
  {
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::getAllBackgroundFetchIdentifiers(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  ++*(_DWORD *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34C54D0;
  v4[1] = a1;
  v4[2] = v3;
  v6 = v4;
  WebKit::BackgroundFetchStoreImpl::loadAllFetches(a1, (uint64_t *)&v6);
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::getBackgroundFetchState(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v6;
  WebCore::SWServer *v7;
  unsigned int *Engine;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;

  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    v7 = *(WebCore::SWServer **)(v6 + 8);
  else
    v7 = 0;
  Engine = (unsigned int *)WebCore::SWServer::backgroundFetchEngine(v7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Engine, (uint64_t)Engine);
  v9 = *(unsigned int **)Engine;
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E34C54F8;
  v12[1] = v9;
  v12[2] = v11;
  v14 = v12;
  WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(a1, a2, (uint64_t *)&v14);
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::abortBackgroundFetch(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v6;
  WebCore::SWServer *v7;
  unsigned int *Engine;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;

  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    v7 = *(WebCore::SWServer **)(v6 + 8);
  else
    v7 = 0;
  Engine = (unsigned int *)WebCore::SWServer::backgroundFetchEngine(v7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Engine, (uint64_t)Engine);
  v9 = *(unsigned int **)Engine;
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E34C5520;
  v12[1] = v9;
  v12[2] = v11;
  v14 = v12;
  WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(a1, a2, (uint64_t *)&v14);
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::pauseBackgroundFetch(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v6;
  WebCore::SWServer *v7;
  unsigned int *Engine;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;

  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    v7 = *(WebCore::SWServer **)(v6 + 8);
  else
    v7 = 0;
  Engine = (unsigned int *)WebCore::SWServer::backgroundFetchEngine(v7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Engine, (uint64_t)Engine);
  v9 = *(unsigned int **)Engine;
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E34C5548;
  v12[1] = v9;
  v12[2] = v11;
  v14 = v12;
  WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(a1, a2, (uint64_t *)&v14);
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::resumeBackgroundFetch(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v6;
  WebCore::SWServer *v7;
  unsigned int *Engine;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;

  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    v7 = *(WebCore::SWServer **)(v6 + 8);
  else
    v7 = 0;
  Engine = (unsigned int *)WebCore::SWServer::backgroundFetchEngine(v7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Engine, (uint64_t)Engine);
  v9 = *(unsigned int **)Engine;
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E34C5570;
  v12[1] = v9;
  v12[2] = v11;
  v14 = v12;
  WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(a1, a2, (uint64_t *)&v14);
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

uint64_t WebKit::BackgroundFetchStoreImpl::clickBackgroundFetch(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v6;
  WebCore::SWServer *v7;
  unsigned int *Engine;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;

  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    v7 = *(WebCore::SWServer **)(v6 + 8);
  else
    v7 = 0;
  Engine = (unsigned int *)WebCore::SWServer::backgroundFetchEngine(v7);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(Engine, (uint64_t)Engine);
  v9 = *(unsigned int **)Engine;
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E34C5598;
  v12[1] = v9;
  v12[2] = v11;
  v14 = v12;
  WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(a1, a2, (uint64_t *)&v14);
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::isSynchronous(WebKit::NetworkCache::SpeculativeLoad *this)
{
  return 0;
}

uint64_t WebKit::NetworkCache::SpeculativeLoad::isAllowedToAskUserForCredentials(WebKit::NetworkCache::SpeculativeLoad *this)
{
  return 0;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (a1[2] != (WTF::StringImpl *)-1)
        a1 = WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>::~KeyValuePair(a1, a2);
      a1 += 10;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

WTF::StringImpl **WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>::~KeyValuePair(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WebCore::TimerBase *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>::operator()[abi:sn180100](v3);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1;
  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    do
    {
      if (*(_QWORD *)(a1 + 16) != -1)
        a1 = WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>::~KeyValuePair(a1, a2);
      a1 += 80;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 16), a2);
}

uint64_t WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
    std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100](v3);
  v4 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1;
  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    do
    {
      if (*(_QWORD *)(a1 + 16) != -1)
        a1 = WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~KeyValuePair(a1);
      a1 += 80;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 16), a2);
}

uint64_t WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~KeyValuePair(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100]((uint64_t *)(a1 + 72), 0);
  v3 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1;
  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    do
    {
      if (*(_QWORD *)(a1 + 16) != -1)
        a1 = WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>::~KeyValuePair(a1);
      a1 += 80;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 16), a2);
}

uint64_t WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>::~KeyValuePair(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>::reset[abi:sn180100]((WebKit::NetworkCache::Entry ***)(a1 + 72), 0);
  v3 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad **v4;
  WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad **)(a1 + 32);
    do
    {
      if (*(v4 - 3) != (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v5, a2);
      }
      v4 += 5;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  WTF *v3;
  void *v4;

  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)(a1 + 64));
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 56), 0);
  *(_QWORD *)a1 = off_1E34B3740;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)a1);
  return WTF::fastFree(v3, v4);
}

void WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::saveToDiskIfReady(WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *this)
{
  _DWORD *v2;
  _DWORD **v3;
  uint64_t v4;
  WTF::SHA1 *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  _QWORD *v33;
  WTF::StringImpl *v34[2];
  WTF::StringImpl *v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[16];
  WTF::StringImpl *v41[2];
  WTF::StringImpl *v42[2];
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 192) && *((_BYTE *)this + 193) && *((_DWORD *)this + 25))
  {
    v2 = (_DWORD *)*((_QWORD *)this + 21);
    if (v2)
    {
      WebKit::NetworkCache::SubresourcesEntry::updateSubresourceLoads(v2, (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)((char *)this + 88));
      v26 = *((_QWORD *)this + 1);
      WebKit::NetworkCache::SubresourcesEntry::encodeAsStorageRecord((WebKit::NetworkCache::SubresourcesEntry *)v41, *((_QWORD *)this + 21), v27);
      v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v28 = off_1E34C4720;
      v33 = 0;
      v34[0] = v28;
      WebKit::NetworkCache::Storage::store(v26, (const WebKit::NetworkCache::Key *)v41, (uint64_t *)v34, (uint64_t *)&v33);
      v30 = (uint64_t)v33;
      v33 = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      v31 = v34[0];
      v34[0] = 0;
      if (v31)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v31 + 8))(v31);
      WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)v41, v29);
    }
    else
    {
      v3 = (_DWORD **)((char *)this + 16);
      v4 = *((_QWORD *)this + 1) + 28;
      if ((_MergedGlobals_71 & 1) == 0)
      {
        v41[0] = (WTF::StringImpl *)"SubResources";
        v41[1] = (WTF::StringImpl *)13;
        WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE729F8, (uint64_t)v41);
        v3 = (_DWORD **)((char *)this + 16);
        _MergedGlobals_71 = 1;
      }
      v5 = WebKit::NetworkCache::Key::Key((WTF::SHA1 *)v41, v3, &qword_1ECE729F8, (_DWORD **)this + 5, (_DWORD **)this + 4, v4);
      v6 = *(_OWORD *)v41;
      v7 = *(_OWORD *)v42;
      *(_OWORD *)v41 = 0u;
      *(_OWORD *)v42 = 0u;
      *(_OWORD *)v34 = v6;
      *(_OWORD *)v35 = v7;
      v36 = v43;
      v37 = v44;
      v38 = v45;
      WTF::WallTime::now(v5);
      v39 = v8;
      WebKit::NetworkCache::makeSubresourceInfoVector((uint64_t)v40, (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)((char *)this + 88), 0);
      v11 = v42[1];
      v42[1] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v42[0];
      v42[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v41[1];
      v41[1] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v41[0];
      v41[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v9);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = *((_QWORD *)this + 1);
      WebKit::NetworkCache::SubresourcesEntry::encodeAsStorageRecord((WebKit::NetworkCache::SubresourcesEntry *)v41, (uint64_t)v34, v10);
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E34C4748;
      v32 = 0;
      v33 = v16;
      WebKit::NetworkCache::Storage::store(v15, (const WebKit::NetworkCache::Key *)v41, (uint64_t *)&v33, &v32);
      v18 = v32;
      v32 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = (uint64_t)v33;
      v33 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)v41, v17);
      WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v20);
      v22 = v35[1];
      v35[1] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = v35[0];
      v35[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v21);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = v34[1];
      v34[1] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v21);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = v34[0];
      v34[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v21);
        else
          *(_DWORD *)v25 -= 2;
      }
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::PendingFrameLoad(WebKit::NetworkCache::Storage &,WebKit::NetworkCache::Key const&,WTF::Function<void ()(void)> &&)::{lambda(PAL::HysteresisState)#1},void,PAL>::call(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *(_QWORD *)(result + 8);
    if (!*(_BYTE *)(v2 + 192))
    {
      *(_BYTE *)(v2 + 192) = 1;
      WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::saveToDiskIfReady((WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)v2);
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 104) + 16))(*(_QWORD *)(v2 + 104));
    }
  }
  return result;
}

uint64_t PAL::HysteresisActivity::HysteresisActivity(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v4;
  WTF::RunLoop::TimerBase *v5;
  WTF::RunLoop *v6;
  _QWORD *v7;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(double *)(a1 + 8) = a3;
  v5 = (WTF::RunLoop::TimerBase *)(a1 + 16);
  v6 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E34C4798;
  v7[1] = PAL::HysteresisActivity::hysteresisTimerFired;
  v7[2] = 0;
  v7[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase(v5, v6);
  *(_QWORD *)(a1 + 16) = off_1E34ABE00;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = 0;
  return a1;
}

uint64_t PAL::HysteresisActivity::hysteresisTimerFired(PAL::HysteresisActivity *this)
{
  WTF::RunLoop::TimerBase::stop((PAL::HysteresisActivity *)((char *)this + 16));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)this + 16))(*(_QWORD *)this, 1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (PAL::HysteresisActivity::*&)(void),PAL::HysteresisActivity*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unint64_t WTF::Vector<std::unique_ptr<WebKit::NetworkCache::SubresourceLoad>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - (_QWORD)v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  return v3;
}

void WebKit::NetworkCache::SubresourceLoad::~SubresourceLoad(WebKit::NetworkCache::SubresourceLoad *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::addPreloadedEntry(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebCore::ResourceRequest> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E34C47C0;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::addPreloadedEntry(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebCore::ResourceRequest> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E34C47C0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::addPreloadedEntry(std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebCore::ResourceRequest> &&)::$_0,void>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::DiagnosticLoggingKeys *v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t result;
  WTF::StringImpl *v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>((uint64_t *)(v4 + 48), a1 + 16, a3);
  v6 = (WebCore::DiagnosticLoggingKeys *)WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::take(&v20, (WTF::StringImpl *)(v4 + 48), v5);
  v7 = *(unsigned __int8 *)(v20 + 264);
  v8 = *(unsigned int **)(*(_QWORD *)(v4 + 8) + 16);
  v9 = v8 + 30;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  if (v7)
  {
    WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithRevalidationKey(v6);
    WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage((WebCore::DiagnosticLoggingKeys *)v8, *(_QWORD *)(a1 + 88), (uint64_t *)&v19);
    v12 = v19;
    v19 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    do
    {
      v15 = __ldaxr(v9);
      v16 = --v15 == 0;
    }
    while (__stlxr(v15, v9));
  }
  else
  {
    WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithoutRevalidationKey(v6);
    WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage((WebCore::DiagnosticLoggingKeys *)v8, *(_QWORD *)(a1 + 88), (uint64_t *)&v19);
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    do
    {
      v17 = __ldaxr(v9);
      v16 = --v17 == 0;
    }
    while (__stlxr(v17, v9));
  }
  if (v16)
  {
    atomic_store(1u, v8 + 30);
    (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
  }
  result = v20;
  if (v20)
    return std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100](v20);
  return result;
}

uint64_t std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = (uint64_t)a2;
  if (result)
  {
    v4 = (WTF *)WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
    return WTF::fastFree(v4, v5);
  }
  return result;
}

WebCore::ResourceRequest *WebCore::ResourceRequest::ResourceRequest(WebCore::ResourceRequest *this, const WTF::String *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[5];
  WTF::StringImpl *v9[5];

  v8[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v8);
  MEMORY[0x19AEABB24](v9, v8, a2, 0);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)this, (const WTF::URL *)v9, 0);
  v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  *((_QWORD *)this + 24) = 0;
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(WebKit::NetworkCache::SubresourceInfo const&,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34C47E8;
  WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,std::optional<WebKit::NavigatingToAppBoundDomain>::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0::~$_0(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(WebKit::NetworkCache::SubresourceInfo const&,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(WTF *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34C47E8;
  WebKit::NetworkCache::AsyncRevalidation::AsyncRevalidation(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry> &&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,std::optional<WebKit::NavigatingToAppBoundDomain>::CompletionHandler<void ()(WebKit::NetworkCache::AsyncRevalidation::Result)> &&)::$_0::~$_0((_QWORD *)a1 + 1);
  return WTF::fastFree(a1, v2);
}

WebCore::DiagnosticLoggingKeys *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(WebKit::NetworkCache::SubresourceInfo const&,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::call(uint64_t a1, WebKit::NetworkCache::Entry **a2, const WTF::StringImpl *a3)
{
  WebKit::NetworkCache::Entry *v4;
  _QWORD *v5;
  _QWORD *v6;
  const WebKit::NetworkCache::Key *v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::NetworkCache::Entry **v10;
  uint64_t v11;
  WebCore::DiagnosticLoggingKeys *result;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  WTF *v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  WTF::StringImpl *v25[25];
  char v26;
  WebKit::NetworkCache::Entry *v27;

  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = v5 + 4;
  v7 = (const WebKit::NetworkCache::Key *)(a1 + 16);
  v8 = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(v5 + 4, a1 + 16, a3);
  v9 = v5[4];
  if (v9)
    v9 += 80 * *(unsigned int *)(v9 - 4);
  if (v9 == v8)
  {
    v10 = 0;
    goto LABEL_12;
  }
  v10 = *(WebKit::NetworkCache::Entry ***)(v8 + 72);
  *(_QWORD *)(v8 + 72) = 0;
  if (*v6)
  {
    v11 = *v6 + 80 * *(unsigned int *)(*v6 - 4);
    if (v11 == v8)
      goto LABEL_12;
  }
  else
  {
    if (!v8)
      goto LABEL_12;
    v11 = 0;
  }
  if (v11 != v8)
    WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::remove(v5 + 4, v8);
LABEL_12:
  result = (WebCore::DiagnosticLoggingKeys *)WebKit::NetworkCache::SpeculativeLoadManager::satisfyPendingRequests((WebKit::NetworkCache::SpeculativeLoadManager *)v5, v7, v4);
  if (!(_DWORD)result)
  {
    if (!v4)
      goto LABEL_27;
    v27 = v4;
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)v25, (const WebCore::ResourceRequest *)(a1 + 88));
    v26 = 1;
    WebKit::NetworkCache::SpeculativeLoadManager::addPreloadedEntry((uint64_t)v5, (uint64_t *)&v27, (__int128 *)(a1 + 288), (uint64_t)v25);
    std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v25);
    result = v27;
    if (v27)
    {
      WebKit::NetworkCache::Entry::~Entry(v27, v13);
      result = (WebCore::DiagnosticLoggingKeys *)WTF::fastFree(v17, v18);
    }
    v4 = 0;
    if (!v10)
      goto LABEL_29;
LABEL_28:
    WebKit::NetworkCache::SpeculativeLoad::~SpeculativeLoad(v10);
    result = (WebCore::DiagnosticLoggingKeys *)WTF::fastFree(v21, v22);
    goto LABEL_29;
  }
  if (!v4)
    goto LABEL_27;
  v14 = *(unsigned int **)(v5[1] + 16);
  v15 = v14 + 30;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  WebCore::DiagnosticLoggingKeys::successfulSpeculativeWarmupWithRevalidationKey(result);
  WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage((WebCore::DiagnosticLoggingKeys *)v14, *(_QWORD *)(a1 + 288), (uint64_t *)v25);
  result = v25[0];
  v25[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WebCore::DiagnosticLoggingKeys *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  do
  {
    v19 = __ldaxr(v15);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v15));
  if (v20)
  {
LABEL_27:
    if (!v10)
      goto LABEL_29;
    goto LABEL_28;
  }
  atomic_store(1u, v14 + 30);
  result = (WebCore::DiagnosticLoggingKeys *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  if (v10)
    goto LABEL_28;
LABEL_29:
  if (v4)
  {
    WebKit::NetworkCache::Entry::~Entry(v4, v13);
    return (WebCore::DiagnosticLoggingKeys *)WTF::fastFree(v23, v24);
  }
  return result;
}

WebKit::NetworkCache::Entry **WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::remove(uint64_t *a1, uint64_t a2)
{
  WebKit::NetworkCache::Entry **result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebKit::NetworkCache::Key>,WebKit::NetworkCache::Key>((WTF::StringImpl **)a2, (WTF::StringImpl *)a2);
  result = std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>::reset[abi:sn180100]((WebKit::NetworkCache::Entry ***)(a2 + 72), 0);
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return (WebKit::NetworkCache::Entry **)WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(a1, v9 >> 1);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    v8 = a2;
    v9 = (_QWORD *)(result + 88);
    do
    {
      *(_OWORD *)(v9 - 7) = 0uLL;
      *(_OWORD *)(v9 - 9) = 0uLL;
      *v9 = 0;
      v9 += 10;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    do
    {
      v12 = (uint64_t *)(v3 + 80 * v10);
      v13 = v12[2];
      if (v13 != -1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = *((_DWORD *)v12 + 8);
          do
          {
            v18 = v17 & v15;
            v19 = v14 + 80 * (v17 & v15);
            v17 = ++v16 + (v17 & v15);
          }
          while (*(_QWORD *)(v19 + 16));
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>::~KeyValuePair(v14 + 80 * v18);
          v20 = *v12;
          *v12 = 0;
          *(_QWORD *)v19 = v20;
          v21 = v12[1];
          v12[1] = 0;
          *(_QWORD *)(v19 + 8) = v21;
          v22 = v12[2];
          v12[2] = 0;
          *(_QWORD *)(v19 + 16) = v22;
          v23 = v12[3];
          v12[3] = 0;
          *(_QWORD *)(v19 + 24) = v23;
          v24 = *((_OWORD *)v12 + 2);
          v25 = *((_OWORD *)v12 + 3);
          *(_QWORD *)(v19 + 64) = v12[8];
          *(_OWORD *)(v19 + 32) = v24;
          *(_OWORD *)(v19 + 48) = v25;
          v26 = v3 + 80 * v10;
          v27 = *(_QWORD *)(v26 + 72);
          *(_QWORD *)(v26 + 72) = 0;
          *(_QWORD *)(v14 + 80 * v18 + 72) = v27;
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>::~KeyValuePair(v26);
        }
        else
        {
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>::~KeyValuePair(v3 + 80 * v10);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v3)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v3 - 16), v7);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v6;
  int v7;
  unsigned int i;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = 0;
  v7 = *(_DWORD *)(v3 - 8);
  for (i = *(_DWORD *)(a2 + 32); ; i = ++v6 + v9)
  {
    v9 = i & v7;
    v10 = v3 + 80 * (i & v7);
    v11 = *(_QWORD *)(v10 + 16);
    if (v11 == -1)
      continue;
    if (!v11)
      break;
    if ((WebKit::NetworkCache::Key::operator==(v3 + 80 * v9, a2, a3) & 1) != 0)
      return v10;
  }
  if (!*a1)
    return 0;
  return *a1 + 80 * *(unsigned int *)(*a1 - 4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::startSpeculativeRevalidation(WebKit::NetworkCache::GlobalFrameID const&,WebKit::NetworkCache::SubresourcesEntry &,BOOL,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = &off_1E34C4810;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::startSpeculativeRevalidation(WebKit::NetworkCache::GlobalFrameID const&,WebKit::NetworkCache::SubresourcesEntry &,BOOL,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E34C4810;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::startSpeculativeRevalidation(WebKit::NetworkCache::GlobalFrameID const&,WebKit::NetworkCache::SubresourcesEntry &,BOOL,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int i;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v28;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int **)(*(_QWORD *)(v2 + 8) + 16);
  v4 = v3 + 30;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::DiagnosticLoggingKeys::entryRightlyNotWarmedUpKey((WebCore::DiagnosticLoggingKeys *)a1);
  WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage((WebCore::DiagnosticLoggingKeys *)v3, *(_QWORD *)(a1 + 88), (uint64_t *)&v28);
  result = (uint64_t)v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  do
  {
    v9 = __ldaxr(v4);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v4));
  if (!v10)
  {
    atomic_store(1u, v3 + 30);
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  v13 = *(_QWORD *)(v2 + 56);
  v11 = (uint64_t *)(v2 + 56);
  v12 = v13;
  if (v13)
  {
    v14 = 0;
    v15 = a1 + 16;
    v16 = *(_DWORD *)(v12 - 8);
    for (i = *(_DWORD *)(a1 + 48); ; i = v14 + v18)
    {
      v18 = i & v16;
      v19 = v12 + 80 * (i & v16);
      v20 = *(_QWORD *)(v19 + 16);
      if (v20 != -1)
      {
        if (!v20)
        {
          v21 = *v11;
          if (!*v11)
            return result;
          v19 = v21 + 80 * *(unsigned int *)(v21 - 4);
          goto LABEL_19;
        }
        result = WebKit::NetworkCache::Key::operator==(v12 + 80 * v18, v15, v7);
        if ((result & 1) != 0)
          break;
      }
      ++v14;
    }
    v21 = *v11;
    if (!*v11)
      goto LABEL_20;
LABEL_19:
    v21 += 80 * *(unsigned int *)(v21 - 4);
    if (v21 == v19)
      return result;
LABEL_20:
    if (v21 != v19)
    {
      WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebKit::NetworkCache::Key>,WebKit::NetworkCache::Key>((WTF::StringImpl **)v19, v6);
      result = *(_QWORD *)(v19 + 72);
      *(_QWORD *)(v19 + 72) = 0;
      if (result)
        result = std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>::operator()[abi:sn180100]((WebCore::TimerBase *)result);
      ++*(_DWORD *)(*v11 - 16);
      v22 = *v11;
      if (*v11)
        v23 = *(_DWORD *)(v22 - 12) - 1;
      else
        v23 = -1;
      *(_DWORD *)(v22 - 12) = v23;
      v24 = *v11;
      if (*v11)
      {
        v25 = 6 * *(_DWORD *)(v24 - 12);
        v26 = *(_DWORD *)(v24 - 4);
        if (v25 < v26 && v26 >= 9)
          return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(v11, v26 >> 1);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    v8 = a2;
    v9 = (_QWORD *)(result + 88);
    do
    {
      *(_OWORD *)(v9 - 7) = 0uLL;
      *(_OWORD *)(v9 - 9) = 0uLL;
      *v9 = 0;
      v9 += 10;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    do
    {
      v12 = (uint64_t *)(v3 + 80 * v10);
      v13 = v12[2];
      if (v13 != -1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = *((_DWORD *)v12 + 8);
          do
          {
            v18 = v17 & v15;
            v19 = v14 + 80 * (v17 & v15);
            v17 = ++v16 + (v17 & v15);
          }
          while (*(_QWORD *)(v19 + 16));
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>::~KeyValuePair((WTF::StringImpl **)(v14 + 80 * v18), v7);
          v20 = *v12;
          *v12 = 0;
          *(_QWORD *)v19 = v20;
          v21 = v12[1];
          v12[1] = 0;
          *(_QWORD *)(v19 + 8) = v21;
          v22 = v12[2];
          v12[2] = 0;
          *(_QWORD *)(v19 + 16) = v22;
          v23 = v12[3];
          v12[3] = 0;
          *(_QWORD *)(v19 + 24) = v23;
          v24 = *((_OWORD *)v12 + 2);
          v25 = *((_OWORD *)v12 + 3);
          *(_QWORD *)(v19 + 64) = v12[8];
          *(_OWORD *)(v19 + 32) = v24;
          *(_OWORD *)(v19 + 48) = v25;
          v26 = v3 + 80 * v10;
          v27 = *(_QWORD *)(v26 + 72);
          *(_QWORD *)(v26 + 72) = 0;
          *(_QWORD *)(v14 + 80 * v18 + 72) = v27;
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>::~KeyValuePair((WTF::StringImpl **)v26, v28);
        }
        else
        {
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>::~KeyValuePair((WTF::StringImpl **)(v3 + 80 * v10), v7);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v3)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v3 - 16), v7);
}

uint64_t std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>::operator()[abi:sn180100](WebCore::TimerBase *this)
{
  uint64_t v2;
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34B3740;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::TimerBase::~TimerBase(this);
  return WTF::fastFree(v3, v4);
}

WebKit::NetworkCache::Storage::Record *std::unique_ptr<WebKit::NetworkCache::Storage::Record>::reset[abi:sn180100](WebKit::NetworkCache::Storage::Record **a1, WTF::StringImpl *a2)
{
  WebKit::NetworkCache::Storage::Record *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkCache::Storage::Record::~Record(result, a2);
    return (WebKit::NetworkCache::Storage::Record *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  int v9;

  v3 = a1[1];
  v4 = v3 != 0;
  v5 = v3 - 1;
  if (!v4)
    v5 = 0;
  v8 = *a1;
  if (v5 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v9 = v5;
    v7 = *a2;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)&v8, &v7, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;

  v3 = 0;
  v4 = *(_DWORD *)(result + 8);
  v5 = *a2;
  do
  {
    ++v3;
    v6 = v5 > 9;
    v5 /= 0xAu;
  }
  while (v6);
  if (((v3 | v4) & 0x80000000) == 0)
  {
    v7 = __OFADD__(v4, v3);
    v8 = (v4 + v3);
    if (!v7)
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(v8, 1, *(int8x16_t **)result, *(_QWORD *)(result + 8), *a2, a3);
  }
  *a3 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  _QWORD v16[3];

  v9 = result;
  v16[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v16[0];
        if (v16[0])
        {
          v12 = (_BYTE *)(v16[0] + 20);
          *(_DWORD *)v16[0] = 2;
          *(_DWORD *)(v11 + 4) = v9;
          *(_QWORD *)(v11 + 8) = v11 + 20;
          *(_DWORD *)(v11 + 16) = 4;
          if (a4)
          {
            if (a4 == 1)
              *v12 = a3->i8[0];
            else
              result = (uint64_t)memcpy((void *)(v11 + 20), a3, a4);
          }
          v13 = 0;
          do
          {
            *((_BYTE *)&v16[1] + v13-- + 4) = (a5 % 0xA) | 0x30;
            v14 = a5 > 9;
            a5 /= 0xAu;
          }
          while (v14);
          if (v13 + 14 <= 13)
            result = (uint64_t)memcpy(&v12[a4], (char *)&v16[1] + v13 + 5, -v13);
        }
        goto LABEL_12;
      }
LABEL_15:
      v11 = 0;
      goto LABEL_12;
    }
LABEL_16:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_12;
  }
  if (!(_DWORD)result)
    goto LABEL_16;
  if (result > 0x7FFFFFEF)
    goto LABEL_15;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v16[0];
  if (v16[0])
  {
    v15 = (char *)(v16[0] + 20);
    *(_DWORD *)v16[0] = 2;
    *(_DWORD *)(v11 + 4) = v9;
    *(_QWORD *)(v11 + 8) = v11 + 20;
    *(_DWORD *)(v11 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(v15, a3, a4, a5);
  }
LABEL_12:
  *a6 = v11;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(char *result, int8x16_t *a2, int a3, unsigned int a4)
{
  char *v4;
  char *v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;
  uint64_t v14;
  BOOL v15;
  _BYTE v17[13];
  uint64_t v18;
  int8x16x2_t v19;
  int8x16x2_t v20;
  int8x16x2_t v21;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v5 = &result[2 * (a3 & 0xFFFFFFC0)];
    v6 = 0uLL;
    do
    {
      v19.val[0] = *a2;
      v7 = a2[1];
      v20.val[0] = a2[2];
      v8 = a2[3];
      a2 += 4;
      v9 = v8;
      v20.val[1] = 0uLL;
      v21.val[0] = v7;
      v19.val[1] = 0uLL;
      v10 = result;
      vst2q_s8(v10, v19);
      v10 += 32;
      v21.val[1] = 0uLL;
      vst2q_s8(v10, v21);
      v11 = result + 64;
      vst2q_s8(v11, v20);
      v12 = result + 96;
      vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
      result += 128;
    }
    while (result != v5);
    result = v5;
  }
  while (result != v4)
  {
    v13 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v13;
    result += 2;
  }
  v14 = 0;
  do
  {
    v17[v14-- + 12] = (a4 % 0xA) | 0x30;
    v15 = a4 > 9;
    a4 /= 0xAu;
  }
  while (v15);
  if (v14 + 14 <= 13)
  {
    do
    {
      *(_WORD *)v4 = *((unsigned __int8 *)&v18 + v14);
      v4 += 2;
    }
    while (!__CFADD__(v14++, 1));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::decodeRecordMetaData(WebKit::NetworkCache::RecordMetaData &,WebKit::NetworkCache::Data const&)::$_0,BOOL,std::span<unsigned char const,18446744073709551615ul>>::call()
{
  _QWORD v1[37];

  v1[36] = *MEMORY[0x1E0C80C00];
  WTF::Persistence::Decoder::Decoder();
  WTF::Persistence::Decoder::operator>>();
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v1);
  return 0;
}

WebKit::NetworkCache::Storage::ReadOperation *std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>::reset[abi:sn180100](WebKit::NetworkCache::Storage::ReadOperation **a1, WebKit::NetworkCache::Storage::ReadOperation *a2)
{
  WebKit::NetworkCache::Storage::ReadOperation *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkCache::Storage::ReadOperation::~ReadOperation(result);
    return (WebKit::NetworkCache::Storage::ReadOperation *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](unsigned int **a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  void *v5;
  unsigned int *v6;

  v3 = a1[23];
  a1[23] = 0;
  if (v3)
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[22];
  a1[22] = 0;
  if (v4)
    (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)(a1 + 1), a2);
  v6 = *a1;
  *a1 = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v6);
  return WTF::fastFree((WTF *)a1, v5);
}

WebKit::NetworkCache::Storage::Record *WebKit::NetworkCache::Storage::Record::Record(WebKit::NetworkCache::Storage::Record *this, const WebKit::NetworkCache::Storage::Record *a2)
{
  void *v4;
  __int128 v5;
  void *v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)(WebKit::NetworkCache::Key::Key((uint64_t)this, (uint64_t)a2) + 72) = *((_QWORD *)a2 + 9);
  v4 = (void *)*((_QWORD *)a2 + 10);
  *((_QWORD *)this + 10) = v4;
  if (v4)
    os_retain(v4);
  v5 = *(_OWORD *)((char *)a2 + 88);
  *((_BYTE *)this + 104) = *((_BYTE *)a2 + 104);
  *(_OWORD *)((char *)this + 88) = v5;
  v6 = (void *)*((_QWORD *)a2 + 14);
  *((_QWORD *)this + 14) = v6;
  if (v6)
    os_retain(v6);
  v7 = *(_OWORD *)((char *)a2 + 120);
  *((_BYTE *)this + 136) = *((_BYTE *)a2 + 136);
  *(_OWORD *)((char *)this + 120) = v7;
  v8 = *((_OWORD *)a2 + 9);
  *(_QWORD *)((char *)this + 157) = *(_QWORD *)((char *)a2 + 157);
  *((_OWORD *)this + 9) = v8;
  return this;
}

uint64_t std::default_delete<WebKit::NetworkCache::Storage::TraverseOperation>::operator()[abi:sn180100](WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;

  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v5);
  return WTF::fastFree(this, a2);
}

uint64_t std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](uint64_t result, void *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (result)
  {
    v2 = (WTF::StringImpl **)result;
    WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result + 80, a2);
    v4 = v2[3];
    v2[3] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = v2[2];
    v2[2] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v2[1];
    v2[1] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *v2;
    *v2 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v3);
      else
        *(_DWORD *)v7 -= 2;
    }
    return WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,unsigned int,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  uint64_t result;
  WTF::StringImpl *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  v1 = *a1;
  if (*a1)
  {
    v2 = *(_DWORD *)(v1 - 4);
    v3 = *(_DWORD *)(v1 - 12);
    if (v2)
    {
      v4 = v2 << (6 * v3 >= (2 * v2));
      goto LABEL_6;
    }
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  v4 = 8;
LABEL_6:
  result = WTF::fastMalloc((WTF *)(80 * v4 + 16));
  if (v4)
  {
    v7 = v4;
    v8 = (_DWORD *)(result + 88);
    do
    {
      *(_OWORD *)(v8 - 14) = 0uLL;
      *(_OWORD *)(v8 - 18) = 0uLL;
      *v8 = 0;
      v8 += 20;
      --v7;
    }
    while (v7);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v3;
  if (v2)
  {
    v9 = 0;
    while (1)
    {
      v10 = v1 + 80 * v9;
      v11 = *(WTF::StringImpl **)(v10 + 16);
      if (v11 == (WTF::StringImpl *)-1)
        goto LABEL_66;
      if (v11)
        break;
      v12 = *(WTF::StringImpl **)(v10 + 24);
      *(_QWORD *)(v10 + 24) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v6);
          v11 = *(WTF::StringImpl **)(v10 + 16);
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
      *(_QWORD *)(v10 + 16) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v6);
        else
          *(_DWORD *)v11 -= 2;
      }
      v21 = *(WTF::StringImpl **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v6);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      if (!v22)
        goto LABEL_66;
      if (*(_DWORD *)v22 == 2)
      {
LABEL_65:
        WTF::StringImpl::destroy(v22, v6);
        goto LABEL_66;
      }
      *(_DWORD *)v22 -= 2;
LABEL_66:
      if (++v9 == v2)
        return WTF::fastFree((WTF *)(v1 - 16), v6);
    }
    v13 = *a1;
    if (*a1)
      v14 = *(_DWORD *)(v13 - 8);
    else
      v14 = 0;
    v15 = 0;
    v16 = *(_DWORD *)(v10 + 32);
    do
    {
      v17 = v16 & v14;
      v18 = v13 + 80 * (v16 & v14);
      v16 = ++v15 + (v16 & v14);
    }
    while (*(_QWORD *)(v18 + 16));
    v19 = *(WTF::StringImpl **)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v6);
        v20 = *(WTF::StringImpl **)(v18 + 16);
        *(_QWORD *)(v18 + 16) = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v6);
          else
            *(_DWORD *)v20 -= 2;
        }
        goto LABEL_42;
      }
      *(_DWORD *)v19 -= 2;
    }
    *(_QWORD *)(v18 + 16) = 0;
LABEL_42:
    v23 = *(WTF::StringImpl **)(v18 + 8);
    *(_QWORD *)(v18 + 8) = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v6);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = *(WTF::StringImpl **)v18;
    *(_QWORD *)v18 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v6);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = *(WTF::StringImpl **)v10;
    *(_QWORD *)v10 = 0;
    *(_QWORD *)v18 = v25;
    v26 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v18 + 8) = v26;
    v27 = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v18 + 16) = v27;
    v28 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v18 + 24) = v28;
    v29 = *(_OWORD *)(v10 + 32);
    v30 = *(_OWORD *)(v10 + 48);
    *(_QWORD *)(v18 + 64) = *(_QWORD *)(v10 + 64);
    *(_OWORD *)(v18 + 32) = v29;
    *(_OWORD *)(v18 + 48) = v30;
    *(_DWORD *)(v13 + 80 * v17 + 72) = *(_DWORD *)(v1 + 80 * v9 + 72);
    v31 = *(WTF::StringImpl **)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v6);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = *(WTF::StringImpl **)(v10 + 16);
    *(_QWORD *)(v10 + 16) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v6);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = *(WTF::StringImpl **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v6);
      else
        *(_DWORD *)v33 -= 2;
    }
    v22 = *(WTF::StringImpl **)v10;
    *(_QWORD *)v10 = 0;
    if (!v22)
      goto LABEL_66;
    if (*(_DWORD *)v22 == 2)
      goto LABEL_65;
    *(_DWORD *)v22 -= 2;
    goto LABEL_66;
  }
  if (v1)
    return WTF::fastFree((WTF *)(v1 - 16), v6);
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WebKit::NetworkCache::Key,WTF::IdentityExtractor,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  __int128 *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _QWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v55;
  WTF::StringImpl **v56;
  WTF::StringImpl **v57;

  v2 = *a1;
  if (!*a1)
  {
    v3 = 0;
    v4 = 0;
    goto LABEL_3;
  }
  v3 = *(_DWORD *)(v2 - 4);
  v4 = *(_DWORD *)(v2 - 12);
  if (!v3)
  {
LABEL_3:
    v5 = 8;
    goto LABEL_4;
  }
  v5 = v3 << (6 * v4 >= 2 * v3);
LABEL_4:
  result = WTF::fastMalloc((WTF *)(72 * v5 + 16));
  if (v5)
  {
    v8 = v5;
    v9 = (_OWORD *)(result + 16);
    do
    {
      *v9 = 0uLL;
      v9[1] = 0uLL;
      v9 = (_OWORD *)((char *)v9 + 72);
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = 0;
    v53 = v3;
    v51 = v2;
    while (1)
    {
      v12 = (WTF::StringImpl **)(v2 + 72 * v10);
      v14 = v12 + 2;
      v13 = v12[2];
      if (!v13)
      {
        v46 = v2 + 72 * v10;
        v47 = *(WTF::StringImpl **)(v46 + 24);
        *(_QWORD *)(v46 + 24) = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
          {
            WTF::StringImpl::destroy(v47, v7);
            v13 = *v14;
          }
          else
          {
            *(_DWORD *)v47 -= 2;
          }
        }
        *v14 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v7);
          else
            *(_DWORD *)v13 -= 2;
        }
        v48 = v2 + 72 * v10;
        v49 = *(WTF::StringImpl **)(v48 + 8);
        *(_QWORD *)(v48 + 8) = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
            WTF::StringImpl::destroy(v49, v7);
          else
            *(_DWORD *)v49 -= 2;
        }
        v50 = *v12;
        *v12 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, v7);
          else
            *(_DWORD *)v50 -= 2;
        }
        goto LABEL_39;
      }
      if (v13 != (WTF::StringImpl *)-1)
        break;
LABEL_39:
      if (++v10 == v53)
        return WTF::fastFree((WTF *)(v2 - 16), v7);
    }
    v55 = v11;
    v56 = (WTF::StringImpl **)(v2 + 72 * v10);
    v15 = *a1;
    if (*a1)
      v16 = *(_DWORD *)(v15 - 8);
    else
      v16 = 0;
    v17 = 0;
    v18 = v2 + 72 * v10;
    v21 = *(_DWORD *)(v18 + 32);
    v20 = (__int128 *)(v18 + 32);
    v19 = v21;
    do
    {
      v22 = v19 & v16;
      v23 = v15 + 72 * (v19 & v16);
      v25 = *(_QWORD *)(v23 + 16);
      v24 = (WTF::StringImpl **)(v23 + 16);
      v19 = ++v17 + (v19 & v16);
    }
    while (v25);
    v57 = (WTF::StringImpl **)(v15 + 72 * v22);
    v26 = v57[3];
    v57[3] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::destroy(v26, v7);
        v45 = *v24;
        *v24 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v7);
          else
            *(_DWORD *)v45 -= 2;
        }
        goto LABEL_19;
      }
      *(_DWORD *)v26 -= 2;
    }
    *v24 = 0;
LABEL_19:
    v27 = v15 + 72 * v22;
    v30 = *(WTF::StringImpl **)(v27 + 8);
    v29 = (_QWORD *)(v27 + 8);
    v28 = v30;
    *v29 = 0;
    if (v30)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v7);
      else
        *(_DWORD *)v28 -= 2;
    }
    v31 = *v57;
    *v57 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v7);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = *v56;
    *v56 = 0;
    *v57 = v32;
    v33 = v2 + 72 * v10;
    v35 = *(_QWORD *)(v33 + 8);
    v34 = (WTF::StringImpl **)(v33 + 8);
    *v34 = 0;
    *v29 = v35;
    v36 = *v14;
    *v14 = 0;
    *v24 = v36;
    v37 = v34[2];
    v34[2] = 0;
    v57[3] = v37;
    v38 = v15 + 72 * v22;
    v39 = *v20;
    v40 = v20[1];
    *(_QWORD *)(v38 + 64) = *((_QWORD *)v20 + 4);
    *(_OWORD *)(v38 + 32) = v39;
    *(_OWORD *)(v38 + 48) = v40;
    v41 = v34[2];
    v34[2] = 0;
    v11 = v55;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v7);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = *v14;
    *v14 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v7);
      else
        *(_DWORD *)v42 -= 2;
    }
    v43 = *v34;
    *v34 = 0;
    v2 = v51;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v7);
      else
        *(_DWORD *)v43 -= 2;
    }
    v44 = *v56;
    *v56 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v7);
      else
        *(_DWORD *)v44 -= 2;
    }
    if (v56 == a2)
      v11 = v15 + 72 * v22;
    goto LABEL_39;
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

uint64_t WebKit::NetworkCache::SubresourceInfo::SubresourceInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  v10 = *(_OWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 87) = *(_DWORD *)((char *)a2 + 87);
  *(_OWORD *)(a1 + 72) = v10;
  WTF::URL::URL(a1 + 96, a2 + 12);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v11 = a2[17];
  a2[17] = 0;
  *(_QWORD *)(a1 + 136) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = 0;
  *(_DWORD *)(a1 + 144) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = 0;
  *(_DWORD *)(a1 + 148) = v11;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v12 = a2[19];
  a2[19] = 0;
  *(_QWORD *)(a1 + 152) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = 0;
  *(_DWORD *)(a1 + 160) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = 0;
  *(_DWORD *)(a1 + 164) = v12;
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  return a1;
}

void WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::NetworkCache::SubresourceInfo>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 176 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  v6 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  v7 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v7;
  v8 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v4 + 24) = v8;
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 48) = v10;
  *(_QWORD *)(v4 + 64) = v9;
  v11 = *(_OWORD *)(v3 + 72);
  *(_DWORD *)(v4 + 87) = *(_DWORD *)(v3 + 87);
  *(_OWORD *)(v4 + 72) = v11;
  WTF::URL::URL(v4 + 96, (uint64_t *)(v3 + 96));
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  v12 = *(_QWORD *)(v3 + 136);
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v4 + 136) = v12;
  LODWORD(v12) = *(_DWORD *)(v3 + 144);
  *(_DWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v4 + 144) = v12;
  LODWORD(v12) = *(_DWORD *)(v3 + 148);
  *(_DWORD *)(v3 + 148) = 0;
  *(_DWORD *)(v4 + 148) = v12;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v13 = *(_QWORD *)(v3 + 152);
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v4 + 152) = v13;
  LODWORD(v13) = *(_DWORD *)(v3 + 160);
  *(_DWORD *)(v3 + 160) = 0;
  *(_DWORD *)(v4 + 160) = v13;
  LODWORD(v13) = *(_DWORD *)(v3 + 164);
  *(_DWORD *)(v3 + 164) = 0;
  *(_DWORD *)(v4 + 164) = v13;
  *(_BYTE *)(v4 + 168) = *(_BYTE *)(v3 + 168);
  ++*(_DWORD *)(a1 + 12);
}

unint64_t WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 176 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1745D18)
    {
      __break(0xC471u);
      JUMPOUT(0x1971853B4);
    }
    v3 = *(uint64_t **)a1;
    v4 = (uint64_t *)(*(_QWORD *)a1 + 176 * *(unsigned int *)(a1 + 12));
    v5 = 176 * a2;
    v6 = WTF::fastMalloc((WTF *)(176 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0xB0;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::NetworkCache::SubresourceInfo>::move(v3, v4, v6);
    if (v3)
    {
      if (*(uint64_t **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebKit::NetworkCache::SubresourceInfo>::move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a3 + 96;
    do
    {
      v6 = *v4;
      *v4 = 0;
      *(_QWORD *)(v5 - 96) = v6;
      v7 = v4[1];
      v4[1] = 0;
      *(_QWORD *)(v5 - 88) = v7;
      v8 = v4[2];
      v4[2] = 0;
      *(_QWORD *)(v5 - 80) = v8;
      v9 = v4[3];
      v4[3] = 0;
      *(_QWORD *)(v5 - 72) = v9;
      v10 = *((_OWORD *)v4 + 2);
      v11 = *((_OWORD *)v4 + 3);
      *(_QWORD *)(v5 - 32) = v4[8];
      *(_OWORD *)(v5 - 64) = v10;
      *(_OWORD *)(v5 - 48) = v11;
      v12 = *(_OWORD *)(v4 + 9);
      *(_DWORD *)(v5 - 9) = *(_DWORD *)((char *)v4 + 87);
      *(_OWORD *)(v5 - 24) = v12;
      WTF::URL::URL(v5, v4 + 12);
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 48) = 0;
      v13 = v4[17];
      v4[17] = 0;
      *(_QWORD *)(v5 + 40) = v13;
      LODWORD(v13) = *((_DWORD *)v4 + 36);
      *((_DWORD *)v4 + 36) = 0;
      *(_DWORD *)(v5 + 48) = v13;
      LODWORD(v13) = *((_DWORD *)v4 + 37);
      *((_DWORD *)v4 + 37) = 0;
      *(_DWORD *)(v5 + 52) = v13;
      *(_QWORD *)(v5 + 56) = 0;
      *(_QWORD *)(v5 + 64) = 0;
      v14 = v4[19];
      v4[19] = 0;
      *(_QWORD *)(v5 + 56) = v14;
      LODWORD(v14) = *((_DWORD *)v4 + 40);
      *((_DWORD *)v4 + 40) = 0;
      *(_DWORD *)(v5 + 64) = v14;
      LODWORD(v14) = *((_DWORD *)v4 + 41);
      *((_DWORD *)v4 + 41) = 0;
      *(_DWORD *)(v5 + 68) = v14;
      *(_BYTE *)(v5 + 72) = *((_BYTE *)v4 + 168);
      WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)v4);
      v5 += 176;
      v4 += 22;
    }
    while (v4 != a2);
  }
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,unsigned int>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,unsigned int,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)(a1 + 16);
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
          {
            WTF::StringImpl::destroy(v6, a2);
            v5 = *v4;
          }
          else
          {
            *(_DWORD *)v6 -= 2;
          }
        }
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
        v7 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = *(v4 - 2);
        *(v4 - 2) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
      v4 += 10;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t **std::unique_ptr<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>>::reset[abi:sn180100](uint64_t **result, WTF::StringImpl *a2)
{
  uint64_t *v2;

  v2 = *result;
  *result = (uint64_t *)a2;
  if (v2)
  {
    if (*v2)
      WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(*v2, a2);
    return (uint64_t **)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)(a1 + 40);
    do
    {
      v5 = *(v4 - 5);
      if (v5 != (WTF::StringImpl *)-1)
      {
        a2 = *v4;
        *v4 = 0;
        if (a2)
        {
          std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v4, a2);
          v5 = *(v4 - 5);
        }
        *(v4 - 5) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebKit::sendSecItemRequest(uint64_t a1, char a2, const void *a3, const void *a4)
{
  WTF::RunLoop *v8;
  WTF::RunLoop *isCurrent;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  IPC::Decoder *v17;
  WTF *v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t *v26;
  _BYTE v27[8];
  const void *v28;
  const void *v29;
  uint64_t v30;
  _DWORD v31[4];
  int v32;
  char v33;
  char v34;
  int v35;
  const void *v36;
  const void *v37;
  char v38;
  int v39;
  _BYTE v40[16];
  int v41;
  char v42;
  char v43;
  uint64_t *v44;
  int v45;
  IPC::Encoder *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  char v53;
  char v54;

  v38 = a2;
  v36 = a4;
  v37 = a3;
  v8 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  isCurrent = (WTF::RunLoop *)WTF::RunLoop::isCurrent(v8);
  if ((_DWORD)isCurrent)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(qword_1ECE72A00 + 8) + 32);
    v27[0] = a2;
    v28 = a3;
    if (a3)
      CFRetain(a3);
    v29 = a4;
    if (a4)
      CFRetain(a4);
    v47 = 0;
    IPC::Connection::createSyncMessageEncoder(3646, 0, &v47, (uint64_t *)&v46);
    IPC::ArgumentCoder<WebKit::SecItemRequestData,void>::encode(v46, (uint64_t)v27);
    IPC::Connection::sendSyncMessage(v10, v47, (uint64_t *)&v46, 0, (uint64_t)&v44, INFINITY);
    if (v45)
    {
      if (v45 == 1)
      {
        LOBYTE(v30) = (_BYTE)v44;
        v11 = 1;
        v35 = 1;
LABEL_47:
        ((void (*)(uint64_t **, uint64_t **))off_1E34C4880[v11])(&v48, &v44);
LABEL_48:
        v20 = v46;
        v46 = 0;
        if (v20)
        {
          IPC::Encoder::~Encoder(v20, v14);
          WTF::fastFree(v21, v22);
        }
        if (a4)
        {
          CFRelease(a4);
          if (!a3)
            goto LABEL_52;
        }
        else if (!a3)
        {
LABEL_52:
          if (v35)
          {
            LOBYTE(v48) = 0;
            *(_BYTE *)a1 = 0;
            *(_BYTE *)(a1 + 32) = 0;
          }
          else
          {
            std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v48, (uint64_t)v31);
            v23 = v52;
            *(_BYTE *)a1 = 0;
            *(_BYTE *)(a1 + 32) = 0;
            if (v23)
            {
              v24 = v51;
              *(_DWORD *)a1 = (_DWORD)v48;
              *(_BYTE *)(a1 + 8) = 0;
              *(_DWORD *)(a1 + 24) = -1;
              if ((_DWORD)v24 != -1)
              {
                ((void (*)(int *, uint64_t, uint64_t *))off_1E34C4890[v24])(&v39, a1 + 8, &v49);
                *(_DWORD *)(a1 + 24) = v24;
              }
              *(_BYTE *)(a1 + 32) = 1;
              if ((_BYTE)v52 && v51 != -1)
                ((void (*)(int *, uint64_t *))off_1E34C4850[v51])(&v39, &v49);
            }
          }
          if (v35 != -1)
            ((void (*)(uint64_t **, uint64_t *))off_1E34C48A8[v35])(&v48, &v30);
          return;
        }
        CFRelease(a3);
        goto LABEL_52;
      }
LABEL_65:
      v25 = (_BYTE *)std::__throw_bad_variant_access[abi:sn180100]();
      IPC::Decoder::decode<std::tuple<std::optional<WebKit::SecItemResponseData>>>(v25, v26);
      return;
    }
    LOBYTE(v39) = 0;
    v43 = 0;
    IPC::Decoder::decode<std::tuple<std::optional<WebKit::SecItemResponseData>>>(&v30, v44);
    if (v43 == v34)
    {
      if (v43)
      {
        if (v42 == v33)
        {
          if (v42)
          {
            v39 = v30;
            std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v40, (uint64_t)v31);
          }
        }
        else if (v42)
        {
          if (v41 != -1)
            ((void (*)(uint64_t **, _BYTE *))off_1E34C4850[v41])(&v48, v40);
          v41 = -1;
          v42 = 0;
        }
        else
        {
          v39 = v30;
          v40[0] = 0;
          v41 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v40, (uint64_t)v31);
          v42 = 1;
        }
      }
    }
    else if (v43)
    {
      if (v42)
      {
        if (v41 != -1)
          ((void (*)(uint64_t **, _BYTE *))off_1E34C4850[v41])(&v48, v40);
        v41 = -1;
      }
      v43 = 0;
    }
    else
    {
      std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v39, (uint64_t)&v30);
      v43 = 1;
    }
    if (v34 && v33 && v32 != -1)
      ((void (*)(uint64_t **, _DWORD *))off_1E34C4850[v32])(&v48, v31);
    if (v43)
    {
      if (v45)
        goto LABEL_65;
      v15 = v44;
      v44 = 0;
      v48 = v15;
      std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v49, (uint64_t)&v39);
      v16 = (uint64_t)v48;
      v48 = 0;
      v30 = v16;
      std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)v31, (uint64_t)&v49);
      v35 = 0;
      if (v53)
      {
        if (v52 != -1)
          ((void (*)(char *, uint64_t *))off_1E34C4850[v52])(&v54, &v50);
        v52 = -1;
      }
      v17 = (IPC::Decoder *)v48;
      v48 = 0;
      if (v17)
      {
        IPC::Decoder::~Decoder(v17);
        WTF::fastFree(v18, v19);
      }
      if (v43 && v42 && v41 != -1)
        ((void (*)(uint64_t **, _BYTE *))off_1E34C4850[v41])(&v48, v40);
    }
    else
    {
      LOBYTE(v30) = 13;
      v35 = 1;
    }
    v11 = v45;
    if (v45 == -1)
      goto LABEL_48;
    goto LABEL_47;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  LOWORD(v48) = 0;
  BYTE2(v48) = 0;
  WTF::RunLoop::main(isCurrent);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v12 = off_1E34C48C8;
  v12[1] = &v48;
  v12[2] = &v38;
  v12[3] = &v37;
  v12[4] = &v36;
  v12[5] = a1;
  v30 = (uint64_t)v12;
  WTF::RunLoop::dispatch();
  v13 = v30;
  v30 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v30 = 0x7FF0000000000000;
  v31[0] = 0;
  WTF::BinarySemaphore::waitUntil();
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebKit::SecItemResponseData>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE v26[16];
  int v27;
  char v28;
  unsigned __int8 v29;
  int v30;
  _BYTE v31[16];
  int v32;
  char v33;
  char v34;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_19;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v6;
    v13 = 0;
LABEL_19:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_20;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v5);
    goto LABEL_29;
  }
  if (v9)
  {
    IPC::ArgumentCoder<WebKit::SecItemResponseData,void>::decode(a2, &v30);
    if (!v33)
    {
      v22 = *a2;
      v23 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v24 = a2[3];
      if (!v24 || !v23 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22), !v33))
      {
LABEL_29:
        LOBYTE(v25) = 0;
        v29 = 0;
        goto LABEL_12;
      }
    }
    v25 = v30;
    v26[0] = 0;
    v27 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>((uint64_t)v26, (uint64_t)v31);
    v28 = 1;
    v29 = 1;
    if (v33 && v32 != -1)
      ((void (*)(char *, _BYTE *))off_1E34C4850[v32])(&v34, v31);
  }
  else
  {
    LOBYTE(v30) = 0;
    v33 = 0;
    std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v25, (uint64_t)&v30);
    v29 = 1;
    if (v33 && v32 != -1)
      ((void (*)(char *, _BYTE *))off_1E34C4850[v32])(&v34, v31);
  }
LABEL_12:
  if (v29
    || (v17 = *a2, v18 = a2[1], *a2 = 0, a2[1] = 0, (v19 = a2[3]) != 0)
    && v18
    && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17), v29))
  {
    result = std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)a1, (uint64_t)&v25);
    v11 = v29;
    a1[40] = 1;
    if (!v11)
      return result;
    if (!v28)
      return result;
    if (v27 == -1)
      return result;
    result = ((uint64_t (*)(int *, _BYTE *))off_1E34C4850[v27])(&v30, v26);
    if (a1[40])
      return result;
  }
  else
  {
    *a1 = 0;
    a1[40] = 0;
  }
  v20 = *a2;
  v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v21)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v20);
  }
  return result;
}

uint64_t std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>(a1 + 8, a2 + 8);
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C4850[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 16) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34C4868[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6VectorINS8_9RetainPtrIP16__SecCertificateEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IPKvEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJDnSG_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C4850[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 16) = 0;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6VectorINS8_9RetainPtrIP16__SecCertificateEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IPKvEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJDnSG_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<1ul,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF6VectorINS8_9RetainPtrIP16__SecCertificateEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IPKvEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJDnSG_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t *a1, const void **a2, const void **a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<2ul,WTF::RetainPtr<void const*>,WTF::RetainPtr<void const*>>(*a1, a2, a3);
}

WTF *std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<1ul,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;

  if (*(_DWORD *)(a1 + 16) != 1)
    return (WTF *)std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__emplace[abi:sn180100]<1ul,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a3);
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(const void ***)a2;
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
        CFRelease(v8);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__emplace[abi:sn180100]<1ul,WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34C4850[v4])(&v7, a1);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = 1;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<2ul,WTF::RetainPtr<void const*>,WTF::RetainPtr<void const*>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  char v9;

  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1E34C4850[v5])(&v9, a1);
LABEL_6:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)a1 = v8;
    *(_DWORD *)(a1 + 16) = 2;
    return;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
    CFRelease(v7);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6VectorINS8_9RetainPtrIP16__SecCertificateEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IPKvEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJDnSG_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6VectorINS8_9RetainPtrIP16__SecCertificateEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IPKvEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJDnSG_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;
  uint64_t v10;
  const void *v11;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = WTF::fastMalloc((WTF *)(8 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      v7 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v7)
      {
        v8 = (_QWORD *)v6;
        v9 = *(const void ***)a3;
        v10 = 8 * v7;
        do
        {
          v11 = *v9;
          *v8 = *v9;
          if (v11)
            CFRetain(v11);
          ++v8;
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
    }
  }
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF6VectorINS8_9RetainPtrIP16__SecCertificateEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IPKvEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJDnSG_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result;

  result = *a3;
  *a2 = *a3;
  if (result)
    return CFRetain(result);
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages16SecItemShimProxy18SecItemRequestSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  if (*(_BYTE *)(a2 + 40))
  {
    v3 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E34C4850[v3])(&v5, a2 + 16);
    *(_DWORD *)(a2 + 32) = -1;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

void WTF::Detail::CallableWrapper<WebKit::sendSecItemRequest(WebKit::SecItemRequestData::Type,__CFDictionary const*,__CFDictionary const*)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  _BYTE v16[8];
  const void *v17;
  const void *v18;
  uint64_t v19[2];
  IPC::Encoder *v20;

  if ((byte_1ECE729F1 & 1) == 0)
  {
    qword_1ECE72A00 = 0;
    byte_1ECE729F1 = 1;
LABEL_18:
    WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 8));
    return;
  }
  if (!qword_1ECE72A00)
    goto LABEL_18;
  v2 = *(_QWORD *)(qword_1ECE72A00 + 8);
  if (!v2)
    goto LABEL_18;
  v3 = *(os_unfair_lock_s **)(v2 + 32);
  v4 = **(const void ***)(a1 + 24);
  v5 = **(const void ***)(a1 + 32);
  v16[0] = **(_BYTE **)(a1 + 16);
  v17 = v4;
  if (v4)
    CFRetain(v4);
  v18 = v5;
  if (v5)
    CFRetain(v5);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34C48F0;
  v8[1] = v6;
  v8[2] = v7;
  v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1422;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v20 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::SecItemRequestData,void>::encode((IPC::Encoder *)v10, (uint64_t)v16);
  v19[0] = (uint64_t)v8;
  v19[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(v3, &v20, v19, 0, 0);
  v12 = v19[0];
  v19[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v20;
  v20 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  if (!v5)
  {
    if (!v4)
      return;
LABEL_16:
    CFRelease(v4);
    return;
  }
  CFRelease(v5);
  if (v4)
    goto LABEL_16;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::SecItemShimProxy::SecItemRequest,WebKit::sendSecItemRequest(WebKit::SecItemRequestData::Type,__CFDictionary const*,__CFDictionary const*)::$_0::operator() const(void)::{lambda(Messages::SecItemShimProxy::SecItemRequest)#1}>(WebKit::sendSecItemRequest(WebKit::SecItemRequestData::Type,__CFDictionary const*,__CFDictionary const*)::$_0::operator() const(void)::{lambda(Messages::SecItemShimProxy::SecItemRequest)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[8];
  uint64_t v8;
  int v9;
  char v10;
  char v11;
  int v12;
  _BYTE v13[16];
  int v14;
  char v15;
  char v16;

  if (!a2 || !*a2)
    return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 16));
  IPC::Decoder::decode<std::tuple<std::optional<WebKit::SecItemResponseData>>>(v7, a2);
  if (!v11)
    return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 16));
  std::__optional_copy_assign_base<WebKit::SecItemResponseData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v12, (uint64_t)v7);
  if (v15)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(unsigned __int8 *)(v3 + 32);
    *(_DWORD *)v3 = v12;
    v5 = v3 + 8;
    if (v4)
    {
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)v13);
    }
    else
    {
      *(_BYTE *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 24) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<void const*>>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)v13);
      *(_BYTE *)(v3 + 32) = 1;
    }
  }
  result = WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 16));
  if (v15 && v14 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))off_1E34C4850[v14])(&v16, v13);
  if (v11 && v10 && v9 != -1)
    return ((uint64_t (*)(int *, uint64_t *))off_1E34C4850[v9])(&v12, &v8);
  return result;
}

_QWORD ****std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::webSecItemCopyMatching(__CFDictionary const*,void const**)::$_0,WebKit::webSecItemCopyMatching(__CFDictionary const*,void const**)::$_1,WebKit::webSecItemCopyMatching(__CFDictionary const*,void const**)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<void const*>> &>(_QWORD ****result)
{
  ****result = 0;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::webSecItemCopyMatching(__CFDictionary const*,void const**)::$_0,WebKit::webSecItemCopyMatching(__CFDictionary const*,void const**)::$_1,WebKit::webSecItemCopyMatching(__CFDictionary const*,void const**)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<void const*>> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  __CFArray *Mutable;
  uint64_t v5;
  const void **v6;
  uint64_t v7;

  v3 = *a1;
  Mutable = CFArrayCreateMutable(0, *(unsigned int *)(a2 + 12), MEMORY[0x1E0C9B378]);
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(const void ***)a2;
    v7 = 8 * v5;
    do
    {
      if (*v6)
        CFArrayAppendValue(Mutable, *v6);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  ***(_QWORD ***)(v3 + 8) = Mutable;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::webSecItemCopyMatching(__CFDictionary const*,void const**)::$_0,WebKit::webSecItemCopyMatching(__CFDictionary const*,void const**)::$_1,WebKit::webSecItemCopyMatching(__CFDictionary const*,void const**)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<void const*>> &>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  v3 = *a2;
  *a2 = 0;
  ***(_QWORD ***)(v2 + 16) = v3;
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      if (*v4 != (WTF::StringImpl *)-1)
      {
        v5 = v4[2];
        v4[2] = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v7 = *v4;
        *v4 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS6_EUlRT_E_S6_S9_vE3mapERS6_S9_RKSC_(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      result = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(v4 + 8) = v2;
      *(_QWORD *)v4 = result;
      v5 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v5)
      {
        v6 = *a2;
        v7 = 8 * v5;
        do
        {
          WTF::String::isolatedCopy();
          v8 = *(unsigned int *)(v4 + 12);
          *(_QWORD *)(*(_QWORD *)v4 + 8 * v8) = v9;
          *(_DWORD *)(v4 + 12) = v8 + 1;
          result = 0;
          v9 = 0;
          v6 += 8;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12SharedBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12SharedBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoad::SpeculativeLoad(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C4940;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoad::SpeculativeLoad(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C4940;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WebKit::NetworkCache::Entry *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoad::SpeculativeLoad(WebKit::NetworkCache::Cache &,WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,std::unique_ptr<WebKit::NetworkCache::Entry>,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>,WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,void>::call(uint64_t a1)
{
  WTF::StringImpl *v1;
  WebKit::NetworkCache::Entry *result;
  WTF *v3;
  void *v4;
  WebKit::NetworkCache::Entry *v5;

  v5 = 0;
  WTF::CompletionHandler<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()((uint64_t *)(a1 + 8), &v5);
  result = v5;
  if (v5)
  {
    WebKit::NetworkCache::Entry::~Entry(v5, v1);
    return (WebKit::NetworkCache::Entry *)WTF::fastFree(v3, v4);
  }
  return result;
}

WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::~PendingFrameLoad(result, a2);
    return (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::~PendingFrameLoad(WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *this, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::NetworkCache::SubresourceLoad **v10;
  uint64_t v11;
  WebKit::NetworkCache::SubresourceLoad *v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, a2);
  v4 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
    std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](v4, v3);
  *((_QWORD *)this + 16) = off_1E34ABE00;
  v5 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)((char *)this + 128));
  v7 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((unsigned int *)this + 25);
  if ((_DWORD)v9)
  {
    v10 = (WebKit::NetworkCache::SubresourceLoad **)*((_QWORD *)this + 11);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        WebKit::NetworkCache::SubresourceLoad::~SubresourceLoad(v12, v6);
        WTF::fastFree(v13, v14);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v15 = (WTF *)*((_QWORD *)this + 11);
  if (v15)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v15, v6);
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v6);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v6);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v6);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v6);
    else
      *(_DWORD *)v19 -= 2;
  }
}

uint64_t WTF::Vector<WebKit::NetworkCache::SubresourceInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WebKit::NetworkCache::SubresourceInfo *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(WebKit::NetworkCache::SubresourceInfo **)a1;
    v5 = 176 * v3;
    do
    {
      WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo(v4);
      v4 = (WebKit::NetworkCache::SubresourceInfo *)(v6 + 176);
      v5 -= 176;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

_QWORD *WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::take(_QWORD *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v5 += 80 * *(unsigned int *)(v5 - 4);
  if (v5 == a3)
  {
    *result = 0;
    return result;
  }
  v6 = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 72) = 0;
  *result = v6;
  if (*(_QWORD *)a2)
  {
    v7 = *(_QWORD *)a2 + 80 * *(unsigned int *)(*(_QWORD *)a2 - 4);
    if (v7 == a3)
      return result;
  }
  else
  {
    if (!a3)
      return result;
    v7 = 0;
  }
  if (v7 != a3)
  {
    WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebKit::NetworkCache::Key>,WebKit::NetworkCache::Key>((WTF::StringImpl **)a3, a2);
    result = *(_QWORD **)(a3 + 72);
    *(_QWORD *)(a3 + 72) = 0;
    if (result)
      result = (_QWORD *)std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>::operator()[abi:sn180100]((uint64_t)result);
    ++*(_DWORD *)(*(_QWORD *)a2 - 16);
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v9 = *(_DWORD *)(v8 - 12) - 1;
    else
      v9 = -1;
    *(_DWORD *)(v8 - 12) = v9;
    v10 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v11 = 6 * *(_DWORD *)(v10 - 12);
      v12 = *(_DWORD *)(v10 - 4);
      if (v11 < v12 && v12 >= 9)
        return (_QWORD *)WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash((uint64_t *)a2, v12 >> 1);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    v8 = a2;
    v9 = (_QWORD *)(result + 88);
    do
    {
      *(_OWORD *)(v9 - 7) = 0uLL;
      *(_OWORD *)(v9 - 9) = 0uLL;
      *v9 = 0;
      v9 += 10;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    do
    {
      v12 = (uint64_t *)(v3 + 80 * v10);
      v13 = v12[2];
      if (v13 != -1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = *((_DWORD *)v12 + 8);
          do
          {
            v18 = v17 & v15;
            v19 = v14 + 80 * (v17 & v15);
            v17 = ++v16 + (v17 & v15);
          }
          while (*(_QWORD *)(v19 + 16));
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>::~KeyValuePair(v14 + 80 * v18, v7);
          v20 = *v12;
          *v12 = 0;
          *(_QWORD *)v19 = v20;
          v21 = v12[1];
          v12[1] = 0;
          *(_QWORD *)(v19 + 8) = v21;
          v22 = v12[2];
          v12[2] = 0;
          *(_QWORD *)(v19 + 16) = v22;
          v23 = v12[3];
          v12[3] = 0;
          *(_QWORD *)(v19 + 24) = v23;
          v24 = *((_OWORD *)v12 + 2);
          v25 = *((_OWORD *)v12 + 3);
          *(_QWORD *)(v19 + 64) = v12[8];
          *(_OWORD *)(v19 + 32) = v24;
          *(_OWORD *)(v19 + 48) = v25;
          v26 = v3 + 80 * v10;
          v27 = *(_QWORD *)(v26 + 72);
          *(_QWORD *)(v26 + 72) = 0;
          *(_QWORD *)(v14 + 80 * v18 + 72) = v27;
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>::~KeyValuePair(v26, v28);
        }
        else
        {
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>::~KeyValuePair(v3 + 80 * v10, v7);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v3)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v3 - 16), v7);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v6;
  unsigned int v7;
  int i;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = 0;
  v7 = *(_DWORD *)(v3 - 8);
  for (i = *(_DWORD *)(a2 + 32); ; i = v6 + v9)
  {
    v9 = i & v7;
    v10 = v3 + 80 * (i & v7);
    v11 = *(_QWORD *)(v10 + 16);
    if (v11 == -1)
      goto LABEL_6;
    if (!v11)
      break;
    if ((WebKit::NetworkCache::Key::operator==(v3 + 80 * v9, a2, a3) & 1) != 0)
      return v10;
LABEL_6:
    ++v6;
  }
  if (*a1)
    return *a1 + 80 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieve(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E34C4990;
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 16), 0);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34C4990;
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree((WTF *)a1, v2);
}

WebKit::NetworkCache::Entry *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieve(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebKit::NetworkCache::Entry *v2;
  WTF::StringImpl *v3;
  WebKit::NetworkCache::Entry *result;
  WTF *v5;
  void *v6;
  WebKit::NetworkCache::Entry *v7;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(WebKit::NetworkCache::Entry **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v7 = v2;
  WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(v1, &v7);
  result = v7;
  if (v7)
  {
    WebKit::NetworkCache::Entry::~Entry(v7, v3);
    return (WebKit::NetworkCache::Entry *)WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 88);
    do
    {
      *(_OWORD *)(v10 - 7) = 0uLL;
      *(_OWORD *)(v10 - 9) = 0uLL;
      *v10 = 0;
      v10 += 10;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (uint64_t *)(v4 + 80 * v11);
      v15 = v14[2];
      if (v15 != -1)
      {
        if (v15)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = *((_DWORD *)v14 + 8);
          do
          {
            v20 = v19 & v17;
            v21 = v16 + 80 * (v19 & v17);
            v19 = ++v18 + (v19 & v17);
          }
          while (*(_QWORD *)(v21 + 16));
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~KeyValuePair(v16 + 80 * v20);
          v22 = *v14;
          *v14 = 0;
          *(_QWORD *)v21 = v22;
          v23 = v14[1];
          v14[1] = 0;
          *(_QWORD *)(v21 + 8) = v23;
          v24 = v14[2];
          v14[2] = 0;
          *(_QWORD *)(v21 + 16) = v24;
          v25 = v14[3];
          v14[3] = 0;
          *(_QWORD *)(v21 + 24) = v25;
          v26 = *((_OWORD *)v14 + 2);
          v27 = *((_OWORD *)v14 + 3);
          *(_QWORD *)(v21 + 64) = v14[8];
          *(_OWORD *)(v21 + 32) = v26;
          *(_OWORD *)(v21 + 48) = v27;
          v28 = v4 + 80 * v11;
          v29 = *(_QWORD *)(v28 + 72);
          *(_QWORD *)(v28 + 72) = 0;
          *(_QWORD *)(v16 + 80 * v20 + 72) = v29;
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~KeyValuePair(v28);
          if (v14 == a3)
            v12 = v16 + 80 * v20;
        }
        else
        {
          WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WTF::Vector<WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::~KeyValuePair(v4 + 80 * v11);
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>,WebKit::NetworkCache::GlobalFrameID>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int i;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v11;
  __int16 v12;
  char v13;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v11 = -1640531527;
    v12 = 0;
    v13 = 0;
    WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v11, a2 + 1, a2 + 2);
    v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v11);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v4;
      v8 = (_QWORD *)(v3 + 40 * (v5 & v4));
      v9 = v8[1];
      if (v9 == a2[1] && v8[2] == a2[2] && v8[3] == a2[3])
        return *(_QWORD *)(v3 + 40 * v7 + 32);
      if (!v9 && *((_OWORD *)v8 + 1) == 0)
        break;
      ++i;
    }
    return 0;
  }
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>::hash<WebKit::NetworkCache::GlobalFrameID>(uint64_t a1)
{
  unsigned int v2;
  __int16 v3;
  char v4;

  v2 = -1640531527;
  v3 = 0;
  v4 = 0;
  WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v2, (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::registerLoad(WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,WebKit::NetworkCache::Key const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  int v7;
  void *v8;
  int i;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v21;
  __int16 v22;
  char v23;

  v1 = a1[1];
  v4 = *(_QWORD *)(v1 + 24);
  v2 = (uint64_t *)(v1 + 24);
  v3 = v4;
  if (v4)
  {
    v6 = *(_DWORD *)(v3 - 8);
    v21 = -1640531527;
    v22 = 0;
    v23 = 0;
    WTF::add<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v21, a1 + 3, a1 + 4);
    v7 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v21);
    for (i = 0; ; v7 = i + (v7 & v6))
    {
      v10 = (_QWORD *)(v3 + 40 * (v7 & v6));
      v11 = v10[1];
      if (v11 == a1[3] && v10[2] == a1[4] && v10[3] == a1[5])
        break;
      if (!v11 && *((_OWORD *)v10 + 1) == 0)
      {
        v13 = *v2;
        if (!*v2)
          return;
        v10 = (_QWORD *)(v13 + 40 * *(unsigned int *)(v13 - 4));
        goto LABEL_12;
      }
      ++i;
    }
    v13 = *v2;
    if (!*v2)
      goto LABEL_13;
LABEL_12:
    v13 += 40 * *(unsigned int *)(v13 - 4);
    if ((_QWORD *)v13 == v10)
      return;
LABEL_13:
    if ((_QWORD *)v13 != v10)
    {
      v10[1] = -1;
      v14 = (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)v10[4];
      v10[4] = 0;
      if (v14)
        WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v14, v8);
      ++*(_DWORD *)(*v2 - 16);
      v15 = *v2;
      if (*v2)
        v16 = *(_DWORD *)(v15 - 12) - 1;
      else
        v16 = -1;
      *(_DWORD *)(v15 - 12) = v16;
      v17 = *v2;
      if (*v2)
      {
        v18 = 6 * *(_DWORD *)(v17 - 12);
        v19 = *(_DWORD *)(v17 - 4);
        if (v18 < v19 && v19 >= 9)
          WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::rehash(v2, v19 >> 1);
      }
    }
  }
}

void WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *v14;
  WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *v15;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = v5;
    v12 = v4;
    do
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13 != -1)
      {
        if (!v13 && *(_OWORD *)(v12 + 16) == 0)
        {
          v15 = *(WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad **)(v12 + 32);
          *(_QWORD *)(v12 + 32) = 0;
          if (v15)
            WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v15, v8);
        }
        else
        {
          WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::reinsert(*a1, v12);
          v14 = *(WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad **)(v12 + 32);
          *(_QWORD *)(v12 + 32) = 0;
          if (v14)
            WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v14, v8);
        }
      }
      v12 += 40;
      --v11;
    }
    while (v11);
    goto LABEL_17;
  }
  if (v4)
LABEL_17:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::reinsert(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  void *v6;
  int i;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *v11;
  _QWORD *v12;
  WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *v13;
  __int128 v14;
  uint64_t v15;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>>::hash<WebKit::NetworkCache::GlobalFrameID>(a2);
  for (i = 0; ; v5 = i + v8)
  {
    v8 = v5 & v4;
    v9 = a1 + 40 * (v5 & v4);
    if (!*(_QWORD *)(v9 + 8) && *(_OWORD *)(v9 + 16) == 0)
      break;
    ++i;
  }
  v10 = a1 + 40 * v8;
  v13 = *(WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad **)(v10 + 32);
  v12 = (_QWORD *)(v10 + 32);
  v11 = v13;
  *v12 = 0;
  if (v13)
    WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v11, v6);
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 16) = v14;
  v15 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *v12 = v15;
  return v9;
}

void WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WebKit::NetworkCache::GlobalFrameID,WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashMap<WebKit::NetworkCache::GlobalFrameID,WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>,WTF::DefaultHash<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad,WTF::RawPtrTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>,WTF::DefaultRefDerefTraits<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::GlobalFrameID>>::rehash(a1, v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::registerLoad(WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,WebKit::NetworkCache::Key const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_1,void,std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C49E0;
  v3 = (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)a1[7];
  a1[7] = 0;
  if (v3)
    WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v3, a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::registerLoad(WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,WebKit::NetworkCache::Key const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_1,void,std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C49E0;
  v3 = (WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    WTF::RefCounted<WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad>::deref(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::registerLoad(WebKit::NetworkCache::GlobalFrameID const&,WebCore::ResourceRequest const&,WebKit::NetworkCache::Key const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_1,void,std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>>::call(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  WebCore::TimerBase *v11;
  uint64_t v12;
  __int128 v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int j;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int i;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::TimerBase *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  __int128 v50;
  _DWORD *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  __int128 v56;
  _DWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int16 v69;
  __int16 v70;
  uint64_t v71;
  uint64_t *v72;
  __int128 *v73;
  uint64_t *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[19];
  _DWORD *v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[16];
  _BYTE v91[16];
  char v92;
  __int128 v93;
  _BYTE v94[22];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v67 = a1;
    v71 = v4;
    if (!v4)
      goto LABEL_85;
    v6 = *(_DWORD *)(v4 + 92);
    if (!v6)
      goto LABEL_85;
    v73 = (__int128 *)(a1 + 24);
    v7 = *(_QWORD *)(v4 + 80);
    v77 = v7 + 176 * v6;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (uint64_t *)(v8 + 56);
    v76 = *(_QWORD *)(v67 + 8);
    v74 = (uint64_t *)(v8 + 32);
    v69 = *(_WORD *)(v67 + 68);
    v70 = *(_WORD *)(v67 + 65);
    v68 = *(_BYTE *)(v67 + 67);
    v75 = *(_BYTE *)(v67 + 64);
    v72 = (uint64_t *)(v8 + 56);
    while (1)
    {
      *(_BYTE *)(v7 + 90) = v75;
      if (!*(_BYTE *)(v7 + 88))
      {
        if ((WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(*v74, v7, a3) & 1) != 0)goto LABEL_78;
        v23 = *v74;
        if (*v74
          || (WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v74),
              (v23 = *v74) != 0))
        {
          v24 = *(_DWORD *)(v23 - 8);
        }
        else
        {
          v24 = 0;
        }
        v25 = 0;
        v26 = *(_DWORD *)(v7 + 32);
        for (i = 1; ; ++i)
        {
          v28 = v26 & v24;
          v29 = v23 + 80 * (v26 & v24);
          v30 = *(_QWORD *)(v29 + 16);
          if (v30 == -1)
          {
            v25 = v23 + 80 * v28;
          }
          else
          {
            if (!v30)
            {
              if (v25)
              {
                *(_OWORD *)v25 = 0u;
                *(_OWORD *)(v25 + 16) = 0u;
                *(_QWORD *)(v25 + 72) = 0;
                --*(_DWORD *)(*v74 - 16);
                v29 = v25;
              }
              WebKit::NetworkCache::Key::operator=(v29, v7);
              std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>::reset[abi:sn180100]((WebKit::NetworkCache::Entry ***)(v29 + 72), 0);
              v42 = *v74;
              if (*v74)
                v43 = *(_DWORD *)(v42 - 12) + 1;
              else
                v43 = 1;
              *(_DWORD *)(v42 - 12) = v43;
              v44 = *v74;
              if (*v74)
                v45 = *(_DWORD *)(v44 - 12);
              else
                v45 = 0;
              v46 = (*(_DWORD *)(v44 - 16) + v45);
              v47 = *(unsigned int *)(v44 - 4);
              if (v47 > 0x400)
              {
                if (v47 <= 2 * v46)
LABEL_68:
                  WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v74);
              }
              else if (3 * v47 <= 4 * v46)
              {
                goto LABEL_68;
              }
LABEL_69:
              v79 = v76;
              WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v76, v76);
              v48 = *(unsigned int **)v76;
              if (*(_QWORD *)v76)
              {
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 + 1, v48));
              }
              v80 = (WTF::StringImpl *)v48;
              WebKit::NetworkCache::Key::Key((uint64_t)&v81, v7);
              WebKit::NetworkCache::Key::Key((uint64_t)&v84 + 8, v7);
              v50 = *(_OWORD *)(v7 + 72);
              *(_DWORD *)&v86[15] = *(_DWORD *)(v7 + 87);
              *(_OWORD *)v86 = v50;
              v51 = *(_DWORD **)(v7 + 96);
              if (v51)
                *v51 += 2;
              v87 = v51;
              v52 = *(_OWORD *)(v7 + 120);
              v88 = *(_OWORD *)(v7 + 104);
              v89 = v52;
              WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v90, (WTF::ASCIILiteral *)(v7 + 136));
              WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v91, (WTF::ASCIILiteral *)(v7 + 152));
              v92 = *(_BYTE *)(v7 + 168);
              v53 = v73[1];
              v93 = *v73;
              *(_OWORD *)v94 = v53;
              *(_WORD *)&v94[16] = v70;
              v94[18] = v68;
              *(_WORD *)&v94[20] = v69;
              v54 = WTF::fastMalloc((WTF *)0x138);
              *(_QWORD *)v54 = off_1E34C4A80;
              *(_QWORD *)(v54 + 8) = v79;
              v55 = v80;
              v80 = 0;
              *(_QWORD *)(v54 + 16) = v55;
              WebKit::NetworkCache::Key::Key(v54 + 24, (uint64_t)&v81);
              WebKit::NetworkCache::Key::Key(v54 + 96, (uint64_t)&v84 + 8);
              v56 = *(_OWORD *)v86;
              *(_DWORD *)(v54 + 183) = *(_DWORD *)&v86[15];
              *(_OWORD *)(v54 + 168) = v56;
              v57 = v87;
              if (v87)
                *v87 += 2;
              *(_QWORD *)(v54 + 192) = v57;
              v58 = v88;
              *(_OWORD *)(v54 + 216) = v89;
              *(_OWORD *)(v54 + 200) = v58;
              WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)(v54 + 232), (WTF::ASCIILiteral *)v90);
              WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)(v54 + 248), (WTF::ASCIILiteral *)v91);
              *(_BYTE *)(v54 + 264) = v92;
              v59 = v93;
              v60 = *(_OWORD *)v94;
              *(_QWORD *)(v54 + 302) = *(_QWORD *)&v94[14];
              *(_OWORD *)(v54 + 272) = v59;
              *(_OWORD *)(v54 + 288) = v60;
              v61 = *(_QWORD *)(v76 + 16);
              v62 = *(unsigned __int8 *)(v7 + 168);
              v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v63 = &off_1E34C4A08;
              v63[1] = v54;
              v78 = v63;
              WebKit::NetworkCache::Storage::retrieve(v61, v7, v62, (uint64_t *)&v78);
              v64 = (uint64_t)v78;
              v78 = 0;
              if (v64)
                (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
              WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0::~$_0(&v79);
              goto LABEL_78;
            }
            if ((WebKit::NetworkCache::Key::operator==(v23 + 80 * v28, v7, a3) & 1) != 0)
              goto LABEL_69;
          }
          v26 = i + v28;
        }
      }
      v79 = v76;
      WebKit::NetworkCache::Key::Key((uint64_t)&v80, v7);
      v10 = v73[1];
      v84 = *v73;
      v85 = v10;
      v11 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x38);
      v12 = WTF::fastMalloc((WTF *)0x78);
      *(_QWORD *)v12 = &off_1E34C4810;
      *(_QWORD *)(v12 + 8) = v79;
      WebKit::NetworkCache::Key::Key(v12 + 16, (uint64_t)&v80);
      v13 = v84;
      *(_OWORD *)(v12 + 104) = v85;
      *(_OWORD *)(v12 + 88) = v13;
      WebCore::TimerBase::TimerBase(v11);
      *(_QWORD *)v11 = off_1E34B3740;
      *((_QWORD *)v11 + 6) = v12;
      WebCore::TimerBase::start();
      v15 = *(_QWORD *)(v76 + 56);
      if (v15
        || (WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v9),
            (v15 = *v9) != 0))
      {
        v16 = *(_DWORD *)(v15 - 8);
      }
      else
      {
        v16 = 0;
      }
      v17 = 0;
      v18 = *(_DWORD *)(v7 + 32);
      for (j = 1; ; ++j)
      {
        v20 = v18 & v16;
        v21 = v15 + 80 * (v18 & v16);
        v22 = *(_QWORD *)(v21 + 16);
        if (v22 == -1)
        {
          v17 = v15 + 80 * v20;
          goto LABEL_16;
        }
        if (!v22)
          break;
        if (WebKit::NetworkCache::Key::operator==(v15 + 80 * v20, v7, v14))
        {
          std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>::operator()[abi:sn180100](v11);
          v9 = v72;
          goto LABEL_41;
        }
LABEL_16:
        v18 = j + v20;
      }
      v9 = v72;
      if (v17)
      {
        *(_OWORD *)v17 = 0u;
        *(_OWORD *)(v17 + 16) = 0u;
        *(_QWORD *)(v17 + 72) = 0;
        --*(_DWORD *)(*v72 - 16);
        v21 = v17;
      }
      WebKit::NetworkCache::Key::operator=(v21, v7);
      v31 = *(WebCore::TimerBase **)(v21 + 72);
      *(_QWORD *)(v21 + 72) = v11;
      if (v31)
        std::default_delete<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>::operator()[abi:sn180100](v31);
      v32 = *v72;
      if (*v72)
        v33 = *(_DWORD *)(v32 - 12) + 1;
      else
        v33 = 1;
      *(_DWORD *)(v32 - 12) = v33;
      v34 = *v72;
      if (*v72)
        v35 = *(_DWORD *)(v34 - 12);
      else
        v35 = 0;
      v36 = (*(_DWORD *)(v34 - 16) + v35);
      v37 = *(unsigned int *)(v34 - 4);
      if (v37 > 0x400)
      {
        if (v37 <= 2 * v36)
LABEL_40:
          WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(v72);
      }
      else if (3 * v37 <= 4 * v36)
      {
        goto LABEL_40;
      }
LABEL_41:
      v38 = v83;
      v83 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, a2);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = v82;
      v82 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, a2);
        else
          *(_DWORD *)v39 -= 2;
      }
      v40 = v81;
      v81 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, a2);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v80;
      v80 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, a2);
        else
          *(_DWORD *)v41 -= 2;
      }
LABEL_78:
      v7 += 176;
      if (v7 == v77)
      {
LABEL_85:
        v65 = *(_QWORD *)(v67 + 56);
        v66 = *(_QWORD *)(v65 + 168);
        *(_QWORD *)(v65 + 168) = v71;
        if (v66)
          std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](v66, a2);
        *(_BYTE *)(v65 + 193) = 1;
        WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad::saveToDiskIfReady((WebKit::NetworkCache::SpeculativeLoadManager::PendingFrameLoad *)v65);
        return;
      }
    }
  }
  if (v4)
    std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](v4, a2);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::PreloadedEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(a1, v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieveEntryFromStorage(WebKit::NetworkCache::SubresourceInfo const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::SpeculativeLoadManager::retrieveEntryFromStorage(WebKit::NetworkCache::SubresourceInfo const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0::Timings const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C4A08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieveEntryFromStorage(WebKit::NetworkCache::SubresourceInfo const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::SpeculativeLoadManager::retrieveEntryFromStorage(WebKit::NetworkCache::SubresourceInfo const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0::Timings const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C4A08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieveEntryFromStorage(WebKit::NetworkCache::SubresourceInfo const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::SpeculativeLoadManager::retrieveEntryFromStorage(WebKit::NetworkCache::SubresourceInfo const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)> &&)::$_0::Timings const&>::call(uint64_t a1, WebKit::NetworkCache::Entry **a2)
{
  WebKit::NetworkCache::Entry *v3;
  _BOOL8 v4;
  double v5;
  double v6;
  double v7;
  WebKit::NetworkCache::Entry *v8;
  WTF::StringImpl *v9;
  WebKit::NetworkCache::Entry *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;
  WebKit::NetworkCache::Entry *v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  void *v20;
  WebKit::NetworkCache::Entry *v22;
  WebKit::NetworkCache::Entry *v23;
  WebKit::NetworkCache::Entry *v24;
  WebKit::NetworkCache::Entry *v25;
  WebKit::NetworkCache::Entry *v26;

  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    WebKit::NetworkCache::Entry::decodeStorageRecord(v3, &v25);
    v4 = v25 != 0;
    if (v25)
    {
      if ((WebCore::ResourceResponseBase::cacheControlContainsNoCache((WebKit::NetworkCache::Entry *)((char *)v25 + 80)) & 1) != 0
        || (WebCore::computeCurrentAge(), v6 = v5, WebCore::computeFreshnessLifetimeForHTTPFamily(), v6 - v7 > 0.0))
      {
        v8 = v25;
        if (*((_BYTE *)v25 + 552))
        {
          v23 = 0;
          WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(*(_QWORD *)(a1 + 8), &v23);
          v10 = v23;
          if (!v23)
            goto LABEL_13;
          goto LABEL_12;
        }
        *((_WORD *)v25 + 156) = *((_WORD *)v25 + 156) & 0xC3FF | 0xC00;
      }
      else
      {
        v8 = v25;
      }
      v25 = 0;
      v22 = v8;
      WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(*(_QWORD *)(a1 + 8), &v22);
      v10 = v22;
      if (!v22)
        goto LABEL_13;
    }
    else
    {
      v24 = 0;
      WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(*(_QWORD *)(a1 + 8), &v24);
      v10 = v24;
      if (!v24)
      {
LABEL_13:
        v16 = v25;
        v25 = 0;
        if (v16)
        {
          WebKit::NetworkCache::Entry::~Entry(v16, v9);
          WTF::fastFree(v17, v18);
        }
        WebKit::NetworkCache::Storage::Record::~Record(v3, v9);
        WTF::fastFree(v19, v20);
        return v4;
      }
    }
LABEL_12:
    WebKit::NetworkCache::Entry::~Entry(v10, v9);
    WTF::fastFree(v14, v15);
    goto LABEL_13;
  }
  v26 = 0;
  WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::Entry>)>::operator()(*(_QWORD *)(a1 + 8), &v26);
  if (v26)
  {
    WebKit::NetworkCache::Entry::~Entry(v26, v11);
    WTF::fastFree(v12, v13);
  }
  return 0;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int i;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    v4 = result;
    v5 = 0;
    v6 = *(_DWORD *)(result - 8);
    for (i = *(_DWORD *)(a2 + 32); ; i = v5 + v8)
    {
      v8 = i & v6;
      v9 = v4 + 80 * (i & v6);
      v10 = *(_QWORD *)(v9 + 16);
      if (v10 != -1)
      {
        if (!v10)
          return 0;
        if ((WebKit::NetworkCache::Key::operator==(v9, a2, a3) & 1) != 0)
          break;
      }
      ++v5;
    }
    return 1;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(WebKit::NetworkCache::SubresourceInfo const&,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34C4A58;
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(a1 + 192), 0);
  WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)(a1 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(WebKit::NetworkCache::SubresourceInfo const&,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_1,void>::~CallableWrapper(WebKit::NetworkCache::Entry **a1)
{
  void *v2;

  *a1 = (WebKit::NetworkCache::Entry *)off_1E34C4A58;
  std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100](a1 + 24, 0);
  WebKit::NetworkCache::SubresourceInfo::~SubresourceInfo((WebKit::NetworkCache::SubresourceInfo *)(a1 + 2));
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(WebKit::NetworkCache::SubresourceInfo const&,std::unique_ptr<WebKit::NetworkCache::Entry>,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_1,void>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  WebKit::NetworkCache::Entry *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  WebKit::NetworkCache::Entry *v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a1 + 16;
  result = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(*(_QWORD *)(v4 + 32), a1 + 16, a3);
  if ((result & 1) == 0)
  {
    v7 = *(WebKit::NetworkCache::Entry **)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    v11 = v7;
    WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource(v4, v5, &v11, (__int128 *)(a1 + 200), *(_WORD *)(a1 + 232), *(_BYTE *)(a1 + 234), *(_WORD *)(a1 + 236));
    result = (uint64_t)v11;
    if (v11)
    {
      WebKit::NetworkCache::Entry::~Entry(v11, v8);
      return WTF::fastFree(v9, v10);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(a1, v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34C4A80;
  WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0::~$_0(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::~CallableWrapper(WTF *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34C4A80;
  WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0::~$_0((_QWORD *)a1 + 1);
  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::preloadEntry(WebKit::NetworkCache::Key const&,WebKit::NetworkCache::SubresourceInfo const&,WebKit::NetworkCache::GlobalFrameID const&,std::optional<WebKit::NavigatingToAppBoundDomain>,BOOL,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void,std::unique_ptr<WebKit::NetworkCache::Entry>>::call(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  const WebKit::NetworkCache::Key *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  WTF::StringImpl *v24[25];
  char v25;
  uint64_t v26;
  const WebKit::NetworkCache::Entry *v27;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *(_QWORD *)(result + 16);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    goto LABEL_23;
  v5 = result;
  v6 = *(uint64_t **)(result + 8);
  v7 = (const WebKit::NetworkCache::Key *)(result + 24);
  v8 = WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::NetworkCache::Key>>,WebKit::NetworkCache::Key>(v6 + 4, result + 24, a3);
  v9 = v6[4];
  if (v9)
  {
    v10 = v9 + 80 * *(unsigned int *)(v9 - 4);
    if (v10 == v8)
      goto LABEL_10;
LABEL_8:
    if (v10 != v8)
      WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoad>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::remove(v6 + 4, v8);
    goto LABEL_10;
  }
  if (v8)
  {
    v10 = 0;
    goto LABEL_8;
  }
LABEL_10:
  result = WebKit::NetworkCache::SpeculativeLoadManager::satisfyPendingRequests((WebKit::NetworkCache::SpeculativeLoadManager *)v6, v7, (WebKit::NetworkCache::Entry *)v3);
  if ((_DWORD)result)
  {
    if (!v3)
      return result;
    v11 = *(unsigned int **)(v6[1] + 16);
    v12 = v11 + 30;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    WebCore::DiagnosticLoggingKeys::successfulSpeculativeWarmupWithoutRevalidationKey((WebCore::DiagnosticLoggingKeys *)result);
    WebKit::NetworkCache::logSpeculativeLoadingDiagnosticMessage((WebCore::DiagnosticLoggingKeys *)v11, *(_QWORD *)(v5 + 272), (uint64_t *)v24);
    v14 = v24[0];
    v24[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, a2);
      else
        *(_DWORD *)v14 -= 2;
    }
    do
    {
      v17 = __ldaxr(v12);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v12));
    if (!v18)
    {
      atomic_store(1u, v11 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
    goto LABEL_31;
  }
  if (v3)
  {
    if (WebCore::ResourceResponseBase::source((WebCore::ResourceResponseBase *)(v3 + 80)) != 3)
    {
      v26 = v3;
      LOBYTE(v24[0]) = 0;
      v25 = 0;
      WebKit::NetworkCache::SpeculativeLoadManager::addPreloadedEntry((uint64_t)v6, &v26, (__int128 *)(v5 + 272), (uint64_t)v24);
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v24);
      result = v26;
      if (!v26)
        return result;
      goto LABEL_32;
    }
    v15 = v5 + 96;
    result = WebCore::ResourceResponseBase::hasCacheValidatorFields((WebCore::ResourceResponseBase *)(v3 + 80));
    if ((result & 1) != 0)
      goto LABEL_38;
  }
  else
  {
    v15 = v5 + 96;
  }
  v16 = *(double *)(v5 + 168) - *(double *)(v5 + 176);
  if (v16 != 0.0)
  {
    result = WTF::WallTime::now((WTF::WallTime *)result);
    if (v16 > 0.0)
    {
      v22 = v21 - *(double *)(v5 + 176);
      if (v22 > 0.0)
      {
        v23 = v21 - *(double *)(v5 + 168);
        if (v23 > 0.0 && v16 / v22 > dbl_1978CFA80[v23 > 300.0])
        {
LABEL_38:
          v27 = (const WebKit::NetworkCache::Entry *)v3;
          WebKit::NetworkCache::SpeculativeLoadManager::revalidateSubresource((uint64_t)v6, v15, &v27, (__int128 *)(v5 + 272), *(_WORD *)(v5 + 304), *(_BYTE *)(v5 + 306), *(_WORD *)(v5 + 308));
          result = (uint64_t)v27;
          if (!v27)
            return result;
          goto LABEL_32;
        }
      }
    }
  }
LABEL_23:
  if (!v3)
    return result;
LABEL_31:
  result = v3;
LABEL_32:
  WebKit::NetworkCache::Entry::~Entry((WebKit::NetworkCache::Entry *)result, a2);
  return WTF::fastFree(v19, v20);
}

uint64_t WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebKit::NetworkCache::Key,WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashMap<WebKit::NetworkCache::Key,std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>,WTF::DefaultHash<WebKit::NetworkCache::Key>,WTF::HashTraits<WebKit::NetworkCache::Key>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::SpeculativeLoadManager::ExpiringEntry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::NetworkCache::Key>>::rehash(a1, v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieveSubresourcesEntry(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)> &&)::$_0,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::SpeculativeLoadManager::retrieveSubresourcesEntry(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)> &&)::$_0::Timings const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C4AA8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieveSubresourcesEntry(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)> &&)::$_0,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::SpeculativeLoadManager::retrieveSubresourcesEntry(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)> &&)::$_0::Timings const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C4AA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::SpeculativeLoadManager::retrieveSubresourcesEntry(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)> &&)::$_0,BOOL,std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::SpeculativeLoadManager::retrieveSubresourcesEntry(WebKit::NetworkCache::Key const&,WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)> &&)::$_0::Timings const&>::call(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v15[120];
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = WTF::fastMalloc((WTF *)0x60);
    v5 = (_QWORD *)WebKit::NetworkCache::Key::Key(v4, (uint64_t)v3);
    v5[9] = v3[9];
    v5[10] = 0;
    v5[11] = 0;
    WebKit::NetworkCache::Data::span((WebKit::NetworkCache::Data *)(v3 + 10));
    WTF::Persistence::Decoder::Decoder();
    LOBYTE(v13) = 0;
    v14 = 0;
    LOBYTE(v16) = 0;
    v17 = 0;
    WTF::Persistence::Decoder::operator>>();
    WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v15);
    std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](v4, v7);
    v11 = 0;
    WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)>::operator()(*(_QWORD *)(a1 + 8), &v11);
    if (v11)
      std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](v11, v8);
    WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)v3, (WTF::StringImpl *)v8);
    WTF::fastFree(v9, v10);
  }
  else
  {
    v12 = 0;
    WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)>::operator()(*(_QWORD *)(a1 + 8), &v12);
    if (v12)
      std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](v12, v6);
  }
}

uint64_t WTF::Function<void ()(std::unique_ptr<WebKit::NetworkCache::SubresourcesEntry>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a2;
  *a2 = 0;
  v5 = v2;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return std::default_delete<WebKit::NetworkCache::SubresourcesEntry>::operator()[abi:sn180100](result, v3);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::NetworkCache::Storage::*&)(void),WebKit::NetworkCache::Storage*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  *a1 = &off_1E34C4AF8;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  *(_QWORD *)this = &off_1E34C4AF8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  const WTF::String *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF *result;
  _QWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (void *)WTF::fastMalloc((WTF *)0x8000);
  bzero(v3, 0x8000uLL);
  v27 = (WTF *)v3;
  v4 = (void *)WTF::fastMalloc((WTF *)0x8000);
  bzero(v4, 0x8000uLL);
  v25 = 0;
  v26 = (WTF *)v4;
  v24 = 0;
  WTF::String::isolatedCopy();
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v5 = off_1E34C4B98;
  v5[1] = &v25;
  v5[2] = &v26;
  v5[3] = (char *)&v25 + 4;
  v5[4] = &v27;
  v22 = v5;
  WebKit::NetworkCache::traverseRecordsFiles((WTF::FileSystemImpl *)&v23, (uint64_t)&v24, (uint64_t)&v22);
  v7 = v22;
  v22 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  v8 = v23;
  v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = WebKit::NetworkCache::Storage::estimateRecordsSize((WebKit::NetworkCache::Storage *)v2, (const WTF::String *)HIDWORD(v25), v25);
  WebKit::NetworkCache::BlobStorage::synchronize((WebKit::NetworkCache::BlobStorage *)(v2 + 336));
  WTF::String::isolatedCopy();
  WebKit::NetworkCache::deleteEmptyRecordsDirectories((WebKit::NetworkCache *)&v23, v10);
  v12 = v23;
  v23 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      v12 = (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::RunLoop::main(v12);
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v15 = v26;
  v14 = v27;
  v26 = 0;
  v27 = 0;
  v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v16 = &off_1E34C4C10;
  *((_QWORD *)v16 + 1) = v2;
  *((_QWORD *)v16 + 2) = v13;
  *((_QWORD *)v16 + 3) = v14;
  *((_QWORD *)v16 + 4) = v15;
  *((_QWORD *)v16 + 5) = v9;
  v23 = v16;
  WTF::RunLoop::dispatch();
  v18 = v23;
  v23 = 0;
  if (v18)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
  v19 = v24;
  v24 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v26;
  v26 = 0;
  if (v20)
    WTF::fastFree(v20, v17);
  result = v27;
  v27 = 0;
  if (result)
    return (WTF *)WTF::fastFree(result, v17);
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::traverseRecordsFiles(WTF::String const&,WTF::String const&,WTF::Function<void ()(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)> const&)::$_0,void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(WTF::StringImpl *result, uint64_t a2, int a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  WTF::StringImpl *v11[7];

  if (!a3)
  {
    v11[5] = v3;
    v11[6] = v4;
    v5 = result;
    WTF::FileSystemImpl::pathByAppendingComponent();
    v6 = *((_QWORD *)v5 + 2);
    v7 = *((_QWORD *)v5 + 3);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v8 = off_1E34C4B48;
    v8[1] = v6;
    v8[2] = v11;
    v8[3] = v7;
    v10 = v8;
    WebKit::NetworkCache::traverseDirectory((WTF::FileSystemImpl *)v11, (const WTF::String *)&v10);
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    result = v11[0];
    v11[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::traverseRecordsFiles(WTF::String const&,WTF::String const&,WTF::Function<void ()(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)> const&)::$_0::operator() const(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)::{lambda(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)#1},void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(WTF::StringImpl *result, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  WTF::StringImpl *v12[7];

  if (!(_DWORD)a3)
  {
    v12[5] = v3;
    v12[6] = v4;
    v6 = result;
    v7 = (WTF *)**((_QWORD **)result + 1);
    if (!v7 || !*((_DWORD *)v7 + 1) || (result = (WTF::StringImpl *)WTF::equal(v7, *a2, a3), (_DWORD)result))
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      v8 = *((_QWORD *)v6 + 3);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v9 = off_1E34C4B70;
      v9[1] = v8;
      v9[2] = v12;
      v9[3] = a2;
      v11 = v9;
      WebKit::NetworkCache::traverseDirectory((WTF::FileSystemImpl *)v12, (const WTF::String *)&v11);
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
      result = v12[0];
      v12[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::traverseRecordsFiles(WTF::String const&,WTF::String const&,WTF::Function<void ()(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)> const&)::$_0::operator() const(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)::{lambda(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)#1}::operator() const(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)::{lambda(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)#1},void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(WTF::StringImpl *result, WTF::StringImpl **this, int a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9[5];

  if (a3 == 1)
  {
    v9[3] = v3;
    v9[4] = v4;
    if (*this)
    {
      if (*((_DWORD *)*this + 1) >= 0x28u)
      {
        v6 = result;
        WTF::String::left(this, 0x28u, v9);
        if (*this && *((_DWORD *)*this + 1) >= 0x29u)
          v7 = WTF::StringImpl::endsWith();
        else
          v7 = 0;
        (*(void (**)(_QWORD, WTF::StringImpl **, WTF::StringImpl **, _QWORD, uint64_t, _QWORD))(***((_QWORD ***)v6 + 1) + 16))(**((_QWORD **)v6 + 1), this, v9, *((_QWORD *)v6 + 3), v7, *((_QWORD *)v6 + 2));
        result = v9[0];
        v9[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(void)::{lambda(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)#1},void,WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&>::call(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  const WTF::String *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v13;
  unint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  char v20;
  char v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v29;
  char v30;
  unint64_t v32;
  unsigned __int8 *v33;
  char v34;
  char v35;
  unsigned int v36;
  char v37;
  int v38;
  WTF::StringImpl *result;
  WTF::StringImpl *v40;
  _QWORD v41[4];

  v41[3] = *MEMORY[0x1E0C80C00];
  WTF::FileSystemImpl::pathByAppendingComponent();
  v9 = *a3;
  if (*a3 && *(_DWORD *)(v9 + 4) == 40)
  {
    v10 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v27 = *v10;
      if ((v27 - 48) >= 0xA && ((v27 | 0x20) - 97) > 5u)
        goto LABEL_48;
      v29 = v10[1];
      v30 = v29 - 48;
      if ((v29 - 48) >= 0xA && ((v29 | 0x20) - 97) > 5u)
        goto LABEL_48;
      v32 = 0;
      v33 = v10 + 3;
      do
      {
        v17 = v32;
        if (v27 >= 0x41u)
          v34 = 9;
        else
          v34 = 0;
        v35 = v34 + v27;
        v36 = v29;
        v37 = (v29 + 9) & 0xF;
        if (v36 >= 0x41)
          v30 = v37;
        *((_BYTE *)v41 + v17) = v30 | (16 * v35);
        if (v17 == 19)
          break;
        v27 = *(v33 - 1);
        if ((v27 - 48) >= 0xA && ((v27 | 0x20) - 97) > 5u)
          break;
        v38 = *v33;
        v33 += 2;
        LOBYTE(v29) = v38;
        v30 = v38 - 48;
        v32 = v17 + 1;
      }
      while ((v38 - 48) < 0xA || ((v29 | 0x20) - 97) <= 5u);
    }
    else
    {
      v11 = *(unsigned __int16 *)v10;
      if ((v11 - 48) >= 0xA && (unsigned __int16)((v11 | 0x20) - 97) > 5u)
        goto LABEL_48;
      v13 = *((unsigned __int16 *)v10 + 1);
      if ((v13 - 48) >= 0xA && (unsigned __int16)((v13 | 0x20) - 97) > 5u)
        goto LABEL_48;
      v15 = 0;
      v16 = (unsigned __int16 *)(v10 + 6);
      do
      {
        v17 = v15;
        v18 = (unsigned __int16)v13;
        v19 = v13 - 48;
        v20 = (v13 + 9) & 0xF;
        if (v18 < 0x41)
          v20 = v19;
        if ((unsigned __int16)v11 >= 0x41u)
          v21 = 9;
        else
          v21 = 0;
        *((_BYTE *)v41 + v17) = v20 | (16 * (v21 + v11));
        if (v17 == 19)
          break;
        v11 = *(v16 - 1);
        if ((v11 - 48) >= 0xA && (unsigned __int16)((v11 | 0x20) - 97) > 5u)
          break;
        v22 = *v16;
        v16 += 2;
        LOWORD(v13) = v22;
        v15 = v17 + 1;
      }
      while ((v22 - 48) < 0xA || (unsigned __int16)((v13 | 0x20) - 97) <= 5u);
    }
    if (v17 > 0x12)
    {
      if (a5)
      {
        ++**(_DWORD **)(a1 + 8);
        v23 = *(uint64_t **)(a1 + 16);
      }
      else
      {
        ++**(_DWORD **)(a1 + 24);
        v23 = *(uint64_t **)(a1 + 32);
      }
      v24 = *v23;
      v25 = v41[0];
      v26 = HIDWORD(v41[0]);
      *(_DWORD *)(v24 + 4 * ((v41[0] >> 5) & 0x1FFFLL)) |= 1 << SLOBYTE(v41[0]);
      *(_DWORD *)(v24 + 4 * ((v25 >> 37) & 0x1FFF)) |= 1 << v26;
      goto LABEL_49;
    }
  }
LABEL_48:
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v40, v8);
LABEL_49:
  result = v40;
  v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::deleteEmptyRecordsDirectories(WTF::String const&)::$_0,void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(WTF::StringImpl *result, uint64_t a2, int a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10[7];

  if (!a3)
  {
    v10[5] = v3;
    v10[6] = v4;
    WTF::FileSystemImpl::pathByAppendingComponent();
    v5 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v5 = off_1E34C4BE8;
    *((_QWORD *)v5 + 1) = v10;
    v9 = v5;
    WebKit::NetworkCache::traverseDirectory((WTF::FileSystemImpl *)v10, (const WTF::String *)&v9);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 8))(v5);
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v9, v6);
    v8 = v9;
    v9 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = v10[0];
    v10[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::deleteEmptyRecordsDirectories(WTF::String const&)::$_0::operator() const(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)::{lambda(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)#1},void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8[3];

  if (!a3)
  {
    v8[1] = v3;
    v8[2] = v4;
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)v8, v5);
    v7 = v8[0];
    v8[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;

  *a1 = &off_1E34C4C10;
  v3 = (WTF *)a1[4];
  a1[4] = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF *)a1[3];
  a1[3] = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;

  *(_QWORD *)this = &off_1E34C4C10;
  v3 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v5);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::synchronize(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  WTF *result;

  v3 = a1[1];
  v4 = *(unint64_t **)(v3 + 96);
  v5 = *(unsigned int *)(v3 + 108);
  if ((_DWORD)v5)
  {
    v6 = a1[3];
    v7 = 20 * v5;
    do
    {
      v8 = *v4;
      v4 = (unint64_t *)((char *)v4 + 20);
      *(_DWORD *)(v6 + 4 * ((v8 >> 5) & 0x1FFF)) |= 1 << v8;
      *(_DWORD *)(v6 + 4 * ((v8 >> 37) & 0x1FFF)) |= 1 << SBYTE4(v8);
      v7 -= 20;
    }
    while (v7);
  }
  WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3 + 96, a2);
  v10 = *(unint64_t **)(v3 + 112);
  v11 = *(unsigned int *)(v3 + 124);
  if ((_DWORD)v11)
  {
    v12 = a1[4];
    v13 = 20 * v11;
    do
    {
      v14 = *v10;
      v10 = (unint64_t *)((char *)v10 + 20);
      *(_DWORD *)(v12 + 4 * ((v14 >> 5) & 0x1FFF)) |= 1 << v14;
      *(_DWORD *)(v12 + 4 * ((v14 >> 37) & 0x1FFF)) |= 1 << SBYTE4(v14);
      v13 -= 20;
    }
    while (v13);
  }
  WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3 + 112, v9);
  v16 = a1[3];
  a1[3] = 0;
  v17 = *(WTF **)(v3 + 64);
  *(_QWORD *)(v3 + 64) = v16;
  if (v17)
    WTF::fastFree(v17, v15);
  v18 = a1[4];
  a1[4] = 0;
  result = *(WTF **)(v3 + 72);
  *(_QWORD *)(v3 + 72) = v18;
  if (result)
    result = (WTF *)WTF::fastFree(result, v15);
  *(_QWORD *)(v3 + 48) = a1[5];
  *(_BYTE *)(v3 + 80) = 0;
  if (*(_DWORD *)(v3 + 24) == 1)
    return (WTF *)WebKit::NetworkCache::Storage::dispatchPendingWriteOperations((_QWORD *)v3, (WTF::StringImpl *)v15);
  return result;
}

uint64_t WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::array<unsigned char,20ul> const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 20 * *(unsigned int *)(a1 + 12);
  v5 = *(_OWORD *)v3;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(v3 + 16);
  *(_OWORD *)v4 = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3 && (unint64_t)v5 + 20 * *(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - (_QWORD)v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  return v3;
}

void **WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  void **v2;
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0xCCCCCCD)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *result;
      v4 = *((unsigned int *)result + 3);
      v5 = 20 * a2;
      v6 = (void *)WTF::fastMalloc((WTF *)(20 * a2));
      *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFFC) / 0x14;
      *v2 = v6;
      result = (void **)memcpy(v6, v3, 20 * v4);
      if (v3)
      {
        if (*v2 == v3)
        {
          *v2 = 0;
          *((_DWORD *)v2 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v3, v7);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::storeBodyAsBlob(WebKit::NetworkCache::Storage::WriteOperation &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E34C4C38;
  v2 = (void *)a1[2];
  if (v2)
    os_release(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::storeBodyAsBlob(WebKit::NetworkCache::Storage::WriteOperation &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  void *v3;

  *(_QWORD *)this = &off_1E34C4C38;
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
    os_release(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::storeBodyAsBlob(WebKit::NetworkCache::Storage::WriteOperation &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 *v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 40);
    *(_DWORD *)(v3 + 4 * ((v4 >> 5) & 0x1FFF)) |= 1 << v4;
    *(_DWORD *)(v3 + 4 * ((v4 >> 37) & 0x1FFF)) |= 1 << SBYTE4(v4);
  }
  if (*(_BYTE *)(v2 + 80))
  {
    v5 = (__int128 *)(*(_QWORD *)(a1 + 72) + 40);
    v6 = *(_DWORD *)(v2 + 124);
    if (v6 == *(_DWORD *)(v2 + 120))
    {
      WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::array<unsigned char,20ul> const&>(v2 + 112, (unint64_t)v5);
    }
    else
    {
      v7 = *(_QWORD *)(v2 + 112) + 20 * v6;
      v8 = *v5;
      *(_DWORD *)(v7 + 16) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 56);
      *(_OWORD *)v7 = v8;
      ++*(_DWORD *)(v2 + 124);
    }
  }
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(v9 + 176);
  if (v10)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, a1 + 16);
    v9 = *(_QWORD *)(a1 + 72);
  }
  return WebKit::NetworkCache::Storage::finishWriteOperation((unsigned int *)v2, (unsigned int *)v9, 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34C4C60;
  WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C4C60;
  WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WebKit::NetworkCache::Key const&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::NetworkCache::Storage::deleteFiles(*(WebKit::NetworkCache::Storage **)(a1 + 8), (const WebKit::NetworkCache::Key *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  *a1 = off_1E34C4C88;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;

  *(_QWORD *)a1 = off_1E34C4C88;
  v3 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v5 = (unsigned int *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v5);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::remove(WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(WTF::StringImpl *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WebKit::NetworkCache::Storage *v3;
  const WebKit::NetworkCache::Key *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v1 = a1;
  v2 = *((unsigned int *)a1 + 9);
  if ((_DWORD)v2)
  {
    v3 = (WebKit::NetworkCache::Storage *)*((_QWORD *)a1 + 1);
    v4 = (const WebKit::NetworkCache::Key *)*((_QWORD *)a1 + 3);
    v5 = 72 * v2;
    do
    {
      a1 = WebKit::NetworkCache::Storage::deleteFiles(v3, v4);
      v4 = (const WebKit::NetworkCache::Key *)((char *)v4 + 72);
      v5 -= 72;
    }
    while (v5);
  }
  WTF::RunLoop::main(a1);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, (uint64_t *)v1 + 5);
  WTF::RunLoop::dispatch();
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::updateFileModificationTime(WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34C4CB0;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::updateFileModificationTime(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C4CB0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::updateFileModificationTime(WTF::String &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  return WebKit::NetworkCache::updateFileModificationTimeIfNeeded((WebKit::NetworkCache *)(a1 + 8), a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::dispatchReadOperation(std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v2;
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::MonotonicTime *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::MonotonicTime *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  WTF::StringImpl *v25;
  unsigned int *v26;
  WTF::StringImpl *v27;
  void *object;
  __int128 v29;
  char v30;
  __int128 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 8);
  v3 = WebKit::NetworkCache::Storage::recordPathForKey((WebKit::NetworkCache::Storage *)&v27, (const WebKit::NetworkCache::Key *)v2, *(_QWORD *)(a1 + 16) + 8);
  v4 = (unsigned int *)(*(_QWORD *)(a1 + 16) + 192);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if (*(_BYTE *)(a1 + 24))
  {
    v6 = (unsigned int *)(*(_QWORD *)(a1 + 16) + 192);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  WTF::MonotonicTime::now(v3);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 216) = v8;
  WebKit::NetworkCache::IOChannel::open((uint64_t *)&v26, (uint64_t)&v27, 0);
  v9 = v26;
  v10 = (unsigned int *)v2[39];
  v11 = v10 + 2;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = off_1E34C4D00;
  v14[1] = v2;
  v14[2] = v13;
  object = v14;
  WebKit::NetworkCache::IOChannel::read((uint64_t)v9, 0, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v10, (uint64_t *)&object);
  v16 = (WTF::MonotonicTime *)object;
  if (object)
    v16 = (WTF::MonotonicTime *)(*(uint64_t (**)(void *))(*(_QWORD *)object + 8))(object);
  do
  {
    v17 = __ldaxr(v11);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v11));
  if (!v18)
  {
    atomic_store(1u, v10 + 2);
    v16 = (WTF::MonotonicTime *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (*(_BYTE *)(a1 + 24))
  {
    WTF::MonotonicTime::now(v16);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 232) = v19;
    WebKit::NetworkCache::Storage::blobPathForKey((WebKit::NetworkCache::Storage *)&v25, (const WebKit::NetworkCache::Key *)v2, *(_QWORD *)(a1 + 16) + 8);
    WebKit::NetworkCache::BlobStorage::get((WebKit::NetworkCache::BlobStorage *)(v2 + 42), (uint64_t)&object);
    v20 = *(_QWORD *)(a1 + 16);
    WTF::OSObjectPtr<dispatch_data_s *>::operator=((void **)(v20 + 136), &object);
    *(_OWORD *)(v20 + 144) = v29;
    *(_BYTE *)(v20 + 160) = v30;
    *(_OWORD *)(v20 + 168) = v31;
    *(_DWORD *)(v20 + 184) = v32;
    v21 = (WTF::MonotonicTime *)object;
    if (object)
      os_release(object);
    WTF::MonotonicTime::now(v21);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 240) = v22;
    WebKit::NetworkCache::Storage::finishReadOperation((WTF::RunLoop *)v2, *(_QWORD *)(a1 + 16));
    v23 = v25;
    v25 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v15);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  if (v26)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v26, v15);
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::RunLoop *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::dispatchReadOperation(std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>)::$_0::operator() const(void)::{lambda(WebKit::NetworkCache::Data const&,int)#1},void,WebKit::NetworkCache::Data&,int>::call(WTF::MonotonicTime *a1, uint64_t a2, int a3)
{
  WTF::RunLoop *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF::WallTime *v11;
  double v12;
  dispatch_data_t subrange;
  size_t size;
  BOOL v15;
  __int128 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  __int128 v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  void *v36;
  __int128 v37;
  char v38;
  void *v39;
  __int128 v40;
  char v41;
  void *object;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  double v48;
  void *v49;
  __int128 v50;
  char v51;
  void *v52;
  __int128 v53;
  char v54;
  _BYTE v55[21];
  _BYTE v56[8];
  __int128 v57;
  __int128 v58;
  double v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  size_t length;
  char v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = (WTF::RunLoop *)*((_QWORD *)a1 + 1);
  WTF::MonotonicTime::now(a1);
  *(_QWORD *)(*((_QWORD *)a1 + 2) + 224) = v7;
  if (!a3)
  {
    v8 = *((_QWORD *)a1 + 2);
    v57 = 0u;
    v58 = 0u;
    v59 = 0.0;
    v60 = 0;
    length = 0;
    v64 = 0;
    v65 = 0;
    v39 = 0;
    v40 = 0uLL;
    v41 = 0;
    if (WebKit::NetworkCache::decodeRecordHeader((dispatch_data_t *)a2, (uint64_t)v56, (uint64_t)&v39, (uint64_t)v6 + 28))
    {
      v11 = (WTF::WallTime *)WebKit::NetworkCache::Key::operator==((uint64_t)&v57, v8 + 8, v10);
      if ((_DWORD)v11)
      {
        WTF::WallTime::now(v11);
        if (v59 <= v12)
        {
          v36 = 0;
          v37 = 0uLL;
          v38 = 0;
          if (!v64)
            goto LABEL_19;
          v9 = (WTF::StringImpl *)(*((_QWORD *)&v40 + 1) + v65);
          if (*((_QWORD *)&v40 + 1) + v65 + length == *(_QWORD *)(a2 + 16))
          {
            subrange = dispatch_data_create_subrange(*(dispatch_data_t *)a2, (size_t)v9, length);
            size = 0;
            object = subrange;
            *(_QWORD *)&v43 = 0;
            if (subrange)
              size = dispatch_data_get_size(subrange);
            *((_QWORD *)&v43 + 1) = size;
            LOBYTE(v44) = 0;
            WTF::OSObjectPtr<dispatch_data_s *>::operator=(&v36, &object);
            v37 = v43;
            v38 = v44;
            if (object)
              os_release(object);
            WebKit::NetworkCache::computeSHA1((uint64_t)&v36, (uint64_t)v6 + 28);
            v15 = (void *)v61 == object && *((_QWORD *)&v61 + 1) == (_QWORD)v43;
            if (v15 && v62 == (unint64_t)DWORD2(v43))
            {
LABEL_19:
              v17 = v61;
              *(_DWORD *)(v8 + 128) = v62;
              *(_OWORD *)(v8 + 112) = v17;
              WebKit::NetworkCache::Key::Key((uint64_t)&object, (uint64_t)&v57);
              v48 = v59;
              v49 = v39;
              if (v39)
                os_retain(v39);
              v50 = v40;
              v51 = v41;
              v52 = v36;
              if (v36)
                os_retain(v36);
              v53 = v37;
              v54 = v38;
              *(_OWORD *)v55 = v61;
              *(_DWORD *)&v55[16] = v62;
              v55[20] = 1;
              v18 = WTF::fastMalloc((WTF *)0xA8);
              v19 = object;
              object = 0;
              *(_QWORD *)v18 = v19;
              v20 = v43;
              *(_QWORD *)&v43 = 0;
              *(_QWORD *)(v18 + 8) = v20;
              v21 = *((_QWORD *)&v43 + 1);
              *((_QWORD *)&v43 + 1) = 0;
              *(_QWORD *)(v18 + 16) = v21;
              v22 = v44;
              v44 = 0;
              *(_QWORD *)(v18 + 24) = v22;
              v23 = v46;
              v24 = v45;
              *(_QWORD *)(v18 + 64) = v47;
              *(_OWORD *)(v18 + 32) = v24;
              *(_OWORD *)(v18 + 48) = v23;
              *(double *)(v18 + 72) = v48;
              v25 = v49;
              *(_QWORD *)(v18 + 80) = v49;
              if (v25)
                os_retain(v25);
              v26 = v50;
              *(_BYTE *)(v18 + 104) = v51;
              *(_OWORD *)(v18 + 88) = v26;
              v27 = v52;
              *(_QWORD *)(v18 + 112) = v52;
              if (v27)
                os_retain(v27);
              v28 = v53;
              *(_BYTE *)(v18 + 136) = v54;
              *(_OWORD *)(v18 + 120) = v28;
              v29 = *(_OWORD *)v55;
              *(_QWORD *)(v18 + 157) = *(_QWORD *)&v55[13];
              *(_OWORD *)(v18 + 144) = v29;
              std::unique_ptr<WebKit::NetworkCache::Storage::Record>::reset[abi:sn180100]((WebKit::NetworkCache::Storage::Record **)(v8 + 104), (WTF::StringImpl *)v18);
              WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)&object, v30);
            }
          }
          if (v36)
            os_release(v36);
        }
      }
    }
    if (v39)
      os_release(v39);
    v31 = (WTF::StringImpl *)*((_QWORD *)&v58 + 1);
    *((_QWORD *)&v58 + 1) = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v9);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = (WTF::StringImpl *)v58;
    *(_QWORD *)&v58 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v9);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = (WTF::StringImpl *)*((_QWORD *)&v57 + 1);
    *((_QWORD *)&v57 + 1) = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v9);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = (WTF::StringImpl *)v57;
    *(_QWORD *)&v57 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v9);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  return WebKit::NetworkCache::Storage::finishReadOperation(v6, *((_QWORD *)a1 + 2));
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::finishReadOperation(WebKit::NetworkCache::Storage::ReadOperation &)::$_0,void>::call(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  WebKit::NetworkCache::Storage::Record **v4;
  uint64_t v5;
  char v8;
  uint64_t v9;
  WebKit::NetworkCache::Storage::Record *v10;
  WTF::StringImpl *v11;
  int v12;
  WebKit::NetworkCache::Storage::Record *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  WebKit::NetworkCache::Storage::Record *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebKit::NetworkCache::Storage::Record *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  WebKit::NetworkCache::Storage::ReadOperation *v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WebKit::NetworkCache::Storage::Record *v45;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v3 + 196))
    goto LABEL_21;
  v4 = (WebKit::NetworkCache::Storage::Record **)(v3 + 104);
  v5 = *(_QWORD *)(v3 + 104);
  if (v5 && !*(_QWORD *)(v5 + 112))
  {
    if (*(_QWORD *)(v3 + 168) == *(_QWORD *)(v3 + 112)
      && *(_QWORD *)(v3 + 176) == *(_QWORD *)(v3 + 120)
      && *(_DWORD *)(v3 + 184) == (unint64_t)*(unsigned int *)(v3 + 128))
    {
      v4 = (WebKit::NetworkCache::Storage::Record **)WTF::OSObjectPtr<dispatch_data_s *>::operator=((void **)(v5 + 112), (void **)(v3 + 136));
      v8 = *(_BYTE *)(v3 + 160);
      *(_OWORD *)(v5 + 120) = *(_OWORD *)(v3 + 144);
      *(_BYTE *)(v5 + 136) = v8;
    }
    else
    {
      v4 = (WebKit::NetworkCache::Storage::Record **)std::unique_ptr<WebKit::NetworkCache::Storage::Record>::reset[abi:sn180100](v4, 0);
    }
  }
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v4);
  *(_QWORD *)(v3 + 248) = v9;
  v10 = *(WebKit::NetworkCache::Storage::Record **)(v3 + 104);
  *(_QWORD *)(v3 + 104) = 0;
  v45 = v10;
  v12 = WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()((uint64_t *)(v3 + 96), &v45);
  v13 = v45;
  v45 = 0;
  if (!v13)
  {
    if (v12)
      goto LABEL_15;
LABEL_21:
    v22 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v22 + 196))
      WebKit::NetworkCache::Storage::remove((WebKit::NetworkCache::Storage *)v2, (const WebKit::NetworkCache::Key *)(v22 + 8));
    goto LABEL_28;
  }
  WebKit::NetworkCache::Storage::Record::~Record(v13, v11);
  WTF::fastFree(v14, v15);
  if ((v12 & 1) == 0)
    goto LABEL_21;
LABEL_15:
  WebKit::NetworkCache::Storage::recordPathForKey((WebKit::NetworkCache::Storage *)&v43, (const WebKit::NetworkCache::Key *)v2, *(_QWORD *)(a1 + 16) + 8);
  v16 = v2[41];
  WTF::String::isolatedCopy();
  v17 = (WebKit::NetworkCache::Storage::Record *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v17 = &off_1E34C4CB0;
  v18 = v44;
  v44 = 0;
  v45 = v17;
  *((_QWORD *)v17 + 1) = v18;
  (*(void (**)(uint64_t, WebKit::NetworkCache::Storage::Record **))(*(_QWORD *)v16 + 32))(v16, &v45);
  v20 = v45;
  v45 = 0;
  if (v20)
    (*(void (**)(WebKit::NetworkCache::Storage::Record *))(*(_QWORD *)v20 + 8))(v20);
  v21 = v44;
  v44 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v23 = v43;
  v43 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v19);
    else
      *(_DWORD *)v23 -= 2;
  }
  do
LABEL_28:
    v24 = __ldaxr((unsigned int *)v2);
  while (__stlxr(v24 + 1, (unsigned int *)v2));
  v26 = v2 + 18;
  v25 = v2[18];
  if (!v25)
    goto LABEL_45;
  v27 = *(_QWORD *)(a1 + 16);
  v28 = *(_DWORD *)(v25 - 8);
  v29 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
  v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
  v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
  v32 = v28 & ((v31 >> 31) ^ v31);
  v33 = *(_QWORD *)(v25 + 8 * v32);
  if (v33 != v27)
  {
    v34 = 1;
    while (v33)
    {
      v32 = ((_DWORD)v32 + v34) & v28;
      v33 = *(_QWORD *)(v25 + 8 * v32);
      ++v34;
      if (v33 == v27)
        goto LABEL_34;
    }
    v32 = *(unsigned int *)(v25 - 4);
  }
LABEL_34:
  if (v32 != *(_DWORD *)(v25 - 4))
  {
    v35 = *(WebKit::NetworkCache::Storage::ReadOperation **)(v25 + 8 * v32);
    *(_QWORD *)(v25 + 8 * v32) = -1;
    if (v35)
    {
      WebKit::NetworkCache::Storage::ReadOperation::~ReadOperation(v35);
      WTF::fastFree(v36, v37);
    }
    ++*(_DWORD *)(*v26 - 16);
    v38 = *v26;
    v39 = *v26 ? *(_DWORD *)(v38 - 12) - 1 : -1;
    *(_DWORD *)(v38 - 12) = v39;
    v25 = *v26;
    if (!*v26)
      goto LABEL_45;
    v40 = *(_DWORD *)(v25 - 4);
    if (6 * *(_DWORD *)(v25 - 12) < v40 && v40 >= 9)
    {
      WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>>::rehash(v2 + 18, v40 >> 1);
      v25 = *v26;
      if (!*v26)
        goto LABEL_45;
    }
  }
  if (!*(_DWORD *)(v25 - 12))
  {
LABEL_45:
    if ((v2[23] & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 19));
  }
  WebKit::NetworkCache::Storage::dispatchPendingReadOperations(v2);
  return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref((unsigned int *)v2);
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
  {
    if (6 * *(_DWORD *)(v1 - 12) >= 2 * v2)
      v2 *= 2;
  }
  else
  {
    v2 = 8;
  }
  return WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>>::rehash(a1, v2);
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t i;
  unsigned int ***v10;
  unsigned int **v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int ***v18;
  unsigned int **v19;
  unsigned int **v20;
  int v21;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (unsigned int ***)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != (unsigned int **)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          if (*(_QWORD *)(v12 + 8 * v17))
          {
            v21 = 1;
            do
              v17 = ((_DWORD)v17 + v21++) & v13;
            while (*(_QWORD *)(v12 + 8 * v17));
          }
          v18 = (unsigned int ***)(v12 + 8 * v17);
          *v18 = 0;
          v19 = *v10;
          *v10 = 0;
          *v18 = v19;
          v20 = *v10;
          *v10 = 0;
          if (v20)
            std::default_delete<WebKit::NetworkCache::Storage::WriteOperation>::operator()[abi:sn180100](v20, v8);
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::dispatchWriteOperation(std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  const WTF::String *v3;
  WTF *AllDirectories;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  WTF::RunLoop *v9;
  WTF::StringImpl *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  void *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  char v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  _QWORD *v30;
  __int128 v31;
  char v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  void *object;
  __int128 v37;
  char v38;
  __int128 v39;
  int v40;
  char v41;
  _BYTE v42[27];
  _BYTE v43[23];
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  WebKit::NetworkCache::Storage::recordDirectoryPathForKey((uint64_t)&v34, v2, *(_QWORD *)(a1 + 16) + 8);
  WebKit::NetworkCache::Storage::recordPathForKey((WebKit::NetworkCache::Storage *)&v33, (const WebKit::NetworkCache::Key *)v2, *(_QWORD *)(a1 + 16) + 8);
  AllDirectories = (WTF *)WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v34, v3);
  v5 = (unsigned int *)(*(_QWORD *)(a1 + 16) + 192);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 136);
  if (v7 <= WTF::pageSize(AllDirectories))
  {
    v16 = 0;
    v18 = *(_QWORD *)(a1 + 16) + 8;
    LOBYTE(object) = 0;
    v41 = 0;
LABEL_27:
    WebKit::NetworkCache::Storage::encodeRecord((uint64_t)v42, v2, v18);
    v19 = 1;
    goto LABEL_28;
  }
  v8 = *(_QWORD *)(a1 + 16);
  WebKit::NetworkCache::Storage::blobPathForKey((WebKit::NetworkCache::Storage *)&v35, (const WebKit::NetworkCache::Key *)v2, v8 + 8);
  WebKit::NetworkCache::BlobStorage::add((WebKit::NetworkCache::BlobStorage *)(v2 + 336), (const WTF::String *)&v35, (const WebKit::NetworkCache::Data *)(v8 + 120), (uint64_t)&object);
  v11 = object;
  if (object)
  {
    v12 = (unsigned int *)(v8 + 192);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    WTF::RunLoop::main(v9);
    v14 = object;
    if (object)
      os_retain(object);
    *(_OWORD *)v43 = v37;
    v43[16] = v38;
    *(_OWORD *)&v42[7] = v39;
    *(_DWORD *)&v42[23] = v40;
    v15 = WTF::fastMalloc((WTF *)0x50);
    *(_QWORD *)v15 = &off_1E34C4C38;
    *(_QWORD *)(v15 + 8) = v2;
    *(_QWORD *)(v15 + 16) = v14;
    if (v14)
      os_retain(v14);
    *(_OWORD *)(v15 + 24) = *(_OWORD *)v43;
    *(_BYTE *)(v15 + 40) = v43[16];
    *(_OWORD *)(v15 + 48) = *(_OWORD *)&v42[7];
    *(_DWORD *)(v15 + 64) = *(_DWORD *)&v42[23];
    *(_QWORD *)(v15 + 72) = v8;
    WTF::RunLoop::dispatch();
    *(_QWORD *)&v31 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v14)
      os_release(v14);
    v16 = object;
    if (object)
    {
      os_retain(object);
      v31 = v37;
      v32 = v38;
      *(_OWORD *)&v43[7] = v39;
      v44 = v40;
      if (object)
        os_release(object);
    }
    else
    {
      v31 = v37;
      v32 = v38;
      *(_OWORD *)&v43[7] = v39;
      v44 = v40;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = v35;
  v35 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v10);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16) + 8;
  LOBYTE(object) = 0;
  v41 = 0;
  if (!v11)
    goto LABEL_27;
  object = v16;
  if (v16)
  {
    os_retain(v16);
    v37 = v31;
    v38 = v32;
    v39 = *(_OWORD *)&v43[7];
    v40 = v44;
    v41 = 1;
    WebKit::NetworkCache::Storage::encodeRecord((uint64_t)v42, v2, v18);
    os_release(v16);
  }
  else
  {
    v37 = v31;
    v38 = v32;
    v39 = *(_OWORD *)&v43[7];
    v40 = v44;
    v41 = 1;
    WebKit::NetworkCache::Storage::encodeRecord((uint64_t)v42, v2, v18);
  }
  v19 = 0;
LABEL_28:
  v20 = WebKit::NetworkCache::IOChannel::open((uint64_t *)&v35, (uint64_t)&v33, 2);
  v21 = *(_QWORD *)&v42[16];
  v22 = (unsigned int *)v35;
  v23 = WTF::WorkQueue::main(v20);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v25 = off_1E34C4D78;
  v25[1] = v2;
  v25[2] = v24;
  v25[3] = v21;
  v30 = v25;
  WebKit::NetworkCache::IOChannel::write((uint64_t)v22, 0, (NSObject **)v42, v23, (uint64_t *)&v30);
  if (v30)
    (*(void (**)(_QWORD *))(*v30 + 8))(v30);
  if (v22)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v22, v26);
  if (*(_QWORD *)v42)
    os_release(*(void **)v42);
  if (v16)
    v27 = v19;
  else
    v27 = 1;
  if ((v27 & 1) == 0)
    os_release(v16);
  v28 = v33;
  v33 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::dispatchWriteOperation(std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>)::$_0::operator() const(void)::{lambda(int)#1},void,int>::call(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;

  v3 = (unsigned int *)a1[2];
  v4 = a1[1];
  *(_QWORD *)(v4 + 48) += a1[3];
  return WebKit::NetworkCache::Storage::finishWriteOperation((unsigned int *)v4, v3, a2);
}

_QWORD *WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>>(WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  *a1 = off_1E34C4DA0;
  v3 = a1[22];
  a1[22] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>>(WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;

  *a1 = off_1E34C4DA0;
  v3 = a1[22];
  a1[22] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)(a1 + 1), a2);
  return WTF::fastFree((WTF *)a1, v4);
}

WebKit::NetworkCache::Storage::Record *WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul>>(WTF::Deque<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,0ul> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  WTF::StringImpl *v10;
  WebKit::NetworkCache::Storage::Record *result;
  WTF *v12;
  void *v13;
  WebKit::NetworkCache::Storage::Record *v14;

  v2 = a1 + 8;
  v3 = (uint64_t *)(a1 + 176);
  v4 = WTF::fastMalloc((WTF *)0xA8);
  *(_QWORD *)(WebKit::NetworkCache::Key::Key(v4, v2) + 72) = *(_QWORD *)(a1 + 80);
  v5 = *(void **)(a1 + 88);
  *(_QWORD *)(v4 + 80) = v5;
  if (v5)
    os_retain(v5);
  v6 = *(_OWORD *)(a1 + 96);
  *(_BYTE *)(v4 + 104) = *(_BYTE *)(a1 + 112);
  *(_OWORD *)(v4 + 88) = v6;
  v7 = *(void **)(a1 + 120);
  *(_QWORD *)(v4 + 112) = v7;
  if (v7)
    os_retain(v7);
  v8 = *(_OWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 136) = *(_BYTE *)(a1 + 144);
  *(_OWORD *)(v4 + 120) = v8;
  v9 = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(v4 + 157) = *(_QWORD *)(a1 + 165);
  *(_OWORD *)(v4 + 144) = v9;
  v14 = (WebKit::NetworkCache::Storage::Record *)v4;
  WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(v3, &v14);
  result = v14;
  v14 = 0;
  if (result)
  {
    WebKit::NetworkCache::Storage::Record::~Record(result, v10);
    return (WebKit::NetworkCache::Storage::Record *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::CallableWrapper(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  __int128 v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = off_1E34C4DC8;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 72) = a2[8];
  *(_OWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 80) = a2[9];
  v10 = (void *)a2[10];
  *(_QWORD *)(a1 + 88) = v10;
  if (v10)
    os_retain(v10);
  v11 = *(_OWORD *)(a2 + 11);
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 104);
  *(_OWORD *)(a1 + 96) = v11;
  v12 = (void *)a2[14];
  *(_QWORD *)(a1 + 120) = v12;
  if (v12)
    os_retain(v12);
  v13 = *(_OWORD *)(a2 + 15);
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 136);
  *(_OWORD *)(a1 + 128) = v13;
  v14 = *((_OWORD *)a2 + 9);
  *(_QWORD *)(a1 + 165) = *(uint64_t *)((char *)a2 + 157);
  *(_OWORD *)(a1 + 152) = v14;
  v15 = a2[21];
  a2[21] = 0;
  *(_QWORD *)(a1 + 176) = v15;
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;

  *a1 = off_1E34C4DC8;
  v3 = a1[22];
  a1[22] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;

  *a1 = off_1E34C4DC8;
  v3 = a1[22];
  a1[22] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)(a1 + 1), a2);
  return WTF::fastFree((WTF *)a1, v4);
}

WebKit::NetworkCache::Storage::Record *WTF::Detail::CallableWrapper<BOOL WebKit::NetworkCache::retrieveFromMemory<WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits>>(WTF::HashSet<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::WriteOperation>>,WTF::HashTableTraits> const&,WebKit::NetworkCache::Key const&,WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  WTF::StringImpl *v10;
  WebKit::NetworkCache::Storage::Record *result;
  WTF *v12;
  void *v13;
  WebKit::NetworkCache::Storage::Record *v14;

  v2 = a1 + 8;
  v3 = (uint64_t *)(a1 + 176);
  v4 = WTF::fastMalloc((WTF *)0xA8);
  *(_QWORD *)(WebKit::NetworkCache::Key::Key(v4, v2) + 72) = *(_QWORD *)(a1 + 80);
  v5 = *(void **)(a1 + 88);
  *(_QWORD *)(v4 + 80) = v5;
  if (v5)
    os_retain(v5);
  v6 = *(_OWORD *)(a1 + 96);
  *(_BYTE *)(v4 + 104) = *(_BYTE *)(a1 + 112);
  *(_OWORD *)(v4 + 88) = v6;
  v7 = *(void **)(a1 + 120);
  *(_QWORD *)(v4 + 112) = v7;
  if (v7)
    os_retain(v7);
  v8 = *(_OWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 136) = *(_BYTE *)(a1 + 144);
  *(_OWORD *)(v4 + 120) = v8;
  v9 = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(v4 + 157) = *(_QWORD *)(a1 + 165);
  *(_OWORD *)(v4 + 144) = v9;
  v14 = (WebKit::NetworkCache::Storage::Record *)v4;
  WTF::CompletionHandler<BOOL ()(std::unique_ptr<WebKit::NetworkCache::Storage::Record>,WebKit::NetworkCache::Storage::Timings const&)>::operator()(v3, &v14);
  result = v14;
  v14 = 0;
  if (result)
  {
    WebKit::NetworkCache::Storage::Record::~Record(result, v10);
    return (WebKit::NetworkCache::Storage::Record *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t i;
  WTF **v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  WTF **v21;
  WTF *v22;
  WTF *v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WTF **)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != (WTF *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (WTF **)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
            std::default_delete<WebKit::NetworkCache::Storage::TraverseOperation>::operator()[abi:sn180100](v23, v8);
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::traverseWithinRootPath(WTF::String const&,WTF::String const&,WTF::OptionSet<WebKit::NetworkCache::Storage::TraverseFlag>,WTF::Function<void ()(WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E34C4DF0;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::traverseWithinRootPath(WTF::String const&,WTF::String const&,WTF::OptionSet<WebKit::NetworkCache::Storage::TraverseFlag>,WTF::Function<void ()(WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E34C4DF0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::traverseWithinRootPath(WTF::String const&,WTF::String const&,WTF::OptionSet<WebKit::NetworkCache::Storage::TraverseFlag>,WTF::Function<void ()(WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&)> &&)::$_0,void>::call(_QWORD *a1)
{
  WTF::FileSystemImpl *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  WTF::RunLoop *v6;
  unsigned __int8 *v7;
  uint64_t i;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  int v15;

  v2 = (WTF::FileSystemImpl *)(a1 + 3);
  v4 = a1[1];
  v3 = a1[2];
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = off_1E34C4E18;
  v5[1] = v4;
  v5[2] = v3;
  v14 = (uint64_t)v5;
  WebKit::NetworkCache::traverseRecordsFiles(v2, v3 + 8, (uint64_t)&v14);
  v6 = (WTF::RunLoop *)v14;
  v14 = 0;
  if (v6)
    v6 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned __int8 *)(a1[2] + 32);
  if (__ldaxr(v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  v6 = (WTF::RunLoop *)MEMORY[0x19AEABB3C](v7);
LABEL_7:
  for (i = a1[2];
        *(_DWORD *)(i + 36);
        v6 = (WTF::RunLoop *)WTF::Condition::waitUntilUnchecked<WTF::Lock>(i + 33, (unsigned __int8 *)(i + 32), (WTF::TimeWithDynamicClockType *)&v14))
  {
    v14 = 0x7FF0000000000000;
    v15 = 0;
  }
  v10 = __ldxr(v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v7))
LABEL_13:
    v6 = (WTF::RunLoop *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  WTF::RunLoop::main(v6);
  v11 = a1[2];
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34C4E68;
  v12[1] = v4;
  v12[2] = v11;
  v14 = (uint64_t)v12;
  WTF::RunLoop::dispatch();
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::traverseWithinRootPath(WTF::String const&,WTF::String const&,WTF::OptionSet<WebKit::NetworkCache::Storage::TraverseFlag>,WTF::Function<void ()(WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&)> &&)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)#1},void,WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&>::call(WTF::StringImpl *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  const WTF::String *v7;
  uint64_t v8;
  double v9;
  const WTF::String *v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  double v15;
  double v16;
  double v17;
  WTF::WallTime *v18;
  double v19;
  double v20;
  double v21;
  BOOL v23;
  double v24;
  unsigned __int8 *v25;
  WTF::StringImpl *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  unsigned int *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;

  if ((a5 & 1) != 0)
    return result;
  v5 = result;
  v6 = *((_QWORD *)result + 1);
  WTF::FileSystemImpl::pathByAppendingComponent();
  v8 = *((_QWORD *)v5 + 2);
  if ((*(_BYTE *)(v8 + 16) & 1) != 0)
  {
    v15 = WebKit::NetworkCache::fileTimes((WebKit::NetworkCache *)&v36, v7);
    v17 = v16;
    WTF::WallTime::now(v18);
    v20 = v19 - v15;
    v21 = v17 - v15;
    v23 = v17 - v15 <= v20 && v21 >= 0.0 && v20 > 0.0;
    v24 = v21 / v20;
    if (v23)
      v9 = v24;
    else
      v9 = 0.0;
    v8 = *((_QWORD *)v5 + 2);
    if ((*(_BYTE *)(v8 + 16) & 2) != 0)
      goto LABEL_4;
LABEL_20:
    v13 = 0;
    goto LABEL_23;
  }
  v9 = -1.0;
  if ((*(_BYTE *)(v8 + 16) & 2) == 0)
    goto LABEL_20;
LABEL_4:
  WebKit::NetworkCache::blobPathForRecordPath((WebKit::NetworkCache *)&v37, v36);
  v12 = WTF::FileSystemImpl::hardLinkCount((WTF::FileSystemImpl *)&v37, v10) - 1;
  if ((_BYTE)v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v8 = *((_QWORD *)v5 + 2);
LABEL_23:
  v25 = (unsigned __int8 *)(v8 + 32);
  if (__ldaxr((unsigned __int8 *)(v8 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v25))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEABB3C](v25);
LABEL_27:
  ++*(_DWORD *)(*((_QWORD *)v5 + 2) + 36);
  v27 = WebKit::NetworkCache::IOChannel::open((uint64_t *)&v35, (uint64_t)&v36, 0);
  v28 = v35;
  v29 = WTF::WorkQueue::main(v27);
  v30 = *((_QWORD *)v5 + 2);
  v31 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v31 = off_1E34C4E40;
  *(_QWORD *)(v31 + 8) = v6;
  *(_QWORD *)(v31 + 16) = v30;
  *(double *)(v31 + 24) = v9;
  *(_DWORD *)(v31 + 32) = v13;
  v37 = (WTF::StringImpl *)v31;
  WebKit::NetworkCache::IOChannel::read((uint64_t)v28, 0, 0xFFFFFFFFFFFFFFFFLL, v29, (uint64_t *)&v37);
  if (v37)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v37 + 8))(v37);
  v33 = *((_QWORD *)v5 + 2);
  if (*(_DWORD *)(v33 + 36) >= 6u)
  {
    do
    {
      v37 = (WTF::StringImpl *)0x7FF0000000000000;
      v38 = 0;
      WTF::Condition::waitUntilUnchecked<WTF::Lock>(v33 + 33, (unsigned __int8 *)(v33 + 32), (WTF::TimeWithDynamicClockType *)&v37);
    }
    while (*(_DWORD *)(v33 + 36) > 5u);
  }
  if (v28)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v28, v32);
  v34 = __ldxr(v25);
  if (v34 != 1)
  {
    __clrex();
    goto LABEL_37;
  }
  if (__stlxr(0, v25))
LABEL_37:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::traverseWithinRootPath(WTF::String const&,WTF::String const&,WTF::OptionSet<WebKit::NetworkCache::Storage::TraverseFlag>,WTF::Function<void ()(WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&)> &&)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)#1}::operator() const(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)::{lambda(WebKit::NetworkCache::Data &,int)#1},void,WebKit::NetworkCache::Data,int>::call(uint64_t a1, dispatch_data_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned __int8 *v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF *v17;
  _QWORD v18[2];
  int v19;
  WTF::StringImpl *v20;
  void *object;
  __int128 v22;
  char v23;
  _BYTE v24[72];
  uint64_t v25;
  void *v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  int v34;
  char v35;
  _BYTE v36[8];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v37 = 0u;
  v38 = 0u;
  v39 = 0;
  v40 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  object = 0;
  v22 = 0uLL;
  v23 = 0;
  if (WebKit::NetworkCache::decodeRecordHeader(a2, (uint64_t)v36, (uint64_t)&object, v3 + 28))
  {
    WebKit::NetworkCache::Key::Key((uint64_t)v24, (uint64_t)&v37);
    v25 = v39;
    v26 = object;
    if (object)
      os_retain(object);
    v27 = v22;
    v28 = v23;
    v30 = 0;
    v31 = 0;
    v29 = 0;
    v32 = 0;
    v33 = v41;
    v34 = v42;
    v35 = 1;
    v18[0] = v43;
    v4 = *(_QWORD *)(a1 + 24);
    v19 = *(_DWORD *)(a1 + 32);
    v18[1] = v4;
    WTF::SHA1::hexDigest();
    WTF::String::fromUTF8();
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v5);
      else
        --*(_DWORD *)v17;
    }
    (*(void (**)(_QWORD, _BYTE *, _QWORD *))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 24) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v24, v18);
    v7 = v20;
    v20 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    WebKit::NetworkCache::Storage::Record::~Record((WebKit::NetworkCache::Storage::Record *)v24, v6);
  }
  v8 = (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 32);
  if (__ldaxr(v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEABB3C](v8);
LABEL_17:
  v10 = *(_QWORD *)(a1 + 16);
  --*(_DWORD *)(v10 + 36);
  WTF::Condition::notifyOne((WTF::Condition *)(v10 + 33));
  v12 = __ldxr(v8);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, v8))
LABEL_21:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (object)
    os_release(object);
  v13 = (WTF::StringImpl *)*((_QWORD *)&v38 + 1);
  *((_QWORD *)&v38 + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)v38;
  *(_QWORD *)&v38 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)&v37 + 1);
  *((_QWORD *)&v37 + 1) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = (WTF::StringImpl *)v37;
  *(_QWORD *)&v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::traverseWithinRootPath(WTF::String const&,WTF::String const&,WTF::OptionSet<WebKit::NetworkCache::Storage::TraverseFlag>,WTF::Function<void ()(WebKit::NetworkCache::Storage::Record const*,WebKit::NetworkCache::Storage::RecordInfo const&)> &&)::$_0::operator() const(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD v25[2];
  int v26;
  WTF::StringImpl *v27;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v27 = 0;
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  (*(void (**)(_QWORD, _QWORD, _QWORD *))(**(_QWORD **)(v2 + 24) + 16))(*(_QWORD *)(v2 + 24), 0, v25);
  v5 = v27;
  v27 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  do
    v6 = __ldaxr((unsigned int *)v3);
  while (__stlxr(v6 + 1, (unsigned int *)v3));
  v7 = *(_QWORD *)(v3 + 304);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_DWORD *)(v7 - 8);
    v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v7 + 8 * v13);
    if (v14 != v8)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v7 + 8 * v13);
        ++v15;
        if (v14 == v8)
          goto LABEL_13;
      }
      v13 = *(unsigned int *)(v7 - 4);
    }
LABEL_13:
    if (v13 != *(_DWORD *)(v7 - 4))
    {
      v16 = (uint64_t *)(v3 + 304);
      v17 = *(WTF **)(v7 + 8 * v13);
      *(_QWORD *)(v7 + 8 * v13) = -1;
      if (v17)
        std::default_delete<WebKit::NetworkCache::Storage::TraverseOperation>::operator()[abi:sn180100](v17, v4);
      ++*(_DWORD *)(*v16 - 16);
      v18 = *v16;
      if (*v16)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v16;
      if (*v16)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkCache::Storage::TraverseOperation>>>::rehash((uint64_t *)(v3 + 304), v22 >> 1);
      }
    }
  }
  return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref((unsigned int *)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::clear(WTF::String &&,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;

  *a1 = &off_1E34C4E90;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::clear(WTF::String &&,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;

  *(_QWORD *)this = &off_1E34C4E90;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v5);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::clear(WTF::String &&,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  const WTF::String *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  WTF::StringImpl *result;
  _QWORD *v11;
  WTF::StringImpl *v12;

  v2 = a1[1];
  WTF::String::isolatedCopy();
  v3 = a1[3];
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34C4EB8;
  v4[1] = v3;
  v11 = v4;
  WebKit::NetworkCache::traverseRecordsFiles((WTF::FileSystemImpl *)&v12, (uint64_t)(a1 + 5), (uint64_t)&v11);
  v6 = v11;
  v11 = 0;
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  WebKit::NetworkCache::deleteEmptyRecordsDirectories((WebKit::NetworkCache *)&v12, v5);
  v7 = WebKit::NetworkCache::BlobStorage::synchronize((WebKit::NetworkCache::BlobStorage *)(v2 + 336));
  WTF::RunLoop::main(v7);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v11, a1 + 4);
  WTF::RunLoop::dispatch();
  v9 = v11;
  v11 = 0;
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::clear(WTF::String &&,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(WTF::String const&,$_0,$_0,BOOL,$_0)#1},void,$_0,$_0,$_0,BOOL,$_0>::call(uint64_t a1)
{
  const WTF::String *v2;
  double v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WTF::FileSystemImpl::pathByAppendingComponent();
  if (*(double *)(a1 + 8) <= -INFINITY
    || (WebKit::NetworkCache::fileTimes((WebKit::NetworkCache *)&v5, v2), v3 >= *(double *)(a1 + 8)))
  {
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v5, v2);
  }
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  *a1 = &off_1E34C4EE0;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  *(_QWORD *)this = &off_1E34C4EE0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF::RunLoop *v3;
  WTF::RunLoop *v4;
  uint64_t v5;
  WTF::RunLoop *v6;
  WTF::StringImpl *v7;
  WTF::RunLoop *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::RunLoop *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v2 = *(_QWORD *)(a1 + 8);
  WTF::String::isolatedCopy();
  v12 = 0;
  v3 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E34C4F08;
  *((_QWORD *)v3 + 1) = v2;
  v11 = v3;
  WebKit::NetworkCache::traverseRecordsFiles((WTF::FileSystemImpl *)&v13, (uint64_t)&v12, (uint64_t)&v11);
  v4 = v11;
  v11 = 0;
  if (v4)
    v4 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v4 + 8))(v4);
  WTF::RunLoop::main(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E34C4F30;
  *((_QWORD *)v6 + 1) = v2;
  *((_QWORD *)v6 + 2) = v5;
  v11 = v6;
  WTF::RunLoop::dispatch();
  v8 = v11;
  v11 = 0;
  if (v8)
    (*(void (**)(WTF::RunLoop *))(*(_QWORD *)v8 + 8))(v8);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0::operator()(void)::{lambda(WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&)#1},void,WTF::String const&,WTF::String const&,WTF::String const&,BOOL,WTF::String const&>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  const WTF::String *v5;
  double v6;
  double v7;
  double v8;
  const WTF::String *v9;
  WTF::WallTime *v10;
  int v11;
  unsigned __int8 v12;
  uint64_t v13;
  WTF *v14;
  double v15;
  double v16;
  double v17;
  BOOL v19;
  double v20;
  double v21;
  unsigned int v22;
  const WTF::String *v23;
  double v24;
  const WTF::String *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  if ((a5 & 1) == 0)
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    WebKit::NetworkCache::blobPathForRecordPath((WebKit::NetworkCache *)&v28, v29);
    v6 = WebKit::NetworkCache::fileTimes((WebKit::NetworkCache *)&v29, v5);
    v8 = v7;
    v10 = (WTF::WallTime *)WTF::FileSystemImpl::hardLinkCount((WTF::FileSystemImpl *)&v28, v9);
    v11 = (int)v10;
    v13 = v12;
    v14 = (WTF *)WTF::WallTime::now(v10);
    v16 = v15 - v6;
    v17 = v8 - v6;
    v19 = v8 - v6 <= v16 && v17 >= 0.0 && v16 > 0.0;
    v20 = v17 / v16 * 1.1;
    if (!v19)
      v20 = 0.0;
    if (v20 <= 1.0)
      v21 = (1.0 - v20) * 0.33;
    else
      v21 = 0.0;
    if (v13)
    {
      v22 = v11 - 1;
      if (v11 != 1)
      {
        if (v22 >= 5)
          v22 = 5;
        v21 = v21 / (double)v22;
      }
    }
    WTF::cryptographicallyRandomUnitInterval(v14);
    if (v24 < v21)
    {
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v29, v23);
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v28, v25);
    }
    v26 = v28;
    v28 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v23);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v29;
    v29 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v23);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  *a1 = &off_1E34C4F30;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  *(_QWORD *)this = &off_1E34C4F30;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::Storage,(WTF::DestructionThread)1>::deref(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::shrink(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v1 + 81) = 0;
  return WebKit::NetworkCache::Storage::synchronize(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::deleteOldVersions(void)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34C4F58;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::deleteOldVersions(void)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C4F58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::deleteOldVersions(void)::$_0,void>::call(uint64_t a1)
{
  WTF::FileSystemImpl *v1;
  _QWORD *v2;
  _QWORD *v4;

  v1 = (WTF::FileSystemImpl *)(a1 + 8);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34C4F80;
  v2[1] = v1;
  v4 = v2;
  WebKit::NetworkCache::traverseDirectory(v1, (const WTF::String *)&v4);
  return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
}

unint64_t WTF::Detail::CallableWrapper<WebKit::NetworkCache::Storage::deleteOldVersions(void)::$_0::operator()(void)::{lambda(WTF::String const&,WebKit::NetworkCache::DirectoryEntryType)#1},void,WTF::String const&,WebKit::NetworkCache::DirectoryEntryType>::call(unint64_t result, unint64_t *a2, int a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  const WTF::String *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (a3)
    return result;
  result = *a2;
  if (!*a2)
    return result;
  result = WTF::StringImpl::startsWith();
  if (!(_DWORD)result)
    return result;
  v4 = *a2;
  if (!v4 || (v5 = *(unsigned int *)(v4 + 4), v5 < 9))
  {
    v7 = 0x100000000;
    v9 = "";
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (v5 - 8);
  v8 = v5 - 8;
  if ((*(_BYTE *)(v4 + 16) & 4) == 0)
  {
    if (v8 >= v7)
    {
      v9 = (const char *)(v6 + 16);
      goto LABEL_9;
    }
LABEL_19:
    __break(1u);
    return result;
  }
  if (v8 < v7)
    goto LABEL_19;
  v9 = (const char *)(v6 + 8);
  v7 |= 0x100000000uLL;
LABEL_9:
  result = WTF::parseInteger<unsigned int>((uint64_t)v9, v7);
  if (HIDWORD(result))
  {
    if (result <= 0x10)
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::deleteNonEmptyDirectory((WTF::FileSystemImpl *)&v12, v10);
      result = (unint64_t)v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::parseInteger<unsigned int,unsigned char>(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v20;
  int v21;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  if (!a1 || !a2)
    return v3 | v4 | v2;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(a1 + v5);
    if ((v6 - 9) >= 5 && v6 != 32)
      break;
    if (a2 == ++v5)
      goto LABEL_36;
  }
  if (v6 == 43)
  {
    if (a2 - 1 == v5)
      goto LABEL_36;
    v8 = ~v5 + a2;
    v7 = (unsigned __int8 *)(a1 + v5 + 1);
    v6 = *v7;
  }
  else
  {
    v7 = (unsigned __int8 *)(a1 + v5);
    v8 = a2 - v5;
  }
  if ((v6 - 48) > 9)
  {
LABEL_36:
    v3 = 0;
    v2 = 0;
    v4 = 0;
    return v3 | v4 | v2;
  }
  v9 = 0;
  v10 = 0;
  while (1)
  {
    v11 = v6 - 48;
    v12 = 10 * v9;
    if ((v12 & 0xFFFFFFFF00000000) == 0)
      v9 *= 10;
    v13 = __CFADD__(v9, v11);
    v14 = v9 + v11;
    v15 = v13;
    if (!v13)
      v9 = v14;
    if ((v12 & 0xFFFFFFFF00000000) != 0)
      v16 = 1;
    else
      v16 = v15;
    if (v16)
      v10 = 1;
    if (!--v8)
      break;
    v17 = *++v7;
    v6 = v17;
    v18 = v17 - 48;
    if ((v17 - 48) > 9 || v18 >= 0xA)
    {
      if (!v10)
      {
        v20 = 0;
        while (1)
        {
          v21 = v7[v20];
          if ((v21 - 9) >= 5 && v21 != 32)
            break;
          if (v8 == ++v20)
            goto LABEL_38;
        }
      }
      goto LABEL_36;
    }
  }
  if (v10)
    goto LABEL_36;
LABEL_38:
  v4 = v9 & 0xFFFFFF00;
  v2 = v9;
  v3 = 0x100000000;
  return v3 | v4 | v2;
}

uint64_t WTF::parseInteger<unsigned int,char16_t>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned __int16 *v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  if (!a1 || !a2)
    return v3 | v4 | v2;
  v5 = (unsigned __int16 *)(a1 + 2);
  while (1)
  {
    v6 = *(v5 - 1);
    if ((v6 - 9) >= 5 && v6 != 32)
      break;
    ++v5;
    if (!--a2)
      goto LABEL_41;
  }
  if (v6 == 43)
  {
    if (!--a2)
    {
LABEL_41:
      v3 = 0;
      v2 = 0;
      v4 = 0;
      return v3 | v4 | v2;
    }
    v6 = *v5;
  }
  else
  {
    --v5;
  }
  if ((v6 - 48) > 9)
    goto LABEL_41;
  v2 = 0;
  v7 = 0;
  while (1)
  {
    v8 = v6 - 48;
    v9 = 10 * v2;
    if ((v9 & 0xFFFFFFFF00000000) == 0)
      v2 *= 10;
    v10 = __CFADD__(v2, v8);
    v11 = v2 + v8;
    v12 = v10;
    if (!v10)
      v2 = v11;
    if ((v9 & 0xFFFFFFFF00000000) != 0)
      v13 = 1;
    else
      v13 = v12;
    if (v13)
      v7 = 1;
    if (!--a2)
      break;
    v14 = v5[1];
    ++v5;
    v6 = v14;
    v15 = v14 - 48;
    if ((v14 - 48) > 9 || v15 >= 0xA)
    {
      if (!v7)
      {
        v17 = 0;
        while (1)
        {
          v18 = v5[v17];
          if ((v18 - 9) >= 5 && v18 != 32)
            break;
          if (a2 == ++v17)
            goto LABEL_40;
        }
      }
      goto LABEL_41;
    }
  }
  if (v7)
    goto LABEL_41;
LABEL_40:
  v4 = v2 & 0xFFFFFF00;
  v2 = v2;
  v3 = 0x100000000;
  return v3 | v4 | v2;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::PrefetchCache::*&)(void),WebKit::PrefetchCache*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::take(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  if (*a2)
    v3 += 48 * *(unsigned int *)(v3 - 4);
  if (v3 == a3)
  {
    *a1 = 0;
    return;
  }
  v4 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  *a1 = v4;
  if (*a2)
  {
    v5 = *a2 + 48 * *(unsigned int *)(*a2 - 4);
    if (v5 == a3)
      return;
  }
  else
  {
    if (!a3)
      return;
    v5 = 0;
  }
  if (v5 != a3)
    WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::remove(a2, a3);
}

void WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::remove(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>((WTF::StringImpl **)a2, (WTF::StringImpl *)a2);
  v6 = *(_QWORD **)(a2 + 40);
  v5 = (_QWORD *)(a2 + 40);
  v4 = v6;
  *v5 = 0;
  if (v6)
    std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v5, v4);
  ++*(_DWORD *)(*a1 - 16);
  v7 = *a1;
  if (*a1)
    v8 = *(_DWORD *)(v7 - 12) - 1;
  else
    v8 = -1;
  *(_DWORD *)(v7 - 12) = v8;
  v9 = *a1;
  if (*a1)
  {
    v10 = 6 * *(_DWORD *)(v9 - 12);
    v11 = *(_DWORD *)(v9 - 4);
    if (v10 < v11 && v11 >= 9)
      WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(a1, v11 >> 1, 0);
  }
}

WTF **WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF **v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  WTF **v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF **result;
  uint64_t v34;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(48 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v9 = 0;
    v10 = 0;
    v5 = v5;
    v34 = v5;
    do
    {
      v11 = (WTF::StringImpl **)(v4 + 48 * v9);
      if (*v11 != (WTF::StringImpl *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>((WTF **)(v4 + 48 * v9)))
        {
          v12 = v4 + 48 * v9;
          v14 = *(WTF::StringImpl **)(v12 + 40);
          v13 = (_QWORD *)(v12 + 40);
          v8 = v14;
          *v13 = 0;
          if (v14)
            std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v13, v8);
          v15 = *v11;
          *v11 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v8);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = *((_DWORD *)*v11 + 4);
          if (v18 >= 0x100)
            v19 = v18 >> 8;
          else
            v19 = WTF::StringImpl::hashSlowCase(*v11);
          v20 = 0;
          do
          {
            v21 = v19 & v17;
            v22 = (WTF **)(v16 + 48 * (v19 & v17));
            v23 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v22);
            v19 = ++v20 + v21;
          }
          while (!v23);
          v24 = v16 + 48 * v21;
          v27 = *(WTF::StringImpl **)(v24 + 40);
          v26 = (_QWORD *)(v24 + 40);
          v25 = v27;
          *v26 = 0;
          if (v27)
            std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v26, v25);
          v28 = *v22;
          *v22 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v25);
            else
              *(_DWORD *)v28 -= 2;
          }
          WTF::URL::URL((uint64_t)v22, (uint64_t *)(v4 + 48 * v9));
          v29 = v4 + 48 * v9;
          v31 = *(_QWORD *)(v29 + 40);
          v30 = (WTF::StringImpl **)(v29 + 40);
          *v30 = 0;
          *v26 = v31;
          v8 = *v30;
          *v30 = 0;
          if (v8)
            std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v30, v8);
          v32 = *v11;
          *v11 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v8);
            else
              *(_DWORD *)v32 -= 2;
          }
          v5 = v34;
          if (v11 == a3)
            v10 = v22;
        }
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>,WTF::URL>(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  unsigned int v5;
  unsigned int v6;
  int v7;
  WTF **v8;
  unsigned int v9;
  const WTF::StringImpl *v10;
  int v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  v9 = v7 & v5;
  v8 = (WTF **)(v2 + 48 * (v7 & v5));
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v8) & 1) != 0)
  {
LABEL_11:
    if (*a1)
      return *a1 + 48 * *(unsigned int *)(*a1 - 4);
    else
      return 0;
  }
  else
  {
    v11 = 1;
    while (*v8 == (WTF *)-1 || (WTF::equal(*v8, *a2, v10) & 1) == 0)
    {
      v9 = (v9 + v11) & v5;
      v8 = (WTF **)(v2 + 48 * v9);
      ++v11;
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v8))
        goto LABEL_11;
    }
  }
  return (uint64_t)v8;
}

WTF **WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::rehash(a1, v5, a2);
}

void WTF::HashMapTranslator<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v6;
  v7 = *a3;
  *a3 = 0;
  v10 = *(_QWORD **)(a1 + 40);
  v9 = (_QWORD *)(a1 + 40);
  v8 = v10;
  *v9 = v7;
  if (v10)
    std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v9, v8);
}

WTF::StringImpl *WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::expandCapacity(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *result;
  void *v10;

  v1 = *(unsigned int *)(a1 + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x5555555)
  {
    __break(0xC471u);
    JUMPOUT(0x19718CBCCLL);
  }
  v4 = *(WTF::StringImpl **)(a1 + 16);
  v5 = 48 * v2 + 48;
  v6 = WTF::fastMalloc((WTF *)(48 * v2 + 48));
  *(_DWORD *)(a1 + 24) = (v5 & 0xFFFFFFF0) / 0x30;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 <= v7)
  {
    result = WTF::VectorMover<false,std::tuple<WTF::URL,WTF::WallTime>>::move((WTF::StringImpl *)((char *)v4 + 48 * *(_QWORD *)a1), (uint64_t *)v4 + 6 * v7, v6 + 48 * *(_QWORD *)a1);
    if (!v4)
      return result;
  }
  else
  {
    WTF::VectorMover<false,std::tuple<WTF::URL,WTF::WallTime>>::move(v4, (uint64_t *)v4 + 6 * v7, v6);
    v8 = *(_QWORD *)a1 - v1 + *(unsigned int *)(a1 + 24);
    result = WTF::VectorMover<false,std::tuple<WTF::URL,WTF::WallTime>>::move((WTF::StringImpl *)((char *)v4 + 48 * *(_QWORD *)a1), (uint64_t *)v4 + 6 * v1, *(_QWORD *)(a1 + 16) + 48 * v8);
    *(_QWORD *)a1 = v8;
    if (!v4)
      return result;
  }
  if (*(WTF::StringImpl **)(a1 + 16) == v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return (WTF::StringImpl *)WTF::fastFree(v4, v10);
}

WTF::StringImpl *WTF::VectorMover<false,std::tuple<WTF::URL,WTF::WallTime>>::move(WTF::StringImpl *result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  WTF::StringImpl *v6;

  if (result != (WTF::StringImpl *)a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      WTF::URL::URL(a3, v5);
      *(_QWORD *)(a3 + 40) = v5[5];
      result = (WTF::StringImpl *)*v5;
      *v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 48;
      v5 += 6;
    }
    while (v5 != a2);
  }
  return result;
}

void WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::inlineSet<WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry>>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  WTF **v13;
  const WTF::StringImpl *v14;
  WTF **v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = v11 & v9;
  v13 = (WTF **)(v8 + 48 * v12);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v13) & 1) == 0)
  {
    v30 = a3;
    v15 = 0;
    v16 = 1;
    do
    {
      if (*v13 == (WTF *)-1)
      {
        v15 = v13;
      }
      else if (WTF::equal(*v13, *a2, v14))
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 4);
        else
          v24 = 0;
        *(_QWORD *)a4 = v13;
        *(_QWORD *)(a4 + 8) = v23 + 48 * v24;
        *(_BYTE *)(a4 + 16) = 0;
        v25 = v8 + 48 * v12;
        v26 = *v30;
        *v30 = 0;
        v29 = *(_QWORD **)(v25 + 40);
        v27 = (uint64_t *)(v25 + 40);
        v28 = v29;
        *v27 = v26;
        if (v29)
          std::default_delete<WebKit::PrefetchCache::Entry>::operator()[abi:sn180100]((uint64_t)v27, v28);
        return;
      }
      v12 = ((_DWORD)v12 + v16) & v9;
      v13 = (WTF **)(v8 + 48 * v12);
      ++v16;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v13));
    a3 = v30;
    if (v15)
    {
      *((_OWORD *)v15 + 1) = 0u;
      *((_OWORD *)v15 + 2) = 0u;
      *(_OWORD *)v15 = 0u;
      --*(_DWORD *)(*a1 - 16);
      v13 = v15;
    }
  }
  WTF::HashMapTranslator<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>::translate<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::URL const&,std::unique_ptr<WebKit::PrefetchCache::Entry>>((uint64_t)v13, (uint64_t)a2, a3);
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_24:
      v13 = WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::expand(a1, v13);
      v19 = *a1;
      if (*a1)
        LODWORD(v22) = *(_DWORD *)(v19 - 4);
      else
        LODWORD(v22) = 0;
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_24;
  }
  *(_QWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v19 + 48 * v22;
  *(_BYTE *)(a4 + 16) = 1;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned int v5;
  WebCore::SecurityOriginData *v6;
  int v7;
  char v8;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::computeHash<WebCore::ClientOrigin>(a2) & v4;
  v6 = (WebCore::SecurityOriginData *)(v2 + 88 * v5);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) != 0)
  {
LABEL_8:
    if (*a1)
      return *a1 + 88 * *(unsigned int *)(*a1 - 4);
    return 0;
  }
  v7 = 1;
  while (1)
  {
    WebCore::SecurityOriginData::isHashTableDeletedValue(v6);
    if ((v8 & 1) == 0 && WebCore::operator==() && (WebCore::operator==() & 1) != 0)
      return (uint64_t)v6;
    v5 = (v5 + v7) & v4;
    v6 = (WebCore::SecurityOriginData *)(v2 + 88 * v5);
    ++v7;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
      goto LABEL_8;
  }
}

uint64_t WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>>,std::pair<WTF::String,WTF::String>>(uint64_t result, uint64_t a2, const WTF::StringImpl **a3)
{
  _QWORD *v3;
  unsigned int v6;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  int v13;
  _DWORD *v14;

  v3 = (_QWORD *)result;
  if (!a2
    || (v6 = *(_DWORD *)(a2 - 8),
        v7 = WTF::PairHash<WTF::String,WTF::String>::hash(a3) & v6,
        v8 = (WTF **)(a2 + 24 * v7),
        result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v8, v9, v10), (result & 1) != 0))
  {
LABEL_7:
    v14 = 0;
  }
  else
  {
    v13 = 1;
    while (1)
    {
      if (*v8 != (WTF *)-1)
      {
        result = WTF::PairHash<WTF::String,WTF::String>::equal(v8, a3, v12);
        if ((result & 1) != 0)
          break;
      }
      v7 = ((_DWORD)v7 + v13) & v6;
      v8 = (WTF **)(a2 + 24 * v7);
      result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v8, v11, v12);
      ++v13;
      if ((result & 1) != 0)
        goto LABEL_7;
    }
    v14 = *(_DWORD **)(a2 + 24 * v7 + 16);
    if (v14)
      *v14 += 2;
  }
  *v3 = v14;
  return result;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  unsigned int v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v71;
  WTF::StringImpl **v72;
  WTF::StringImpl **v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(88 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 88 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v67 = v5;
    v68 = v4;
    do
    {
      v14 = (WTF::StringImpl **)(v4 + 88 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = *((_DWORD *)v15 + 4);
          v72 = v12;
          if (v20 >= 0x100)
            v21 = v20 >> 8;
          else
            v21 = WTF::StringImpl::hashSlowCase(v15);
          v22 = 0;
          do
          {
            v23 = v21 & v19;
            v24 = (WTF::StringImpl **)(v18 + 88 * (v21 & v19));
            v21 = ++v22 + (v21 & v19);
          }
          while (*v24);
          v25 = v18 + 88 * v23;
          v28 = *(WTF::StringImpl **)(v25 + 80);
          v27 = (WTF::StringImpl **)(v25 + 80);
          v26 = v28;
          *v27 = 0;
          if (v28)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v8);
            else
              *(_DWORD *)v26 -= 2;
          }
          v30 = *(v27 - 1);
          *(v27 - 1) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v8);
            else
              *(_DWORD *)v30 -= 2;
          }
          v73 = (WTF::StringImpl **)(v4 + 88 * v11);
          v40 = v18 + 88 * v23;
          v43 = *(_DWORD *)(v40 + 64);
          v42 = (_DWORD *)(v40 + 64);
          v41 = v43;
          if (v43 != -1)
            ((void (*)(char *, uint64_t))off_1E34C4700[v41])(&v78, v18 + 88 * v23 + 40);
          *v42 = -1;
          v44 = v18 + 88 * v23;
          v47 = *(_DWORD *)(v44 + 32);
          v46 = (_DWORD *)(v44 + 32);
          v45 = v47;
          if (v47 != -1)
            ((void (*)(char *, WTF::StringImpl **))off_1E34C4700[v45])(&v79, v27 - 9);
          *v46 = -1;
          v48 = *v24;
          *v24 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, v8);
            else
              *(_DWORD *)v48 -= 2;
          }
          v49 = *v73;
          *v73 = 0;
          *v24 = v49;
          v50 = v4 + 88 * v11;
          *((_BYTE *)v27 - 72) = 0;
          *v46 = -1;
          v71 = v50 + 8;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)(v27 - 9), v50 + 8);
          v51 = v18 + 88 * v23;
          v52 = v50 + 40;
          *(_BYTE *)(v51 + 40) = 0;
          *v42 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v51 + 40, v50 + 40);
          v54 = *(WTF::StringImpl **)(v50 + 72);
          v53 = (WTF::StringImpl **)(v50 + 72);
          *v53 = 0;
          v12 = v72;
          *(v27 - 1) = v54;
          v55 = v53[1];
          v53[1] = 0;
          *v27 = v55;
          v56 = v53[1];
          v53[1] = 0;
          v13 = v67;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
              WTF::StringImpl::destroy(v56, v8);
            else
              *(_DWORD *)v56 -= 2;
          }
          v57 = *v53;
          *v53 = 0;
          v4 = v68;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v8);
            else
              *(_DWORD *)v57 -= 2;
          }
          v58 = v68 + 88 * v11;
          v61 = *(_DWORD *)(v58 + 64);
          v60 = (_DWORD *)(v58 + 64);
          v59 = v61;
          if (v61 != -1)
            ((void (*)(char *, uint64_t))off_1E34C4700[v59])(&v76, v52);
          *v60 = -1;
          v62 = v68 + 88 * v11;
          v65 = *(_DWORD *)(v62 + 32);
          v64 = (_DWORD *)(v62 + 32);
          v63 = v65;
          if (v65 != -1)
            ((void (*)(char *, uint64_t))off_1E34C4700[v63])(&v77, v71);
          *v64 = -1;
          v66 = *v73;
          *v73 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2)
              WTF::StringImpl::destroy(v66, v8);
            else
              *(_DWORD *)v66 -= 2;
          }
          if (v73 == a3)
            v12 = v24;
        }
        else
        {
          v16 = v4 + 88 * v11;
          v17 = *(WTF::StringImpl **)(v16 + 80);
          *(_QWORD *)(v16 + 80) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v8);
            else
              *(_DWORD *)v17 -= 2;
          }
          v29 = *(WTF::StringImpl **)(v16 + 72);
          *(_QWORD *)(v16 + 72) = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v8);
            else
              *(_DWORD *)v29 -= 2;
          }
          v31 = v4 + 88 * v11;
          v34 = *(_DWORD *)(v31 + 64);
          v33 = (_DWORD *)(v31 + 64);
          v32 = v34;
          if (v34 != -1)
            ((void (*)(char *, uint64_t))off_1E34C4700[v32])(&v74, v4 + 88 * v11 + 40);
          *v33 = -1;
          v35 = v4 + 88 * v11;
          v38 = *(_DWORD *)(v35 + 32);
          v37 = (_DWORD *)(v35 + 32);
          v36 = v38;
          if (v38 != -1)
            ((void (*)(char *, uint64_t))off_1E34C4700[v36])(&v75, v16 + 8);
          *v37 = -1;
          v39 = *v14;
          *v14 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v8);
            else
              *(_DWORD *)v39 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  WTF **v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;

  v3 = *a1;
  if (*a1)
  {
    LODWORD(v4) = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    LODWORD(v4) = 0;
    v5 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if ((_DWORD)v4)
  {
    v9 = 0;
    v4 = v4;
    v35 = v3;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v3 + 24 * v9);
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)(v3 + 24 * v9), (uint64_t)v7, v8))
        {
          v11 = v3 + 24 * v9;
          v12 = *(WTF::StringImpl **)(v11 + 16);
          *(_QWORD *)(v11 + 16) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v7);
            else
              *(_DWORD *)v12 -= 2;
          }
          v25 = v10[1];
          v10[1] = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v7);
            else
              *(_DWORD *)v25 -= 2;
          }
          v27 = *v10;
          *v10 = 0;
          if (!v27)
            goto LABEL_49;
          if (*(_DWORD *)v27 == 2)
          {
LABEL_48:
            WTF::StringImpl::destroy(v27, v7);
            goto LABEL_49;
          }
          *(_DWORD *)v27 -= 2;
        }
        else
        {
          v13 = v4;
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WTF::PairHash<WTF::String,WTF::String>::hash(v10);
          v17 = 0;
          do
          {
            v18 = v16 & v15;
            v19 = (WTF **)(v14 + 24 * (v16 & v15));
            v20 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v19, (uint64_t)v7, v8);
            v16 = ++v17 + v18;
          }
          while (!v20);
          v21 = v14 + 24 * v18;
          v24 = *(WTF::StringImpl **)(v21 + 16);
          v23 = (_QWORD *)(v21 + 16);
          v22 = v24;
          *v23 = 0;
          v4 = v13;
          v3 = v35;
          if (v24)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v7);
            else
              *(_DWORD *)v22 -= 2;
          }
          v26 = v19[1];
          v19[1] = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v7);
            else
              *(_DWORD *)v26 -= 2;
          }
          v28 = *v19;
          *v19 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v7);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = *v10;
          *v10 = 0;
          *v19 = v29;
          v30 = v10[1];
          v10[1] = 0;
          v19[1] = v30;
          v31 = v35 + 24 * v9;
          v32 = *(_QWORD *)(v31 + 16);
          *(_QWORD *)(v31 + 16) = 0;
          *v23 = v32;
          v33 = *(WTF::StringImpl **)(v31 + 16);
          *(_QWORD *)(v31 + 16) = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v7);
            else
              *(_DWORD *)v33 -= 2;
          }
          v34 = v10[1];
          v10[1] = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v7);
            else
              *(_DWORD *)v34 -= 2;
          }
          v27 = *v10;
          *v10 = 0;
          if (!v27)
            goto LABEL_49;
          if (*(_DWORD *)v27 == 2)
            goto LABEL_48;
          *(_DWORD *)v27 -= 2;
        }
      }
LABEL_49:
      if (++v9 == v4)
        return WTF::fastFree((WTF *)(v3 - 16), v7);
    }
  }
  if (v3)
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  return result;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  char v14;
  void *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  void *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl **v30;
  _QWORD *v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(88 * v5 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
    bzero((void *)(v6 + 16), 88 * v5);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (!v3)
  {
    v11 = 0;
    if (!v2)
      return v11;
    goto LABEL_40;
  }
  v10 = 0;
  v11 = 0;
  v12 = v3;
  v44 = v2;
  do
  {
    v13 = (unsigned int *)(v2 + 88 * v10);
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v13);
    if ((v14 & 1) == 0)
    {
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
      {
        v16 = v2 + 88 * v10;
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16 + 72, v15);
        v17 = *(WTF::StringImpl ***)(v16 + 64);
        if (v17)
          WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v17, v7);
        v18 = v13[14];
        if ((_DWORD)v18 != -1)
          ((void (*)(char *, unsigned int *))off_1E34C4700[v18])(&v48, v13 + 8);
        v13[14] = -1;
        v19 = v13[6];
        if ((_DWORD)v19 != -1)
          ((void (*)(char *, uint64_t))off_1E34C4700[v19])(&v49, v2 + 88 * v10);
        v13[6] = -1;
      }
      else
      {
        v20 = *a1;
        v47 = v11;
        if (*a1)
          v21 = *(_DWORD *)(v20 - 8);
        else
          v21 = 0;
        v22 = WTF::computeHash<WebCore::ClientOrigin>(v2 + 88 * v10);
        v23 = 0;
        do
        {
          v24 = v22 & v21;
          v11 = v20 + 88 * (v22 & v21);
          v26 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
          v22 = ++v23 + v24;
        }
        while (!v26);
        v27 = v20 + 88 * v24;
        v28 = (_QWORD *)(v27 + 72);
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v27 + 72, v25);
        v32 = *(WTF::StringImpl ***)(v27 + 64);
        v31 = (_QWORD *)(v27 + 64);
        v30 = v32;
        if (v32)
          WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v30, v29);
        v33 = *(unsigned int *)(v11 + 56);
        if ((_DWORD)v33 != -1)
          ((void (*)(char *, uint64_t))off_1E34C4700[v33])(&v52, v11 + 32);
        *(_DWORD *)(v11 + 56) = -1;
        v34 = *(unsigned int *)(v11 + 24);
        if ((_DWORD)v34 != -1)
          ((void (*)(char *, uint64_t))off_1E34C4700[v34])(&v53, v20 + 88 * v24);
        *(_BYTE *)v11 = 0;
        *(_DWORD *)(v11 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v20 + 88 * v24, v2 + 88 * v10);
        *(_BYTE *)(v11 + 32) = 0;
        *(_DWORD *)(v11 + 56) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v11 + 32, (uint64_t)(v13 + 8));
        v35 = v2 + 88 * v10;
        *v31 = 0;
        v36 = *(_QWORD *)(v35 + 64);
        *(_QWORD *)(v35 + 64) = 0;
        *v31 = v36;
        *v28 = 0;
        v28[1] = 0;
        v37 = *(_QWORD *)(v35 + 72);
        *(_QWORD *)(v35 + 72) = 0;
        *v28 = v37;
        LODWORD(v37) = *(_DWORD *)(v35 + 80);
        *(_DWORD *)(v35 + 80) = 0;
        v38 = v20 + 88 * v24;
        *(_DWORD *)(v38 + 80) = v37;
        LODWORD(v37) = *(_DWORD *)(v35 + 84);
        *(_DWORD *)(v35 + 84) = 0;
        *(_DWORD *)(v38 + 84) = v37;
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v35 + 72, v39);
        v40 = *(WTF::StringImpl ***)(v35 + 64);
        if (v40)
          WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,WTF::String>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,WTF::String,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v40, v7);
        v41 = v13[14];
        v12 = v3;
        if ((_DWORD)v41 != -1)
          ((void (*)(char *, unsigned int *))off_1E34C4700[v41])(&v50, v13 + 8);
        v13[14] = -1;
        v42 = v13[6];
        v2 = v44;
        if ((_DWORD)v42 != -1)
          ((void (*)(char *, unsigned int *))off_1E34C4700[v42])(&v51, v13);
        v13[6] = -1;
        if (v13 != a2)
          v11 = v47;
      }
    }
    ++v10;
  }
  while (v10 != v12);
  if (v2)
LABEL_40:
    WTF::fastFree((WTF *)(v2 - 16), v7);
  return v11;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::initializeFetches(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  char v14;

  *(_QWORD *)a1 = &off_1E34C4FD0;
  v3 = *(unsigned int **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(_DWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *(unsigned int **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E34C4700[v10])(&v13, a1 + 40);
  *(_DWORD *)(a1 + 64) = -1;
  v11 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E34C4700[v11])(&v14, a1 + 8);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::initializeFetches(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  char v14;

  *(_QWORD *)this = &off_1E34C4FD0;
  v3 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *((unsigned int *)this + 16);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, char *))off_1E34C4700[v10])(&v13, (char *)this + 40);
  *((_DWORD *)this + 16) = -1;
  v11 = *((unsigned int *)this + 8);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, char *))off_1E34C4700[v11])(&v14, (char *)this + 8);
  *((_DWORD *)this + 8) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::initializeFetches(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::SharedBuffer **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD *v20;
  int v21;
  int v22;

  v3 = (uint64_t)(a1 + 1);
  v4 = a1[9];
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8))
    {
      v5 = a1[11];
      if (v5)
      {
        if (*(_QWORD *)(v5 + 8))
        {
          v6 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v6)
          {
            v7 = *(WebCore::SharedBuffer ***)a2;
            v8 = 16 * v6;
            do
            {
              WebCore::SharedBuffer::data(*v7);
              v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
              *v9 = off_1E34C4FF8;
              v9[1] = a1 + 11;
              v9[2] = v3;
              v9[3] = v7;
              v9[4] = a1 + 10;
              v20 = v9;
              WebCore::BackgroundFetchEngine::addFetchFromStore();
              v10 = v20;
              v20 = 0;
              if (v10)
                (*(void (**)(_QWORD *))(*v10 + 8))(v10);
              v7 += 2;
              v8 -= 16;
            }
            while (v8);
          }
        }
      }
    }
  }
  result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::PerClientOriginFetches>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1[10] + 32), v3);
  v13 = *(_QWORD *)(a1[10] + 32);
  if (v13)
    v13 += 88 * *(unsigned int *)(v13 - 4);
  if (v13 != result)
  {
    v14 = *(_QWORD **)(result + 72);
    v20 = v14;
    v15 = *(unsigned int *)(result + 84);
    v21 = *(_DWORD *)(result + 80);
    v22 = v15;
    v19[0] = 0;
    *(_QWORD *)(result + 72) = 0;
    v19[1] = 0;
    *(_QWORD *)(result + 80) = 0;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v12);
    if ((_DWORD)v15)
    {
      v17 = 8 * v15;
      do
      {
        v18 = *v14;
        *v14++ = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v17 -= 8;
      }
      while (v17);
    }
    return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v16);
  }
  return result;
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl17initializeFetchesERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEENK3__0clEONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISH_EENS_21DefaultRefDerefTraitsISH_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEUlRT_RT0_E_vJRKNS4_28ServiceWorkerRegistrationKeyERKSN_EE4callES10_S12_(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _QWORD *v10;

  if (*a3 && *((_DWORD *)*a3 + 1))
    return WebKit::BackgroundFetchStoreImpl::registerFetch(**(_QWORD **)(a1 + 32), *(_QWORD *)(a1 + 16), a2, a3, (WTF::StringImpl **)(*(_QWORD *)(a1 + 24) + 8));
  v4 = **(_QWORD **)(a1 + 8);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 16);
  WTF::String::isolatedCopy();
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E34C5020;
  v10 = v7;
  v7[1] = v9;
  WebKit::NetworkStorageManager::dispatchTaskToBackgroundFetchManager(v5, v6, (uint64_t *)&v10);
  v8 = (uint64_t)v10;
  v10 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return 0;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl17initializeFetchesERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEENK3__0clEONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISH_EENS_21DefaultRefDerefTraitsISH_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUlRT_RT0_E_clIKNS4_28ServiceWorkerRegistrationKeyEKSN_EEDaSU_SW_EUlPST_E_vJPNS2_27BackgroundFetchStoreManagerEEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34C5020;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl17initializeFetchesERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEENK3__0clEONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISH_EENS_21DefaultRefDerefTraitsISH_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUlRT_RT0_E_clIKNS4_28ServiceWorkerRegistrationKeyEKSN_EEDaSU_SW_EUlPST_E_vJPNS2_27BackgroundFetchStoreManagerEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C5020;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl17initializeFetchesERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvvEEEENK3__0clEONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISH_EENS_21DefaultRefDerefTraitsISH_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENKUlRT_RT0_E_clIKNS4_28ServiceWorkerRegistrationKeyEKSN_EEDaSU_SW_EUlPST_E_vJPNS2_27BackgroundFetchStoreManagerEEE4callES16_(uint64_t result, _QWORD *a2)
{
  WTF::StringImpl **v3;
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v3 = (WTF::StringImpl **)(result + 8);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E34C5048;
    v5 = v4;
    WebKit::BackgroundFetchStoreManager::clearFetch(a2, v3, (const WTF::StringImpl *)&v5);
    result = (uint64_t)v5;
    v5 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::initializeFetchesInternal(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C5070;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::initializeFetchesInternal(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C5070;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::initializeFetchesInternal(WebCore::ClientOrigin const&,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::call(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E34C50C0;
    v4[1] = v3;
    v8 = v4;
    WebKit::BackgroundFetchStoreManager::initializeFetches(a2, (uint64_t *)&v8);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = &off_1E34C5098;
    v6[1] = v5;
    v8 = v6;
    WTF::callOnMainRunLoop();
  }
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C5098;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C5098;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  return WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

uint64_t WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>>::destruct(*(unsigned int **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

unsigned int *WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>>::destruct(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;

  if (result != (unsigned int *)a2)
  {
    v3 = result;
    do
    {
      v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
        result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
      v3 += 4;
    }
    while (v3 != (unsigned int *)a2);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlOSW_E_vJSO_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C50C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlOSW_E_vJSO_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C50C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlOSW_E_vJSO_EE4callESO_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD v9[3];
  _QWORD *v10;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[1];
  a2[1] = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = off_1E34C50E8;
  v5[1] = v2;
  v9[0] = 0;
  v9[1] = 0;
  v5[2] = v4;
  v5[3] = v3;
  v10 = v5;
  WTF::callOnMainRunLoop();
  v7 = v10;
  v10 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  v9[2] = 0;
  return WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlOSW_E_clISN_EESV_SY_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34C50E8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlOSW_E_clISN_EESV_SY_EUlvE_vJEED0Ev(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34C50E8;
  v3 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v4);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl25initializeFetchesInternalERKN7WebCore12ClientOriginEONS_17CompletionHandlerIFvONS_6VectorINSt3__14pairINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEENS_6StringEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlOSW_E_clISN_EESV_SY_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

WTF::StringImpl *WTF::KeyValuePairHashTraits<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<WTF::String>>::customDeleteBucket(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *a1 = (WTF::StringImpl *)-1;
  result = a1[2];
  a1[2] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char v15;
  char v16;

  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a2, (WTF::StringImpl *)a2);
  v5 = *(WTF::StringImpl **)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_1E34C4700[v7])(&v15, a2 + 40);
  v8 = -1;
  *(_DWORD *)(a2 + 64) = -1;
  v9 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E34C4700[v9])(&v16, a2 + 8);
  *(_DWORD *)(a2 + 32) = -1;
  ++*(_DWORD *)(*a1 - 16);
  v10 = *a1;
  if (*a1)
    v8 = *(_DWORD *)(v10 - 12) - 1;
  *(_DWORD *)(v10 - 12) = v8;
  v11 = *a1;
  if (*a1)
  {
    v12 = 6 * *(_DWORD *)(v11 - 12);
    v13 = *(_DWORD *)(v11 - 4);
    if (v12 < v13 && v13 >= 9)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v13 >> 1, 0);
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;
  WTF **v11;
  WTF *v12;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  v8 = v7 >= 0x100 ? v7 >> 8 : WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = ++i + v10)
  {
    v10 = v8 & v6;
    v11 = (WTF **)(v3 + 88 * (v8 & v6));
    v12 = *v11;
    if (*v11 == (WTF *)-1)
      continue;
    if (!v12)
      break;
    if ((WTF::equal(v12, *a2, a3) & 1) != 0)
      return (uint64_t)v11;
  }
  if (!*a1)
    return 0;
  return *a1 + 88 * *(unsigned int *)(*a1 - 4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *a1 = &off_1E34C5110;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E34C5110;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7[2];
  char v8;

  v2 = *(_QWORD *)(a1[1] + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 296);
      v7[0] = (uint64_t *)(v3 + 40);
      v7[1] = a1 + 2;
      v8 = 1;
      IPC::Connection::send<Messages::NetworkProcessProxy::NotifyBackgroundFetchChange>(v4, v7, 0, 0, 0);
    }
  }
  v5 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearFetchInternal(WebCore::ClientOrigin const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C5138;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearFetchInternal(WebCore::ClientOrigin const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C5138;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearFetchInternal(WebCore::ClientOrigin const&,WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::call(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  if (a2)
  {
    v3 = (WTF::StringImpl **)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = &off_1E34C5160;
    v5[1] = v4;
    v7 = v5;
    WebKit::BackgroundFetchStoreManager::clearFetch(a2, v3, (const WTF::StringImpl *)&v7);
  }
  else
  {
    WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, (uint64_t *)(a1 + 16));
    WTF::callOnMainRunLoop();
  }
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18clearFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEONS_17CompletionHandlerIFvvEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C5160;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18clearFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEONS_17CompletionHandlerIFvvEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C5160;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18clearFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEONS_17CompletionHandlerIFvvEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v2, (uint64_t *)(a1 + 8));
  WTF::callOnMainRunLoop();
  result = v2;
  v2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearAllFetches(WebCore::ServiceWorkerRegistrationKey const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *a1 = off_1E34C5188;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearAllFetches(WebCore::ServiceWorkerRegistrationKey const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  _DWORD *v5;

  *(_QWORD *)a1 = off_1E34C5188;
  v3 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  v5 = (_DWORD *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearAllFetches(WebCore::ServiceWorkerRegistrationKey const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10[2];
  char v11;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v3)
      {
        v4 = *(uint64_t **)(a1 + 16);
        v5 = 8 * v3;
        do
        {
          v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 24);
          if (v6)
            v6 = (_QWORD *)v6[1];
          v7 = v6[37];
          v10[0] = v6 + 5;
          v10[1] = v4;
          v11 = 1;
          IPC::Connection::send<Messages::NetworkProcessProxy::NotifyBackgroundFetchChange>(v7, v10, 0, 0, 0);
          ++v4;
          v5 -= 8;
        }
        while (v5);
      }
    }
  }
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearAllFetchesInternal(WebCore::ClientOrigin const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34C51B0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearAllFetchesInternal(WebCore::ClientOrigin const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34C51B0;
  v3 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clearAllFetchesInternal(WebCore::ClientOrigin const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  if (a2)
  {
    v3 = a1 + 8;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = &off_1E34C51D8;
    v5[1] = v4;
    v7 = v5;
    WebKit::BackgroundFetchStoreManager::clearAllFetches(a2, v3, (const WTF::StringImpl *)&v7);
  }
  else
  {
    WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v7, (uint64_t *)(a1 + 24));
    WTF::callOnMainRunLoop();
  }
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl23clearAllFetchesInternalERKN7WebCore12ClientOriginERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C51D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl23clearAllFetchesInternalERKN7WebCore12ClientOriginERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C51D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl23clearAllFetchesInternalERKN7WebCore12ClientOriginERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v2, (uint64_t *)(a1 + 8));
  WTF::callOnMainRunLoop();
  result = v2;
  v2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebCore::BackgroundFetchStore>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E34C5200;
  WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebCore::BackgroundFetchStore>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34C5200;
  WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetch(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebCore::BackgroundFetchStore>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11[2];
  char v12;

  if (!(_DWORD)a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_BYTE *)(a1 + 168) == 0;
        v8 = *(_QWORD *)(v6 + 296);
        v11[0] = (uint64_t *)(v6 + 40);
        v11[1] = (uint64_t *)(a1 + 160);
        v12 = 2 * v7;
        IPC::Connection::send<Messages::NetworkProcessProxy::NotifyBackgroundFetchChange>(v8, v11, 0, 0, 0);
        v4 = *(_QWORD *)(a1 + 8);
      }
    }
    WebKit::BackgroundFetchStoreImpl::registerFetch(v4, a1 + 16, a1 + 80, (WTF::StringImpl **)(a1 + 152), (WTF::StringImpl **)(a1 + 160));
  }
  v9 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchInternal(WebCore::ClientOrigin const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)a1 = &off_1E34C5228;
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchInternal(WebCore::ClientOrigin const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34C5228;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchInternal(WebCore::ClientOrigin const&,WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::call(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;

  if (a2)
  {
    v3 = (WTF::StringImpl **)(a1 + 1);
    v4 = a1[2];
    v5 = a1[3];
    v6 = a1[4];
    v7 = a1[5];
    v8 = a1 + 6;
    v9 = a1[8];
    a1[8] = 0;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E34C5278;
    v10[1] = v9;
    v14 = v10;
    WebKit::BackgroundFetchStoreManager::storeFetch(a2, v3, v4, v5, v6, v7, v8, (uint64_t *)&v14);
  }
  else
  {
    v11 = a1[8];
    a1[8] = 0;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = &off_1E34C5250;
    v12[1] = v11;
    v14 = v12;
    WTF::callOnMainRunLoop();
  }
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C5250;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C5250;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlST_E_vJSL_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C5278;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlST_E_vJSL_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C5278;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlST_E_vJSL_EE4callESL_(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34C52A0;
  *(_BYTE *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 16) = v3;
  v6 = v4;
  WTF::callOnMainRunLoop();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlST_E_clISL_EESS_ST_EUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C52A0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlST_E_clISL_EESS_ST_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C52A0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl18storeFetchInternalERKN7WebCore12ClientOriginERKNS_6StringEyyNSt3__18optionalImEEONS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlST_E_clISL_EESS_ST_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunk(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebCore::BackgroundFetchStore::StoreResult>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *a1 = &off_1E34C52C8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunk(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebCore::BackgroundFetchStore::StoreResult>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E34C52C8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunk(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebCore::BackgroundFetchStore::StoreResult>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9[2];
  char v10;

  if (!(_DWORD)a2)
  {
    v4 = *(_QWORD *)(a1[1] + 24);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 296);
        v9[0] = (uint64_t *)(v5 + 40);
        v9[1] = a1 + 2;
        v10 = 2;
        IPC::Connection::send<Messages::NetworkProcessProxy::NotifyBackgroundFetchChange>(v6, v9, 0, 0, 0);
      }
    }
  }
  v7 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunkInternal(WebCore::ClientOrigin const&,WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  WTF::StringImpl *v5;

  *a1 = &off_1E34C52F0;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunkInternal(WebCore::ClientOrigin const&,WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34C52F0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::storeFetchResponseBodyChunkInternal(WebCore::ClientOrigin const&,WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::call(_QWORD *a1, _QWORD *a2)
{
  const WTF::String **v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  if (a2)
  {
    v3 = (const WTF::String **)(a1 + 1);
    v4 = a1[2];
    v5 = (unsigned int *)a1[3];
    v6 = a1[4];
    a1[4] = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34C5340;
    v7[1] = v6;
    v11 = v7;
    WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(a2, v3, v4, v5, (uint64_t *)&v11);
  }
  else
  {
    v8 = a1[4];
    a1[4] = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E34C5318;
    v9[1] = v8;
    v11 = v9;
    WTF::callOnMainRunLoop();
  }
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C5318;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C5318;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlSO_E_vJSG_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C5340;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlSO_E_vJSG_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C5340;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlSO_E_vJSG_EE4callESG_(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34C5368;
  *(_BYTE *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 16) = v3;
  v6 = v4;
  WTF::callOnMainRunLoop();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlSO_E_clISG_EESN_SO_EUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C5368;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlSO_E_clISG_EESN_SO_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C5368;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl35storeFetchResponseBodyChunkInternalERKN7WebCore12ClientOriginERKNS_6StringEmRKNS4_12SharedBufferEONS_17CompletionHandlerIFvNS4_20BackgroundFetchStore11StoreResultEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlSO_E_clISG_EESN_SO_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::retrieveResponseBody(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E34C5390;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::retrieveResponseBody(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E34C5390;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::retrieveResponseBody(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&,unsigned long,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)> &&)::$_0,void,WebKit::BackgroundFetchStoreManager *>::call(uint64_t a1, _QWORD *a2)
{
  const WTF::String **v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a2)
  {
    v3 = (const WTF::String **)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = &off_1E34C53E0;
    v6[1] = v5;
    v10 = v6;
    WebKit::BackgroundFetchStoreManager::retrieveResponseBody(a2, v3, v4, (uint64_t *)&v10);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34C53B8;
    v8[1] = v7;
    v10 = v8;
    WTF::callOnMainRunLoop();
  }
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C53B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C53B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t result;
  char v2;
  _QWORD v3[10];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v4 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v3);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34C4920[v4])(&v2, v3);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlSW_E_vJOSL_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C53E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlSW_E_vJOSL_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C53E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_EUlSW_E_vJOSL_EE4callESZ_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34C5408;
  v4[1] = v2;
  v4[2] = v3;
  v6 = v4;
  WTF::callOnMainRunLoop();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlSW_E_clISL_EESV_SW_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  *a1 = &off_1E34C5408;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlSW_E_clISL_EESV_SW_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  *(_QWORD *)this = &off_1E34C5408;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit24BackgroundFetchStoreImpl20retrieveResponseBodyERKN7WebCore28ServiceWorkerRegistrationKeyERKNS_6StringEmONS_8FunctionIFvONSt12experimental15fundamentals_v38expectedINS_6RefPtrINS4_12SharedBufferENS_12RawPtrTraitsISG_EENS_21DefaultRefDerefTraitsISG_EEEENS4_13ResourceErrorEEEEEEEN3__0clINS2_27BackgroundFetchStoreManagerEEEDaPT_ENUlSW_E_clISL_EESV_SW_EUlvE_vJEE4callEv(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t result;
  char v4;
  _QWORD v5[10];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int **)(a1 + 8);
  if (v1)
  {
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  v5[0] = v1;
  v6 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v5);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34C4920[v6])(&v4, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *a1 = &off_1E34C5430;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E34C5430;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::fetchInformationFromFilename(WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&)> &&)::$_0,void>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17[5];
  WTF::StringImpl *v18[5];
  _BYTE v19[24];
  int v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23[2];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::BackgroundFetchStoreImpl::FetchInformation,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::BackgroundFetchStoreImpl::FetchInformation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*(_QWORD *)(a1 + 8) + 40), (WTF::StringImpl **)(a1 + 16), a3);
  v5 = v4;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  if (v6)
    v6 += 88 * *(unsigned int *)(v6 - 4);
  if (v6 == v4)
  {
    v25 = 0;
    *(_OWORD *)v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    WTF::URL::invalidate((WTF::URL *)v23);
    v18[0] = 0;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, __int128 *, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, &v21, v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v11 = v18[0];
    v18[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    result = v23[0];
    v23[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    if (DWORD2(v22) != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, __int128 *))off_1E34C4700[DWORD2(v22)])(v18, &v21);
  }
  else
  {
    v19[0] = 0;
    v20 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v19, v4 + 8);
    v17[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v17);
    MEMORY[0x19AEABB24](v18, v17, v5 + 72, 0);
    MEMORY[0x19AEB35DC](&v21, v19, v18);
    v8 = v18[0];
    v18[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v12 = v17[0];
    v17[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (v20 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34C4700[v20])(v18, v19);
    v13 = v5 + 80;
    v14 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v14 + 16))(v14, &v21, v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    result = v23[0];
    v23[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
    if (DWORD2(v22) != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, __int128 *))off_1E34C4700[DWORD2(v22)])(v18, &v21);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::loadAllFetches(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::HashSet<WebCore::ClientOrigin,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34C5458;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::loadAllFetches(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::HashSet<WebCore::ClientOrigin,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34C5458;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::loadAllFetches(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::HashSet<WebCore::ClientOrigin,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::SecurityOriginData *v6;
  WebCore::SecurityOriginData *v7;
  WebCore::SecurityOriginData *v8;
  WebCore::SecurityOriginData *v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v15;
  WebCore::SecurityOriginData *v16[2];

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(a2);
  v7 = v6;
  v8 = 0;
  v16[0] = v6;
  v16[1] = v9;
  if (*a2)
    v8 = (WebCore::SecurityOriginData *)(*a2 + ((unint64_t)*(unsigned int *)(*a2 - 4) << 6));
  if (v8 != v6)
  {
    do
    {
      v10 = *(_QWORD *)(a1 + 8);
      do
        v11 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v11 + 1, (unsigned int *)v4));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = &off_1E34C5480;
      v12[1] = v4;
      v15 = v12;
      WebKit::BackgroundFetchStoreImpl::initializeFetches(v10, (uint64_t)v7, (uint64_t *)&v15);
      v13 = (uint64_t)v15;
      v15 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v16[0] = (WebCore::SecurityOriginData *)((char *)v16[0] + 64);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v16);
      v7 = v16[0];
    }
    while (v16[0] != v8);
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v4);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl14loadAllFetchesEONS_17CompletionHandlerIFvvEEEEN3__0clINS_7HashSetIN7WebCore12ClientOriginENS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEEEEDaOT_EUlvE_vJEED1Ev(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34C5480;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit24BackgroundFetchStoreImpl14loadAllFetchesEONS_17CompletionHandlerIFvvEEEEN3__0clINS_7HashSetIN7WebCore12ClientOriginENS_11DefaultHashISC_EENS_10HashTraitsISC_EENS_15HashTableTraitsEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C5480;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34C54A8;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainRunLoop();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t result;
  WTF *v2;
  void *v3;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v2 = (WTF *)WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>::~CallbackAggregatorOnThread(result);
    return WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>::~CallbackAggregatorOnThread(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::getAllBackgroundFetchIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34C54D0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::getAllBackgroundFetchIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34C54D0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::getAllBackgroundFetchIdentifiers(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = result;
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 40);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = (_QWORD *)(v2 + 88 * v3);
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = *(_QWORD **)(*(_QWORD *)(result + 8) + 40);
      if (v3)
      {
        v6 = 88 * v3;
        v5 = *(_QWORD **)(*(_QWORD *)(result + 8) + 40);
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 11;
          v6 -= 88;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v5 = (_QWORD *)(v2 + 88 * v3);
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = (_QWORD *)(v2 + 88 * v3);
  if (!v2)
  {
    v9 = 0;
    v7 = 0;
    v15 = 0;
    v16 = 0;
    goto LABEL_15;
  }
LABEL_8:
  v7 = (_QWORD *)(v2 + 88 * *(unsigned int *)(v2 - 4));
  v15 = 0;
  v16 = 0;
  v8 = *(unsigned int *)(v2 - 12);
  if ((_DWORD)v8)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = WTF::fastMalloc((WTF *)(8 * v8));
    LODWORD(v16) = v8;
    v15 = v9;
  }
  else
  {
    v9 = 0;
  }
LABEL_15:
  if (v7 != v5)
  {
    v10 = 0;
    do
    {
      v11 = (_DWORD *)*v5;
      if (*v5)
        *v11 += 2;
      *(_QWORD *)(v9 + 8 * v10) = v11;
      v12 = v5 + 11;
      v5 = v4;
      if (v12 != v4)
      {
        v5 = v12;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 11;
          if (v5 == v4)
          {
            v5 = v4;
            break;
          }
        }
      }
      ++v10;
    }
    while (v5 != v7);
    HIDWORD(v16) = v10;
  }
  v13 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 16))(v13, &v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v14);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::getBackgroundFetchState(WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C54F8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::getBackgroundFetchState(WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C54F8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::getBackgroundFetchState(WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::call(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WebCore::BackgroundFetchEngine *v9;
  WebCore::BackgroundFetch *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  __int128 v41;
  __int128 v42;
  __int16 v43;
  WTF *v44;
  char v45;
  _BYTE v46[24];
  int v47;
  WTF::StringImpl *v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[24];
  int v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  int v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int16 v64;
  char v65;
  _BYTE v66[160];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v46[0] = 0;
  v47 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v46, a2);
  v6 = *(WTF::StringImpl **)(a2 + 32);
  if (v6)
    *(_DWORD *)v6 += 2;
  v48 = v6;
  v49 = *(_OWORD *)(a2 + 40);
  v50 = *(_OWORD *)(a2 + 56);
  v7 = *a3;
  if (*a3)
    *(_DWORD *)v7 += 2;
  v39 = v7;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (v9 = *(WebCore::BackgroundFetchEngine **)(v8 + 8)) == 0)
  {
    v44 = 0;
LABEL_32:
    v66[0] = 0;
    v66[152] = 0;
    v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v29 + 16))(v29, v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v66, v30);
    goto LABEL_33;
  }
  WebCore::BackgroundFetchEngine::backgroundFetch(v9, (const WebCore::ServiceWorkerRegistrationKey *)v46, (const WTF::String *)&v39);
  if (!v44)
    goto LABEL_32;
  v10 = (WebCore::BackgroundFetch *)*((_QWORD *)v44 + 1);
  if (!v10)
    goto LABEL_32;
  WebCore::BackgroundFetch::information(v10);
  v51[0] = 0;
  v52 = -1;
  result = (WTF::StringImpl *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v51, (uint64_t)v46);
  v12 = v48;
  if (v48)
    *(_DWORD *)v48 += 2;
  v53 = v12;
  v54 = v49;
  v55 = v50;
  v13 = *((_QWORD *)v44 + 1);
  v14 = *(WTF::StringImpl **)(v13 + 8);
  if (v14)
    *(_DWORD *)v14 += 2;
  v56 = v14;
  v15 = *(unsigned int *)(v13 + 44);
  v57 = 0;
  v58 = 0;
  v59 = v15;
  if ((_DWORD)v15)
  {
    if (v15 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(32 * v15));
    v58 = v15;
    v57 = v16;
    v17 = *(unsigned int *)(v13 + 44);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(v13 + 32);
      v19 = v18 + 32 * v17;
      do
      {
        v20 = *(_DWORD **)v18;
        if (*(_QWORD *)v18)
          *v20 += 2;
        *v16 = v20;
        v21 = *(_DWORD **)(v18 + 8);
        if (v21)
          *v21 += 2;
        v16[1] = v21;
        v22 = *(_DWORD **)(v18 + 16);
        if (v22)
          *v22 += 2;
        v16[2] = v22;
        v23 = *(_DWORD **)(v18 + 24);
        if (v23)
          *v23 += 2;
        v16[3] = v23;
        v18 += 32;
        v16 += 4;
      }
      while (v18 != v19);
    }
  }
  v24 = *(WTF::StringImpl **)(v13 + 48);
  if (v24)
    *(_DWORD *)v24 += 2;
  v60 = v24;
  v61 = *(_QWORD *)(v13 + 56);
  v62 = v42;
  v63 = v41;
  v64 = v43;
  v65 = *(_BYTE *)(*((_QWORD *)v44 + 1) + 148);
  std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::__optional_destruct_base[abi:sn180100]<WebKit::BackgroundFetchState>((uint64_t)v66, (uint64_t)v51);
  v25 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v25 + 16))(v25, v66);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v66, v26);
  v28 = v60;
  v60 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v27);
  v36 = v56;
  v56 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v31);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = v53;
  v53 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v31);
    else
      *(_DWORD *)v37 -= 2;
  }
  if (v52 != -1)
    ((void (*)(char *, _BYTE *))off_1E34C4700[v52])(&v45, v51);
  v38 = v40;
  v40 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v31);
    else
      *(_DWORD *)v38 -= 2;
  }
LABEL_33:
  v32 = (unsigned int *)v44;
  v44 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, v31);
    }
  }
  v35 = v39;
  v39 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v31);
    else
      *(_DWORD *)v35 -= 2;
  }
  result = v48;
  v48 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
    else
      *(_DWORD *)result -= 2;
  }
  if (v47 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E34C4700[v47])(v66, v46);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::abortBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C5520;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::abortBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C5520;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::abortBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::call(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  char v13;
  _BYTE v14[24];
  int v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14[0] = 0;
  v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v14, a2);
  v6 = *(WTF::StringImpl **)(a2 + 32);
  if (v6)
    *(_DWORD *)v6 += 2;
  v16 = v6;
  v17 = *(_OWORD *)(a2 + 40);
  v18 = *(_OWORD *)(a2 + 56);
  v7 = *a3;
  if (*a3)
    *(_DWORD *)v7 += 2;
  v12 = v7;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 && v7 && *(_QWORD *)(v8 + 8))
    WebCore::BackgroundFetchEngine::abortBackgroundFetch();
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  if (v15 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E34C4700[v15])(&v13, v14);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::pauseBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C5548;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::pauseBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C5548;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::pauseBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::call(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  char v13;
  _BYTE v14[24];
  int v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14[0] = 0;
  v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v14, a2);
  v6 = *(WTF::StringImpl **)(a2 + 32);
  if (v6)
    *(_DWORD *)v6 += 2;
  v16 = v6;
  v17 = *(_OWORD *)(a2 + 40);
  v18 = *(_OWORD *)(a2 + 56);
  v7 = *a3;
  if (*a3)
    *(_DWORD *)v7 += 2;
  v12 = v7;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 && v7 && *(_QWORD *)(v8 + 8))
    WebCore::BackgroundFetchEngine::pauseBackgroundFetch();
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  if (v15 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E34C4700[v15])(&v13, v14);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::resumeBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C5570;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::resumeBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C5570;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::resumeBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::call(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  char v13;
  _BYTE v14[24];
  int v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14[0] = 0;
  v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v14, a2);
  v6 = *(WTF::StringImpl **)(a2 + 32);
  if (v6)
    *(_DWORD *)v6 += 2;
  v16 = v6;
  v17 = *(_OWORD *)(a2 + 40);
  v18 = *(_OWORD *)(a2 + 56);
  v7 = *a3;
  if (*a3)
    *(_DWORD *)v7 += 2;
  v12 = v7;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 && v7 && *(_QWORD *)(v8 + 8))
    WebCore::BackgroundFetchEngine::resumeBackgroundFetch();
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  if (v15 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E34C4700[v15])(&v13, v14);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clickBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C5598;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clickBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C5598;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreImpl::clickBackgroundFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::ServiceWorkerRegistrationKey const&,WTF::String const&>::call(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  char v13;
  _BYTE v14[24];
  int v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14[0] = 0;
  v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v14, a2);
  v6 = *(WTF::StringImpl **)(a2 + 32);
  if (v6)
    *(_DWORD *)v6 += 2;
  v16 = v6;
  v17 = *(_OWORD *)(a2 + 40);
  v18 = *(_OWORD *)(a2 + 56);
  v7 = *a3;
  if (*a3)
    *(_DWORD *)v7 += 2;
  v12 = v7;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 && v7 && *(_QWORD *)(v8 + 8))
    WebCore::BackgroundFetchEngine::clickBackgroundFetch();
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  if (v15 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E34C4700[v15])(&v13, v14);
  return result;
}

void sub_1971918DC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197192038(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1971920D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1971935F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197195750(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  if ((a21 & 0x8000000000000) != 0)
  {
    v22 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_197195C28(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_197195FC0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1971964D4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19719669C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197196938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::IOSurface *a10, uint64_t a11, WebCore::IOSurface *a12, uint64_t a13, WebCore::IOSurface *a14)
{
  WTF *v15;
  void *v16;
  WTF *v17;
  void *v18;

  if (a10)
  {
    WebCore::IOSurface::~IOSurface(a10);
    WTF::fastFree(v15, v16);
  }
  if (a14)
  {
    WebCore::IOSurface::~IOSurface(a14);
    WTF::fastFree(v17, v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WebCore::Color>::operator=[abi:sn180100]<WebCore::Color,void>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    WebCore::Color::operator=();
  }
  else
  {
    WebCore::Color::Color();
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

void sub_197198804(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  WTF *v10;

  WTF::fastFree(v10, a2);
  _Block_release(aBlock);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_197198C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c90_ZTSKZ76__WKWebView_WKViewInternalIOS___addUpdateVisibleContentRectPreCommitHandler_E4__11(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c90_ZTSKZ76__WKWebView_WKViewInternalIOS___addUpdateVisibleContentRectPreCommitHandler_E4__11(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_197199A14(_Unwind_Exception *a1)
{
  uint64_t v1;
  char v2;

  *(_BYTE *)(v1 + 109) = v2;
  _Unwind_Resume(a1);
}

void sub_197199CCC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19719A150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  CFRelease(v14);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_19719A208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c111_ZTSKZ97__WKWebView_WKViewInternalIOS___firePresentationUpdateForPendingStableStatePresentationCallbacks_E4__15(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c111_ZTSKZ97__WKWebView_WKViewInternalIOS___firePresentationUpdateForPendingStableStatePresentationCallbacks_E4__15(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_19719A87C(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  if (v4)
  {
    CFRelease(v4);
    if (!v3)
    {
LABEL_3:
      if (!v2)
      {
LABEL_8:
        if (v1)
          CFRelease(v1);
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      CFRelease(v2);
      goto LABEL_8;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  CFRelease(v3);
  if (!v2)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_19719AABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19719ABD4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c62_ZTSKZ48__WKWebView_WKViewInternalIOS___hideFindOverlay_E4__18(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c62_ZTSKZ48__WKWebView_WKViewInternalIOS___hideFindOverlay_E4__18(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_19719B788(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_e8_32c74_ZTSKZ60__WKWebView_WKViewInternalIOS___updatePageLoadObserverState_E4__20(uint64_t a1, uint64_t a2)
{
  const void *v4;
  __n128 result;
  __int128 v6;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  result = *(__n128 *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v6;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c74_ZTSKZ60__WKWebView_WKViewInternalIOS___updatePageLoadObserverState_E4__20(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_19719BB2C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&a24, a2);
  _Unwind_Resume(a1);
}

void sub_19719BE20(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebPageProxy::EventAttribution,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a16, a2);
  _Unwind_Resume(a1);
}

void sub_19719C14C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,char a24)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&a24, a2);
  _Unwind_Resume(a1);
}

void sub_19719C668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  _Block_release(v10);
  _Unwind_Resume(a1);
}

void sub_19719C884(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_19719C9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock)
{
  const void *v13;

  _Block_release(aBlock);
  _Block_release(v13);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c92_ZTSKZ78__WKWebView_WKPrivateIOS___requestActivatedElementAtPosition_completionBlock__E4__24(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c92_ZTSKZ78__WKWebView_WKPrivateIOS___requestActivatedElementAtPosition_completionBlock__E4__24(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

void sub_19719D258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, WebCore::IOSurface *a13, CFTypeRef cf, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,CFTypeRef a31)
{
  uint64_t v31;
  WTF *v33;
  void *v34;
  WebCore::IOSurface *v35;
  WTF *v36;
  void *v37;

  if (cf)
    CFRelease(cf);
  if (a12)
    CFRelease(a12);
  if (a13)
  {
    WebCore::IOSurface::~IOSurface(a13);
    WTF::fastFree(v33, v34);
  }
  if (a31)
    CFRelease(a31);
  v35 = *(WebCore::IOSurface **)(v31 - 136);
  *(_QWORD *)(v31 - 136) = 0;
  if (v35)
  {
    WebCore::IOSurface::~IOSurface(v35);
    WTF::fastFree(v36, v37);
  }
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_19719D4C4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c66_ZTSKZ52__WKWebView_WKPrivateIOS___retainActiveFocusedState_E4__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_e8_32c107_ZTSKZ93__WKWebView_WKPrivateIOS___becomeFirstResponderWithSelectionMovingForward_completionHandler__E4__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_19719D858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  const void *v14;

  _Block_release(aBlock);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void sub_19719D944(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c113_ZTSKZ99__WKWebView_WKPrivateIOS___accessibilityRetrieveRectsAtSelectionOffset_withText_completionHandler__E4__30(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 32));
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c113_ZTSKZ99__WKWebView_WKPrivateIOS___accessibilityRetrieveRectsAtSelectionOffset_withText_completionHandler__E4__30(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

void sub_19719DA78(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_19719DB00(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_19719DD94(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  WTF *v10;

  WTF::fastFree(v10, a2);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19719DE8C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  WTF *v10;

  WTF::fastFree(v10, a2);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19719E148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  id *v16;

  _Block_release(aBlock);
  objc_destroyWeak(v16);
  _Block_release(a10);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_19719E384(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c91_ZTSKZ77__WKWebView_WKTestingIOS___requestTextInputContextsInRect_completionHandler__E4__38(uint64_t a1, uint64_t a2)
{
  void *result;

  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_19719E42C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c91_ZTSKZ77__WKWebView_WKTestingIOS___requestTextInputContextsInRect_completionHandler__E4__38(uint64_t a1)
{
  id *v1;

  v1 = (id *)(a1 + 32);
  _Block_release(*(const void **)(a1 + 40));
  objc_destroyWeak(v1);
}

void sub_19719E764(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

NSUInteger dumpUIView(WTF::TextStream *a1, UIView *a2)
{
  objc_class *v4;
  NSString *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  double v16;
  double v17;
  double v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  double v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  double v25;
  double v26;
  double v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  double v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  NSUInteger result;
  NSArray *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  UIView *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  WTF::TextStream::operator<<();
  v4 = (objc_class *)objc_opt_class();
  v5 = NSStringFromClass(v4);
  MEMORY[0x19AEABCC8](&v45, v5);
  if (v45)
  {
    v6 = (unsigned __int8 *)*((_QWORD *)v45 + 1);
    v7 = *((unsigned int *)v45 + 1) | ((unint64_t)((*((_DWORD *)v45 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  v8 = 0;
  v9 = (char **)&WTF::BlockPtr<void ()(void)>::fromCallable<-[WKWebView(WKTestingIOS) _doAfterNextVisibleContentRectAndStablePresentationUpdate:]::$_35>(-[WKWebView(WKTestingIOS) _doAfterNextVisibleContentRectAndStablePresentationUpdate:]::$_35)::descriptor;
  while (!WTF::operator==(v6, v7, (unsigned __int8 *)(&allowListedClassToString(UIView *)::allowedClassesArray)[v8], (uint64_t)(&allowListedClassToString(UIView *)::allowedClassesArray)[v8 + 1]))
  {
    v8 += 2;
    if (v8 == 28)
      goto LABEL_8;
  }
  v9 = &(&allowListedClassToString(UIView *)::allowedClassesArray)[v8];
LABEL_8:
  if ((char *)v9 - (char *)&allowListedClassToString(UIView *)::allowedClassesArray == 224)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v11 = v45;
    v44 = v46;
    v45 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    v44 = v45;
  }
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v13 = v44;
  v44 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  -[CALayer bounds](-[UIView layer](a2, "layer"), "bounds");
  WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t)"[x: ", 5, (uint64_t)" y: ", 5, (uint64_t)" width: ", 9, (uint64_t)" height: ", 10, &v46, 0x5Du);
  WTF::TextStream::dumpProperty<WTF::String>(a1);
  v15 = v46;
  v46 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  -[CALayer position](-[UIView layer](a2, "layer"), "position");
  if (v16 != 0.0 || (-[CALayer position](-[UIView layer](a2, "layer"), "position"), v17 != 0.0))
  {
    -[CALayer position](-[UIView layer](a2, "layer"), "position");
    WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t)"[x: ", 5, (uint64_t)" y: ", 5, 93, &v46, v18, v18);
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    v20 = v46;
    v46 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  -[CALayer zPosition](-[UIView layer](a2, "layer"), "zPosition");
  if (v21 != 0.0)
  {
    -[CALayer zPosition](-[UIView layer](a2, "layer"), "zPosition");
    v46 = v22;
    WTF::tryMakeString<double>(&v45);
    if (!v45)
      goto LABEL_57;
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    v24 = v45;
    v45 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  -[CALayer anchorPoint](-[UIView layer](a2, "layer"), "anchorPoint");
  if (v25 != 0.5 || (-[CALayer anchorPoint](-[UIView layer](a2, "layer"), "anchorPoint"), v26 != 0.5))
  {
    -[CALayer anchorPoint](-[UIView layer](a2, "layer"), "anchorPoint");
    WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t)"[x: ", 5, (uint64_t)" y: ", 5, 93, &v46, v27, v27);
    WTF::TextStream::dumpProperty<WTF::String>(a1);
    v29 = v46;
    v46 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  -[CALayer anchorPointZ](-[UIView layer](a2, "layer"), "anchorPointZ");
  if (v30 != 0.0)
  {
    -[CALayer anchorPointZ](-[UIView layer](a2, "layer"), "anchorPointZ");
    v46 = v31;
    WTF::tryMakeString<double>(&v45);
    if (v45)
    {
      WTF::TextStream::dumpProperty<WTF::String>(a1);
      v33 = v45;
      v45 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v32);
        else
          *(_DWORD *)v33 -= 2;
      }
      goto LABEL_46;
    }
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x19719ECF0);
  }
LABEL_46:
  result = -[NSArray count](-[UIView subviews](a2, "subviews"), "count");
  if (result)
  {
    WTF::TextStream::startGroup(a1);
    WTF::TextStream::operator<<();
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v35 = -[UIView subviews](a2, "subviews");
    v36 = -[NSArray countByEnumeratingWithState:objects:count:](v35, "countByEnumeratingWithState:objects:count:", &v40, v47, 16);
    if (v36)
    {
      v37 = *(_QWORD *)v41;
      do
      {
        for (i = 0; i != v36; ++i)
        {
          if (*(_QWORD *)v41 != v37)
            objc_enumerationMutation(v35);
          v39 = *(UIView **)(*((_QWORD *)&v40 + 1) + 8 * i);
          WTF::TextStream::startGroup(a1);
          dumpUIView(a1, v39);
          WTF::TextStream::endGroup(a1);
        }
        v36 = -[NSArray countByEnumeratingWithState:objects:count:](v35, "countByEnumeratingWithState:objects:count:", &v40, v47, 16);
      }
      while (v36);
    }
    return WTF::TextStream::endGroup(a1);
  }
  return result;
}

void sub_19719ECFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21)
{
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19719F8C4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_19719FA00(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  v2 = v1;
  _Block_release(v2);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void WebKit::AuthenticationChallengeProxy::sendClientCertificateCredentialOverXpc(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::Credential *a4)
{
  xpc_object_t v8;
  xpc_object_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFData *v14;
  const UInt8 *BytePtr;
  size_t Length;
  xpc_object_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v8, "message-name", "client-certificate-credential");
  xpc_dictionary_set_uint64(v8, "challenge-id", a3);
  xpc_dictionary_set_value(v8, "sec-key-proxy-endpoint", (xpc_object_t)objc_msgSend((id)objc_msgSend(*(id *)(a2 + 16), "endpoint"), "_endpoint"));
  v9 = xpc_array_create(0, 0);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v10 = (void *)objc_msgSend((id)WebCore::Credential::nsCredential(a4), "certificates", 0);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v20;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v20 != v12)
          objc_enumerationMutation(v10);
        v14 = SecCertificateCopyData(*(SecCertificateRef *)(*((_QWORD *)&v19 + 1) + 8 * v13));
        BytePtr = CFDataGetBytePtr(v14);
        Length = CFDataGetLength(v14);
        v17 = xpc_data_create(BytePtr, Length);
        xpc_array_append_value(v9, v17);
        if (v17)

        if (v14)
          CFRelease(v14);
        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v11);
  }
  xpc_dictionary_set_value(v8, "certificates", v9);
  v18 = objc_msgSend((id)WebCore::Credential::nsCredential(a4), "persistence");
  xpc_dictionary_set_uint64(v8, "persistence", v18);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 352), v8);
  if (v9)

  if (v8)
}

void sub_19719FC58(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)

  _Unwind_Resume(exception_object);
}

void sub_19719FCB8()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x19719FCC0);
  JUMPOUT(0x19719FC84);
}

BOOL WebKit::SecKeyProxyStore::initialize(WebKit::SecKeyProxyStore *this, const WebCore::Credential *a2)
{
  uint64_t v4;
  const void *v5;

  if ((WebCore::Credential::isEmpty(a2) & 1) == 0)
  {
    if (objc_msgSend((id)WebCore::Credential::nsCredential(a2), "identity"))
    {
      v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0CD5C88]), "initWithIdentity:", objc_msgSend((id)WebCore::Credential::nsCredential(a2), "identity"));
      v5 = (const void *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v4;
      if (v5)
        CFRelease(v5);
    }
  }
  return *((_QWORD *)this + 2) != 0;
}

void sub_19719FF98(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 __copy_helper_block_e8_32c84_ZTSKZL25scrollViewBackgroundColorP9WKWebView32AllowPageBackgroundColorOverrideE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

void sub_1971A0074(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1971A0138(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1971A02F4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZ48__WKWebView_WKViewInternalIOS___hideFindOverlay_ENK4__18clEv_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "removeFromSuperview");
}

void sub_1971A0450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1971A0674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a11)
    CFRelease(a11);
  _Unwind_Resume(exception_object);
}

dispatch_queue_t ___ZL21pageLoadObserverQueuev_block_invoke()
{
  NSObject *v0;
  NSObject *global_queue;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  global_queue = dispatch_get_global_queue(9, 0);
  result = dispatch_queue_create_with_target_V2("com.apple.WebKit.pageLoadObserver", v0, global_queue);
  qword_1ECE72A20 = (uint64_t)result;
  return result;
}

uint64_t ___ZL26sendPageLoadAnalyticsEventON3WTF9RetainPtrI8NSStringEENSt3__18optionalI13audit_token_tEE_block_invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

const void *WTF::dynamic_cf_cast<__CFArray const*>(const void *result)
{
  const void *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CFArrayGetTypeID())
      return v1;
    else
      return 0;
  }
  return result;
}

WTF *WTF::RefCounted<`anonymous namespace'::WebKitClientAppInfo>::deref(WTF *this, void *a2)
{
  WTF *v2;
  const void *v3;
  const void *v4;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)v2 + 7) = 0;
    if (v3)
      CFRelease(v3);
    v4 = (const void *)*((_QWORD *)v2 + 5);
    *((_QWORD *)v2 + 5) = 0;
    if (v4)
      CFRelease(v4);
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t std::__optional_destruct_base<WebKit::WebPageProxy::EventAttribution,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *WTF::BlockPtr<void ()(NSString *,NSString *,BOOL *)>::fromCallable<viewportArgumentsFromDictionary(NSDictionary<NSString *,NSString *> *)::$_0>(viewportArgumentsFromDictionary(NSDictionary<NSString *,NSString *> *)::$_0)::{lambda(void *,NSString *,NSString *,BOOL *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  _QWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("-[WKWebView _overrideViewportWithArguments:]: Keys and values must all be NSStrings."));
  MEMORY[0x19AEABCC8](&v11, a2);
  MEMORY[0x19AEABCC8](&v10, a3);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34C5A08;
  v9 = v5;
  WebCore::setViewportFeature();
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1971A09E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<viewportArgumentsFromDictionary(NSDictionary<NSString *,NSString *> *)::$_0::operator() const(NSString *,NSString *,BOOL *)::{lambda(WebCore::ViewportErrorCode,WTF::String const&)#1},void,WebCore::ViewportErrorCode,WTF::String const&>::call()
{
  char *v0;
  void *v1;
  uint64_t result;
  WTF *v3;

  WTF::String::utf8();
  if (v3)
    v0 = (char *)v3 + 16;
  else
    v0 = 0;
  NSLog(CFSTR("-[WKWebView _overrideViewportWithArguments:]: Error parsing viewport argument: %s"), v0);
  result = (uint64_t)v3;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      return WTF::fastFree(v3, v1);
    else
      --*(_DWORD *)v3;
  }
  return result;
}

void sub_1971A0AD8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 1)
      WTF::fastFree(a10, a2);
    else
      --*(_DWORD *)a10;
  }
  _Unwind_Resume(exception_object);
}

void sub_1971A0D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::IOSurface *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    WebCore::IOSurface::~IOSurface(a10);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1971A0E60(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1971A1018(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1971A1518(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF *a10)
{
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  _Unwind_Resume(exception_object);
}

void sub_1971A177C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::BackgroundFetchStoreManager::createNewStorageIdentifier@<X0>(WebKit::BackgroundFetchStoreManager *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6[2];

  WTF::createVersion4UUIDString(this);
  v6[0] = (uint64_t)"-backgroundfetch";
  v6[1] = 17;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v5, v6, a2);
  if (*a2)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *WebKit::BackgroundFetchStoreManager::BackgroundFetchStoreManager(_QWORD *a1, _DWORD **a2, uint64_t *a3, uint64_t *a4)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF::StringImpl *v13;
  _QWORD *v14;

  *a1 = 0;
  v6 = *a2;
  if (*a2)
    *v6 += 2;
  a1[1] = v6;
  v7 = *a3;
  *a3 = 0;
  a1[2] = v7;
  WTF::WorkQueue::create();
  v8 = *a4;
  *a4 = 0;
  a1[4] = v8;
  a1[5] = 0;
  v9 = a1[3];
  WTF::String::isolatedCopy();
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34C5EF0;
  v14 = v10;
  v10[1] = v13;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v9 + 32))(v9, &v14);
  v11 = v14;
  v14 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  return a1;
}

void WebKit::BackgroundFetchStoreManager::~BackgroundFetchStoreManager(WebKit::BackgroundFetchStoreManager *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

uint64_t WebKit::BackgroundFetchStoreManager::initializeFetches(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _QWORD *v20;

  v3 = a1[1];
  if (v3 && *(_DWORD *)(v3 + 4))
  {
    v4 = a1[2];
    v5 = a1[3];
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
    v17 = v4;
    WTF::String::isolatedCopy();
    v6 = *a2;
    *a2 = 0;
    v19 = v6;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v7 = &off_1E34C5F18;
    v7[1] = v17;
    v8 = v18;
    v17 = 0;
    v18 = 0;
    v7[2] = v8;
    v9 = v19;
    v19 = 0;
    v20 = v7;
    v7[3] = v9;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 32))(v5, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    v12 = v19;
    v19 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v18;
    v18 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    result = v17;
    v17 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v14 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 16))(v14, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v15);
  }
  return result;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreManager::clearFetch(_QWORD *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  void *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30[2];
  WTF::StringImpl *v31[2];
  WTF::StringImpl *v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  if (!v5 || !*(_DWORD *)(v5 + 4))
  {
    v22 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1 + 5, a2, a3);
    v23 = v22;
    v24 = a1[5];
    if (v24)
    {
      v25 = (WTF::StringImpl **)(v24 + 24 * *(unsigned int *)(v24 - 4));
      if (v25 == v22)
        goto LABEL_21;
    }
    else
    {
      if (!v22)
      {
LABEL_21:
        v26 = *(WTF::StringImpl **)a3;
        *(_QWORD *)a3 = 0;
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v26 + 16))(v26, v23);
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v26 + 8))(v26);
      }
      v25 = 0;
    }
    if (v25 != v22)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(a1 + 5, v22);
    goto LABEL_21;
  }
  *(_QWORD *)&v33 = 0;
  v6 = *a2;
  if (*a2)
  {
    v7 = *((unsigned __int8 *)v6 + 16);
    v8 = *((_QWORD *)v6 + 1);
    LODWORD(v6) = *((_DWORD *)v6 + 1);
    *(_QWORD *)&v33 = v8;
    v9 = (v7 >> 2) & 1;
  }
  else
  {
    LOBYTE(v9) = 1;
  }
  DWORD2(v33) = (_DWORD)v6;
  BYTE12(v33) = v9;
  WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, &v33, 1uLL);
  WTF::FileSystemImpl::pathByAppendingComponents();
  v11 = v30[0];
  if (v30[0])
  {
    v30[0] = 0;
    LODWORD(v30[1]) = 0;
    WTF::fastFree(v11, v10);
  }
  v14 = a1 + 2;
  v12 = (WTF::StringImpl *)a1[2];
  v13 = v14[1];
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 48))(v12);
  v30[0] = v12;
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v15 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  v31[1] = v15;
  v16 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v16 = &off_1E34C5F68;
  *(WTF::StringImpl **)(v16 + 8) = v30[0];
  *(WTF::StringImpl **)(v16 + 16) = v30[1];
  *(WTF::StringImpl **)(v16 + 24) = v31[0];
  v17 = v31[1];
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)v31 = 0u;
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)&v33 = v16;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 32))(v13, &v33);
  v19 = v33;
  *(_QWORD *)&v33 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v31[1];
  v31[1] = 0;
  if (v20)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
  v21 = v31[0];
  v31[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v28 = v30[1];
  v30[1] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v18);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = v30[0];
  v30[0] = 0;
  if (v29)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v29 + 56))(v29);
  result = v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::BackgroundFetchStoreManager::clearAllFetches(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  void *v18;
  WTF *v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  uint64_t *v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  v5 = result;
  v48 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(result + 8);
  if (!v6 || !*(_DWORD *)(v6 + 4))
  {
    v21 = *(unsigned int *)(a2 + 12);
    if (!(_DWORD)v21)
    {
LABEL_24:
      v27 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    v22 = *(WTF::StringImpl ***)a2;
    v23 = (uint64_t *)(result + 40);
    v24 = 8 * v21;
    while (1)
    {
      v25 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v23, v22, a3);
      if (*v23)
      {
        v26 = *v23 + 24 * *(unsigned int *)(*v23 - 4);
        if ((WTF::StringImpl **)v26 != v25)
          goto LABEL_21;
      }
      else if (v25)
      {
        v26 = 0;
LABEL_21:
        if ((WTF::StringImpl **)v26 != v25)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v23, v25);
      }
      ++v22;
      v24 -= 8;
      if (!v24)
        goto LABEL_24;
    }
  }
  v44 = 0;
  v45 = 0;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v8 = WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v45) = v7;
    v44 = v8;
    v9 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v9)
    {
      v10 = v8;
      v11 = 0;
      v12 = *(WTF::StringImpl ***)a2;
      v13 = 8 * v9;
      do
      {
        *(_QWORD *)&v47 = 0;
        v14 = v12[v11];
        if (v14)
        {
          v15 = *((unsigned __int8 *)v14 + 16);
          v16 = *((_QWORD *)v14 + 1);
          LODWORD(v14) = *((_DWORD *)v14 + 1);
          *(_QWORD *)&v47 = v16;
          v17 = (v15 >> 2) & 1;
        }
        else
        {
          LOBYTE(v17) = 1;
        }
        DWORD2(v47) = (_DWORD)v14;
        BYTE12(v47) = v17;
        WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v40, &v47, 1uLL);
        WTF::FileSystemImpl::pathByAppendingComponents();
        v19 = v40;
        if (v40)
        {
          v40 = 0;
          LODWORD(v41) = 0;
          WTF::fastFree(v19, v18);
        }
        v20 = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11++) = v46;
        v13 -= 8;
      }
      while (v13);
      HIDWORD(v45) = v20;
    }
  }
  v30 = v5 + 16;
  v28 = *(WTF **)(v5 + 16);
  v29 = *(_QWORD *)(v30 + 8);
  (*(void (**)(WTF *))(*(_QWORD *)v28 + 48))(v28);
  v40 = v28;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((unsigned int *)&v44, (uint64_t)&v41);
  v31 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v43 = v31;
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v32 = off_1E34C5F90;
  v32[1] = v40;
  v33 = v41;
  v40 = 0;
  v41 = 0;
  v32[2] = v33;
  v32[3] = v42;
  v34 = v43;
  v42 = 0;
  v43 = 0;
  v32[4] = v34;
  *(_QWORD *)&v47 = v32;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v29 + 32))(v29, &v47);
  v36 = v47;
  *(_QWORD *)&v47 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v43;
  v43 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v35);
  v39 = v40;
  v40 = 0;
  if (v39)
    (*(void (**)(WTF *))(*(_QWORD *)v39 + 56))(v39);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v38);
}

uint64_t WebKit::BackgroundFetchStoreManager::storeFetch(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;

  v9 = a3 + a4;
  if (__CFADD__(a3, a4) || (v11 = *((unsigned int *)a7 + 3), v12 = __CFADD__(v9, v11), v13 = v9 + v11, v12))
  {
    v14 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    v34 = v13;
    v22 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      goto LABEL_24;
    v22 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 8) = a1;
    v24 = *(unsigned int **)a1;
    *(_QWORD *)a1 = v22;
    if (!v24)
      goto LABEL_24;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v23);
    }
    v22 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
LABEL_24:
      do
        v27 = __ldaxr((unsigned int *)v22);
      while (__stlxr(v27 + 1, (unsigned int *)v22));
    }
    v28 = *a2;
    if (v28)
      *(_DWORD *)v28 += 2;
    v29 = *a7;
    v30 = a7[1];
    *a7 = 0;
    a7[1] = 0;
    v31 = *a8;
    *a8 = 0;
    v32 = WTF::fastMalloc((WTF *)0x50);
    *(_QWORD *)v32 = &off_1E34C5FB8;
    *(_QWORD *)(v32 + 8) = v22;
    if (v28)
      *(_DWORD *)v28 += 2;
    *(_QWORD *)(v32 + 16) = v28;
    *(_QWORD *)(v32 + 24) = a3;
    *(_QWORD *)(v32 + 32) = a4;
    *(_QWORD *)(v32 + 40) = a5;
    *(_BYTE *)(v32 + 48) = a6;
    *(_QWORD *)(v32 + 56) = v29;
    *(_QWORD *)(v32 + 64) = v30;
    *(_QWORD *)(v32 + 72) = v31;
    v35 = v32;
    (*(void (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v34, &v35);
    result = v35;
    v35 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        return WTF::StringImpl::destroy(v28, v33);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(_QWORD *a1, const WTF::String **a2, unint64_t a3, unsigned int *a4, uint64_t *a5)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  int i;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unsigned int **v26;
  uint64_t v27;
  unsigned int *v28;
  WTF *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *result;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t *v57;
  WTF::StringImpl *v59[2];
  __int128 v60;
  uint64_t v61;
  WTF::StringImpl *v62;

  v10 = a1[1];
  if (v10 && *(_DWORD *)(v10 + 4))
  {
    WebKit::createFetchResponseBodyFile((WebKit *)v59, *a2, a3);
    v11 = v59[0];
    if (v59[0])
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
    else
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
    }
    v33 = (WTF::StringImpl *)a1[2];
    v32 = a1[3];
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v33 + 48))(v33);
    v59[0] = v33;
    WTF::String::isolatedCopy();
    do
      v34 = __ldaxr(a4);
    while (__stlxr(v34 + 1, a4));
    v35 = *a5;
    *a5 = 0;
    *(_QWORD *)&v60 = a4;
    *((_QWORD *)&v60 + 1) = v35;
    v36 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v36 = &off_1E34C6030;
    *(WTF::StringImpl **)(v36 + 8) = v59[0];
    *(WTF::StringImpl **)(v36 + 16) = v59[1];
    *(_QWORD *)(v36 + 24) = v60;
    v37 = *((_QWORD *)&v60 + 1);
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    *(_QWORD *)(v36 + 32) = v37;
    v61 = v36;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v32 + 32))(v32, &v61);
    v39 = v61;
    v61 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = *((_QWORD *)&v60 + 1);
    *((_QWORD *)&v60 + 1) = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    v41 = (unsigned int *)v60;
    *(_QWORD *)&v60 = 0;
    if (v41)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v41, v38);
    v42 = v59[1];
    v59[1] = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v38);
      else
        *(_DWORD *)v42 -= 2;
    }
    v43 = v59[0];
    v59[0] = 0;
    if (v43)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v43 + 56))(v43);
    result = v62;
    v62 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v38);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v14 = a1 + 5;
  v13 = a1[5];
  if (v13
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v14, 0), (v13 = *v14) != 0))
  {
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = *((_DWORD *)*a2 + 4);
  v57 = v14;
  if (v16 >= 0x100)
    v17 = v16 >> 8;
  else
    v17 = WTF::StringImpl::hashSlowCase(*a2);
  v18 = 0;
  for (i = 1; ; ++i)
  {
    v20 = v17 & v15;
    v21 = v13 + 24 * (v17 & v15);
    v22 = *(WTF **)v21;
    if (*(_QWORD *)v21 == -1)
    {
      v18 = (_QWORD *)(v13 + 24 * v20);
      goto LABEL_18;
    }
    if (!v22)
      break;
    if ((WTF::equal(v22, *a2, (const WTF::StringImpl *)a3) & 1) != 0)
      goto LABEL_56;
LABEL_18:
    v17 = i + v20;
  }
  if (v18)
  {
    *v18 = 0;
    v18[1] = 0;
    v18[2] = 0;
    --*(_DWORD *)(*v57 - 16);
    v21 = (uint64_t)v18;
  }
  WTF::String::operator=((WTF::StringImpl **)v21, (WTF::StringImpl *)a2);
  v59[0] = 0;
  v59[1] = 0;
  v25 = *(unsigned int *)(v21 + 20);
  if ((_DWORD)v25)
  {
    v26 = *(unsigned int ***)(v21 + 8);
    v27 = 8 * v25;
    do
    {
      v28 = *v26;
      *v26 = 0;
      if (v28)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v28, v24);
      ++v26;
      v27 -= 8;
    }
    while (v27);
  }
  v29 = *(WTF **)(v21 + 8);
  if (v29)
  {
    *(_QWORD *)(v21 + 8) = 0;
    *(_DWORD *)(v21 + 16) = 0;
    WTF::fastFree(v29, v24);
  }
  v59[0] = 0;
  *(_QWORD *)(v21 + 8) = 0;
  v59[1] = 0;
  *(_QWORD *)(v21 + 16) = 0;
  WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v59, v24);
  v30 = *v57;
  if (*v57)
    v31 = *(_DWORD *)(v30 - 12) + 1;
  else
    v31 = 1;
  *(_DWORD *)(v30 - 12) = v31;
  v45 = *v57;
  if (*v57)
    v46 = *(_DWORD *)(v45 - 12);
  else
    v46 = 0;
  v47 = (*(_DWORD *)(v45 - 16) + v46);
  v48 = *(unsigned int *)(v45 - 4);
  if (v48 > 0x400)
  {
    if (v48 <= 2 * v47)
LABEL_55:
      v21 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v57, (WTF::StringImpl **)v21);
  }
  else if (3 * v48 <= 4 * v47)
  {
    goto LABEL_55;
  }
LABEL_56:
  v49 = (_QWORD *)(v21 + 8);
  v50 = *(unsigned int *)(v21 + 20);
  if (v50 <= a3)
  {
    LODWORD(v51) = *(_DWORD *)(v21 + 20);
    do
    {
      v59[0] = 0;
      if ((_DWORD)v51 == *(_DWORD *)(v21 + 16))
      {
        v52 = (uint64_t *)WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(v21 + 8), v50 + 1, (unint64_t)v59);
        v51 = *(unsigned int *)(v21 + 20);
        v53 = *(_QWORD *)(v21 + 8);
        v54 = *v52;
        *v52 = 0;
        *(_QWORD *)(v53 + 8 * v51) = v54;
      }
      else
      {
        *(_QWORD *)(*v49 + 8 * v50) = 0;
      }
      LODWORD(v51) = v51 + 1;
      *(_DWORD *)(v21 + 20) = v51;
      v55 = (unsigned int *)v59[0];
      v59[0] = 0;
      if (v55)
      {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v55, v23);
        LODWORD(v51) = *(_DWORD *)(v21 + 20);
      }
      v50 = v51;
    }
    while (v51 <= a3);
  }
  WebCore::SharedBufferBuilder::ensureBuffer((WebCore::SharedBufferBuilder *)(*v49 + 8 * a3));
  WebCore::FragmentedSharedBuffer::append();
  v56 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 16))(v56, 0);
  return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
}

uint64_t WebKit::createFetchResponseBodyFile(WebKit *this, const WTF::String *a2, unint64_t a3)
{
  uint64_t result;
  WTF::StringImpl *v5;

  if (!a2)
    return WTF::makeString<WTF::String,char,unsigned long>((uint64_t)this, 0, a3);
  *(_DWORD *)a2 += 2;
  result = WTF::makeString<WTF::String,char,unsigned long>((uint64_t)this, (uint64_t)a2, a3);
  if (*(_DWORD *)a2 == 2)
    return WTF::StringImpl::destroy(a2, v5);
  *(_DWORD *)a2 -= 2;
  return result;
}

unsigned int *WebKit::BackgroundFetchStoreManager::retrieveResponseBody(_QWORD *a1, const WTF::String **a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *result;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  WebCore::FragmentedSharedBuffer *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WebCore::FragmentedSharedBuffer *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unsigned int *v30;
  unsigned int *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WebCore::FragmentedSharedBuffer *v34;
  WTF::StringImpl *v35;

  v7 = a1[1];
  if (v7 && *(_DWORD *)(v7 + 4))
  {
    WebKit::createFetchResponseBodyFile((WebKit *)&v31, *a2, a3);
    v8 = (WTF::StringImpl *)v31;
    if (v31)
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v9);
      else
        *(_DWORD *)v8 -= 2;
    }
    else
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
    }
    v21 = a1 + 2;
    v19 = (unsigned int *)a1[2];
    v20 = v21[1];
    (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 48))(v19);
    v31 = v19;
    WTF::String::isolatedCopy();
    v22 = *a4;
    *a4 = 0;
    v33 = v22;
    v23 = (WebCore::FragmentedSharedBuffer *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v23 = &off_1E34C6080;
    *((_QWORD *)v23 + 1) = v31;
    v24 = v32;
    v31 = 0;
    v32 = 0;
    *((_QWORD *)v23 + 2) = v24;
    v25 = v33;
    v33 = 0;
    *((_QWORD *)v23 + 3) = v25;
    v34 = v23;
    (*(void (**)(uint64_t, WebCore::FragmentedSharedBuffer **))(*(_QWORD *)v20 + 32))(v20, &v34);
    v27 = v34;
    v34 = 0;
    if (v27)
      (*(void (**)(WebCore::FragmentedSharedBuffer *))(*(_QWORD *)v27 + 8))(v27);
    v28 = v33;
    v33 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = v32;
    v32 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v26);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v31;
    v31 = 0;
    if (v30)
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 56))(v30);
    result = (unsigned int *)v35;
    v35 = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
      else
        *result -= 2;
    }
    return result;
  }
  v10 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1 + 5, a2, (const WTF::StringImpl *)a3);
  v11 = a1[5];
  if (v11)
    v11 += 24 * *(unsigned int *)(v11 - 4);
  if (v11 == v10 || *(unsigned int *)(v10 + 20) <= a3)
  {
    v31 = 0;
    v18 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v18 + 16))(v18, &v31);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    result = v31;
    v31 = 0;
    if (!result)
      return result;
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v14);
  }
  WebCore::SharedBufferBuilder::copy((WebCore::FragmentedSharedBuffer **)(*(_QWORD *)(v10 + 8) + 8 * a3));
  WebCore::FragmentedSharedBuffer::makeContiguous(v34);
  v12 = v35;
  v35 = 0;
  v31 = (unsigned int *)v12;
  v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v13 + 16))(v13, &v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15 = v31;
  v31 = 0;
  if (v15)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v15, v14);
  v16 = (unsigned int *)v35;
  v35 = 0;
  if (v16)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v16, v14);
  result = (unsigned int *)v34;
  v34 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v14);
  return result;
}

uint64_t WebCore::SharedBufferBuilder::copy(WebCore::FragmentedSharedBuffer **this)
{
  WebCore::FragmentedSharedBuffer *v1;

  v1 = *this;
  if (v1)
    return WebCore::FragmentedSharedBuffer::copy(v1);
  else
    return WebCore::FragmentedSharedBuffer::create(0);
}

uint64_t WebKit::CacheStorageCache::CacheStorageCache(uint64_t a1, unsigned int *a2, _DWORD **a3, _DWORD **a4, uint64_t a5, uint64_t *a6)
{
  WebCore::Process *IdentifierInternal;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t Salt;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  *(_QWORD *)a1 = 0;
  IdentifierInternal = (WebCore::Process *)WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v13 = WebCore::Process::identifier(IdentifierInternal);
  *(_QWORD *)(a1 + 8) = IdentifierInternal;
  *(_QWORD *)(a1 + 16) = v13;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2, (uint64_t)a2);
  v14 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 24) = v14;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v16 = *a3;
  if (*a3)
    *v16 += 2;
  *(_QWORD *)(a1 + 56) = v16;
  v17 = *a4;
  if (*a4)
    *v17 += 2;
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = 0;
  if (*(_QWORD *)a5 && *(_DWORD *)(*(_QWORD *)a5 + 4))
  {
    v18 = WTF::fastMalloc((WTF *)0x38);
    v19 = v18;
    v20 = *a4;
    *(_DWORD *)(v18 + 8) = 1;
    *(_QWORD *)v18 = off_1E34C5DD8;
    if (v20)
      *v20 += 2;
    *(_QWORD *)(v18 + 16) = v20;
    v21 = *(_DWORD **)a5;
    if (*(_QWORD *)a5)
      *v21 += 2;
    *(_QWORD *)(v18 + 24) = v21;
    WebKit::CacheStorageDiskStore::versionDirectoryPath((WebKit::CacheStorageDiskStore *)&v31);
    WTF::FileSystemImpl::pathByAppendingComponent();
    v23 = v31;
    v31 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    Salt = WTF::FileSystemImpl::readOrMakeSalt((WTF::FileSystemImpl *)&v30, v22);
    if ((_BYTE)v25)
      v26 = Salt;
    else
      v26 = 0;
    *(_QWORD *)(v19 + 32) = v26;
    v27 = v30;
    v30 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v25);
      else
        *(_DWORD *)v27 -= 2;
    }
    v28 = *a6;
    *a6 = 0;
    *(_QWORD *)(v19 + 40) = v28;
    WTF::WorkQueue::create();
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v19 + 8) = 1;
    *(_QWORD *)v19 = off_1E34C5E18;
    *(_QWORD *)(v19 + 16) = 0;
  }
  *(_QWORD *)(a1 + 80) = v19;
  return a1;
}

void WebKit::CacheStorageCache::~CacheStorageCache(WebKit::CacheStorageCache *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  char v21[24];
  int v22;

  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 5);
    v5 = 8 * v3;
    do
    {
      v21[0] = 4;
      v22 = 1;
      v6 = *v4;
      *v4++ = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 16))(v6, v21);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *((_QWORD *)this + 9);
  if (v8)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, a2);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *((unsigned int *)this + 13);
  v12 = (WTF *)*((_QWORD *)this + 5);
  if ((_DWORD)v11)
  {
    v13 = 8 * v11;
    do
    {
      v14 = *(_QWORD *)v12;
      *(_QWORD *)v12 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v12 = (WTF *)((char *)v12 + 8);
      v13 -= 8;
    }
    while (v13);
    v12 = (WTF *)*((_QWORD *)this + 5);
  }
  if (v12)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v12, a2);
  }
  v15 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v18 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

unsigned int *WebKit::CacheStorageCache::open(uint64_t a1, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v4;
  unsigned int *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  __int128 v14;
  char v15;
  int v16;

  v2 = a2;
  if (*(_BYTE *)(a1 + 32))
  {
    v14 = *(_OWORD *)(a1 + 8);
    v15 = 0;
    v16 = 0;
    v4 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 16))(v4, &v14);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    result = (unsigned int *)(a1 + 40);
    v6 = *(unsigned int *)(a1 + 52);
    if ((_DWORD)v6 == *(_DWORD *)(a1 + 48))
    {
      result = (unsigned int *)WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v6 + 1, (unint64_t)a2);
      v2 = result;
      v6 = *(unsigned int *)(a1 + 52);
      v7 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6);
    }
    else
    {
      v7 = (_QWORD *)(*(_QWORD *)result + 8 * v6);
    }
    v8 = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    *v7 = v8;
    v9 = v6 + 1;
    *(_DWORD *)(a1 + 52) = v9;
    if (v9 <= 1)
    {
      v10 = *(_QWORD *)(a1 + 80);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
      v11 = *(unsigned int **)a1;
      if (*(_QWORD *)a1)
      {
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v13 = &off_1E34C60F8;
      v13[1] = a1;
      v13[2] = v11;
      *(_QWORD *)&v14 = v13;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v10 + 16))(v10, &v14);
      result = (unsigned int *)v14;
      *(_QWORD *)&v14 = 0;
      if (result)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebKit::CacheStorageCache::retrieveRecords(uint64_t a1, WebCore::ResourceRequestBase *this, uint64_t *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  uint64_t *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _DWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  __int128 v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CFTypeRef v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t *v51;
  uint64_t v52;
  WTF *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  CFTypeRef v58;
  _QWORD *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  _DWORD *v73;
  __int128 v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92[2];
  int v93;
  uint64_t v94[4];
  __int128 v95;
  __int128 v96;
  _DWORD *v97;
  __int128 v98;
  __int128 v99;
  int v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  CFTypeRef cf;
  __int16 v107;
  __int128 v108;
  WTF *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v90 = 0;
  v91 = 0;
  v6 = WebCore::ResourceRequestBase::url(this);
  v7 = *(WTF::StringImpl **)v6;
  if (*(_QWORD *)v6)
  {
    *(_DWORD *)v7 += 2;
    v87 = v7;
    v88 = *(_OWORD *)(v6 + 8);
    v89 = *(_OWORD *)(v6 + 24);
    if (!*((_BYTE *)this + 233))
    {
      v8 = (_QWORD *)WebCore::ResourceRequestBase::httpMethod(this);
      if ((MEMORY[0x19AEABBCC](*v8, "GET", 3) & 1) == 0)
        goto LABEL_31;
    }
    v9 = (uint64_t *)(a1 + 72);
    WebKit::computeKeyURL((WebKit *)v92, (const WTF::URL *)&v87);
    v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 72), v92, v10);
    if (v92[0])
    {
      if (*(_DWORD *)v92[0] == 2)
        WTF::StringImpl::destroy(v92[0], v11);
      else
        *(_DWORD *)v92[0] -= 2;
    }
    v13 = *v9;
    if (*v9)
      v13 += 24 * *(unsigned int *)(v13 - 4);
    if (v13 == v12)
      goto LABEL_31;
    LOBYTE(v92[0]) = *((_BYTE *)this + 232);
    *(_WORD *)((char *)v92 + 1) = *(_WORD *)((char *)this + 233);
    v14 = *(unsigned int *)(v12 + 20);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(v12 + 8) + 104;
      v16 = 160 * v14;
      while ((*(_BYTE *)(*(_QWORD *)v15 + 16) & 0x10) == 0)
      {
        if (WebCore::DOMCacheEngine::queryCacheMatch())
        {
          v17 = HIDWORD(v91);
          if (HIDWORD(v91) == (_DWORD)v91)
          {
            WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation&>((uint64_t)&v90, v15 - 104);
          }
          else
          {
            v18 = v90;
            v19 = WebKit::NetworkCache::Key::Key(v90 + 160 * HIDWORD(v91), v15 - 104);
            v20 = *(_OWORD *)(v15 - 32);
            *(_OWORD *)(v19 + 88) = *(_OWORD *)(v15 - 16);
            *(_OWORD *)(v19 + 72) = v20;
            v21 = *(_DWORD **)v15;
            if (*(_QWORD *)v15)
              *v21 += 2;
            v22 = v18 + 160 * v17;
            *(_QWORD *)(v22 + 104) = v21;
            v23 = *(_OWORD *)(v15 + 24);
            *(_OWORD *)(v22 + 112) = *(_OWORD *)(v15 + 8);
            *(_OWORD *)(v22 + 128) = v23;
            *(_BYTE *)(v22 + 144) = *(_BYTE *)(v15 + 40);
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v22 + 152), (_QWORD **)(v15 + 48));
            ++HIDWORD(v91);
          }
        }
        v15 += 160;
        v16 -= 160;
        if (!v16)
          goto LABEL_21;
      }
      __break(0xC471u);
LABEL_79:
      JUMPOUT(0x1971A35D4);
    }
  }
  else
  {
    v87 = 0;
    v88 = *(_OWORD *)(v6 + 8);
    v89 = *(_OWORD *)(v6 + 24);
    v60 = *(_QWORD **)(a1 + 72);
    v61 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v60);
    v63 = v61;
    v64 = v62;
    if (v60)
      v65 = (WTF::StringImpl *)&v60[3 * *((unsigned int *)v60 - 1)];
    else
      v65 = 0;
    if (v65 != v61)
    {
      v84 = v65;
      do
      {
        v85 = 0;
        v86 = 0;
        v66 = *((unsigned int *)v63 + 5);
        if ((_DWORD)v66)
        {
          if (v66 >= 0x199999A)
          {
            __break(0xC471u);
            goto LABEL_79;
          }
          v67 = 160 * v66;
          v68 = WTF::fastMalloc((WTF *)(160 * v66));
          LODWORD(v86) = (v67 & 0xFFFFFFE0) / 0xA0;
          v85 = (uint64_t *)v68;
          v69 = *((_DWORD *)v63 + 5);
          if (v69)
          {
            v70 = *((_QWORD *)v63 + 1);
            v71 = v70 + 160 * v69;
            do
            {
              WebKit::NetworkCache::Key::Key((uint64_t)v92, v70);
              v72 = *(_OWORD *)(v70 + 88);
              v95 = *(_OWORD *)(v70 + 72);
              v96 = v72;
              v73 = *(_DWORD **)(v70 + 104);
              if (v73)
                *v73 += 2;
              v97 = v73;
              v74 = *(_OWORD *)(v70 + 128);
              v98 = *(_OWORD *)(v70 + 112);
              v99 = v74;
              LOBYTE(v100) = *(_BYTE *)(v70 + 144);
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v102, (_QWORD **)(v70 + 152));
              WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v85, (uint64_t *)v92);
              WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v92, v75);
              v70 += 160;
            }
            while (v70 != v71);
          }
        }
        v76 = HIDWORD(v86);
        v77 = HIDWORD(v86) + (unint64_t)HIDWORD(v91);
        if (v77 > v91)
        {
          v78 = v91 + ((unint64_t)v91 >> 2);
          if (v78 >= 0x10)
            v79 = v78 + 1;
          else
            v79 = 16;
          if (v79 <= v77)
            v80 = HIDWORD(v86) + (unint64_t)HIDWORD(v91);
          else
            v80 = v79;
          WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v90, v80);
          v76 = HIDWORD(v86);
        }
        if ((_DWORD)v76)
        {
          v81 = v85;
          v82 = 160 * v76;
          do
          {
            WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v90, v81);
            v81 += 20;
            v82 -= 160;
          }
          while (v82);
        }
        WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v62);
        v63 = (WTF::StringImpl *)((char *)v63 + 24);
        if (v63 == v64)
        {
          v63 = v64;
          v83 = v84;
        }
        else
        {
          v83 = v84;
          while ((unint64_t)(*(_QWORD *)v63 + 1) <= 1)
          {
            v63 = (WTF::StringImpl *)((char *)v63 + 24);
            if (v63 == v64)
            {
              v63 = v64;
              break;
            }
          }
        }
      }
      while (v63 != v83);
    }
  }
LABEL_21:
  if (HIDWORD(v91))
  {
    v24 = *(_QWORD *)(a1 + 80);
    WTF::URL::URL((uint64_t)v92, (uint64_t *)this);
    WTF::URL::URL((uint64_t)v94, (uint64_t *)this + 5);
    v25 = *((_QWORD *)this + 10);
    v26 = *(_OWORD *)((char *)this + 88);
    *(_OWORD *)((char *)this + 88) = 0u;
    v96 = v26;
    *(_QWORD *)&v26 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)&v95 + 1) = v25;
    v97 = (_DWORD *)v26;
    v27 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    *(_QWORD *)&v98 = v27;
    v28 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)&v98 + 1) = v28;
    v29 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    *(_QWORD *)&v99 = v29;
    v30 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)&v99 + 1) = v30;
    LODWORD(v29) = *((_DWORD *)this + 36);
    v101 = *((_BYTE *)this + 148);
    v100 = v29;
    v31 = *(_OWORD *)((char *)this + 152);
    *(_OWORD *)((char *)this + 152) = 0u;
    v102 = v31;
    v105 = *((_BYTE *)this + 184);
    v32 = *((_QWORD *)this + 21);
    v33 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 21) = 0;
    v103 = v32;
    v104 = v33;
    v34 = (const void *)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = 0;
    cf = v34;
    v107 = *((_WORD *)this + 100);
    v35 = *((_OWORD *)this + 13);
    *((_OWORD *)this + 13) = 0u;
    v108 = v35;
    v36 = (WTF *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = 0;
    v109 = v36;
    v110 = *((_DWORD *)this + 58);
    v37 = *a3;
    *a3 = 0;
    v111 = v37;
    v38 = WTF::fastMalloc((WTF *)0x100);
    *(_QWORD *)v38 = off_1E34C6120;
    WTF::URL::URL(v38 + 8, (uint64_t *)v92);
    WTF::URL::URL(v38 + 48, v94);
    *(_QWORD *)(v38 + 88) = *((_QWORD *)&v95 + 1);
    *(_QWORD *)(v38 + 96) = v96;
    v39 = *((_QWORD *)&v96 + 1);
    v96 = 0u;
    *(_QWORD *)(v38 + 104) = v39;
    v40 = v97;
    v97 = 0;
    *(_QWORD *)(v38 + 112) = v40;
    v41 = v98;
    *(_QWORD *)&v98 = 0;
    *(_QWORD *)(v38 + 120) = v41;
    v42 = *((_QWORD *)&v98 + 1);
    *((_QWORD *)&v98 + 1) = 0;
    *(_QWORD *)(v38 + 128) = v42;
    v43 = v99;
    *(_QWORD *)&v99 = 0;
    *(_QWORD *)(v38 + 136) = v43;
    v44 = *((_QWORD *)&v99 + 1);
    *((_QWORD *)&v99 + 1) = 0;
    *(_QWORD *)(v38 + 144) = v44;
    LODWORD(v43) = v100;
    *(_BYTE *)(v38 + 156) = v101;
    *(_DWORD *)(v38 + 152) = v43;
    *(_QWORD *)(v38 + 160) = v102;
    v45 = *((_QWORD *)&v102 + 1);
    v102 = 0u;
    *(_QWORD *)(v38 + 168) = v45;
    *(_QWORD *)(v38 + 176) = v103;
    v46 = v104;
    *(_BYTE *)(v38 + 192) = v105;
    *(_QWORD *)(v38 + 184) = v46;
    v47 = cf;
    v103 = 0;
    cf = 0;
    *(_QWORD *)(v38 + 200) = v47;
    *(_WORD *)(v38 + 208) = v107;
    *(_QWORD *)(v38 + 216) = v108;
    v48 = *((_QWORD *)&v108 + 1);
    v108 = 0u;
    *(_QWORD *)(v38 + 224) = v48;
    *(_QWORD *)(v38 + 232) = v109;
    *(_DWORD *)(v38 + 240) = v110;
    v49 = v111;
    v109 = 0;
    v111 = 0;
    *(_QWORD *)(v38 + 248) = v49;
    v85 = (uint64_t *)v38;
    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v24 + 24))(v24, &v90, &v85);
    v51 = v85;
    v85 = 0;
    if (v51)
      (*(void (**)(uint64_t *))(*v51 + 8))(v51);
    v52 = v111;
    v111 = 0;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    v53 = v109;
    v109 = 0;
    if (v53)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v53, v50);
    v54 = (WTF::StringImpl *)*((_QWORD *)&v108 + 1);
    *((_QWORD *)&v108 + 1) = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v50);
      else
        *(_DWORD *)v54 -= 2;
    }
    v57 = (WTF::StringImpl *)v108;
    *(_QWORD *)&v108 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v50);
      else
        *(_DWORD *)v57 -= 2;
    }
    v58 = cf;
    cf = 0;
    if (v58)
      CFRelease(v58);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v92);
    goto LABEL_41;
  }
LABEL_31:
  v92[0] = 0;
  v92[1] = 0;
  v93 = 0;
  v55 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v55 + 16))(v55, v92);
  (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  if (v93 != -1)
    ((void (*)(uint64_t **, WTF::StringImpl **))off_1E34C5E48[v93])(&v85, v92);
LABEL_41:
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v56);
    else
      *(_DWORD *)v87 -= 2;
  }
  return WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v90, v56);
}

WTF::StringImpl *WebKit::computeKeyURL(WebKit *this, const WTF::URL *a2)
{
  WTF::StringImpl *v2;
  __int128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;

  if ((*((_BYTE *)a2 + 8) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1971A3884);
  }
  v2 = *(WTF::StringImpl **)a2;
  if (!*(_QWORD *)a2 || !*((_DWORD *)v2 + 1))
  {
    __break(0xC471u);
    goto LABEL_14;
  }
  *(_DWORD *)v2 += 2;
  v9 = v2;
  v4 = *(_OWORD *)((char *)a2 + 24);
  v10 = *(_OWORD *)((char *)a2 + 8);
  v11 = v4;
  WTF::URL::removeQueryAndFragmentIdentifier((WTF::URL *)&v9);
  result = v9;
  if (!v9)
  {
    *(_QWORD *)this = 0;
    goto LABEL_13;
  }
  v7 = *(_DWORD *)v9;
  v8 = *((_DWORD *)v9 + 1);
  *(_DWORD *)v9 += 2;
  *(_QWORD *)this = result;
  if (!v8)
  {
LABEL_13:
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x1971A3864);
  }
  v9 = 0;
  if (!v7)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  *(_DWORD *)result = v7;
  return result;
}

WTF::StringImpl *WebKit::CacheStorageCache::removeRecords(_QWORD *a1, WebCore::ResourceRequestBase *this, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t *v8;
  const WTF::URL *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _DWORD *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  WTF::StringImpl *result;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  const WTF::String *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  WTF::StringImpl *v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  int v69;

  if (*(_BYTE *)(a3 + 1)
    || (v7 = (_QWORD *)WebCore::ResourceRequestBase::httpMethod(this), (MEMORY[0x19AEABBCC](*v7, "GET", 3) & 1) != 0))
  {
    v8 = a1 + 9;
    v9 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
    WebKit::computeKeyURL((WebKit *)&v67, v9);
    v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1 + 9, &v67, v10);
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v11);
      else
        *(_DWORD *)v67 -= 2;
    }
    v13 = *v8;
    if (*v8)
      v13 += 24 * *(unsigned int *)(v13 - 4);
    if (v13 != v12)
    {
      v67 = 0;
      v68 = 0;
      v65 = 0;
      v66 = 0;
      v14 = *(_QWORD *)(v12 + 8);
      v15 = *(_DWORD *)(v12 + 20);
      v16 = v14 + 160 * v15;
      v60 = v12 + 8;
      if (v15)
      {
        v61 = a4;
        v62 = v12;
        v17 = 0;
        v18 = 0;
        v63 = 0;
        v19 = (uint64_t *)(v14 + 160 * v15);
        v20 = (unint64_t)v19;
        do
        {
          v21 = v14 + v17;
          if (WebCore::DOMCacheEngine::queryCacheMatch())
          {
            v22 = (_QWORD *)(v21 + 80);
            v23 = HIDWORD(v68);
            v24 = v18;
            if (HIDWORD(v68) == (_DWORD)v68)
            {
              v22 = (_QWORD *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v67, HIDWORD(v68) + 1, (unint64_t)v22);
              v23 = HIDWORD(v68);
            }
            *((_QWORD *)v67 + HIDWORD(v68)) = *v22;
            HIDWORD(v68) = v23 + 1;
            v25 = HIDWORD(v66);
            if (HIDWORD(v66) == (_DWORD)v66)
            {
              WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation&>((uint64_t)&v65, v14 + v17);
            }
            else
            {
              v27 = v65;
              v28 = WebKit::NetworkCache::Key::Key(v65 + 160 * HIDWORD(v66), v14 + v17);
              v29 = v14 + v17;
              v30 = *(_OWORD *)(v14 + v17 + 72);
              *(_OWORD *)(v28 + 88) = *(_OWORD *)(v14 + v17 + 88);
              *(_OWORD *)(v28 + 72) = v30;
              v31 = *(_DWORD **)(v21 + 104);
              if (v31)
                *v31 += 2;
              v32 = v27 + 160 * v25;
              *(_QWORD *)(v32 + 104) = v31;
              v33 = *(_OWORD *)(v29 + 128);
              *(_OWORD *)(v32 + 112) = *(_OWORD *)(v29 + 112);
              *(_OWORD *)(v32 + 128) = v33;
              *(_BYTE *)(v32 + 144) = *(_BYTE *)(v21 + 144);
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v32 + 152), (_QWORD **)(v14 + v17 + 152));
              ++HIDWORD(v66);
            }
            v34 = *(_QWORD *)(v14 + v17 + 96);
            v35 = v14 + v17;
            if (v20 != *(_QWORD *)(v62 + 8) + 160 * *(unsigned int *)(v62 + 20))
            {
              if ((uint64_t *)v21 == v19)
              {
                v35 = v20;
              }
              else
              {
                WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::moveOverlapping(v19, (uint64_t *)(v14 + v17), v20);
                v35 = v20 + v14 + v17 - (_QWORD)v19;
              }
            }
            v18 = v34 + v24;
            v19 = (uint64_t *)(v14 + v17 + 160);
            WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)(v14 + v17), v26);
            ++v63;
            v20 = v35;
          }
          v17 += 160;
        }
        while (v14 + v17 < v16);
        a4 = v61;
        v12 = v62;
        v14 = *(_QWORD *)(v62 + 8);
        v15 = *(_DWORD *)(v62 + 20);
        v16 = v20;
        v8 = a1 + 9;
        v36 = v63;
      }
      else
      {
        v18 = 0;
        v36 = 0;
        v19 = *(uint64_t **)(v12 + 8);
      }
      v39 = (uint64_t *)(v14 + 160 * v15);
      if (v19 != v39)
      {
        WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::moveOverlapping(v19, v39, v16);
        v15 = *(_DWORD *)(v12 + 20);
      }
      v40 = v15 - v36;
      *(_DWORD *)(v12 + 20) = v40;
      if (v40)
        goto LABEL_46;
      if (*v8)
      {
        v41 = *v8 + 24 * *(unsigned int *)(*v8 - 4);
        if (v41 == v12)
        {
LABEL_46:
          v48 = a1[3];
          if (v48)
          {
            v49 = *(_QWORD *)(v48 + 8);
            v50 = !v49 || v18 == 0;
            if (!v50 && *(_BYTE *)(v49 + 32))
            {
              v51 = (const WTF::String *)(*(_QWORD *)(v49 + 24) - v18);
              *(_QWORD *)(v49 + 24) = v51;
              *(_BYTE *)(v49 + 32) = 1;
              WebKit::writeSizeFile(*(WTF::StringImpl **)(v49 + 56), v51);
            }
          }
          v52 = a1[10];
          v53 = v67;
          v54 = *a4;
          *a4 = 0;
          v55 = v68;
          v67 = 0;
          v68 = 0;
          v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *v56 = &off_1E34C6160;
          v56[1] = v53;
          v56[2] = v55;
          v56[3] = v54;
          v64 = v56;
          (*(void (**)(uint64_t, uint64_t *, _QWORD **))(*(_QWORD *)v52 + 32))(v52, &v65, &v64);
          v58 = v64;
          v64 = 0;
          if (v58)
            (*(void (**)(_QWORD *))(*v58 + 8))(v58);
          WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v57);
          result = v67;
          if (v67)
          {
            v67 = 0;
            LODWORD(v68) = 0;
            return (WTF::StringImpl *)WTF::fastFree(result, v59);
          }
          return result;
        }
      }
      else
      {
        if (!v12)
          goto LABEL_46;
        v41 = 0;
      }
      if (v41 != v12)
      {
        WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v12, (WTF::StringImpl *)v39);
        WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v60, v42);
        ++*(_DWORD *)(*v8 - 16);
        v43 = *v8;
        v44 = *v8 ? *(_DWORD *)(v43 - 12) - 1 : -1;
        *(_DWORD *)(v43 - 12) = v44;
        v45 = *v8;
        if (*v8)
        {
          v46 = 6 * *(_DWORD *)(v45 - 12);
          v47 = *(_DWORD *)(v45 - 4);
          if (v46 < v47 && v47 >= 9)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v8, v47 >> 1, 0);
        }
      }
      goto LABEL_46;
    }
  }
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v37 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v37 + 16))(v37, &v67);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (v69 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E34C5E80[v69])(&v65, &v67);
  return result;
}

uint64_t WebKit::CacheStorageCache::findExistingRecord(uint64_t a1, WebCore::ResourceRequestBase *this, uint64_t a3, char a4)
{
  uint64_t *v6;
  const WTF::URL *v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char CacheMatch;
  WTF::StringImpl *v18;

  v6 = (uint64_t *)(a1 + 72);
  v7 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
  WebKit::computeKeyURL((WebKit *)&v18, v7);
  v10 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v6, &v18, v8);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v9);
    else
      *(_DWORD *)v18 -= 2;
  }
  v11 = *v6;
  if (*v6)
    v11 += 24 * *(unsigned int *)(v11 - 4);
  if (v11 == v10)
    return 0;
  v12 = *(unsigned int *)(v10 + 20);
  if (!(_DWORD)v12)
    return 0;
  v13 = 0;
  v14 = 0;
  while (1)
  {
    v15 = *(_QWORD *)(v10 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v15 + v13 + 104) + 16) & 0x10) != 0)
      goto LABEL_18;
    if (!a4 || a3 == *(_QWORD *)(v15 + v13 + 80))
    {
      CacheMatch = WebCore::DOMCacheEngine::queryCacheMatch();
      v12 = *(unsigned int *)(v10 + 20);
      if ((CacheMatch & 1) != 0)
        break;
    }
    ++v14;
    v13 += 160;
    if (v14 >= v12)
      return 0;
  }
  if (v14 >= v12)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1971A3EC0);
  }
  return *(_QWORD *)(v10 + 8) + v13;
}

uint64_t WebKit::CacheStorageCache::putRecords(WTF::StringImpl *a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  WebCore::ResourceRequestBase *v17;
  uint64_t ExistingRecord;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  __int128 v25;
  double v26;
  uint64_t v27;
  _DWORD *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  const WebCore::ResourceResponseData *v32;
  char v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  WTF *v62;
  unsigned int v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  WTF *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v113;
  WebKit::CacheStorageCache **v114;
  uint64_t v115;
  WebKit::CacheStorageCache *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  uint64_t v122;
  void *v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  _QWORD *v127;
  uint64_t v128;
  _DWORD **v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  __int128 v134;
  __int128 v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF *v138;
  _QWORD v139[2];
  uint64_t v140;
  _OWORD v141[4];
  uint64_t v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  __int128 v148;
  __int128 v149;
  char v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  _QWORD v157[3];

  v3 = a3;
  v157[1] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 3);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v6 = a1;
    v130 = 0;
    v131 = 0;
    v7 = *((_DWORD *)a2 + 3);
    if (!v7)
      goto LABEL_45;
    if (v7 >= 0x590B22)
    {
      __break(0xC471u);
      goto LABEL_161;
    }
    v8 = 736 * v7;
    v9 = WTF::fastMalloc((WTF *)(736 * v7));
    LODWORD(v131) = (v8 & 0xFFFFFFE0) / 0x2E0;
    v130 = v9;
    v10 = *((_DWORD *)a2 + 3);
    if (v10)
    {
      v11 = v9;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = *a2;
      v129 = (_DWORD **)((char *)v6 + 64);
      v127 = v3;
      v128 = 592 * v10;
      do
      {
        v16 = (uint64_t *)(v15 + v12);
        v14 += *(_QWORD *)(v15 + v12 + 584);
        v17 = (WebCore::ResourceRequestBase *)(v15 + v12 + 24);
        ExistingRecord = WebKit::CacheStorageCache::findExistingRecord((uint64_t)v6, v17, 0, 0);
        if (ExistingRecord)
          v14 -= *(_QWORD *)(ExistingRecord + 96);
        v157[0] = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 8) + 64);
        v19 = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_QWORD *)&v141[0] = 0;
        WTF::createVersion4UUIDString(v19);
        WebKit::NetworkCache::Key::Key((WTF::SHA1 *)&v152, (_DWORD **)&v137, v129, (_DWORD **)v141, (_DWORD **)&v136, (uint64_t)v157);
        v21 = v136;
        v136 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v20);
          else
            *(_DWORD *)v21 -= 2;
        }
        v22 = v137;
        v137 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            v22 = (WTF::StringImpl *)WTF::StringImpl::destroy(v22, v20);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = v6;
        v24 = v152;
        v25 = v153;
        v152 = 0u;
        v153 = 0u;
        v141[0] = v24;
        v141[1] = v25;
        v141[2] = v154;
        v141[3] = v155;
        v142 = v156;
        WTF::MonotonicTime::now(v22);
        v143 = v26 * 1000.0;
        v144 = *v16;
        v145 = 0;
        v146 = v16[73];
        v27 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v15 + v12 + 24));
        v28 = *(_DWORD **)v27;
        if (*(_QWORD *)v27)
          *v28 += 2;
        v147 = v28;
        v29 = *(_OWORD *)(v27 + 24);
        v148 = *(_OWORD *)(v27 + 8);
        v149 = v29;
        v150 = 0;
        v151 = 0;
        v30 = v15;
        v31 = v15 + v12;
        v32 = (const WebCore::ResourceResponseData *)(v15 + v12 + 288);
        WebKit::CacheStorageRecordInformation::updateVaryHeaders((WebKit::CacheStorageRecordInformation *)v141, v17, v32);
        v33 = *(_BYTE *)(v31 + 16);
        LODWORD(v132) = *(_DWORD *)(v31 + 224);
        *(_DWORD *)((char *)&v132 + 3) = *(_DWORD *)(v31 + 227);
        v34 = *(WTF::StringImpl **)(v31 + 232);
        if (v34)
          *(_DWORD *)v34 += 2;
        v133 = v34;
        v134 = *(_OWORD *)(v31 + 240);
        v135 = *(_OWORD *)(v31 + 256);
        WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)&v137, (uint64_t)v141, v33, v17, (int *)&v132, (_DWORD **)(v31 + 272), *(_BYTE *)(v31 + 280), (uint64_t)v32, v16[73], v31 + 568);
        v36 = v133;
        v133 = 0;
        v6 = v23;
        v15 = v30;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v35);
          else
            *(_DWORD *)v36 -= 2;
        }
        WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v141, v35);
        v38 = (WTF::StringImpl *)*((_QWORD *)&v153 + 1);
        *((_QWORD *)&v153 + 1) = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v37);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = (WTF::StringImpl *)v153;
        *(_QWORD *)&v153 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v37);
          else
            *(_DWORD *)v39 -= 2;
        }
        v40 = (WTF::StringImpl *)*((_QWORD *)&v152 + 1);
        *((_QWORD *)&v152 + 1) = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v37);
          else
            *(_DWORD *)v40 -= 2;
        }
        v41 = (WTF::StringImpl *)v152;
        *(_QWORD *)&v152 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v37);
          else
            *(_DWORD *)v41 -= 2;
        }
        WebKit::CacheStorageRecord::CacheStorageRecord(v11, (uint64_t *)&v137);
        WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)&v137, v42);
        v11 += 736;
        ++v13;
        v12 += 592;
      }
      while (v128 != v12);
      HIDWORD(v131) = v13;
      v43 = v14 & ~(v14 >> 63);
      v3 = v127;
    }
    else
    {
LABEL_45:
      v13 = 0;
      v43 = 0;
    }
    v46 = *((_QWORD *)v6 + 3);
    if (v46)
      v47 = *(_QWORD *)(v46 + 8);
    else
      v47 = 0;
    v137 = v6;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v6, (uint64_t)v6);
    v48 = *(unsigned int **)v6;
    if (*(_QWORD *)v6)
    {
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 + 1, v48));
      v13 = HIDWORD(v131);
      v6 = v137;
    }
    v50 = v6;
    v51 = v130;
    v130 = 0;
    v52 = v131;
    v131 = 0;
    v53 = *v3;
    *v3 = 0;
    v140 = v53;
    v54 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v54 = off_1E34C6188;
    *(_QWORD *)(v54 + 8) = v50;
    *(_QWORD *)(v54 + 16) = v48;
    *(_QWORD *)(v54 + 24) = v51;
    v138 = 0;
    v139[0] = 0;
    v139[1] = 0;
    *(_DWORD *)(v54 + 32) = v52;
    *(_DWORD *)(v54 + 36) = v13;
    *(_QWORD *)(v54 + 40) = v53;
    v132 = v54;
    if (*(_BYTE *)(v47 + 32))
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(v47 + 80) + 16))(*(_QWORD *)(v47 + 80), v43, &v132);
LABEL_151:
      v122 = v132;
      v132 = 0;
      if (v122)
        (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
      v140 = 0;
      WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v139, v55);
      v124 = (unsigned int *)v138;
      v138 = 0;
      if (v124)
      {
        do
        {
          v125 = __ldaxr(v124);
          v126 = v125 - 1;
        }
        while (__stlxr(v126, v124));
        if (!v126)
        {
          atomic_store(1u, v124);
          WTF::fastFree((WTF *)v124, v123);
        }
      }
      return WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v130, (WTF::StringImpl *)v123);
    }
    v56 = v54;
    v132 = 0;
    v58 = *(_QWORD *)(v47 + 136);
    v57 = *(_QWORD *)(v47 + 144);
    if (v58)
    {
      if (v57 + 1 == v58)
      {
        LODWORD(v59) = *(_DWORD *)(v47 + 160);
LABEL_62:
        v60 = v59;
        v61 = ((unint64_t)v59 >> 2) + v59;
        if (v61 <= 0xF)
          v61 = 15;
        if (v61 < 0xFFFFFFF)
        {
          v62 = *(WTF **)(v47 + 152);
          v63 = v61 + 1;
          v64 = WTF::fastMalloc((WTF *)(16 * (v61 + 1)));
          v65 = (_QWORD *)v64;
          *(_DWORD *)(v47 + 160) = v63;
          *(_QWORD *)(v47 + 152) = v64;
          v66 = *(_QWORD *)(v47 + 136);
          v67 = *(_QWORD *)(v47 + 144);
          v68 = (WTF *)((char *)v62 + 16 * v67);
          if (v66 <= v67)
          {
            if (v66 != v67)
            {
              v78 = (_QWORD *)(v64 + 16 * v66);
              v79 = (WTF *)((char *)v62 + 16 * v66);
              do
              {
                *v78 = *(_QWORD *)v79;
                v80 = *((_QWORD *)v79 + 1);
                *((_QWORD *)v79 + 1) = 0;
                v78[1] = v80;
                v81 = *((_QWORD *)v79 + 1);
                *((_QWORD *)v79 + 1) = 0;
                if (v81)
                  (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
                v79 = (WTF *)((char *)v79 + 16);
                v78 += 2;
              }
              while (v79 != v68);
            }
          }
          else
          {
            if (v67)
            {
              v69 = v62;
              do
              {
                *v65 = *(_QWORD *)v69;
                v70 = *((_QWORD *)v69 + 1);
                *((_QWORD *)v69 + 1) = 0;
                v65[1] = v70;
                v71 = *((_QWORD *)v69 + 1);
                *((_QWORD *)v69 + 1) = 0;
                if (v71)
                  (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
                v69 = (WTF *)((char *)v69 + 16);
                v65 += 2;
              }
              while (v69 != v68);
              v63 = *(_DWORD *)(v47 + 160);
              v66 = *(_QWORD *)(v47 + 136);
              v65 = *(_QWORD **)(v47 + 152);
            }
            v72 = v66 - v60 + v63;
            if (v66 != v60)
            {
              v73 = (_QWORD *)((char *)v62 + 16 * v60);
              v74 = &v65[2 * v72];
              v75 = (_QWORD *)((char *)v62 + 16 * v66);
              do
              {
                *v74 = *v75;
                v76 = v75[1];
                v75[1] = 0;
                v74[1] = v76;
                v77 = v75[1];
                v75[1] = 0;
                if (v77)
                  (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
                v75 += 2;
                v74 += 2;
              }
              while (v75 != v73);
            }
            *(_QWORD *)(v47 + 136) = v72;
          }
          if (v62)
          {
            if (*(WTF **)(v47 + 152) == v62)
            {
              *(_QWORD *)(v47 + 152) = 0;
              *(_DWORD *)(v47 + 160) = 0;
            }
            WTF::fastFree(v62, v55);
          }
          v58 = *(_QWORD *)(v47 + 136);
          v57 = *(_QWORD *)(v47 + 144);
          goto LABEL_88;
        }
        __break(0xC471u);
LABEL_161:
        JUMPOUT(0x1971A48B4);
      }
    }
    else
    {
      v59 = *(unsigned int *)(v47 + 160);
      if (v57)
      {
        if (v57 == v59 - 1)
          goto LABEL_62;
        v58 = 0;
      }
      else
      {
        if (!(_DWORD)v59)
          goto LABEL_62;
        v58 = 0;
        v57 = 0;
      }
    }
LABEL_88:
    v82 = (uint64_t *)(*(_QWORD *)(v47 + 152) + 16 * v57);
    *v82 = v43;
    v82[1] = v56;
    v83 = *(unsigned int *)(v47 + 160);
    if (v57 == v83 - 1)
      v84 = 0;
    else
      v84 = v57 + 1;
    *(_QWORD *)(v47 + 144) = v84;
    v85 = v84 >= v58;
    v86 = v84 - v58;
    if (v85)
      v87 = 0;
    else
      v87 = v83;
    if (v86 + v87 > 1)
      goto LABEL_151;
    v89 = (uint64_t *)(v47 + 48);
    v88 = *(_QWORD *)(v47 + 48);
    *(_QWORD *)(v47 + 40) = 0;
    *(_QWORD *)(v47 + 48) = 0;
    if (v88)
      WTF::fastFree((WTF *)(v88 - 16), v55);
    v90 = *(unsigned int *)(v47 + 100);
    if (!(_DWORD)v90)
    {
LABEL_124:
      v107 = *(_QWORD *)(v47 + 104);
      v108 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::begin(v107);
      v109 = (_QWORD *)v108;
      v111 = v110;
      if (v107)
        v107 += 24 * *(unsigned int *)(v107 - 4);
      if (v107 != v108)
      {
        do
        {
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::add((uint64_t)v141, (uint64_t *)(v47 + 48), v109);
          while (1)
          {
            v109 += 3;
            if (v109 == v111)
              break;
            if (*(_OWORD *)v109 != 0 && v109[1] != -1)
              goto LABEL_135;
          }
          v109 = v111;
LABEL_135:
          ;
        }
        while (v109 != (_QWORD *)v107);
      }
      v113 = *(unsigned int *)(v47 + 100);
      if ((_DWORD)v113)
      {
        v114 = *(WebKit::CacheStorageCache ***)(v47 + 88);
        v115 = 8 * v113;
        do
        {
          v116 = *v114++;
          WebKit::CacheStorageManager::initializeCacheSize((WebKit::CacheStorageManager *)v47, v116);
          v115 -= 8;
        }
        while (v115);
      }
      v117 = *(_QWORD *)(v47 + 104);
      v118 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::begin(v117);
      v119 = v118;
      v120 = v55;
      if (v117)
        v117 += 24 * *(unsigned int *)(v117 - 4);
      if (v117 != v118)
      {
        do
        {
          WebKit::CacheStorageManager::initializeCacheSize((WebKit::CacheStorageManager *)v47, *(WebKit::CacheStorageCache **)(v119 + 16));
          while (1)
          {
            v119 += 24;
            if ((WTF::StringImpl *)v119 == v120)
              break;
            if (*(_OWORD *)v119 != 0 && *(_QWORD *)(v119 + 8) != -1)
              goto LABEL_150;
          }
          v119 = (uint64_t)v120;
LABEL_150:
          ;
        }
        while (v119 != v117);
      }
      goto LABEL_151;
    }
    v91 = *(_QWORD *)(v47 + 88);
    v92 = v91 + 8 * v90;
    while (1)
    {
      v141[0] = *(_OWORD *)(*(_QWORD *)v91 + 8);
      v93 = *v89;
      if (*v89
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(v47 + 48), 0), (v93 = *v89) != 0))
      {
        v94 = *(_DWORD *)(v93 - 8);
      }
      else
      {
        v94 = 0;
      }
      LODWORD(v152) = -1640531527;
      WORD2(v152) = 0;
      BYTE6(v152) = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)&v152, v141);
      v95 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v152) & v94;
      v96 = (unint64_t *)(v93 + 16 * v95);
      v98 = *v96;
      v97 = v96[1];
      if (*(_OWORD *)v96 != 0)
      {
        v99 = 0;
        v100 = 1;
        while (__PAIR128__(v97, v98) != v141[0])
        {
          if (v97 == -1)
            v99 = v96;
          v95 = (v95 + v100) & v94;
          v96 = (unint64_t *)(v93 + 16 * v95);
          v98 = *v96;
          v97 = v96[1];
          ++v100;
          if (*(_OWORD *)v96 == 0)
          {
            if (v99)
            {
              *v99 = 0;
              v99[1] = 0;
              --*(_DWORD *)(*v89 - 16);
              v96 = v99;
            }
            goto LABEL_110;
          }
        }
        goto LABEL_119;
      }
LABEL_110:
      *(_OWORD *)v96 = v141[0];
      v101 = *v89;
      v102 = *v89 ? *(_DWORD *)(v101 - 12) + 1 : 1;
      *(_DWORD *)(v101 - 12) = v102;
      v103 = *v89;
      v104 = *v89 ? *(_DWORD *)(v103 - 12) : 0;
      v105 = (*(_DWORD *)(v103 - 16) + v104);
      v106 = *(unsigned int *)(v103 - 4);
      if (v106 > 0x400)
        break;
      if (3 * v106 <= 4 * v105)
        goto LABEL_118;
LABEL_119:
      v91 += 8;
      if (v91 == v92)
        goto LABEL_124;
    }
    if (v106 > 2 * v105)
      goto LABEL_119;
LABEL_118:
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(v47 + 48), (uint64_t)v96);
    goto LABEL_119;
  }
  LOBYTE(v137) = 4;
  LODWORD(v139[0]) = 1;
  v44 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v44 + 16))(v44, &v137);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  if (LODWORD(v139[0]) != -1)
    return ((uint64_t (*)(_OWORD *, WTF::StringImpl **))off_1E34C5E80[LODWORD(v139[0])])(v141, &v137);
  return result;
}

WTF::StringImpl *WebKit::CacheStorageRecordInformation::updateVaryHeaders(WebKit::CacheStorageRecordInformation *this, const WebCore::ResourceRequest *a2, const WebCore::ResourceResponseData *a3)
{
  WTF::StringImpl *v6;
  _QWORD *v7;
  _QWORD *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *result;
  _QWORD *v11;
  WTF::StringImpl *v12;

  WebCore::HTTPHeaderMap::get();
  if (!v12 || (*((_BYTE *)a3 + 258) & 0xFE) == 2)
  {
    *((_BYTE *)this + 144) = 0;
LABEL_7:
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v9)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v6);
    goto LABEL_9;
  }
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = off_1E34C5EA0;
  v7[1] = this;
  v7[2] = a2;
  v11 = v7;
  MEMORY[0x19AEB6294](&v12, 44, &v11);
  v8 = v11;
  v11 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  if (*((_BYTE *)this + 144))
    goto LABEL_7;
LABEL_9:
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::CacheStorageCache::removeAllRecords(WebKit::CacheStorageCache *this)
{
  _QWORD *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _DWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  const WTF::String *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  _QWORD *v28;
  WTF::StringImpl *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v33 = 0;
  v34 = 0;
  v1 = (_QWORD *)*((_QWORD *)this + 9);
  v2 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v1);
  v4 = v2;
  v5 = v3;
  if (v1)
    v6 = (WTF::StringImpl *)&v1[3 * *((unsigned int *)v1 - 1)];
  else
    v6 = 0;
  if (v6 == v2)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v31 = v6;
    do
    {
      v8 = *((unsigned int *)v4 + 5);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = *((_QWORD *)v4 + 1);
        v11 = 160 * v8;
        do
        {
          v12 = v10 + v9;
          v13 = HIDWORD(v34);
          if (HIDWORD(v34) == (_DWORD)v34)
          {
            WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation&>((uint64_t)&v33, v10 + v9);
          }
          else
          {
            v14 = v33;
            v15 = WebKit::NetworkCache::Key::Key(v33 + 160 * HIDWORD(v34), v10 + v9);
            v16 = *(_OWORD *)(v12 + 72);
            *(_OWORD *)(v15 + 88) = *(_OWORD *)(v12 + 88);
            *(_OWORD *)(v15 + 72) = v16;
            v17 = *(_DWORD **)(v12 + 104);
            if (v17)
              *v17 += 2;
            v18 = v14 + 160 * v13;
            *(_QWORD *)(v18 + 104) = v17;
            v19 = *(_OWORD *)(v10 + v9 + 128);
            *(_OWORD *)(v18 + 112) = *(_OWORD *)(v10 + v9 + 112);
            *(_OWORD *)(v18 + 128) = v19;
            *(_BYTE *)(v18 + 144) = *(_BYTE *)(v10 + v9 + 144);
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v18 + 152), (_QWORD **)(v10 + v9 + 152));
            HIDWORD(v34) = v13 + 1;
          }
          v7 += *(_QWORD *)(v10 + v9 + 96);
          v9 += 160;
        }
        while (v11 != v9);
      }
      while (1)
      {
        v4 = (WTF::StringImpl *)((char *)v4 + 24);
        if (v4 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v4 + 1) > 1)
          goto LABEL_18;
      }
      v4 = v5;
LABEL_18:
      ;
    }
    while (v4 != v31);
  }
  v20 = *((_QWORD *)this + 3);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    v22 = !v21 || v7 == 0;
    if (!v22 && *(_BYTE *)(v21 + 32))
    {
      v23 = (const WTF::String *)(*(_QWORD *)(v21 + 24) - v7);
      *(_QWORD *)(v21 + 24) = v23;
      *(_BYTE *)(v21 + 32) = 1;
      WebKit::writeSizeFile(*(WTF::StringImpl **)(v21 + 56), v23);
    }
  }
  v24 = *((_QWORD *)this + 9);
  if (v24)
  {
    *((_QWORD *)this + 9) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v24, v3);
  }
  v25 = *((_QWORD *)this + 10);
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v26 = off_1E34C6200;
  v32 = v26;
  (*(void (**)(uint64_t, uint64_t *, _QWORD **))(*(_QWORD *)v25 + 32))(v25, &v33, &v32);
  v28 = v32;
  v32 = 0;
  if (v28)
    (*(void (**)(_QWORD *))(*v28 + 8))(v28);
  return WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v27);
}

WTF::StringImpl *WebKit::CacheStorageDiskStore::versionDirectoryPath(WebKit::CacheStorageDiskStore *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  unsigned int v4;
  uint64_t v5[2];

  v5[0] = (uint64_t)"Version ";
  v5[1] = 9;
  v4 = 16;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>(v5, &v4, &v3);
  if (v3)
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    result = v3;
    v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::CacheStorageDiskStore::recordsDirectoryPath(WebKit::CacheStorageDiskStore *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;

  WebKit::CacheStorageDiskStore::versionDirectoryPath((WebKit::CacheStorageDiskStore *)&v3);
  WTF::FileSystemImpl::pathByAppendingComponent();
  result = v3;
  v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::CacheStorageDiskStore::recordFilePath(WebKit::CacheStorageDiskStore *this, const WebKit::NetworkCache::Key *a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  void *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  int v22;
  WTF::StringImpl *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  WebKit::CacheStorageDiskStore::recordsDirectoryPath((WebKit::CacheStorageDiskStore *)&v23);
  WebKit::NetworkCache::Key::hashAsString(a3 + 52, &v20);
  *(_QWORD *)&v24 = 0;
  v4 = (int)v20;
  if (v20)
  {
    v5 = *((unsigned __int8 *)v20 + 16);
    v4 = *((_DWORD *)v20 + 1);
    *(_QWORD *)&v24 = *((_QWORD *)v20 + 1);
    v6 = (v5 >> 2) & 1;
  }
  else
  {
    LOBYTE(v6) = 1;
  }
  DWORD2(v24) = v4;
  BYTE12(v24) = v6;
  v25 = 0;
  v7 = *(_QWORD *)(a3 + 8);
  if (v7)
  {
    v8 = *(unsigned __int8 *)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 8);
    LODWORD(v7) = *(_DWORD *)(v7 + 4);
    v25 = v9;
    v10 = (v8 >> 2) & 1;
  }
  else
  {
    LOBYTE(v10) = 1;
  }
  v26 = v7;
  v27 = v10;
  WebKit::NetworkCache::Key::hashAsString(a3 + 32, &v19);
  v28 = 0;
  v11 = (int)v19;
  if (v19)
  {
    v12 = *((unsigned __int8 *)v19 + 16);
    v11 = *((_DWORD *)v19 + 1);
    v28 = *((_QWORD *)v19 + 1);
    v13 = (v12 >> 2) & 1;
  }
  else
  {
    LOBYTE(v13) = 1;
  }
  v29 = v11;
  v30 = v13;
  WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v21, &v24, 3uLL);
  WTF::FileSystemImpl::pathByAppendingComponents();
  v15 = v21;
  if (v21)
  {
    v21 = 0;
    v22 = 0;
    WTF::fastFree(v15, v14);
  }
  v16 = v19;
  v19 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::CacheStorageDiskStore::recordBlobFilePath(WebKit::CacheStorageDiskStore *this, const WTF::String *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6[2];

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = a2;
  v6[0] = (uint64_t)"-blob";
  v6[1] = 6;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v5, v6, this);
  if (*(_QWORD *)this)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void WebKit::readRecordInfoFromFileData(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  __int128 *v4;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::WallTime *v13;
  WTF::StringImpl *v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  _DWORD *v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  CFTypeRef v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  CFTypeRef v57;
  int v58;
  WTF::StringImpl *v59;
  __int128 v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  CFTypeRef v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  char v71;
  WTF::StringImpl *v72[4];
  _OWORD v73[2];
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  WTF::StringImpl *v87;
  __int128 v88;
  __int128 v89;
  WTF::StringImpl *v90[2];
  __int128 v91;
  __int128 v92;
  unint64_t v93;
  __int128 v94;
  char v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  char v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  CFTypeRef v115;
  _DWORD v116[2];
  WTF::StringImpl *v117;
  __int128 v118;
  __int128 v119;
  WTF::StringImpl *v120;
  char v121;
  _BYTE v122[280];
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  char v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  CFTypeRef cf;
  int v145;
  WTF::StringImpl *v146;
  __int128 v147;
  __int128 v148;
  WTF::StringImpl *v149;
  char v150;
  _BYTE v151[280];
  uint64_t v152;
  char v153;
  int v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  WTF::StringImpl *v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  unint64_t v165;
  char v166;
  _BYTE v167[72];
  __int128 v168;
  __int128 v169;
  _DWORD *v170;
  __int128 v171;
  __int128 v172;
  char v173;
  _QWORD *v174;
  uint64_t v175;
  __int128 v176[7];
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 912) = 0;
    return;
  }
  WTF::Persistence::Decoder::Decoder();
  memset(&v72[1], 0, 24);
  *((_QWORD *)&v75 + 1) = 0;
  *(_QWORD *)&v78 = 0;
  v80 = 0;
  LOBYTE(v81) = 0;
  v82 = 0;
  WTF::Persistence::Decoder::operator>>();
  LOBYTE(v154) = 0;
  v166 = 0;
  *(_QWORD *)&v73[0] = 0;
  v10 = v72[3];
  v72[3] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v72[2];
  v72[2] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v72[1];
  v72[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)&v124);
  if (v166)
  {
    if (v154 == 16)
    {
      WTF::WallTime::now(v13);
      if (*(double *)&v160 <= v15)
      {
        if (!v166)
          goto LABEL_75;
        v16 = a4 - v165;
        if (a4 < v165)
          goto LABEL_75;
        v17 = v162;
        if ((_QWORD)v162 == -1)
        {
          v17 = v16;
        }
        else if (v16 < (unint64_t)v162)
        {
          while (1)
          {
LABEL_75:
            __break(1u);
            LOBYTE(v124) = 0;
            v153 = 0;
            if (v71)
            {
              v68 = v70;
              v70 = 0;
              if (v68)
              {
                if (*(_DWORD *)v68 == 2)
                  WTF::StringImpl::destroy(v68, v14);
                else
                  *(_DWORD *)v68 -= 2;
              }
            }
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
                WTF::StringImpl::destroy(v69, v14);
              else
                *(_DWORD *)v69 -= 2;
            }
            std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v175);
LABEL_53:
            WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v176);
            if (!v153)
              goto LABEL_32;
            if (v166)
            {
              WebKit::NetworkCache::Key::Key((uint64_t)v167, (uint64_t)&v155);
              if (v153)
              {
                v168 = (unint64_t)v124;
                *(_QWORD *)&v169 = 0;
                *((_QWORD *)&v169 + 1) = v152;
                v24 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&v126);
                v25 = *(_DWORD **)v24;
                if (*(_QWORD *)v24)
                  *v25 += 2;
                v170 = v25;
                v26 = *(_OWORD *)(v24 + 8);
                v172 = *(_OWORD *)(v24 + 24);
                v171 = v26;
                v173 = 0;
                v174 = 0;
                if (v153)
                {
                  WebKit::CacheStorageRecordInformation::updateVaryHeaders((WebKit::CacheStorageRecordInformation *)v167, (const WebCore::ResourceRequest *)&v126, (const WebCore::ResourceResponseData *)v151);
                  WebKit::NetworkCache::Key::Key((uint64_t)v72, (uint64_t)v167);
                  v75 = v168;
                  v76 = v169;
                  v27 = (uint64_t)v170;
                  if (v170)
                    *v170 += 2;
                  v77 = v27;
                  v78 = v171;
                  v79 = v172;
                  LOBYTE(v80) = v173;
                  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v81, &v174);
                  if (v166)
                  {
                    v69 = (WTF::StringImpl *)&v126;
                    LODWORD(v82) = v154;
                    v28 = v155;
                    v155 = 0u;
                    v83 = v28;
                    v29 = v156;
                    v156 = 0u;
                    v84 = v29;
                    v85 = v157;
                    v86 = v158;
                    v87 = v159;
                    v88 = v160;
                    v89 = v161;
                    v93 = v165;
                    v91 = v163;
                    v92 = v164;
                    *(_OWORD *)v90 = v162;
                    if (v153)
                    {
                      v94 = v124;
                      v95 = v125;
                      v30 = v126;
                      v126 = 0;
                      v96 = v30;
                      v97 = v127;
                      v98 = v128;
                      LODWORD(v127) = v127 & 0xFFFFFFFE;
                      v31 = v129;
                      v129 = 0;
                      v99 = v31;
                      v32 = *(__int128 *)((char *)v4 + 88);
                      v100 = *(__int128 *)((char *)v4 + 72);
                      v101 = v32;
                      v130 = v100 & 0xFFFFFFFE;
                      v102 = v131;
                      v33 = v132;
                      v132 = 0uLL;
                      v103 = v33;
                      *(_QWORD *)&v33 = v133;
                      v133 = 0;
                      v104 = v33;
                      v34 = v134;
                      v134 = 0;
                      v105 = v34;
                      *(_QWORD *)&v33 = v135;
                      v135 = 0;
                      v106 = v33;
                      v35 = v136;
                      v136 = 0;
                      v107 = v35;
                      *(_QWORD *)&v33 = v137;
                      v137 = 0;
                      v108 = v33;
                      v110 = v139;
                      v109 = v138;
                      v36 = v140;
                      v140 = 0uLL;
                      v111 = v36;
                      v112 = v141;
                      v114 = v143;
                      v113 = v142;
                      v37 = cf;
                      v141 = 0;
                      cf = 0;
                      v115 = v37;
                      *(_DWORD *)((char *)v116 + 3) = *(_DWORD *)((char *)v4 + 227);
                      v116[0] = v145;
                      v117 = v146;
                      v118 = v147;
                      v119 = v148;
                      v38 = v149;
                      v146 = 0;
                      v149 = 0;
                      v120 = v38;
                      v121 = v150;
                      WebCore::ResourceResponseData::ResourceResponseData((uint64_t)v122, (uint64_t)v151);
                      v39 = *(_OWORD *)&v72[2];
                      *(_OWORD *)a1 = *(_OWORD *)v72;
                      *(_OWORD *)(a1 + 16) = v39;
                      v40 = v73[1];
                      *(_OWORD *)(a1 + 32) = v73[0];
                      *(_OWORD *)(a1 + 48) = v40;
                      v41 = v76;
                      *(_OWORD *)(a1 + 72) = v75;
                      v123 = v152;
                      memset(v72, 0, sizeof(v72));
                      *(_QWORD *)(a1 + 64) = v74;
                      *(_OWORD *)(a1 + 88) = v41;
                      WTF::URL::URL(a1 + 104, &v77);
                      *(_BYTE *)(a1 + 144) = v80;
                      v42 = v81;
                      v81 = 0;
                      *(_QWORD *)(a1 + 152) = v42;
                      *(_DWORD *)(a1 + 160) = v82;
                      v43 = v83;
                      v83 = 0u;
                      *(_OWORD *)(a1 + 168) = v43;
                      v44 = v84;
                      v84 = 0u;
                      *(_OWORD *)(a1 + 184) = v44;
                      v45 = v86;
                      *(_OWORD *)(a1 + 200) = v85;
                      *(_OWORD *)(a1 + 216) = v45;
                      *(_QWORD *)(a1 + 232) = v87;
                      v46 = v89;
                      *(_OWORD *)(a1 + 240) = v88;
                      *(_OWORD *)(a1 + 256) = v46;
                      v47 = *(_OWORD *)v90;
                      v48 = v91;
                      v49 = v92;
                      *(_QWORD *)(a1 + 320) = v93;
                      *(_OWORD *)(a1 + 288) = v48;
                      *(_OWORD *)(a1 + 304) = v49;
                      *(_OWORD *)(a1 + 272) = v47;
                      v50 = v94;
                      *(_BYTE *)(a1 + 352) = v95;
                      *(_OWORD *)(a1 + 336) = v50;
                      WTF::URL::URL(a1 + 360, &v96);
                      WTF::URL::URL(a1 + 400, &v99);
                      *(_QWORD *)(a1 + 440) = v102;
                      v51 = v103;
                      v103 = 0u;
                      *(_OWORD *)(a1 + 448) = v51;
                      *(_QWORD *)&v51 = v104;
                      v104 = 0;
                      *(_QWORD *)(a1 + 464) = v51;
                      v52 = v105;
                      v105 = 0;
                      *(_QWORD *)(a1 + 472) = v52;
                      *(_QWORD *)&v51 = v106;
                      v106 = 0;
                      *(_QWORD *)(a1 + 480) = v51;
                      v53 = v107;
                      v107 = 0;
                      *(_QWORD *)(a1 + 488) = v53;
                      *(_QWORD *)&v51 = v108;
                      v108 = 0;
                      *(_QWORD *)(a1 + 496) = v51;
                      LODWORD(v53) = v109;
                      *(_BYTE *)(a1 + 508) = v110;
                      *(_DWORD *)(a1 + 504) = v53;
                      v54 = v111;
                      v111 = 0u;
                      *(_OWORD *)(a1 + 512) = v54;
                      v55 = v112;
                      v112 = 0;
                      *(_QWORD *)(a1 + 528) = v55;
                      v56 = v113;
                      *(_BYTE *)(a1 + 544) = v114;
                      *(_QWORD *)(a1 + 536) = v56;
                      v57 = v115;
                      v115 = 0;
                      *(_QWORD *)(a1 + 552) = v57;
                      v58 = v116[0];
                      *(_DWORD *)(a1 + 563) = *(_DWORD *)((char *)v116 + 3);
                      *(_DWORD *)(a1 + 560) = v58;
                      v59 = v117;
                      v117 = 0;
                      *(_QWORD *)(a1 + 568) = v59;
                      v60 = v119;
                      *(_OWORD *)(a1 + 576) = v118;
                      *(_OWORD *)(a1 + 592) = v60;
                      v61 = v120;
                      v120 = 0;
                      *(_QWORD *)(a1 + 608) = v61;
                      *(_BYTE *)(a1 + 616) = v121;
                      WebCore::ResourceResponseData::ResourceResponseData(a1 + 624, (uint64_t)v122);
                      *(_QWORD *)(a1 + 904) = v123;
                      *(_BYTE *)(a1 + 912) = 1;
                      WebKit::StoredRecordInformation::~StoredRecordInformation((WebKit::StoredRecordInformation *)v72, v62);
                      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v167, v63);
                      if (v153)
                      {
                        WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v151, v14);
                        v65 = v149;
                        v149 = 0;
                        if (v65)
                        {
                          if (*(_DWORD *)v65 == 2)
                            WTF::StringImpl::destroy(v65, v64);
                          else
                            *(_DWORD *)v65 -= 2;
                        }
                        v66 = v146;
                        v146 = 0;
                        if (v66)
                        {
                          if (*(_DWORD *)v66 == 2)
                            WTF::StringImpl::destroy(v66, v64);
                          else
                            *(_DWORD *)v66 -= 2;
                        }
                        v67 = cf;
                        cf = 0;
                        if (v67)
                          CFRelease(v67);
                        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v126);
                      }
                      goto LABEL_33;
                    }
                  }
                }
              }
            }
          }
        }
        WebKit::computeSHA1((uint64_t)v72, a3 + v165, v17, *a2);
        if (*((WTF::StringImpl **)&v160 + 1) == v72[0]
          && (WTF::StringImpl *)v161 == v72[1]
          && DWORD2(v161) == (unint64_t)LODWORD(v72[2]))
        {
          v4 = &v124;
          WTF::Persistence::Decoder::Decoder();
          WTF::Persistence::Decoder::operator>>();
          LOBYTE(v124) = 0;
          v153 = 0;
          goto LABEL_53;
        }
      }
    }
  }
LABEL_32:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 912) = 0;
LABEL_33:
  if (v166)
  {
    v20 = (WTF::StringImpl *)*((_QWORD *)&v156 + 1);
    *((_QWORD *)&v156 + 1) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v14);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = (WTF::StringImpl *)v156;
    *(_QWORD *)&v156 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v14);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = (WTF::StringImpl *)*((_QWORD *)&v155 + 1);
    *((_QWORD *)&v155 + 1) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v14);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = (WTF::StringImpl *)v155;
    *(_QWORD *)&v155 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v14);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
}

uint64_t WebKit::computeSHA1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v7[96];
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v8[0] = a4;
  WTF::SHA1::SHA1((WTF::SHA1 *)v7);
  MEMORY[0x19AEABB6C](v7, v8, 8);
  MEMORY[0x19AEABB6C](v7, a2, a3);
  return WTF::SHA1::computeHash();
}

WTF::StringImpl *WebKit::CacheStorageDiskStore::readAllRecordInfos(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18[2];
  WTF::StringImpl *v19[2];
  uint64_t v20;

  ++*(_DWORD *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v4 = &off_1E34C6278;
  *((_QWORD *)v4 + 1) = a1;
  *((_QWORD *)v4 + 2) = a1;
  *((_QWORD *)v4 + 3) = v3;
  v5 = *(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(a1 + 8);
  v17 = a1;
  v18[0] = (WTF::StringImpl *)a1;
  WebKit::CacheStorageDiskStore::recordsDirectoryPath((WebKit::CacheStorageDiskStore *)&v16);
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v19[1] = v4;
  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v6 = &off_1E34C6228;
  *(_QWORD *)(v6 + 8) = v17;
  *(WTF::StringImpl **)(v6 + 16) = v18[0];
  v7 = v18[1];
  *(_OWORD *)v18 = 0u;
  *(_QWORD *)(v6 + 24) = v7;
  *(WTF::StringImpl **)(v6 + 32) = v19[0];
  v8 = v19[1];
  *(_OWORD *)v19 = 0u;
  *(_QWORD *)(v6 + 40) = v8;
  v20 = v6;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 32))(v5, &v20);
  v10 = v20;
  v20 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v19[1];
  v19[1] = 0;
  if (v11)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 8))(v11);
  v12 = v19[0];
  v19[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v18[1];
  v18[1] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v18[0];
  v18[0] = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
    else
      --*((_DWORD *)v14 + 2);
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::CacheStorageDiskStore::readRecords(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;

  v5 = result;
  v30 = 0;
  v31 = 0;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    if (v6 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v7 = WTF::fastMalloc((WTF *)(8 * v6));
    LODWORD(v31) = v6;
    v30 = v7;
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v8)
    {
      v9 = v7;
      v10 = 0;
      v11 = *(_QWORD *)a2;
      v12 = 160 * v8;
      do
      {
        v13 = v10;
        WebKit::CacheStorageDiskStore::recordFilePath((WebKit::CacheStorageDiskStore *)&v32, *(const WebKit::NetworkCache::Key **)(v5 + 24), v11);
        v10 = v13 + 1;
        *(_QWORD *)(v9 + 8 * v13) = v32;
        v11 += 160;
        v12 -= 160;
      }
      while (v12);
      HIDWORD(v31) = v13 + 1;
    }
  }
  ++*(_DWORD *)(v5 + 8);
  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v28, (uint64_t *)a2);
  v14 = *a3;
  *a3 = 0;
  v29 = v14;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v15 = off_1E34C62F0;
  v15[1] = v5;
  v15[2] = v5;
  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v15 + 3), v28);
  v16 = v29;
  v29 = 0;
  v15[5] = v16;
  v17 = *(_QWORD *)(v5 + 48);
  ++*(_DWORD *)(v5 + 8);
  v32 = v5;
  v33 = (_DWORD *)v5;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((unsigned int *)&v30, (uint64_t)&v34);
  v36 = v15;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v18 = off_1E34C62A0;
  v18[1] = v32;
  v18[2] = v33;
  v19 = v34;
  v33 = 0;
  v34 = 0;
  v18[3] = v19;
  v18[4] = v35;
  v20 = v36;
  v35 = 0;
  v36 = 0;
  v18[5] = v20;
  v37 = v18;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v17 + 32))(v17, &v37);
  v22 = v37;
  v37 = 0;
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 8))(v22);
  v23 = v36;
  v36 = 0;
  if (v23)
    (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v21);
  v25 = v33;
  v33 = 0;
  if (v25)
  {
    if (v25[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
    else
      --v25[2];
  }
  v26 = v29;
  v29 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v24);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v27);
}

uint64_t WebKit::CacheStorageDiskStore::deleteRecords(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _DWORD *v14;
  __int128 v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _DWORD *v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v42[3];

  v4 = result;
  v42[1] = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v29 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v7 = WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v29) = v5;
    v28 = v7;
    v8 = *(_DWORD *)(a2 + 12);
    if (v8)
    {
      v9 = v7;
      v10 = 0;
      v11 = *(_QWORD *)a2;
      v12 = v11 + 160 * v8;
      do
      {
        WebKit::NetworkCache::Key::Key((uint64_t)&v31, v11);
        v13 = *(_OWORD *)(v11 + 88);
        v36 = *(_OWORD *)(v11 + 72);
        v37 = v13;
        v14 = *(_DWORD **)(v11 + 104);
        if (v14)
          *v14 += 2;
        v38 = v14;
        v15 = *(_OWORD *)(v11 + 128);
        v39 = *(_OWORD *)(v11 + 112);
        v40 = v15;
        v41 = *(_BYTE *)(v11 + 144);
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(v42, (_QWORD **)(v11 + 152));
        WebKit::CacheStorageDiskStore::recordFilePath((WebKit::CacheStorageDiskStore *)&v30, *(const WebKit::NetworkCache::Key **)(v4 + 24), (uint64_t)&v31);
        v16 = v10 + 1;
        *(_QWORD *)(v9 + 8 * v10) = v30;
        v30 = 0;
        WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)&v31, v17);
        v11 += 160;
        ++v10;
      }
      while (v11 != v12);
      HIDWORD(v29) = v16;
    }
  }
  v18 = *(_QWORD *)(v4 + 48);
  ++*(_DWORD *)(v4 + 8);
  v31 = v4;
  v32 = (_DWORD *)v4;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((unsigned int *)&v28, (uint64_t)&v33);
  v19 = *a3;
  *a3 = 0;
  v35 = v19;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v20 = off_1E34C6318;
  v20[1] = v31;
  v20[2] = v32;
  v21 = v33;
  v32 = 0;
  v33 = 0;
  v20[3] = v21;
  v20[4] = v34;
  v22 = v35;
  v34 = 0;
  v35 = 0;
  v20[5] = v22;
  v30 = v20;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v18 + 32))(v18, &v30);
  v24 = v30;
  v30 = 0;
  if (v24)
    (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  v25 = v35;
  v35 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v23);
  v27 = v32;
  v32 = 0;
  if (v27)
  {
    if (v27[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
    else
      --v27[2];
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v26);
}

uint64_t WebKit::CacheStorageDiskStore::writeRecords(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  size_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  WTF::FastMalloc *v30;
  size_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  WTF::FastMalloc *v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  uint64_t v42;
  void *v43;
  WTF *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  _DWORD *v73;
  void *v74;
  void *v75;
  uint64_t *v77;
  void *__src;
  size_t __n;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  _QWORD v98[2];
  int v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;

  v3 = MEMORY[0x1E0C80A78](a1, a2, a3);
  v77 = v5;
  v6 = v3;
  v102 = *MEMORY[0x1E0C80C00];
  v84 = 0;
  v85 = 0;
  v82 = 0;
  v83 = 0;
  v80 = 0;
  v81 = 0;
  v7 = *(_DWORD *)(v4 + 12);
  if (v7)
  {
    v8 = *(_QWORD *)v4;
    v9 = *(_QWORD *)v4 + 736 * v7;
    do
    {
      WebKit::CacheStorageDiskStore::recordFilePath((WebKit::CacheStorageDiskStore *)&v86, *(const WebKit::NetworkCache::Key **)(v6 + 24), v8);
      LODWORD(v11) = HIDWORD(v85);
      if (HIDWORD(v85) == (_DWORD)v85)
      {
        v50 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v84, HIDWORD(v85) + 1, (unint64_t)&v86);
        v11 = HIDWORD(v85);
        v51 = v84;
        v52 = *v50;
        *v50 = 0;
        *(_QWORD *)(v51 + 8 * v11) = v52;
      }
      else
      {
        v12 = v86;
        v86 = 0;
        *(_QWORD *)(v84 + 8 * HIDWORD(v85)) = v12;
      }
      HIDWORD(v85) = v11 + 1;
      v13 = v86;
      v86 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v10);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *(unsigned int *)(v8 + 728);
      if ((_DWORD)v14 == -1)
        std::__throw_bad_variant_access[abi:sn180100]();
      v86 = (WTF::StringImpl *)&v94;
      ((void (*)(void **__return_ptr, WTF::StringImpl **, uint64_t))off_1E34C5EB8[v14])(&__src, &v86, v8 + 720);
      v98[0] = 0;
      v98[1] = 0;
      v99 = 0;
      v15 = (WTF *)WebKit::computeSHA1((uint64_t)v98, (uint64_t)__src, HIDWORD(__n), *(_QWORD *)(v6 + 32));
      v16 = HIDWORD(__n);
      v17 = WTF::pageSize(v15);
      WebKit::NetworkCache::Key::Key((uint64_t)&v94, v8);
      WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&v86);
      MEMORY[0x19AEAB278](&v86, *(double *)(v8 + 72));
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Coder<WebCore::ResourceRequest>::encodeForPersistence();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      MEMORY[0x19AEAB26C](&v86, *(unsigned __int8 *)(v8 + 374));
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      WTF::Persistence::Encoder::operator<<();
      MEMORY[0x19AEAB26C](&v86, 0);
      WTF::Persistence::Coder<WebCore::ResourceResponseData>::encodeForPersistence();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Encoder::encodeChecksum((WTF::Persistence::Encoder *)&v86);
      v18 = DWORD1(v87);
      if (DWORD1(v87))
      {
        v19 = v86;
        v20 = WTF::fastMalloc((WTF *)DWORD1(v87));
        v21 = (void *)v20;
        v22 = 0;
        do
        {
          *(_BYTE *)(v20 + v22) = *((_BYTE *)v19 + v22);
          ++v22;
        }
        while (v18 != v22);
      }
      else
      {
        v21 = 0;
      }
      WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&v86);
      v23 = *(_QWORD *)(v6 + 32);
      WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&v86);
      MEMORY[0x19AEAB290](&v86, 16);
      WTF::Persistence::Coder<WebKit::NetworkCache::Key>::encodeForPersistence();
      v100 = 0;
      WTF::Persistence::Coder<WTF::WallTime>::encodeForPersistence();
      WebKit::computeSHA1((uint64_t)&v100, (uint64_t)v21, v18, v23);
      WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence();
      WTF::Persistence::Encoder::operator<<();
      WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence();
      WTF::Persistence::Encoder::operator<<();
      MEMORY[0x19AEAB26C](&v86, v17 >= v16);
      WTF::Persistence::Encoder::encodeChecksum((WTF::Persistence::Encoder *)&v86);
      v24 = v86;
      v25 = DWORD1(v87);
      v100 = 0;
      v101 = 0;
      if (DWORD1(v87))
      {
        if (DWORD1(v87) <= 0x10uLL)
          v26 = 16;
        else
          v26 = DWORD1(v87);
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v100, (WTF::FastMalloc *)v26);
        if (v25 < HIDWORD(v101))
        {
LABEL_88:
          __break(0xC471u);
          JUMPOUT(0x1971A6F28);
        }
        memcpy((char *)v100 + HIDWORD(v101), v24, v25);
        HIDWORD(v101) = v25;
      }
      if ((_DWORD)v18)
      {
        v27 = v25 + v18;
        if (v25 + v18 > v101)
        {
          v28 = v101 + ((unint64_t)v101 >> 2);
          v29 = v28 >= 0x10 ? v28 + 1 : 16;
          v30 = (WTF::FastMalloc *)(v29 <= v27 ? v25 + v18 : v29);
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v100, v30);
          v25 = HIDWORD(v101);
          if (v27 < HIDWORD(v101))
          {
            __break(0xC471u);
            JUMPOUT(0x1971A6F30);
          }
        }
        memcpy((char *)v100 + v25, v21, v18);
        v25 = v27;
        HIDWORD(v101) = v27;
      }
      if (v17 >= v16)
      {
        v31 = HIDWORD(__n);
        if (HIDWORD(__n))
        {
          v32 = v9;
          v33 = __src;
          v34 = HIDWORD(__n) + v25;
          if (v34 > v101)
          {
            v35 = v101 + ((unint64_t)v101 >> 2);
            v36 = v35 >= 0x10 ? v35 + 1 : 16;
            v37 = (WTF::FastMalloc *)(v36 <= v34 ? HIDWORD(__n) + v25 : v36);
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v100, v37);
            v25 = HIDWORD(v101);
            if (v34 < HIDWORD(v101))
              goto LABEL_88;
          }
          memcpy((char *)v100 + v25, v33, v31);
          HIDWORD(v101) = v34;
          v9 = v32;
        }
      }
      WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&v86);
      if (HIDWORD(v83) == (_DWORD)v83)
      {
        WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v82, (unint64_t)&v100);
      }
      else
      {
        v39 = v82 + 16 * HIDWORD(v83);
        *(_QWORD *)v39 = 0;
        *(_QWORD *)(v39 + 8) = 0;
        v40 = v100;
        v100 = 0;
        *(_QWORD *)v39 = v40;
        LODWORD(v40) = v101;
        LODWORD(v101) = 0;
        *(_DWORD *)(v39 + 8) = (_DWORD)v40;
        LODWORD(v40) = HIDWORD(v101);
        HIDWORD(v101) = 0;
        *(_DWORD *)(v39 + 12) = (_DWORD)v40;
        ++HIDWORD(v83);
      }
      if (v17 >= v16)
      {
        v41 = (WTF *)__src;
        if (__src)
        {
          __src = 0;
          LODWORD(__n) = 0;
          WTF::fastFree(v41, v38);
        }
        __src = 0;
        __n = 0;
      }
      if (HIDWORD(v81) == (_DWORD)v81)
      {
        WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v80, (unint64_t)&__src);
      }
      else
      {
        v42 = v80 + 16 * HIDWORD(v81);
        *(_QWORD *)v42 = 0;
        *(_QWORD *)(v42 + 8) = 0;
        v43 = __src;
        __src = 0;
        *(_QWORD *)v42 = v43;
        LODWORD(v43) = __n;
        LODWORD(__n) = 0;
        *(_DWORD *)(v42 + 8) = (_DWORD)v43;
        LODWORD(v43) = HIDWORD(__n);
        HIDWORD(__n) = 0;
        *(_DWORD *)(v42 + 12) = (_DWORD)v43;
        ++HIDWORD(v81);
      }
      v44 = v100;
      if (v100)
      {
        v100 = 0;
        LODWORD(v101) = 0;
        WTF::fastFree(v44, v38);
      }
      if (v21)
        WTF::fastFree((WTF *)v21, v38);
      v45 = v97;
      v97 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v38);
        else
          *(_DWORD *)v45 -= 2;
      }
      v46 = v96;
      v96 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v38);
        else
          *(_DWORD *)v46 -= 2;
      }
      v47 = v95;
      v95 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v38);
        else
          *(_DWORD *)v47 -= 2;
      }
      v48 = v94;
      v94 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v38);
        else
          *(_DWORD *)v48 -= 2;
      }
      v49 = (WTF *)__src;
      if (__src)
      {
        __src = 0;
        LODWORD(__n) = 0;
        WTF::fastFree(v49, v38);
      }
      v8 += 736;
    }
    while (v8 != v9);
  }
  v53 = *(_QWORD *)(v6 + 48);
  ++*(_DWORD *)(v6 + 8);
  v86 = (WTF::StringImpl *)v6;
  *(_QWORD *)&v87 = v6;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((unsigned int *)&v84, (uint64_t)&v87 + 8);
  v54 = v82;
  v82 = 0;
  v89 = v54;
  v55 = v83;
  v83 = 0;
  v90 = v55;
  v56 = v80;
  v80 = 0;
  v91 = v56;
  v57 = v81;
  v81 = 0;
  v92 = v57;
  v58 = *v77;
  *v77 = 0;
  v93 = v58;
  v59 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v59 = off_1E34C6368;
  *((_QWORD *)v59 + 1) = v86;
  *((_QWORD *)v59 + 2) = v87;
  v60 = *((_QWORD *)&v87 + 1);
  v87 = 0uLL;
  *((_QWORD *)v59 + 3) = v60;
  v61 = v88;
  v88 = 0;
  *((_QWORD *)v59 + 4) = v61;
  v62 = v89;
  v89 = 0;
  *((_QWORD *)v59 + 5) = v62;
  v63 = v90;
  v90 = 0;
  *((_QWORD *)v59 + 6) = v63;
  v64 = v91;
  v91 = 0;
  *((_QWORD *)v59 + 7) = v64;
  v65 = v92;
  v92 = 0;
  *((_QWORD *)v59 + 8) = v65;
  v66 = v93;
  v93 = 0;
  *((_QWORD *)v59 + 9) = v66;
  v94 = v59;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v53 + 32))(v53, &v94);
  v68 = v94;
  v94 = 0;
  if (v68)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v68 + 8))(v68);
  v69 = v93;
  v93 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, v67);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v70);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87 + 8, v71);
  v73 = (_DWORD *)v87;
  *(_QWORD *)&v87 = 0;
  if (v73)
  {
    if (v73[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v73 + 8))(v73);
    else
      --v73[2];
  }
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v72);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v82, v74);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v84, v75);
}

unint64_t WebKit::CacheStorageManager::cacheStorageSize(WebKit::CacheStorageManager *this, const WTF::String *a2)
{
  const WTF::String *v3;
  const WTF::String *v4;
  unint64_t v5;
  unsigned __int8 v6;
  char v7;
  unint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  _DWORD *v14;
  WTF *v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  const WTF::String *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  const WTF::String *v24;
  void *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  WTF *v39[2];
  __int128 v40;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v36, v3))
    {
      WTF::FileSystemImpl::readEntireFile((WTF::FileSystemImpl *)&v36, v4);
      if ((_BYTE)v40)
      {
        v5 = WTF::parseInteger<unsigned long long>((uint64_t)v39[0], HIDWORD(v39[1]) | 0x100000000, 0xAu);
        v6 = v5;
        v7 = (char)v4;
        v8 = v5 >> 8;
        if ((_BYTE)v40)
        {
          v9 = v39[0];
          if (v39[0])
          {
            v39[0] = 0;
            LODWORD(v39[1]) = 0;
            WTF::fastFree(v9, v4);
          }
        }
      }
      else
      {
        v8 = 0;
        v7 = 0;
        v6 = 0;
      }
    }
    else
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
    }
    v10 = v36;
    v36 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v4);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (v7)
      return v6 | (v8 << 8);
  }
  *(_OWORD *)v39 = 0u;
  v40 = 0u;
  WTF::Deque<WTF::String,0ul>::expandCapacity((uint64_t *)v39);
  v12 = v39[1];
  v13 = (WTF *)v40;
  v14 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v14 += 2;
  *((_QWORD *)v13 + (_QWORD)v12) = v14;
  if (v12 == (WTF *)(DWORD2(v40) - 1))
    v15 = 0;
  else
    v15 = (WTF *)((char *)v12 + 1);
  v39[1] = v15;
  v16 = v39[0];
  if (v39[0] == v15)
  {
    WTF::VectorDestructor<true,WTF::String>::destruct((WTF *)((char *)v13 + 8 * (_QWORD)v15), (WTF *)((char *)v13 + 8 * (_QWORD)v15));
    v11 = 0;
    goto LABEL_23;
  }
  v11 = 0;
  do
  {
    v18 = (WTF::StringImpl **)((char *)v13 + 8 * (_QWORD)v16);
    v19 = *v18;
    *v18 = 0;
    v38 = v19;
    WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)v18, (WTF::StringImpl *)(v18 + 1));
    v21 = DWORD2(v40);
    if (v39[0] == (WTF *)(DWORD2(v40) - 1))
      v22 = 0;
    else
      v22 = (WTF *)((char *)v39[0] + 1);
    v39[0] = v22;
    v23 = WTF::FileSystemImpl::fileType((WTF::FileSystemImpl *)&v38, v20);
    if ((v23 & 0xFF00000000) != 0 && v23 == 1)
    {
      WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v38, v24);
      if (v37)
      {
        v26 = v36;
        v27 = 8 * v37;
        while ((MEMORY[0x19AEABBCC](*(_QWORD *)v26, "Blobs", 5) & 1) != 0)
        {
LABEL_46:
          v26 = (WTF::StringImpl *)((char *)v26 + 8);
          v27 -= 8;
          if (!v27)
            goto LABEL_52;
        }
        WTF::FileSystemImpl::pathByAppendingComponent();
        v28 = v39[1];
        if (v39[0])
        {
          if ((WTF *)((char *)v39[1] + 1) != v39[0])
            goto LABEL_42;
        }
        else if (v39[1])
        {
          if (v39[1] != (WTF *)(v21 - 1))
            goto LABEL_42;
        }
        else if (v21)
        {
          v28 = 0;
LABEL_42:
          v13 = (WTF *)v40;
          *(_QWORD *)(v40 + 8 * (_QWORD)v28) = v35;
          if (v28 == (WTF *)(v21 - 1))
            v29 = 0;
          else
            v29 = (WTF *)((char *)v28 + 1);
          v39[1] = v29;
          v35 = 0;
          goto LABEL_46;
        }
        WTF::Deque<WTF::String,0ul>::expandCapacity((uint64_t *)v39);
        v28 = v39[1];
        v21 = DWORD2(v40);
        goto LABEL_42;
      }
LABEL_52:
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v25);
    }
    else
    {
      v30 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)&v38, v24);
      if ((_BYTE)v31)
        v32 = v30;
      else
        v32 = 0;
      v11 += v32;
    }
    v33 = v38;
    v38 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v31);
      else
        *(_DWORD *)v33 -= 2;
    }
    v16 = v39[0];
  }
  while (v39[0] != v39[1]);
  v13 = (WTF *)v40;
  WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(v40 + 8 * (uint64_t)v39[0]), (WTF::StringImpl *)(v40 + 8 * (uint64_t)v39[0]));
  if (!v13)
    return v11;
LABEL_23:
  WTF::fastFree(v13, v17);
  return v11;
}

uint64_t WebKit::CacheStorageManager::hasCacheList(WebKit::CacheStorageManager *this, const WTF::String *a2)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  WTF::FileSystemImpl::pathByAppendingComponent();
  v4 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v7, v2);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

uint64_t WebKit::CacheStorageManager::CacheStorageManager(uint64_t a1, _DWORD **a2, uint64_t a3, const WTF::String *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  const WTF::String *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  const WebCore::ClientOrigin *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  do
  {
    v11 = __ldaxr(&WebKit::nextUpdateNumber(void)::currentUpdateNumber);
    v12 = v11 + 1;
  }
  while (__stlxr(v12, &WebKit::nextUpdateNumber(void)::currentUpdateNumber));
  *(_QWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v13 = a1 + 56;
  v14 = *a2;
  if (*a2)
    *v14 += 2;
  *(_QWORD *)(a1 + 56) = v14;
  WebKit::saltFilePath(v13, &v25);
  *(_QWORD *)(a1 + 64) = WebKit::readOrMakeSalt((WebKit *)&v25, v15);
  v17 = v25;
  v25 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  *(_QWORD *)(a1 + 72) = a3;
  v18 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 80) = v18;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  v19 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 128) = v19;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  v20 = *(_QWORD *)(a1 + 56);
  if (!v20 || !*(_DWORD *)(v20 + 4) || !*((_BYTE *)a4 + 64))
    return a1;
  result = WTF::FileSystemImpl::pathByAppendingComponent();
  if (*((_BYTE *)a4 + 64))
  {
    WebCore::StorageUtilities::writeOriginToFile((WebCore::StorageUtilities *)&v25, a4, v22);
    v24 = v25;
    v25 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    return a1;
  }
  __break(1u);
  return result;
}

void WebKit::CacheStorageManager::~CacheStorageManager(WebKit::CacheStorageManager *this, void *a2)
{
  void *v3;
  unint64_t v4;
  unint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebKit::CacheStorageCache **v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  WebKit::CacheStorageManager::reset(this, a2);
  v4 = *((_QWORD *)this + 17);
  v5 = *((_QWORD *)this + 18);
  v6 = (WTF *)*((_QWORD *)this + 19);
  if (v4 <= v5)
  {
    if (v4 == v5)
      goto LABEL_20;
    v14 = 16 * v5 - 16 * v4;
    v15 = (uint64_t *)((char *)v6 + 16 * v4 + 8);
    do
    {
      v16 = *v15;
      *v15 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v15 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  else
  {
    if (v5)
    {
      v7 = 16 * v5;
      v8 = (uint64_t *)((char *)v6 + 8);
      do
      {
        v9 = *v8;
        *v8 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v8 += 2;
        v7 -= 16;
      }
      while (v7);
      v6 = (WTF *)*((_QWORD *)this + 19);
      v4 = *((_QWORD *)this + 17);
    }
    v10 = *((unsigned int *)this + 40);
    if (v4 != v10)
    {
      v11 = 16 * v10 - 16 * v4;
      v12 = (uint64_t *)((char *)v6 + 16 * v4 + 8);
      do
      {
        v13 = *v12;
        *v12 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  v6 = (WTF *)*((_QWORD *)this + 19);
LABEL_20:
  if (v6)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v6, v3);
  }
  v17 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
  v18 = *((_QWORD *)this + 15);
  if (v18)
    WTF::fastFree((WTF *)(v18 - 16), v3);
  v19 = *((_QWORD *)this + 14);
  if (v19)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v19, v3);
  v20 = *((_QWORD *)this + 13);
  if (v20)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v20, v3);
  v21 = *((unsigned int *)this + 25);
  if ((_DWORD)v21)
  {
    v22 = (WebKit::CacheStorageCache **)*((_QWORD *)this + 11);
    v23 = 8 * v21;
    do
    {
      std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100](v22++, 0);
      v23 -= 8;
    }
    while (v23);
  }
  v24 = (WTF *)*((_QWORD *)this + 11);
  if (v24)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v24, v3);
  }
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = *((_QWORD *)this + 6);
  if (v27)
    WTF::fastFree((WTF *)(v27 - 16), v3);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v28 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v3);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t WebKit::CacheStorageManager::reset(WebKit::CacheStorageManager *this, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebKit::CacheStorageCache **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v3 = *((_QWORD *)this + 17);
  for (i = *((_QWORD *)this + 18); v3 != i; i = *((_QWORD *)this + 18))
  {
    v5 = *((_QWORD *)this + 19) + 16 * v3;
    v6 = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(v5 + 8) = 0;
    v7 = *((_QWORD *)this + 19) + 16 * v3;
    v8 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v3 = *((_QWORD *)this + 17);
    }
    if (v3 == *((unsigned int *)this + 40) - 1)
      v9 = 0;
    else
      v9 = v3 + 1;
    *((_QWORD *)this + 17) = v9;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v3 = *((_QWORD *)this + 17);
  }
  v10 = *((unsigned int *)this + 25);
  if ((_DWORD)v10)
  {
    v11 = (uint64_t *)*((_QWORD *)this + 11);
    v12 = 8 * v10;
    do
    {
      v13 = *v11++;
      WebKit::CacheStorageRegistry::unregisterCache(*((uint64_t **)this + 9), *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16));
      v12 -= 8;
    }
    while (v12);
  }
  if (*((_DWORD *)this + 24))
  {
    v14 = *((unsigned int *)this + 25);
    v15 = (WebKit::CacheStorageCache **)*((_QWORD *)this + 11);
    if ((_DWORD)v14)
    {
      v16 = 8 * v14;
      do
      {
        std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100](v15++, 0);
        v16 -= 8;
      }
      while (v16);
      *((_DWORD *)this + 25) = 0;
      v15 = (WebKit::CacheStorageCache **)*((_QWORD *)this + 11);
    }
    if (v15)
    {
      *((_QWORD *)this + 11) = 0;
      *((_DWORD *)this + 24) = 0;
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  v17 = *((_QWORD *)this + 13);
  v18 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::begin(v17);
  v20 = (uint64_t *)v18;
  v21 = v19;
  if (v17)
    v22 = (uint64_t *)(v17 + 24 * *(unsigned int *)(v17 - 4));
  else
    v22 = 0;
  if (v22 != (uint64_t *)v18)
  {
    do
    {
      WebKit::CacheStorageRegistry::unregisterCache(*((uint64_t **)this + 9), *v20, v20[1]);
      while (1)
      {
        v20 += 3;
        if (v20 == v21)
          break;
        if (*(_OWORD *)v20 != 0 && v20[1] != -1)
          goto LABEL_31;
      }
      v20 = v21;
LABEL_31:
      ;
    }
    while (v20 != v22);
    v17 = *((_QWORD *)this + 13);
  }
  if (v17)
  {
    *((_QWORD *)this + 13) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v17, v19);
  }
  result = *((_QWORD *)this + 14);
  if (result)
  {
    *((_QWORD *)this + 14) = 0;
    result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(result, v19);
  }
  if (*((_BYTE *)this + 32))
    *((_BYTE *)this + 32) = 0;
  v25 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  if (v25)
    result = WTF::fastFree((WTF *)(v25 - 16), v19);
  *((_BYTE *)this + 8) = 0;
  do
  {
    v26 = __ldaxr(&WebKit::nextUpdateNumber(void)::currentUpdateNumber);
    v27 = v26 + 1;
  }
  while (__stlxr(v27, &WebKit::nextUpdateNumber(void)::currentUpdateNumber));
  *((_QWORD *)this + 2) = v27;
  return result;
}

uint64_t *WebKit::CacheStorageRegistry::unregisterCache(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v5;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, v6);
  if (*a1)
  {
    v5 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
    if ((uint64_t *)v5 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v5 = 0;
  }
  if ((uint64_t *)v5 != result)
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(a1, result);
  return result;
}

uint64_t WebKit::CacheStorageManager::initializeCaches(WebKit::CacheStorageManager *this, void *a2)
{
  unsigned int v2;
  uint64_t v4;
  char *v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  WTF::FileSystemImpl *v8;
  void *v9;
  int v10;
  void *v11;
  unsigned int v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WebKit::CacheStorageCache *v25;
  WTF *v26;
  void *v27;
  WTF::StringImpl *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34[15];
  __int128 v35;
  char v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;

  if (*((_BYTE *)this + 8))
    return 1;
  v5 = (char *)this + 56;
  v4 = *((_QWORD *)this + 7);
  v39 = 0;
  v40 = 0;
  if (!v4 || !*(_DWORD *)(v4 + 4))
  {
    v29 = 0;
    v30 = 0;
    v31 = 1;
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, a2);
    *((_BYTE *)this + 8) = 1;
LABEL_31:
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v11);
    return 1;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  if ((WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v38, v6) & 1) != 0)
  {
    v8 = (WTF::FileSystemImpl *)WTF::FileSystemImpl::openFile();
    v37 = (int)v8;
    if ((_DWORD)v8 == -1)
    {
      v10 = 0;
      LOBYTE(v29) = 0;
      v31 = 0;
    }
    else
    {
      WTF::FileSystemImpl::readEntireFile(v8);
      if (v36)
      {
        WTF::Persistence::Decoder::Decoder();
        LOBYTE(v32) = 0;
        v33 = 0;
        WTF::Persistence::Decoder::operator>>();
        v10 = 0;
        LOBYTE(v29) = 0;
        v31 = 0;
        WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v34);
        if (v36)
        {
          v13 = (WTF *)v35;
          if ((_QWORD)v35)
          {
            *(_QWORD *)&v35 = 0;
            DWORD2(v35) = 0;
            WTF::fastFree(v13, v9);
          }
        }
      }
      else
      {
        v10 = 0;
        LOBYTE(v29) = 0;
        v31 = 0;
      }
      WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v37, (int *)v9);
    }
  }
  else
  {
    v29 = v39;
    v12 = v40;
    v2 = HIDWORD(v40);
    v39 = 0;
    v40 = 0;
    v30 = __PAIR64__(v2, v12);
    v10 = 1;
    v31 = 1;
  }
  v14 = v38;
  v38 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v7);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v7);
  if (v10)
  {
    *((_BYTE *)this + 8) = 1;
    if (v2)
    {
      v15 = v29;
      v16 = (char *)v29 + 16 * v2;
      do
      {
        v17 = *((_QWORD *)this + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
        v34[0] = v17;
        v18 = WTF::fastMalloc((WTF *)0x58);
        v19 = (char *)v15 + 8;
        v39 = (WTF::StringImpl *)WebKit::CacheStorageCache::CacheStorageCache(v18, (unsigned int *)this, (_DWORD **)v15, (_DWORD **)v15 + 1, (uint64_t)v5, v34);
        if (v34[0])
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v34[0] + 56))(v34[0]);
          v18 = (uint64_t)v39;
        }
        v20 = (uint64_t *)*((_QWORD *)this + 9);
        v35 = *(_OWORD *)(v18 + 8);
        WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::CacheStorageCache&>((uint64_t)v34, v20, &v35, (unsigned int *)v18);
        v21 = *((unsigned int *)this + 25);
        if ((_DWORD)v21 == *((_DWORD *)this + 24))
        {
          v22 = (WTF::StringImpl **)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 88, v21 + 1, (unint64_t)&v39);
          v21 = *((unsigned int *)this + 25);
          v23 = *((_QWORD *)this + 11);
          v24 = *v22;
          *v22 = 0;
        }
        else
        {
          v23 = *((_QWORD *)this + 11);
          v24 = v39;
          v39 = 0;
        }
        *(_QWORD *)(v23 + 8 * v21) = v24;
        *((_DWORD *)this + 25) = v21 + 1;
        v25 = v39;
        v39 = 0;
        if (v25)
        {
          WebKit::CacheStorageCache::~CacheStorageCache(v25, (WTF::StringImpl *)v11);
          WTF::fastFree(v26, v27);
        }
        v15 = (WTF::StringImpl *)((char *)v15 + 16);
      }
      while (v19 + 8 != v16);
    }
    goto LABEL_31;
  }
  return 0;
}

unsigned int *WebKit::CacheStorageManager::openCache(uint64_t a1, const WTF::StringImpl **a2, unsigned int *a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::CacheStorageCache *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebKit::CacheStorageCache *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  WTF::StringImpl *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WebKit::CacheStorageCache *v32[3];
  int v33;
  WTF::StringImpl *v34[2];

  v6 = WebKit::CacheStorageManager::initializeCaches((WebKit::CacheStorageManager *)a1, a2);
  if ((v6 & 1) == 0)
  {
    LOBYTE(v32[0]) = 1;
    v33 = 1;
    v22 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t, WebKit::CacheStorageCache **))(*(_QWORD *)v22 + 16))(v22, v32);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  v8 = (_QWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 100))
  {
    v9 = 0;
    while (1)
    {
      v6 = WTF::equal(*(WTF **)(*(_QWORD *)(*v8 + 8 * v9) + 56), *a2, v7);
      if ((v6 & 1) != 0)
        break;
      if (++v9 >= *(unsigned int *)(a1 + 100))
        goto LABEL_6;
    }
    if (v9 < *(unsigned int *)(a1 + 100))
      return WebKit::CacheStorageCache::open(*(_QWORD *)(*v8 + 8 * v9), a3);
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x1971A7FC0);
  }
LABEL_6:
  WTF::createVersion4UUIDString((WTF *)v6);
  v10 = *(_QWORD *)(a1 + 128);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  v31 = v10;
  v11 = WTF::fastMalloc((WTF *)0x58);
  v12 = (WebKit::CacheStorageCache *)WebKit::CacheStorageCache::CacheStorageCache(v11, (unsigned int *)a1, (_DWORD **)a2, (_DWORD **)v34, a1 + 56, &v31);
  v32[0] = v12;
  v14 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 96))
  {
    v15 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v14 + 1, (unint64_t)v32);
    v16 = *(unsigned int *)(a1 + 100);
    v17 = *(_QWORD *)(a1 + 88);
    v18 = *v15;
    *v15 = 0;
    *(_QWORD *)(v17 + 8 * v16) = v18;
    v19 = v32[0];
    *(_DWORD *)(a1 + 100) = v16 + 1;
    v32[0] = 0;
    if (v19)
    {
      WebKit::CacheStorageCache::~CacheStorageCache(v19, v13);
      WTF::fastFree(v20, v21);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v14) = v12;
    *(_DWORD *)(a1 + 100) = v14 + 1;
    v32[0] = 0;
  }
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 56))(v31);
  v24 = v34[0];
  v34[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v13);
    else
      *(_DWORD *)v24 -= 2;
  }
  WebKit::writeCachesList(a1 + 56, a1 + 88, 0);
  do
  {
    v25 = __ldaxr(&WebKit::nextUpdateNumber(void)::currentUpdateNumber);
    v26 = v25 + 1;
  }
  while (__stlxr(v26, &WebKit::nextUpdateNumber(void)::currentUpdateNumber));
  *(_QWORD *)(a1 + 16) = v26;
  v27 = *(unsigned int *)(a1 + 100);
  if (!(_DWORD)v27)
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  v28 = *(_QWORD *)(a1 + 88) + 8 * v27;
  v29 = *(uint64_t **)(a1 + 72);
  v30 = *(_QWORD *)(v28 - 8);
  *(_OWORD *)v34 = *(_OWORD *)(v30 + 8);
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::CacheStorageCache&>((uint64_t)v32, v29, v34, (unsigned int *)v30);
  return WebKit::CacheStorageCache::open(*(_QWORD *)(v28 - 8), a3);
}

WTF::StringImpl *WebKit::writeCachesList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::String *v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t i;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  result = (WTF::StringImpl *)MEMORY[0x1E0C80A78](a1, a2, a3);
  if (*(_QWORD *)result && *(_DWORD *)(*(_QWORD *)result + 4))
  {
    v7 = v6;
    v8 = v5;
    v9 = v4;
    WTF::FileSystemImpl::pathByAppendingComponent();
    if (*(_DWORD *)(v9 + 12))
    {
      WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)&v18, v10);
      WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v17, v11);
      v13 = v17;
      v17 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      WTF::Persistence::Encoder::Encoder((WTF::Persistence::Encoder *)&v17);
      WTF::Persistence::Encoder::operator<<();
      v15 = *(unsigned int *)(v9 + 12);
      if ((_DWORD)v15)
      {
        for (i = 0; i < v15; ++i)
        {
          if (!v7 || v8 != i)
          {
            result = (WTF::StringImpl *)WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
            if (i >= *(unsigned int *)(v9 + 12))
            {
              __break(0xC471u);
              return result;
            }
            WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
            v15 = *(unsigned int *)(v9 + 12);
          }
        }
      }
      WTF::FileSystemImpl::overwriteEntireFile();
      WTF::Persistence::Encoder::~Encoder((WTF::Persistence::Encoder *)&v17);
    }
    else
    {
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v18, v10);
    }
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::CacheStorageManager::removeCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  WTF::StringImpl *result;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[4];
  int v21;
  _QWORD v22[2];

  v22[0] = a2;
  v22[1] = a3;
  v5 = *(unsigned int *)(a1 + 100);
  if (!(_DWORD)v5)
  {
LABEL_8:
    v20[0] = 0;
LABEL_13:
    v21 = 0;
    v19 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 16))(v19, v20);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v7 = 0;
  v8 = -v5;
  v9 = 8;
  while (1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + v9 - 8);
    v12 = *(_QWORD *)(v10 + 8);
    v11 = *(_QWORD *)(v10 + 16);
    if (v12 == a2 && v11 == a3)
      break;
    v9 += 8;
    if (v8 == --v7)
      goto LABEL_8;
  }
  v14 = -v7;
  result = WebKit::writeCachesList(a1 + 56, a1 + 88, -v7);
  do
  {
    v16 = __ldaxr(&WebKit::nextUpdateNumber(void)::currentUpdateNumber);
    v17 = v16 + 1;
  }
  while (__stlxr(v17, &WebKit::nextUpdateNumber(void)::currentUpdateNumber));
  *(_QWORD *)(a1 + 16) = v17;
  if (v14 < *(unsigned int *)(a1 + 100))
  {
    WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,std::unique_ptr<WebKit::CacheStorageCache>>((uint64_t *)(a1 + 104), v22, (WTF::StringImpl **)(*(_QWORD *)(a1 + 88) + v9 - 8), (uint64_t)v20);
    v18 = *(_QWORD *)(a1 + 88);
    std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)(v18 + v9 - 8), 0);
    memmove((void *)(v18 + v9 - 8), (const void *)(v18 + v9), *(_QWORD *)(a1 + 88) + 8 * *(unsigned int *)(a1 + 100) - v18 - v9);
    --*(_DWORD *)(a1 + 100);
    v20[0] = 1;
    goto LABEL_13;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::CacheStorageManager::allCaches(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD v37[2];
  _QWORD *v38;
  _QWORD v39[2];
  uint64_t v40;

  result = WebKit::CacheStorageManager::initializeCaches((WebKit::CacheStorageManager *)a1, a2);
  if ((result & 1) != 0)
  {
    v6 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v6)
    {
      if (v6 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      v7 = 24 * v6;
      v8 = WTF::fastMalloc((WTF *)(24 * v6));
      v9 = v8;
      v10 = (v7 & 0xFFFFFFF8) / 0x18;
      v11 = *(unsigned int *)(a1 + 100);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = 0;
        v14 = *(_QWORD *)(a1 + 88);
        v15 = 24 * v11;
        do
        {
          v16 = *(_QWORD *)(v14 + 8 * v13);
          v17 = *(_OWORD *)(v16 + 8);
          v18 = *(_DWORD **)(v16 + 56);
          if (v18)
            *v18 += 2;
          v19 = v8 + v12;
          *(_OWORD *)v19 = v17;
          *(_QWORD *)(v19 + 16) = v18;
          ++v13;
          v12 += 24;
        }
        while (v15 != v12);
      }
      else
      {
        LODWORD(v13) = 0;
      }
    }
    else
    {
      LODWORD(v13) = 0;
      v10 = 0;
      v9 = 0;
    }
    v21 = *a3;
    *a3 = 0;
    v37[0] = 0;
    v37[1] = 0;
    v40 = *(_QWORD *)(a1 + 16);
    v22 = v40;
    v23 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v23 = off_1E34C63B8;
    *(_QWORD *)(v23 + 8) = v21;
    v38 = 0;
    v39[0] = 0;
    *(_QWORD *)(v23 + 16) = v9;
    v39[1] = 0;
    *(_DWORD *)(v23 + 24) = v10;
    *(_DWORD *)(v23 + 28) = v13;
    *(_QWORD *)(v23 + 32) = v22;
    v24 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = v23;
    WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v25);
    v27 = (uint64_t)v38;
    v38 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v28)
    {
      v29 = *(uint64_t **)(a1 + 88);
      v30 = &v29[v28];
      do
      {
        v31 = *v29;
        do
          v32 = __ldaxr((unsigned int *)v24);
        while (__stlxr(v32 + 1, (unsigned int *)v24));
        v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v33 = off_1E34C63E0;
        v33[1] = v24;
        v38 = v33;
        WebKit::CacheStorageCache::open(v31, (unsigned int *)&v38);
        v34 = (uint64_t)v38;
        v38 = 0;
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        ++v29;
      }
      while (v29 != v30);
    }
    do
    {
      v35 = __ldaxr((unsigned int *)v24);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)v24));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)v24);
      v38 = (_QWORD *)v24;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v38);
    }
    return WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v26);
  }
  else
  {
    LOBYTE(v38) = 1;
    LODWORD(v40) = 1;
    v20 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v20 + 16))(v20, &v38);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if ((_DWORD)v40 != -1)
      return ((uint64_t (*)(_QWORD *, _QWORD **))off_1E34C5ED0[v40])(v37, &v38);
  }
  return result;
}

uint64_t WebKit::CacheStorageManager::initializeCacheSize(WebKit::CacheStorageManager *this, WebKit::CacheStorageCache *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
  v4 = *(unsigned int **)this;
  if (*(_QWORD *)this)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v8 = &off_1E34C6408;
  v8[1] = this;
  v8[2] = v4;
  v8[3] = v6;
  v8[4] = v7;
  if (*((_BYTE *)a2 + 32))
  {
    v9 = (_QWORD *)*((_QWORD *)a2 + 9);
    v10 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v9);
    if (v9)
      v12 = &v9[3 * *((unsigned int *)v9 - 1)];
    else
      v12 = 0;
    if (v12 == v10)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *((unsigned int *)v10 + 5);
        if ((_DWORD)v17)
        {
          v18 = 160 * v17;
          v19 = (uint64_t *)(v10[1] + 96);
          do
          {
            v20 = *v19;
            v19 += 20;
            v16 += v20;
            v18 -= 160;
          }
          while (v18);
        }
        while (1)
        {
          v10 += 3;
          if (v10 == v11)
            break;
          if ((unint64_t)(*v10 + 1) > 1)
            goto LABEL_19;
        }
        v10 = v11;
LABEL_19:
        ;
      }
      while (v10 != v12);
    }
    WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::initializeCacheSize(WebKit::CacheStorageCache &)::$_0,void,unsigned long long>::call(v8, v16);
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  }
  else
  {
    v13 = *((_QWORD *)a2 + 10);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = &off_1E34C60D0;
    v14[1] = v8;
    v21 = (uint64_t)v14;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 16))(v13, &v21);
    result = v21;
    v21 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::writeSizeFile(WTF::StringImpl *this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  WTF::StringImpl *v7;

  if (this && *((_DWORD *)this + 1))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::String::number(a2);
    WTF::String::utf8();
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    WTF::FileSystemImpl::overwriteEntireFile();
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
        WTF::fastFree(v6, v4);
      else
        --*(_DWORD *)v6;
    }
    this = v7;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return this;
}

uint64_t *WebKit::CacheStorageManager::reference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  int v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unsigned int v27;
  __int16 v28;
  char v29;

  *((_QWORD *)&v25 + 1) = a4;
  v26 = a2;
  *(_QWORD *)&v25 = a3;
  v4 = (uint64_t *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 112);
  if (v5
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(a1 + 112), 0), (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v27 = -1640531527;
  v28 = 0;
  v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v27, &v25);
  v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27) & v6;
  v9 = v5 + 32 * v8;
  v11 = *(_QWORD *)v9;
  v10 = *(_QWORD *)(v9 + 8);
  if (*(_OWORD *)v9 == 0)
  {
LABEL_12:
    *(_OWORD *)v9 = v25;
    v14 = *(WTF **)(v9 + 16);
    if (v14)
    {
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 24) = 0;
      WTF::fastFree(v14, v7);
    }
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    v15 = *v4;
    if (*v4)
      v16 = *(_DWORD *)(v15 - 12) + 1;
    else
      v16 = 1;
    *(_DWORD *)(v15 - 12) = v16;
    v17 = *v4;
    if (*v4)
      v18 = *(_DWORD *)(v17 - 12);
    else
      v18 = 0;
    v19 = (*(_DWORD *)(v17 - 16) + v18);
    v20 = *(unsigned int *)(v17 - 4);
    if (v20 > 0x400)
    {
      if (v20 > 2 * v19)
        goto LABEL_23;
    }
    else if (3 * v20 > 4 * v19)
    {
      goto LABEL_23;
    }
    v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v4, v9);
    goto LABEL_23;
  }
  v12 = 0;
  v13 = 1;
  while (__PAIR128__(v10, v11) != v25)
  {
    if (v10 == -1)
      v12 = (_OWORD *)v9;
    v8 = ((_DWORD)v8 + v13) & v6;
    v9 = v5 + 32 * v8;
    v11 = *(_QWORD *)v9;
    v10 = *(_QWORD *)(v9 + 8);
    ++v13;
    if (*(_OWORD *)v9 == 0)
    {
      if (v12)
      {
        *v12 = 0u;
        v12[1] = 0u;
        --*(_DWORD *)(*v4 - 16);
        v9 = (uint64_t)v12;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  result = (uint64_t *)(v9 + 16);
  v22 = *(unsigned int *)(v9 + 28);
  if ((_DWORD)v22 == *(_DWORD *)(v9 + 24))
  {
    result = (uint64_t *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v22 + 1, (unint64_t)&v26);
    v22 = *(unsigned int *)(v9 + 28);
    v23 = *(_QWORD *)(v9 + 16);
    v24 = *result;
  }
  else
  {
    v23 = *result;
    v24 = v26;
  }
  *(_QWORD *)(v23 + 8 * v22) = v24;
  ++*(_DWORD *)(v9 + 28);
  return result;
}

WebKit::CacheStorageCache *WebKit::CacheStorageManager::dereference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebKit::CacheStorageCache *result;
  WebKit::CacheStorageCache *v7;
  WebKit::CacheStorageCache *v8;
  uint64_t v9;
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a3;
  v13 = a4;
  result = (WebKit::CacheStorageCache *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 112), &v12);
  v7 = result;
  v8 = *(WebKit::CacheStorageCache **)(a1 + 112);
  if (v8)
    v8 = (WebKit::CacheStorageCache *)((char *)v8 + 32 * *((unsigned int *)v8 - 1));
  if (v8 != result)
  {
    v9 = *((unsigned int *)result + 7);
    if ((_DWORD)v9)
    {
      result = (WebKit::CacheStorageCache *)*((_QWORD *)result + 2);
      v10 = 8 * v9 - 8;
      while (*(_QWORD *)result != a2)
      {
        v10 -= 8;
        result = (WebKit::CacheStorageCache *)((char *)result + 8);
        if (v10 == -8)
          return result;
      }
      if (v10)
      {
        result = (WebKit::CacheStorageCache *)memmove(result, (char *)result + 8, v10);
        LODWORD(v9) = *((_DWORD *)v7 + 7);
      }
      v11 = v9 - 1;
      *((_DWORD *)v7 + 7) = v11;
      if (!v11)
        return WebKit::CacheStorageManager::removeUnusedCache(a1, v12, v13);
    }
  }
  return result;
}

WebKit::CacheStorageCache *WebKit::CacheStorageManager::removeUnusedCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  WebKit::CacheStorageCache *result;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WebKit::CacheStorageCache *v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a2;
  v18 = a3;
  v4 = (uint64_t *)(a1 + 104);
  v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 104), &v17);
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::take(v4, (uint64_t)v5, &v16);
  result = v16;
  if (v16)
  {
    WebKit::CacheStorageCache::removeAllRecords(v16);
    WebKit::CacheStorageRegistry::unregisterCache(*(uint64_t **)(a1 + 72), v17, v18);
    result = v16;
    v16 = 0;
    if (result)
    {
      WebKit::CacheStorageCache::~CacheStorageCache(result, v8);
      return (WebKit::CacheStorageCache *)WTF::fastFree(v9, v10);
    }
  }
  else
  {
    v11 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(a1 + 88);
      v13 = 8 * v11;
      while (1)
      {
        v14 = *v12;
        if (*(_QWORD *)(*v12 + 8) == v17 && *(_QWORD *)(*v12 + 16) == v18)
          break;
        ++v12;
        v13 -= 8;
        if (!v13)
          return result;
      }
      result = *(WebKit::CacheStorageCache **)(v14 + 72);
      if (result)
      {
        *(_QWORD *)(v14 + 72) = 0;
        result = (WebKit::CacheStorageCache *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)result, v6);
      }
      *(_BYTE *)(v14 + 32) = 0;
    }
  }
  return result;
}

uint64_t *WebKit::CacheStorageManager::unlockStorage(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 120);
  result = (uint64_t *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 120), &v7);
  v5 = *(_QWORD *)(a1 + 120);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

uint64_t WebKit::CacheStorageManager::connectionClosed(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD *v50;
  char v52[24];
  _QWORD *v53;
  uint64_t v54;

  v54 = a2;
  v3 = (uint64_t *)(a1 + 120);
  result = WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 120), &v54);
  v5 = (void *)result;
  v6 = *(_QWORD *)(a1 + 120);
  if (v6)
  {
    v7 = v6 + 8 * *(unsigned int *)(v6 - 4);
    if (v7 == result)
      goto LABEL_8;
  }
  else
  {
    if (!result)
      goto LABEL_8;
    v7 = 0;
  }
  if (v7 != result)
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, (_QWORD *)result);
LABEL_8:
  v53 = 0;
  v9 = (uint64_t *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 112);
  if (!v8)
  {
    v12 = 0;
    v10 = 0;
LABEL_21:
    v11 = v8 + 32 * v10;
    goto LABEL_22;
  }
  v10 = *(unsigned int *)(v8 - 4);
  v11 = v8 + 32 * v10;
  if (!*(_DWORD *)(v8 - 12))
  {
    v12 = v8 + 32 * v10;
    goto LABEL_21;
  }
  v12 = *(_QWORD *)(a1 + 112);
  if ((_DWORD)v10)
  {
    v13 = 32 * v10;
    v12 = *(_QWORD *)(a1 + 112);
    while (*(_OWORD *)v12 == 0 || *(_QWORD *)(v12 + 8) == -1)
    {
      v12 += 32;
      v13 -= 32;
      if (!v13)
      {
        v12 = v11;
        break;
      }
    }
  }
LABEL_22:
  if (v8)
    v15 = v8 + 32 * *(unsigned int *)(v8 - 4);
  else
    v15 = 0;
  if (v15 != v12)
  {
    do
    {
      v16 = *(char **)(v12 + 16);
      v17 = *(unsigned int *)(v12 + 28);
      v18 = &v16[8 * v17];
      if ((_DWORD)v17)
      {
        LODWORD(v17) = 0;
        v19 = v18;
        v20 = v18;
        do
        {
          if (v54 == *(_QWORD *)v16)
          {
            v21 = v16;
            if (v19 != (char *)(*(_QWORD *)(v12 + 16) + 8 * *(unsigned int *)(v12 + 28)))
            {
              if (v20 == v16)
              {
                v21 = v19;
              }
              else
              {
                if (v20 <= v19)
                {
                  v26 = 0;
                  v25 = (v16 - v20) >> 3;
                  do
                  {
                    *(_QWORD *)&v19[((v16 - v20) & 0xFFFFFFFFFFFFFFF8) - 8 + v26] = *(_QWORD *)&v16[v26 - 8];
                    v26 -= 8;
                  }
                  while (&v16[v26] != v20);
                }
                else
                {
                  v22 = v19;
                  v23 = v20;
                  do
                  {
                    v24 = *(_QWORD *)v23;
                    v23 += 8;
                    *(_QWORD *)v22 = v24;
                    v22 += 8;
                  }
                  while (v23 != v16);
                  v25 = (v16 - v20) >> 3;
                }
                v21 = &v19[8 * v25];
              }
            }
            v20 = v16 + 8;
            LODWORD(v17) = v17 + 1;
            v19 = v21;
          }
          v16 += 8;
        }
        while (v16 < v18);
        v16 = *(char **)(v12 + 16);
        v27 = *(unsigned int *)(v12 + 28);
        v18 = v20;
      }
      else
      {
        v27 = 0;
        v19 = &v16[8 * v17];
      }
      v28 = &v16[8 * v27];
      if (v18 != v28)
      {
        if (v18 <= v19)
        {
          v30 = &v19[((v28 - v18) & 0xFFFFFFFFFFFFFFF8) - 8];
          do
          {
            v31 = *((_QWORD *)v28 - 1);
            v28 -= 8;
            *(_QWORD *)v30 = v31;
            v30 -= 8;
          }
          while (v28 != v18);
        }
        else
        {
          do
          {
            v29 = *(_QWORD *)v18;
            v18 += 8;
            *(_QWORD *)v19 = v29;
            v19 += 8;
          }
          while (v18 != v28);
        }
      }
      v32 = *(_DWORD *)(v12 + 28) - v17;
      *(_DWORD *)(v12 + 28) = v32;
      if (!v32)
      {
        WebKit::CacheStorageManager::removeUnusedCache(a1, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
        result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::add((uint64_t)v52, (uint64_t *)&v53, (_QWORD *)v12);
      }
      v33 = v12 + 32;
      v12 = v11;
      if (v33 != v11)
      {
        v12 = v33;
        while (*(_OWORD *)v12 == 0 || *(_QWORD *)(v12 + 8) == -1)
        {
          v12 += 32;
          if (v12 == v11)
          {
            v12 = v11;
            break;
          }
        }
      }
    }
    while (v12 != v15);
    v35 = (uint64_t)v53;
    if (v53)
    {
      v36 = *((unsigned int *)v53 - 1);
      v37 = &v53[2 * v36];
      v38 = v37;
      if (*((_DWORD *)v53 - 3))
      {
        v38 = v53;
        if ((_DWORD)v36)
        {
          v39 = 16 * v36;
          v38 = v53;
          while (*(_OWORD *)v38 == 0 || v38[1] == -1)
          {
            v38 += 2;
            v39 -= 16;
            if (!v39)
            {
              v38 = v37;
              break;
            }
          }
        }
      }
      v41 = &v53[2 * *((unsigned int *)v53 - 1)];
      if (v41 != v38)
      {
        while (1)
        {
          result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v9, v38);
          if (*v9)
          {
            v42 = *v9 + 32 * *(unsigned int *)(*v9 - 4);
            if (v42 != result)
              goto LABEL_78;
          }
          else if (result)
          {
            v42 = 0;
LABEL_78:
            if (v42 != result)
            {
              *(_OWORD *)result = xmmword_1978CF7D0;
              v43 = *(WTF **)(result + 16);
              if (v43)
              {
                *(_QWORD *)(result + 16) = 0;
                *(_DWORD *)(result + 24) = 0;
                result = WTF::fastFree(v43, v5);
              }
              ++*(_DWORD *)(*v9 - 16);
              v44 = *v9;
              if (*v9)
                v45 = *(_DWORD *)(v44 - 12) - 1;
              else
                v45 = -1;
              *(_DWORD *)(v44 - 12) = v45;
              v46 = *v9;
              if (*v9)
              {
                v47 = 6 * *(_DWORD *)(v46 - 12);
                v48 = *(_DWORD *)(v46 - 4);
                if (v47 < v48 && v48 >= 9)
                  result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v9, v48 >> 1, 0);
              }
            }
          }
          v50 = v38 + 2;
          v38 = v37;
          if (v50 != v37)
          {
            v38 = v50;
            while (*(_OWORD *)v38 == 0 || v38[1] == -1)
            {
              v38 += 2;
              if (v38 == v37)
              {
                v38 = v37;
                break;
              }
            }
          }
          if (v38 == v41)
          {
            v35 = (uint64_t)v53;
            break;
          }
        }
      }
      if (v35)
        return WTF::fastFree((WTF *)(v35 - 16), v5);
    }
  }
  return result;
}

BOOL WebKit::CacheStorageManager::isActive(WebKit::CacheStorageManager *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *((_QWORD *)this + 14);
  if (v1 && *(_DWORD *)(v1 - 12))
    return 1;
  v3 = *((_QWORD *)this + 15);
  return v3 && *(_DWORD *)(v3 - 12) != 0;
}

WTF::StringImpl *WebKit::CacheStorageManager::representationString@<X0>(WebKit::CacheStorageManager *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  WTF::StringBuilder::append();
  v4 = *((unsigned int *)this + 25);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 11);
    v6 = 8 * v4;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        WTF::StringBuilder::append();
      v8 = *v5++;
      v27 = 34;
      v26 = *(_QWORD *)(v8 + 56);
      v25 = 34;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v21, &v27, &v26, &v25);
      v7 = 0;
      v6 -= 8;
    }
    while (v6);
  }
  WTF::StringBuilder::append();
  v9 = *((_QWORD *)this + 13);
  v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::begin(v9);
  v11 = v10;
  v13 = v12;
  if (v9)
    v14 = v9 + 24 * *(unsigned int *)(v9 - 4);
  else
    v14 = 0;
  if (v14 != v10)
  {
    v15 = 1;
    do
    {
      if ((v15 & 1) == 0)
        WTF::StringBuilder::append();
      v16 = *(_QWORD *)(v11 + 16);
      v27 = 34;
      v26 = *(_QWORD *)(v16 + 56);
      v25 = 34;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v21, &v27, &v26, &v25);
      while (1)
      {
        v11 += 24;
        if (v11 == v13)
          break;
        if (*(_OWORD *)v11 != 0 && *(_QWORD *)(v11 + 8) != -1)
          goto LABEL_21;
      }
      v11 = v13;
LABEL_21:
      v15 = 0;
    }
    while (v11 != v14);
  }
  WTF::StringBuilder::append();
  result = v21;
  if (v21
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v21),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v21),
        (result = v21) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v20 = v22;
  v22 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::destroy(v20, v18);
      result = v21;
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::CacheStorageMemoryStore::readAllRecordInfos(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _DWORD *v12;
  __int128 v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[9];
  __int128 v22;
  __int128 v23;
  _DWORD *v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_QWORD *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = *(_QWORD **)(a1 + 16);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = *(_QWORD **)(a1 + 16);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = (_QWORD *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (!v3)
  {
    v8 = 0;
    v19 = 0;
    v20 = 0;
    goto LABEL_15;
  }
LABEL_8:
  v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  v19 = 0;
  v20 = 0;
  v9 = *(unsigned int *)(v3 - 12);
  if ((_DWORD)v9)
  {
    if (v9 >= 0x199999A)
    {
      __break(0xC471u);
      goto LABEL_28;
    }
    LODWORD(v20) = 160 * (int)v9 / 0xA0u;
    v19 = WTF::fastMalloc((WTF *)(160 * v9));
  }
LABEL_15:
  if (v8 != v6)
  {
    while (1)
    {
      v10 = v6[1];
      if (!v10)
        break;
      WebKit::NetworkCache::Key::Key((uint64_t)v21, v6[1]);
      v11 = *(_OWORD *)(v10 + 88);
      v22 = *(_OWORD *)(v10 + 72);
      v23 = v11;
      v12 = *(_DWORD **)(v10 + 104);
      if (v12)
        *v12 += 2;
      v24 = v12;
      v13 = *(_OWORD *)(v10 + 128);
      v25 = *(_OWORD *)(v10 + 112);
      v26 = v13;
      v27 = *(_BYTE *)(v10 + 144);
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(v28, (_QWORD **)(v10 + 152));
      WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v19, v21);
      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v21, v14);
      v15 = v6 + 2;
      v6 = v5;
      if (v15 != v5)
      {
        v6 = v15;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
      if (v6 == v8)
        goto LABEL_25;
    }
    __break(0xC471u);
LABEL_28:
    JUMPOUT(0x1971A9444);
  }
LABEL_25:
  v16 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 16))(v16, &v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v17);
}

uint64_t WebKit::CacheStorageMemoryStore::readRecords(uint64_t result, unsigned int *a2, uint64_t *a3)
{
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  WTF::StringImpl *v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _BYTE *v21;
  WTF::StringImpl *v22;
  int v23;
  _BYTE *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[8];
  int v34;
  int v35[2];
  WTF::StringImpl *v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40[92];
  unsigned __int8 v41;
  uint64_t v42[94];

  v30 = result;
  v42[92] = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v32 = 0;
  v3 = a2[3];
  if (!v3)
  {
LABEL_23:
    v26 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 16))(v26, &v31);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    return WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v27);
  }
  if (v3 < 0x572621)
  {
    LODWORD(v32) = 752 * v3 / 0x2F0;
    v29 = WTF::fastMalloc((WTF *)(752 * v3));
    v31 = v29;
    v5 = a2[3];
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 160 * v5;
      v8 = (uint64_t *)(*(_QWORD *)a2 + 80);
      while (1)
      {
        v9 = *(_QWORD *)(v30 + 16);
        v10 = *v8;
        v8 += 20;
        v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v9, v10);
        if (v9)
          v12 = v9 + 16 * *(unsigned int *)(v9 - 4);
        else
          v12 = 0;
        if (v12 == v11)
        {
          v21 = (_BYTE *)(v29 + 752 * v6);
          *v21 = 0;
          v21[736] = 0;
        }
        else
        {
          v13 = *(_QWORD *)(v11 + 8);
          v14 = *(_BYTE *)(v13 + 160);
          v35[0] = *(_DWORD *)(v13 + 368);
          *(int *)((char *)v35 + 3) = *(_DWORD *)(v13 + 371);
          v15 = *(WTF::StringImpl **)(v13 + 376);
          if (v15)
            *(_DWORD *)v15 += 2;
          v36 = v15;
          v16 = *(_OWORD *)(v13 + 400);
          v37 = *(_OWORD *)(v13 + 384);
          v38 = v16;
          v17 = *(_BYTE *)(v13 + 424);
          WebCore::ResourceResponseData::isolatedCopy((WebCore::ResourceResponseData *)(v13 + 432));
          v18 = *(_QWORD *)(v13 + 712);
          WebCore::DOMCacheEngine::copyResponseBody();
          WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v42, v13, v14, (const WebCore::ResourceRequest *)(v13 + 168), v35, (_DWORD **)(v13 + 416), v17, (uint64_t)v40, v18, (uint64_t)v33);
          if (v34 != -1)
            ((void (*)(char *, _BYTE *))off_1E34C5E58[v34])(&v39, v33);
          WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v40, v19);
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v20);
            else
              *(_DWORD *)v15 -= 2;
          }
          WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v40, v42);
          v41 = 1;
          WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v42, v22);
          v23 = v41;
          v24 = (_BYTE *)(v29 + 752 * v6);
          *v24 = 0;
          v24[736] = 0;
          if (v23)
          {
            *(_BYTE *)(WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v24, v40) + 736) = 1;
            HIDWORD(v32) = ++v6;
            if (v41)
              WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v40, v25);
            goto LABEL_22;
          }
        }
        HIDWORD(v32) = ++v6;
LABEL_22:
        v7 -= 160;
        if (!v7)
          goto LABEL_23;
      }
    }
    goto LABEL_23;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::CacheStorageMemoryStore::deleteRecords(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;

  v4 = a2[3];
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)(a1 + 16);
    v6 = 160 * v4;
    v7 = (uint64_t *)(*(_QWORD *)a2 + 80);
    do
    {
      v8 = *v5;
      v9 = *v7;
      v7 += 20;
      v10 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*v5, v9);
      if (v8)
      {
        v11 = v8 + 16 * *(unsigned int *)(v8 - 4);
        if (v11 != v10)
          goto LABEL_8;
      }
      else if (v10)
      {
        v11 = 0;
LABEL_8:
        if (v11 != v10)
        {
          *(_QWORD *)v10 = -1;
          std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100]((WebKit::CacheStorageRecord **)(v10 + 8), 0);
          ++*(_DWORD *)(*v5 - 16);
          v12 = *v5;
          v13 = *v5 ? *(_DWORD *)(v12 - 12) - 1 : -1;
          *(_DWORD *)(v12 - 12) = v13;
          v14 = *v5;
          if (*v5)
          {
            v15 = 6 * *(_DWORD *)(v14 - 12);
            v16 = *(_DWORD *)(v14 - 4);
            if (v15 < v16 && v16 >= 9)
              WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v5, v16 >> 1);
          }
        }
      }
      v6 -= 160;
    }
    while (v6);
  }
  v18 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
}

uint64_t WebKit::CacheStorageMemoryStore::writeRecords(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  WebKit::CacheStorageRecord **v16;
  WebKit::CacheStorageRecord *v17;
  WebKit::CacheStorageRecord **v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v4 = *(_DWORD *)(a2 + 12);
  if (v4)
  {
    v5 = *(uint64_t **)a2;
    v6 = *(_QWORD *)a2 + 736 * v4;
    v7 = (uint64_t *)(a1 + 16);
    while (1)
    {
      v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x2E0);
      WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v8, v5);
      v9 = *v7;
      if (*v7
        || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v7),
            (v9 = *v7) != 0))
      {
        v10 = *(_DWORD *)(v9 - 8);
      }
      else
      {
        v10 = 0;
      }
      v11 = v5[10];
      v12 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v10 & ((v14 >> 31) ^ v14);
      v16 = (WebKit::CacheStorageRecord **)(v9 + 16 * v15);
      v17 = *v16;
      if (*v16)
      {
        v18 = 0;
        v19 = 1;
        do
        {
          if (v17 == (WebKit::CacheStorageRecord *)v11)
          {
            std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100](v16 + 1, v8);
            goto LABEL_24;
          }
          if (v17 == (WebKit::CacheStorageRecord *)-1)
            v18 = v16;
          v15 = (v15 + v19) & v10;
          v16 = (WebKit::CacheStorageRecord **)(v9 + 16 * v15);
          v17 = *v16;
          ++v19;
        }
        while (*v16);
        if (v18)
        {
          *v18 = 0;
          v18[1] = 0;
          --*(_DWORD *)(*v7 - 16);
          v11 = v5[10];
          v16 = v18;
        }
      }
      *v16 = (WebKit::CacheStorageRecord *)v11;
      std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100](v16 + 1, v8);
      v20 = *v7;
      v21 = *v7 ? *(_DWORD *)(v20 - 12) + 1 : 1;
      *(_DWORD *)(v20 - 12) = v21;
      v22 = *v7;
      v23 = *v7 ? *(_DWORD *)(v22 - 12) : 0;
      v24 = (*(_DWORD *)(v22 - 16) + v23);
      v25 = *(unsigned int *)(v22 - 4);
      if (v25 > 0x400)
        break;
      if (3 * v25 <= 4 * v24)
        goto LABEL_23;
LABEL_24:
      v5 += 92;
      if (v5 == (uint64_t *)v6)
        goto LABEL_29;
    }
    if (v25 > 2 * v24)
      goto LABEL_24;
LABEL_23:
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v7);
    goto LABEL_24;
  }
LABEL_29:
  v26 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::CacheStorageCache&>(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int *a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  __int16 v33;
  char v34;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v32 = -1640531527;
  v33 = 0;
  v34 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v32, a3);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v32);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 24 * (result & v9));
  v14 = *v12;
  v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == *a3 && v13 == a3[1])
      {
        v28 = *a2;
        if (*a2)
          v29 = *(_DWORD *)(v28 - 4);
        else
          v29 = 0;
        v31 = 0;
        v30 = v28 + 24 * v29;
        goto LABEL_36;
      }
      if (v13 == -1)
        v15 = v12;
      v11 = (v11 + v16) & v9;
      v12 = (_QWORD *)(v8 + 24 * v11);
      v14 = *v12;
      v13 = v12[1];
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = v15;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a3;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a4, (uint64_t)a4);
  v18 = *(unsigned int **)a4;
  if (*(_QWORD *)a4)
  {
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  result = v12[2];
  v12[2] = v18;
  if (result)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)result);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)result));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v17);
    }
  }
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_27:
      result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a2, (uint64_t)v12);
      v12 = (_QWORD *)result;
      v24 = *a2;
      if (*a2)
        LODWORD(v27) = *(_DWORD *)(v24 - 4);
      else
        LODWORD(v27) = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_27;
  }
  v30 = v24 + 24 * v27;
  v31 = 1;
LABEL_36:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v30;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

uint64_t WebKit::CacheStorageRegistry::cache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, v10, (unsigned int **)&v9);
  v4 = (unsigned int *)v9;
  if (!v9)
    return 0;
  v5 = *((_QWORD *)v9 + 1);
  v9 = 0;
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  return v5;
}

uint64_t WebKit::FileSystemStorageHandle::create@<X0>(WTF::FileSystemImpl *this@<X2>, unsigned int *a2@<X0>, const WTF::String *a3@<X1>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  char v7;
  int *v10;
  uint64_t v11;
  uint64_t result;
  int v13;

  v7 = (char)a3;
  if ((_DWORD)a3 == 1)
  {
    if (WTF::FileSystemImpl::makeAllDirectories(this, a3))
      goto LABEL_6;
LABEL_7:
    result = 0;
    goto LABEL_8;
  }
  if ((_DWORD)a3)
    goto LABEL_7;
  v13 = WTF::FileSystemImpl::openFile();
  if (v13 == -1)
    goto LABEL_7;
  WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v13, v10);
LABEL_6:
  v11 = WTF::fastMalloc((WTF *)0x48);
  result = WebKit::FileSystemStorageHandle::FileSystemStorageHandle(v11, a2, v7, (uint64_t *)this, a4);
LABEL_8:
  *a5 = result;
  return result;
}

uint64_t WebKit::FileSystemStorageHandle::FileSystemStorageHandle(uint64_t a1, unsigned int *a2, char a3, uint64_t *a4, uint64_t *a5)
{
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
  *(_QWORD *)(a1 + 8) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2, (uint64_t)a2);
  v10 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = a3;
  v12 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v12;
  v13 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 40) = v13;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

void WebKit::FileSystemStorageHandle::close(WebKit::FileSystemStorageHandle *this)
{
  uint64_t v1;
  WebKit::FileSystemStorageManager *v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v3 = *(WebKit::FileSystemStorageManager **)(v1 + 8);
    if (v3)
    {
      if (*((_BYTE *)this + 64))
      {
        WebKit::FileSystemStorageHandle::closeSyncAccessHandle((uint64_t)this, *((_QWORD *)this + 6));
        v4 = *((_QWORD *)this + 2);
        if (v4)
          v3 = *(WebKit::FileSystemStorageManager **)(v4 + 8);
        else
          v3 = 0;
      }
      WebKit::FileSystemStorageManager::closeHandle(v3, this);
    }
  }
}

uint64_t WebKit::FileSystemStorageHandle::closeSyncAccessHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  if (*(_BYTE *)(a1 + 64)
    && *(_QWORD *)(a1 + 48) == a2
    && (v3 = *(_QWORD *)(a1 + 16)) != 0
    && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    WebKit::FileSystemStorageManager::releaseLockForFile(v4, (WTF::StringImpl **)(a1 + 32), *(const WTF::StringImpl **)(a1 + 8));
    v5 = *(unsigned __int8 *)(a1 + 64);
    v6 = 0;
    if (*(_BYTE *)(a1 + 64))
    {
      v5 = 0;
      *(_BYTE *)(a1 + 64) = 0;
    }
  }
  else
  {
    v5 = 1;
    v6 = 7;
  }
  return v6 | (v5 << 8);
}

uint64_t WebKit::FileSystemStorageHandle::isSameEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  int **v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v15 = a2;
  v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v4 + 40), &v15);
  v8 = *(_QWORD *)(v4 + 40);
  if (v8)
    v8 += 16 * *(unsigned int *)(v8 - 4);
  if (v8 == v5)
    v9 = (int **)MEMORY[0x1E0CBF738];
  else
    v9 = (int **)(*(_QWORD *)(v5 + 8) + 32);
  v10 = *v9;
  if (!*v9)
    return 0;
  v11 = *v10;
  v12 = v10[1];
  *v10 += 2;
  if (!v12)
  {
    v13 = 0;
    if (v11)
      goto LABEL_12;
LABEL_14:
    WTF::StringImpl::destroy((WTF::StringImpl *)v10, v6);
    return v13;
  }
  v13 = WTF::equal(*(WTF **)(a1 + 32), (const WTF::StringImpl *)v10, v7);
  v11 = *v10 - 2;
  if (*v10 == 2)
    goto LABEL_14;
LABEL_12:
  *v10 = v11;
  return v13;
}

uint64_t WebKit::FileSystemStorageHandle::requestCreateHandle@<X0>(WTF::String *a1@<X3>, uint64_t result@<X0>, const WTF::String *a3@<X1>, const WTF::String *a4@<X2>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (*(_BYTE *)(result + 24) != 1)
  {
    v15 = 6;
LABEL_10:
    *(_BYTE *)a6 = v15;
    *(_DWORD *)(a6 + 8) = 1;
    return result;
  }
  v7 = result;
  v8 = *(_QWORD *)(result + 16);
  if (!v8 || !*(_QWORD *)(v8 + 8))
  {
    v15 = 7;
    goto LABEL_10;
  }
  result = WebKit::isValidFileName((WebKit *)(result + 32), a1, a4);
  if ((result & 1) == 0)
  {
    v15 = 4;
    goto LABEL_10;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  v13 = *(_QWORD *)(v7 + 16);
  if (v13)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  WebKit::FileSystemStorageManager::createHandle((WTF::FileSystemImpl *)&v17, v14, a3, (_BOOL8)a4, (uint64_t *)a1, a5, a6);
  result = (uint64_t)v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::isValidFileName(WebKit *this, const WTF::String *a2, const WTF::String *a3)
{
  double v4;
  double v5;
  float v6;
  uint64_t v7;
  const WTF::String *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (!*(_QWORD *)a2
    || !*(_DWORD *)(*(_QWORD *)a2 + 4)
    || (MEMORY[0x19AEABBCC]() & 1) != 0
    || (MEMORY[0x19AEABBCC](*(_QWORD *)a2, "..", 2) & 1) != 0
    || *(_QWORD *)a2 && WTF::StringImpl::find(*(_QWORD *)a2, 0x2Fu, 0, v4, v5, v6) != -1)
  {
    return 0;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::pathFileName((WTF::FileSystemImpl *)&v14, v9);
  v7 = WTF::equal(v15, *(const WTF::StringImpl **)a2, v10);
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v14;
  v14 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v7;
}

uint64_t WebKit::FileSystemStorageHandle::removeEntry(WebKit::FileSystemStorageHandle *this, const WTF::String *a2, const WTF::String *a3)
{
  char v3;
  const WTF::String *v4;
  const WTF::String *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t result;
  WTF::StringImpl *v12;

  if (*((_BYTE *)this + 24) != 1)
  {
    v8 = 1;
    v7 = 6;
    return v7 | (v8 << 8);
  }
  v3 = (char)a3;
  if (!WebKit::isValidFileName((WebKit::FileSystemStorageHandle *)((char *)this + 32), a2, a3))
  {
    v8 = 1;
    v7 = 4;
    return v7 | (v8 << 8);
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (!WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v12, v4))
  {
    v8 = 1;
    v7 = 2;
    goto LABEL_21;
  }
  v6 = WTF::FileSystemImpl::fileType((WTF::FileSystemImpl *)&v12, v5);
  if ((v6 & 0xFF00000000) == 0)
  {
    v8 = 1;
    v7 = 6;
LABEL_21:
    v10 = v12;
    v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v5);
      else
        *(_DWORD *)v10 -= 2;
    }
    return v7 | (v8 << 8);
  }
  if (!(_DWORD)v6)
  {
    v9 = WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v12, v5);
    goto LABEL_17;
  }
  if ((_DWORD)v6 == 1)
  {
    if ((v3 & 1) != 0)
      v9 = WTF::FileSystemImpl::deleteNonEmptyDirectory((WTF::FileSystemImpl *)&v12, v5);
    else
      v9 = WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v12, v5);
LABEL_17:
    if (v9)
      v7 = 0;
    else
      v7 = 7;
    v8 = v9 ^ 1;
    goto LABEL_21;
  }
  if ((_DWORD)v6 != 2)
  {
    v7 = 0;
    v8 = 0;
    goto LABEL_21;
  }
  result = 160;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::FileSystemStorageHandle::resolve@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(result + 16);
  if (!v4)
    goto LABEL_18;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_18;
  v6 = result;
  v17 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v5 + 40), &v17);
  v8 = *(_QWORD *)(v5 + 40);
  if (v8)
    v8 += 16 * *(unsigned int *)(v8 - 4);
  v9 = (WTF::StringImpl **)(v8 == result ? MEMORY[0x1E0CBF738] : *(_QWORD *)(result + 8) + 32);
  v10 = *v9;
  if (*v9)
  {
    v11 = *((_DWORD *)v10 + 1);
    *(_DWORD *)v10 += 2;
    if (v11)
    {
      if ((WTF::StringImpl::startsWith() & 1) != 0)
      {
        v13 = *(_QWORD *)(v6 + 32);
        if (v13 && *(_DWORD *)(v13 + 4) || (*((_DWORD *)v10 + 1) & 0x80000000) != 0)
        {
          WTF::StringImpl::substring(v10);
        }
        else
        {
          *(_DWORD *)v10 += 2;
          v16 = v10;
        }
        WTF::String::split();
        *(_QWORD *)a3 = v17;
        v14 = v18;
        v17 = 0;
        v18 = 0;
        *(_QWORD *)(a3 + 8) = v14;
        *(_DWORD *)(a3 + 16) = 0;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v15);
        result = (uint64_t)v16;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            result = WTF::StringImpl::destroy(v16, v7);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      else
      {
        v17 = 0;
        *(_QWORD *)a3 = 0;
        v18 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_DWORD *)(a3 + 16) = 0;
        result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v12);
      }
    }
    else
    {
      *(_BYTE *)a3 = 7;
      *(_DWORD *)(a3 + 16) = 1;
    }
    if (*(_DWORD *)v10 == 2)
      return WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  else
  {
LABEL_18:
    *(_BYTE *)a3 = 7;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t WebKit::FileSystemStorageHandle::createSyncAccessHandle@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t IdentifierInternal;
  const WTF::String *v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  char v16;
  int v17;

  v3 = *(_QWORD *)(this + 16);
  if (!v3 || (v4 = this, (this = *(_QWORD *)(v3 + 8)) == 0))
  {
    v11 = 7;
LABEL_16:
    *(_BYTE *)a2 = v11;
    *(_DWORD *)(a2 + 40) = 1;
    return this;
  }
  this = WebKit::FileSystemStorageManager::acquireLockForFile(this, (WTF::StringImpl **)(v4 + 32), *(const WTF::StringImpl **)(v4 + 8));
  if ((this & 1) == 0)
  {
    v11 = 5;
    goto LABEL_16;
  }
  this = WTF::FileSystemImpl::openFile();
  if ((_DWORD)this == -1)
  {
    *(_BYTE *)a2 = 7;
    *(_DWORD *)(a2 + 40) = 1;
    return this;
  }
  v17 = -1;
  IPC::SharedFileHandle::create((uint64_t)v15);
  if (v16)
  {
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v8 = *(unsigned __int8 *)(v4 + 64);
    *(_QWORD *)(v4 + 48) = IdentifierInternal;
    *(_QWORD *)(v4 + 56) = 0;
    if (!v8)
      *(_BYTE *)(v4 + 64) = 1;
    this = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)(v4 + 32), v7);
    if (v9)
      v10 = this;
    else
      v10 = 0;
    if (!*(_BYTE *)(v4 + 64) || (v12 = *(_QWORD *)(v4 + 48), !v16))
    {
      __break(1u);
      return this;
    }
    WebCore::FileHandle::FileHandle();
    v14 = v10;
    *(_QWORD *)a2 = v12;
    WebCore::FileHandle::FileHandle();
    *(_QWORD *)(a2 + 32) = v14;
    *(_DWORD *)(a2 + 40) = 0;
    this = MEMORY[0x19AEAC4F0](&v13);
  }
  else
  {
    this = WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v17, v5);
    *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 40) = 1;
  }
  if (v16)
    return MEMORY[0x19AEAC4F0](v15);
  return this;
}

uint64_t WebKit::FileSystemStorageHandle::getHandleNames@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(this + 24) == 1)
  {
    WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)(this + 32), a2);
    *(_QWORD *)a3 = v7;
    v4 = v8;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(a3 + 8) = v4;
    this = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v5);
    v6 = 0;
  }
  else
  {
    *(_BYTE *)a3 = 6;
    v6 = 1;
  }
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

uint64_t WebKit::FileSystemStorageHandle::getHandle@<X0>(WTF::String *a1@<X2>, uint64_t a2@<X0>, const WTF::String *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;

  result = WebKit::FileSystemStorageHandle::requestCreateHandle(a1, a2, a3, (const WTF::String *)2, 0, (uint64_t)&v13);
  v7 = v14;
  if (v14)
  {
    if (v14 == 1)
    {
      *(_BYTE *)a4 = v13;
LABEL_9:
      *(_DWORD *)(a4 + 16) = v7;
      return result;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 16);
    if (v8)
      v9 = *(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    result = WebKit::FileSystemStorageManager::getType(v9, v13);
    if (!v14)
    {
      *(_QWORD *)a4 = v13;
      *(_BYTE *)(a4 + 8) = (_DWORD)result == 1;
      goto LABEL_9;
    }
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebKit::FileSystemStorageHandle::move(v10, v11, v12);
}

uint64_t WebKit::FileSystemStorageHandle::move(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  const WTF::String *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  const WTF::String *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3 || (v5 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v7 = 1;
    v6 = 7;
    return v6 | (v7 << 8);
  }
  if (*(_BYTE *)(a1 + 64))
  {
    v6 = 0;
LABEL_5:
    v7 = 1;
    return v6 | (v7 << 8);
  }
  if (WebKit::FileSystemStorageManager::getType(v5, a2) != 1)
  {
    v7 = 1;
    v6 = 6;
    return v6 | (v7 << 8);
  }
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
    v12 = *(_QWORD *)(v11 + 8);
  else
    v12 = 0;
  v22 = (WTF::StringImpl *)a2;
  v13 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v12 + 40), &v22);
  v16 = *(_QWORD *)(v12 + 40);
  if (v16)
    v16 += 16 * *(unsigned int *)(v16 - 4);
  if (v16 == v13)
    v17 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  else
    v17 = (WTF::StringImpl **)(*(_QWORD *)(v13 + 8) + 32);
  v18 = *v17;
  if (!*v17)
  {
    v6 = 7;
    goto LABEL_5;
  }
  *(_DWORD *)v18 += 2;
  v22 = v18;
  if (*((_DWORD *)v18 + 1))
  {
    if (WebKit::isValidFileName((WebKit *)&v22, a3, v15))
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      if (WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)(a1 + 32), (const WTF::String *)&v21, v19))
      {
        WTF::String::operator=((WTF::StringImpl **)(a1 + 32), (WTF::StringImpl *)&v21);
        WTF::String::operator=((WTF::StringImpl **)(a1 + 40), a3);
        v6 = 0;
        v7 = 0;
      }
      else
      {
        v7 = 1;
        v6 = 7;
      }
      v20 = v21;
      v21 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v14);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    else
    {
      v7 = 1;
      v6 = 4;
    }
  }
  else
  {
    v7 = 1;
    v6 = 7;
  }
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy(v18, v14);
  else
    *(_DWORD *)v18 -= 2;
  return v6 | (v7 << 8);
}

unint64_t WebKit::FileSystemStorageHandle::allocatedUnusedCapacity(WebKit::FileSystemStorageHandle *this, const WTF::String *a2)
{
  unint64_t result;
  char v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  if (!*((_BYTE *)this + 64))
    return 0;
  result = WTF::FileSystemImpl::fileSize((WebKit::FileSystemStorageHandle *)((char *)this + 32), a2);
  if (*((_BYTE *)this + 64))
  {
    if (v4)
      v5 = result;
    else
      v5 = 0;
    v6 = *((_QWORD *)this + 7);
    v7 = v6 >= v5;
    v8 = v6 - v5;
    if (v7)
      return v8;
    else
      return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebKit::FileSystemStorageHandle::requestNewCapacityForSyncAccessHandle(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  long double v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  if (!*(_BYTE *)(a1 + 64) || *(_QWORD *)(a1 + 48) != a2)
    goto LABEL_8;
  v7 = *(_QWORD *)(a1 + 56);
  if (v7 >= a3)
  {
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v7, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
LABEL_8:
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (a3 >= 0x100000)
  {
    if (a3 >> 28)
    {
      v10 = (a3 & 0xFFFFFFFFF8000000) + 0x8000000;
    }
    else
    {
      v13 = log2((double)a3);
      v10 = (unint64_t)ldexp(1.0, (int)v13 + 1);
      v9 = *(_QWORD *)(v8 + 8);
    }
  }
  else
  {
    v10 = 0x100000;
  }
  v14 = v10 - v7;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a1, a1);
  v15 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v17 = *a4;
  *a4 = 0;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v18 = &off_1E34C6430;
  v18[1] = a1;
  v18[2] = v15;
  v18[3] = a2;
  v18[4] = v10;
  v18[5] = v17;
  v19 = v18;
  (*(void (**)(_QWORD, unint64_t, _QWORD **))(**(_QWORD **)(v9 + 24) + 16))(*(_QWORD *)(v9 + 24), v14, &v19);
  result = (uint64_t)v19;
  v19 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::FileSystemStorageHandle&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v32 = 0;
        v33 = v8 + 16 * v27;
        goto LABEL_35;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a3, (uint64_t)a3);
  v21 = *(unsigned int **)a3;
  if (*(_QWORD *)a3)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result)
  {
    do
    {
      v23 = __ldaxr((unsigned int *)result);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, (unsigned int *)result));
    if (!v24)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
    }
  }
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_28:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v28 = *v6;
      if (*v6)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_28;
  }
  v33 = v28 + 16 * v31;
  v32 = 1;
LABEL_35:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v32;
  return result;
}

uint64_t *WebKit::FileSystemStorageHandleRegistry::unregisterHandle(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v5);
  if (*a1)
  {
    v4 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((uint64_t *)v4 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v4 = 0;
  }
  if ((uint64_t *)v4 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, result);
  return result;
}

uint64_t WebKit::FileSystemStorageHandleRegistry::getHandle(unsigned int **a1, uint64_t a2)
{
  void *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;
  uint64_t v9;

  v9 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v9, (unsigned int **)&v8);
  v3 = (unsigned int *)v8;
  if (!v8)
    return 0;
  v4 = *((_QWORD *)v8 + 1);
  v8 = 0;
  do
  {
    v5 = __ldaxr(v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v3));
  if (!v6)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
    if (v4)
      return v4;
    return 0;
  }
  if (!v4)
    return 0;
  return v4;
}

void WebKit::CacheStorageDiskStore::~CacheStorageDiskStore(WebKit::CacheStorageDiskStore *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WebKit::CacheStorageMemoryStore::~CacheStorageMemoryStore(WebKit::CacheStorageMemoryStore *this, void *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v2, a2);
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  if (v3)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v3, a2);
  WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v5 = *(WTF::StringImpl **)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, a2);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::makeString<WTF::String,char,unsigned long>(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  _QWORD *v5;
  int v6;
  int v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD v23[5];

  v3 = a3;
  v5 = (_QWORD *)result;
  v23[4] = *MEMORY[0x1E0C80C00];
  if (a2)
    v6 = *(_DWORD *)(a2 + 4);
  else
    v6 = 0;
  v7 = 0;
  v8 = a3;
  do
  {
    ++v7;
    v9 = v8 > 9;
    v8 /= 0xAuLL;
  }
  while (v9);
  if ((v7 & 0x80000000) == 0)
  {
    v10 = __OFADD__(v7, 1);
    v11 = v7 + 1;
    v12 = v10;
    if ((v6 & 0x80000000) == 0 && !v12)
    {
      v13 = (v6 + v11);
      if (!__OFADD__(v6, v11))
      {
        if (!a2 || (*(_BYTE *)(a2 + 16) & 4) != 0)
        {
          if ((v13 & 0x80000000) == 0)
          {
            result = WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
            v14 = v23[0];
            if (v23[0])
            {
              *(_DWORD *)v23[0] = 2;
              *(_DWORD *)(v14 + 4) = v13;
              *(_QWORD *)(v14 + 8) = v14 + 20;
              *(_DWORD *)(v14 + 16) = 4;
              v22 = a2;
              result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v22, (char *)(v14 + 20));
              v19 = v22;
              if (v22)
                v19 = *(unsigned int *)(v22 + 4);
              v20 = 0;
              v21 = (_BYTE *)(v14 + 20 + v19);
              *v21 = 45;
              do
              {
                *((_BYTE *)&v23[3] + v20--) = (v3 % 0xA) | 0x30;
                v9 = v3 > 9;
                v3 /= 0xAuLL;
              }
              while (v9);
              if (v20 + 26 <= 25)
                result = (uint64_t)memcpy(v21 + 1, (char *)&v23[3] + v20 + 1, -v20);
              goto LABEL_33;
            }
          }
        }
        else if (v13 <= 0x7FFFFFEF)
        {
          result = WTF::tryFastCompactMalloc((WTF *)(2 * (v6 + v11) + 20));
          v14 = v23[0];
          if (v23[0])
          {
            *(_DWORD *)v23[0] = 2;
            *(_DWORD *)(v14 + 4) = v13;
            *(_QWORD *)(v14 + 8) = v14 + 20;
            *(_DWORD *)(v14 + 16) = 0;
            v22 = a2;
            result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v22, (char *)(v14 + 20));
            if (v22)
              v15 = *(unsigned int *)(v22 + 4);
            else
              v15 = 0;
            v16 = 0;
            *(_WORD *)(v14 + 20 + 2 * v15) = 45;
            do
            {
              *((_BYTE *)&v23[3] + v16--) = (v3 % 0xA) | 0x30;
              v9 = v3 > 9;
              v3 /= 0xAuLL;
            }
            while (v9);
            if (v16 + 26 <= 25)
            {
              v17 = (_WORD *)(v14 + 2 * v15 + 22);
              do
                *v17++ = *((unsigned __int8 *)&v23[3] + v16 + 1);
              while (!__CFADD__(v16++, 1));
            }
LABEL_33:
            *v5 = v14;
            return result;
          }
        }
      }
    }
  }
  *v5 = 0;
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        v5 = *(WTF::StringImpl **)(v4 - 8);
        *(_QWORD *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore14DOMCacheEngine17CrossThreadRecordELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIyLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore14DOMCacheEngine5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::CacheStorageRecordInformation::updateVaryHeaders(WebCore::ResourceRequest const&,WebCore::ResourceResponseData const&)::{lambda(WTF::StringView)#1},void,WTF::StringView>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v7;
  uint64_t *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  _BYTE v12[24];
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a2;
  v16 = a3;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 144))
    goto LABEL_11;
  v4 = (char *)WTF::StringView::trim<BOOL ()(char16_t)>((uint64_t)&v15, (uint64_t (*)(_QWORD))WTF::isASCIIWhitespaceWithoutFF<char16_t>);
  if (v4 == "*" || v5 != 1)
  {
    if (v4 != "*" || v5 != 1)
      goto LABEL_11;
    goto LABEL_10;
  }
  if ((v5 & 0xFF00000000) != 0)
    v7 = *v4;
  else
    v7 = *(unsigned __int16 *)v4;
  if (v7 == 42)
LABEL_10:
    *(_BYTE *)(v3 + 144) = 1;
LABEL_11:
  v8 = (uint64_t *)(v3 + 152);
  if (BYTE4(v16))
    WTF::String::String();
  else
    WTF::String::String();
  WebCore::ResourceRequestBase::httpHeaderField();
  WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>(v8, &v14, (WTF::StringImpl *)&v13, (uint64_t)v12);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Persistence::Decoder::operator>><WebCore::FetchHeadersGuard,(void *)0>(uint64_t a1)
{
  WTF::Persistence::Decoder::operator>>();
  return a1;
}

uint64_t WebCore::ResourceResponseData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v15;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v16;
  WTF::StringImpl *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  WTF::URL::operator=(a1, (WTF::StringImpl *)a2);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 40), (WTF::StringImpl *)(a2 + 40));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)(a2 + 56));
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)(a2 + 72));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 80), (WTF::StringImpl *)(a2 + 80));
  v4 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v4)
    WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::CommonHeader>::destruct(*(WebCore::ExceptionData **)(a1 + 88), (WebCore::ExceptionData *)(*(_QWORD *)(a1 + 88) + 16 * v4));
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 88, (uint64_t *)(a2 + 88));
  v5 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v5)
    WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*(WebCore::HTTPHeaderMap::UncommonHeader **)(a1 + 104), (WebCore::HTTPHeaderMap::UncommonHeader *)(*(_QWORD *)(a1 + 104) + 16 * v5));
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 104, (uint64_t *)(a2 + 104));
  v7 = (_OWORD *)(a1 + 120);
  v8 = (_OWORD *)(a2 + 120);
  if (*(unsigned __int8 *)(a1 + 248) == *(unsigned __int8 *)(a2 + 248))
  {
    if (*(_BYTE *)(a1 + 248))
    {
      v9 = *(_OWORD *)(a2 + 136);
      *v7 = *v8;
      *(_OWORD *)(a1 + 136) = v9;
      v10 = *(_OWORD *)(a2 + 152);
      v11 = *(_OWORD *)(a2 + 168);
      v12 = *(_OWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 168) = v11;
      *(_OWORD *)(a1 + 184) = v12;
      *(_OWORD *)(a1 + 152) = v10;
      WTF::String::operator=((WTF::StringImpl **)(a1 + 208), (WTF::StringImpl *)(a2 + 208));
      v13 = *(_OWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = v13;
      v14 = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a2 + 240) = 0;
      v15 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v14;
      if (v15)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v15);
    }
  }
  else if (*(_BYTE *)(a1 + 248))
  {
    v16 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(a1 + 240);
    *(_QWORD *)(a1 + 240) = 0;
    if (v16)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v16);
    v17 = *(WTF::StringImpl **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v6);
      else
        *(_DWORD *)v17 -= 2;
    }
    *(_BYTE *)(a1 + 248) = 0;
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 136);
    *v7 = *v8;
    *(_OWORD *)(a1 + 136) = v18;
    v19 = *(_OWORD *)(a2 + 152);
    v20 = *(_OWORD *)(a2 + 168);
    v21 = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 168) = v20;
    *(_OWORD *)(a1 + 184) = v21;
    *(_OWORD *)(a1 + 152) = v19;
    v22 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a1 + 208) = v22;
    v23 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v23;
    v24 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a1 + 240) = v24;
    *(_BYTE *)(a1 + 248) = 1;
  }
  v25 = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 259) = *(_DWORD *)(a2 + 259);
  *(_DWORD *)(a1 + 256) = v25;
  std::__optional_storage_base<WebCore::CertificateInfo,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CertificateInfo,false>>(a1 + 264, (uint64_t *)(a2 + 264));
  return a1;
}

void WebKit::StoredRecordInformation::~StoredRecordInformation(WebKit::StoredRecordInformation *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  WebCore::ResourceResponseData::~ResourceResponseData((WebKit::StoredRecordInformation *)((char *)this + 624), a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (const void *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::StoredRecordInformation *)((char *)this + 360));
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation(this, v7);
}

void WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation(WebKit::CacheStorageRecordInformation *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 19);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__assign_alt[abi:sn180100]<2ul,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = result;
  v5 = result[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E34C5E58[v5])(&v8, result);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    v4[2] = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  return result;
}

uint64_t WebKit::CacheStorageRecord::CacheStorageRecord(uint64_t a1, uint64_t a2, char a3, const WebCore::ResourceRequest *a4, int *a5, _DWORD **a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  __int128 v19;
  _DWORD *v20;
  __int128 v21;
  int v22;
  _DWORD *v23;
  __int128 v24;
  _DWORD *v25;

  v18 = WebKit::NetworkCache::Key::Key(a1, a2);
  v19 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v18 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v18 + 72) = v19;
  v20 = *(_DWORD **)(a2 + 104);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(a1 + 104) = v20;
  v21 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v21;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(a1 + 152), (_QWORD **)(a2 + 152));
  *(_BYTE *)(a1 + 160) = a3;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 168), a4);
  v22 = *a5;
  *(_DWORD *)(a1 + 371) = *(int *)((char *)a5 + 3);
  *(_DWORD *)(a1 + 368) = v22;
  v23 = (_DWORD *)*((_QWORD *)a5 + 1);
  if (v23)
    *v23 += 2;
  *(_QWORD *)(a1 + 376) = v23;
  v24 = *((_OWORD *)a5 + 2);
  *(_OWORD *)(a1 + 384) = *((_OWORD *)a5 + 1);
  *(_OWORD *)(a1 + 400) = v24;
  v25 = *a6;
  if (*a6)
    *v25 += 2;
  *(_QWORD *)(a1 + 416) = v25;
  *(_BYTE *)(a1 + 424) = a7;
  WebCore::ResourceResponseData::ResourceResponseData(a1 + 432, a8);
  *(_QWORD *)(a1 + 712) = a9;
  *(_BYTE *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>(a1 + 720, a10);
  return a1;
}

uint64_t WebKit::CacheStorageRecord::CacheStorageRecord(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  v10 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 72) = v10;
  WTF::URL::URL(a1 + 104, a2 + 13);
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  *(_QWORD *)(a1 + 152) = 0;
  v11 = a2[19];
  a2[19] = 0;
  *(_QWORD *)(a1 + 152) = v11;
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  WTF::URL::URL(a1 + 168, a2 + 21);
  WTF::URL::URL(a1 + 208, a2 + 26);
  *(_QWORD *)(a1 + 248) = a2[31];
  v12 = a2[32];
  a2[32] = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = v12;
  v13 = a2[33];
  a2[33] = 0;
  *(_QWORD *)(a1 + 264) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = 0;
  *(_DWORD *)(a1 + 272) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = 0;
  *(_DWORD *)(a1 + 276) = v13;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  v14 = a2[35];
  a2[35] = 0;
  *(_QWORD *)(a1 + 280) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = 0;
  *(_DWORD *)(a1 + 288) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = 0;
  *(_DWORD *)(a1 + 292) = v14;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  v15 = a2[37];
  a2[37] = 0;
  *(_QWORD *)(a1 + 296) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = 0;
  *(_DWORD *)(a1 + 304) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 77);
  *((_DWORD *)a2 + 77) = 0;
  *(_DWORD *)(a1 + 308) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 78);
  *(_BYTE *)(a1 + 316) = *((_BYTE *)a2 + 316);
  *(_DWORD *)(a1 + 312) = v15;
  v16 = a2[40];
  a2[40] = 0;
  *(_QWORD *)(a1 + 320) = v16;
  v17 = a2[41];
  a2[41] = 0;
  *(_QWORD *)(a1 + 328) = v17;
  v18 = a2[42];
  a2[42] = 0;
  *(_QWORD *)(a1 + 336) = v18;
  v19 = a2[43];
  *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
  *(_QWORD *)(a1 + 344) = v19;
  v20 = a2[45];
  a2[45] = 0;
  *(_QWORD *)(a1 + 360) = v20;
  v21 = *((_DWORD *)a2 + 92);
  *(_DWORD *)(a1 + 371) = *(_DWORD *)((char *)a2 + 371);
  *(_DWORD *)(a1 + 368) = v21;
  v22 = a2[47];
  a2[47] = 0;
  *(_QWORD *)(a1 + 376) = v22;
  v23 = *((_OWORD *)a2 + 25);
  *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
  *(_OWORD *)(a1 + 400) = v23;
  v24 = a2[52];
  a2[52] = 0;
  *(_QWORD *)(a1 + 416) = v24;
  *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 424);
  WebCore::ResourceResponseData::ResourceResponseData(a1 + 432, (uint64_t)(a2 + 54));
  *(_QWORD *)(a1 + 712) = a2[89];
  *(_BYTE *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>(a1 + 720, (uint64_t)(a2 + 90));
  return a1;
}

void WebKit::CacheStorageRecord::~CacheStorageRecord(WebKit::CacheStorageRecord *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;
  WTF::StringImpl *v8;
  char v9;

  v3 = *((unsigned int *)this + 182);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E34C5E58[v3])(&v9, (char *)this + 720);
  *((_DWORD *)this + 182) = -1;
  WebCore::ResourceResponseData::~ResourceResponseData((WebKit::CacheStorageRecord *)((char *)this + 432), a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (const void *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::CacheStorageRecord *)((char *)this + 168));
  WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation(this, v8);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::encodeRecordBody(WebKit::CacheStorageRecord const&)::$_0,WebKit::encodeRecordBody(WebKit::CacheStorageRecord const&)::$_1,WebKit::encodeRecordBody(WebKit::CacheStorageRecord const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,std::__variant_detail::_Trait<WTF::Ref::SharedBuffer,WebCore::FormData<WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WebCore><WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>>>> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::encodeRecordBody(WebKit::CacheStorageRecord const&)::$_0,WebKit::encodeRecordBody(WebKit::CacheStorageRecord const&)::$_1,WebKit::encodeRecordBody(WebKit::CacheStorageRecord const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,std::__variant_detail::_Trait<WTF::Ref::SharedBuffer,WebCore::FormData<WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WebCore><WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>>>> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::encodeRecordBody(WebKit::CacheStorageRecord const&)::$_0,WebKit::encodeRecordBody(WebKit::CacheStorageRecord const&)::$_1,WebKit::encodeRecordBody(WebKit::CacheStorageRecord const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>,std::__variant_detail::_Trait<WTF::Ref::SharedBuffer,WebCore::FormData<WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>>,WTF::RawPtrTraits<WebCore><WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>>>>> const&>@<X0>(WebCore::SharedBuffer **a1@<X1>, uint64_t a2@<X8>)
{
  WebCore::SharedBuffer *v3;
  char *v4;

  v3 = *a1;
  v4 = (char *)WebCore::SharedBuffer::data(*a1);
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(a2, v4, *((WTF **)v3 + 6));
}

uint64_t *WTF::Deque<WTF::String,0ul>::expandCapacity(uint64_t *result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  char *v4;
  int v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;

  v1 = *((unsigned int *)result + 6);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  v3 = result;
  v4 = (char *)result[2];
  v5 = v2 + 1;
  v6 = (char *)WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
  *((_DWORD *)v3 + 6) = v5;
  v3[2] = (uint64_t)v6;
  v7 = v3[1];
  if (*v3 <= v7)
  {
    result = (uint64_t *)memcpy(&v6[8 * *v3], &v4[8 * *v3], 8 * v7 - 8 * *v3);
    if (!v4)
      return result;
  }
  else
  {
    memcpy(v6, v4, 8 * v7);
    v8 = *v3 - v1 + *((unsigned int *)v3 + 6);
    result = (uint64_t *)memcpy((void *)(v3[2] + 8 * v8), &v4[8 * *v3], 8 * v1 - 8 * *v3);
    *v3 = v8;
    if (!v4)
      return result;
  }
  if ((char *)v3[2] == v4)
  {
    v3[2] = 0;
    *((_DWORD *)v3 + 6) = 0;
  }
  return (uint64_t *)WTF::fastFree((WTF *)v4, v9);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 16;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        v5 = *(WTF **)v4;
        if (*(_QWORD *)v4)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
          WTF::fastFree(v5, a2);
        }
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::CacheStorageCache **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::CacheStorageCache **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (WebKit::CacheStorageCache *)-1)
        std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100](v4, 0);
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::CacheStorageCache *std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100](WebKit::CacheStorageCache **a1, WTF::StringImpl *a2)
{
  WebKit::CacheStorageCache *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::CacheStorageCache::~CacheStorageCache(result, a2);
    return (WebKit::CacheStorageCache *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore14DOMCacheEngine10CacheInfosENS9_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WebKit::CacheStorageRecord *std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100](WebKit::CacheStorageRecord **a1, WTF::StringImpl *a2)
{
  WebKit::CacheStorageRecord *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::CacheStorageRecord::~CacheStorageRecord(result, a2);
    return (WebKit::CacheStorageRecord *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::StringImpl::find(uint64_t result, unsigned int a2, unint64_t a3, double a4, double a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  int16x8_t *v8;
  unint64_t v9;
  unint64_t v10;
  int16x8_t v11;
  int8x16_t v12;
  int16x8_t *v13;
  __int8 *v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;

  v6 = *(_QWORD *)(result + 8);
  v7 = *(unsigned int *)(result + 4);
  if ((*(_BYTE *)(result + 16) & 4) != 0)
  {
    if (a2 > 0xFF)
      return -1;
    v15 = v7 > a3;
    v16 = v7 - a3;
    if (!v15)
      return -1;
    v17 = 16;
    if (v16 < 0x10)
      v17 = v16;
    if (v17)
    {
      v18 = v17;
      v19 = (unsigned __int8 *)(v6 + a3);
      while (*v19 != a2)
      {
        ++v19;
        if (!--v18)
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      if (v16 < 0x11)
        return -1;
      v19 = (unsigned __int8 *)memchr((void *)(v6 + a3 + v17), a2, v16 - v17);
      if (!v19)
        return -1;
    }
    return (uint64_t)&v19[-v6];
  }
  if (v7 <= a3)
    return -1;
  v8 = (int16x8_t *)(v6 + 2 * a3);
  v9 = v6 + 2 * v7;
  v10 = v9 - (_QWORD)v8;
  if ((uint64_t)(v9 - (_QWORD)v8) <= -2)
  {
    __break(1u);
    return result;
  }
  if (v10 <= 0x3E)
  {
    while (v8->u16[0] != a2)
    {
      v8 = (int16x8_t *)((char *)v8 + 2);
      v10 -= 2;
      if (!v10)
        return -1;
    }
    goto LABEL_28;
  }
  v11 = vdupq_n_s16(a2);
  if ((unint64_t)&v8->u64[1] + 6 >= v9)
  {
    v13 = (int16x8_t *)(v6 + 2 * a3);
LABEL_25:
    if ((unint64_t)v13 < v9)
    {
      v8 = (int16x8_t *)(v9 - 16);
      v12 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v9 - 16), v11);
      v11.i16[0] = vmaxvq_u16((uint16x8_t)v12);
      if (v11.i32[0])
        goto LABEL_27;
    }
    return -1;
  }
  while (1)
  {
    v12 = (int8x16_t)vceqq_s16(*v8, v11);
    LOWORD(a6) = vmaxvq_u16((uint16x8_t)v12);
    if (a6 != 0.0)
      break;
    v13 = v8 + 1;
    v14 = &v8[1].i8[14];
    ++v8;
    if ((unint64_t)v14 >= v9)
      goto LABEL_25;
  }
LABEL_27:
  v8 = (int16x8_t *)((char *)v8
                   + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_1978CFB00, v12)));
LABEL_28:
  if (v8 == (int16x8_t *)v9)
    return -1;
  else
    return ((uint64_t)v8->i64 - v6) >> 1;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::CacheStorageRecord **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::CacheStorageRecord **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::CacheStorageRecord *)-1)
        std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100](v4, 0);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::BackgroundFetchStoreManager(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)a1[1];
  *a1 = &off_1E34C5EF0;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::BackgroundFetchStoreManager(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C5EF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::BackgroundFetchStoreManager(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(unsigned long long,WTF::CompletionHandler<void ()(BOOL)> &&)> &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  return WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::initializeFetches(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34C5F18;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::initializeFetches(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34C5F18;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::initializeFetches(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(_QWORD *a1, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  const WTF::String *v8;
  WTF *v9;
  unsigned int *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  unsigned int **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  unsigned int *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  void *v30;
  WTF::StringImpl **v31;
  WTF::StringImpl **v33;
  _QWORD v34[3];
  unsigned int *v35;
  WTF::StringImpl *v36;
  unsigned int *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;

  v39 = 0;
  v40 = 0;
  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)(a1 + 2), a2);
  if (HIDWORD(v34[0]))
  {
    v4 = 0;
    v5 = 0;
    v6 = v33;
    v7 = 8 * HIDWORD(v34[0]);
    do
    {
      if (*v6 && WTF::StringImpl::endsWith())
      {
        WTF::FileSystemImpl::pathByAppendingComponent();
        v9 = (WTF *)WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)&v38, v8);
        if ((_BYTE)v3)
        {
          WTF::pageSize(v9);
          WebCore::SharedBuffer::createWithContentsOfFile();
          v10 = v37;
          v37 = 0;
          v35 = v10;
          v11 = *v6;
          *v6 = 0;
          v36 = v11;
          if (v5 == (_DWORD)v40)
          {
            v12 = (_QWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, v5 + 1, (unint64_t)&v35);
            v5 = HIDWORD(v40);
            v4 = v39;
            v13 = (_QWORD *)(v39 + 16 * HIDWORD(v40));
            v14 = *v12;
            *v12 = 0;
            v15 = (WTF::StringImpl **)(v12 + 1);
            *v13 = v14;
            v16 = (WTF::StringImpl **)(v13 + 1);
          }
          else
          {
            v17 = (unsigned int **)(v4 + 16 * v5);
            v35 = 0;
            *v17 = v10;
            v16 = (WTF::StringImpl **)(v17 + 1);
            v15 = &v36;
          }
          v18 = *v15;
          *v15 = 0;
          *v16 = v18;
          HIDWORD(v40) = ++v5;
          v19 = v36;
          v36 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v3);
            else
              *(_DWORD *)v19 -= 2;
          }
          v20 = v35;
          v35 = 0;
          if (v20)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v20, v3);
          v21 = v37;
          v37 = 0;
          if (v21)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v21, v3);
        }
        v22 = v38;
        v38 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v3);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
    v23 = v39;
    v24 = v40;
  }
  else
  {
    v5 = 0;
    v24 = 0;
    v23 = 0;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v3);
  v25 = a1[1];
  v26 = a1[3];
  a1[3] = 0;
  v39 = 0;
  v40 = 0;
  v27 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v27 = off_1E34C5F40;
  *(_QWORD *)(v27 + 8) = v26;
  v33 = 0;
  v34[0] = 0;
  *(_QWORD *)(v27 + 16) = v23;
  v34[1] = 0;
  *(_DWORD *)(v27 + 24) = v24;
  *(_DWORD *)(v27 + 28) = v5;
  v35 = (unsigned int *)v27;
  (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v25 + 32))(v25, &v35);
  v29 = v35;
  v35 = 0;
  if (v29)
    (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
  WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v28);
  v31 = v33;
  v33 = 0;
  if (v31)
    (*((void (**)(WTF::StringImpl **))*v31 + 1))(v31);
  return WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v30);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::initializeFetches(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34C5F40;
  WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::initializeFetches(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34C5F40;
  WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  v4 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::initializeFetches(WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  void *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  result = WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 1), v4);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl **v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v13 + 4);
          if (v17 >= 0x100)
            v18 = v17 >> 8;
          else
            v18 = WTF::StringImpl::hashSlowCase(v13);
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v21 = (WTF::StringImpl **)(v15 + 24 * (v18 & v16));
            v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          v22 = (_QWORD *)(v15 + 24 * v20 + 8);
          WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v8);
          v24 = *v21;
          *v21 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = *v12;
          *v12 = 0;
          *v21 = v25;
          v26 = v4 + 24 * v9;
          *v22 = 0;
          *(_QWORD *)(v15 + 24 * v20 + 16) = 0;
          v27 = *(_QWORD *)(v26 + 8);
          v26 += 8;
          *(_QWORD *)v26 = 0;
          *v22 = v27;
          LODWORD(v25) = *(_DWORD *)(v26 + 8);
          *(_DWORD *)(v26 + 8) = 0;
          v28 = v15 + 24 * v20;
          *(_DWORD *)(v28 + 16) = (_DWORD)v25;
          LODWORD(v25) = *(_DWORD *)(v26 + 12);
          *(_DWORD *)(v26 + 12) = 0;
          *(_DWORD *)(v28 + 20) = (_DWORD)v25;
          WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, v23);
          v29 = *v12;
          *v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v12 == a3)
            v10 = v15 + 24 * v20;
        }
        else
        {
          WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::clearFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *a1 = &off_1E34C5F68;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::clearFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34C5F68;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::clearFetch(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t result;
  WTF::StringImpl *v11;
  _QWORD *v12;
  unsigned int v13;

  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)(a1 + 2), a2);
  if (v13)
  {
    v4 = v12;
    v5 = 8 * v13;
    while (1)
    {
      v6 = a1[3];
      if (!v6)
        break;
      if (*v4)
        goto LABEL_5;
      if (!*(_DWORD *)(v6 + 4))
      {
LABEL_6:
        WTF::FileSystemImpl::pathByAppendingComponent();
        WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v11, v7);
        v8 = v11;
        v11 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v3);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
LABEL_10:
      ++v4;
      v5 -= 8;
      if (!v5)
        goto LABEL_16;
    }
    if (!*v4)
      goto LABEL_6;
LABEL_5:
    if ((WTF::StringImpl::startsWith() & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
LABEL_16:
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v3);
  v9 = a1[1];
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v12, a1 + 4);
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v9 + 32))(v9, &v12);
  result = (uint64_t)v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::clearAllFetches(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1E34C5F90;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::clearAllFetches(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E34C5F90;
  v3 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  v5 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  return WTF::fastFree(a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::clearAllFetches(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_1,void>::call(uint64_t a1, const WTF::String *a2)
{
  uint64_t v3;
  WTF::FileSystemImpl *v4;
  WTF::FileSystemImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)v3)
    goto LABEL_21;
  v4 = *(WTF::FileSystemImpl **)(a1 + 16);
  v5 = (WTF::FileSystemImpl *)((char *)v4 + 8 * v3);
  do
  {
    WTF::FileSystemImpl::deleteFile(v4, a2);
    v6 = 0;
    v14 = 0;
    do
    {
      v7 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4)
        *(_DWORD *)v7 += 2;
      WTF::makeString<WTF::String,char,unsigned long>((uint64_t)&v13, (uint64_t)v7, v6);
      v9 = v14;
      v14 = v13;
      if (!v9)
        goto LABEL_9;
      if (*(_DWORD *)v9 != 2)
      {
        *(_DWORD *)v9 -= 2;
LABEL_9:
        if (!v7)
          goto LABEL_15;
        goto LABEL_12;
      }
      WTF::StringImpl::destroy(v9, v8);
      if (!v7)
        goto LABEL_15;
LABEL_12:
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v8);
      else
        *(_DWORD *)v7 -= 2;
LABEL_15:
      ++v6;
    }
    while ((WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v14, v8) & 1) != 0);
    v10 = v14;
    v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    v4 = (WTF::FileSystemImpl *)((char *)v4 + 8);
  }
  while (v4 != v5);
LABEL_21:
  v11 = *(_QWORD *)(a1 + 8);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v14, (uint64_t *)(a1 + 32));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 32))(v11, &v14);
  result = v14;
  v14 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetch(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a1 = &off_1E34C5FB8;
  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetch(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34C5FB8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetch(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void,BOOL>::call(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *result;
  WTF *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  __int128 v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v30 = a1[9];
    a1[9] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, 2);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  if ((a2 & 1) == 0)
  {
    v30 = a1[9];
    a1[9] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, 1);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5 || !*(_DWORD *)(v5 + 4))
  {
    v30 = a1[9];
    a1[9] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 16))(v30, 0);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  v7 = a1[5];
  v6 = a1[6];
  v8 = a1[2];
  *(_QWORD *)&v40 = 0;
  if (v8)
  {
    v9 = *(unsigned __int8 *)(v8 + 16);
    v10 = *(_DWORD *)(v8 + 4);
    *(_QWORD *)&v40 = *(_QWORD *)(v8 + 8);
    v11 = (v9 >> 2) & 1;
  }
  else
  {
    v10 = 0;
    LOBYTE(v11) = 1;
  }
  DWORD2(v40) = v10;
  BYTE12(v40) = v11;
  WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v33, &v40, 1uLL);
  WTF::FileSystemImpl::pathByAppendingComponents();
  v13 = v33;
  if (v33)
  {
    v33 = 0;
    LODWORD(v34) = 0;
    WTF::fastFree(v13, v12);
  }
  v16 = v4 + 16;
  v15 = *(WTF **)(v4 + 16);
  v14 = *(_QWORD *)(v16 + 8);
  (*(void (**)(WTF *))(*(_QWORD *)v15 + 48))(v15);
  v33 = v15;
  WTF::String::isolatedCopy();
  *(_QWORD *)&v35 = v7;
  BYTE8(v35) = v6;
  v17 = (WTF *)a1[7];
  a1[7] = 0;
  v36 = v17;
  v18 = a1[8];
  a1[8] = 0;
  v37 = v18;
  v19 = a1[9];
  a1[9] = 0;
  v38 = v19;
  v20 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v20 = &off_1E34C5FE0;
  *(_QWORD *)(v20 + 8) = v33;
  v21 = v34;
  v33 = 0;
  v34 = 0;
  *(_QWORD *)(v20 + 16) = v21;
  *(_OWORD *)(v20 + 24) = v35;
  v22 = v36;
  v36 = 0;
  *(_QWORD *)(v20 + 40) = v22;
  v23 = v37;
  v37 = 0;
  *(_QWORD *)(v20 + 48) = v23;
  v24 = v38;
  v38 = 0;
  *(_QWORD *)(v20 + 56) = v24;
  *(_QWORD *)&v40 = v20;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 32))(v14, &v40);
  v26 = v40;
  *(_QWORD *)&v40 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v38;
  v38 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = v36;
  if (v36)
  {
    v36 = 0;
    LODWORD(v37) = 0;
    WTF::fastFree(v28, v25);
  }
  v29 = v34;
  v34 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)v29 -= 2;
  }
  v32 = v33;
  v33 = 0;
  if (v32)
    (*(void (**)(WTF *))(*(_QWORD *)v32 + 56))(v32);
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchAfterQuotaCheck(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E34C5FE0;
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchAfterQuotaCheck(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34C5FE0;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchAfterQuotaCheck(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0,void>::call(uint64_t a1)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  const WTF::String *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  NSObject *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[2];

  v2 = (WTF::StringImpl **)(a1 + 16);
  if (*(_DWORD *)(a1 + 52) != (uint64_t)(int)WTF::FileSystemImpl::overwriteEntireFile())
  {
    v7 = qword_1ECE71848;
    if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13[0]) = 0;
      v8 = 2;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "BackgroundFetchStoreManager::storeFetch failed writing", (uint8_t *)v13, 2u);
    }
    else
    {
      v8 = 2;
    }
    goto LABEL_17;
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *v2;
    if (v3)
      *(_DWORD *)v3 += 2;
    WTF::makeString<WTF::String,char,unsigned long>((uint64_t)v13, (uint64_t)v3, *(_QWORD *)(a1 + 24));
    WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)v13, v4);
    v6 = v13[0];
    v13[0] = 0;
    if (!v6)
    {
LABEL_8:
      if (!v3)
        goto LABEL_16;
LABEL_13:
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, v5);
      else
        *(_DWORD *)v3 -= 2;
      goto LABEL_16;
    }
    if (*(_DWORD *)v6 != 2)
    {
      *(_DWORD *)v6 -= 2;
      goto LABEL_8;
    }
    WTF::StringImpl::destroy(v6, v5);
    if (v3)
      goto LABEL_13;
  }
LABEL_16:
  v8 = 0;
LABEL_17:
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v11 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v11 = &off_1E34C6008;
  *(_BYTE *)(v11 + 8) = v8;
  *(_QWORD *)(v11 + 16) = v10;
  v13[0] = (WTF::StringImpl *)v11;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 32))(v9, v13);
  result = v13[0];
  v13[0] = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchAfterQuotaCheck(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C6008;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchAfterQuotaCheck(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C6008;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchAfterQuotaCheck(WTF::String const&,unsigned long long,unsigned long long,std::optional<unsigned long>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

unint64_t WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::SharedBufferBuilder,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int *v10;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 8 * v5;
        v9 = (unsigned int **)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          result = *v9;
          *v9 = 0;
          if (result)
            result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v6);
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *a1 = &off_1E34C6030;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34C6030;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  char v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint8_t buf[12];
  int v13;

  v13 = WTF::FileSystemImpl::openFile();
  if (v13 == -1
    || (WebCore::SharedBuffer::data(*(WebCore::SharedBuffer **)(a1 + 24)),
        v2 = WTF::FileSystemImpl::writeToFile(),
        v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48),
        WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)&v13, v4),
        v2 != v3))
  {
    v6 = qword_1ECE71848;
    if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v5 = 2;
      _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "BackgroundFetchStoreManager::storeFetchResponseBodyChunk failed writing", buf, 2u);
    }
    else
    {
      v5 = 2;
    }
  }
  else
  {
    v5 = 0;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v9 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v9 = &off_1E34C6058;
  *(_BYTE *)(v9 + 8) = v5;
  *(_QWORD *)(v9 + 16) = v8;
  v11 = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 32))(v7, &v11);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34C6058;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34C6058;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::storeFetchResponseBodyChunk(WTF::String const&,unsigned long,WebCore::SharedBuffer const&,WTF::CompletionHandler<void ()(WebCore::BackgroundFetchStore::StoreResult)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::retrieveResponseBody(WTF::String const&,unsigned long,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34C6080;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::retrieveResponseBody(WTF::String const&,unsigned long,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34C6080;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::retrieveResponseBody(WTF::String const&,unsigned long,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0,void>::call(_QWORD *a1, const WTF::String *a2)
{
  WTF *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v3 = (WTF *)WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)(a1 + 2), a2);
  if (v4)
  {
    WTF::pageSize(v3);
    WebCore::SharedBuffer::createWithContentsOfFile();
    v5 = v10;
  }
  else
  {
    v5 = 0;
  }
  v6 = a1[1];
  v7 = a1[3];
  a1[3] = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E34C60A8;
  v8[1] = v5;
  v8[2] = v7;
  v10 = v8;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v6 + 32))(v6, &v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::retrieveResponseBody(WTF::String const&,unsigned long,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  *a1 = &off_1E34C60A8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::retrieveResponseBody(WTF::String const&,unsigned long,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  *(_QWORD *)this = &off_1E34C60A8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchStoreManager::retrieveResponseBody(WTF::String const&,unsigned long,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::getSize(WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34C60D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::getSize(WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34C60D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::getSize(WTF::CompletionHandler<void ()(unsigned long long)> &&)::$_0,void,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = *a2;
    v6 = 160 * v2;
    v7 = (uint64_t *)(v5 + 96);
    do
    {
      v8 = *v7;
      v7 += 20;
      v4 += v8;
      v6 -= 160;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::open(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)> &&)::$_0,void,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C60F8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::open(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)> &&)::$_0,void,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34C60F8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::open(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&)> &&)::$_0,void,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  double *v6;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  int i;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  __int128 v55;
  char v56;
  int v57;
  WTF::StringImpl *v58;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return;
  v52 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned int *)(a2 + 12);
  v6 = (double *)(*(_QWORD *)a2 + 160 * v5);
  v7 = 126 - 2 * __clz(v5);
  if ((_DWORD)v5)
    v8 = v7;
  else
    v8 = 0;
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_Lb0EEEvT1_SZ_SU_NS_15iterator_traitsISZ_E15difference_typeEb(v4, v6, v8, 1);
  v10 = *(_DWORD *)(a2 + 12);
  if (!v10)
    goto LABEL_50;
  v11 = *(_QWORD *)a2;
  v53 = v11 + 160 * v10;
  v54 = (uint64_t *)(v52 + 72);
  do
  {
    if ((*(_BYTE *)(*(_QWORD *)(v11 + 104) + 16) & 0x10) != 0)
    {
      __break(0xC471u);
      return;
    }
    do
    {
      v12 = __ldaxr(&WebKit::nextRecordIdentifier(void)::currentRecordIdentifier);
      v13 = v12 + 1;
    }
    while (__stlxr(v13, &WebKit::nextRecordIdentifier(void)::currentRecordIdentifier));
    *(_QWORD *)(v11 + 80) = v13;
    WebKit::computeKeyURL((WebKit *)&v58, (const WTF::URL *)(v11 + 104));
    v16 = *v54;
    if (*v54
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v54, 0), (v16 = *v54) != 0))
    {
      v17 = *(_DWORD *)(v16 - 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = v58;
    v19 = *((_DWORD *)v58 + 4);
    if (v19 >= 0x100)
      v20 = v19 >> 8;
    else
      v20 = WTF::StringImpl::hashSlowCase(v58);
    v21 = 0;
    for (i = 1; ; ++i)
    {
      v23 = v20 & v17;
      v24 = v16 + 24 * (v20 & v17);
      v25 = *(WTF **)v24;
      if (*(_QWORD *)v24 == -1)
      {
        v21 = (_QWORD *)(v16 + 24 * v23);
        goto LABEL_22;
      }
      if (!v25)
        break;
      if ((WTF::equal(v25, v18, v15) & 1) != 0)
        goto LABEL_38;
LABEL_22:
      v20 = i + v23;
    }
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
      --*(_DWORD *)(*v54 - 16);
      v24 = (uint64_t)v21;
    }
    v58 = 0;
    v26 = *(WTF::StringImpl **)v24;
    *(_QWORD *)v24 = v18;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v14);
      else
        *(_DWORD *)v26 -= 2;
    }
    v55 = 0uLL;
    WTF::GenericHashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v24 + 8, (WTF::StringImpl *)&v55);
    WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v27);
    v28 = *v54;
    if (*v54)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v30 = *v54;
    if (*v54)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 <= 2 * v32)
LABEL_37:
        v24 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v54, (WTF::StringImpl **)v24);
    }
    else if (3 * v33 <= 4 * v32)
    {
      goto LABEL_37;
    }
LABEL_38:
    v34 = *(_DWORD *)(v24 + 20);
    if (v34 == *(_DWORD *)(v24 + 16))
    {
      WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation>(v24 + 8, v11);
    }
    else
    {
      v35 = *(_QWORD *)(v24 + 8) + 160 * v34;
      v36 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      *(_QWORD *)v35 = v36;
      v37 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v35 + 8) = v37;
      v38 = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v35 + 16) = v38;
      v39 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v35 + 24) = v39;
      v40 = *(_OWORD *)(v11 + 32);
      v41 = *(_OWORD *)(v11 + 48);
      *(_QWORD *)(v35 + 64) = *(_QWORD *)(v11 + 64);
      *(_OWORD *)(v35 + 32) = v40;
      *(_OWORD *)(v35 + 48) = v41;
      v42 = *(_OWORD *)(v11 + 72);
      *(_OWORD *)(v35 + 88) = *(_OWORD *)(v11 + 88);
      *(_OWORD *)(v35 + 72) = v42;
      WTF::URL::URL(v35 + 104, (uint64_t *)(v11 + 104));
      *(_BYTE *)(v35 + 144) = *(_BYTE *)(v11 + 144);
      *(_QWORD *)(v35 + 152) = 0;
      v43 = *(_QWORD *)(v11 + 152);
      *(_QWORD *)(v11 + 152) = 0;
      *(_QWORD *)(v35 + 152) = v43;
      ++*(_DWORD *)(v24 + 20);
    }
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v9);
      else
        *(_DWORD *)v58 -= 2;
    }
    v11 += 160;
  }
  while (v11 != v53);
LABEL_50:
  *(_BYTE *)(v52 + 32) = 1;
  v44 = *(unsigned int *)(v52 + 52);
  if ((_DWORD)v44)
  {
    v45 = *(uint64_t **)(v52 + 40);
    v46 = 8 * v44;
    do
    {
      v55 = *(_OWORD *)(v52 + 8);
      v56 = 0;
      v57 = 0;
      v47 = *v45;
      *v45++ = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v47 + 16))(v47, &v55);
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      v46 -= 8;
    }
    while (v46);
  }
  if (*(_DWORD *)(v52 + 48))
  {
    v48 = *(unsigned int *)(v52 + 52);
    v49 = *(WTF **)(v52 + 40);
    if ((_DWORD)v48)
    {
      v50 = 8 * v48;
      do
      {
        v51 = *(_QWORD *)v49;
        *(_QWORD *)v49 = 0;
        if (v51)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
        v49 = (WTF *)((char *)v49 + 8);
        v50 -= 8;
      }
      while (v50);
      *(_DWORD *)(v52 + 52) = 0;
      v49 = *(WTF **)(v52 + 40);
    }
    if (v49)
    {
      *(_QWORD *)(v52 + 40) = 0;
      *(_DWORD *)(v52 + 48) = 0;
      WTF::fastFree(v49, v9);
    }
  }
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_Lb0EEEvT1_SZ_SU_NS_15iterator_traitsISZ_E15difference_typeEb(uint64_t a1, double *a2, uint64_t a3, char a4)
{
  double *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  double v20;
  double *v21;
  double *v22;
  unint64_t v23;
  double v24;
  double *v25;
  double v26;
  uint64_t v27;
  double *v28;
  double v29;
  unint64_t v30;
  double v31;
  __int128 v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  __int128 v36;
  WTF::StringImpl *v37;
  WTF::StringImpl **v38;
  WTF::StringImpl **v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  WTF::StringImpl **v46;
  double *v47;
  double v48;
  double v49;
  unint64_t v50;
  double *v51;
  double v52;
  double *v53;
  double v54;
  unint64_t v55;
  double v56;
  __int128 v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl **v60;
  __int128 v61;
  WTF::StringImpl *v62;
  WTF::StringImpl **v63;
  WTF::StringImpl **v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  WTF::StringImpl **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  WTF::StringImpl **v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  WTF::StringImpl *v86;
  WTF::StringImpl **v87;
  WTF::StringImpl **v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  WTF::StringImpl **v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF::StringImpl **v110;
  uint64_t v111;
  __int128 v112;
  WTF::StringImpl *v113;
  WTF::StringImpl **v114;
  WTF::StringImpl **v115;
  int64_t v116;
  double *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  __int128 v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  WTF::StringImpl **v133;
  double *v134;
  __int128 v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  WTF::StringImpl **v138;
  __int128 v139;
  WTF::StringImpl *v140;
  uint64_t v141;
  WTF::StringImpl **v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  WTF::StringImpl **v152;
  uint64_t v153;
  __int128 v154;
  WTF::StringImpl *v155;
  uint64_t v156;
  WTF::StringImpl ***v157;
  WTF::StringImpl **v158;
  __int128 v159;
  WTF::StringImpl *v160;
  WTF::StringImpl **v161;
  WTF::StringImpl **v162;
  __int128 v163;
  uint64_t v164;
  WTF::StringImpl **v165;
  uint64_t *v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  WTF::StringImpl *v180;
  WTF::StringImpl **v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  WTF::StringImpl **v187;
  uint64_t v189;
  BOOL v190;
  __int128 v191;
  WTF::StringImpl *v192;
  WTF::StringImpl **v193;
  WTF::StringImpl **v194;
  uint64_t v195;
  int64_t v197;
  _OWORD v198[4];
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  _BYTE v202[40];
  char v203;
  uint64_t v204;
  _BYTE v205[32];
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  _BYTE v211[40];
  char v212;
  WTF::StringImpl **v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v195 = (uint64_t)(a2 - 20);
  v7 = (double *)a1;
  while (2)
  {
    a1 = (uint64_t)v7;
    v8 = (char *)a2 - (char *)v7;
    v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 11) >= *(double *)(a1 + 72))
          return;
        v65 = a1;
        v66 = (uint64_t)(a2 - 20);
        goto LABEL_70;
      case 3uLL:
        _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1, a1 + 160, v195);
        return;
      case 4uLL:
        _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEvT1_SZ_SZ_SZ_SU_(a1, a1 + 160, a1 + 320, v195);
        return;
      case 5uLL:
        _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEvT1_SZ_SZ_SZ_SU_(a1, a1 + 160, a1 + 320, a1 + 480);
        if (*(a2 - 11) >= *(double *)(a1 + 552))
          return;
        std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1 + 480, v195);
        if (*(double *)(a1 + 552) >= *(double *)(a1 + 392))
          return;
        std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1 + 320, a1 + 480);
        if (*(double *)(a1 + 392) >= *(double *)(a1 + 232))
          return;
        std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1 + 160, a1 + 320);
        if (*(double *)(a1 + 232) >= *(double *)(a1 + 72))
          return;
        v65 = a1;
        v66 = a1 + 160;
LABEL_70:
        std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(v65, v66);
        return;
      default:
        if (v8 > 3839)
        {
          if (!a3)
          {
            if ((double *)a1 != a2)
            {
              v197 = (v9 - 2) >> 1;
              v89 = v197;
              do
              {
                v90 = v89;
                if (v197 >= v89)
                {
                  v91 = (2 * v89) | 1;
                  v92 = a1 + 160 * v91;
                  if (2 * v89 + 2 < (uint64_t)v9 && *(double *)(a1 + 160 * v91 + 72) < *(double *)(v92 + 232))
                  {
                    v92 += 160;
                    v91 = 2 * v89 + 2;
                  }
                  v93 = a1 + 160 * v89;
                  v95 = *(double *)(v93 + 72);
                  v94 = (__int128 *)(v93 + 72);
                  if (*(double *)(v92 + 72) >= v95)
                  {
                    v96 = a1 + 160 * v90;
                    v97 = *(_QWORD *)v96;
                    *(_QWORD *)v96 = 0;
                    *(_QWORD *)v205 = v97;
                    v98 = *(_QWORD *)(v96 + 8);
                    *(_QWORD *)(v96 + 8) = 0;
                    *(_QWORD *)&v205[8] = v98;
                    v99 = *(_QWORD *)(v96 + 16);
                    *(_QWORD *)(v96 + 16) = 0;
                    *(_QWORD *)&v205[16] = v99;
                    v100 = *(_QWORD *)(v96 + 24);
                    *(_QWORD *)(v96 + 24) = 0;
                    *(_QWORD *)&v205[24] = v100;
                    v101 = *(_OWORD *)(v96 + 32);
                    v102 = *(_OWORD *)(v96 + 48);
                    v208 = *(_QWORD *)(v96 + 64);
                    v206 = v101;
                    v207 = v102;
                    v103 = v94[1];
                    v209 = *v94;
                    v210 = v103;
                    WTF::URL::URL((uint64_t)v211, (uint64_t *)(v96 + 104));
                    v212 = *(_BYTE *)(v96 + 144);
                    v104 = *(WTF::StringImpl ***)(v96 + 152);
                    *(_QWORD *)(v96 + 152) = 0;
                    v213 = v104;
                    do
                    {
                      v105 = v92;
                      WebKit::NetworkCache::Key::operator=(v96, v92);
                      v106 = *(_OWORD *)(v92 + 88);
                      *(_OWORD *)(v96 + 72) = *(_OWORD *)(v92 + 72);
                      *(_OWORD *)(v96 + 88) = v106;
                      v107 = v92 + 104;
                      WTF::URL::operator=(v96 + 104, (WTF::StringImpl *)(v92 + 104));
                      *(_BYTE *)(v96 + 144) = *(_BYTE *)(v92 + 144);
                      v109 = *(_QWORD *)(v92 + 152);
                      *(_QWORD *)(v92 + 152) = 0;
                      v110 = *(WTF::StringImpl ***)(v96 + 152);
                      *(_QWORD *)(v96 + 152) = v109;
                      if (v110)
                        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v110, v108);
                      if (v197 < v91)
                        break;
                      v111 = (2 * v91) | 1;
                      v92 = a1 + 160 * v111;
                      if (2 * v91 + 2 < (uint64_t)v9 && *(double *)(a1 + 160 * v111 + 72) < *(double *)(v92 + 232))
                      {
                        v92 += 160;
                        v111 = 2 * v91 + 2;
                      }
                      v96 = v105;
                      v91 = v111;
                    }
                    while (*(double *)(v92 + 72) >= *(double *)&v209);
                    WebKit::NetworkCache::Key::operator=(v105, (uint64_t)v205);
                    v112 = v210;
                    *(_OWORD *)(v105 + 72) = v209;
                    *(_OWORD *)(v105 + 88) = v112;
                    WTF::URL::operator=(v107, (WTF::StringImpl *)v211);
                    *(_BYTE *)(v105 + 144) = v212;
                    v114 = v213;
                    v213 = 0;
                    v115 = *(WTF::StringImpl ***)(v105 + 152);
                    *(_QWORD *)(v105 + 152) = v114;
                    if (v115)
                      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v115, v113);
                    WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v205, v113);
                  }
                }
                v89 = v90 - 1;
              }
              while (v90);
              v116 = v8 / 0xA0uLL;
              do
              {
                v117 = a2;
                v118 = *(_OWORD *)a1;
                v119 = *(_OWORD *)(a1 + 16);
                *(_OWORD *)a1 = 0u;
                *(_OWORD *)(a1 + 16) = 0u;
                v198[0] = v118;
                v198[1] = v119;
                v120 = *(_OWORD *)(a1 + 32);
                v121 = *(_OWORD *)(a1 + 48);
                v199 = *(_QWORD *)(a1 + 64);
                v198[2] = v120;
                v198[3] = v121;
                v122 = *(_OWORD *)(a1 + 88);
                v200 = *(_OWORD *)(a1 + 72);
                v201 = v122;
                WTF::URL::URL((uint64_t)v202, (uint64_t *)(a1 + 104));
                v123 = 0;
                v203 = *(_BYTE *)(a1 + 144);
                v124 = *(_QWORD *)(a1 + 152);
                *(_QWORD *)(a1 + 152) = 0;
                v204 = v124;
                v125 = a1;
                do
                {
                  v126 = v123 + 1;
                  v127 = v125 + 160 * (v123 + 1);
                  v128 = 2 * v123;
                  v123 = (2 * v123) | 1;
                  v129 = v128 + 2;
                  if (v129 < v116 && *(double *)(v125 + 160 * v126 + 72) < *(double *)(v127 + 232))
                  {
                    v127 += 160;
                    v123 = v129;
                  }
                  WebKit::NetworkCache::Key::operator=(v125, v127);
                  v130 = *(_OWORD *)(v127 + 88);
                  *(_OWORD *)(v125 + 72) = *(_OWORD *)(v127 + 72);
                  *(_OWORD *)(v125 + 88) = v130;
                  WTF::URL::operator=(v125 + 104, (WTF::StringImpl *)(v127 + 104));
                  *(_BYTE *)(v125 + 144) = *(_BYTE *)(v127 + 144);
                  v132 = *(_QWORD *)(v127 + 152);
                  *(_QWORD *)(v127 + 152) = 0;
                  v133 = *(WTF::StringImpl ***)(v125 + 152);
                  *(_QWORD *)(v125 + 152) = v132;
                  if (v133)
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v133, v131);
                  v125 = v127;
                }
                while (v123 <= (uint64_t)((unint64_t)(v116 - 2) >> 1));
                v134 = (double *)(v127 + 72);
                a2 = v117 - 20;
                if ((double *)v127 == v117 - 20)
                {
                  WebKit::NetworkCache::Key::operator=(v127, (uint64_t)v198);
                  v163 = v201;
                  *(_OWORD *)v134 = v200;
                  *(_OWORD *)(v127 + 88) = v163;
                  WTF::URL::operator=(v127 + 104, (WTF::StringImpl *)v202);
                  *(_BYTE *)(v127 + 144) = v203;
                  v164 = v204;
                  v204 = 0;
                  v165 = *(WTF::StringImpl ***)(v127 + 152);
                  *(_QWORD *)(v127 + 152) = v164;
                  if (v165)
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v165, v140);
                }
                else
                {
                  WebKit::NetworkCache::Key::operator=(v127, (uint64_t)(v117 - 20));
                  v135 = *(_OWORD *)(v117 - 9);
                  *(_OWORD *)v134 = *(_OWORD *)(v117 - 11);
                  *(_OWORD *)(v127 + 88) = v135;
                  WTF::URL::operator=(v127 + 104, (WTF::StringImpl *)(v117 - 7));
                  *(_BYTE *)(v127 + 144) = *((_BYTE *)v117 - 16);
                  v137 = *((_QWORD *)v117 - 1);
                  *(v117 - 1) = 0.0;
                  v138 = *(WTF::StringImpl ***)(v127 + 152);
                  *(_QWORD *)(v127 + 152) = v137;
                  if (v138)
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v138, v136);
                  WebKit::NetworkCache::Key::operator=((uint64_t)(v117 - 20), (uint64_t)v198);
                  v139 = v201;
                  *(_OWORD *)(v117 - 11) = v200;
                  *(_OWORD *)(v117 - 9) = v139;
                  WTF::URL::operator=((uint64_t)(v117 - 7), (WTF::StringImpl *)v202);
                  *((_BYTE *)v117 - 16) = v203;
                  v141 = v204;
                  v204 = 0;
                  v142 = (WTF::StringImpl **)*((_QWORD *)v117 - 1);
                  *((_QWORD *)v117 - 1) = v141;
                  if (v142)
                    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v142, v140);
                  v143 = v127 + 160 - a1;
                  if (v143 >= 161)
                  {
                    v144 = (v143 / 0xA0uLL - 2) >> 1;
                    if (*(double *)(a1 + 160 * v144 + 72) < *v134)
                    {
                      v145 = *(_QWORD *)v127;
                      *(_QWORD *)v127 = 0;
                      *(_QWORD *)v205 = v145;
                      v146 = *(_QWORD *)(v127 + 8);
                      *(_QWORD *)(v127 + 8) = 0;
                      *(_QWORD *)&v205[8] = v146;
                      v147 = *(_QWORD *)(v127 + 16);
                      *(_QWORD *)(v127 + 16) = 0;
                      *(_QWORD *)&v205[16] = v147;
                      v148 = *(_QWORD *)(v127 + 24);
                      *(_QWORD *)(v127 + 24) = 0;
                      *(_QWORD *)&v205[24] = v148;
                      v149 = *(_OWORD *)(v127 + 32);
                      v150 = *(_OWORD *)(v127 + 48);
                      v208 = *(_QWORD *)(v127 + 64);
                      v206 = v149;
                      v207 = v150;
                      v151 = *(_OWORD *)(v127 + 88);
                      v209 = *(_OWORD *)v134;
                      v210 = v151;
                      WTF::URL::URL((uint64_t)v211, (uint64_t *)(v127 + 104));
                      v212 = *(_BYTE *)(v127 + 144);
                      v152 = *(WTF::StringImpl ***)(v127 + 152);
                      *(_QWORD *)(v127 + 152) = 0;
                      v213 = v152;
                      while (1)
                      {
                        v153 = v127;
                        v127 = a1 + 160 * v144;
                        WebKit::NetworkCache::Key::operator=(v153, v127);
                        v154 = *(_OWORD *)(v127 + 88);
                        *(_OWORD *)(v153 + 72) = *(_OWORD *)(v127 + 72);
                        *(_OWORD *)(v153 + 88) = v154;
                        WTF::URL::operator=(v153 + 104, (WTF::StringImpl *)(v127 + 104));
                        *(_BYTE *)(v153 + 144) = *(_BYTE *)(v127 + 144);
                        v157 = (WTF::StringImpl ***)(v127 + 152);
                        v156 = *(_QWORD *)(v127 + 152);
                        *(_QWORD *)(v127 + 152) = 0;
                        v158 = *(WTF::StringImpl ***)(v153 + 152);
                        *(_QWORD *)(v153 + 152) = v156;
                        if (v158)
                        {
                          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v158, v155);
                          if (!v144)
                          {
LABEL_135:
                            WebKit::NetworkCache::Key::operator=(v127, (uint64_t)v205);
                            v159 = v210;
                            *(_OWORD *)(v127 + 72) = v209;
                            *(_OWORD *)(v127 + 88) = v159;
                            WTF::URL::operator=(v127 + 104, (WTF::StringImpl *)v211);
                            *(_BYTE *)(v127 + 144) = v212;
                            v161 = v213;
                            v213 = 0;
                            v162 = *v157;
                            *v157 = v161;
                            if (v162)
                              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v162, v160);
                            WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v205, v160);
                            break;
                          }
                        }
                        else if (!v144)
                        {
                          goto LABEL_135;
                        }
                        v144 = (v144 - 1) >> 1;
                        if (*(double *)(a1 + 160 * v144 + 72) >= *(double *)&v209)
                          goto LABEL_135;
                      }
                    }
                  }
                }
                WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v198, v140);
              }
              while (v116-- > 2);
            }
            return;
          }
          v10 = a1 + 160 * (v9 >> 1);
          if ((unint64_t)v8 <= 0x5000)
          {
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1 + 160 * (v9 >> 1), a1, v195);
          }
          else
          {
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1, a1 + 160 * (v9 >> 1), v195);
            v11 = 5 * (v9 >> 1);
            v12 = a1 + 160 * (v9 >> 1) - 160;
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1 + 160, v12, (uint64_t)(a2 - 40));
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1 + 320, a1 + 160 + 32 * v11, (uint64_t)(a2 - 60));
            _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(v12, v10, a1 + 160 + 32 * v11);
            std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1, v10);
          }
          --a3;
          if ((a4 & 1) == 0 && *(double *)(a1 - 88) >= *(double *)(a1 + 72))
          {
            v41 = *(_OWORD *)a1;
            v42 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)a1 = 0u;
            *(_OWORD *)(a1 + 16) = 0u;
            *(_OWORD *)v205 = v41;
            *(_OWORD *)&v205[16] = v42;
            v43 = *(_OWORD *)(a1 + 32);
            v44 = *(_OWORD *)(a1 + 48);
            v208 = *(_QWORD *)(a1 + 64);
            v206 = v43;
            v207 = v44;
            v45 = *(_OWORD *)(a1 + 88);
            v209 = *(_OWORD *)(a1 + 72);
            v210 = v45;
            WTF::URL::URL((uint64_t)v211, (uint64_t *)(a1 + 104));
            v212 = *(_BYTE *)(a1 + 144);
            v46 = *(WTF::StringImpl ***)(a1 + 152);
            *(_QWORD *)(a1 + 152) = 0;
            v213 = v46;
            v47 = (double *)(a1 + 160);
            if (*(double *)&v209 >= *(a2 - 11))
            {
              do
              {
                v7 = v47;
                if (v47 >= a2)
                  break;
                v49 = v47[9];
                v47 += 20;
              }
              while (*(double *)&v209 >= v49);
            }
            else
            {
              do
              {
                if (v47 == a2)
                  goto LABEL_157;
                v48 = v47[9];
                v47 += 20;
              }
              while (*(double *)&v209 >= v48);
              v7 = v47 - 20;
            }
            v50 = (unint64_t)a2;
            if (v7 < a2)
            {
              v51 = a2;
              while (v51 != (double *)a1)
              {
                v50 = (unint64_t)(v51 - 20);
                v52 = *(v51 - 11);
                v51 -= 20;
                if (*(double *)&v209 >= v52)
                  goto LABEL_51;
              }
LABEL_157:
              __break(1u);
            }
LABEL_51:
            if ((unint64_t)v7 < v50)
            {
              do
              {
                std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)v7, v50);
                v53 = v7 + 20;
                do
                {
                  if (v53 == a2)
                    goto LABEL_157;
                  v54 = v53[9];
                  v53 += 20;
                }
                while (*(double *)&v209 >= v54);
                v7 = v53 - 20;
                do
                {
                  if (v50 == a1)
                    goto LABEL_157;
                  v55 = v50 - 160;
                  v56 = *(double *)(v50 - 88);
                  v50 -= 160;
                }
                while (*(double *)&v209 < v56);
                v50 = v55;
              }
              while ((unint64_t)v7 < v55);
            }
            if (v7 - 20 != (double *)a1)
            {
              WebKit::NetworkCache::Key::operator=(a1, (uint64_t)(v7 - 20));
              v57 = *(_OWORD *)(v7 - 9);
              *(_OWORD *)(a1 + 72) = *(_OWORD *)(v7 - 11);
              *(_OWORD *)(a1 + 88) = v57;
              WTF::URL::operator=(a1 + 104, (WTF::StringImpl *)(v7 - 7));
              *(_BYTE *)(a1 + 144) = *((_BYTE *)v7 - 16);
              v59 = *((_QWORD *)v7 - 1);
              *(v7 - 1) = 0.0;
              v60 = *(WTF::StringImpl ***)(a1 + 152);
              *(_QWORD *)(a1 + 152) = v59;
              if (v60)
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v60, v58);
            }
            WebKit::NetworkCache::Key::operator=((uint64_t)(v7 - 20), (uint64_t)v205);
            v61 = v210;
            *(_OWORD *)(v7 - 11) = v209;
            *(_OWORD *)(v7 - 9) = v61;
            WTF::URL::operator=((uint64_t)(v7 - 7), (WTF::StringImpl *)v211);
            *((_BYTE *)v7 - 16) = v212;
            v63 = v213;
            v213 = 0;
            v64 = (WTF::StringImpl **)*((_QWORD *)v7 - 1);
            *((_QWORD *)v7 - 1) = v63;
            if (v64)
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v64, v62);
            WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v205, v62);
            a4 = 0;
            continue;
          }
          v13 = *(_OWORD *)a1;
          v14 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = 0u;
          *(_OWORD *)(a1 + 16) = 0u;
          *(_OWORD *)v205 = v13;
          *(_OWORD *)&v205[16] = v14;
          v15 = *(_OWORD *)(a1 + 32);
          v16 = *(_OWORD *)(a1 + 48);
          v208 = *(_QWORD *)(a1 + 64);
          v206 = v15;
          v207 = v16;
          v17 = *(_OWORD *)(a1 + 88);
          v209 = *(_OWORD *)(a1 + 72);
          v210 = v17;
          WTF::URL::URL((uint64_t)v211, (uint64_t *)(a1 + 104));
          v18 = 0;
          v212 = *(_BYTE *)(a1 + 144);
          v19 = *(WTF::StringImpl ***)(a1 + 152);
          *(_QWORD *)(a1 + 152) = 0;
          v213 = v19;
          do
          {
            if ((double *)(a1 + v18 + 160) == a2)
              goto LABEL_157;
            v20 = *(double *)(a1 + v18 + 232);
            v18 += 160;
          }
          while (v20 < *(double *)&v209);
          v21 = (double *)(a1 + v18);
          v22 = a2;
          if (v18 != 160)
          {
            while (v22 != (double *)a1)
            {
              v23 = (unint64_t)(v22 - 20);
              v24 = *(v22 - 11);
              v22 -= 20;
              if (v24 < *(double *)&v209)
                goto LABEL_23;
            }
            goto LABEL_157;
          }
          v25 = a2;
          while (v21 < v25)
          {
            v23 = (unint64_t)(v25 - 20);
            v26 = *(v25 - 11);
            v25 -= 20;
            if (v26 < *(double *)&v209)
              goto LABEL_23;
          }
          v23 = (unint64_t)v25;
LABEL_23:
          v7 = v21;
          if ((unint64_t)v21 < v23)
          {
            v27 = v23;
            do
            {
              std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)v7, v27);
              v28 = v7 + 20;
              do
              {
                if (v28 == a2)
                  goto LABEL_157;
                v29 = v28[9];
                v28 += 20;
              }
              while (v29 < *(double *)&v209);
              v7 = v28 - 20;
              do
              {
                if (v27 == a1)
                  goto LABEL_157;
                v30 = v27 - 160;
                v31 = *(double *)(v27 - 88);
                v27 -= 160;
              }
              while (v31 >= *(double *)&v209);
              v27 = v30;
            }
            while ((unint64_t)v7 < v30);
          }
          if (v7 - 20 != (double *)a1)
          {
            WebKit::NetworkCache::Key::operator=(a1, (uint64_t)(v7 - 20));
            v32 = *(_OWORD *)(v7 - 9);
            *(_OWORD *)(a1 + 72) = *(_OWORD *)(v7 - 11);
            *(_OWORD *)(a1 + 88) = v32;
            WTF::URL::operator=(a1 + 104, (WTF::StringImpl *)(v7 - 7));
            *(_BYTE *)(a1 + 144) = *((_BYTE *)v7 - 16);
            v34 = *((_QWORD *)v7 - 1);
            *(v7 - 1) = 0.0;
            v35 = *(WTF::StringImpl ***)(a1 + 152);
            *(_QWORD *)(a1 + 152) = v34;
            if (v35)
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v35, v33);
          }
          WebKit::NetworkCache::Key::operator=((uint64_t)(v7 - 20), (uint64_t)v205);
          v36 = v210;
          *(_OWORD *)(v7 - 11) = v209;
          *(_OWORD *)(v7 - 9) = v36;
          WTF::URL::operator=((uint64_t)(v7 - 7), (WTF::StringImpl *)v211);
          *((_BYTE *)v7 - 16) = v212;
          v38 = v213;
          v213 = 0;
          v39 = (WTF::StringImpl **)*((_QWORD *)v7 - 1);
          *((_QWORD *)v7 - 1) = v38;
          if (v39)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v39, v37);
          WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v205, v37);
          if ((unint64_t)v21 < v23)
          {
LABEL_40:
            _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_Lb0EEEvT1_SZ_SU_NS_15iterator_traitsISZ_E15difference_typeEb(a1, v7 - 20, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v40 = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEbT1_SZ_SU_((double *)a1, v7 - 20);
          if (!_ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEbT1_SZ_SU_(v7, a2))
          {
            if ((v40 & 1) == 0)
              goto LABEL_40;
            continue;
          }
          a2 = v7 - 20;
          if ((v40 & 1) != 0)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) == 0)
        {
          if ((double *)a1 == a2)
            return;
          v167 = (uint64_t *)(a1 + 160);
          if ((double *)(a1 + 160) == a2)
            return;
          v168 = 0;
          v169 = (WTF::StringImpl *)v211;
          v170 = a1 - 88;
          v171 = -2;
          v172 = 1;
          v173 = a1;
          while (1)
          {
            v174 = a1 + 160 * v168;
            v168 = v172;
            if (*(double *)(v173 + 232) < *(double *)(v174 + 72))
            {
              v175 = *v167;
              *v167 = 0;
              v176 = *(_OWORD *)(v173 + 168);
              *(_QWORD *)(v173 + 168) = 0;
              *(_QWORD *)(v173 + 176) = 0;
              *(_OWORD *)&v205[8] = v176;
              v177 = *(_QWORD *)(v173 + 184);
              *(_QWORD *)(v173 + 184) = 0;
              *(_QWORD *)v205 = v175;
              *(_QWORD *)&v205[24] = v177;
              v178 = *(_OWORD *)(v173 + 208);
              v206 = *(_OWORD *)(v173 + 192);
              v207 = v178;
              v208 = *(_QWORD *)(v173 + 224);
              v179 = *(_OWORD *)(v173 + 248);
              v209 = *(_OWORD *)(v173 + 232);
              v210 = v179;
              v180 = v169;
              WTF::URL::URL((uint64_t)v169, (uint64_t *)(v173 + 264));
              v212 = *(_BYTE *)(v173 + 304);
              v181 = *(WTF::StringImpl ***)(v173 + 312);
              *(_QWORD *)(v173 + 312) = 0;
              v213 = v181;
              v182 = v171;
              v183 = v170;
              do
              {
                WebKit::NetworkCache::Key::operator=(v183 + 248, v183 + 88);
                v184 = *(_OWORD *)(v183 + 176);
                *(_OWORD *)(v183 + 320) = *(_OWORD *)(v183 + 160);
                *(_OWORD *)(v183 + 336) = v184;
                WTF::URL::operator=(v183 + 352, (WTF::StringImpl *)(v183 + 192));
                *(_BYTE *)(v183 + 392) = *(_BYTE *)(v183 + 232);
                v186 = *(_QWORD *)(v183 + 240);
                *(_QWORD *)(v183 + 240) = 0;
                v187 = *(WTF::StringImpl ***)(v183 + 400);
                *(_QWORD *)(v183 + 400) = v186;
                if (v187)
                  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v187, v185);
                if (__CFADD__(v182++, 1))
                  goto LABEL_157;
                v189 = v183 - 160;
                v190 = *(double *)&v209 < *(double *)v183;
                v183 -= 160;
              }
              while (v190);
              WebKit::NetworkCache::Key::operator=(v189 + 248, (uint64_t)v205);
              v191 = v210;
              *(_OWORD *)(v189 + 320) = v209;
              *(_OWORD *)(v189 + 336) = v191;
              v169 = v180;
              WTF::URL::operator=(v189 + 352, v180);
              *(_BYTE *)(v189 + 392) = v212;
              v193 = v213;
              v213 = 0;
              v194 = *(WTF::StringImpl ***)(v189 + 400);
              *(_QWORD *)(v189 + 400) = v193;
              if (v194)
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v194, v192);
              WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v205, v192);
            }
            v173 = a1 + 160 * v168;
            v172 = v168 + 1;
            v167 = (uint64_t *)(v173 + 160);
            v170 += 160;
            --v171;
            if ((double *)(v173 + 160) == a2)
              return;
          }
        }
        if ((double *)a1 == a2)
          return;
        v67 = (_QWORD *)(a1 + 160);
        if ((double *)(a1 + 160) == a2)
          return;
        v68 = 0;
        v69 = a1;
        do
        {
          v70 = v67;
          if (*(double *)(v69 + 232) >= *(double *)(v69 + 72))
            goto LABEL_93;
          v71 = *v67;
          *v67 = 0;
          v72 = *(_OWORD *)(v69 + 168);
          *(_QWORD *)(v69 + 168) = 0;
          *(_QWORD *)(v69 + 176) = 0;
          *(_OWORD *)&v205[8] = v72;
          v73 = *(_QWORD *)(v69 + 184);
          *(_QWORD *)(v69 + 184) = 0;
          *(_QWORD *)v205 = v71;
          *(_QWORD *)&v205[24] = v73;
          v74 = *(_OWORD *)(v69 + 208);
          v206 = *(_OWORD *)(v69 + 192);
          v207 = v74;
          v208 = *(_QWORD *)(v69 + 224);
          v75 = *(_OWORD *)(v69 + 248);
          v209 = *(_OWORD *)(v69 + 232);
          v210 = v75;
          WTF::URL::URL((uint64_t)v211, (uint64_t *)(v69 + 264));
          v212 = *(_BYTE *)(v69 + 304);
          v76 = *(WTF::StringImpl ***)(v69 + 312);
          *(_QWORD *)(v69 + 312) = 0;
          v213 = v76;
          v77 = v68;
          while (1)
          {
            v78 = v77;
            v79 = a1 + v77;
            WebKit::NetworkCache::Key::operator=(a1 + v77 + 160, a1 + v77);
            *(_OWORD *)(v79 + 232) = *(_OWORD *)(v79 + 72);
            *(_OWORD *)(v79 + 248) = *(_OWORD *)(v79 + 88);
            WTF::URL::operator=(v79 + 264, (WTF::StringImpl *)(v79 + 104));
            *(_BYTE *)(v79 + 304) = *(_BYTE *)(v79 + 144);
            v81 = *(_QWORD *)(v79 + 152);
            *(_QWORD *)(v79 + 152) = 0;
            v82 = *(WTF::StringImpl ***)(v79 + 312);
            *(_QWORD *)(v79 + 312) = v81;
            if (v82)
              break;
            if (!v78)
              goto LABEL_89;
LABEL_86:
            v77 = v78 - 160;
            if (*(double *)&v209 >= *(double *)(a1 + v78 - 88))
            {
              v83 = a1 + v78;
              goto LABEL_90;
            }
          }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v82, v80);
          if (v78)
            goto LABEL_86;
LABEL_89:
          v83 = a1;
LABEL_90:
          WebKit::NetworkCache::Key::operator=(v83, (uint64_t)v205);
          v84 = a1 + v78;
          v85 = v210;
          *(_OWORD *)(v84 + 72) = v209;
          *(_OWORD *)(v84 + 88) = v85;
          WTF::URL::operator=(a1 + v78 + 104, (WTF::StringImpl *)v211);
          *(_BYTE *)(v83 + 144) = v212;
          v87 = v213;
          v213 = 0;
          v88 = *(WTF::StringImpl ***)(v83 + 152);
          *(_QWORD *)(v83 + 152) = v87;
          if (v88)
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v88, v86);
          WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v205, v86);
LABEL_93:
          v67 = v70 + 20;
          v68 += 160;
          v69 = (uint64_t)v70;
        }
        while (v70 + 20 != (_QWORD *)a2);
        return;
    }
  }
}

void _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;

  v5 = a1;
  v6 = *(double *)(a2 + 72);
  v7 = *(double *)(a3 + 72);
  if (v6 < *(double *)(a1 + 72))
  {
    if (v7 >= v6)
    {
      std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1, a2);
      if (*(double *)(a3 + 72) >= *(double *)(a2 + 72))
        return;
      a1 = a2;
    }
    v8 = a3;
    goto LABEL_9;
  }
  if (v7 < v6)
  {
    std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a2, a3);
    if (*(double *)(a2 + 72) < *(double *)(v5 + 72))
    {
      a1 = v5;
      v8 = a2;
LABEL_9:
      std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1, v8);
    }
  }
}

uint64_t _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEbT1_SZ_SU_(double *a1, double *a2)
{
  _BOOL8 v4;
  double *v5;
  double *v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  _OWORD v28[4];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[40];
  char v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 5))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      if (*(a2 - 11) < a1[9])
        std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)a1, (uint64_t)(a2 - 20));
      return v4;
    case 3uLL:
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_((uint64_t)a1, (uint64_t)(a1 + 20), (uint64_t)(a2 - 20));
      return v4;
    case 4uLL:
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEvT1_SZ_SZ_SZ_SU_((uint64_t)a1, (uint64_t)(a1 + 20), (uint64_t)(a1 + 40), (uint64_t)(a2 - 20));
      return v4;
    case 5uLL:
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEvT1_SZ_SZ_SZ_SU_((uint64_t)a1, (uint64_t)(a1 + 20), (uint64_t)(a1 + 40), (uint64_t)(a1 + 60));
      if (*(a2 - 11) < a1[69])
      {
        std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)(a1 + 60), (uint64_t)(a2 - 20));
        if (a1[69] < a1[49])
        {
          std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)(a1 + 40), (uint64_t)(a1 + 60));
          if (a1[49] < a1[29])
          {
            std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)(a1 + 20), (uint64_t)(a1 + 40));
            if (a1[29] < a1[9])
              std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>((uint64_t)a1, (uint64_t)(a1 + 20));
          }
        }
      }
      return 1;
    default:
      v5 = a1 + 40;
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_((uint64_t)a1, (uint64_t)(a1 + 20), (uint64_t)(a1 + 40));
      v6 = a1 + 60;
      if (a1 + 60 == a2)
        return 1;
      v7 = 0;
      v8 = 0;
      break;
  }
  while (v6[9] >= v5[9])
  {
LABEL_18:
    v5 = v6;
    v7 += 160;
    v6 += 20;
    if (v6 == a2)
      return 1;
  }
  v9 = *(_OWORD *)v6;
  v10 = *((_OWORD *)v6 + 1);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v28[0] = v9;
  v28[1] = v10;
  v11 = *((_OWORD *)v6 + 3);
  v28[2] = *((_OWORD *)v6 + 2);
  v28[3] = v11;
  v29 = *((_QWORD *)v6 + 8);
  v12 = *(_OWORD *)(v6 + 11);
  v30 = *(_OWORD *)(v6 + 9);
  v31 = v12;
  WTF::URL::URL((uint64_t)v32, (uint64_t *)v6 + 13);
  v33 = *((_BYTE *)v6 + 144);
  v13 = *((_QWORD *)v6 + 19);
  v6[19] = 0.0;
  v34 = v13;
  v14 = v7;
  while (1)
  {
    v15 = v14;
    v16 = (char *)a1 + v14;
    WebKit::NetworkCache::Key::operator=((uint64_t)a1 + v14 + 480, (uint64_t)a1 + v14 + 320);
    v17 = *(_OWORD *)(v16 + 408);
    *(_OWORD *)(v16 + 552) = *(_OWORD *)(v16 + 392);
    *(_OWORD *)(v16 + 568) = v17;
    WTF::URL::operator=((uint64_t)(v16 + 584), (WTF::StringImpl *)(v16 + 424));
    v16[624] = v16[464];
    v19 = *((_QWORD *)v16 + 59);
    *((_QWORD *)v16 + 59) = 0;
    v20 = (WTF::StringImpl **)*((_QWORD *)v16 + 79);
    *((_QWORD *)v16 + 79) = v19;
    if (v20)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v20, v18);
    if (v15 == -320)
      break;
    v14 = v15 - 160;
    if (*(double *)&v30 >= *(double *)((char *)a1 + v15 + 232))
    {
      v21 = (uint64_t)a1 + v14 + 480;
      goto LABEL_14;
    }
  }
  v21 = (uint64_t)a1;
LABEL_14:
  WebKit::NetworkCache::Key::operator=(v21, (uint64_t)v28);
  v22 = (_OWORD *)((char *)a1 + v15 + 392);
  v23 = v31;
  *v22 = v30;
  v22[1] = v23;
  WTF::URL::operator=((uint64_t)a1 + v15 + 424, (WTF::StringImpl *)v32);
  *(_BYTE *)(v21 + 144) = v33;
  v25 = v34;
  v34 = 0;
  v26 = *(WTF::StringImpl ***)(v21 + 152);
  *(_QWORD *)(v21 + 152) = v25;
  if (v26)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v24);
  if (++v8 != 8)
  {
    WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v28, v24);
    goto LABEL_18;
  }
  v4 = v6 + 20 == a2;
  WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v28, v24);
  return v4;
}

void std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  __int128 v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  _OWORD v17[4];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[40];
  char v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v17[0] = v4;
  v17[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v17[2] = *(_OWORD *)(a1 + 32);
  v17[3] = v6;
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_OWORD *)(a1 + 72);
  v20 = *(_OWORD *)(a1 + 88);
  v7 = a1 + 104;
  WTF::URL::URL((uint64_t)v21, (uint64_t *)(a1 + 104));
  v22 = *(_BYTE *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  v23 = v8;
  WebKit::NetworkCache::Key::operator=(a1, a2);
  v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v9;
  WTF::URL::operator=(v7, (WTF::StringImpl *)(a2 + 104));
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v12 = *(WTF::StringImpl ***)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v11;
  if (v12)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v10);
  WebKit::NetworkCache::Key::operator=(a2, (uint64_t)v17);
  v13 = v20;
  *(_OWORD *)(a2 + 72) = v19;
  *(_OWORD *)(a2 + 88) = v13;
  WTF::URL::operator=(a2 + 104, (WTF::StringImpl *)v21);
  *(_BYTE *)(a2 + 144) = v22;
  v15 = v23;
  v23 = 0;
  v16 = *(WTF::StringImpl ***)(a2 + 152);
  *(_QWORD *)(a2 + 152) = v15;
  if (v16)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v14);
  WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v17, v14);
}

void _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEvT1_SZ_SZ_SZ_SU_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache4openEON3WTF17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore14DOMCacheEngine30CacheIdentifierOperationResultENSA_5ErrorEEEEEEEN3__0clINS4_6VectorINS2_29CacheStorageRecordInformationELm0ENS4_15CrashOnOverflowELm16ENS4_10FastMallocEEEEEDaOT_EUlRSR_RT0_E_PSM_EEjT1_SZ_SZ_SU_(a1, a2, a3);
  if (*(double *)(a4 + 72) < *(double *)(a3 + 72))
  {
    std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a3, a4);
    if (*(double *)(a3 + 72) < *(double *)(a2 + 72))
    {
      std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a2, a3);
      if (*(double *)(a2 + 72) < *(double *)(a1 + 72))
        std::swap[abi:sn180100]<WebKit::CacheStorageRecordInformation>(a1, a2);
    }
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl **v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v13 + 4);
          if (v17 >= 0x100)
            v18 = v17 >> 8;
          else
            v18 = WTF::StringImpl::hashSlowCase(v13);
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v21 = (WTF::StringImpl **)(v15 + 24 * (v18 & v16));
            v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          v22 = (_QWORD *)(v15 + 24 * v20 + 8);
          WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v8);
          v24 = *v21;
          *v21 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = *v12;
          *v12 = 0;
          *v21 = v25;
          v26 = v4 + 24 * v9;
          *v22 = 0;
          *(_QWORD *)(v15 + 24 * v20 + 16) = 0;
          v27 = *(_QWORD *)(v26 + 8);
          v26 += 8;
          *(_QWORD *)v26 = 0;
          *v22 = v27;
          LODWORD(v25) = *(_DWORD *)(v26 + 8);
          *(_DWORD *)(v26 + 8) = 0;
          v28 = v15 + 24 * v20;
          *(_DWORD *)(v28 + 16) = (_DWORD)v25;
          LODWORD(v25) = *(_DWORD *)(v26 + 12);
          *(_DWORD *)(v26 + 12) = 0;
          *(_DWORD *)(v28 + 20) = (_DWORD)v25;
          WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, v23);
          v29 = *v12;
          *v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v8);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v12 == a3)
            v10 = v15 + 24 * v20;
        }
        else
        {
          WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v8);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

WTF *WTF::GenericHashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WebKit::CacheStorageRecordInformation *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *result;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v5 = *(WebKit::CacheStorageRecordInformation **)a1;
    v6 = 160 * v4;
    do
    {
      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation(v5, a2);
      v5 = (WebKit::CacheStorageRecordInformation *)(v7 + 160);
      v6 -= 160;
    }
    while (v6);
  }
  result = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v9;
  return result;
}

void WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v3 = WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 160 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  v6 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  v7 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v7;
  v8 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v4 + 24) = v8;
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 48) = v10;
  *(_QWORD *)(v4 + 64) = v9;
  v11 = *(_OWORD *)(v3 + 72);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(v3 + 88);
  *(_OWORD *)(v4 + 72) = v11;
  WTF::URL::URL(v4 + 104, (uint64_t *)(v3 + 104));
  *(_BYTE *)(v4 + 144) = *(_BYTE *)(v3 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  v12 = *(_QWORD *)(v3 + 152);
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v4 + 152) = v12;
  ++*(_DWORD *)(a1 + 12);
}

unint64_t WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 160 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x199999A)
    {
      __break(0xC471u);
      JUMPOUT(0x1971AFE2CLL);
    }
    v3 = *(uint64_t **)a1;
    v4 = (uint64_t *)(*(_QWORD *)a1 + 160 * *(unsigned int *)(a1 + 12));
    v5 = 160 * a2;
    v6 = WTF::fastMalloc((WTF *)(160 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFE0) / 0xA0;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::move(v3, v4, v6);
    if (v3)
    {
      if (*(uint64_t **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a3 + 104;
    do
    {
      v6 = *v4;
      *v4 = 0;
      *(_QWORD *)(v5 - 104) = v6;
      v7 = v4[1];
      v4[1] = 0;
      *(_QWORD *)(v5 - 96) = v7;
      v8 = v4[2];
      v4[2] = 0;
      *(_QWORD *)(v5 - 88) = v8;
      v9 = v4[3];
      v4[3] = 0;
      *(_QWORD *)(v5 - 80) = v9;
      v10 = *((_OWORD *)v4 + 2);
      v11 = *((_OWORD *)v4 + 3);
      *(_QWORD *)(v5 - 40) = v4[8];
      *(_OWORD *)(v5 - 56) = v11;
      *(_OWORD *)(v5 - 72) = v10;
      v12 = *(_OWORD *)(v4 + 11);
      *(_OWORD *)(v5 - 32) = *(_OWORD *)(v4 + 9);
      *(_OWORD *)(v5 - 16) = v12;
      WTF::URL::URL(v5, v4 + 13);
      *(_BYTE *)(v5 + 40) = *((_BYTE *)v4 + 144);
      *(_QWORD *)(v5 + 48) = 0;
      v13 = v4[19];
      v4[19] = 0;
      *(_QWORD *)(v5 + 48) = v13;
      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)v4, v14);
      v5 += 160;
      v4 += 20;
    }
    while (v4 != a2);
  }
}

uint64_t WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::CacheStorageRecordInformation *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebKit::CacheStorageRecordInformation **)a1;
    v5 = 160 * v3;
    do
    {
      WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation(v4, a2);
      v4 = (WebKit::CacheStorageRecordInformation *)(v6 + 160);
      v5 -= 160;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v4 = *(_QWORD *)a1 + 160 * *(unsigned int *)(a1 + 12);
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)v4 = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 8) = v6;
  v7 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(v4 + 16) = v7;
  v8 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(v4 + 24) = v8;
  v9 = *((_OWORD *)a2 + 2);
  v10 = *((_OWORD *)a2 + 3);
  *(_QWORD *)(v4 + 64) = a2[8];
  *(_OWORD *)(v4 + 32) = v9;
  *(_OWORD *)(v4 + 48) = v10;
  v11 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(v4 + 72) = v11;
  WTF::URL::URL(v4 + 104, a2 + 13);
  *(_BYTE *)(v4 + 144) = *((_BYTE *)a2 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  v12 = a2[19];
  a2[19] = 0;
  *(_QWORD *)(v4 + 152) = v12;
  ++*(_DWORD *)(a1 + 12);
}

uint64_t *WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _DWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *result;

  v3 = WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = WebKit::NetworkCache::Key::Key(*(_QWORD *)a1 + 160 * v4, v3);
  v7 = *(_OWORD *)(v3 + 72);
  *(_OWORD *)(v6 + 88) = *(_OWORD *)(v3 + 88);
  *(_OWORD *)(v6 + 72) = v7;
  v8 = *(_DWORD **)(v3 + 104);
  if (v8)
    *v8 += 2;
  v9 = v5 + 160 * v4;
  *(_QWORD *)(v9 + 104) = v8;
  v10 = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(v9 + 112) = *(_OWORD *)(v3 + 112);
  *(_OWORD *)(v9 + 128) = v10;
  *(_BYTE *)(v9 + 144) = *(_BYTE *)(v3 + 144);
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v9 + 152), (_QWORD **)(v3 + 152));
  ++*(_DWORD *)(a1 + 12);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::retrieveRecords(WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::Error> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::CacheStorageRecord>,0ul,WebCore::DOMCacheEngine::CrossThreadRecord,16ul,WTF::CrashOnOverflow> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;

  *a1 = off_1E34C6120;
  v3 = a1[31];
  a1[31] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[29];
  a1[29] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (WTF::StringImpl *)a1[28];
  a1[28] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[27];
  a1[27] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (const void *)a1[25];
  a1[25] = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 1));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::retrieveRecords(WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::Error> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::CacheStorageRecord>,0ul,WebCore::DOMCacheEngine::CrossThreadRecord,16ul,WTF::CrashOnOverflow> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const void *v7;
  void *v8;

  *a1 = off_1E34C6120;
  v3 = a1[31];
  a1[31] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[29];
  a1[29] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = (WTF::StringImpl *)a1[28];
  a1[28] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[27];
  a1[27] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (const void *)a1[25];
  a1[25] = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 1));
  return WTF::fastFree((WTF *)a1, v8);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::retrieveRecords(WebCore::RetrieveRecordsOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector::Error> &&)> &&)::$_1,void,std::experimental::fundamentals_v3::expected<std::optional<WebKit::CacheStorageRecord>,0ul,WebCore::DOMCacheEngine::CrossThreadRecord,16ul,WTF::CrashOnOverflow> &&>::call(WTF::StringImpl *result, uint64_t *a2)
{
  WTF::StringImpl *v2;
  unsigned int v3;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  WTF::StringImpl *v14;
  __int128 v15;
  char v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebCore::EmptyOriginAccessPatterns *v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  CFTypeRef v30;
  void *v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _DWORD v58[2];
  WTF::StringImpl *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  _BYTE v64[192];
  CFTypeRef cf;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  _BYTE v68[280];
  uint64_t v69;
  int v70;
  uint64_t v71;
  __int128 *v72;
  uint64_t v73;
  _BYTE v74[9];

  v2 = result;
  v72 = 0;
  v73 = 0;
  v3 = *((_DWORD *)a2 + 3);
  if (!v3)
  {
    v32 = 0;
LABEL_51:
    v33 = v32;
    goto LABEL_52;
  }
  if (v3 >= 0x6EB3E5)
  {
    __break(0xC471u);
LABEL_57:
    __break(1u);
    return result;
  }
  v5 = 592 * v3;
  v6 = WTF::fastMalloc((WTF *)(592 * v3));
  LODWORD(v73) = v5 / 0x250;
  v72 = (__int128 *)v6;
  v7 = *((_DWORD *)a2 + 3);
  if (!v7)
  {
    v32 = (__int128 *)v6;
    goto LABEL_51;
  }
  v8 = 0;
  v9 = *a2;
  v38 = 752 * v7;
  do
  {
    v10 = v9 + v8;
    if (!*(_BYTE *)(v9 + v8 + 736))
      goto LABEL_45;
    v11 = *(_QWORD *)(v10 + 80);
    v12 = *(_BYTE *)(v10 + 160);
    v13 = *(_DWORD *)(v10 + 368);
    *(_DWORD *)((char *)v58 + 3) = *(_DWORD *)(v10 + 371);
    v58[0] = v13;
    v14 = *(WTF::StringImpl **)(v10 + 376);
    if (v14)
      *(_DWORD *)v14 += 2;
    v59 = v14;
    v15 = *(_OWORD *)(v9 + v8 + 400);
    v60 = *(_OWORD *)(v9 + v8 + 384);
    v61 = v15;
    v16 = *(_BYTE *)(v9 + v8 + 424);
    v57 = 0;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    memset(v46, 0, sizeof(v46));
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v41 = 0u;
    WTF::URL::invalidate((WTF::URL *)&v41);
    *((_QWORD *)&v43 + 1) = 0;
    *((_QWORD *)&v44 + 1) = 0;
    *((_QWORD *)&v45 + 1) = 0;
    *(_QWORD *)&v46[0] = 0;
    WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)((char *)v46 + 8));
    BYTE8(v47) = 0;
    BYTE8(v55) = 0;
    BYTE8(v56) = 0;
    LOBYTE(v57) = 0;
    v39 = 0;
    v40 = 0;
    WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v62, v11, 0, v12, v10 + 168, (uint64_t)v58, (uint64_t *)(v9 + v8 + 416), v16, (uint64_t)&v41, (uint64_t)&v39, 0);
    if (v40 != -1)
      ((void (*)(_BYTE *, WTF::StringImpl **))off_1E34C5E58[v40])(v74, &v39);
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v41, v17);
    result = v59;
    v59 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
      else
        *(_DWORD *)result -= 2;
    }
    if (*((_BYTE *)v2 + 243))
    {
      if (!*(_BYTE *)(v10 + 736))
        goto LABEL_57;
      result = (WTF::StringImpl *)WebCore::ResourceResponseData::operator=((uint64_t)v68, v9 + v8 + 432);
      if (!*(_BYTE *)(v10 + 736))
        goto LABEL_57;
      result = (WTF::StringImpl *)std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v69, v9 + v8 + 720);
      if (!*(_BYTE *)(v10 + 736))
        goto LABEL_57;
      v71 = *(_QWORD *)(v9 + v8 + 712);
    }
    if (v68[257] != 4)
    {
LABEL_28:
      if (HIDWORD(v73) == (_DWORD)v73)
      {
        WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DOMCacheEngine::CrossThreadRecord>((uint64_t)&v72, (unint64_t)&v62);
      }
      else
      {
        WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v72[37 * HIDWORD(v73)], &v62);
        ++HIDWORD(v73);
      }
      v26 = 1;
      goto LABEL_32;
    }
    WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v64);
    v19 = (WebCore::EmptyOriginAccessPatterns *)WebCore::HTTPHeaderMap::get();
    WebCore::EmptyOriginAccessPatterns::singleton(v19);
    WebCore::validateCrossOriginResourcePolicy();
    v20 = LOBYTE(v46[0]);
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41, v21);
    v23 = v39;
    v39 = 0;
    if (!v23)
      goto LABEL_23;
    if (*(_DWORD *)v23 != 2)
    {
      *(_DWORD *)v23 -= 2;
LABEL_23:
      if (!v20)
        goto LABEL_28;
      goto LABEL_24;
    }
    WTF::StringImpl::destroy(v23, v22);
    if (!v20)
      goto LABEL_28;
LABEL_24:
    LOBYTE(v41) = 6;
    LODWORD(v42) = 1;
    v24 = *((_QWORD *)v2 + 31);
    *((_QWORD *)v2 + 31) = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v24 + 16))(v24, &v41);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if ((_DWORD)v42 != -1)
      ((void (*)(WTF::StringImpl **, __int128 *))off_1E34C5E48[v42])(&v39, &v41);
    v26 = 0;
LABEL_32:
    if (v70 != -1)
      ((void (*)(__int128 *, uint64_t *))off_1E34C5E58[v70])(&v41, &v69);
    v70 = -1;
    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v68, v25);
    v28 = v67;
    v67 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = v66;
    v66 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v27);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = cf;
    cf = 0;
    if (v30)
      CFRelease(v30);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v64);
    if (!v26)
      return (WTF::StringImpl *)WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v31);
LABEL_45:
    v8 += 752;
  }
  while (v38 != v8);
  v33 = v72;
  v32 = &v72[37 * HIDWORD(v73)];
  if (HIDWORD(v73))
  {
    v34 = 126 - 2 * __clz(HIDWORD(v73));
    goto LABEL_53;
  }
LABEL_52:
  v34 = 0;
LABEL_53:
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_Lb0EEEvT1_S13_SY_NS_15iterator_traitsIS13_E15difference_typeEb(v33, v32, v34, 1);
  *(_QWORD *)&v62 = v72;
  v35 = v73;
  v36 = HIDWORD(v73);
  v72 = 0;
  v73 = 0;
  *((_QWORD *)&v62 + 1) = __PAIR64__(v36, v35);
  v63 = 0;
  v37 = *((_QWORD *)v2 + 31);
  *((_QWORD *)v2 + 31) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v37 + 16))(v37, &v62);
  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (v63 != -1)
    ((void (*)(__int128 *, __int128 *))off_1E34C5E48[v63])(&v41, &v62);
  return (WTF::StringImpl *)WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v72, v31);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34C5E58[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34C6138[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E34C5E58[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  return result;
}

WTF::RefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(WTF::RefCountedBase *result, WTF::RefCountedBase **a2, WTF::RefCountedBase **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::RefCountedBase *v6;
  WTF::RefCountedBase *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::RefCountedBase *)((uint64_t (*)(char *, uint64_t))off_1E34C5E58[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN7WebCore8FormDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12SharedBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__assign_alt[abi:sn180100]<2ul,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(*a1, a2, a3);
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_Lb0EEEvT1_S13_SY_NS_15iterator_traitsIS13_E15difference_typeEb(__int128 *a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  CFTypeRef v28;
  BOOL RecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY;
  __int128 *v30;
  unint64_t v31;
  __int128 *v32;
  __int128 *v33;
  __int128 *v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  CFTypeRef v40;
  __int128 *v41;
  __int128 *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  CFTypeRef v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *i;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  CFTypeRef v71;
  __int128 v72;
  _BYTE v73[192];
  CFTypeRef cf;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  _BYTE v77[280];
  uint64_t v78;
  int v79;
  _BYTE v80[9];

LABEL_1:
  v8 = a2 - 37;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = 0x14C1BACF914C1BADLL * (a2 - v9);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(_QWORD *)v8 < *(_QWORD *)v9)
        {
          v41 = v9;
          v42 = a2 - 37;
          goto LABEL_89;
        }
        return;
      case 3uLL:
        _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(v9, v9 + 37, a2 - 37);
        return;
      case 4uLL:
        _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_S13_S13_S13_SY_(v9, v9 + 37, v9 + 74, a2 - 37);
        return;
      case 5uLL:
        v43 = v9 + 37;
        v44 = v9 + 74;
        v45 = v9 + 111;
        _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_S13_S13_S13_SY_(a1, a1 + 37, a1 + 74, a1 + 111);
        if (*(_QWORD *)v8 < *((_QWORD *)a1 + 222))
        {
          std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1 + 111, a2 - 37);
          if (*v45 < *v44)
          {
            std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1 + 74, a1 + 111);
            if (*v44 < *v43)
            {
              std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1 + 37, a1 + 74);
              if (*((_QWORD *)a1 + 74) < *(_QWORD *)a1)
              {
                v41 = a1;
                v42 = a1 + 37;
LABEL_89:
                std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(v41, v42);
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 14207)
        {
          if ((a4 & 1) != 0)
          {
            if (v9 != a2)
            {
              v46 = v9 + 37;
              if (v9 + 37 != a2)
              {
                v47 = 0;
                v48 = v9;
                do
                {
                  v49 = *((_QWORD *)v48 + 74);
                  v50 = *(_QWORD *)v48;
                  v48 = v46;
                  if (v49 < v50)
                  {
                    WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v72, v46);
                    v51 = v47;
                    while (1)
                    {
                      WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)v9 + v51 + 592, (__int128 *)((char *)v9 + v51));
                      if (!v51)
                        break;
                      v51 -= 592;
                      if ((unint64_t)v72 >= *(_QWORD *)((char *)v9 + v51))
                      {
                        v52 = (uint64_t)v9 + v51 + 592;
                        goto LABEL_107;
                      }
                    }
                    v52 = (uint64_t)v9;
LABEL_107:
                    WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v52, &v72);
                    if (v79 != -1)
                      ((void (*)(_BYTE *, uint64_t *))off_1E34C5E58[v79])(v80, &v78);
                    v79 = -1;
                    WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v77, v53);
                    v55 = v76;
                    v76 = 0;
                    if (v55)
                    {
                      if (*(_DWORD *)v55 == 2)
                        WTF::StringImpl::destroy(v55, v54);
                      else
                        *(_DWORD *)v55 -= 2;
                    }
                    v56 = v75;
                    v75 = 0;
                    if (v56)
                    {
                      if (*(_DWORD *)v56 == 2)
                        WTF::StringImpl::destroy(v56, v54);
                      else
                        *(_DWORD *)v56 -= 2;
                    }
                    v57 = cf;
                    cf = 0;
                    if (v57)
                      CFRelease(v57);
                    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v73);
                  }
                  v46 = v48 + 37;
                  v47 += 592;
                }
                while (v48 + 37 != a2);
              }
            }
          }
          else if (v9 != a2)
          {
            v58 = v9 + 37;
            if (v9 + 37 != a2)
            {
              v59 = 0;
              v60 = -2;
              v61 = 1;
              for (i = v9; ; i += 37)
              {
                v63 = 37 * v59;
                v59 = v61;
                if (*(_QWORD *)v58 < *(_QWORD *)&v9[v63])
                  break;
LABEL_144:
                v61 = v59 + 1;
                v58 = &v9[37 * v59 + 37];
                --v60;
                if (v58 == a2)
                  return;
              }
              WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v72, v58);
              v64 = v60;
              v65 = i;
              while (1)
              {
                WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)(v65 + 37), v65);
                if (__CFADD__(v64++, 1))
                  break;
                v65 -= 37;
                if ((unint64_t)v72 >= *(_QWORD *)v65)
                {
                  WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)(v65 + 37), &v72);
                  if (v79 != -1)
                    ((void (*)(_BYTE *, uint64_t *))off_1E34C5E58[v79])(v80, &v78);
                  v79 = -1;
                  WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v77, v67);
                  v69 = v76;
                  v76 = 0;
                  if (v69)
                  {
                    if (*(_DWORD *)v69 == 2)
                      WTF::StringImpl::destroy(v69, v68);
                    else
                      *(_DWORD *)v69 -= 2;
                  }
                  v70 = v75;
                  v75 = 0;
                  if (v70)
                  {
                    if (*(_DWORD *)v70 == 2)
                      WTF::StringImpl::destroy(v70, v68);
                    else
                      *(_DWORD *)v70 -= 2;
                  }
                  v71 = cf;
                  cf = 0;
                  if (v71)
                    CFRelease(v71);
                  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v73);
                  goto LABEL_144;
                }
              }
LABEL_146:
              __break(1u);
            }
          }
          return;
        }
        if (!a3)
        {
          _ZNSt3__114__partial_sortB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_S12_EET1_S13_S13_T2_SZ_(v9, a2, a2);
          return;
        }
        v12 = v11 >> 1;
        v13 = &v9[37 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x12801)
        {
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(v13, a1, a2 - 37);
        }
        else
        {
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(a1, v13, a2 - 37);
          v14 = 37 * v12;
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(a1 + 37, &a1[v14 - 37], a2 - 74);
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(a1 + 74, &a1[v14 + 37], a2 - 111);
          _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(&a1[v14 - 37], v13, &a1[v14 + 37]);
          std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1, v13);
        }
        --a3;
        if ((a4 & 1) == 0 && *((_QWORD *)a1 - 74) >= *(_QWORD *)a1)
        {
          WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v72, a1);
          if ((unint64_t)v72 >= *(_QWORD *)v8)
          {
            v32 = a1 + 37;
            do
            {
              v9 = v32;
              if (v32 >= a2)
                break;
              v32 += 37;
            }
            while ((unint64_t)v72 >= *(_QWORD *)v9);
          }
          else
          {
            v30 = a1 + 37;
            do
            {
              if (v30 == a2)
                goto LABEL_146;
              v31 = *(_QWORD *)v30;
              v30 += 37;
            }
            while ((unint64_t)v72 >= v31);
            v9 = v30 - 37;
          }
          v33 = a2;
          if (v9 < a2)
          {
            v33 = a2;
            while (v33 != a1)
            {
              v33 -= 37;
              if ((unint64_t)v72 >= *(_QWORD *)v33)
                goto LABEL_68;
            }
            goto LABEL_146;
          }
LABEL_68:
          if (v9 < v33)
          {
            std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(v9, v33);
            v34 = v9 + 37;
            while (v34 != a2)
            {
              v35 = *(_QWORD *)v34;
              v34 += 37;
              if ((unint64_t)v72 < v35)
              {
                v9 = v34 - 37;
                while (v33 != a1)
                {
                  v33 -= 37;
                  if ((unint64_t)v72 >= *(_QWORD *)v33)
                    goto LABEL_68;
                }
                goto LABEL_146;
              }
            }
            goto LABEL_146;
          }
          if (v9 - 37 != a1)
            WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)a1, v9 - 37);
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)(v9 - 37), &v72);
          if (v79 != -1)
            ((void (*)(_BYTE *, uint64_t *))off_1E34C5E58[v79])(v80, &v78);
          v79 = -1;
          WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v77, v36);
          v38 = v76;
          v76 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v37);
            else
              *(_DWORD *)v38 -= 2;
          }
          v39 = v75;
          v75 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v37);
            else
              *(_DWORD *)v39 -= 2;
          }
          v40 = cf;
          cf = 0;
          if (v40)
            CFRelease(v40);
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v73);
          a4 = 0;
          continue;
        }
        WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v72, a1);
        v15 = 0;
        do
        {
          v16 = &a1[v15 + 37];
          if (v16 == a2)
            goto LABEL_146;
          v15 += 37;
        }
        while (*(_QWORD *)v16 < (unint64_t)v72);
        v17 = &a1[v15];
        v18 = a2;
        if (v15 != 37)
        {
          while (v18 != a1)
          {
            v18 -= 37;
            if (*(_QWORD *)v18 < (unint64_t)v72)
              goto LABEL_20;
          }
          goto LABEL_146;
        }
        v18 = a2;
        do
        {
          if (v17 >= v18)
            break;
          v18 -= 37;
        }
        while (*(_QWORD *)v18 >= (unint64_t)v72);
LABEL_20:
        if (v17 >= v18)
        {
          v23 = v17 - 37;
        }
        else
        {
          v19 = &a1[v15];
          v20 = v18;
          do
          {
            std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(v19, v20);
            v21 = v19 + 37;
            do
            {
              if (v21 == a2)
                goto LABEL_146;
              v22 = *(_QWORD *)v21;
              v21 += 37;
            }
            while (v22 < (unint64_t)v72);
            v19 = v21 - 37;
            do
            {
              if (v20 == a1)
                goto LABEL_146;
              v20 -= 37;
            }
            while (*(_QWORD *)v20 >= (unint64_t)v72);
          }
          while (v19 < v20);
          v23 = v21 - 74;
        }
        if (v23 != a1)
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)a1, v23);
        WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)v23, &v72);
        if (v79 != -1)
          ((void (*)(_BYTE *, uint64_t *))off_1E34C5E58[v79])(v80, &v78);
        v79 = -1;
        WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)v77, v24);
        v26 = v76;
        v76 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v25);
          else
            *(_DWORD *)v26 -= 2;
        }
        v27 = v75;
        v75 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v25);
          else
            *(_DWORD *)v27 -= 2;
        }
        v28 = cf;
        cf = 0;
        if (v28)
          CFRelease(v28);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v73);
        if (v17 < v18)
        {
LABEL_48:
          _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_Lb0EEEvT1_S13_SY_NS_15iterator_traitsIS13_E15difference_typeEb(a1, v23, a3, a4 & 1);
          a4 = 0;
          v9 = v23 + 37;
          continue;
        }
        RecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY_(a1, v23);
        v9 = v23 + 37;
        if (!_ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY_(v23 + 37, a2))
        {
          if (RecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY)
            continue;
          goto LABEL_48;
        }
        a2 = v23;
        if (!RecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = (__int128 *)(a2 - 2);
        if (v36 < *(_QWORD *)v8)
        {
          v87 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v87;
        }
        return;
      case 3uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((__int128 *)v8, (unint64_t *)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((__int128 *)v8, (unint64_t *)(v8 + 16), (unint64_t *)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((__int128 *)v8, (unint64_t *)(v8 + 16), (unint64_t *)(v8 + 32), (__n128 *)(v8 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (unint64_t *)(v8 + 16);
          v39 = (unint64_t *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = (unint64_t *)v8;
              do
              {
                v42 = v37;
                v43 = *v37;
                if (v43 < *v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = *(_QWORD *)(v8 + v45 - 16);
                    v45 -= 16;
                    if (v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_81;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_81:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            v75 = -2;
            v76 = 1;
            v77 = (unint64_t *)v8;
            while (1)
            {
              v78 = *v37;
              if (*v37 < *v77)
                break;
LABEL_131:
              v77 = (unint64_t *)(v8 + 16 * v76++);
              v37 += 2;
              --v75;
              if (v37 == a2)
                return;
            }
            v79 = v77[3];
            v80 = v75;
            v81 = v37;
            while (1)
            {
              *(_OWORD *)v81 = *((_OWORD *)v81 - 1);
              v54 = __CFADD__(v80++, 1);
              if (v54)
                break;
              v82 = v81 - 2;
              v83 = *(v81 - 4);
              v81 -= 2;
              if (v78 >= v83)
              {
                *v82 = v78;
                v82[1] = v79;
                goto LABEL_131;
              }
            }
LABEL_133:
            __break(1u);
          }
          return;
        }
        if (!a3)
        {
          if ((unint64_t *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unint64_t *)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v53 = *v52;
                }
                else
                {
                  v53 = v52[2];
                  v54 = *v52 >= v53;
                  if (*v52 > v53)
                    v53 = *v52;
                  if (!v54)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v55 = (unint64_t *)(v8 + 16 * v50);
                v56 = *v55;
                if (v53 >= *v55)
                {
                  v57 = v55[1];
                  do
                  {
                    v58 = v55;
                    v55 = v52;
                    *(_OWORD *)v58 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v59 = (2 * v51) | 1;
                    v52 = (unint64_t *)(v8 + 16 * v59);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v60 = *v52;
                      v51 = v59;
                    }
                    else
                    {
                      v60 = *v52;
                      v61 = v52[2];
                      if (*v52 <= v61)
                        v60 = v52[2];
                      if (*v52 >= v61)
                        v51 = v59;
                      else
                        v52 += 2;
                    }
                  }
                  while (v60 >= v56);
                  *v55 = v56;
                  v55[1] = v57;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v62 = (unint64_t)v9 >> 4;
            do
            {
              v63 = 0;
              v88 = *(_OWORD *)v8;
              v64 = (_OWORD *)v8;
              do
              {
                v65 = (unint64_t *)&v64[v63 + 1];
                v66 = (2 * v63) | 1;
                v67 = 2 * v63 + 2;
                if (v67 < v62 && *v65 < v65[2])
                {
                  v65 += 2;
                  v66 = v67;
                }
                *v64 = *(_OWORD *)v65;
                v64 = v65;
                v63 = v66;
              }
              while (v66 <= (uint64_t)((unint64_t)(v62 - 2) >> 1));
              a2 -= 2;
              if (v65 == a2)
              {
                *(_OWORD *)v65 = v88;
              }
              else
              {
                *(_OWORD *)v65 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v88;
                v68 = (uint64_t)v65 - v8 + 16;
                if (v68 >= 17)
                {
                  v69 = (((unint64_t)v68 >> 4) - 2) >> 1;
                  v70 = (unint64_t *)(v8 + 16 * v69);
                  v71 = *v65;
                  if (*v70 < *v65)
                  {
                    v72 = v65[1];
                    do
                    {
                      v73 = v65;
                      v65 = v70;
                      *(_OWORD *)v73 = *(_OWORD *)v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = (unint64_t *)(v8 + 16 * v69);
                    }
                    while (*v70 < v71);
                    *v65 = v71;
                    v65[1] = v72;
                  }
                }
              }
            }
            while (v62-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unint64_t *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((__int128 *)(a1 + 16 * (v10 >> 1)), (unint64_t *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v10 >> 1)), a2 - 2);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((__int128 *)(a1 + 16), v12 - 2, a2 - 4);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v11), a2 - 6);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((__int128 *)v12 - 1, v12, (unint64_t *)(a1 + 16 + 16 * v11));
          v84 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v84;
        }
        --a3;
        v13 = *(_QWORD *)a1;
        if ((a4 & 1) == 0 && *(_QWORD *)(a1 - 16) >= v13)
        {
          v26 = *(_QWORD *)(a1 + 8);
          if (v13 >= *(a2 - 2))
          {
            v29 = a1 + 16;
            do
            {
              v8 = v29;
              if (v29 >= (unint64_t)a2)
                break;
              v29 += 16;
            }
            while (v13 >= *(_QWORD *)v8);
          }
          else
          {
            v27 = (unint64_t *)(a1 + 16);
            do
            {
              if (v27 == a2)
                goto LABEL_133;
              v28 = *v27;
              v27 += 2;
            }
            while (v13 >= v28);
            v8 = (unint64_t)(v27 - 2);
          }
          v30 = a2;
          if (v8 < (unint64_t)a2)
          {
            v30 = a2;
            while (v30 != (_OWORD *)a1)
            {
              v31 = *((_QWORD *)v30-- - 2);
              if (v13 >= v31)
                goto LABEL_54;
            }
            goto LABEL_133;
          }
LABEL_54:
          if (v8 < (unint64_t)v30)
          {
            v86 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v30;
            *v30 = v86;
            v32 = (unint64_t *)(v8 + 16);
            while (v32 != a2)
            {
              v33 = *v32;
              v32 += 2;
              if (v13 < v33)
              {
                v8 = (unint64_t)(v32 - 2);
                while (v30 != (_OWORD *)a1)
                {
                  v34 = *((_QWORD *)v30-- - 2);
                  if (v13 >= v34)
                    goto LABEL_54;
                }
                goto LABEL_133;
              }
            }
            goto LABEL_133;
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v26;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)(a1 + 8);
        do
        {
          v16 = (unint64_t *)(a1 + v14 + 16);
          if (v16 == a2)
            goto LABEL_133;
          v14 += 16;
        }
        while (*v16 < v13);
        v17 = a1 + v14;
        v18 = a2;
        if (v14 != 16)
        {
          while (v18 != (unint64_t *)a1)
          {
            v19 = *(v18 - 2);
            v18 -= 2;
            if (v19 < v13)
              goto LABEL_20;
          }
          goto LABEL_133;
        }
        v18 = a2;
        do
        {
          if (v17 >= (unint64_t)v18)
            break;
          v20 = *(v18 - 2);
          v18 -= 2;
        }
        while (v20 >= v13);
LABEL_20:
        v8 = a1 + v14;
        if (v17 < (unint64_t)v18)
        {
          v21 = (__int128 *)v18;
          do
          {
            v85 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v21;
            *v21 = v85;
            v22 = (unint64_t *)(v8 + 16);
            do
            {
              if (v22 == a2)
                goto LABEL_133;
              v23 = *v22;
              v22 += 2;
            }
            while (v23 < v13);
            v8 = (unint64_t)(v22 - 2);
            do
            {
              if (v21 == (__int128 *)a1)
                goto LABEL_133;
              v24 = *((_QWORD *)v21-- - 2);
            }
            while (v24 >= v13);
          }
          while (v8 < (unint64_t)v21);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v15;
        if (v17 < (unint64_t)v18)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v25 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(a1, (unint64_t *)(v8 - 16));
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(v8, a2))
        {
          if (v25)
            continue;
          goto LABEL_34;
        }
        a2 = (unint64_t *)(v8 - 16);
        if (!v25)
          goto LABEL_1;
        return;
    }
  }
}

void _ZNSt3__114__partial_sortB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_S12_EET1_S13_S13_T2_SZ_(__int128 *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  CFTypeRef v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  CFTypeRef v33;
  __int128 v35;
  uint64_t v36;
  CFTypeRef cf;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  CFTypeRef v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE v51[97];
  uint64_t v52;

  if (a1 != a2)
  {
    *(_QWORD *)&v51[89] = v3;
    v52 = v4;
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 592;
    if ((char *)a2 - (char *)a1 >= 593)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[37 * v10];
      do
      {
        _ZNSt3__111__sift_downB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_OSY_NS_15iterator_traitsIS13_E15difference_typeES13_((uint64_t)a1, v9, v12);
        v12 -= 37;
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      v13 = v6;
      do
      {
        if (*(_QWORD *)v13 < *(_QWORD *)a1)
        {
          std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(v13, a1);
          _ZNSt3__111__sift_downB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_OSY_NS_15iterator_traitsIS13_E15difference_typeES13_((uint64_t)a1, v9, a1);
        }
        v13 += 37;
      }
      while (v13 != a3);
    }
    if (v8 >= 593)
    {
      v14 = v8 / 0x250uLL;
      do
      {
        WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v35, a1);
        v15 = 0;
        v16 = (uint64_t)a1;
        do
        {
          v17 = v16 + 592 * v15 + 592;
          v18 = (2 * v15) | 1;
          v19 = 2 * v15 + 2;
          if (v19 < v14 && *(_QWORD *)v17 < *(_QWORD *)(v17 + 592))
          {
            v17 += 592;
            v18 = v19;
          }
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v16, (__int128 *)v17);
          v16 = v17;
          v15 = v18;
        }
        while (v18 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
        v6 -= 37;
        if ((__int128 *)v17 == v6)
        {
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v17, &v35);
        }
        else
        {
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v17, v6);
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)v6, &v35);
          v21 = v17 - (_QWORD)a1 + 592;
          if (v21 >= 593)
          {
            v22 = (v21 / 0x250uLL - 2) >> 1;
            v23 = &a1[37 * v22];
            if (*(_QWORD *)v23 < *(_QWORD *)v17)
            {
              WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v43, (__int128 *)v17);
              do
              {
                v24 = (uint64_t)v23;
                WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v17, v23);
                if (!v22)
                  break;
                v22 = (v22 - 1) >> 1;
                v23 = &a1[37 * v22];
                v17 = v24;
              }
              while (*(_QWORD *)v23 < (unint64_t)v43);
              WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v24, &v43);
              if (v50 != -1)
                ((void (*)(_BYTE *, uint64_t *))off_1E34C5E58[v50])(v51, &v49);
              v50 = -1;
              WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v48, v25);
              v27 = v47;
              v47 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, v26);
                else
                  *(_DWORD *)v27 -= 2;
              }
              v28 = v46;
              v46 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                  WTF::StringImpl::destroy(v28, v26);
                else
                  *(_DWORD *)v28 -= 2;
              }
              v29 = v45;
              v45 = 0;
              if (v29)
                CFRelease(v29);
              WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v44);
            }
          }
        }
        if (v42 != -1)
          ((void (*)(__int128 *, uint64_t *))off_1E34C5E58[v42])(&v43, &v41);
        v42 = -1;
        WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v40, v20);
        v31 = v39;
        v39 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v30);
          else
            *(_DWORD *)v31 -= 2;
        }
        v32 = v38;
        v38 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v30);
          else
            *(_DWORD *)v32 -= 2;
        }
        v33 = cf;
        cf = 0;
        if (v33)
          CFRelease(v33);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v36);
      }
      while (v14-- > 2);
    }
  }
}

void _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(__int128 *a1, __int128 *a2, __int128 *a3)
{
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;

  v5 = a1;
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)a3;
  if (*(_QWORD *)a2 < *(_QWORD *)a1)
  {
    if (v7 >= v6)
    {
      std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1, a2);
      if (*(_QWORD *)a3 >= *(_QWORD *)a2)
        return;
      a1 = a2;
    }
    v8 = a3;
    goto LABEL_9;
  }
  if (v7 < v6)
  {
    std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a2, a3);
    if (*(_QWORD *)a2 < *(_QWORD *)v5)
    {
      a1 = v5;
      v8 = a2;
LABEL_9:
      std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1, v8);
    }
  }
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEbT1_S13_SY_(__int128 *a1, __int128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  CFTypeRef v19;
  _QWORD *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  CFTypeRef cf;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BYTE v30[9];

  v4 = 0x14C1BACF914C1BADLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 37;
      if (*((_QWORD *)a2 - 74) < *(_QWORD *)a1)
      {
        v7 = a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(a1, a1 + 37, a2 - 37);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_S13_S13_S13_SY_(a1, a1 + 37, a1 + 74, a2 - 37);
      return 1;
    case 5:
      v20 = a1 + 74;
      v21 = a2 - 37;
      _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_S13_S13_S13_SY_(a1, a1 + 37, a1 + 74, a1 + 111);
      if (*(_QWORD *)v21 < *((_QWORD *)a1 + 222))
      {
        std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1 + 111, v21);
        if (*((_QWORD *)a1 + 222) < *v20)
        {
          std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1 + 74, a1 + 111);
          if (*v20 < *((_QWORD *)a1 + 74))
          {
            std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1 + 37, a1 + 74);
            if (*((_QWORD *)a1 + 74) < *(_QWORD *)a1)
            {
              v7 = a1;
              v6 = a1 + 37;
LABEL_4:
              std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 74;
      _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(a1, a1 + 37, a1 + 74);
      v9 = a1 + 111;
      if (a1 + 111 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (*(_QWORD *)v9 < *(_QWORD *)v8)
    {
      WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v22, v9);
      v12 = v10;
      while (1)
      {
        WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)a1 + v12 + 1776, (__int128 *)((char *)a1 + v12 + 1184));
        if (v12 == -1184)
          break;
        v13 = *(_QWORD *)((char *)a1 + v12 + 592);
        v12 -= 592;
        if ((unint64_t)v22 >= v13)
        {
          v14 = (uint64_t)a1 + v12 + 1776;
          goto LABEL_14;
        }
      }
      v14 = (uint64_t)a1;
LABEL_14:
      WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v14, &v22);
      if (v29 != -1)
        ((void (*)(_BYTE *, uint64_t *))off_1E34C5E58[v29])(v30, &v28);
      v29 = -1;
      WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v27, v15);
      v17 = v26;
      v26 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v25;
      v25 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v16);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = cf;
      cf = 0;
      if (v19)
        CFRelease(v19);
      ++v11;
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v23);
      if (v11 == 8)
        return v9 + 37 == a2;
    }
    v8 = v9;
    v10 += 592;
    v9 += 37;
    if (v9 == a2)
      return 1;
  }
}

void std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(__int128 *a1, __int128 *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  __int128 v9;
  uint64_t v10;
  CFTypeRef cf;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;

  WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v9, a1);
  WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)a1, a2);
  WebCore::DOMCacheEngine::CrossThreadRecord::operator=((uint64_t)a2, &v9);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))off_1E34C5E58[v16])(&v17, &v15);
  v16 = -1;
  WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v14, v4);
  v6 = v13;
  v13 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = cf;
  cf = 0;
  if (v8)
    CFRelease(v8);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v10);
}

uint64_t WebCore::DOMCacheEngine::CrossThreadRecord::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  WTF::RefCountedBase *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  int v10;
  __int128 v11;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  WebCore::ResourceRequestBase::RequestData::operator=(a1 + 24, (uint64_t)a2 + 24);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 176), (WTF::StringImpl *)(a2 + 11));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 184), (WTF::StringImpl *)((char *)a2 + 184));
  v5 = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = 0;
  v6 = *(WTF::RefCountedBase **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v5;
  if (v6)
    WTF::RefCounted<WebCore::FormData>::deref(v6);
  v7 = *((_QWORD *)a2 + 25);
  *(_BYTE *)(a1 + 208) = *((_BYTE *)a2 + 208);
  *(_QWORD *)(a1 + 200) = v7;
  v8 = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = 0;
  v9 = *(const void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v8;
  if (v9)
    CFRelease(v9);
  v10 = *((_DWORD *)a2 + 56);
  *(_DWORD *)(a1 + 227) = *(_DWORD *)((char *)a2 + 227);
  *(_DWORD *)(a1 + 224) = v10;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 232), (WTF::StringImpl *)((char *)a2 + 232));
  v11 = a2[16];
  *(_OWORD *)(a1 + 240) = a2[15];
  *(_OWORD *)(a1 + 256) = v11;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 272), (WTF::StringImpl *)(a2 + 17));
  *(_BYTE *)(a1 + 280) = *((_BYTE *)a2 + 280);
  WebCore::ResourceResponseData::operator=(a1 + 288, (uint64_t)(a2 + 18));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,(std::__variant_detail::_Trait)1>>(a1 + 568, (uint64_t)a2 + 568);
  *(_QWORD *)(a1 + 584) = *((_QWORD *)a2 + 73);
  return a1;
}

void _ZNSt3__17__sort4B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_S13_S13_S13_SY_(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  _ZNSt3__17__sort3B8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEjT1_S13_S13_SY_(a1, a2, a3);
  if (*(_QWORD *)a4 < *(_QWORD *)a3)
  {
    std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a3, a4);
    if (*(_QWORD *)a3 < *(_QWORD *)a2)
    {
      std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a2, a3);
      if (*(_QWORD *)a2 < *(_QWORD *)a1)
        std::swap[abi:sn180100]<WebCore::DOMCacheEngine::CrossThreadRecord>(a1, a2);
    }
  }
}

void _ZNSt3__111__sift_downB8sn180100INS_17_ClassicAlgPolicyERZZN6WebKit17CacheStorageCache15retrieveRecordsEON7WebCore22RetrieveRecordsOptionsEON3WTF17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS7_6VectorINS4_14DOMCacheEngine17CrossThreadRecordELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENSD_5ErrorEEEEEEEN3__1clINSC_INS_8optionalINS2_18CacheStorageRecordEEELm0ESF_Lm16ESG_EEEEDaOT_EUlRSV_RT0_E_PSE_EEvT1_OSY_NS_15iterator_traitsIS13_E15difference_typeES13_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  __int128 v22;
  uint64_t v23;
  CFTypeRef cf;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BYTE v30[89];
  uint64_t v31;

  v5 = a2 - 2;
  if (a2 >= 2)
  {
    *(_QWORD *)&v30[81] = v3;
    v31 = v4;
    v6 = (uint64_t)a3;
    v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= 0x14C1BACF914C1BADLL * (((uint64_t)a3 - a1) >> 4))
    {
      v10 = (0x2983759F2298375ALL * (((uint64_t)a3 - a1) >> 4)) | 1;
      v11 = a1 + 592 * v10;
      if (0x2983759F2298375ALL * (((uint64_t)a3 - a1) >> 4) + 2 >= a2)
      {
        v12 = *(_QWORD *)v11;
      }
      else
      {
        v12 = *(_QWORD *)v11;
        v13 = *(_QWORD *)(v11 + 592);
        if (*(_QWORD *)v11 <= v13)
          v12 = *(_QWORD *)(v11 + 592);
        if (*(_QWORD *)v11 < v13)
        {
          v11 += 592;
          v10 = 0x2983759F2298375ALL * (((uint64_t)a3 - a1) >> 4) + 2;
        }
      }
      if (v12 >= *(_QWORD *)a3)
      {
        WebCore::DOMCacheEngine::CrossThreadRecord::CrossThreadRecord((uint64_t)&v22, a3);
        do
        {
          v14 = v11;
          WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v6, (__int128 *)v11);
          if (v8 < v10)
            break;
          v11 = a1 + 592 * ((2 * v10) | 1);
          if (2 * v10 + 2 >= a2)
          {
            v15 = *(_QWORD *)v11;
            v10 = (2 * v10) | 1;
          }
          else
          {
            v15 = *(_QWORD *)v11;
            v16 = *(_QWORD *)(v11 + 592);
            if (*(_QWORD *)v11 <= v16)
              v15 = *(_QWORD *)(v11 + 592);
            if (*(_QWORD *)v11 >= v16)
            {
              v10 = (2 * v10) | 1;
            }
            else
            {
              v11 += 592;
              v10 = 2 * v10 + 2;
            }
          }
          v6 = v14;
        }
        while (v15 >= (unint64_t)v22);
        WebCore::DOMCacheEngine::CrossThreadRecord::operator=(v14, &v22);
        if (v29 != -1)
          ((void (*)(_BYTE *, uint64_t *))off_1E34C5E58[v29])(v30, &v28);
        v29 = -1;
        WebCore::ResourceResponseData::~ResourceResponseData((WebCore::ResourceResponseData *)&v27, v17);
        v19 = v26;
        v26 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = v25;
        v25 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v18);
          else
            *(_DWORD *)v20 -= 2;
        }
        v21 = cf;
        cf = 0;
        if (v21)
          CFRelease(v21);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v23);
      }
    }
  }
}

void WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::moveOverlapping(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WebKit::CacheStorageRecordInformation *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      v5 = 0;
      v6 = a3 + (char *)a2 - (char *)a1;
      do
      {
        v8 = (WebKit::CacheStorageRecordInformation *)&a2[v5 - 20];
        v7 = *(_QWORD *)v8;
        v9 = v6 + v5 * 8;
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v9 - 160) = v7;
        v10 = a2[v5 - 19];
        *((_QWORD *)v8 + 1) = 0;
        *(_QWORD *)(v9 - 152) = v10;
        v11 = a2[v5 - 18];
        *((_QWORD *)v8 + 2) = 0;
        *(_QWORD *)(v9 - 144) = v11;
        v12 = a2[v5 - 17];
        *((_QWORD *)v8 + 3) = 0;
        *(_QWORD *)(v9 - 136) = v12;
        v13 = *(_OWORD *)&a2[v5 - 16];
        v14 = *(_OWORD *)&a2[v5 - 14];
        *(_QWORD *)(v9 - 96) = a2[v5 - 12];
        *(_OWORD *)(v9 - 128) = v13;
        *(_OWORD *)(v9 - 112) = v14;
        v15 = *(_OWORD *)&a2[v5 - 11];
        *(_OWORD *)(v9 - 72) = *(_OWORD *)&a2[v5 - 9];
        *(_OWORD *)(v9 - 88) = v15;
        WTF::URL::URL(v6 + v5 * 8 - 56, &a2[v5 - 7]);
        *(_BYTE *)(v9 - 16) = a2[v5 - 2];
        *(_QWORD *)(v9 - 8) = 0;
        v16 = a2[v5 - 1];
        a2[v5 - 1] = 0;
        *(_QWORD *)(v9 - 8) = v16;
        WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation(v8, v17);
        v5 -= 20;
      }
      while (&a2[v5] != a1);
    }
  }
  else
  {
    WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::move(a1, a2, a3);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::removeRecords(WebCore::ResourceRequest &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)a1 = &off_1E34C6160;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::removeRecords(WebCore::ResourceRequest &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E34C6160;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::removeRecords(WebCore::ResourceRequest &&,WebCore::CacheQueryOptions &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void,BOOL>::call(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];
  int v6;
  char v7;

  if ((a2 & 1) != 0)
  {
    v5[0] = a1[1];
    v2 = a1[2];
    a1[1] = 0;
    a1[2] = 0;
    v5[1] = v2;
    v6 = 0;
  }
  else
  {
    LOBYTE(v5[0]) = 2;
    v6 = 1;
  }
  v3 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34C5E80[v6])(&v7, v5);
  return result;
}

uint64_t WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  WebKit::CacheStorageRecord *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(WebKit::CacheStorageRecord **)a1;
    v5 = 736 * v3;
    do
    {
      WebKit::CacheStorageRecord::~CacheStorageRecord(v4, a2);
      v4 = (WebKit::CacheStorageRecord *)(v6 + 736);
      v5 -= 736;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecords(WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void,BOOL>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34C6188;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecords(WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = off_1E34C6188;
  v3 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v5 = (unsigned int *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecords(WTF::Vector<WebCore::DOMCacheEngine::CrossThreadRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::ResourceRequestBase *v7;
  uint64_t ExistingRecord;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _DWORD *v14;
  uint64_t v15;
  __int128 v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  _QWORD *v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t result;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  WTF *v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    if ((a2 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v38 = 0;
      v39 = 0;
      v5 = *(_DWORD *)(a1 + 36);
      if (v5)
      {
        v6 = 736 * v5;
        v7 = (WebCore::ResourceRequestBase *)(*(_QWORD *)(a1 + 24) + 168);
        do
        {
          if ((*(_BYTE *)(*((_QWORD *)v7 - 8) + 16) & 0x10) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1971B2310);
          }
          ExistingRecord = WebKit::CacheStorageCache::findExistingRecord(v4, v7, 0, 0);
          if (ExistingRecord)
          {
            v9 = ExistingRecord;
            *((_QWORD *)v7 - 11) = *(_QWORD *)(ExistingRecord + 80);
            v10 = HIDWORD(v39);
            if (HIDWORD(v39) == (_DWORD)v39)
            {
              WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation&>((uint64_t)&v38, ExistingRecord);
            }
            else
            {
              v11 = v38;
              v12 = WebKit::NetworkCache::Key::Key(v38 + 160 * HIDWORD(v39), ExistingRecord);
              v13 = *(_OWORD *)(v9 + 72);
              *(_OWORD *)(v12 + 88) = *(_OWORD *)(v9 + 88);
              *(_OWORD *)(v12 + 72) = v13;
              v14 = *(_DWORD **)(v9 + 104);
              if (v14)
                *v14 += 2;
              v15 = v11 + 160 * v10;
              *(_QWORD *)(v15 + 104) = v14;
              v16 = *(_OWORD *)(v9 + 128);
              *(_OWORD *)(v15 + 112) = *(_OWORD *)(v9 + 112);
              *(_OWORD *)(v15 + 128) = v16;
              *(_BYTE *)(v15 + 144) = *(_BYTE *)(v9 + 144);
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v15 + 152), (_QWORD **)(v9 + 152));
              HIDWORD(v39) = v10 + 1;
            }
          }
          v7 = (WebCore::ResourceRequestBase *)((char *)v7 + 736);
          v6 -= 736;
        }
        while (v6);
      }
      v35 = v4;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v4, v4);
      v17 = *(unsigned int **)v4;
      v18 = v4;
      if (*(_QWORD *)v4)
      {
        do
          v19 = __ldaxr(v17);
        while (__stlxr(v19 + 1, v17));
        v18 = v35;
      }
      v20 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      v21 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;
      v22 = *(_QWORD *)(v4 + 80);
      v23 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
      *v24 = off_1E34C61B0;
      v24[1] = v18;
      v24[2] = v17;
      v24[3] = v20;
      v36 = 0;
      v37[0] = 0;
      v37[1] = 0;
      v24[4] = v23;
      v24[5] = v21;
      v34 = v24;
      (*(void (**)(uint64_t, uint64_t *, _QWORD **))(*(_QWORD *)v22 + 24))(v22, &v38, &v34);
      v26 = v34;
      v34 = 0;
      if (v26)
        (*(void (**)(_QWORD *))(*v26 + 8))(v26);
      v37[2] = 0;
      WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v25);
      v28 = (unsigned int *)v36;
      v36 = 0;
      if (v28)
      {
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, v28);
          WTF::fastFree((WTF *)v28, v27);
        }
      }
      return WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, (WTF::StringImpl *)v27);
    }
    v32 = 3;
  }
  else
  {
    v32 = 4;
  }
  LOBYTE(v35) = v32;
  LODWORD(v37[0]) = 1;
  v33 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v33 + 16))(v33, &v35);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  if (LODWORD(v37[0]) != -1)
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E34C5E80[LODWORD(v37[0])])(&v38, &v35);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecordsAfterQuotaCheck(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_0,void,WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E34C61B0;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecordsAfterQuotaCheck(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_0,void,WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = off_1E34C61B0;
  v3 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v5 = (unsigned int *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return WTF::fastFree(a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecordsAfterQuotaCheck(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_0,void,WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  int i;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *v29;
  uint64_t ExistingRecord;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  _DWORD *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::RefCountedBase *v54;
  uint64_t v55;
  uint64_t v56;
  const void *v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  const WTF::String *v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97[2];
  int v98;
  WTF::StringImpl *v99;
  WTF *v100;
  uint64_t v101;

  v2 = a1;
  v95 = *(_QWORD *)a2;
  v3 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v96 = v3;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    LOBYTE(v97[0]) = 4;
    v98 = 1;
    v66 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v66 + 16))(v66, v97);
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    if (v98 != -1)
      ((void (*)(WTF **, WTF::StringImpl **))off_1E34C5E80[v98])(&v100, v97);
    goto LABEL_101;
  }
  v5 = *(_QWORD **)(a1 + 8);
  v7 = a1 + 24;
  v6 = *(_QWORD *)(a1 + 24);
  v100 = 0;
  v101 = 0;
  v8 = *(_DWORD *)(a1 + 36);
  if (!v8)
  {
    v93 = 0;
    v74 = 0;
    v69 = 0;
    v68 = v6;
    v71 = (uint64_t *)v6;
    goto LABEL_89;
  }
  v86 = a1 + 24;
  v9 = 0;
  v88 = (uint64_t)v5;
  v89 = 0;
  v10 = v6 + 736 * v8;
  v94 = v5 + 9;
  v90 = v10;
  do
  {
    v11 = *(_QWORD *)(v6 + 80);
    if (v11)
    {
      if (HIDWORD(v96))
      {
        v12 = 0;
        v13 = 0;
        v14 = v95;
        while (!*(_BYTE *)(v95 + v12 + 736) || *(_QWORD *)(v95 + v12 + 80) != v11)
        {
          ++v13;
          v12 += 752;
          if (752 * HIDWORD(v96) == v12)
            goto LABEL_11;
        }
        if (v13 >= HIDWORD(v96))
        {
          __break(0xC471u);
LABEL_103:
          __break(1u);
          return;
        }
        ExistingRecord = WebKit::CacheStorageCache::findExistingRecord(v88, (WebCore::ResourceRequestBase *)(v6 + 168), v11, 1);
        if (ExistingRecord)
        {
          v31 = ExistingRecord;
          WebKit::NetworkCache::Key::operator=(v6, ExistingRecord);
          *(_QWORD *)(v6 + 72) = *(_QWORD *)(v31 + 72);
          WTF::URL::isolatedCopy();
          WTF::URL::operator=(v6 + 104, (WTF::StringImpl *)v97);
          v33 = v97[0];
          v97[0] = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v32);
            else
              *(_DWORD *)v33 -= 2;
          }
          v51 = v14 + v12;
          if (*(_BYTE *)(v14 + v12 + 736))
          {
            v52 = v14 + v12;
            *(_BYTE *)(v6 + 160) = *(_BYTE *)(v14 + v12 + 160);
            WebCore::ResourceRequestBase::RequestData::operator=(v6 + 168, v14 + v12 + 168);
            WTF::String::operator=((WTF::StringImpl **)(v6 + 320), (WTF::StringImpl *)(v14 + v12 + 320));
            WTF::String::operator=((WTF::StringImpl **)(v6 + 328), (WTF::StringImpl *)(v14 + v12 + 328));
            v53 = *(_QWORD *)(v14 + v12 + 336);
            *(_QWORD *)(v14 + v12 + 336) = 0;
            v54 = *(WTF::RefCountedBase **)(v6 + 336);
            *(_QWORD *)(v6 + 336) = v53;
            if (v54)
              WTF::RefCounted<WebCore::FormData>::deref(v54);
            v55 = *(_QWORD *)(v52 + 344);
            *(_BYTE *)(v6 + 352) = *(_BYTE *)(v52 + 352);
            *(_QWORD *)(v6 + 344) = v55;
            v56 = *(_QWORD *)(v52 + 360);
            *(_QWORD *)(v52 + 360) = 0;
            v57 = *(const void **)(v6 + 360);
            *(_QWORD *)(v6 + 360) = v56;
            if (v57)
              CFRelease(v57);
            v10 = v90;
            if (*(_BYTE *)(v51 + 736))
            {
              v58 = v14 + v12;
              v59 = *(_DWORD *)(v58 + 368);
              *(_DWORD *)(v6 + 371) = *(_DWORD *)(v58 + 371);
              *(_DWORD *)(v6 + 368) = v59;
              WTF::String::operator=((WTF::StringImpl **)(v6 + 376), (WTF::StringImpl *)(v58 + 376));
              v60 = *(_OWORD *)(v58 + 400);
              *(_OWORD *)(v6 + 384) = *(_OWORD *)(v58 + 384);
              *(_OWORD *)(v6 + 400) = v60;
              if (*(_BYTE *)(v51 + 736))
              {
                WTF::String::operator=((WTF::StringImpl **)(v6 + 416), (WTF::StringImpl *)(v58 + 416));
                WebKit::CacheStorageRecordInformation::updateVaryHeaders((WebKit::CacheStorageRecordInformation *)v6, (const WebCore::ResourceRequest *)(v6 + 168), (const WebCore::ResourceResponseData *)(v6 + 432));
                v50 = *(_QWORD *)(v6 + 96);
                v89 += *(_QWORD *)(v31 + 96);
                *(_QWORD *)(v31 + 96) = v50;
                v49 = (uint64_t *)(v6 + 80);
                goto LABEL_66;
              }
            }
          }
          goto LABEL_103;
        }
      }
LABEL_11:
      *(_QWORD *)(v6 + 80) = 0;
      goto LABEL_70;
    }
    do
    {
      v15 = __ldaxr(&WebKit::nextRecordIdentifier(void)::currentRecordIdentifier);
      v16 = v15 + 1;
    }
    while (__stlxr(v16, &WebKit::nextRecordIdentifier(void)::currentRecordIdentifier));
    *(_QWORD *)(v6 + 80) = v16;
    v91 = *(_QWORD *)(v6 + 96);
    WebKit::computeKeyURL((WebKit *)&v99, (const WTF::URL *)(v6 + 104));
    v19 = *v94;
    if (*v94
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v94, 0), (v19 = *v94) != 0))
    {
      v20 = *(_DWORD *)(v19 - 8);
    }
    else
    {
      v20 = 0;
    }
    v21 = v99;
    v22 = *((_DWORD *)v99 + 4);
    v92 = v9;
    if (v22 >= 0x100)
      v23 = v22 >> 8;
    else
      v23 = WTF::StringImpl::hashSlowCase(v99);
    v24 = 0;
    for (i = 1; ; ++i)
    {
      v26 = v23 & v20;
      v27 = v19 + 24 * (v23 & v20);
      v28 = *(WTF **)v27;
      if (*(_QWORD *)v27 == -1)
      {
        v24 = (_QWORD *)(v19 + 24 * v26);
        goto LABEL_25;
      }
      if (!v28)
        break;
      if ((WTF::equal(v28, v21, v18) & 1) != 0)
        goto LABEL_46;
LABEL_25:
      v23 = i + v26;
    }
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      --*(_DWORD *)(*v94 - 16);
      v27 = (uint64_t)v24;
    }
    v99 = 0;
    v29 = *(WTF::StringImpl **)v27;
    *(_QWORD *)v27 = v21;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v17);
      else
        *(_DWORD *)v29 -= 2;
    }
    v97[0] = 0;
    v97[1] = 0;
    WTF::GenericHashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v27 + 8, (WTF::StringImpl *)v97);
    WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v97, v34);
    v35 = *v94;
    if (*v94)
      v36 = *(_DWORD *)(v35 - 12) + 1;
    else
      v36 = 1;
    *(_DWORD *)(v35 - 12) = v36;
    v37 = *v94;
    if (*v94)
      v38 = *(_DWORD *)(v37 - 12);
    else
      v38 = 0;
    v39 = (*(_DWORD *)(v37 - 16) + v38);
    v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 <= 2 * v39)
LABEL_45:
        v27 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v94, (WTF::StringImpl **)v27);
    }
    else if (3 * v40 <= 4 * v39)
    {
      goto LABEL_45;
    }
LABEL_46:
    v41 = (uint64_t *)(v27 + 8);
    v42 = *(_DWORD *)(v27 + 20);
    if (v42 == *(_DWORD *)(v27 + 16))
    {
      WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation&>((uint64_t)v41, v6);
      v9 = v92;
      v10 = v90;
    }
    else
    {
      v43 = *v41;
      v44 = WebKit::NetworkCache::Key::Key(*v41 + 160 * v42, v6);
      v45 = *(_OWORD *)(v6 + 72);
      *(_OWORD *)(v44 + 88) = *(_OWORD *)(v6 + 88);
      *(_OWORD *)(v44 + 72) = v45;
      v46 = *(_DWORD **)(v6 + 104);
      v9 = v92;
      v10 = v90;
      if (v46)
        *v46 += 2;
      v47 = v43 + 160 * v42;
      *(_QWORD *)(v47 + 104) = v46;
      v48 = *(_OWORD *)(v6 + 128);
      *(_OWORD *)(v47 + 112) = *(_OWORD *)(v6 + 112);
      *(_OWORD *)(v47 + 128) = v48;
      *(_BYTE *)(v47 + 144) = *(_BYTE *)(v6 + 144);
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v47 + 152), (_QWORD **)(v6 + 152));
      ++*(_DWORD *)(v27 + 20);
    }
    v49 = (uint64_t *)(v6 + 80);
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
        WTF::StringImpl::destroy(v99, a2);
      else
        *(_DWORD *)v99 -= 2;
    }
    v50 = v91;
LABEL_66:
    v9 += v50;
    v61 = HIDWORD(v101);
    if (HIDWORD(v101) == (_DWORD)v101)
    {
      v62 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v100, HIDWORD(v101) + 1, (unint64_t)v49);
      v61 = HIDWORD(v101);
      v63 = HIDWORD(v101) + 1;
      v64 = v100;
      v65 = *v62;
    }
    else
    {
      v63 = HIDWORD(v101) + 1;
      v64 = v100;
      v65 = *v49;
    }
    *((_QWORD *)v64 + v61) = v65;
    HIDWORD(v101) = v63;
LABEL_70:
    v6 += 736;
  }
  while (v6 != v10);
  v93 = v9;
  v2 = a1;
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_DWORD *)(a1 + 36);
  v68 = v6 + 736 * v8;
  v69 = 0;
  if (v8)
  {
    v70 = *(_QWORD *)(a1 + 24);
    v71 = (uint64_t *)(v6 + 736 * v8);
    v72 = (unint64_t)v71;
    v7 = v86;
    do
    {
      if (!*(_QWORD *)(v6 + 80))
      {
        v73 = v6;
        if (v72 != *(_QWORD *)(a1 + 24) + 736 * *(unsigned int *)(a1 + 36))
        {
          if ((uint64_t *)v6 == v71)
          {
            v73 = v72;
          }
          else
          {
            WTF::VectorMover<false,WebKit::CacheStorageRecord>::moveOverlapping(v71, (uint64_t *)v6, v72);
            v73 = v72 + v70 - (_QWORD)v71;
          }
        }
        v71 = (uint64_t *)(v6 + 736);
        WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v6, a2);
        ++v69;
        v72 = v73;
      }
      v6 += 736;
      v70 += 736;
    }
    while (v6 < v68);
    v6 = *(_QWORD *)(a1 + 24);
    v8 = *(_DWORD *)(a1 + 36);
    v68 = v72;
  }
  else
  {
    v71 = *(uint64_t **)(a1 + 24);
    v7 = v86;
  }
  v5 = (_QWORD *)v88;
  v74 = v89;
LABEL_89:
  v75 = (uint64_t *)(v6 + 736 * v8);
  if (v71 != v75)
  {
    WTF::VectorMover<false,WebKit::CacheStorageRecord>::moveOverlapping(v71, v75, v68);
    v8 = *(_DWORD *)(v2 + 36);
  }
  *(_DWORD *)(v2 + 36) = v8 - v69;
  v76 = v5[3];
  if (v76)
  {
    v77 = *(_QWORD *)(v76 + 8);
    if (v77)
    {
      if (v93 > v74 || v93 < v74)
      {
        if (*(_BYTE *)(v77 + 32))
        {
          v78 = (const WTF::String *)(*(_QWORD *)(v77 + 24) + v93 - v74);
          *(_QWORD *)(v77 + 24) = v78;
          *(_BYTE *)(v77 + 32) = 1;
          WebKit::writeSizeFile(*(WTF::StringImpl **)(v77 + 56), v78);
        }
      }
    }
  }
  v79 = v5[10];
  v80 = v100;
  v81 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  v82 = v101;
  v100 = 0;
  v101 = 0;
  v83 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v83 = &off_1E34C61D8;
  *((_QWORD *)v83 + 1) = v80;
  *((_QWORD *)v83 + 2) = v82;
  *((_QWORD *)v83 + 3) = v81;
  v97[0] = v83;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v79 + 40))(v79, v7, v97);
  v84 = v97[0];
  v97[0] = 0;
  if (v84)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v84 + 8))(v84);
  v85 = v100;
  if (v100)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    WTF::fastFree(v85, v67);
  }
LABEL_101:
  WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, (WTF::StringImpl *)v67);
}

void WTF::VectorMover<false,WebKit::CacheStorageRecord>::moveOverlapping(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      v7 = a3 + 736 * (((char *)a2 - (char *)a1) / 736) - 736;
      do
      {
        v4 -= 92;
        WebKit::CacheStorageRecord::CacheStorageRecord(v7, v4);
        WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v4, v8);
        v7 -= 736;
      }
      while (v4 != v5);
    }
  }
  else
  {
    while (v5 != v4)
    {
      WebKit::CacheStorageRecord::CacheStorageRecord(v3, v5);
      WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v5, v6);
      v3 += 736;
      v5 += 92;
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecordsInStore(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_3,void,BOOL>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)a1 = &off_1E34C61D8;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecordsInStore(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_3,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E34C61D8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageCache::putRecordsInStore(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::DOMCacheEngine::Error> &&)> &&)::$_3,void,BOOL>::call(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];
  int v6;
  char v7;

  if ((a2 & 1) != 0)
  {
    v5[0] = a1[1];
    v2 = a1[2];
    a1[1] = 0;
    a1[2] = 0;
    v5[1] = v2;
    v6 = 0;
  }
  else
  {
    LOBYTE(v5[0]) = 2;
    v6 = 1;
  }
  v3 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34C5E80[v6])(&v7, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfosInternal(WTF::CompletionHandler<void ()(WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;

  *a1 = &off_1E34C6228;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfosInternal(WTF::CompletionHandler<void ()(WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;

  *(_QWORD *)this = &off_1E34C6228;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfosInternal(WTF::CompletionHandler<void ()(WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(_QWORD *a1, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const WTF::String *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::FileSystemImpl::MappedFileData *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  _DWORD *v28;
  void *v29;
  void *v30;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  _QWORD *v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unsigned int v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  char v49;

  v3 = a1[1];
  v45 = 0;
  v46 = 0;
  v44[0] = 0;
  v44[1] = 0;
  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)(a1 + 3), a2);
  if (v43)
  {
    v4 = v42;
    v5 = v42 + 8 * v43;
    while (1)
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v40, v6);
      if (v39)
        break;
LABEL_20:
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v7);
      v17 = v40;
      v40 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v41;
      v41 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v16);
        else
          *(_DWORD *)v18 -= 2;
      }
      v4 += 8;
      if (v4 == v5)
      {
        v19 = v45;
        v20 = v46;
        goto LABEL_31;
      }
    }
    v8 = v38;
    v9 = 8 * v39;
    while (*v8 && (WTF::StringImpl::endsWith() & 1) != 0)
    {
LABEL_19:
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_20;
    }
    WTF::FileSystemImpl::pathByAppendingComponent();
    LOBYTE(v33) = 0;
    LOBYTE(v35) = 0;
    v49 = 0;
    v10 = (WTF::FileSystemImpl::MappedFileData *)MEMORY[0x19AEAB4D0](&v47, &v37, 1, &v49);
    if (v49)
    {
      v11 = v47;
      v47 = 0;
      v33 = v11;
      LODWORD(v11) = v48;
      v48 = 0;
      LOBYTE(v35) = 1;
      LODWORD(v34) = (_DWORD)v11;
    }
    WTF::FileSystemImpl::MappedFileData::~MappedFileData(v10);
    if ((_BYTE)v35)
    {
      if (HIDWORD(v46) == (_DWORD)v46)
      {
        WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::FileSystemImpl::MappedFileData>((unsigned int *)&v45, (unint64_t)&v33);
        if (!(_BYTE)v35)
          goto LABEL_15;
      }
      else
      {
        v12 = HIDWORD(v46) + 1;
        v13 = v45 + 16 * HIDWORD(v46);
        v14 = v33;
        v33 = 0;
        *(_QWORD *)v13 = v14;
        LODWORD(v14) = v34;
        LODWORD(v34) = 0;
        *(_DWORD *)(v13 + 8) = (_DWORD)v14;
        HIDWORD(v46) = v12;
      }
      WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v33);
    }
LABEL_15:
    v15 = v37;
    v37 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v15 -= 2;
    }
    goto LABEL_19;
  }
  v19 = 0;
  v20 = 0;
LABEL_31:
  v32 = v20;
  v21 = *(_QWORD *)(v3 + 40);
  v22 = a1[2];
  a1[2] = 0;
  v45 = 0;
  v46 = 0;
  v23 = a1[5];
  a1[5] = 0;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v24 = off_1E34C6250;
  v24[1] = v22;
  v33 = 0;
  v34 = 0;
  v24[2] = v19;
  v35 = 0;
  v24[3] = v32;
  v24[4] = v23;
  v47 = v24;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v21 + 32))(v21, &v47);
  v26 = v47;
  v47 = 0;
  if (v26)
    (*(void (**)(_QWORD *))(*v26 + 8))(v26);
  v36 = 0;
  WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v25);
  v28 = v33;
  v33 = 0;
  if (v28)
  {
    if (v28[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
    else
      --v28[2];
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v27);
  WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v29);
  return WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v30);
}

unint64_t WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::FileSystemImpl::MappedFileData>(unsigned int *a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 16 * a1[3];
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v4 = v5;
  LODWORD(v5) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::FileSystemImpl::MappedFileData *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::FileSystemImpl::MappedFileData *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::FileSystemImpl::MappedFileData *WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::FileSystemImpl::MappedFileData *result, unint64_t a2)
{
  int v2;
  WTF::FileSystemImpl::MappedFileData *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  WTF::FileSystemImpl::MappedFileData *v7;
  WTF *v8;
  uint64_t v9;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *((unsigned int *)result + 3);
      result = (WTF::FileSystemImpl::MappedFileData *)WTF::fastMalloc((WTF *)(16 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        result = v4;
        do
        {
          v8 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)v7 = v8;
          LODWORD(v8) = *((_DWORD *)result + 2);
          *((_DWORD *)result + 2) = 0;
          *((_DWORD *)v7 + 2) = (_DWORD)v8;
          WTF::FileSystemImpl::MappedFileData::~MappedFileData(result);
          result = (WTF::FileSystemImpl::MappedFileData *)(v9 + 16);
          v7 = (WTF::FileSystemImpl::MappedFileData *)((char *)v7 + 16);
        }
        while (result != (WTF *)((char *)v4 + 16 * v5));
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (WTF::FileSystemImpl::MappedFileData *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfosInternal(WTF::CompletionHandler<void ()(WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *a1 = off_1E34C6250;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfosInternal(WTF::CompletionHandler<void ()(WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  _DWORD *v5;

  *(_QWORD *)a1 = off_1E34C6250;
  v3 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  v5 = (_DWORD *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfosInternal(WTF::CompletionHandler<void ()(WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF::FileSystemImpl::MappedFileData *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::FileSystemImpl::MappedFileData **)a1;
    v5 = 16 * v3;
    do
    {
      WTF::FileSystemImpl::MappedFileData::~MappedFileData(v4);
      v4 = (WTF::FileSystemImpl::MappedFileData *)(v6 + 16);
      v5 -= 16;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfos(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34C6278;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfos(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34C6278;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readAllRecordInfos(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject **v7;
  WTF::StringImpl *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  NSObject **v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  WTF *v31;
  WTF *v32;
  int v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  void *v38;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  WTF *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  char v59;
  uint8_t buf[16];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;

  v2 = a1;
  v73 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  v5 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  v43 = v4;
  v44 = v5;
  v41 = *(_QWORD *)(a1 + 8);
  v42 = v3;
  v45 = 0;
  v46 = 0;
  if (!(_DWORD)v5)
    goto LABEL_23;
  if (v5 >= 0x199999A)
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  LODWORD(v46) = 160 * (int)v5 / 0xA0u;
  v45 = (WTF *)WTF::fastMalloc((WTF *)(160 * v5));
  v6 = v3 + 16 * v5;
  v7 = (NSObject **)&unk_1ECE70000;
  do
  {
    WebKit::readRecordInfoFromFileData((uint64_t)buf, (uint64_t *)(v41 + 32), *(_QWORD *)v3, *(unsigned int *)(v3 + 8));
    if (v72)
    {
      v9 = *(_OWORD *)buf;
      v10 = v61;
      *(_OWORD *)buf = 0u;
      v61 = 0u;
      v47 = v9;
      v48 = v10;
      v49 = v62;
      v50 = v63;
      v51 = v64;
      v52 = v65;
      v53 = v66;
      v11 = v67;
      v67 = 0;
      v54 = v11;
      v55 = v68;
      v56 = v69;
      LODWORD(v68) = v68 & 0xFFFFFFFE;
      v57 = v70;
      v12 = v71;
      v71 = 0;
      v58 = v12;
      v59 = 1;
      WebKit::StoredRecordInformation::~StoredRecordInformation((WebKit::StoredRecordInformation *)buf, v8);
      if (v59)
      {
        v14 = v47;
        v15 = v48;
        v47 = 0u;
        v48 = 0u;
        *(_OWORD *)buf = v14;
        v61 = v15;
        v62 = v49;
        v63 = v50;
        v64 = v51;
        v65 = v52;
        v66 = v53;
        v16 = v54;
        v54 = 0;
        v67 = v16;
        v68 = v55;
        v69 = v56;
        LODWORD(v55) = v55 & 0xFFFFFFFE;
        v70 = v57;
        v17 = v58;
        v58 = 0;
        v71 = v17;
        v18 = HIDWORD(v46);
        if (HIDWORD(v46) == (_DWORD)v46)
        {
          WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CacheStorageRecordInformation>((uint64_t)&v45, (unint64_t)buf);
        }
        else
        {
          v21 = v7;
          v22 = (char *)v45 + 160 * HIDWORD(v46);
          *(_QWORD *)buf = 0;
          *(_QWORD *)v22 = v14;
          v23 = *(_QWORD *)&buf[8];
          *(_QWORD *)&buf[8] = 0;
          *((_QWORD *)v22 + 1) = v23;
          v24 = v61;
          *(_QWORD *)&v61 = 0;
          *((_QWORD *)v22 + 2) = v24;
          v25 = *((_QWORD *)&v61 + 1);
          *((_QWORD *)&v61 + 1) = 0;
          *((_QWORD *)v22 + 3) = v25;
          v26 = v62;
          v27 = v63;
          *((_QWORD *)v22 + 8) = v64;
          *((_OWORD *)v22 + 2) = v26;
          *((_OWORD *)v22 + 3) = v27;
          v28 = v65;
          *(_OWORD *)(v22 + 88) = v66;
          *(_OWORD *)(v22 + 72) = v28;
          WTF::URL::URL((uint64_t)(v22 + 104), &v67);
          v22[144] = v70;
          *((_QWORD *)v22 + 19) = 0;
          v29 = v71;
          v71 = 0;
          *((_QWORD *)v22 + 19) = v29;
          v7 = v21;
          HIDWORD(v46) = v18 + 1;
        }
        WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)buf, v19);
        if (v59)
          WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)&v47, v13);
      }
    }
    else
    {
      v20 = v7[497];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v41;
        _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%p - CacheStorageDiskStore::readAllRecordInfos fails to decode record from file", buf, 0xCu);
      }
    }
    v3 += 16;
  }
  while (v3 != v6);
  v30 = HIDWORD(v46);
  v2 = a1;
  if (HIDWORD(v46) < v46)
  {
    v31 = v45;
    v32 = v45;
    if (!HIDWORD(v46))
    {
LABEL_19:
      if (v31)
      {
        if (v32 == v31)
        {
          v45 = 0;
          LODWORD(v46) = 0;
        }
        WTF::fastFree(v31, v13);
      }
      goto LABEL_23;
    }
    if (HIDWORD(v46) < 0x199999A)
    {
      v33 = 160 * HIDWORD(v46);
      v34 = (WTF *)WTF::fastMalloc((WTF *)(160 * HIDWORD(v46)));
      LODWORD(v46) = (v33 & 0xFFFFFFE0) / 0xA0;
      v45 = v34;
      v32 = v31;
      if (v34 != v31)
      {
        v35 = v34;
        WTF::VectorMover<false,WebKit::CacheStorageRecordInformation>::move((uint64_t *)v31, (uint64_t *)v31 + 20 * v30, (uint64_t)v34);
        v32 = v35;
      }
      goto LABEL_19;
    }
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x1971B3AF0);
  }
LABEL_23:
  v36 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v36 + 16))(v36, &v45);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v37);
  return WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v38);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecordsInternal(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *a1 = off_1E34C62A0;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecordsInternal(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  _DWORD *v5;

  *(_QWORD *)a1 = off_1E34C62A0;
  v3 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v5 = (_DWORD *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecordsInternal(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const WTF::String **v4;
  uint64_t v5;
  WTF::FileSystemImpl::MappedFileData *v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  WTF::FileSystemImpl::MappedFileData *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  int v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  _DWORD *v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  WTF::StringImpl *v43;
  _DWORD *v44;
  int v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  char v54;

  v2 = *(_QWORD *)(a1 + 8);
  v50 = 0;
  v51 = 0;
  v48 = 0;
  v49 = 0;
  v3 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(const WTF::String ***)(a1 + 24);
    v5 = 8 * v3;
    while (1)
    {
      LOBYTE(v38) = 0;
      LOBYTE(v40) = 0;
      LOBYTE(v46) = 0;
      v6 = (WTF::FileSystemImpl::MappedFileData *)MEMORY[0x19AEAB4D0](&v52, v4, 1, &v46);
      if ((_BYTE)v46)
      {
        v7 = v52;
        v52 = 0;
        v38 = v7;
        LODWORD(v7) = v53;
        v53 = 0;
        LOBYTE(v40) = 1;
        LODWORD(v39) = (_DWORD)v7;
      }
      WTF::FileSystemImpl::MappedFileData::~MappedFileData(v6);
      if ((_BYTE)v40)
      {
        v8 = v38;
        v38 = 0;
        v9 = v39;
        LODWORD(v39) = 0;
        v46 = v8;
        v47 = v9;
        WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v38);
        if (v47)
        {
          WebKit::CacheStorageDiskStore::recordBlobFilePath((WebKit::CacheStorageDiskStore *)&v43, *v4);
          LOBYTE(v38) = 0;
          LOBYTE(v40) = 0;
          v54 = 0;
          v10 = (WTF::FileSystemImpl::MappedFileData *)MEMORY[0x19AEAB4D0](&v52, &v43, 1, &v54);
          if (v54)
          {
            v11 = v52;
            v52 = 0;
            v38 = v11;
            LODWORD(v11) = v53;
            v53 = 0;
            LOBYTE(v40) = 1;
            LODWORD(v39) = (_DWORD)v11;
          }
          WTF::FileSystemImpl::MappedFileData::~MappedFileData(v10);
          if ((_BYTE)v40)
          {
            v13 = v38;
            v38 = 0;
            v14 = v39;
            LODWORD(v39) = 0;
            v44 = v13;
            v45 = v14;
            WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v38);
          }
          else
          {
            v44 = 0;
            v45 = 0;
          }
          v15 = v43;
          v43 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v12);
            else
              *(_DWORD *)v15 -= 2;
          }
          goto LABEL_18;
        }
      }
      else
      {
        v46 = 0;
        v47 = 0;
      }
      v44 = 0;
      v45 = 0;
LABEL_18:
      if (HIDWORD(v51) == (_DWORD)v51)
      {
        WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::FileSystemImpl::MappedFileData>((unsigned int *)&v50, (unint64_t)&v46);
      }
      else
      {
        v16 = HIDWORD(v51) + 1;
        v17 = v50 + 16 * HIDWORD(v51);
        v18 = v46;
        v46 = 0;
        *(_QWORD *)v17 = v18;
        LODWORD(v18) = v47;
        v47 = 0;
        *(_DWORD *)(v17 + 8) = (_DWORD)v18;
        HIDWORD(v51) = v16;
      }
      if (HIDWORD(v49) == (_DWORD)v49)
      {
        WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::FileSystemImpl::MappedFileData>((unsigned int *)&v48, (unint64_t)&v44);
      }
      else
      {
        v19 = HIDWORD(v49) + 1;
        v20 = v48 + 16 * HIDWORD(v49);
        v21 = v44;
        v44 = 0;
        *(_QWORD *)v20 = v21;
        LODWORD(v21) = v45;
        v45 = 0;
        *(_DWORD *)(v20 + 8) = (_DWORD)v21;
        HIDWORD(v49) = v19;
      }
      WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v44);
      WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v46);
      ++v4;
      v5 -= 8;
      if (!v5)
      {
        v22 = v50;
        v37 = v51;
        v23 = v48;
        v24 = v49;
        goto LABEL_27;
      }
    }
  }
  v23 = 0;
  v22 = 0;
  v24 = 0;
  v37 = 0;
LABEL_27:
  v36 = v24;
  v25 = *(_QWORD *)(v2 + 40);
  v26 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v50 = 0;
  v51 = 0;
  v48 = 0;
  v49 = 0;
  v27 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v42 = v27;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v28 = off_1E34C62C8;
  v28[1] = v26;
  v38 = 0;
  v39 = 0;
  v28[2] = v22;
  v40 = 0;
  v28[3] = v37;
  v41[0] = 0;
  v28[4] = v23;
  v41[1] = 0;
  v28[5] = v36;
  v28[6] = v27;
  v52 = v28;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v25 + 32))(v25, &v52);
  v30 = v52;
  v52 = 0;
  if (v30)
    (*(void (**)(_QWORD *))(*v30 + 8))(v30);
  v42 = 0;
  WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v29);
  WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v31);
  v33 = v38;
  v38 = 0;
  if (v33)
  {
    if (v33[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
    else
      --v33[2];
  }
  WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v32);
  return WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v34);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecordsInternal(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  _DWORD *v5;

  *a1 = off_1E34C62C8;
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), v4);
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecordsInternal(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  _DWORD *v6;

  *(_QWORD *)a1 = off_1E34C62C8;
  v3 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, v4);
  v6 = (_DWORD *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  return WTF::fastFree(a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecordsInternal(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16, a1 + 32);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _DWORD *v15;
  __int128 v16;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x199999A)
  {
    v5 = 160 * v3;
    v6 = WTF::fastMalloc((WTF *)(160 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0xA0;
    *(_QWORD *)v2 = v6;
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7)
    {
      v8 = v6;
      v9 = 0;
      v10 = *a2;
      v11 = 160 * v7;
      do
      {
        v12 = v10 + v9;
        v13 = WebKit::NetworkCache::Key::Key(v8 + v9, v10 + v9);
        v14 = *(_OWORD *)(v10 + v9 + 72);
        *(_OWORD *)(v13 + 88) = *(_OWORD *)(v10 + v9 + 88);
        *(_OWORD *)(v13 + 72) = v14;
        v15 = *(_DWORD **)(v10 + v9 + 104);
        if (v15)
          *v15 += 2;
        *(_QWORD *)(v13 + 104) = v15;
        v16 = *(_OWORD *)(v12 + 128);
        *(_OWORD *)(v13 + 112) = *(_OWORD *)(v12 + 112);
        *(_OWORD *)(v13 + 128) = v16;
        *(_BYTE *)(v13 + 144) = *(_BYTE *)(v12 + 144);
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v13 + 152), (_QWORD **)(v12 + 152));
        v9 += 160;
      }
      while (v11 != v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void,WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::FileSystemImpl::MappedFileData>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *a1 = off_1E34C62F0;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void,WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::FileSystemImpl::MappedFileData>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  _DWORD *v5;

  *(_QWORD *)a1 = off_1E34C62F0;
  v3 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v5 = (_DWORD *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::readRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void,WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::FileSystemImpl::MappedFileData>::call(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  uint64_t *v18;
  void *v19;
  unsigned int *v20;
  uint64_t v21;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  WTF *v29;
  uint64_t v30;
  __int128 v31;
  WTF::StringImpl *v32;
  const WTF::StringImpl *v33;
  const WTF::StringImpl *v34;
  char v35;
  WTF::StringImpl *v36;
  NSObject *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  int v42;
  WTF::StringImpl *v43;
  int v44;
  unint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  char v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  void *v56;
  void *v57;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  __int128 v70;
  __int128 v71;
  unsigned int *v72;
  int v73;
  char v74;
  unsigned int *v75;
  uint64_t v76;
  unsigned int v77;
  double v78;
  __int128 v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  unsigned __int8 v82;
  WTF::StringImpl *v83[60];
  uint8_t buf[4];
  uint64_t v85;
  _BYTE v86[32];
  WTF *v87;
  __int128 v88;
  __int128 v89;
  char v90;
  uint64_t v91[15];
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  int v95;
  WTF::StringImpl *v96;
  char v97;
  uint64_t v98;
  char v99;
  _BYTE v100[200];
  _DWORD v101[2];
  WTF::StringImpl *v102;
  __int128 v103;
  __int128 v104;
  _DWORD *v105;
  char v106;
  _BYTE v107[280];
  uint64_t v108;
  char v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  *a2 = 0;
  v63 = v4;
  v5 = *((_DWORD *)a2 + 2);
  v6 = *((unsigned int *)a2 + 3);
  a2[1] = 0;
  v64 = v5;
  v65 = v6;
  v7 = *a3;
  *a3 = 0;
  v59 = v7;
  v60 = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  v8 = *((unsigned int *)a3 + 3);
  a3[1] = 0;
  v61 = v7;
  v62 = v8;
  v9 = *(_QWORD *)(a1 + 8);
  v66 = 0;
  v67 = 0;
  if (*(_DWORD *)(a1 + 36))
  {
    v10 = 0;
    v11 = (uint64_t *)(v9 + 32);
    while (1)
    {
      if (v10 == v6)
        goto LABEL_106;
      if (v10 == v8)
      {
        __break(0xC471u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(0xC471u);
        JUMPOUT(0x1971B49F8);
      }
      v12 = v4 + 16 * v10;
      v13 = *(_QWORD *)v12;
      v14 = *(unsigned int *)(v12 + 8);
      WebKit::readRecordInfoFromFileData((uint64_t)buf, (uint64_t *)(v9 + 32), *(_QWORD *)v12, v14);
      if (!v109)
      {
        LOBYTE(v75) = 0;
        v82 = 0;
        goto LABEL_51;
      }
      LOBYTE(v72) = 0;
      v74 = 0;
      if (!v97)
        break;
      v16 = v96;
      v17 = v92 + v98;
      if ((WTF::StringImpl *)((char *)v96 + v92 + v98) != (WTF::StringImpl *)v14)
        goto LABEL_33;
      if (v14 < v17)
        goto LABEL_105;
      if (v96 == (WTF::StringImpl *)-1)
      {
        v16 = (WTF::StringImpl *)(v14 - v17);
      }
      else if (v14 - v17 < (unint64_t)v96)
      {
        goto LABEL_105;
      }
      v83[0] = (WTF::StringImpl *)(v13 + v17);
      v83[1] = v16;
      WebKit::computeSHA1((uint64_t)&v75, v13 + v17, (uint64_t)v16, *v11);
      v24 = v93 == v75 && v94 == v76;
      if (!v24 || v95 != (unint64_t)v77)
      {
LABEL_33:
        LOBYTE(v75) = 0;
        v82 = 0;
        goto LABEL_34;
      }
      WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(&v75);
      if (v74)
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>::__assign_alt[abi:sn180100]<2ul,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>((unsigned int *)&v72, &v72, &v75);
        v38 = v75;
        v75 = 0;
        if (v38)
          goto LABEL_93;
      }
      else
      {
        v72 = v75;
        v73 = 2;
        v74 = 1;
      }
LABEL_94:
      if (!v74)
      {
        LOBYTE(v75) = 0;
        v82 = 0;
        goto LABEL_37;
      }
      if (!v109)
        goto LABEL_105;
      v50 = v99;
      LODWORD(v68) = v101[0];
      *(_DWORD *)((char *)&v68 + 3) = *(_DWORD *)((char *)v101 + 3);
      v51 = v102;
      if (v102)
      {
        *(_DWORD *)v102 += 2;
        v69 = v51;
        v70 = v103;
        v71 = v104;
        WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v83, (uint64_t)buf, v50, (const WebCore::ResourceRequest *)v100, (int *)&v68, &v105, v106, (uint64_t)v107, v108, (uint64_t)&v72);
        WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)&v75, (uint64_t *)v83);
        v82 = 1;
        WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v83, v52);
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v15);
        else
          *(_DWORD *)v51 -= 2;
      }
      else
      {
        v69 = 0;
        v70 = v103;
        v71 = v104;
        WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v83, (uint64_t)buf, v99, (const WebCore::ResourceRequest *)v100, (int *)&v68, &v105, v106, (uint64_t)v107, v108, (uint64_t)&v72);
        WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)&v75, (uint64_t *)v83);
        v82 = 1;
        WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)v83, v53);
      }
LABEL_34:
      if (v74 && v73 != -1)
        ((void (*)(WTF::StringImpl **, unsigned int **))off_1E34C5E58[v73])(v83, &v72);
LABEL_37:
      if (v109)
        WebKit::StoredRecordInformation::~StoredRecordInformation((WebKit::StoredRecordInformation *)buf, v15);
      if (v82)
      {
        if (v10 >= *(unsigned int *)(a1 + 36))
          goto LABEL_106;
        v26 = *(_QWORD *)(a1 + 24);
        v27 = v26 + 160 * v10;
        WebKit::NetworkCache::Key::Key((uint64_t)buf, v27);
        v28 = *(_OWORD *)(v27 + 88);
        *(_OWORD *)v86 = *(_OWORD *)(v27 + 72);
        *(_OWORD *)&v86[16] = v28;
        v29 = *(WTF **)(v27 + 104);
        if (v29)
          *(_DWORD *)v29 += 2;
        v87 = v29;
        v30 = v26 + 160 * v10;
        v31 = *(_OWORD *)(v30 + 128);
        v88 = *(_OWORD *)(v30 + 112);
        v89 = v31;
        v90 = *(_BYTE *)(v30 + 144);
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(v91, (_QWORD **)(v30 + 152));
        if (!v82)
          goto LABEL_105;
        if (*(double *)v86 != v78 || *(_QWORD *)&v86[24] != v80)
          goto LABEL_75;
        if ((WTF::equal(v87, v81, v33) & 1) != 0)
        {
          WebKit::CacheStorageDiskStore::recordFilePath((WebKit::CacheStorageDiskStore *)v83, *(const WebKit::NetworkCache::Key **)(v9 + 24), (uint64_t)buf);
          if (!v82)
            goto LABEL_105;
          WebKit::CacheStorageDiskStore::recordFilePath((WebKit::CacheStorageDiskStore *)&v68, *(const WebKit::NetworkCache::Key **)(v9 + 24), (uint64_t)&v75);
          v35 = WTF::equal(v83[0], v68, v34);
          v36 = v68;
          v68 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v32);
            else
              *(_DWORD *)v36 -= 2;
          }
          v43 = v83[0];
          v83[0] = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v32);
            else
              *(_DWORD *)v43 -= 2;
          }
          v42 = v82;
          if ((v35 & 1) != 0)
          {
            if (!v82)
              goto LABEL_105;
            v79 = *(_OWORD *)&v86[8];
            goto LABEL_76;
          }
        }
        else
        {
          v42 = v82;
        }
        if (v42)
        {
LABEL_75:
          WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)&v75, v32);
          v82 = 0;
        }
LABEL_76:
        WebKit::CacheStorageRecordInformation::~CacheStorageRecordInformation((WebKit::CacheStorageRecordInformation *)buf, v32);
        goto LABEL_77;
      }
LABEL_51:
      v37 = qword_1ECE70F88;
      if (os_log_type_enabled((os_log_t)qword_1ECE70F88, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v85 = v9;
        _os_log_impl(&dword_196BCC000, v37, OS_LOG_TYPE_DEFAULT, "%p - CacheStorageDiskStore::readRecords fails to decode record from file", buf, 0xCu);
      }
LABEL_77:
      v44 = HIDWORD(v67);
      if (HIDWORD(v67) == (_DWORD)v67)
      {
        v45 = WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v66, HIDWORD(v67) + 1, (unint64_t)&v75);
        v44 = HIDWORD(v67);
        v46 = (_BYTE *)(v66 + 752 * HIDWORD(v67));
        *v46 = 0;
        v46[736] = 0;
        if (*(_BYTE *)(v45 + 736))
        {
          v47 = v46 + 736;
          WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v46, (uint64_t *)v45);
          goto LABEL_82;
        }
        goto LABEL_83;
      }
      v48 = (_BYTE *)(v66 + 752 * HIDWORD(v67));
      *v48 = 0;
      v48[736] = 0;
      if (v82)
      {
        v47 = v48 + 736;
        WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v48, (uint64_t *)&v75);
LABEL_82:
        *v47 = 1;
LABEL_83:
        HIDWORD(v67) = v44 + 1;
        if (v82)
          WebKit::CacheStorageRecord::~CacheStorageRecord((WebKit::CacheStorageRecord *)&v75, (WTF::StringImpl *)v45);
        goto LABEL_86;
      }
      HIDWORD(v67) = v44 + 1;
LABEL_86:
      if (++v10 >= *(unsigned int *)(a1 + 36))
        goto LABEL_102;
    }
    if (!*(_QWORD *)(v59 + 16 * v10))
      goto LABEL_33;
    WebCore::FragmentedSharedBuffer::create();
    v18 = (uint64_t *)WTF::fastMalloc((WTF *)0x38);
    MEMORY[0x19AEAD8A0](v18, &v75);
    v20 = v75;
    v75 = 0;
    if (v20)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v20, v19);
    if (!v109)
      goto LABEL_105;
    v21 = WebCore::SharedBuffer::data((WebCore::SharedBuffer *)v18);
    WebKit::computeSHA1((uint64_t)&v75, v21, v18[6], *v11);
    if (v93 != v75 || v94 != v76 || v95 != (unint64_t)v77)
    {
      LOBYTE(v75) = 0;
      v82 = 0;
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v18, v15);
      goto LABEL_34;
    }
    if (v74)
    {
      if (v73 != -1)
      {
        if (v73 == 2)
        {
          do
            v39 = __ldaxr((unsigned int *)v18);
          while (__stlxr(v39 + 1, (unsigned int *)v18));
          v40 = v72;
          v72 = (unsigned int *)v18;
          if (v40)
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v40, v15);
          goto LABEL_92;
        }
        ((void (*)(unsigned int **, unsigned int **))off_1E34C5E58[v73])(&v75, &v72);
      }
      v73 = -1;
      do
        v49 = __ldaxr((unsigned int *)v18);
      while (__stlxr(v49 + 1, (unsigned int *)v18));
      v72 = (unsigned int *)v18;
      v73 = 2;
    }
    else
    {
      do
        v41 = __ldaxr((unsigned int *)v18);
      while (__stlxr(v41 + 1, (unsigned int *)v18));
      v72 = (unsigned int *)v18;
      v73 = 2;
      v74 = 1;
    }
LABEL_92:
    v38 = (unsigned int *)v18;
LABEL_93:
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v38, v15);
    goto LABEL_94;
  }
LABEL_102:
  v54 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v54 + 16))(v54, &v66);
  (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v55);
  WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v56);
  return WTF::Vector<WTF::FileSystemImpl::MappedFileData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v63, v57);
}

unint64_t WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 752 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _BYTE *v8;
  uint64_t v9;
  WTF *v10;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x572621)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(WTF **)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 752 * a2;
      v6 = WTF::fastMalloc((WTF *)(752 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x2F0;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v8 = (_BYTE *)v6;
        v9 = 752 * v4;
        v10 = v3;
        do
        {
          *v8 = 0;
          v8[736] = 0;
          if (*((_BYTE *)v10 + 736))
          {
            WebKit::CacheStorageRecord::CacheStorageRecord((uint64_t)v8, (uint64_t *)v10);
            v8[736] = 1;
            if (*((_BYTE *)v10 + 736))
              WebKit::CacheStorageRecord::~CacheStorageRecord(v10, v7);
          }
          v8 += 752;
          v10 = (WTF *)((char *)v10 + 752);
          v9 -= 752;
        }
        while (v9);
      }
      if (v3)
      {
        if (*(WTF **)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7);
      }
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::deleteRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *a1 = off_1E34C6318;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::deleteRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  _DWORD *v5;

  *(_QWORD *)a1 = off_1E34C6318;
  v3 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v5 = (_DWORD *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::deleteRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *result;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)(a1 + 24);
    v5 = 8 * v3;
    v6 = 1;
    do
    {
      v7 = *v4;
      if (*v4)
        *(_DWORD *)v7 += 2;
      v21 = v7;
      WebKit::CacheStorageDiskStore::recordBlobFilePath((WebKit::CacheStorageDiskStore *)&v20, v7);
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v20, v8);
      v10 = v20;
      v20 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v21, v9);
      v13 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v21, v11);
      v14 = v21;
      v21 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v6 &= v13 ^ 1;
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v6 = 1;
  }
  v15 = *(_QWORD *)(v2 + 40);
  v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v18 = &off_1E34C6340;
  *(_QWORD *)(v18 + 8) = v16;
  *(_BYTE *)(v18 + 16) = v6;
  *(_QWORD *)(v18 + 24) = v17;
  v21 = (WTF::StringImpl *)v18;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 32))(v15, &v21);
  result = v21;
  v21 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::deleteRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34C6340;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::deleteRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34C6340;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::deleteRecords(WTF::Vector<WebKit::CacheStorageRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

unint64_t WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v4 = v5;
  LODWORD(v5) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF::ASCIILiteral *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(WTF::ASCIILiteral **)result;
    v5 = (uint64_t *)(*(_QWORD *)result + 16 * *(unsigned int *)(result + 12));
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    WTF::VectorMover<false,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::ASCIILiteral **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::writeRecords(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  _DWORD *v6;

  *a1 = off_1E34C6368;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 7), a2);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 5), v4);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), v5);
  v6 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::writeRecords(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  _DWORD *v7;

  *(_QWORD *)a1 = off_1E34C6368;
  v3 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 56, a2);
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 40, v4);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, v5);
  v7 = (_DWORD *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  return WTF::fastFree(a1, v6);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::writeRecords(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  const WTF::String *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *result;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 36))
  {
    v4 = 0;
    v5 = 0;
    v6 = 1;
    while (1)
    {
      v7 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 24) + 8 * v5);
      if (v7)
        *(_DWORD *)v7 += 2;
      v27 = v7;
      if (v5 >= *(unsigned int *)(a1 + 52))
        goto LABEL_40;
      v8 = *(_QWORD *)(a1 + 40);
      v9 = v8 + v4;
      if (*(_DWORD *)(v8 + v4 + 12))
      {
        v10 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v8 + v4 + 12));
        memcpy(v10, *(const void **)v9, *(unsigned int *)(v9 + 12));
      }
      else
      {
        v10 = 0;
      }
      if (v5 >= *(unsigned int *)(a1 + 68))
      {
LABEL_40:
        __break(0xC471u);
        JUMPOUT(0x1971B5418);
      }
      v11 = *(_QWORD *)(a1 + 56);
      v12 = v11 + v4;
      v13 = *(_DWORD *)(v11 + v4 + 12);
      if (v13)
      {
        v14 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v11 + v4 + 12));
        memcpy(v14, *(const void **)v12, *(unsigned int *)(v12 + 12));
      }
      else
      {
        v14 = 0;
      }
      WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)&v27, a2);
      WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v26, v15);
      v17 = v26;
      v26 = 0;
      if (!v17)
        goto LABEL_14;
      if (*(_DWORD *)v17 != 2)
        break;
      WTF::StringImpl::destroy(v17, v16);
      if (!v13)
        goto LABEL_22;
LABEL_17:
      WebKit::CacheStorageDiskStore::recordBlobFilePath((WebKit::CacheStorageDiskStore *)&v26, v27);
      v18 = WTF::FileSystemImpl::overwriteEntireFile();
      v19 = v26;
      v26 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, a2);
        else
          *(_DWORD *)v19 -= 2;
      }
      if (v18 == -1)
      {
        v6 = 0;
        if (!v14)
          goto LABEL_24;
LABEL_23:
        WTF::fastFree((WTF *)v14, a2);
        goto LABEL_24;
      }
LABEL_22:
      v6 &= WTF::FileSystemImpl::overwriteEntireFile() != -1;
      if (v14)
        goto LABEL_23;
LABEL_24:
      if (v10)
        WTF::fastFree((WTF *)v10, a2);
      v20 = v27;
      v27 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      ++v5;
      v4 += 16;
      if (v5 >= *(unsigned int *)(a1 + 36))
        goto LABEL_37;
    }
    *(_DWORD *)v17 -= 2;
LABEL_14:
    if (!v13)
      goto LABEL_22;
    goto LABEL_17;
  }
  v6 = 1;
LABEL_37:
  v21 = *(_QWORD *)(v3 + 40);
  v22 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v23 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  v24 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v24 = &off_1E34C6390;
  *(_QWORD *)(v24 + 8) = v22;
  *(_BYTE *)(v24 + 16) = v6;
  *(_QWORD *)(v24 + 24) = v23;
  v27 = (WTF::StringImpl *)v24;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v21 + 32))(v21, &v27);
  result = v27;
  v27 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::writeRecords(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34C6390;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::writeRecords(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34C6390;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageDiskStore::writeRecords(WTF::Vector<WebKit::CacheStorageRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::lookupForReinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = WTF::computeHash<WebCore::ClientOrigin>(a2);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    v7 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
    v4 = ++v5 + v6;
  }
  while (!v7);
  return v2 + (v6 << 6);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::begin(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *(unsigned int *)(result - 4);
  v2 = result + 24 * v1;
  if (!*(_DWORD *)(result - 12))
    return result + 24 * v1;
  if ((_DWORD)v1)
  {
    v3 = 24 * v1;
    while (*(_OWORD *)result == 0 || *(_QWORD *)(result + 8) == -1)
    {
      result += 24;
      v3 -= 24;
      if (!v3)
        return v2;
    }
  }
  return result;
}

WebKit::CacheStorageCache *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,std::unique_ptr<WebKit::CacheStorageCache>>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  WTF::StringImpl *v16;
  WebKit::CacheStorageCache *result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  __int16 v28;
  char v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v27 = -1640531527;
  v28 = 0;
  v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v27, a2);
  v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27) & v9;
  v11 = v8 + 24 * v10;
  v13 = *(_QWORD *)v11;
  v12 = *(_QWORD *)(v11 + 8);
  if (*(_OWORD *)v11 != 0)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      if (v13 == *a2 && v12 == a2[1])
      {
        v24 = *a1;
        if (*a1)
          v25 = *(_DWORD *)(v24 - 4);
        else
          v25 = 0;
        *(_QWORD *)a4 = v11;
        *(_QWORD *)(a4 + 8) = v24 + 24 * v25;
        *(_BYTE *)(a4 + 16) = 0;
        v26 = *a3;
        *a3 = 0;
        return std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)(v11 + 16), v26);
      }
      if (v12 == -1)
        v14 = (_QWORD *)v11;
      v10 = (v10 + v15) & v9;
      v11 = v8 + 24 * v10;
      v13 = *(_QWORD *)v11;
      v12 = *(_QWORD *)(v11 + 8);
      ++v15;
    }
    while (*(_OWORD *)v11 != 0);
    if (v14)
    {
      *v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = (uint64_t)v14;
    }
  }
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v16 = *a3;
  *a3 = 0;
  result = std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)(v11 + 16), v16);
  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
    {
LABEL_21:
      result = (WebKit::CacheStorageCache *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, v11);
      v11 = (uint64_t)result;
      v20 = *a1;
      if (*a1)
        LODWORD(v23) = *(_DWORD *)(v20 - 4);
      else
        LODWORD(v23) = 0;
    }
  }
  else if (3 * v23 <= 4 * v22)
  {
    goto LABEL_21;
  }
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v20 + 24 * v23;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *result;
  unsigned int v25;
  __int16 v26;
  char v27;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = v5 + 24 * v10;
      if (*(_QWORD *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)(v5 + 24 * v10 + 16), 0);
        }
        else
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v25 = -1640531527;
          v26 = 0;
          v27 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v25, (_QWORD *)(v5 + 24 * v10));
          v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v25);
          v17 = 0;
          do
          {
            v18 = v16 & v15;
            v19 = (_OWORD *)(v14 + 24 * (v16 & v15));
            v16 = ++v17 + (v16 & v15);
          }
          while (*v19 != 0);
          v20 = v14 + 24 * v18;
          std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)(v20 + 16), 0);
          *v19 = *(_OWORD *)v13;
          v21 = v5 + 24 * v10;
          v22 = *(_QWORD *)(v21 + 16);
          v21 += 16;
          *(_QWORD *)v21 = 0;
          *(_QWORD *)(v20 + 16) = v22;
          std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)v21, 0);
          if (v13 == a3)
            v11 = v19;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::allCaches(unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34C63B8;
  WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::allCaches(unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34C63B8;
  WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  v4 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::allCaches(unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)::$_1,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v7[2];
  uint64_t v8;
  _QWORD v9[3];
  int v10;
  char v11;

  v2 = a1[1];
  v1 = a1[2];
  v8 = a1[4];
  v3 = v8;
  v9[0] = v1;
  v7[0] = 0;
  v7[1] = 0;
  v4 = a1[3];
  a1[3] = 0;
  v9[1] = v4;
  v9[2] = v3;
  v10 = 0;
  a1[1] = 0;
  a1[2] = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v10 != -1)
    ((void (*)(char *, _QWORD *))off_1E34C5ED0[v10])(&v11, v9);
  v10 = -1;
  return WTF::Vector<WebCore::DOMCacheEngine::CacheInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::allCaches(unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)::$_2,void,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34C63E0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::allCaches(unsigned long long,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheInfos,WebCore::DOMCacheEngine::Error> &&)> &&)::$_2,void,std::experimental::fundamentals_v3::expected<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error> const&>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34C63E0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::initializeCacheSize(WebKit::CacheStorageCache &)::$_0,void,unsigned long long>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34C6408;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::initializeCacheSize(WebKit::CacheStorageCache &)::$_0,void,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34C6408;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::CacheStorageManager::initializeCacheSize(WebKit::CacheStorageCache &)::$_0,void,unsigned long long>::call(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t *v17;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  const WTF::String *v26;
  uint64_t i;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v2 = result[2];
  if (!v2)
    return result;
  if (!*(_QWORD *)(v2 + 8))
    return result;
  v3 = result;
  v4 = result[1];
  v5 = (uint64_t *)(v4 + 48);
  v6 = *(_QWORD *)(v4 + 48);
  if (!v6)
    return result;
  v8 = *(_DWORD *)(v6 - 8);
  LODWORD(v33) = -1640531527;
  WORD2(v33) = 0;
  BYTE6(v33) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)&v33, result + 3);
  result = (_QWORD *)WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v33);
  v9 = v3[3];
  v10 = v3[4];
  v11 = result & v8;
  v12 = (uint64_t *)(v6 + 16 * v11);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 == v9 && v14 == v10)
  {
LABEL_15:
    v19 = (_OWORD *)(v6 + 16 * v11);
    v20 = *v5;
    if (!*v5)
    {
      v21 = 0;
      goto LABEL_20;
    }
LABEL_19:
    v21 = (_OWORD *)(v20 + 16 * *(unsigned int *)(v20 - 4));
    if (v21 == v19)
      return result;
LABEL_20:
    if (v21 != v19)
    {
      *v19 = xmmword_1978CF7D0;
      ++*(_DWORD *)(*v5 - 16);
      v22 = *v5;
      if (*v5)
        v23 = *(_DWORD *)(v22 - 12) - 1;
      else
        v23 = -1;
      *(_DWORD *)(v22 - 12) = v23;
      v20 = *v5;
      if (!*v5)
      {
        v26 = (const WTF::String *)(*(_QWORD *)(v4 + 40) + a2);
        *(_QWORD *)(v4 + 40) = v26;
        goto LABEL_34;
      }
      v24 = *(_DWORD *)(v20 - 4);
      if (6 * *(_DWORD *)(v20 - 12) >= v24 || v24 <= 8)
      {
        v26 = (const WTF::String *)(*(_QWORD *)(v4 + 40) + a2);
        *(_QWORD *)(v4 + 40) = v26;
        goto LABEL_33;
      }
      result = (_QWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v5, v24 >> 1, 0);
      v20 = *v5;
    }
    v26 = (const WTF::String *)(*(_QWORD *)(v4 + 40) + a2);
    *(_QWORD *)(v4 + 40) = v26;
    if (v20)
    {
LABEL_33:
      if (*(_DWORD *)(v20 - 12))
        return result;
    }
LABEL_34:
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 24) = v26;
    *(_BYTE *)(v4 + 32) = 1;
    result = WebKit::writeSizeFile(*(WTF::StringImpl **)(v4 + 56), v26);
    for (i = *(_QWORD *)(v4 + 136); i != *(_QWORD *)(v4 + 144); i = *(_QWORD *)(v4 + 136))
    {
      v28 = (uint64_t *)(*(_QWORD *)(v4 + 152) + 16 * i);
      v33 = *v28;
      v29 = (_QWORD *)v28[1];
      v28[1] = 0;
      v34 = v29;
      v30 = *(_QWORD *)(v4 + 152) + 16 * i;
      v31 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      if (v31)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        i = *(_QWORD *)(v4 + 136);
      }
      if (i == *(unsigned int *)(v4 + 160) - 1)
        v32 = 0;
      else
        v32 = i + 1;
      *(_QWORD *)(v4 + 136) = v32;
      (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 80) + 16))(*(_QWORD *)(v4 + 80));
      result = v34;
      v34 = 0;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
    return result;
  }
  v16 = 1;
  while (v13 | v14)
  {
    v11 = ((_DWORD)v11 + v16) & v8;
    v17 = (uint64_t *)(v6 + 16 * v11);
    v13 = *v17;
    v14 = v17[1];
    ++v16;
    if (v13 == v9 && v14 == v10)
      goto LABEL_15;
  }
  v20 = *v5;
  if (*v5)
  {
    v19 = (_OWORD *)(v20 + 16 * *(unsigned int *)(v20 - 4));
    goto LABEL_19;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  unsigned int v20;
  __int16 v21;
  char v22;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = v6 + 16 * v11;
      if (*(_QWORD *)(v13 + 8) != -1 && *(_OWORD *)v13 != 0)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v20 = -1640531527;
        v21 = 0;
        v22 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v20, (_QWORD *)(v6 + 16 * v11));
        v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
        v17 = 0;
        do
        {
          v18 = v16 & v15;
          v16 = ++v17 + v18;
        }
        while (*(_OWORD *)(v14 + 16 * v18) != 0);
        *(_OWORD *)(v14 + 16 * v18) = *(_OWORD *)v13;
        if (v13 == a3)
          v12 = v14 + 16 * v18;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::add(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  __int16 v26;
  char v27;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v25 = -1640531527;
  v26 = 0;
  v27 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v25, a3);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v25);
  v9 = result & v7;
  v10 = (_QWORD *)(v6 + 16 * (result & v7));
  v12 = *v10;
  v11 = v10[1];
  if (*(_OWORD *)v10 != 0)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      if (v12 == *a3 && v11 == a3[1])
      {
        v21 = *a2;
        if (*a2)
          v22 = *(unsigned int *)(v21 - 4);
        else
          v22 = 0;
        v24 = 0;
        v23 = v21 + 16 * v22;
        goto LABEL_30;
      }
      if (v11 == -1)
        v13 = v10;
      v9 = (v9 + v14) & v7;
      v10 = (_QWORD *)(v6 + 16 * v9);
      v12 = *v10;
      v11 = v10[1];
      ++v14;
    }
    while (*(_OWORD *)v10 != 0);
    if (v13)
    {
      *v13 = 0;
      v13[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v10 = v13;
    }
  }
  *(_OWORD *)v10 = *(_OWORD *)a3;
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 <= 2 * v19)
    {
LABEL_21:
      result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a2, (uint64_t)v10);
      v10 = (_QWORD *)result;
      v17 = *a2;
      if (*a2)
        v20 = *(unsigned int *)(v17 - 4);
      else
        v20 = 0;
    }
  }
  else if (3 * v20 <= 4 * v19)
  {
    goto LABEL_21;
  }
  v23 = v17 + 16 * v20;
  v24 = 1;
LABEL_30:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  _QWORD *v18;
  WTF *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  WTF *v32;
  uint64_t result;
  unsigned int v35;
  __int16 v36;
  char v37;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)((32 * a2) | 0x10));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = v5 + 32 * v10;
      if (*(_QWORD *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          v16 = v5 + 32 * v10;
          v19 = *(WTF **)(v16 + 16);
          v18 = (_QWORD *)(v16 + 16);
          v17 = v19;
          if (v19)
          {
            *v18 = 0;
            *(_DWORD *)(v5 + 32 * v10 + 24) = 0;
            WTF::fastFree(v17, v9);
          }
        }
        else
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v35 = -1640531527;
          v36 = 0;
          v37 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v35, (_QWORD *)(v5 + 32 * v10));
          v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v35);
          v21 = 0;
          do
          {
            v22 = v20 & v15;
            v23 = v14 + 32 * v22;
            v20 = ++v21 + v22;
          }
          while (*(_OWORD *)v23 != 0);
          v25 = (_QWORD *)(v23 + 16);
          v24 = *(WTF **)(v23 + 16);
          if (v24)
          {
            *v25 = 0;
            *(_DWORD *)(v14 + 32 * v22 + 24) = 0;
            WTF::fastFree(v24, v9);
          }
          *(_OWORD *)v23 = *(_OWORD *)v13;
          v26 = v5 + 32 * v10;
          *v25 = 0;
          *(_QWORD *)(v23 + 24) = 0;
          v28 = *(_QWORD *)(v26 + 16);
          v27 = v26 + 16;
          *(_QWORD *)v27 = 0;
          *v25 = v28;
          v29 = *(_DWORD *)(v27 + 8);
          *(_DWORD *)(v27 + 8) = 0;
          v30 = v14 + 32 * v22;
          *(_DWORD *)(v30 + 24) = v29;
          v31 = *(_DWORD *)(v27 + 12);
          *(_DWORD *)(v27 + 12) = 0;
          *(_DWORD *)(v30 + 28) = v31;
          v32 = *(WTF **)v27;
          if (*(_QWORD *)v27)
          {
            *(_QWORD *)v27 = 0;
            *(_DWORD *)(v27 + 8) = 0;
            WTF::fastFree(v32, v9);
          }
          if (v13 == a3)
            v11 = v14 + 32 * v22;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  int v13;
  unsigned int v15;
  __int16 v16;
  char v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v15 = -1640531527;
  v16 = 0;
  v17 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v15, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  v7 = a2[1];
  v8 = v6 & v5;
  result = (uint64_t *)(v2 + 32 * v8);
  v10 = *result;
  v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    v13 = 1;
    while (v10 | v11)
    {
      v8 = ((_DWORD)v8 + v13) & v5;
      result = (uint64_t *)(v2 + 32 * v8);
      v10 = *result;
      v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7)
        return result;
    }
    if (*a1)
      return (uint64_t *)(*a1 + 32 * *(unsigned int *)(*a1 - 4));
    else
      return 0;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = *a2 + ~(*a2 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v26 = v6 + 8 * v20;
        goto LABEL_29;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_22:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v4, v14);
      v14 = result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_22;
  }
  v26 = v21 + 8 * v24;
  v25 = 1;
LABEL_29:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
    v3 += 24 * *(unsigned int *)(v3 - 4);
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(a1, a2);
  return a1;
}

WebKit::CacheStorageCache *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, uint64_t a2)
{
  WebKit::CacheStorageCache *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_OWORD *)a2 = xmmword_1978CF7D0;
  result = std::unique_ptr<WebKit::CacheStorageCache>::reset[abi:sn180100]((WebKit::CacheStorageCache **)(a2 + 16), 0);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WebKit::CacheStorageCache *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  int v13;
  unsigned int v15;
  __int16 v16;
  char v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v15 = -1640531527;
  v16 = 0;
  v17 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v15, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  v7 = a2[1];
  v8 = v6 & v5;
  result = (uint64_t *)(v2 + 24 * (v6 & v5));
  v10 = *result;
  v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    v13 = 1;
    while (v10 | v11)
    {
      v8 = (v8 + v13) & v5;
      result = (uint64_t *)(v2 + 24 * v8);
      v10 = *result;
      v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7)
        return result;
    }
    if (*a1)
      return (uint64_t *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    else
      return 0;
  }
  return result;
}

uint64_t WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, _BYTE *a2, uint64_t *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *a3;
  v8 = *((_QWORD *)a1 + 1);
  if ((v8 || (v8 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0 || v7 && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v10 = *a3;
      v11 = *a4;
      *(_WORD *)result = (char)*a2;
      v12 = result + 2;
      v18 = v10;
      result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v18, (char *)(result + 2));
      v13 = v18;
      if (v18)
        v13 = *(unsigned int *)(v18 + 4);
      *(_WORD *)(v12 + 2 * v13) = v11;
    }
  }
  else
  {
    result = MEMORY[0x19AEAB398]();
    if (result)
    {
      v14 = *a3;
      v15 = *a4;
      *(_BYTE *)result = *a2;
      v16 = result + 1;
      v18 = v14;
      result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v18, (char *)(result + 1));
      v17 = v18;
      if (v18)
        v17 = *(unsigned int *)(v18 + 4);
      *(_BYTE *)(v16 + v17) = v15;
    }
  }
  return result;
}

uint64_t WTF::Vector<std::optional<WebKit::CacheStorageRecord>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  WebKit::CacheStorageRecord *v4;
  uint64_t v5;

  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(WebKit::CacheStorageRecord **)a1;
  if (v3)
  {
    v5 = 752 * v3;
    do
    {
      if (*((_BYTE *)v4 + 736))
        WebKit::CacheStorageRecord::~CacheStorageRecord(v4, a2);
      v4 = (WebKit::CacheStorageRecord *)((char *)v4 + 752);
      v5 -= 752;
    }
    while (v5);
    v4 = *(WebKit::CacheStorageRecord **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = v12 + 16 * v19;
          std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100]((WebKit::CacheStorageRecord **)(v21 + 8), 0);
          v22 = *v10;
          v23 = v4 + 16 * i;
          v24 = *(_QWORD *)(v23 + 8);
          v23 += 8;
          *(_QWORD *)v23 = 0;
          *(_QWORD *)v21 = v22;
          *(_QWORD *)(v21 + 8) = v24;
          std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100]((WebKit::CacheStorageRecord **)v23, 0);
        }
        else
        {
          std::unique_ptr<WebKit::CacheStorageRecord>::reset[abi:sn180100]((WebKit::CacheStorageRecord **)(v4 + 16 * i + 8), 0);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::CacheStorageRecord>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageRecord>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v3);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  _OWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  _OWORD *result;
  unsigned int v39;
  __int16 v40;
  char v41;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (a2)
    bzero((void *)(v8 + 16), 24 * a2);
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    v14 = v6;
    do
    {
      v15 = v5 + 24 * v12;
      if (*(_QWORD *)(v15 + 8) != -1)
      {
        if (*(_OWORD *)v15 == 0)
        {
          v18 = v5 + 24 * v12;
          v19 = *(unsigned int **)(v18 + 16);
          *(_QWORD *)(v18 + 16) = 0;
          if (v19)
          {
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              WTF::fastFree((WTF *)v19, v9);
            }
          }
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v39 = -1640531527;
          v40 = 0;
          v41 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v39, (_QWORD *)(v5 + 24 * v12));
          v22 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v39);
          v23 = 0;
          do
          {
            v24 = v22 & v17;
            v25 = (_OWORD *)(v16 + 24 * (v22 & v17));
            v22 = ++v23 + (v22 & v17);
          }
          while (*v25 != 0);
          v26 = v16 + 24 * v24;
          v29 = *(unsigned int **)(v26 + 16);
          v28 = (_QWORD *)(v26 + 16);
          v27 = v29;
          *v28 = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v27);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v27));
            if (!v31)
            {
              atomic_store(1u, v27);
              WTF::fastFree((WTF *)v27, v9);
            }
          }
          *v25 = *(_OWORD *)v15;
          v32 = v5 + 24 * v12;
          v33 = *(_QWORD *)(v32 + 16);
          *(_QWORD *)(v32 + 16) = 0;
          *v28 = v33;
          v34 = *(unsigned int **)(v32 + 16);
          *(_QWORD *)(v32 + 16) = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              atomic_store(1u, v34);
              WTF::fastFree((WTF *)v34, v9);
            }
          }
          if (v15 == a3)
            v13 = v25;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

unsigned int *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, void *a2)
{
  unsigned int *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (unsigned int *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

unsigned int *WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  *(_OWORD *)a1 = xmmword_1978CF7D0;
  result = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::CacheStorageCache,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t *v14;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  __int16 v19;
  char v20;

  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
LABEL_16:
    v16 = 0;
    goto LABEL_17;
  }
  v6 = *(_DWORD *)(v4 - 8);
  v18 = -1640531527;
  v19 = 0;
  v20 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v18, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v18);
  v7 = a2[1];
  v8 = result & v6;
  v9 = (uint64_t *)(v4 + 24 * (result & v6));
  v10 = *v9;
  v11 = v9[1];
  if (*v9 != *a2 || v11 != v7)
  {
    v13 = 1;
    while (v10 | v11)
    {
      v8 = (v8 + v13) & v6;
      v14 = (uint64_t *)(v4 + 24 * v8);
      v10 = *v14;
      v11 = v14[1];
      ++v13;
      if (v10 == *a2 && v11 == v7)
        goto LABEL_13;
    }
    goto LABEL_16;
  }
LABEL_13:
  v16 = *(unsigned int **)(v4 + 24 * v8 + 16);
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
LABEL_17:
  *a3 = v16;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::FileSystemStorageHandle::requestNewCapacityForSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34C6430;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FileSystemStorageHandle::requestNewCapacityForSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34C6430;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FileSystemStorageHandle::requestNewCapacityForSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::$_0,void,BOOL>::call(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[2];
  if (v2 && *(_QWORD *)(v2 + 8) && (v3 = a1[1], *(_BYTE *)(v3 + 64)) && *(_QWORD *)(v3 + 48) == a1[3])
  {
    if ((a2 & 1) != 0)
    {
      v4 = a1[4];
      *(_QWORD *)(v3 + 56) = v4;
    }
    else
    {
      v4 = *(_QWORD *)(v3 + 56);
    }
    v5 = a1[5];
    a1[5] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4, 1);
  }
  else
  {
    v5 = a1[5];
    a1[5] = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (uint64_t *)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != -1)
      {
        if (v16)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
          v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          v26 = v22 & ((v25 >> 31) ^ v25);
          v27 = 1;
          do
          {
            v28 = v26;
            v29 = *(_QWORD *)(v21 + 16 * v26);
            v26 = (v26 + v27++) & v22;
          }
          while (v29);
          v30 = (uint64_t *)(v21 + 16 * v28);
          v31 = (unsigned int *)v30[1];
          v30[1] = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, v10);
            }
          }
          *v30 = *v15;
          v34 = v6 + 16 * v13;
          v35 = *(_QWORD *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          v30[1] = v35;
          v36 = *(unsigned int **)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          if (v36)
          {
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              atomic_store(1u, v36);
              WTF::fastFree((WTF *)v36, v10);
            }
          }
          if (v15 == a3)
            v14 = v30;
        }
        else
        {
          v17 = v6 + 16 * v13;
          v18 = *(unsigned int **)(v17 + 8);
          *(_QWORD *)(v17 + 8) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, v10);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

WTF *WebKit::WebAutomationSession::platformGetBase64EncodedPNGData@<X0>(_BYTE *a1@<X8>)
{
  WTF *result;
  void *v3;
  CFTypeRef v4;
  CFTypeRef cf;
  WTF *v6;

  WebCore::ShareableBitmap::create();
  result = v6;
  if (v6)
  {
    WebCore::ShareableBitmap::makeCGImage();
    WebKit::getBase64EncodedPNGData((CGImageRef *)&cf, (uint64_t)a1);
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
    result = v6;
    v6 = 0;
    if (result)
      return (WTF *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v3);
  }
  else
  {
    *a1 = 0;
    a1[8] = 0;
  }
  return result;
}

void sub_1971B76D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF *a10)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::getBase64EncodedPNGData(CGImageRef *a1@<X0>, uint64_t a2@<X8>)
{
  __CFData *v4;
  CGImageDestination *v5;
  CGImageDestination *v6;
  uint64_t v7;

  v4 = (__CFData *)objc_alloc_init(MEMORY[0x1E0C99DF0]);
  v5 = CGImageDestinationCreateWithData(v4, (CFStringRef)*MEMORY[0x1E0CA5C10], 1uLL, 0);
  v6 = v5;
  if (v5)
  {
    CGImageDestinationAddImage(v5, *a1, 0);
    CGImageDestinationFinalize(v6);
    MEMORY[0x19AEABCC8](&v7, -[__CFData base64EncodedStringWithOptions:](v4, "base64EncodedStringWithOptions:", 0));
    *(_QWORD *)a2 = v7;
    *(_BYTE *)(a2 + 8) = 1;
    CFRelease(v6);
    if (!v4)
      return;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    if (!v4)
      return;
  }
  CFRelease(v4);
}

void sub_1971B77D0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::WebAutomationSession::platformGetBase64EncodedPNGData(WebKit::WebAutomationSession *this@<X0>, _BYTE *a2@<X8>)
{
  WebCore::IOSurface *v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  v4 = (WebCore::IOSurface *)*((_QWORD *)this + 2);
  if (v4)
  {
    WebCore::IOSurface::createPlatformContext(*((WebCore::IOSurface **)this + 2));
    WebCore::IOSurface::createImage(v4, (CGContext *)cf);
    WebKit::getBase64EncodedPNGData((CGImageRef *)&v7, (uint64_t)a2);
    v5 = v7;
    v7 = 0;
    if (v5)
      CFRelease(v5);
    v6 = cf;
    cf = 0;
    if (v6)
      CFRelease(v6);
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void sub_1971B7884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    CFRelease(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebAutomationSession::platformGenerateLocalFilePathForRemoteFile(const WTF::String *a1@<X1>, const WTF::String *a2@<X2>, _BYTE *a3@<X8>)
{
  id v7;
  const __CFString *v8;
  uint64_t v9;
  NSString *v10;
  void *v11;
  void *TemporaryDirectory;
  void *v13;
  const __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = objc_alloc(MEMORY[0x1E0C99D50]);
  if (*(_QWORD *)a2)
    v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E351F1B8;
  v9 = objc_msgSend(v7, "initWithBase64EncodedString:options:", v8, 0);
  if (v9)
  {
    v11 = (void *)v9;
    TemporaryDirectory = (void *)WTF::FileSystemImpl::createTemporaryDirectory((WTF::FileSystemImpl *)CFSTR("WebDriver"), v10);
    v13 = (void *)MEMORY[0x1E0C99E98];
    if (*(_QWORD *)a1)
      v14 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v14 = &stru_1E351F1B8;
    v15 = objc_msgSend(TemporaryDirectory, "stringByAppendingPathComponent:", objc_msgSend((id)objc_msgSend(v13, "fileURLWithPath:isDirectory:", v14, 0), "lastPathComponent"));
    v17 = 0;
    objc_msgSend(v11, "writeToFile:options:error:", v15, 1, &v17);
    if (v17)
    {
      *a3 = 0;
      a3[8] = 0;
    }
    else
    {
      MEMORY[0x19AEABCC8](&v16, v15);
      *(_QWORD *)a3 = v16;
      a3[8] = 1;
    }
    CFRelease(v11);
  }
  else
  {
    *a3 = 0;
    a3[8] = 0;
  }
}

void sub_1971B79E8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebAutomationSession::charCodeForVirtualKey(int a1)
{
  if ((a1 - 4) > 0x65)
    return 0;
  else
    return (dword_1978CFCC8[a1 - 4] | dword_1978CFB30[a1 - 4]) | dword_1978CFE60[a1 - 4];
}

uint64_t WebKit::WebAutomationSession::sendSynthesizedEventsToPage(WebKit::WebAutomationSession *this, WebKit::WebPageProxy *a2, NSArray *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::WebIOSEventFactory *v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  unsigned __int8 v12[88];
  CFTypeRef cf;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  result = -[WebKit::WebPageProxy countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  v6 = result;
  if (result)
  {
    v7 = *(_QWORD *)v15;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(a2);
        v9 = *(WebKit::WebIOSEventFactory **)(*((_QWORD *)&v14 + 1) + 8 * v8);
        if ((-[WebKit::WebIOSEventFactory type](v9, "type") & 0xFFFFFFFE) == 4)
        {
          WebKit::NativeWebKeyboardEvent::NativeWebKeyboardEvent((uint64_t)v12, v9, 0);
          WebKit::WebPageProxy::handleKeyboardEvent((uint64_t)this, v12);
          v11 = cf;
          cf = 0;
          if (v11)
            CFRelease(v11);
          WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)v12, v10);
        }
        ++v8;
      }
      while (v6 != v8);
      result = -[WebKit::WebPageProxy countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void WebKit::WebAutomationSession::platformSimulateKeyboardInteraction(uint64_t a1, WebKit::WebAutomationSession *a2, int a3, uint64_t a4)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  BOOL v10;
  NSArray *v11;
  id v12;
  id v13;
  const void *v14;
  id v15;
  const void *v16;
  id v17;
  id v18;
  _Unwind_Exception *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int v24;
  _QWORD v25[6];
  _QWORD *v26;

  v24 = 0;
  v22 = 0;
  v23 = 0;
  v25[0] = a1;
  v25[1] = &v23;
  v25[2] = &v22;
  v25[3] = &v24;
  v25[4] = &v23;
  v25[5] = &v22;
  v6 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v6 == -1)
  {
    v19 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
    if (v5)
      CFRelease(v5);
    if (v4)
      CFRelease(v4);
    _Unwind_Resume(v19);
  }
  v26 = v25;
  ((void (*)(_QWORD **, uint64_t))off_1E34C6658[v6])(&v26, a4);
  v10 = objc_msgSend(v23, "length") == 1 && objc_msgSend(v23, "characterAtIndex:", 0) == 9;
  v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  switch(a3)
  {
    case 'l':
      v15 = objc_alloc(MEMORY[0x1E0DD9748]);
      BYTE2(v20) = v10;
      LOWORD(v20) = 0;
      v16 = (const void *)objc_msgSend(v15, "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", 4, v23, v22, *(unsigned int *)(a1 + 296), 0, 0, CFAbsoluteTimeGetCurrent(), 0, v20);
      objc_msgSend(v12, "addObject:", v16);
      if (v16)
        CFRelease(v16);
      v17 = objc_alloc(MEMORY[0x1E0DD9748]);
      BYTE2(v21) = v10;
      LOWORD(v21) = 0;
      v14 = (const void *)objc_msgSend(v17, "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", 5, v23, v22, *(unsigned int *)(a1 + 296), 0, 0, CFAbsoluteTimeGetCurrent(), 0, v21);
      objc_msgSend(v12, "addObject:", v14);
      break;
    case 'k':
      *(_DWORD *)(a1 + 296) &= ~v24;
      v18 = objc_alloc(MEMORY[0x1E0DD9748]);
      BYTE2(v20) = v10;
      LOWORD(v20) = 0;
      v14 = (const void *)objc_msgSend(v18, "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", 5, v23, v22, *(unsigned int *)(a1 + 296), 0, 0, CFAbsoluteTimeGetCurrent(), 0, v20);
      objc_msgSend(v12, "addObject:", v14);
      break;
    case 'j':
      *(_DWORD *)(a1 + 296) |= v24;
      v13 = objc_alloc(MEMORY[0x1E0DD9748]);
      BYTE2(v20) = v10;
      LOWORD(v20) = 0;
      v14 = (const void *)objc_msgSend(v13, "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", 4, v23, v22, *(unsigned int *)(a1 + 296), 0, 0, CFAbsoluteTimeGetCurrent(), 0, v20);
      objc_msgSend(v12, "addObject:", v14);
      break;
    default:
      goto LABEL_15;
  }
  if (v14)
    CFRelease(v14);
LABEL_15:
  WebKit::WebAutomationSession::sendSynthesizedEventsToPage(a2, (WebKit::WebPageProxy *)v12, v11);
  if (v12)
    CFRelease(v12);
}

void WebKit::WebAutomationSession::platformSimulateKeySequence(WebKit::WebAutomationSession *this, WebKit::WebPageProxy *a2, const WTF::String *a3)
{
  id v6;
  __CFString *v7;
  char v8;
  uint64_t v9;
  NSArray *v10;
  CFTypeRef v11;
  _QWORD v12[5];
  CFTypeRef cf;
  char v14;

  v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (*(_QWORD *)a3)
    v7 = (__CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E351F1B8;
  v8 = -[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("\t"));
  v9 = -[__CFString length](v7, "length");
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3321888768;
  v12[2] = ___ZN6WebKit20WebAutomationSession27platformSimulateKeySequenceERNS_12WebPageProxyERKN3WTF6StringE_block_invoke;
  v12[3] = &__block_descriptor_49_e8_40c38_ZTSN3WTF9RetainPtrI14NSMutableArrayEE_e52_v56__0__NSString_8__NSRange_QQ_16__NSRange_QQ_32_B48l;
  v14 = v8;
  v12[4] = this;
  cf = v6;
  if (v6)
    CFRetain(v6);
  -[__CFString enumerateSubstringsInRange:options:usingBlock:](v7, "enumerateSubstringsInRange:options:usingBlock:", 0, v9, 2, v12);
  WebKit::WebAutomationSession::sendSynthesizedEventsToPage(a2, (WebKit::WebPageProxy *)v6, v10);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  if (v6)
    CFRelease(v6);
}

void sub_1971B7F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf)
{
  const void *v15;

  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  _Unwind_Resume(exception_object);
}

void ___ZN6WebKit20WebAutomationSession27platformSimulateKeySequenceERNS_12WebPageProxyERKN3WTF6StringE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  CFAbsoluteTime Current;
  const void *v7;
  id v8;
  CFAbsoluteTime v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = objc_alloc(MEMORY[0x1E0DD9748]);
  Current = CFAbsoluteTimeGetCurrent();
  BYTE2(v11) = *(_BYTE *)(a1 + 48);
  LOWORD(v11) = 0;
  v7 = (const void *)objc_msgSend(v5, "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", 4, a2, a2, *(unsigned int *)(v4 + 296), 0, 0, Current, 0, v11);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v7);
  v8 = objc_alloc(MEMORY[0x1E0DD9748]);
  v9 = CFAbsoluteTimeGetCurrent();
  BYTE2(v12) = *(_BYTE *)(a1 + 48);
  LOWORD(v12) = 0;
  v10 = (const void *)objc_msgSend(v8, "initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:withInputManagerHint:keyCode:isTabKey:", 5, a2, a2, *(unsigned int *)(v4 + 296), 0, 0, v9, 0, v12);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v10);
  if (v10)
    CFRelease(v10);
  if (v7)
    CFRelease(v7);
}

void sub_1971B8088(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_40c38_ZTSN3WTF9RetainPtrI14NSMutableArrayEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSN3WTF9RetainPtrI14NSMutableArrayEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

void WebKit::WebAutomationSession::platformSimulateTouchInteraction(uint64_t a1, WebKit::WebPageProxy *a2, int a3, id *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18[3];

  v18[0] = *a4;
  v18[1] = 0;
  v10 = *((_QWORD *)a2 + 5);
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1584))(v11);
  v12 = (void *)(*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)v11 + 504))(v11, v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 1592))(v11);
  v18[2] = v12;
  v13 = *a7;
  *a7 = 0;
  v14 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v14 = MEMORY[0x1E0C809A0];
  v14[1] = 50331650;
  v14[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0>(WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0)::{lambda(void *)#1}::__invoke;
  v14[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0>(WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0)::descriptor;
  v14[4] = v13;
  v15 = +[_WKTouchEventGenerator sharedTouchEventGenerator](_WKTouchEventGenerator, "sharedTouchEventGenerator");
  WebKit::WebPageProxy::cocoaView(a2, v18);
  v16 = v18[0];
  v17 = objc_msgSend(v18[0], "window");
  if (v16)
    CFRelease(v16);
  if (a3)
  {
    if (a3 == 1)
    {
      WebCore::IntPoint::operator CGPoint();
      objc_msgSend(v15, "moveToPoint:duration:window:completionBlock:", v17, v14);
    }
    else if (a3 == 2)
    {
      WebCore::IntPoint::operator CGPoint();
      objc_msgSend(v15, "liftUp:window:completionBlock:", v17, v14);
    }
  }
  else
  {
    WebCore::IntPoint::operator CGPoint();
    objc_msgSend(v15, "touchDown:window:completionBlock:", v17, v14);
  }
  _Block_release(v14);
}

void sub_1971B8294(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AutomationClient::AutomationClient(uint64_t a1, uint64_t a2, id val)
{
  Inspector::RemoteInspector::Client *v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  Inspector::RemoteInspector *v10;

  *(_QWORD *)(a1 + 8) = &unk_1E34C64E0;
  v4 = (Inspector::RemoteInspector::Client *)(a1 + 8);
  *(_QWORD *)a1 = off_1E34C6488;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  objc_initWeak((id *)(a1 + 24), val);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a1 + 32) & 0xFE | objc_opt_respondsToSelector() & 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v5 = 2;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a1 + 32) & 0xFD | v5;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v6 = 4;
  else
    v6 = 0;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a1 + 32) & 0xFB | v6;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v7 = 8;
  else
    v7 = 0;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a1 + 32) & 0xF7 | v7;
  v8 = objc_opt_respondsToSelector();
  if ((v8 & 1) != 0)
    v9 = 16;
  else
    v9 = 0;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a1 + 32) & 0xEF | v9;
  v10 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton((Inspector::RemoteInspector *)v8);
  Inspector::RemoteInspector::setClient(v10, v4);
  return a1;
}

void sub_1971B8418(_Unwind_Exception *a1)
{
  Inspector::RemoteInspector::Client *v1;

  Inspector::RemoteInspector::Client::~Client(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationClient::~AutomationClient(id *this)
{
  Inspector::RemoteInspector *v2;

  v2 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton((Inspector::RemoteInspector *)this);
  Inspector::RemoteInspector::setClient(v2, 0);
  objc_destroyWeak(this + 3);
  Inspector::RemoteInspector::Client::~Client((Inspector::RemoteInspector::Client *)(this + 1));
}

{
  WTF *v1;
  void *v2;

  WebKit::AutomationClient::~AutomationClient(this);
  WTF::fastFree(v1, v2);
}

void sub_1971B8478(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 + 24));
  Inspector::RemoteInspector::Client::~Client((Inspector::RemoteInspector::Client *)(v1 + 8));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'WebKit::AutomationClient::~AutomationClient(id *this)
{
  WebKit::AutomationClient::~AutomationClient(this - 1);
}

{
  WTF *v1;
  void *v2;

  WebKit::AutomationClient::~AutomationClient(this - 1);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::AutomationClient::didRequestAutomationSession(WebKit::AutomationClient *this, WebKit::WebProcessPool *a2, WTF::RunLoop **a3)
{
  int v4;
  char v5;

  v5 = 0;
  v4 = 0;
  return WebKit::AutomationClient::requestAutomationSession((uint64_t)this, a3, (unsigned __int8 *)&v4);
}

uint64_t WebKit::AutomationClient::requestAutomationSession(uint64_t a1, WTF::RunLoop **a2, unsigned __int8 *a3)
{
  _WKAutomationSessionConfiguration *v6;
  WTF::RunLoop *v7;
  const __CFString *v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  v6 = objc_alloc_init(_WKAutomationSessionConfiguration);
  -[_WKAutomationSessionConfiguration setAcceptInsecureCertificates:](v6, "setAcceptInsecureCertificates:", *a3);
  if (a3[2])
    -[_WKAutomationSessionConfiguration setAllowsInsecureMediaCapture:](v6, "setAllowsInsecureMediaCapture:", a3[1]);
  if (a3[4])
    -[_WKAutomationSessionConfiguration setSuppressesICECandidateFiltering:](v6, "setSuppressesICECandidateFiltering:", a3[3]);
  v7 = *a2;
  if (*a2)
  {
    v7 = (WTF::RunLoop *)WTF::StringImpl::operator NSString *();
    v8 = (const __CFString *)v7;
  }
  else
  {
    v8 = &stru_1E351F1B8;
  }
  WTF::RunLoop::main(v7);
  if (v8)
    CFRetain(v8);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E34C6678;
  v9[1] = a1;
  v9[2] = v8;
  v9[3] = v6;
  v11 = v9;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v11;
  if (v11)
    return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  return result;
}

void sub_1971B85DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AutomationClient::remoteAutomationAllowed(WebKit::AutomationClient *this)
{
  uint64_t v1;
  id WeakRetained;

  if ((*((_BYTE *)this + 32) & 1) == 0)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)this + 3);
  v1 = objc_msgSend(WeakRetained, "_processPoolAllowsRemoteAutomation:", *((_QWORD *)this + 2));
  if (WeakRetained)
    CFRelease(WeakRetained);
  return v1;
}

void sub_1971B8694(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebKit::AutomationClient::remoteAutomationAllowed(WebKit::AutomationClient *this)
{
  return WebKit::AutomationClient::remoteAutomationAllowed((WebKit::AutomationClient *)((char *)this - 8));
}

uint64_t `non-virtual thunk to'WebKit::AutomationClient::requestAutomationSession(uint64_t a1, WTF::RunLoop **a2, unsigned __int8 *a3)
{
  return WebKit::AutomationClient::requestAutomationSession(a1 - 8, a2, a3);
}

uint64_t WebKit::AutomationClient::requestedDebuggablesToWakeUp(WebKit::AutomationClient *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  WTF::RunLoop::main(this);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34C66A0;
  v2[1] = this;
  v4 = (uint64_t)v2;
  WTF::RunLoop::dispatch();
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void sub_1971B8724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebKit::AutomationClient::requestedDebuggablesToWakeUp(WebKit::AutomationClient *this)
{
  return WebKit::AutomationClient::requestedDebuggablesToWakeUp((WebKit::AutomationClient *)((char *)this - 8));
}

void WebKit::AutomationClient::browserName(id *this)
{
  void *v1;
  void *v2;
  void *v3;

  if (((_BYTE)this[4] & 8) != 0)
  {
    objc_msgSend(objc_loadWeak(this + 3), "_processPoolBrowserNameForAutomation:", this[2]);
  }
  else
  {
    v1 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v2 = (void *)objc_msgSend(v1, "infoDictionary");
    objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0C9AAC8]);
    v3 = (void *)objc_msgSend(v1, "infoDictionary");
    objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0C9AE88]);
  }
  JUMPOUT(0x19AEABCC8);
}

void `non-virtual thunk to'WebKit::AutomationClient::browserName(id *this)
{
  WebKit::AutomationClient::browserName(this - 1);
}

void WebKit::AutomationClient::browserVersion(id *this)
{
  void *v1;

  if (((_BYTE)this[4] & 0x10) != 0)
  {
    objc_msgSend(objc_loadWeak(this + 3), "_processPoolBrowserVersionForAutomation:", this[2]);
  }
  else
  {
    v1 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "infoDictionary");
    objc_msgSend(v1, "objectForKeyedSubscript:", *MEMORY[0x1E0C9AAF0]);
  }
  JUMPOUT(0x19AEABCC8);
}

void `non-virtual thunk to'WebKit::AutomationClient::browserVersion(id *this)
{
  WebKit::AutomationClient::browserVersion(this - 1);
}

uint64_t WebKit::AutomationSessionClient::AutomationSessionClient(uint64_t a1, void *a2)
{
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;

  *(_QWORD *)a1 = off_1E34C6528;
  *(_QWORD *)(a1 + 8) = 0;
  objc_initWeak((id *)(a1 + 8), a2);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFFE | objc_opt_respondsToSelector() & 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v3 = 2;
  else
    v3 = 0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFFD | v3;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v4 = 4;
  else
    v4 = 0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFFB | v4;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v5 = 8;
  else
    v5 = 0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFF7 | v5;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v6 = 16;
  else
    v6 = 0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFEF | v6;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v7 = 32;
  else
    v7 = 0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFDF | v7;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v8 = 64;
  else
    v8 = 0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFFBF | v8;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v9 = 128;
  else
    v9 = 0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFF7F | v9;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v10 = 256;
  else
    v10 = 0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFEFF | v10;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v11 = 512;
  else
    v11 = 0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFDFF | v11;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v12 = 1024;
  else
    v12 = 0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xFBFF | v12;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v13 = 2048;
  else
    v13 = 0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xF7FF | v13;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v14 = 4096;
  else
    v14 = 0;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xEFFF | v14;
  return a1;
}

void sub_1971B8ACC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::didDisconnectFromRemote(id *this, WebKit::WebAutomationSession *a2)
{
  id WeakRetained;

  if (((_WORD)this[2] & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 1);
    objc_msgSend(WeakRetained, "_automationSessionDidDisconnectFromRemote:", *((_QWORD *)a2 + 1));
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971B8B2C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::AutomationSessionClient::requestNewPageWithOptions(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v5;
  id WeakRetained;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if ((*(_WORD *)(a1 + 16) & 2) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *a4;
    *a4 = 0;
    v11 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v11 = MEMORY[0x1E0C809A0];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0>(WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0)::{lambda(void *,WKWebView *)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0>(WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0)::descriptor;
    v11[4] = v10;
    objc_msgSend(WeakRetained, "_automationSession:requestNewWebViewWithOptions:completionHandler:", v9, a3 & 1, v11);
    _Block_release(v11);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
  else
  {
    v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

void sub_1971B8C58(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  _Block_release(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::requestSwitchToPage(uint64_t a1, uint64_t a2, WebKit::WebPageProxy *this, uint64_t *a4)
{
  const void *v7;
  uint64_t v8;
  id WeakRetained;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const void *v13;

  WebKit::WebPageProxy::cocoaView(this, &v13);
  v7 = v13;
  if (v13 && (*(_WORD *)(a1 + 16) & 4) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *a4;
    *a4 = 0;
    v12 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v12 = MEMORY[0x1E0C809A0];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v12[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
    v12[4] = v11;
    objc_msgSend(WeakRetained, "_automationSession:requestSwitchToWebView:completionHandler:", v10, v7, v12);
    _Block_release(v12);
    if (WeakRetained)
      CFRelease(WeakRetained);
    goto LABEL_7;
  }
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v7)
LABEL_7:
    CFRelease(v7);
}

void sub_1971B8DD8(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  v4 = v3;
  _Block_release(v4);
  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::requestHideWindowOfPage(uint64_t a1, uint64_t a2, WebKit::WebPageProxy *this, uint64_t *a4)
{
  const void *v7;
  uint64_t v8;
  id WeakRetained;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const void *v13;

  WebKit::WebPageProxy::cocoaView(this, &v13);
  v7 = v13;
  if (v13 && (*(_WORD *)(a1 + 16) & 8) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *a4;
    *a4 = 0;
    v12 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v12 = MEMORY[0x1E0C809A0];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v12[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
    v12[4] = v11;
    objc_msgSend(WeakRetained, "_automationSession:requestHideWindowOfWebView:completionHandler:", v10, v7, v12);
    _Block_release(v12);
    if (WeakRetained)
      CFRelease(WeakRetained);
    goto LABEL_7;
  }
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v7)
LABEL_7:
    CFRelease(v7);
}

void sub_1971B8F70(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  v4 = v3;
  _Block_release(v4);
  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::requestRestoreWindowOfPage(uint64_t a1, uint64_t a2, WebKit::WebPageProxy *this, uint64_t *a4)
{
  const void *v7;
  uint64_t v8;
  id WeakRetained;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const void *v13;

  WebKit::WebPageProxy::cocoaView(this, &v13);
  v7 = v13;
  if (v13 && (*(_WORD *)(a1 + 16) & 0x10) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *a4;
    *a4 = 0;
    v12 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v12 = MEMORY[0x1E0C809A0];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v12[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
    v12[4] = v11;
    objc_msgSend(WeakRetained, "_automationSession:requestRestoreWindowOfWebView:completionHandler:", v10, v7, v12);
    _Block_release(v12);
    if (WeakRetained)
      CFRelease(WeakRetained);
    goto LABEL_7;
  }
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v7)
LABEL_7:
    CFRelease(v7);
}

void sub_1971B9108(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  v4 = v3;
  _Block_release(v4);
  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::requestMaximizeWindowOfPage(uint64_t a1, uint64_t a2, WebKit::WebPageProxy *this, uint64_t *a4)
{
  const void *v7;
  uint64_t v8;
  id WeakRetained;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const void *v13;

  WebKit::WebPageProxy::cocoaView(this, &v13);
  v7 = v13;
  if (v13 && (*(_WORD *)(a1 + 16) & 0x20) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *a4;
    *a4 = 0;
    v12 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
    *v12 = MEMORY[0x1E0C809A0];
    v12[1] = 50331650;
    v12[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v12[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
    v12[4] = v11;
    objc_msgSend(WeakRetained, "_automationSession:requestMaximizeWindowOfWebView:completionHandler:", v10, v7, v12);
    _Block_release(v12);
    if (WeakRetained)
      CFRelease(WeakRetained);
    goto LABEL_7;
  }
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v7)
LABEL_7:
    CFRelease(v7);
}

void sub_1971B92A0(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  v4 = v3;
  _Block_release(v4);
  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AutomationSessionClient::isShowingJavaScriptDialogOnPage(WebKit::AutomationSessionClient *this, WebKit::WebAutomationSession *a2, WebKit::WebPageProxy *a3)
{
  CFTypeRef v5;
  uint64_t v6;
  id WeakRetained;
  CFTypeRef cf;

  WebKit::WebPageProxy::cocoaView(a3, &cf);
  v5 = cf;
  if (!cf)
    return 0;
  if ((*((_WORD *)this + 8) & 0x40) == 0)
  {
    CFRelease(cf);
    return 0;
  }
  WeakRetained = objc_loadWeakRetained((id *)this + 1);
  v6 = objc_msgSend(WeakRetained, "_automationSession:isShowingJavaScriptDialogForWebView:", *((_QWORD *)a2 + 1), v5);
  if (WeakRetained)
    CFRelease(WeakRetained);
  CFRelease(v5);
  return v6;
}

void sub_1971B939C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::dismissCurrentJavaScriptDialogOnPage(id *this, WebKit::WebAutomationSession *a2, WebKit::WebPageProxy *a3)
{
  CFTypeRef v5;
  id WeakRetained;
  CFTypeRef cf;

  WebKit::WebPageProxy::cocoaView(a3, &cf);
  v5 = cf;
  if (cf)
  {
    if (((_WORD)this[2] & 0x80) != 0)
    {
      WeakRetained = objc_loadWeakRetained(this + 1);
      objc_msgSend(WeakRetained, "_automationSession:dismissCurrentJavaScriptDialogForWebView:", *((_QWORD *)a2 + 1), v5);
      if (WeakRetained)
        CFRelease(WeakRetained);
    }
    CFRelease(v5);
  }
}

void sub_1971B944C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::acceptCurrentJavaScriptDialogOnPage(id *this, WebKit::WebAutomationSession *a2, WebKit::WebPageProxy *a3)
{
  CFTypeRef v5;
  id WeakRetained;
  CFTypeRef cf;

  WebKit::WebPageProxy::cocoaView(a3, &cf);
  v5 = cf;
  if (cf)
  {
    if (((_WORD)this[2] & 0x100) != 0)
    {
      WeakRetained = objc_loadWeakRetained(this + 1);
      objc_msgSend(WeakRetained, "_automationSession:acceptCurrentJavaScriptDialogForWebView:", *((_QWORD *)a2 + 1), v5);
      if (WeakRetained)
        CFRelease(WeakRetained);
    }
    CFRelease(v5);
  }
}

void sub_1971B94FC(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::messageOfCurrentJavaScriptDialogOnPage(WebKit::AutomationSessionClient *this@<X0>, WebKit::WebAutomationSession *a2@<X1>, WebKit::WebPageProxy *a3@<X2>, _QWORD *a4@<X8>)
{
  CFTypeRef v7;
  id WeakRetained;
  CFTypeRef cf;

  WebKit::WebPageProxy::cocoaView(a3, &cf);
  v7 = cf;
  if (!cf)
    goto LABEL_4;
  if ((*((_WORD *)this + 8) & 0x200) == 0)
  {
    CFRelease(cf);
LABEL_4:
    *a4 = 0;
    return;
  }
  WeakRetained = objc_loadWeakRetained((id *)this + 1);
  MEMORY[0x19AEABCC8](a4, objc_msgSend(WeakRetained, "_automationSession:messageOfCurrentJavaScriptDialogForWebView:", *((_QWORD *)a2 + 1), v7));
  if (WeakRetained)
    CFRelease(WeakRetained);
  CFRelease(v7);
}

void sub_1971B95BC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::AutomationSessionClient::setUserInputForCurrentJavaScriptPromptOnPage(id *this, WebKit::WebAutomationSession *a2, WebKit::WebPageProxy *a3, const WTF::String *a4)
{
  CFTypeRef v7;
  id WeakRetained;
  uint64_t v9;
  const __CFString *v10;
  CFTypeRef cf;

  WebKit::WebPageProxy::cocoaView(a3, &cf);
  v7 = cf;
  if (cf)
  {
    if (((_WORD)this[2] & 0x400) != 0)
    {
      WeakRetained = objc_loadWeakRetained(this + 1);
      v9 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a4)
        v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v10 = &stru_1E351F1B8;
      objc_msgSend(WeakRetained, "_automationSession:setUserInput:forCurrentJavaScriptDialogForWebView:", v9, v10, v7);
      if (WeakRetained)
        CFRelease(WeakRetained);
    }
    CFRelease(v7);
  }
}

void sub_1971B9694(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

unint64_t WebKit::AutomationSessionClient::typeOfCurrentJavaScriptDialogOnPage(WebKit::AutomationSessionClient *this, WebKit::WebAutomationSession *a2, WebKit::WebPageProxy *a3)
{
  CFTypeRef v5;
  unint64_t v6;
  uint64_t v7;
  id WeakRetained;
  uint64_t v9;
  CFTypeRef cf;

  WebKit::WebPageProxy::cocoaView(a3, &cf);
  v5 = cf;
  if (!cf)
    goto LABEL_4;
  if ((*((_WORD *)this + 8) & 0x800) == 0)
  {
    CFRelease(cf);
LABEL_4:
    v6 = 0x100000000;
    v7 = 2;
    return v6 | v7;
  }
  WeakRetained = objc_loadWeakRetained((id *)this + 1);
  v9 = objc_msgSend(WeakRetained, "_automationSession:typeOfCurrentJavaScriptDialogForWebView:", *((_QWORD *)a2 + 1), v5);
  v6 = (unint64_t)((unint64_t)(v9 - 2) < 3) << 32;
  if ((unint64_t)(v9 - 2) >= 3)
    v7 = 0;
  else
    v7 = v9 - 2;
  if (WeakRetained)
    CFRelease(WeakRetained);
  CFRelease(v5);
  return v6 | v7;
}

void sub_1971B9760(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

BOOL WebKit::AutomationSessionClient::currentPresentationOfPage(WebKit::AutomationSessionClient *this, WebKit::WebAutomationSession *a2, WebKit::WebPageProxy *a3)
{
  CFTypeRef v5;
  _BOOL8 v6;
  id WeakRetained;
  CFTypeRef cf;

  WebKit::WebPageProxy::cocoaView(a3, &cf);
  v5 = cf;
  if (!cf)
    return 1;
  if ((*((_WORD *)this + 8) & 0x1000) == 0)
  {
    CFRelease(cf);
    return 1;
  }
  WeakRetained = objc_loadWeakRetained((id *)this + 1);
  v6 = objc_msgSend(WeakRetained, "_automationSession:currentPresentationForWebView:", *((_QWORD *)a2 + 1), v5) != 0;
  if (WeakRetained)
    CFRelease(WeakRetained);
  CFRelease(v5);
  return v6;
}

void sub_1971B981C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::shouldAllowAutoFillForCellularIdentifiers(WebKit *this, const WTF::URL *a2)
{
  WTF::URL *v2;
  char v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  double v10;
  void *v11;
  WTF *v12;
  char v13;
  NSObject *v14;
  const __CFString *v15;
  const __CFString *v16;
  char v17;
  NSObject *v18;
  NSObject *v19;
  const __CFString *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  __SecTask *v24;
  __SecTask *v25;
  CFTypeRef v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  void *v32;
  int v33;
  char v34;
  uint64_t v36;
  id v37;
  WTF::URL *v38;
  const __CFString *v39;
  WTF::StringImpl *v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t buf[4];
  const __CFString *v45;
  uint64_t v46;

  v2 = this;
  v46 = *MEMORY[0x1E0C80C00];
  if (WebKit::isFullWebBrowserOrRunningTest(this))
  {
    v3 = _MergedGlobals_73;
    _MergedGlobals_73 = 1;
    if ((v3 & 1) == 0)
    {
      v4 = qword_1ECE71960;
      v5 = 0;
      if (os_log_type_enabled((os_log_t)qword_1ECE71960, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v6 = "Skipped cellular AutoFill status check (app is a web browser)";
LABEL_65:
        _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, v6, buf, 2u);
        return 0;
      }
      return v5;
    }
    return 0;
  }
  if ((byte_1ECE72A32 & 1) != 0)
  {
    if (byte_1ECE72A31)
      goto LABEL_7;
  }
  else
  {
    v38 = v2;
    v24 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    if (v24)
    {
      v25 = v24;
      v26 = SecTaskCopyValueForEntitlement(v24, CFSTR("com.apple.CommCenter.fine-grained"), 0);
      v27 = (void *)WTF::dynamic_cf_cast<__CFArray const*>(v26);
      v42 = 0u;
      v43 = 0u;
      *(_OWORD *)v40 = 0u;
      v41 = 0u;
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", v40, buf, 16);
      if (v28)
      {
        v29 = *(_QWORD *)v41;
        while (2)
        {
          for (i = 0; i != v28; ++i)
          {
            if (*(_QWORD *)v41 != v29)
              objc_enumerationMutation(v27);
            v31 = (void *)*((_QWORD *)v40[1] + i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v32 = v31;
            else
              v32 = 0;
            if ((objc_msgSend(v32, "isEqualToString:", CFSTR("public-cellular-plan"), v38) & 1) != 0)
            {
              v33 = 1;
              goto LABEL_57;
            }
          }
          v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", v40, buf, 16);
          if (v28)
            continue;
          break;
        }
      }
      v33 = 0;
LABEL_57:
      if (v26)
        CFRelease(v26);
      CFRelease(v25);
    }
    else
    {
      v33 = 0;
    }
    byte_1ECE72A31 = v33;
    byte_1ECE72A32 = 1;
    v2 = v38;
    if (v33)
    {
LABEL_7:
      WTF::URL::host(v2);
      if ((v7 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      if (v40[0] && *((_DWORD *)v40[0] + 1))
      {
        if (byte_1ECE72A33 == 1)
        {
          v11 = (void *)qword_1ECE72A38;
        }
        else
        {
          gotLoadHelper_x8__OBJC_CLASS___CoreTelephonyClient(v10);
          v37 = objc_alloc(*(Class *)(v36 + 3640));
          v11 = (void *)objc_msgSend(v37, "initWithQueue:", MEMORY[0x1E0C80D38]);
          qword_1ECE72A38 = (uint64_t)v11;
          byte_1ECE72A33 = 1;
        }
        if (byte_1ECE72A34 == 1)
        {
          v12 = (WTF *)qword_1ECE72A40;
        }
        else
        {
          v12 = 0;
          qword_1ECE72A40 = 0;
          byte_1ECE72A34 = 1;
        }
        if (WTF::equal(v12, v40[0], v9))
        {
          v5 = byte_1ECE72A35 != 0;
          goto LABEL_37;
        }
        v39 = 0;
        if (v40[0])
          v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v15 = &stru_1E351F1B8;
        v5 = objc_msgSend(v11, "isAutofilleSIMIdAllowedForDomain:error:", v15, &v39, v38);
        v16 = v39;
        v17 = _MergedGlobals_73;
        _MergedGlobals_73 = 1;
        if (v39)
        {
          if ((v17 & 1) == 0)
          {
            v18 = qword_1ECE71960;
            if (os_log_type_enabled((os_log_t)qword_1ECE71960, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              v45 = v16;
              _os_log_error_impl(&dword_196BCC000, v18, OS_LOG_TYPE_ERROR, "Failed to query cellular AutoFill status: %{public}@", buf, 0xCu);
            }
            goto LABEL_26;
          }
        }
        else if ((v17 & 1) == 0)
        {
          v19 = qword_1ECE71960;
          if (os_log_type_enabled((os_log_t)qword_1ECE71960, OS_LOG_TYPE_DEFAULT))
          {
            v20 = CFSTR("NO");
            if ((_DWORD)v5)
              v20 = CFSTR("YES");
            *(_DWORD *)buf = 138543362;
            v45 = v20;
            _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_DEFAULT, "Is cellular AutoFill allowed for current host? %{public}@", buf, 0xCu);
          }
        }
        v21 = v40[0];
        v40[0] = 0;
        v22 = (WTF::StringImpl *)qword_1ECE72A40;
        qword_1ECE72A40 = (uint64_t)v21;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v8);
          else
            *(_DWORD *)v22 -= 2;
        }
        byte_1ECE72A35 = v5;
        goto LABEL_37;
      }
      v13 = _MergedGlobals_73;
      _MergedGlobals_73 = 1;
      if ((v13 & 1) == 0)
      {
        v14 = qword_1ECE71960;
        v5 = 0;
        if (!os_log_type_enabled((os_log_t)qword_1ECE71960, OS_LOG_TYPE_DEFAULT))
          goto LABEL_37;
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "Skipped cellular AutoFill status check (no registrable domain)", buf, 2u);
      }
LABEL_26:
      v5 = 0;
LABEL_37:
      v23 = v40[0];
      v40[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v8);
        else
          *(_DWORD *)v23 -= 2;
      }
      return v5;
    }
  }
  v34 = _MergedGlobals_73;
  _MergedGlobals_73 = 1;
  if ((v34 & 1) != 0)
    return 0;
  v4 = qword_1ECE71960;
  v5 = 0;
  if (os_log_type_enabled((os_log_t)qword_1ECE71960, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v6 = "Skipped cellular AutoFill status check (app does not have cellular plan entitlement)";
    goto LABEL_65;
  }
  return v5;
}

void sub_1971B9D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  const void *v11;
  const void *v12;

  if (v12)
    CFRelease(v12);
  CFRelease(v11);
  _Unwind_Resume(a1);
}

id WebKit::DiagnosticLoggingClient::delegate@<X0>(id *this@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_loadWeakRetained(this + 2);
  *a2 = result;
  return result;
}

void WebKit::DiagnosticLoggingClient::logDiagnosticMessage(id *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4)
{
  id WeakRetained;
  id v8;
  const __CFString *v9;
  const __CFString *v10;

  if (((_BYTE)this[3] & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 2);
    v8 = this[1];
    if (*(_QWORD *)a3)
      v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v9 = &stru_1E351F1B8;
    if (*(_QWORD *)a4)
      v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v10 = &stru_1E351F1B8;
    objc_msgSend(WeakRetained, "_webView:logDiagnosticMessage:description:", v8, v9, v10);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971B9E8C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::DiagnosticLoggingClient::logDiagnosticMessageWithResult(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  id WeakRetained;
  uint64_t v10;
  const __CFString *v11;
  const __CFString *v12;
  uint64_t v13;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    v10 = *(_QWORD *)(a1 + 8);
    if (*a3)
      v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E351F1B8;
    if (*a4)
      v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v12 = &stru_1E351F1B8;
    if (a5 == 2)
      v13 = 2;
    else
      v13 = a5 == 1;
    objc_msgSend(WeakRetained, "_webView:logDiagnosticMessageWithResult:description:result:", v10, v11, v12, v13);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971B9F6C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::DiagnosticLoggingClient::logDiagnosticMessageWithValue(id *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  id WeakRetained;
  id v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;

  if (((_BYTE)this[3] & 4) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 2);
    v10 = this[1];
    if (*(_QWORD *)a3)
      v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E351F1B8;
    if (*(_QWORD *)a4)
      v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v12 = &stru_1E351F1B8;
    if (*(_QWORD *)a5)
      v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E351F1B8;
    objc_msgSend(WeakRetained, "_webView:logDiagnosticMessageWithValue:description:value:", v10, v11, v12, v13);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971BA058(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::DiagnosticLoggingClient::logDiagnosticMessageWithEnhancedPrivacy(id *this, WebKit::WebPageProxy *a2, const WTF::String *a3, const WTF::String *a4)
{
  id WeakRetained;
  id v8;
  const __CFString *v9;
  const __CFString *v10;

  if (((_BYTE)this[3] & 8) != 0)
  {
    WeakRetained = objc_loadWeakRetained(this + 2);
    v8 = this[1];
    if (*(_QWORD *)a3)
      v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v9 = &stru_1E351F1B8;
    if (*(_QWORD *)a4)
      v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v10 = &stru_1E351F1B8;
    objc_msgSend(WeakRetained, "_webView:logDiagnosticMessageWithEnhancedPrivacy:description:", v8, v9, v10);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971BA114(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::DiagnosticLoggingClient::logDiagnosticMessageWithValueDictionary(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  id WeakRetained;
  uint64_t v10;
  const __CFString *v11;
  const __CFString *v12;

  if ((*(_BYTE *)(a1 + 24) & 0x10) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    v10 = *(_QWORD *)(a1 + 8);
    if (*a3)
      v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E351F1B8;
    if (*a4)
      v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v12 = &stru_1E351F1B8;
    objc_msgSend(WeakRetained, "_webView:logDiagnosticMessage:description:valueDictionary:", v10, v11, v12, *(_QWORD *)(*(_QWORD *)a5 + 8));
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971BA1E8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::DiagnosticLoggingClient::logDiagnosticMessageWithDomain(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id WeakRetained;
  uint64_t v6;
  const __CFString *v7;

  if ((*(_BYTE *)(a1 + 24) & 0x20) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    v6 = *(_QWORD *)(a1 + 8);
    if (*a3)
      v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v7 = &stru_1E351F1B8;
    objc_msgSend(WeakRetained, "_webView:logDiagnosticMessageWithDomain:domain:", v6, v7, 0);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971BA284(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::AutomationSessionClient::~AutomationSessionClient(id *this)
{
  objc_destroyWeak(this + 1);
}

{
  void *v2;

  objc_destroyWeak(this + 1);
  WTF::fastFree((WTF *)this, v2);
}

void API::AutomationSessionClient::sessionIdentifier(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0>(WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0>(WebKit::WebAutomationSession::platformSimulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v2;
  BOOL v3;
  _BYTE v4[8];
  WTF::StringImpl *v5;
  char v6;
  char v7;

  v4[0] = 0;
  v7 = 0;
  result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)(a1 + 32), (uint64_t)v4);
  if (v7)
    v3 = v6 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1971BA3AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  BOOL v16;

  if ((_BYTE)a13)
    v16 = a11 == 0;
  else
    v16 = 1;
  if (!v16 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0>(WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(WKWebView *)>::fromCallable<WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0>(WebKit::AutomationSessionClient::requestNewPageWithOptions(WebKit::WebAutomationSession &,API::AutomationSessionBrowsingContextOptions,WTF::CompletionHandler<void ()(WebKit::WebPageProxy *)> &&)::$_0)::{lambda(void *,WKWebView *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 424);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_1971BA458(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1971BA4D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAutomationSession::platformSimulateKeyboardInteraction(WebKit::WebPageProxy &,Inspector::Protocol::Automation::KeyboardInteractionType,std::variant<Inspector::Protocol::Automation::VirtualKey,WTF::String> &&)::$_0,WebKit::WebAutomationSession::platformSimulateKeyboardInteraction(WebKit::WebPageProxy &,Inspector::Protocol::Automation::KeyboardInteractionType,std::variant<Inspector::Protocol::Automation::VirtualKey,WTF::String> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,Inspector::Protocol::Automation::VirtualKey,WTF::String> &>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v2 = *a1;
  v3 = *a2;
  result = WebKit::WebAutomationSession::charCodeForVirtualKey(*a2);
  v5 = result;
  v12 = result;
  if (result >= 0x10000)
  {
    result = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCharacters:length:", &v12, 1);
    **(_QWORD **)(v2 + 8) = result;
  }
  v6 = v5 & 0x10000;
  v7 = (unsigned __int16)v5;
  if (v3 == 89)
  {
    v7 = 61;
    v6 = 0x10000;
  }
  if (v3 == 88)
    v8 = 56;
  else
    v8 = v7;
  if (v3 == 88)
    v9 = 0x10000;
  else
    v9 = v6;
  v11 = v9 | v8;
  if ((v9 | v8) >= 0x10000)
  {
    result = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCharacters:length:", &v11, 1);
    **(_QWORD **)(v2 + 16) = result;
  }
  v10 = v3 - 36;
  if ((v3 - 36) <= 0xA && ((0x7F7u >> v10) & 1) != 0)
    **(_DWORD **)(v2 + 24) |= dword_1978CFFF8[v10];
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAutomationSession::platformSimulateKeyboardInteraction(WebKit::WebPageProxy &,Inspector::Protocol::Automation::KeyboardInteractionType,std::variant<Inspector::Protocol::Automation::VirtualKey,WTF::String> &&)::$_0,WebKit::WebAutomationSession::platformSimulateKeyboardInteraction(WebKit::WebPageProxy &,Inspector::Protocol::Automation::KeyboardInteractionType,std::variant<Inspector::Protocol::Automation::VirtualKey,WTF::String> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,Inspector::Protocol::Automation::VirtualKey,WTF::String> &>(uint64_t *result, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v2 = *result;
  v3 = *a2;
  if (*a2)
  {
    *(_DWORD *)v3 += 2;
    **(_QWORD **)(v2 + 32) = WTF::StringImpl::operator NSString *();
    result = (uint64_t *)WTF::StringImpl::operator NSString *();
    **(_QWORD **)(v2 + 40) = result;
    if (*(_DWORD *)v3 == 2)
      return (uint64_t *)WTF::StringImpl::destroy(v3, v4);
    else
      *(_DWORD *)v3 -= 2;
  }
  else
  {
    **(_QWORD **)(v2 + 32) = &stru_1E351F1B8;
    **(_QWORD **)(v2 + 40) = &stru_1E351F1B8;
  }
  return result;
}

void sub_1971BA668(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AutomationClient::requestAutomationSession(WTF::String const&,Inspector::RemoteInspector::Client::SessionCapabilities const&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E34C6678;
  v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AutomationClient::requestAutomationSession(WTF::String const&,Inspector::RemoteInspector::Client::SessionCapabilities const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;

  *(_QWORD *)this = &off_1E34C6678;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::AutomationClient::requestAutomationSession(WTF::String const&,Inspector::RemoteInspector::Client::SessionCapabilities const&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  id WeakRetained;

  v1 = a1[1];
  if ((*(_BYTE *)(v1 + 32) & 2) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v1 + 24));
    objc_msgSend(WeakRetained, "_processPool:didRequestAutomationSessionWithIdentifier:configuration:", *(_QWORD *)(v1 + 16), a1[2], a1[3]);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971BA788(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebKit::AutomationClient::requestedDebuggablesToWakeUp(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v1 + 32) & 4) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v1 + 24));
    objc_msgSend(WeakRetained, "_processPoolDidRequestInspectorDebuggablesToWakeUp:", *(_QWORD *)(v1 + 16));
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
}

void sub_1971BA7F4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::FileSystemStorageManager::~FileSystemStorageManager(WebKit::FileSystemStorageManager *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WebKit::FileSystemStorageManager::close(this);
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 6);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, v2);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, v2);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, v2);
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, v2);
}

WTF::StringImpl **WebKit::FileSystemStorageManager::close(WebKit::FileSystemStorageManager *this)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  IPC::Encoder *v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::StringImpl **result;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36[2];
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 **v39;
  IPC::Encoder *v40;

  v2 = (uint64_t *)((char *)this + 32);
  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 4);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
  else
    v6 = 0;
  if (v6 != v4)
  {
    v33 = v2;
    v34 = v6;
    v35 = (uint64_t *)v3;
    while (1)
    {
      v7 = v4[1];
      if (v7)
      {
        v8 = *(unsigned int *)(v7 - 4);
        v9 = (uint64_t *)(v7 + 8 * v8);
        if (*(_DWORD *)(v7 - 12))
        {
          v10 = (uint64_t *)v4[1];
          if ((_DWORD)v8)
          {
            v11 = 8 * v8;
            v10 = (uint64_t *)v4[1];
            while ((unint64_t)(*v10 + 1) <= 1)
            {
              ++v10;
              v11 -= 8;
              if (!v11)
              {
                v10 = v9;
                break;
              }
            }
          }
LABEL_13:
          v12 = (uint64_t *)(v7 + 8 * *(unsigned int *)(v7 - 4));
          goto LABEL_18;
        }
        v10 = (uint64_t *)(v7 + 8 * v8);
      }
      else
      {
        v10 = 0;
        v8 = 0;
      }
      v9 = (uint64_t *)(v7 + 8 * v8);
      if (v7)
        goto LABEL_13;
      v12 = 0;
LABEL_18:
      if (v12 != v10)
      {
        while (1)
        {
          v38 = *v10;
          v13 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 5, &v38);
          WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::take((uint64_t *)this + 5, v13, &v37);
          WebKit::FileSystemStorageHandleRegistry::unregisterHandle(*((uint64_t **)this + 2), v38);
          v3 = (WTF::StringImpl *)v37;
          if (!*(_BYTE *)(v37 + 64))
          {
            v37 = 0;
LABEL_40:
            std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)&v37, v3);
            goto LABEL_41;
          }
          v36[0] = *(_QWORD *)(v37 + 48);
          v36[1] = 1;
          IPC::Connection::connection(*v4, &v39);
          v14 = (uint64_t)v39;
          if (v39)
          {
            v15 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v15 = 1704;
            *(_QWORD *)(v15 + 8) = 0;
            *(_QWORD *)(v15 + 528) = v15 + 16;
            *(_QWORD *)(v15 + 536) = v15 + 16;
            *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v15 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
            v40 = (IPC::Encoder *)v15;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v15, v36);
            IPC::Connection::sendMessageImpl(v14, (uint64_t *)&v40, 0, 0);
            v17 = v40;
            v40 = 0;
            if (v17)
            {
              IPC::Encoder::~Encoder(v17, v16);
              WTF::fastFree(v18, v19);
            }
            v20 = v39;
            v39 = 0;
            if (v20)
              break;
          }
LABEL_39:
          v3 = (WTF::StringImpl *)v37;
          v37 = 0;
          if (v3)
            goto LABEL_40;
LABEL_41:
          v30 = v10 + 1;
          v10 = v9;
          if (v30 != v9)
          {
            v10 = v30;
            while ((unint64_t)(*v10 + 1) <= 1)
            {
              if (++v10 == v9)
              {
                v10 = v9;
                break;
              }
            }
          }
          if (v10 == v12)
            goto LABEL_49;
        }
        v21 = *v20;
        if (__ldaxr(*v20))
        {
          __clrex();
          goto LABEL_28;
        }
        if (__stxr(1u, v21))
LABEL_28:
          MEMORY[0x19AEABB3C](v21);
        v23 = *((_QWORD *)v21 + 1);
        v24 = v23 - 1;
        *((_QWORD *)v21 + 1) = v23 - 1;
        if (v23 == 1)
        {
          v31 = *((_QWORD *)v21 + 2);
          v26 = *((_QWORD *)v21 + 3);
          *((_QWORD *)v21 + 3) = 0;
          v25 = v31 == 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
        }
        v27 = __ldxr(v21);
        if (v27 == 1)
        {
          if (!__stlxr(0, v21))
          {
            if (v24)
              goto LABEL_39;
LABEL_37:
            v28 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v28 = off_1E34ACA48;
            *(_QWORD *)(v28 + 8) = v21;
            *(_QWORD *)(v28 + 16) = v26;
            *(_BYTE *)(v28 + 24) = v25;
            v40 = (IPC::Encoder *)v28;
            WTF::ensureOnMainRunLoop();
            v29 = v40;
            v40 = 0;
            if (v29)
              (*(void (**)(IPC::Encoder *))(*(_QWORD *)v29 + 8))(v29);
            goto LABEL_39;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v21);
        if (v24)
          goto LABEL_39;
        goto LABEL_37;
      }
LABEL_49:
      for (v4 += 2; v4 != v35; v4 += 2)
      {
        if ((unint64_t)(*v4 + 1) > 1)
          goto LABEL_54;
      }
      v4 = v35;
LABEL_54:
      if (v4 == v34)
      {
        v2 = v33;
        v5 = *v33;
        break;
      }
    }
  }
  if (v5)
  {
    *v2 = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, v3);
  }
  result = (WTF::StringImpl **)*((_QWORD *)this + 6);
  if (result)
  {
    *((_QWORD *)this + 6) = 0;
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v3);
  }
  return result;
}

BOOL WebKit::FileSystemStorageManager::isActive(WebKit::FileSystemStorageManager *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 5);
  return v1 && *(_DWORD *)(v1 - 12) != 0;
}

uint64_t WebKit::FileSystemStorageManager::allocatedUnusedCapacity(WebKit::FileSystemStorageManager *this)
{
  const WTF::String *v2;
  const WTF::String *v3;
  const WTF::String *v4;
  const WTF::String *v5;
  uint64_t v6;
  const WTF::String *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;

  v2 = (const WTF::String *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 5);
  v4 = v2;
  v5 = v3;
  v6 = *((_QWORD *)this + 5);
  if (v6)
    v7 = (const WTF::String *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 == v2)
    return 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = WebKit::FileSystemStorageHandle::allocatedUnusedCapacity(*((WebKit::FileSystemStorageHandle **)v4 + 1), v3);
    if (__CFADD__(v8, v10))
      v9 = 1;
    if (!__CFADD__(v8, v10))
      v8 += v10;
    while (1)
    {
      v4 = (const WTF::String *)((char *)v4 + 16);
      if (v4 == v5)
        break;
      if ((unint64_t)(*(_QWORD *)v4 + 1) > 1)
        goto LABEL_15;
    }
    v4 = v5;
LABEL_15:
    ;
  }
  while (v4 != v7);
  if (v9)
    return 0;
  else
    return v8;
}

void WebKit::FileSystemStorageManager::createHandle(WTF::FileSystemImpl *this@<X3>, uint64_t a2@<X0>, const WTF::String *a3@<X1>, _BOOL8 a4@<X2>, uint64_t *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  int v14;
  const WTF::String *v15;
  char v16;
  uint64_t v17;
  _BOOL8 v18;
  BOOL v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  int v68;
  WTF::StringImpl *v69;
  unsigned int *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  WTF::StringImpl *v77;
  unsigned int *v78;
  _BYTE v79[24];
  uint64_t v80;

  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
    goto LABEL_28;
  v14 = WTF::FileSystemImpl::fileExists(this, a3);
  if ((a6 & 1) == 0 && (v14 & 1) == 0)
  {
    v16 = 2;
LABEL_29:
    *(_BYTE *)a7 = v16;
    *(_DWORD *)(a7 + 8) = 1;
    return;
  }
  if (v14)
  {
    v17 = WTF::FileSystemImpl::fileType(this, v15);
    if ((v17 & 0xFF00000000) == 0)
    {
LABEL_28:
      v16 = 7;
      goto LABEL_29;
    }
    v18 = (_DWORD)v17 != 0;
    if (a4 != 2)
    {
      v19 = v18 == a4;
      v18 = a4;
      if (!v19)
      {
        v16 = 6;
        goto LABEL_29;
      }
    }
  }
  else
  {
    v18 = a4;
  }
  WebKit::FileSystemStorageHandle::create(this, (unsigned int *)a2, (const WTF::String *)v18, a5, &v78);
  if (!v78)
    goto LABEL_28;
  v21 = *((_QWORD *)v78 + 1);
  v23 = (uint64_t *)(a2 + 32);
  v22 = *(_QWORD *)(a2 + 32);
  if (v22
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a2 + 32), 0), (v22 = *v23) != 0))
  {
    v24 = *(_DWORD *)(v22 - 8);
  }
  else
  {
    v24 = 0;
  }
  v25 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
  v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
  v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
  v28 = v24 & ((v27 >> 31) ^ v27);
  v29 = (uint64_t *)(v22 + 16 * v28);
  v30 = *v29;
  if (!*v29)
  {
LABEL_24:
    v33 = v29[1];
    *v29 = (uint64_t)a3;
    v29[1] = 0;
    if (v33)
      WTF::fastFree((WTF *)(v33 - 16), v20);
    v34 = *v23;
    if (*v23)
      v35 = *(_DWORD *)(v34 - 12) + 1;
    else
      v35 = 1;
    *(_DWORD *)(v34 - 12) = v35;
    v36 = *v23;
    if (*v23)
      v37 = *(_DWORD *)(v36 - 12);
    else
      v37 = 0;
    v38 = (*(_DWORD *)(v36 - 16) + v37);
    v39 = *(unsigned int *)(v36 - 4);
    if (v39 > 0x400)
    {
      if (v39 > 2 * v38)
        goto LABEL_38;
    }
    else if (3 * v39 > 4 * v38)
    {
      goto LABEL_38;
    }
    v29 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a2 + 32), v29);
    goto LABEL_38;
  }
  v31 = 0;
  v32 = 1;
  while ((const WTF::String *)v30 != a3)
  {
    if (v30 == -1)
      v31 = v29;
    v28 = (v28 + v32) & v24;
    v29 = (uint64_t *)(v22 + 16 * v28);
    v30 = *v29;
    ++v32;
    if (!*v29)
    {
      if (v31)
      {
        *v31 = 0;
        v31[1] = 0;
        --*(_DWORD *)(*v23 - 16);
        v29 = v31;
      }
      goto LABEL_24;
    }
  }
LABEL_38:
  v42 = v29[1];
  v41 = v29 + 1;
  v40 = v42;
  if (v42
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v41, 0), (v40 = *v41) != 0))
  {
    v43 = *(_DWORD *)(v40 - 8);
  }
  else
  {
    v43 = 0;
  }
  v44 = (v21 + ~(v21 << 32)) ^ ((unint64_t)(v21 + ~(v21 << 32)) >> 22);
  v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
  v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
  v47 = (v46 >> 31) ^ v46;
  v48 = v43 & v47;
  v49 = (uint64_t *)(v40 + 8 * (v43 & v47));
  v50 = *v49;
  if (!*v49)
  {
LABEL_49:
    *v49 = v21;
    v53 = *v41;
    if (*v41)
      v54 = *(_DWORD *)(v53 - 12) + 1;
    else
      v54 = 1;
    *(_DWORD *)(v53 - 12) = v54;
    v55 = *v41;
    if (*v41)
      v56 = *(_DWORD *)(v55 - 12);
    else
      v56 = 0;
    v57 = (*(_DWORD *)(v55 - 16) + v56);
    v58 = *(unsigned int *)(v55 - 4);
    if (v58 > 0x400)
    {
      if (v58 > 2 * v57)
        goto LABEL_58;
    }
    else if (3 * v58 > 4 * v57)
    {
      goto LABEL_58;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v41, v49);
    goto LABEL_58;
  }
  v51 = 0;
  v52 = 1;
  while (v50 != v21)
  {
    if (v50 == -1)
      v51 = v49;
    v48 = (v48 + v52) & v43;
    v49 = (uint64_t *)(v40 + 8 * v48);
    v50 = *v49;
    ++v52;
    if (!*v49)
    {
      if (v51)
      {
        *v51 = 0;
        --*(_DWORD *)(*v41 - 16);
        v49 = v51;
      }
      goto LABEL_49;
    }
  }
LABEL_58:
  v59 = *(uint64_t **)(a2 + 16);
  v80 = v21;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::FileSystemStorageHandle&>(v59, &v80, v78, (uint64_t)v79);
  v62 = *(_QWORD *)(a2 + 40);
  v61 = (uint64_t *)(a2 + 40);
  v60 = v62;
  if (v62
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v61, 0), (v60 = *v61) != 0))
  {
    v63 = *(_DWORD *)(v60 - 8);
  }
  else
  {
    v63 = 0;
  }
  v64 = v63 & v47;
  v65 = (uint64_t *)(v60 + 16 * (v63 & v47));
  v66 = *v65;
  if (*v65)
  {
    v67 = 0;
    v68 = 1;
    while (v66 != v21)
    {
      if (v66 == -1)
        v67 = v65;
      v64 = (v64 + v68) & v63;
      v65 = (uint64_t *)(v60 + 16 * v64);
      v66 = *v65;
      ++v68;
      if (!*v65)
      {
        if (v67)
        {
          *v67 = 0;
          v67[1] = 0;
          --*(_DWORD *)(*v61 - 16);
          v65 = v67;
        }
        goto LABEL_69;
      }
    }
    goto LABEL_80;
  }
LABEL_69:
  *v65 = v21;
  v69 = (WTF::StringImpl *)v65[1];
  v70 = v78;
  v78 = 0;
  v65[1] = (uint64_t)v70;
  if (v69)
    std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)(v65 + 1), v69);
  v71 = *v61;
  if (*v61)
    v72 = *(_DWORD *)(v71 - 12) + 1;
  else
    v72 = 1;
  *(_DWORD *)(v71 - 12) = v72;
  v73 = *v61;
  if (*v61)
    v74 = *(_DWORD *)(v73 - 12);
  else
    v74 = 0;
  v75 = (*(_DWORD *)(v73 - 16) + v74);
  v76 = *(unsigned int *)(v73 - 4);
  if (v76 <= 0x400)
  {
    if (3 * v76 > 4 * v75)
      goto LABEL_80;
    goto LABEL_79;
  }
  if (v76 <= 2 * v75)
LABEL_79:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v61, v65);
LABEL_80:
  *(_QWORD *)a7 = v21;
  *(_DWORD *)(a7 + 8) = 0;
  v77 = (WTF::StringImpl *)v78;
  v78 = 0;
  if (v77)
    std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)&v78, v77);
}

uint64_t WebKit::FileSystemStorageManager::getType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = a2;
  v3 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 40), &v6);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    v4 += 16 * *(unsigned int *)(v4 - 4);
  if (v4 == v3)
    return 2;
  else
    return *(unsigned __int8 *)(*(_QWORD *)(v3 + 8) + 24);
}

void WebKit::FileSystemStorageManager::closeHandle(WebKit::FileSystemStorageManager *this, WebKit::FileSystemStorageHandle *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;

  v16 = *((_QWORD *)a2 + 1);
  v3 = (uint64_t *)((char *)this + 40);
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 5, &v16);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::take(v3, v4, &v15);
  v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 4);
  v6 = v5;
  v8 = v7;
  v9 = *((_QWORD *)this + 4);
  if (v9)
    v10 = (_QWORD *)(v9 + 16 * *(unsigned int *)(v9 - 4));
  else
    v10 = 0;
  if (v10 != v5)
  {
    while (1)
    {
      v11 = (_QWORD *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(v6 + 1, &v16);
      v12 = v6[1];
      if (v12)
        break;
      if (v11)
      {
        v13 = 0;
        goto LABEL_16;
      }
LABEL_9:
      while (1)
      {
        v6 += 2;
        if (v6 == v8)
          break;
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_13;
      }
      v6 = v8;
LABEL_13:
      if (v6 == v10)
        goto LABEL_18;
    }
    v13 = (_QWORD *)(v12 + 8 * *(unsigned int *)(v12 - 4));
    if (v13 == v11)
      goto LABEL_9;
LABEL_16:
    if (v13 != v11)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v6 + 1, v11);
  }
LABEL_18:
  WebKit::FileSystemStorageHandleRegistry::unregisterHandle(*((uint64_t **)this + 2), v16);
  v14 = v15;
  v15 = 0;
  if (v14)
    std::default_delete<WebKit::FileSystemStorageHandle>::operator()[abi:sn180100]((uint64_t)&v15, v14);
}

uint64_t WebKit::FileSystemStorageManager::connectionClosed(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  double v67;
  double v68;
  double v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v78;

  v3 = (uint64_t *)(result + 32);
  v2 = *(_QWORD *)(result + 32);
  if (v2)
  {
    v4 = result;
    v5 = *(_DWORD *)(v2 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF::StringImpl **)(v2 + 16 * v9);
    if (v10 != a2)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF::StringImpl **)(v2 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_8;
      }
      v9 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v9 != *(_DWORD *)(v2 - 4))
    {
      v12 = (_QWORD *)(v2 + 16 * v9);
      v14 = v12 + 1;
      v13 = v12[1];
      if (!v13 || (v15 = *(unsigned int *)(v13 - 12), !(_DWORD)v15))
      {
        v22 = 0;
        v23 = 1;
        goto LABEL_62;
      }
      v16 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
      v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
      v18 = (v17 | HIWORD(v17)) + 1;
      if (v18 > 0x400)
      {
        if (v18 > 2 * v15)
          goto LABEL_17;
      }
      else if (3 * v18 > 4 * v15)
      {
LABEL_14:
        v19 = (double)v15;
        v20 = (double)v18;
        v21 = 0.604166667;
        goto LABEL_18;
      }
      LODWORD(v18) = 2 * v18;
      if (v18 <= 0x400)
        goto LABEL_14;
LABEL_17:
      v19 = (double)v15;
      v20 = (double)v18;
      v21 = 0.416666667;
LABEL_18:
      if (v20 * v21 <= v19)
        LODWORD(v18) = 2 * v18;
      if (v18 <= 8)
        v24 = 8;
      else
        v24 = v18;
      result = WTF::fastZeroedMalloc((WTF *)(8 * v24 + 16));
      v25 = v24 - 1;
      *(_DWORD *)(result + 8) = v24 - 1;
      *(_DWORD *)(result + 12) = v24;
      *(_DWORD *)result = 0;
      *(_DWORD *)(result + 4) = v15;
      v26 = (_QWORD *)*v14;
      if (*v14)
      {
        v27 = *((unsigned int *)v26 - 1);
        v28 = &v26[v27];
        if (*((_DWORD *)v26 - 3))
        {
          v29 = (_QWORD *)*v14;
          if ((_DWORD)v27)
          {
            v30 = 8 * v27;
            v29 = (_QWORD *)*v14;
            while ((unint64_t)(*v29 + 1) <= 1)
            {
              ++v29;
              v30 -= 8;
              if (!v30)
              {
                v29 = v28;
                break;
              }
            }
          }
LABEL_33:
          v22 = result + 16;
          if (v26)
            v26 += *((unsigned int *)v26 - 1);
          while (v29 != v26)
          {
            v31 = *v29 + ~(*v29 << 32);
            v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
            v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
            v34 = v25 & (((v33 + ~(v33 << 27)) >> 31) ^ (v33 + ~((_DWORD)v33 << 27)));
            v35 = 1;
            do
            {
              v36 = v34;
              v37 = *(_QWORD *)(v22 + 8 * v34);
              v34 = (v34 + v35++) & v25;
            }
            while (v37);
            *(_QWORD *)(v22 + 8 * v36) = *v29;
            v38 = v29 + 1;
            v29 = v28;
            if (v38 != v28)
            {
              v29 = v38;
              while ((unint64_t)(*v29 + 1) <= 1)
              {
                if (++v29 == v28)
                {
                  v29 = v28;
                  break;
                }
              }
            }
          }
          v39 = 8 * v24;
          v40 = (uint64_t *)(result + 16);
          v41 = (uint64_t *)(v22 + 8 * v24);
          while ((unint64_t)(*v40 + 1) <= 1)
          {
            ++v40;
            v39 -= 8;
            if (!v39)
              goto LABEL_61;
          }
          if (!v39)
            goto LABEL_61;
          v42 = (_QWORD *)(v4 + 40);
LABEL_50:
          v78 = *v40;
          v43 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v4 + 40), &v78);
          if (*v42)
          {
            v44 = *v42 + 16 * *(unsigned int *)(*v42 - 4);
            if ((_QWORD *)v44 == v43)
              goto LABEL_57;
          }
          else
          {
            if (!v43)
              goto LABEL_57;
            v44 = 0;
          }
          if ((_QWORD *)v44 != v43)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::FileSystemStorageHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::FileSystemStorageHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)(v4 + 40), v43);
LABEL_57:
          result = (uint64_t)WebKit::FileSystemStorageHandleRegistry::unregisterHandle(*(uint64_t **)(v4 + 16), v78);
          while (++v40 != v41)
          {
            if ((unint64_t)(*v40 + 1) > 1)
            {
              if (v40 != v41)
                goto LABEL_50;
              break;
            }
          }
LABEL_61:
          v23 = 0;
LABEL_62:
          v47 = *(_QWORD *)(v4 + 48);
          v45 = (uint64_t *)(v4 + 48);
          v46 = v47;
          if (!v47)
            goto LABEL_97;
          v48 = *(_DWORD *)(v46 - 4);
          if (!v48)
            goto LABEL_97;
          v49 = 0;
          do
          {
            result = v46 + 16 * --v48;
            if ((unint64_t)(*(_QWORD *)result + 1) >= 2 && (v23 & 1) == 0)
            {
              v50 = *(_QWORD *)(v46 + 16 * v48 + 8);
              v51 = *(_DWORD *)(v22 - 8);
              v52 = (v50 + ~(v50 << 32)) ^ ((unint64_t)(v50 + ~(v50 << 32)) >> 22);
              v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
              v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
              v55 = v51 & ((v54 >> 31) ^ v54);
              v56 = *(_QWORD *)(v22 + 8 * v55);
              if (v56 == v50)
              {
LABEL_73:
                result = (uint64_t)WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)result, a2);
                ++v49;
              }
              else
              {
                v57 = 1;
                while (v56)
                {
                  v55 = (v55 + v57) & v51;
                  v56 = *(_QWORD *)(v22 + 8 * v55);
                  ++v57;
                  if (v56 == v50)
                    goto LABEL_73;
                }
              }
            }
          }
          while (v48);
          v58 = *v45;
          if (v49)
          {
            *(_DWORD *)(v58 - 16) += v49;
            v59 = *v45;
            if (*v45)
              v60 = *(_DWORD *)(v59 - 12);
            else
              v60 = 0;
            *(_DWORD *)(v59 - 12) = v60 - v49;
            v58 = *v45;
          }
          if (!v58)
            goto LABEL_97;
          v61 = *(_DWORD *)(v58 - 4);
          v62 = *(unsigned int *)(v58 - 12);
          if (v61 < 9 || 6 * (int)v62 >= v61)
            goto LABEL_97;
          v64 = (v62 - 1) | ((v62 - 1) >> 1) | ((((_DWORD)v62 - 1) | ((v62 - 1) >> 1)) >> 2);
          v65 = v64 | (v64 >> 4) | ((v64 | (v64 >> 4)) >> 8);
          v66 = (v65 | HIWORD(v65)) + 1;
          if (v66 > 0x400)
          {
            if (v66 > 2 * v62)
              goto LABEL_90;
          }
          else if (3 * v66 > 4 * v62)
          {
LABEL_88:
            v67 = (double)v62;
            v68 = (double)v66;
            v69 = 0.604166667;
LABEL_91:
            if (v68 * v69 <= v67)
              LODWORD(v66) = 2 * v66;
            if (v66 <= 8)
              v70 = 8;
            else
              v70 = v66;
            result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v45, v70, 0);
LABEL_97:
            v71 = *v3;
            if (!*v3 || (v71 += 16 * *(unsigned int *)(v71 - 4), (_QWORD *)v71 != v12))
            {
              if ((_QWORD *)v71 != v12)
              {
                *v12 = -1;
                if (*v14)
                  result = WTF::fastFree((WTF *)(*v14 - 16), a2);
                ++*(_DWORD *)(*v3 - 16);
                v72 = *v3;
                if (*v3)
                  v73 = *(_DWORD *)(v72 - 12) - 1;
                else
                  v73 = -1;
                *(_DWORD *)(v72 - 12) = v73;
                v74 = *v3;
                if (*v3)
                {
                  v75 = 6 * *(_DWORD *)(v74 - 12);
                  v76 = *(_DWORD *)(v74 - 4);
                  if (v75 < v76 && v76 >= 9)
                    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerObjectIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, v76 >> 1, 0);
                }
              }
            }
            if ((v23 & 1) == 0)
              return WTF::fastFree((WTF *)(v22 - 16), a2);
            return result;
          }
          LODWORD(v66) = 2 * v66;
          if (v66 <= 0x400)
            goto LABEL_88;
LABEL_90:
          v67 = (double)v62;
          v68 = (double)v66;
          v69 = 0.416666667;
          goto LABEL_91;
        }
        v29 = &v26[v27];
      }
      else
      {
        v29 = 0;
        v27 = 0;
      }
      v28 = &v26[v27];
      goto LABEL_33;
    }
  }
  return result;
}

uint64_t WebKit::FileSystemStorageManager::acquireLockForFile(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  unsigned int v5;
  uint64_t v7;
  const WTF::StringImpl *v8;

  v8 = a3;
  v4 = (uint64_t *)(a1 + 48);
  v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 48), a2, a3);
  if ((v5 & 1) == 0)
    WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>(v4, a2, (const WTF::StringImpl *)&v8, (uint64_t)&v7);
  return v5 ^ 1;
}

uint64_t WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF **v12;
  int i;
  unsigned int v14;
  WTF **v15;
  WTF *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    result = (uint64_t)WTF::String::operator=(v15, (WTF::StringImpl *)a2);
    v15[1] = *(WTF **)a3;
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_26:
        result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = (WTF **)result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_26;
    }
    v27 = v22 + 16 * v25;
    v26 = 1;
    goto LABEL_33;
  }
  result = WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  v26 = 0;
  v27 = v20 + 16 * v21;
LABEL_33:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

BOOL WebKit::FileSystemStorageManager::releaseLockForFile(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v5;
  const WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl **v8;
  uint64_t v9;

  v5 = (uint64_t *)(a1 + 48);
  v7 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 48), a2, a3);
  if (v7 == a3)
  {
    v8 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v5, a2, v6);
    if (*v5)
    {
      v9 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
      if ((WTF::StringImpl **)v9 == v8)
        return v7 == a3;
    }
    else
    {
      if (!v8)
        return v7 == a3;
      v9 = 0;
    }
    if ((WTF::StringImpl **)v9 != v8)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v5, v8);
  }
  return v7 == a3;
}

void WebKit::IDBStorageConnectionToClient::~IDBStorageConnectionToClient(WebKit::IDBStorageConnectionToClient *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)(*((_QWORD *)this + 3) + 8) = 0;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(v3, a2);
}

{
  WTF *v3;

  *(_QWORD *)(*((_QWORD *)this + 3) + 8) = 0;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(v3, a2);
  WTF::fastFree(this, a2);
}

void WebKit::IDBStorageConnectionToClient::didDeleteDatabase(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  IPC::Encoder *v21;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v20);
  v3 = (uint64_t)v20;
  if (v20)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1733;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      v10 = *v9;
      if (__ldaxr(*v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v10);
LABEL_9:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v19 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v19 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v13)
            return;
LABEL_17:
          v17 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v17 = off_1E34ACA48;
          *(_QWORD *)(v17 + 8) = v10;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v14;
          v21 = (IPC::Encoder *)v17;
          WTF::ensureOnMainRunLoop();
          v18 = v21;
          v21 = 0;
          if (v18)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didOpenDatabase(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  IPC::Encoder *v21;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v20);
  v3 = (uint64_t)v20;
  if (v20)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1743;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      v10 = *v9;
      if (__ldaxr(*v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v10);
LABEL_9:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v19 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v19 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v13)
            return;
LABEL_17:
          v17 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v17 = off_1E34ACA48;
          *(_QWORD *)(v17 + 8) = v10;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v14;
          v21 = (IPC::Encoder *)v17;
          WTF::ensureOnMainRunLoop();
          v18 = v21;
          v21 = 0;
          if (v18)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didStartTransaction(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  IPC::Encoder *v22;
  uint64_t v23;
  unsigned __int8 **v24;
  IPC::Encoder *v25;
  __int16 v26;

  IPC::Connection::connection(*(_QWORD *)(a1 + 8), &v24);
  v5 = (uint64_t)v24;
  if (v24)
  {
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 1747;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v25 = (IPC::Encoder *)v6;
    v7 = *a2;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
    v8 = a2[1];
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v8;
    v26 = *(_WORD *)a3;
    IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>((IPC::Encoder *)v6, (char *)&v26);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a3 + 1);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v25, 0, 0);
    v10 = v25;
    v25 = 0;
    if (v10)
    {
      IPC::Encoder::~Encoder(v10, v9);
      WTF::fastFree(v11, v12);
    }
    v13 = v24;
    v24 = 0;
    if (v13)
    {
      v14 = *v13;
      if (__ldaxr(*v13))
      {
        __clrex();
      }
      else if (!__stxr(1u, v14))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v14);
LABEL_9:
      v16 = *((_QWORD *)v14 + 1);
      v17 = v16 - 1;
      *((_QWORD *)v14 + 1) = v16 - 1;
      if (v16 == 1)
      {
        v23 = *((_QWORD *)v14 + 2);
        v19 = *((_QWORD *)v14 + 3);
        *((_QWORD *)v14 + 3) = 0;
        v18 = v23 == 0;
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      v20 = __ldxr(v14);
      if (v20 == 1)
      {
        if (!__stlxr(0, v14))
        {
          if (v17)
            return;
LABEL_17:
          v21 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v21 = off_1E34ACA48;
          *(_QWORD *)(v21 + 8) = v14;
          *(_QWORD *)(v21 + 16) = v19;
          *(_BYTE *)(v21 + 24) = v18;
          v25 = (IPC::Encoder *)v21;
          WTF::ensureOnMainRunLoop();
          v22 = v25;
          v25 = 0;
          if (v22)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v22 + 8))(v22);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
      if (v17)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didAbortTransaction(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  IPC::Encoder *v22;
  uint64_t v23;
  unsigned __int8 **v24;
  IPC::Encoder *v25;
  __int16 v26;

  IPC::Connection::connection(*(_QWORD *)(a1 + 8), &v24);
  v5 = (uint64_t)v24;
  if (v24)
  {
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 1727;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v25 = (IPC::Encoder *)v6;
    v7 = *a2;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
    v8 = a2[1];
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v8;
    v26 = *(_WORD *)a3;
    IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>((IPC::Encoder *)v6, (char *)&v26);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a3 + 1);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v25, 0, 0);
    v10 = v25;
    v25 = 0;
    if (v10)
    {
      IPC::Encoder::~Encoder(v10, v9);
      WTF::fastFree(v11, v12);
    }
    v13 = v24;
    v24 = 0;
    if (v13)
    {
      v14 = *v13;
      if (__ldaxr(*v13))
      {
        __clrex();
      }
      else if (!__stxr(1u, v14))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v14);
LABEL_9:
      v16 = *((_QWORD *)v14 + 1);
      v17 = v16 - 1;
      *((_QWORD *)v14 + 1) = v16 - 1;
      if (v16 == 1)
      {
        v23 = *((_QWORD *)v14 + 2);
        v19 = *((_QWORD *)v14 + 3);
        *((_QWORD *)v14 + 3) = 0;
        v18 = v23 == 0;
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      v20 = __ldxr(v14);
      if (v20 == 1)
      {
        if (!__stlxr(0, v14))
        {
          if (v17)
            return;
LABEL_17:
          v21 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v21 = off_1E34ACA48;
          *(_QWORD *)(v21 + 8) = v14;
          *(_QWORD *)(v21 + 16) = v19;
          *(_BYTE *)(v21 + 24) = v18;
          v25 = (IPC::Encoder *)v21;
          WTF::ensureOnMainRunLoop();
          v22 = v25;
          v25 = 0;
          if (v22)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v22 + 8))(v22);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
      if (v17)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didCommitTransaction(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  IPC::Encoder *v22;
  uint64_t v23;
  unsigned __int8 **v24;
  IPC::Encoder *v25;
  __int16 v26;

  IPC::Connection::connection(*(_QWORD *)(a1 + 8), &v24);
  v5 = (uint64_t)v24;
  if (v24)
  {
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 1730;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v25 = (IPC::Encoder *)v6;
    v7 = *a2;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
    v8 = a2[1];
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v8;
    v26 = *(_WORD *)a3;
    IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>((IPC::Encoder *)v6, (char *)&v26);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a3 + 1);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v25, 0, 0);
    v10 = v25;
    v25 = 0;
    if (v10)
    {
      IPC::Encoder::~Encoder(v10, v9);
      WTF::fastFree(v11, v12);
    }
    v13 = v24;
    v24 = 0;
    if (v13)
    {
      v14 = *v13;
      if (__ldaxr(*v13))
      {
        __clrex();
      }
      else if (!__stxr(1u, v14))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v14);
LABEL_9:
      v16 = *((_QWORD *)v14 + 1);
      v17 = v16 - 1;
      *((_QWORD *)v14 + 1) = v16 - 1;
      if (v16 == 1)
      {
        v23 = *((_QWORD *)v14 + 2);
        v19 = *((_QWORD *)v14 + 3);
        *((_QWORD *)v14 + 3) = 0;
        v18 = v23 == 0;
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      v20 = __ldxr(v14);
      if (v20 == 1)
      {
        if (!__stlxr(0, v14))
        {
          if (v17)
            return;
LABEL_17:
          v21 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v21 = off_1E34ACA48;
          *(_QWORD *)(v21 + 8) = v14;
          *(_QWORD *)(v21 + 16) = v19;
          *(_BYTE *)(v21 + 24) = v18;
          v25 = (IPC::Encoder *)v21;
          WTF::ensureOnMainRunLoop();
          v22 = v25;
          v25 = 0;
          if (v22)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v22 + 8))(v22);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
      if (v17)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didCreateObjectStore(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  IPC::Encoder *v21;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v20);
  v3 = (uint64_t)v20;
  if (v20)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1732;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      v10 = *v9;
      if (__ldaxr(*v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v10);
LABEL_9:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v19 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v19 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v13)
            return;
LABEL_17:
          v17 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v17 = off_1E34ACA48;
          *(_QWORD *)(v17 + 8) = v10;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v14;
          v21 = (IPC::Encoder *)v17;
          WTF::ensureOnMainRunLoop();
          v18 = v21;
          v21 = 0;
          if (v18)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didDeleteObjectStore(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  IPC::Encoder *v21;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v20);
  v3 = (uint64_t)v20;
  if (v20)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1735;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      v10 = *v9;
      if (__ldaxr(*v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v10);
LABEL_9:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v19 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v19 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v13)
            return;
LABEL_17:
          v17 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v17 = off_1E34ACA48;
          *(_QWORD *)(v17 + 8) = v10;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v14;
          v21 = (IPC::Encoder *)v17;
          WTF::ensureOnMainRunLoop();
          v18 = v21;
          v21 = 0;
          if (v18)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didRenameObjectStore(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  IPC::Encoder *v21;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v20);
  v3 = (uint64_t)v20;
  if (v20)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1746;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      v10 = *v9;
      if (__ldaxr(*v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v10);
LABEL_9:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v19 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v19 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v13)
            return;
LABEL_17:
          v17 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v17 = off_1E34ACA48;
          *(_QWORD *)(v17 + 8) = v10;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v14;
          v21 = (IPC::Encoder *)v17;
          WTF::ensureOnMainRunLoop();
          v18 = v21;
          v21 = 0;
          if (v18)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didClearObjectStore(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  IPC::Encoder *v21;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v20);
  v3 = (uint64_t)v20;
  if (v20)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1728;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      v10 = *v9;
      if (__ldaxr(*v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v10);
LABEL_9:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v19 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v19 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v13)
            return;
LABEL_17:
          v17 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v17 = off_1E34ACA48;
          *(_QWORD *)(v17 + 8) = v10;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v14;
          v21 = (IPC::Encoder *)v17;
          WTF::ensureOnMainRunLoop();
          v18 = v21;
          v21 = 0;
          if (v18)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didCreateIndex(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  IPC::Encoder *v21;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v20);
  v3 = (uint64_t)v20;
  if (v20)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1731;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      v10 = *v9;
      if (__ldaxr(*v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v10);
LABEL_9:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v19 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v19 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v13)
            return;
LABEL_17:
          v17 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v17 = off_1E34ACA48;
          *(_QWORD *)(v17 + 8) = v10;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v14;
          v21 = (IPC::Encoder *)v17;
          WTF::ensureOnMainRunLoop();
          v18 = v21;
          v21 = 0;
          if (v18)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didDeleteIndex(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  IPC::Encoder *v21;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v20);
  v3 = (uint64_t)v20;
  if (v20)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1734;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      v10 = *v9;
      if (__ldaxr(*v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v10);
LABEL_9:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v19 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v19 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v13)
            return;
LABEL_17:
          v17 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v17 = off_1E34ACA48;
          *(_QWORD *)(v17 + 8) = v10;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v14;
          v21 = (IPC::Encoder *)v17;
          WTF::ensureOnMainRunLoop();
          v18 = v21;
          v21 = 0;
          if (v18)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didRenameIndex(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  IPC::Encoder *v21;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v20);
  v3 = (uint64_t)v20;
  if (v20)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1745;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      v10 = *v9;
      if (__ldaxr(*v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v10);
LABEL_9:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v19 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v19 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v13)
            return;
LABEL_17:
          v17 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v17 = off_1E34ACA48;
          *(_QWORD *)(v17 + 8) = v10;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v14;
          v21 = (IPC::Encoder *)v17;
          WTF::ensureOnMainRunLoop();
          v18 = v21;
          v21 = 0;
          if (v18)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didPutOrAdd(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  IPC::Encoder *v21;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v20);
  v3 = (uint64_t)v20;
  if (v20)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1744;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      v10 = *v9;
      if (__ldaxr(*v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v10);
LABEL_9:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v19 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v19 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v13)
            return;
LABEL_17:
          v17 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v17 = off_1E34ACA48;
          *(_QWORD *)(v17 + 8) = v10;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v14;
          v21 = (IPC::Encoder *)v17;
          WTF::ensureOnMainRunLoop();
          v18 = v21;
          v21 = 0;
          if (v18)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didGetRecord(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBGetAllResult *AllResult;
  uint64_t v5;
  void *v6;
  uint64_t Result;
  uint64_t v8;
  void *v9;
  void *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE v13[104];
  uint64_t v14;
  uint64_t v15;

  if (!*(_BYTE *)a2)
    goto LABEL_6;
  if (*(_BYTE *)a2 != 9)
  {
LABEL_7:
    Result = WebCore::IDBResultData::getResult(a2);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v12, Result + 24);
    goto LABEL_8;
  }
  if (!*(_BYTE *)WebCore::IDBResultData::getAllResult(a2))
  {
LABEL_6:
    v5 = *((_QWORD *)this + 1);
    MEMORY[0x19AEADBC4](v13, a2);
    v14 = 0;
    v15 = 0;
    v12 = v13;
    IPC::Connection::send<Messages::WebIDBConnectionToServer::DidGetRecord>(v5, (uint64_t *)&v12);
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v6);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v13);
    return;
  }
  if (*(_BYTE *)a2 != 9)
    goto LABEL_7;
  AllResult = (WebCore::IDBGetAllResult *)WebCore::IDBResultData::getAllResult(a2);
  WebCore::IDBGetAllResult::allBlobFilePaths(AllResult);
LABEL_8:
  v8 = *((_QWORD *)this + 1);
  MEMORY[0x19AEADBC4](v13, a2);
  v14 = 0;
  v15 = 0;
  v11 = v13;
  IPC::Connection::send<Messages::WebIDBConnectionToServer::DidGetRecord>(v8, (uint64_t *)&v11);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v9);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v13);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v10);
}

void WebKit::IDBStorageConnectionToClient::didGetAllRecords(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBGetAllResult *AllResult;
  uint64_t v5;
  void *v6;
  uint64_t Result;
  uint64_t v8;
  void *v9;
  void *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE v13[104];
  uint64_t v14;
  uint64_t v15;

  if (!*(_BYTE *)a2)
    goto LABEL_6;
  if (*(_BYTE *)a2 != 9)
  {
LABEL_7:
    Result = WebCore::IDBResultData::getResult(a2);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v12, Result + 24);
    goto LABEL_8;
  }
  if (!*(_BYTE *)WebCore::IDBResultData::getAllResult(a2))
  {
LABEL_6:
    v5 = *((_QWORD *)this + 1);
    MEMORY[0x19AEADBC4](v13, a2);
    v14 = 0;
    v15 = 0;
    v12 = v13;
    IPC::Connection::send<Messages::WebIDBConnectionToServer::DidGetAllRecords>(v5, (uint64_t *)&v12);
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v6);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v13);
    return;
  }
  if (*(_BYTE *)a2 != 9)
    goto LABEL_7;
  AllResult = (WebCore::IDBGetAllResult *)WebCore::IDBResultData::getAllResult(a2);
  WebCore::IDBGetAllResult::allBlobFilePaths(AllResult);
LABEL_8:
  v8 = *((_QWORD *)this + 1);
  MEMORY[0x19AEADBC4](v13, a2);
  v14 = 0;
  v15 = 0;
  v11 = v13;
  IPC::Connection::send<Messages::WebIDBConnectionToServer::DidGetAllRecords>(v8, (uint64_t *)&v11);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v9);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v13);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v10);
}

void WebKit::IDBStorageConnectionToClient::didGetCount(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  IPC::Encoder *v21;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v20);
  v3 = (uint64_t)v20;
  if (v20)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1739;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      v10 = *v9;
      if (__ldaxr(*v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v10);
LABEL_9:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v19 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v19 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v13)
            return;
LABEL_17:
          v17 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v17 = off_1E34ACA48;
          *(_QWORD *)(v17 + 8) = v10;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v14;
          v21 = (IPC::Encoder *)v17;
          WTF::ensureOnMainRunLoop();
          v18 = v21;
          v21 = 0;
          if (v18)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didDeleteRecord(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  IPC::Encoder *v21;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v20);
  v3 = (uint64_t)v20;
  if (v20)
  {
    v4 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v4 = 1736;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 528) = v4 + 16;
    *(_QWORD *)(v4 + 536) = v4 + 16;
    *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v4 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
    v21 = (IPC::Encoder *)v4;
    IPC::ArgumentCoder<WebCore::IDBResultData,void>::encode((IPC::Encoder *)v4, (uint64_t)a2);
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v21, 0, 0);
    v6 = v21;
    v21 = 0;
    if (v6)
    {
      IPC::Encoder::~Encoder(v6, v5);
      WTF::fastFree(v7, v8);
    }
    v9 = v20;
    v20 = 0;
    if (v9)
    {
      v10 = *v9;
      if (__ldaxr(*v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, v10))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v10);
LABEL_9:
      v12 = *((_QWORD *)v10 + 1);
      v13 = v12 - 1;
      *((_QWORD *)v10 + 1) = v12 - 1;
      if (v12 == 1)
      {
        v19 = *((_QWORD *)v10 + 2);
        v15 = *((_QWORD *)v10 + 3);
        *((_QWORD *)v10 + 3) = 0;
        v14 = v19 == 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v16 = __ldxr(v10);
      if (v16 == 1)
      {
        if (!__stlxr(0, v10))
        {
          if (v13)
            return;
LABEL_17:
          v17 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v17 = off_1E34ACA48;
          *(_QWORD *)(v17 + 8) = v10;
          *(_QWORD *)(v17 + 16) = v15;
          *(_BYTE *)(v17 + 24) = v14;
          v21 = (IPC::Encoder *)v17;
          WTF::ensureOnMainRunLoop();
          v18 = v21;
          v21 = 0;
          if (v18)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
      if (v13)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didOpenCursor(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBGetAllResult *AllResult;
  uint64_t v5;
  void *v6;
  uint64_t Result;
  uint64_t v8;
  void *v9;
  void *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE v13[104];
  uint64_t v14;
  uint64_t v15;

  if (!*(_BYTE *)a2)
    goto LABEL_6;
  if (*(_BYTE *)a2 != 9)
  {
LABEL_7:
    Result = WebCore::IDBResultData::getResult(a2);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v12, Result + 24);
    goto LABEL_8;
  }
  if (!*(_BYTE *)WebCore::IDBResultData::getAllResult(a2))
  {
LABEL_6:
    v5 = *((_QWORD *)this + 1);
    MEMORY[0x19AEADBC4](v13, a2);
    v14 = 0;
    v15 = 0;
    v12 = v13;
    IPC::Connection::send<Messages::WebIDBConnectionToServer::DidOpenCursor>(v5, (uint64_t *)&v12);
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v6);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v13);
    return;
  }
  if (*(_BYTE *)a2 != 9)
    goto LABEL_7;
  AllResult = (WebCore::IDBGetAllResult *)WebCore::IDBResultData::getAllResult(a2);
  WebCore::IDBGetAllResult::allBlobFilePaths(AllResult);
LABEL_8:
  v8 = *((_QWORD *)this + 1);
  MEMORY[0x19AEADBC4](v13, a2);
  v14 = 0;
  v15 = 0;
  v11 = v13;
  IPC::Connection::send<Messages::WebIDBConnectionToServer::DidOpenCursor>(v8, (uint64_t *)&v11);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v9);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v13);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v10);
}

void WebKit::IDBStorageConnectionToClient::didIterateCursor(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResultData *a2)
{
  WebCore::IDBGetAllResult *AllResult;
  uint64_t v5;
  void *v6;
  uint64_t Result;
  uint64_t v8;
  void *v9;
  void *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE v13[104];
  uint64_t v14;
  uint64_t v15;

  if (!*(_BYTE *)a2)
    goto LABEL_6;
  if (*(_BYTE *)a2 != 9)
  {
LABEL_7:
    Result = WebCore::IDBResultData::getResult(a2);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v12, Result + 24);
    goto LABEL_8;
  }
  if (!*(_BYTE *)WebCore::IDBResultData::getAllResult(a2))
  {
LABEL_6:
    v5 = *((_QWORD *)this + 1);
    MEMORY[0x19AEADBC4](v13, a2);
    v14 = 0;
    v15 = 0;
    v12 = v13;
    IPC::Connection::send<Messages::WebIDBConnectionToServer::DidIterateCursor>(v5, (uint64_t *)&v12);
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v6);
    WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v13);
    return;
  }
  if (*(_BYTE *)a2 != 9)
    goto LABEL_7;
  AllResult = (WebCore::IDBGetAllResult *)WebCore::IDBResultData::getAllResult(a2);
  WebCore::IDBGetAllResult::allBlobFilePaths(AllResult);
LABEL_8:
  v8 = *((_QWORD *)this + 1);
  MEMORY[0x19AEADBC4](v13, a2);
  v14 = 0;
  v15 = 0;
  v11 = v13;
  IPC::Connection::send<Messages::WebIDBConnectionToServer::DidIterateCursor>(v8, (uint64_t *)&v11);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v9);
  WebCore::IDBResultData::~IDBResultData((WebCore::IDBResultData *)v13);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v10);
}

void WebKit::IDBStorageConnectionToClient::didGetAllDatabaseNamesAndVersions(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  unsigned __int8 **v18;
  unsigned __int8 *v19;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  IPC::Encoder *v27;
  uint64_t v28;
  unsigned __int8 **v29;
  IPC::Encoder *v30;

  IPC::Connection::connection(*(_QWORD *)(a1 + 8), &v29);
  v5 = (uint64_t)v29;
  if (v29)
  {
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 1737;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v30 = (IPC::Encoder *)v6;
    v7 = *a2;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
    v8 = a2[1];
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v8;
    v9 = *(unsigned int *)(a3 + 12);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v9;
    v10 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v10)
    {
      v11 = *(uint64_t **)a3;
      v12 = &v11[2 * v10];
      do
      {
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, v11);
        v13 = v11[1];
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v13;
        v11 += 2;
      }
      while (v11 != v12);
    }
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v30, 0, 0);
    v15 = v30;
    v30 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v14);
      WTF::fastFree(v16, v17);
    }
    v18 = v29;
    v29 = 0;
    if (v18)
    {
      v19 = *v18;
      if (__ldaxr(*v18))
      {
        __clrex();
      }
      else if (!__stxr(1u, v19))
      {
        goto LABEL_12;
      }
      MEMORY[0x19AEABB3C](v19);
LABEL_12:
      v21 = *((_QWORD *)v19 + 1);
      v22 = v21 - 1;
      *((_QWORD *)v19 + 1) = v21 - 1;
      if (v21 == 1)
      {
        v28 = *((_QWORD *)v19 + 2);
        v24 = *((_QWORD *)v19 + 3);
        *((_QWORD *)v19 + 3) = 0;
        v23 = v28 == 0;
      }
      else
      {
        v23 = 0;
        v24 = 0;
      }
      v25 = __ldxr(v19);
      if (v25 == 1)
      {
        if (!__stlxr(0, v19))
        {
          if (v22)
            return;
LABEL_20:
          v26 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v26 = off_1E34ACA48;
          *(_QWORD *)(v26 + 8) = v19;
          *(_QWORD *)(v26 + 16) = v24;
          *(_BYTE *)(v26 + 24) = v23;
          v30 = (IPC::Encoder *)v26;
          WTF::ensureOnMainRunLoop();
          v27 = v30;
          v30 = 0;
          if (v27)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v27 + 8))(v27);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      if (v22)
        return;
      goto LABEL_20;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::fireVersionChangeEvent(WebKit::IDBStorageConnectionToClient *this, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2, const WebCore::IDBResourceIdentifier *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  IPC::Encoder *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  IPC::Encoder *v27;

  v6 = *((_QWORD *)a2 + 1);
  IPC::Connection::connection(*((_QWORD *)this + 1), &v26);
  v7 = (uint64_t)v26;
  if (v26)
  {
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 1748;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v27 = (IPC::Encoder *)v8;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v6;
    v9 = *(_QWORD *)a3;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
    v10 = *((_QWORD *)a3 + 1);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v10;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a4;
    IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v27, 0, 0);
    v12 = v27;
    v27 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v13, v14);
    }
    v15 = v26;
    v26 = 0;
    if (v15)
    {
      v16 = *v15;
      if (__ldaxr(*v15))
      {
        __clrex();
      }
      else if (!__stxr(1u, v16))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v16);
LABEL_9:
      v18 = *((_QWORD *)v16 + 1);
      v19 = v18 - 1;
      *((_QWORD *)v16 + 1) = v18 - 1;
      if (v18 == 1)
      {
        v25 = *((_QWORD *)v16 + 2);
        v21 = *((_QWORD *)v16 + 3);
        *((_QWORD *)v16 + 3) = 0;
        v20 = v25 == 0;
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      v22 = __ldxr(v16);
      if (v22 == 1)
      {
        if (!__stlxr(0, v16))
        {
          if (v19)
            return;
LABEL_17:
          v23 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v23 = off_1E34ACA48;
          *(_QWORD *)(v23 + 8) = v16;
          *(_QWORD *)(v23 + 16) = v21;
          *(_BYTE *)(v23 + 24) = v20;
          v27 = (IPC::Encoder *)v23;
          WTF::ensureOnMainRunLoop();
          v24 = v27;
          v27 = 0;
          if (v24)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v24 + 8))(v24);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
      if (v19)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::didCloseFromServer(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  uint64_t v21;
  unsigned __int8 **v22;
  IPC::Encoder *v23;
  __int16 v24;

  v4 = *(_QWORD *)(a2 + 8);
  IPC::Connection::connection(*(_QWORD *)(a1 + 8), &v22);
  v5 = (uint64_t)v22;
  if (v22)
  {
    v6 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v6 = 1729;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 528) = v6 + 16;
    *(_QWORD *)(v6 + 536) = v6 + 16;
    *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v6 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
    v23 = (IPC::Encoder *)v6;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v4;
    v24 = *(_WORD *)a3;
    IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>((IPC::Encoder *)v6, (char *)&v24);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a3 + 1);
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v23, 0, 0);
    v8 = v23;
    v23 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v9, v10);
    }
    v11 = v22;
    v22 = 0;
    if (v11)
    {
      v12 = *v11;
      if (__ldaxr(*v11))
      {
        __clrex();
      }
      else if (!__stxr(1u, v12))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v12);
LABEL_9:
      v14 = *((_QWORD *)v12 + 1);
      v15 = v14 - 1;
      *((_QWORD *)v12 + 1) = v14 - 1;
      if (v14 == 1)
      {
        v21 = *((_QWORD *)v12 + 2);
        v17 = *((_QWORD *)v12 + 3);
        *((_QWORD *)v12 + 3) = 0;
        v16 = v21 == 0;
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      v18 = __ldxr(v12);
      if (v18 == 1)
      {
        if (!__stlxr(0, v12))
        {
          if (v15)
            return;
LABEL_17:
          v19 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v19 = off_1E34ACA48;
          *(_QWORD *)(v19 + 8) = v12;
          *(_QWORD *)(v19 + 16) = v17;
          *(_BYTE *)(v19 + 24) = v16;
          v23 = (IPC::Encoder *)v19;
          WTF::ensureOnMainRunLoop();
          v20 = v23;
          v23 = 0;
          if (v20)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v20 + 8))(v20);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
      if (v15)
        return;
      goto LABEL_17;
    }
  }
}

void WebKit::IDBStorageConnectionToClient::notifyOpenDBRequestBlocked(WebKit::IDBStorageConnectionToClient *this, const WebCore::IDBResourceIdentifier *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  IPC::Encoder *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  IPC::Encoder *v27;

  IPC::Connection::connection(*((_QWORD *)this + 1), &v26);
  v7 = (uint64_t)v26;
  if (v26)
  {
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 1749;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v27 = (IPC::Encoder *)v8;
    v9 = *(_QWORD *)a2;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
    v10 = *((_QWORD *)a2 + 1);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v10;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a3;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a4;
    IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v27, 0, 0);
    v12 = v27;
    v27 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v13, v14);
    }
    v15 = v26;
    v26 = 0;
    if (v15)
    {
      v16 = *v15;
      if (__ldaxr(*v15))
      {
        __clrex();
      }
      else if (!__stxr(1u, v16))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v16);
LABEL_9:
      v18 = *((_QWORD *)v16 + 1);
      v19 = v18 - 1;
      *((_QWORD *)v16 + 1) = v18 - 1;
      if (v18 == 1)
      {
        v25 = *((_QWORD *)v16 + 2);
        v21 = *((_QWORD *)v16 + 3);
        *((_QWORD *)v16 + 3) = 0;
        v20 = v25 == 0;
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      v22 = __ldxr(v16);
      if (v22 == 1)
      {
        if (!__stlxr(0, v16))
        {
          if (v19)
            return;
LABEL_17:
          v23 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v23 = off_1E34ACA48;
          *(_QWORD *)(v23 + 8) = v16;
          *(_QWORD *)(v23 + 16) = v21;
          *(_BYTE *)(v23 + 24) = v20;
          v27 = (IPC::Encoder *)v23;
          WTF::ensureOnMainRunLoop();
          v24 = v27;
          v27 = 0;
          if (v24)
            (*(void (**)(IPC::Encoder *))(*(_QWORD *)v24 + 8))(v24);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
      if (v19)
        return;
      goto LABEL_17;
    }
  }
}

WTF::FileSystemImpl *WebKit::IDBStorageManager::createVersionDirectoryIfNeeded(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  const WTF::String *v2;
  char v3;
  void *v4;
  const WTF::String *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26[3];
  int v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    v24 = 0;
    v25 = 0;
    WTF::FileSystemImpl::listDirectory(this, a2);
    if (!v23)
    {
      v3 = 0;
LABEL_5:
      if (!HIDWORD(v25) && (v3 & 1) == 0)
        goto LABEL_7;
      WTF::FileSystemImpl::pathByAppendingComponent();
      v6 = WTF::FileSystemImpl::fileType((WTF::FileSystemImpl *)v26, v5);
      if ((v6 & 0xFF00000000) != 0)
      {
        if ((_DWORD)v6 == 2)
        {
          WTF::FileSystemImpl::deleteNonEmptyDirectory((WTF::FileSystemImpl *)v26, v2);
          goto LABEL_24;
        }
        if (!(_DWORD)v6)
        {
          WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)v26, v2);
LABEL_24:
          v3 = 0;
        }
      }
      v11 = HIDWORD(v25);
      if (HIDWORD(v25))
      {
        if ((v3 & 1) != 0
          || (WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)v26, v2), v11 = HIDWORD(v25), HIDWORD(v25)))
        {
          v12 = v24;
          v13 = v24 + 8 * v11;
          do
          {
            WTF::FileSystemImpl::pathByAppendingComponent();
            WTF::FileSystemImpl::pathByAppendingComponent();
            WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v21, (const WTF::String *)&v20, v14);
            v15 = v20;
            v20 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v2);
              else
                *(_DWORD *)v15 -= 2;
            }
            v16 = v21;
            v21 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v2);
              else
                *(_DWORD *)v16 -= 2;
            }
            v12 += 8;
          }
          while (v12 != v13);
        }
      }
      else if ((v3 & 1) != 0)
      {
        WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)v26, v2);
      }
      v17 = v26[0];
      v26[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v2);
        else
          *(_DWORD *)v17 -= 2;
      }
LABEL_7:
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v2);
      return (WTF::FileSystemImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v4);
    }
    v3 = 0;
    v7 = v22;
    v8 = 8 * v23;
    while (1)
    {
      v9 = MEMORY[0x19AEABBCC](*v7, "v0", 2);
      if ((MEMORY[0x19AEABBCC](*v7, "v0", 2) & 1) == 0 && (MEMORY[0x19AEABBCC](*v7, "v1", 2) & 1) == 0)
      {
        WebCore::SecurityOriginData::fromDatabaseIdentifier();
        if (v28)
        {
          v10 = HIDWORD(v25);
          if (HIDWORD(v25) != (_DWORD)v25)
          {
            v18 = v24;
            v19 = (_DWORD *)*v7;
            if (*v7)
              *v19 += 2;
            *(_QWORD *)(v18 + 8 * v10) = v19;
            HIDWORD(v25) = v10 + 1;
LABEL_21:
            if (v27 != -1)
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v27])(&v21, v26);
            goto LABEL_16;
          }
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v24, (unint64_t)v7);
          if (v28)
            goto LABEL_21;
        }
      }
LABEL_16:
      v3 |= v9;
      ++v7;
      v8 -= 8;
      if (!v8)
        goto LABEL_5;
    }
  }
  return this;
}

uint64_t WebKit::IDBStorageManager::migrateOriginData(WebKit::IDBStorageManager *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E34C6918;
  v8 = v5;
  v6 = WebKit::migrateOriginDataImpl(this, a2, &v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v6;
}

void WebKit::IDBStorageManager::~IDBStorageManager(WebKit::IDBStorageManager *this)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v2 = (uint64_t *)((char *)this + 40);
  v4 = (WTF::StringImpl *)WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin((_QWORD **)this + 5);
  v5 = v3;
  v6 = *((_QWORD *)this + 5);
  if (v6)
    v7 = (WTF::StringImpl *)(v6 + 88 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != v4)
  {
    do
    {
      WebCore::IDBServer::UniqueIDBDatabase::immediateClose(*((WebCore::IDBServer::UniqueIDBDatabase **)v4 + 10));
      while (1)
      {
        v4 = (WTF::StringImpl *)((char *)v4 + 88);
        if (v4 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v4 + 1) > 1)
          goto LABEL_10;
      }
      v4 = v5;
LABEL_10:
      ;
    }
    while (v4 != v7);
    v6 = *v2;
  }
  if (v6)
    WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::deallocateTable(v6, v3);
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v3);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  WTF *v1;
  void *v2;

  WebKit::IDBStorageManager::~IDBStorageManager(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::IDBStorageManager::hasDataInMemory(WebKit::IDBStorageManager *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v2 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin((_QWORD **)this + 5);
  v3 = v2;
  v5 = v4;
  v6 = *((_QWORD *)this + 5);
  if (v6)
    v7 = (_QWORD *)(v6 + 88 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 == v2)
    return 0;
  while (1)
  {
    result = WebCore::IDBServer::UniqueIDBDatabase::hasDataInMemory((WebCore::IDBServer::UniqueIDBDatabase *)v3[10]);
    if ((result & 1) != 0)
      return 1;
    while (1)
    {
      v3 += 11;
      if (v3 == v5)
        break;
      if ((unint64_t)(*v3 + 1) > 1)
        goto LABEL_10;
    }
    v3 = v5;
LABEL_10:
    if (v3 == v7)
      return result;
  }
}

uint64_t WebKit::IDBStorageManager::closeDatabasesForDeletion(WebKit::IDBStorageManager *this)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;

  v2 = (uint64_t *)((char *)this + 40);
  v4 = (WTF::StringImpl *)WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::begin((_QWORD **)this + 5);
  v5 = v3;
  result = *((_QWORD *)this + 5);
  if (result)
    v7 = (WTF::StringImpl *)(result + 88 * *(unsigned int *)(result - 4));
  else
    v7 = 0;
  if (v7 != v4)
  {
    do
    {
      WebCore::IDBServer::UniqueIDBDatabase::immediateClose(*((WebCore::IDBServer::UniqueIDBDatabase **)v4 + 10));
      while (1)
      {
        v4 = (WTF::StringImpl *)((char *)v4 + 88);
        if (v4 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v4 + 1) > 1)
          goto LABEL_10;
      }
      v4 = v5;
LABEL_10:
      ;
    }
    while (v4 != v7);
    result = *v2;
  }
  if (result)
  {
    *v2 = 0;
    return WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::deallocateTable(result, v3);
  }
  return result;
}

uint64_t WebKit::IDBStorageManager::getOrCreateUniqueIDBDatabase(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v4 = (uint64_t *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5
    || (WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::expand((uint64_t *)(a1 + 40), 0), (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = WTF::computeHash<WebCore::IDBDatabaseIdentifier>((uint64_t)a2);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = v7 & v6;
    v12 = v5 + 88 * (v7 & v6);
    if (*(_QWORD *)v12 == -1)
    {
      v9 = v5 + 88 * v11;
      goto LABEL_10;
    }
    if (!*(_QWORD *)v12)
      break;
    if ((WebCore::operator==(v5 + 88 * v11, (uint64_t)a2, v8) & 1) != 0)
      return *(_QWORD *)(v12 + 80);
LABEL_10:
    v7 = i + v11;
  }
  if (v9)
  {
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 48) = 0;
    *(_DWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 56) = 0;
    *(_BYTE *)(v9 + 72) = 0;
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_DWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 80) = 0;
    --*(_DWORD *)(*v4 - 16);
    v12 = v9;
  }
  WTF::String::operator=((WTF::StringImpl **)v12, a2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v12 + 8, (uint64_t)a2 + 8);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v12 + 40, (uint64_t)a2 + 40);
  *(_BYTE *)(v12 + 72) = *((_BYTE *)a2 + 72);
  std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100]((uint64_t *)(v12 + 80), 0);
  v13 = *v4;
  if (*v4)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *v4;
  if (*v4)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 <= 2 * v17)
LABEL_21:
      v12 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::expand(v4, v12);
  }
  else if (3 * v18 <= 4 * v17)
  {
    goto LABEL_21;
  }
  v19 = WTF::fastMalloc((WTF *)0x100);
  MEMORY[0x19AEB58EC](v19, a1, a2);
  std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>::reset[abi:sn180100]((uint64_t *)(v12 + 80), v19);
  return *(_QWORD *)(v12 + 80);
}

uint64_t WebCore::IDBOpenRequestData::databaseIdentifier(WebCore::IDBOpenRequestData *this, uint64_t a2)
{
  _DWORD *v4;
  char *v5;
  uint64_t result;

  v4 = *(_DWORD **)(a2 + 24);
  if (v4)
    *v4 += 2;
  *(_QWORD *)this = v4;
  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)this + 8, a2 + 32);
  *((_BYTE *)this + 40) = 0;
  v5 = (char *)this + 40;
  *((_DWORD *)v5 + 6) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v5, a2 + 64);
  v5[32] = *(_BYTE *)(a2 + 96);
  return result;
}

void WebKit::IDBStorageManager::registerConnection(WebKit::IDBStorageManager *this, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;

  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)a2 + 1);
  v7 = *(_QWORD *)(v3 + 8);
  v6 = (uint64_t *)(v3 + 8);
  v5 = v7;
  if (v7
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6),
        (v5 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (_QWORD *)(v5 + 16 * v12);
  v14 = *v13;
  if (!*v13)
  {
LABEL_12:
    *v13 = v4;
    v17 = *((_QWORD *)a2 + 2);
    if (v17)
      goto LABEL_37;
    v17 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = a2;
    v18 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v17;
    if (!v18)
      goto LABEL_37;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, a2);
    }
    v17 = *((_QWORD *)a2 + 2);
    if (v17)
    {
LABEL_37:
      do
        v21 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v21 + 1, (unsigned int *)v17));
    }
    v22 = (unsigned int *)v13[1];
    v13[1] = v17;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, a2);
      }
    }
    v25 = *v6;
    if (*v6)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *v6;
    if (*v6)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        return;
    }
    else if (3 * v30 > 4 * v29)
    {
      return;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6);
    return;
  }
  v15 = 0;
  v16 = 1;
  while (v14 != v4)
  {
    if (v14 == -1)
      v15 = v13;
    v12 = (v12 + v16) & v8;
    v13 = (_QWORD *)(v5 + 16 * v12);
    v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        *v15 = 0;
        v15[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v13 = v15;
      }
      goto LABEL_12;
    }
  }
}

void WebKit::IDBStorageManager::unregisterConnection(WebKit::IDBStorageManager *this, WebCore::IDBServer::UniqueIDBDatabaseConnection *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v2 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v2 + 8);
  v4 = (uint64_t *)(v2 + 8);
  v3 = v5;
  if (v5)
  {
    v6 = *((_QWORD *)a2 + 1);
    v7 = *(_DWORD *)(v3 - 8);
    v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_QWORD *)(v3 + 16 * v11);
    if (v12 != v6)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_QWORD *)(v3 + 16 * v11);
        ++v13;
        if (v12 == v6)
          goto LABEL_8;
      }
      v11 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v11 != *(_DWORD *)(v3 - 4))
    {
      v14 = (_QWORD *)(v3 + 16 * v11);
      v15 = (unsigned int *)v14[1];
      *v14 = -1;
      v14[1] = 0;
      if (v15)
      {
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, a2);
        }
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v4, v22 >> 1);
      }
    }
  }
}

WebCore::IDBResourceIdentifier *WebKit::IDBStorageManager::registerTransaction(WebKit::IDBStorageManager *this, WebCore::IDBServer::UniqueIDBDatabaseTransaction *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  unsigned int v11;
  WebCore::IDBResourceIdentifier *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::IDBResourceIdentifier *v15;
  int v16;
  WebCore::IDBResourceIdentifier *result;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  __int16 v32;
  char v33;

  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a2 + 4);
  v8 = *(_QWORD *)(v3 + 16);
  v6 = (uint64_t *)(v3 + 16);
  v7 = v8;
  if (v8
    || (WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::expand(v6),
        (v7 = *v6) != 0))
  {
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v9 = 0;
  }
  v31 = -1640531527;
  v32 = 0;
  v33 = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v31, v4, v5);
  v11 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31) & v9;
  v12 = (WebCore::IDBResourceIdentifier *)(v7 + 24 * v11);
  v14 = *(_QWORD *)v12;
  v13 = *((_QWORD *)v12 + 1);
  if (*(_OWORD *)v12 == 0)
  {
LABEL_12:
    *(_QWORD *)v12 = v4;
    *((_QWORD *)v12 + 1) = v5;
    result = *(WebCore::IDBResourceIdentifier **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_37;
    result = (WebCore::IDBResourceIdentifier *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *((_QWORD *)result + 1) = a2;
    v18 = *(unsigned int **)a2;
    *(_QWORD *)a2 = result;
    if (!v18)
      goto LABEL_37;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v10);
    }
    result = *(WebCore::IDBResourceIdentifier **)a2;
    if (*(_QWORD *)a2)
    {
LABEL_37:
      do
        v21 = __ldaxr((unsigned int *)result);
      while (__stlxr(v21 + 1, (unsigned int *)result));
    }
    v22 = (unsigned int *)*((_QWORD *)v12 + 2);
    *((_QWORD *)v12 + 2) = result;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        result = (WebCore::IDBResourceIdentifier *)WTF::fastFree((WTF *)v22, v10);
      }
    }
    v25 = *v6;
    if (*v6)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *v6;
    if (*v6)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        return result;
    }
    else if (3 * v30 > 4 * v29)
    {
      return result;
    }
    return WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::expand(v6);
  }
  else
  {
    v15 = 0;
    v16 = 1;
    while (1)
    {
      result = v15;
      v15 = v12;
      if (v14 != -1)
      {
        v15 = result;
        if (v14 == v4 && v13 == v5)
          break;
      }
      v11 = (v11 + v16) & v9;
      v12 = (WebCore::IDBResourceIdentifier *)(v7 + 24 * v11);
      v14 = *(_QWORD *)v12;
      v13 = *((_QWORD *)v12 + 1);
      ++v16;
      if (*(_OWORD *)v12 == 0)
      {
        if (v15)
        {
          *(_QWORD *)v15 = WebCore::IDBResourceIdentifier::emptyValue(result);
          *((_QWORD *)v15 + 1) = v10;
          *((_QWORD *)v15 + 2) = 0;
          --*(_DWORD *)(*v6 - 16);
          v12 = v15;
        }
        goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t WebKit::IDBStorageManager::unregisterTransaction(uint64_t this, WebCore::IDBServer::UniqueIDBDatabaseTransaction *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  void *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v25;
  __int16 v26;
  char v27;

  v2 = *(_QWORD *)(this + 24);
  v5 = *(_QWORD *)(v2 + 16);
  v3 = (uint64_t *)(v2 + 16);
  v4 = v5;
  if (!v5)
    return this;
  v6 = *((_QWORD *)a2 + 3);
  v7 = *((_QWORD *)a2 + 4);
  v8 = *(_DWORD *)(v4 - 8);
  v25 = -1640531527;
  v26 = 0;
  v27 = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v25, v6, v7);
  this = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v25);
  v10 = this & v8;
  v11 = (uint64_t *)(v4 + 24 * (this & v8));
  v13 = *v11;
  v12 = v11[1];
  if (*(_OWORD *)v11 == 0)
  {
LABEL_8:
    v15 = *v3;
    if (!*v3)
      return this;
    v16 = *(_DWORD *)(v15 - 4);
    v11 = (uint64_t *)(v15 + 24 * v16);
LABEL_10:
    v15 += 24 * v16;
    if ((uint64_t *)v15 == v11)
      return this;
    goto LABEL_11;
  }
  v14 = 1;
  while (v13 == -1 || v13 != v6 || v12 != v7)
  {
    v10 = (v10 + v14) & v8;
    v11 = (uint64_t *)(v4 + 24 * v10);
    v13 = *v11;
    v12 = v11[1];
    ++v14;
    if (*(_OWORD *)v11 == 0)
      goto LABEL_8;
  }
  v15 = *v3;
  if (*v3)
  {
    v16 = *(_DWORD *)(v15 - 4);
    goto LABEL_10;
  }
LABEL_11:
  if ((uint64_t *)v15 != v11)
  {
    *v11 = -1;
    this = v11[2];
    v11[2] = 0;
    if (this)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)this);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)this));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, v9);
      }
    }
    ++*(_DWORD *)(*v3 - 16);
    v19 = *v3;
    if (*v3)
      v20 = *(_DWORD *)(v19 - 12) - 1;
    else
      v20 = -1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *v3;
    if (*v3)
    {
      v22 = 6 * *(_DWORD *)(v21 - 12);
      v23 = *(_DWORD *)(v21 - 4);
      if (v22 < v23 && v23 >= 9)
        return (uint64_t)WTF::HashTable<WebCore::IDBResourceIdentifier,WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashMap<WebCore::IDBResourceIdentifier,WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WebCore::IDBResourceIdentifier>,WTF::HashTraits<WTF::WeakPtr<WebCore::IDBServer::UniqueIDBDatabaseTransaction,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBResourceIdentifier>>::rehash(v3, v23 >> 1);
    }
  }
  return this;
}

WTF::StringImpl *WebKit::IDBStorageManager::createBackingStore@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  WTF::StringImpl *result;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5 && (*(_DWORD *)(v5 + 4) ? (v6 = *(_BYTE *)(a2 + 72) == 0) : (v6 = 0), v6))
  {
    WebCore::SQLiteFileSystem::computeHashForFileName();
    WTF::FileSystemImpl::pathByAppendingComponent();
    v8 = WTF::fastMalloc((WTF *)0x248);
    *a3 = (WTF::StringImpl *)MEMORY[0x19AEB5964](v8, a2, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    WTF::fastMalloc((WTF *)0x78);
    result = (WTF::StringImpl *)WebCore::IDBServer::MemoryIDBBackingStore::MemoryIDBBackingStore();
    *a3 = result;
  }
  return result;
}

uint64_t WebKit::IDBStorageManager::requestSpace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a3, a4);
}

uint64_t WebKit::IDBStorageRegistry::ensureConnectionToClient(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  void *v24;
  WTF *v25;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = (uint64_t *)(v6 + 16 * v11);
  v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    v16 = (WTF *)v12[1];
    *v12 = a3;
    v12[1] = 0;
    if (v16)
      std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](v16, a2);
    v17 = *a1;
    if (*a1)
      v18 = *(_DWORD *)(v17 - 12) + 1;
    else
      v18 = 1;
    *(_DWORD *)(v17 - 12) = v18;
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 12);
    else
      v20 = 0;
    v21 = (*(_DWORD *)(v19 - 16) + v20);
    v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21)
      {
LABEL_21:
        v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v23 = off_1E34C66C8;
        v23[1] = a2;
        v23[2] = a3;
        WebCore::IDBServer::IDBConnectionToClient::create();
        v25 = (WTF *)v12[1];
        v12[1] = (uint64_t)v23;
        if (v25)
          std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](v25, v24);
        return *(_QWORD *)(v12[1] + 24);
      }
    }
    else if (3 * v22 > 4 * v21)
    {
      goto LABEL_21;
    }
    v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v12);
    goto LABEL_21;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != a3)
  {
    if (v13 == -1)
      v14 = v12;
    v11 = (v11 + v15) & v7;
    v12 = (uint64_t *)(v6 + 16 * v11);
    v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v12 = v14;
      }
      goto LABEL_12;
    }
  }
  return *(_QWORD *)(v12[1] + 24);
}

uint64_t WebKit::IDBStorageRegistry::removeConnectionToClient(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11[24];

  v4 = (_QWORD *)*a1;
  *a1 = 0;
  result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::begin(v4);
  v7 = (uint64_t *)result;
  v8 = v6;
  v9 = 0;
  if (v4)
    v9 = &v4[2 * *((unsigned int *)v4 - 1)];
  if (v9 != (uint64_t *)result)
  {
    do
    {
      v10 = v7[1];
      if (*(_QWORD *)(v10 + 8) == a2)
        result = WebCore::IDBServer::IDBConnectionToClient::connectionToClientClosed(*(WebCore::IDBServer::IDBConnectionToClient **)(v10 + 24));
      else
        result = (uint64_t)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>((WTF *)v11, a1, v7, v7 + 1);
      while (1)
      {
        v7 += 2;
        if (v7 == v8)
          break;
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_13;
      }
      v7 = v8;
LABEL_13:
      ;
    }
    while (v7 != v9);
  }
  if (v4)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable((uint64_t)v4, v6);
  return result;
}

WTF *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>(WTF *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  WTF *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (WTF *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v29 = 0;
        else
          v29 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v27 = v8 + 16 * v29;
        goto LABEL_26;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a4;
  *a4 = 0;
  result = (WTF *)v16[1];
  v16[1] = v20;
  if (result)
    result = (WTF *)std::default_delete<WebKit::IDBStorageConnectionToClient>::operator()[abi:sn180100](result, a2);
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_20:
      result = (WTF *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::IDBStorageConnectionToClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::IDBStorageConnectionToClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v16);
      v16 = (uint64_t *)result;
      v23 = *a2;
      if (*a2)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_20;
  }
  v27 = v23 + 16 * v26;
  v28 = 1;
LABEL_26:
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v27;
  *((_BYTE *)v7 + 16) = v28;
  return result;
}

uint64_t WebKit::IDBStorageRegistry::connection(uint64_t a1, void *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = *(void **)(a1 + 16 * v6);
  if (v7 != a2)
  {
    v8 = 1;
    while (v7)
    {
      v6 = ((_DWORD)v6 + v8) & v2;
      v7 = *(void **)(a1 + 16 * v6);
      ++v8;
      if (v7 == a2)
        goto LABEL_6;
    }
    return 0;
  }
LABEL_6:
  v9 = *(_QWORD *)(a1 + 16 * v6 + 8);
  if (!v9)
    return 0;
  do
    v10 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v10 + 1, (unsigned int *)v9));
  v11 = *(_QWORD *)(v9 + 8);
  do
  {
    v12 = __ldaxr((unsigned int *)v9);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, (unsigned int *)v9));
  if (!v13)
  {
    atomic_store(1u, (unsigned int *)v9);
    WTF::fastFree((WTF *)v9, a2);
  }
  return v11;
}

uint64_t WebKit::IDBStorageRegistry::transaction(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  __int16 v19;
  char v20;

  v3 = a1;
  if (a1)
  {
    v6 = *(_DWORD *)(a1 - 8);
    v18 = -1640531527;
    v19 = 0;
    v20 = 0;
    WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v18, a2, a3);
    v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v18) & v6;
    v9 = (uint64_t *)(v3 + 24 * v8);
    v11 = *v9;
    v10 = v9[1];
    if (*(_OWORD *)v9 == 0)
      return 0;
    v12 = 1;
    while (v11 == -1 || v11 != a2 || v10 != a3)
    {
      v8 = ((_DWORD)v8 + v12) & v6;
      v11 = *(_QWORD *)(v3 + 24 * v8);
      v10 = *(_QWORD *)(v3 + 24 * v8 + 8);
      ++v12;
      if (*(_OWORD *)(v3 + 24 * v8) == 0)
        return 0;
    }
    v14 = *(_QWORD *)(v3 + 24 * v8 + 16);
    if (!v14)
    {
      return 0;
    }
    else
    {
      do
        v15 = __ldaxr((unsigned int *)v14);
      while (__stlxr(v15 + 1, (unsigned int *)v14));
      v3 = *(_QWORD *)(v14 + 8);
      do
      {
        v16 = __ldaxr((unsigned int *)v14);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v14));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v14);
        WTF::fastFree((WTF *)v14, v7);
      }
    }
  }
  return v3;
}

uint64_t WebKit::fileNameToOrigin(WebKit *this, WTF::StringImpl **a2)
{
  uint64_t result;
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  result = (uint64_t)*a2;
  if (*a2 && (result = WTF::StringImpl::endsWith(), (result & 1) != 0) && *a2 && (v5 = *((_DWORD *)*a2 + 1), v5 > 0xD))
  {
    WTF::String::left(a2, v5 - 13, &v7);
    WebCore::SecurityOriginData::fromDatabaseIdentifier();
    result = (uint64_t)v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 32) = 0;
  }
  return result;
}

uint64_t WebKit::LocalStorageManager::isActive(WebKit::LocalStorageManager *this)
{
  WebKit::StorageAreaBase *v2;
  uint64_t result;

  v2 = (WebKit::StorageAreaBase *)*((_QWORD *)this + 3);
  if (v2 && WebKit::StorageAreaBase::hasListeners(v2))
    return 1;
  result = *((_QWORD *)this + 2);
  if (result)
    return WebKit::StorageAreaBase::hasListeners((WebKit::StorageAreaBase *)result);
  return result;
}

BOOL WebKit::LocalStorageManager::hasDataInMemory(WebKit::LocalStorageManager *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 3);
  if (v2
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2)
    && !(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3)))
  {
    return 1;
  }
  v3 = *((_QWORD *)this + 2);
  return v3 && WebCore::StorageMap::length((WebCore::StorageMap *)(v3 + 104)) != 0;
}

BOOL WebKit::MemoryStorageArea::isEmpty(WebKit::MemoryStorageArea *this)
{
  return WebCore::StorageMap::length((WebKit::MemoryStorageArea *)((char *)this + 104)) == 0;
}

uint64_t *WebKit::LocalStorageManager::clearDataInMemory(WebKit::LocalStorageManager *this)
{
  uint64_t *result;
  uint64_t v3;

  result = (uint64_t *)*((_QWORD *)this + 3);
  if (result)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
    if ((_DWORD)result)
      result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  }
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    WebCore::StorageMap::clear((WebCore::StorageMap *)(v3 + 104));
    return WebKit::StorageAreaBase::notifyListenersAboutClear((WebKit::StorageAreaBase *)v3);
  }
  return result;
}

uint64_t *WebKit::MemoryStorageArea::clear(WebKit::MemoryStorageArea *this)
{
  WebCore::StorageMap::clear((WebKit::MemoryStorageArea *)((char *)this + 104));
  return WebKit::StorageAreaBase::notifyListenersAboutClear(this);
}

void WebKit::LocalStorageManager::connectionClosed(uint64_t a1, uint64_t a2)
{
  WebKit::LocalStorageManager::connectionClosedForLocalStorageArea(a1, a2);
  WebKit::LocalStorageManager::connectionClosedForTransientStorageArea(a1, a2);
}

uint64_t WebKit::LocalStorageManager::connectionClosedForLocalStorageArea(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    WebKit::StorageAreaBase::removeListener(result, a2);
    result = WebKit::StorageAreaBase::hasListeners(*(WebKit::StorageAreaBase **)(a1 + 24));
    if ((result & 1) == 0)
    {
      if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24))
        || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24)),
            (_DWORD)result))
      {
        WebKit::StorageAreaRegistry::unregisterStorageArea(*(uint64_t **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16));
        result = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

void WebKit::LocalStorageManager::connectionClosedForTransientStorageArea(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WebKit::StorageAreaBase **v4;
  WebKit::StorageAreaBase *v5;

  v4 = (WebKit::StorageAreaBase **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    WebKit::StorageAreaBase::removeListener(v3, a2);
    if (!WebKit::StorageAreaBase::hasListeners(*v4)
      && !WebCore::StorageMap::length((WebKit::StorageAreaBase *)((char *)*v4 + 104)))
    {
      WebKit::StorageAreaRegistry::unregisterStorageArea(*(uint64_t **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16));
      v5 = *(WebKit::StorageAreaBase **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v5)
        std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v4, v5);
    }
  }
}

uint64_t WebKit::LocalStorageManager::connectToLocalStorageArea(_QWORD *a1, void *a2, uint64_t a3, const WebCore::ClientOrigin *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  WebKit::StorageAreaBase *v16[3];
  uint64_t v17;
  void *v18;

  v8 = a1[3];
  if (!v8)
  {
    if (*a1 && *(_DWORD *)(*a1 + 4))
    {
      v11 = WTF::fastMalloc((WTF *)0xB0);
      WebKit::SQLiteStorageArea::SQLiteStorageArea(v11, 5242880, a4, a1, a5);
      v12 = a1[3];
      a1[3] = v11;
      if (!v12)
      {
LABEL_6:
        v13 = (uint64_t *)a1[1];
        v14 = a1[3];
        v18 = *(void **)(v14 + 16);
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaBase&>(v13, (uint64_t *)&v18, v14, (uint64_t)v16);
        v8 = a1[3];
        goto LABEL_7;
      }
    }
    else
    {
      LOBYTE(v18) = 1;
      std::make_unique[abi:sn180100]<WebKit::MemoryStorageArea,WebCore::ClientOrigin const&,WebKit::StorageAreaBase::StorageType>(v16, a4, &v18);
      v12 = a1[3];
      a1[3] = v16[0];
      if (!v12)
        goto LABEL_6;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    goto LABEL_6;
  }
LABEL_7:
  v17 = a3;
  v18 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t *)(v8 + 96), &v18, &v17, (uint64_t)v16);
  return *(_QWORD *)(a1[3] + 16);
}

uint64_t WebKit::LocalStorageManager::connectToTransientLocalStorageArea(uint64_t a1, void *a2, uint64_t a3, const WebCore::ClientOrigin *a4)
{
  uint64_t v6;
  WebKit::StorageAreaBase **v7;
  uint64_t v10;
  WebKit::StorageAreaBase *v11;
  WebKit::StorageAreaBase *v12;
  uint64_t *v13;
  _BYTE v15[24];
  uint64_t v16;
  void *v17;

  v7 = (WebKit::StorageAreaBase **)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v10 = WTF::fastMalloc((WTF *)0x80);
    v11 = WebKit::StorageAreaBase::StorageAreaBase((WebKit::StorageAreaBase *)v10, -1, a4);
    *(_QWORD *)v11 = off_1E34C67F8;
    WebCore::StorageMap::StorageMap((WebKit::StorageAreaBase *)((char *)v11 + 104));
    *(_BYTE *)(v10 + 120) = 1;
    v12 = *v7;
    *v7 = (WebKit::StorageAreaBase *)v10;
    if (v12)
    {
      std::default_delete<WebKit::MemoryStorageArea>::operator()[abi:sn180100]((int)v7, v12);
      v10 = (uint64_t)*v7;
    }
    v13 = *(uint64_t **)(a1 + 8);
    v17 = *(void **)(v10 + 16);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::StorageAreaBase&>(v13, (uint64_t *)&v17, v10, (uint64_t)v15);
    v6 = *(_QWORD *)(a1 + 16);
  }
  v16 = a3;
  v17 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t *)(v6 + 96), &v17, &v16, (uint64_t)v15);
  return *((_QWORD *)*v7 + 2);
}

WTF::StringImpl *WebKit::MemoryStorageArea::setItem@<X0>(WTF::String *a1@<X3>, WTF::String *a2@<X4>, uint64_t a3@<X0>, uint64_t a4@<X1>, uint64_t a5@<X2>, uint64_t a6@<X5>, char *a7@<X8>)
{
  WTF::StringImpl *v14;
  char v15;
  char v16;
  WTF::StringImpl *result;
  BOOL v18;
  WTF::StringImpl *v19;

  v19 = 0;
  v18 = 0;
  WebCore::StorageMap::setItem((WebCore::StorageMap *)(a3 + 104), a1, a2, (WTF::String *)&v19, &v18);
  if (v18)
  {
    v15 = 1;
    v16 = 2;
  }
  else
  {
    WebKit::StorageAreaBase::dispatchEvents(a3, a4, a5, (uint64_t)a1, (uint64_t)&v19, (uint64_t)a2, a6);
    v16 = 0;
    v15 = 0;
  }
  *a7 = v16;
  a7[1] = v15;
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::MemoryStorageArea::removeItem@<X0>(WTF::String *a1@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, _WORD *a6@<X8>)
{
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v16 = 0;
  WebCore::StorageMap::removeItem((WebCore::StorageMap *)(a2 + 104), a1, (WTF::String *)&v16);
  v15 = 0;
  WebKit::StorageAreaBase::dispatchEvents(a2, a3, a4, (uint64_t)a1, (uint64_t)&v16, (uint64_t)&v15, a5);
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  *a6 = 0;
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::MemoryStorageArea::clear@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _WORD *a5@<X8>)
{
  WebCore::StorageMap *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v10 = (WebCore::StorageMap *)(a1 + 104);
  result = (WTF::StringImpl *)WebCore::StorageMap::length((WebCore::StorageMap *)(a1 + 104));
  if ((_DWORD)result)
  {
    WebCore::StorageMap::clear(v10);
    v16 = 0;
    v17 = 0;
    v15 = 0;
    WebKit::StorageAreaBase::dispatchEvents(a1, a2, a3, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15, a4);
    v13 = v15;
    v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v16;
    v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  *a5 = 0;
  return result;
}

WTF::StringImpl ***WebKit::MemoryStorageArea::clone@<X0>(WebKit::MemoryStorageArea *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char v5;
  WebKit::StorageAreaBase *v6;
  WTF::StringImpl ****v7;
  WTF::StringImpl *v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***result;
  char v11;
  _BYTE v12[24];
  int v13;
  _BYTE v14[24];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v12[0] = 0;
  v13 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v12, (uint64_t)this + 32);
  v14[0] = 0;
  v15 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v14, (uint64_t)this + 64);
  v4 = WTF::fastMalloc((WTF *)0x80);
  v5 = *((_BYTE *)this + 120);
  v6 = WebKit::StorageAreaBase::StorageAreaBase((WebKit::StorageAreaBase *)v4, -1, (const WebCore::ClientOrigin *)v12);
  *(_QWORD *)v6 = off_1E34C67F8;
  v7 = (WTF::StringImpl ****)((char *)v6 + 104);
  WebCore::StorageMap::StorageMap((WebKit::StorageAreaBase *)((char *)v6 + 104));
  *(_BYTE *)(v4 + 120) = v5;
  *a2 = v4;
  if (v15 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v15])(&v11, v14);
  v15 = -1;
  if (v13 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v13])(&v11, v12);
  v9 = (WTF::StringImpl ***)*((_QWORD *)this + 13);
  ++*(_DWORD *)v9;
  result = *v7;
  *v7 = v9;
  if (result)
    result = WTF::RefCounted<WebCore::StorageMap::Impl>::deref(result, v8);
  *(_DWORD *)(v4 + 112) = *((_DWORD *)this + 28);
  return result;
}

WTF::StringImpl *WebKit::NetworkStorageManager::persistedFilePath(WebKit::NetworkStorageManager *this, const WebCore::ClientOrigin *a2, WebCore::SecurityOriginData *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  _DWORD *v6;
  WTF::StringImpl *v7;

  WebKit::originDirectoryPath((WTF::StringImpl *)&v7, (uint64_t)a2 + 56, a3);
  result = v7;
  if (v7 && *((_DWORD *)v7 + 1))
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    result = v7;
  }
  else
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v6 += 2;
    *(_QWORD *)this = v6;
  }
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, WTF::StringImpl **a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, char a20,char a21)
{
  uint64_t v24;
  uint64_t result;

  v24 = WTF::fastMalloc((WTF *)0x180);
  result = WebKit::NetworkStorageManager::NetworkStorageManager(v24, a1, a2, a3, a4, a5, a6, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21);
  *a7 = result;
  return result;
}

uint64_t WebKit::NetworkStorageManager::NetworkStorageManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, char a20,char a21)
{
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  WTF::ThreadSafeWeakPtrControlBlock *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 **v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42[2];
  char v43;
  _BYTE buf[24];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E34B0558;
  *(_QWORD *)(a1 + 8) = 0;
  v26 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v26 = 0;
  *(_OWORD *)(v26 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v26 + 24) = a1;
  *(_QWORD *)(a1 + 16) = v26;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E34C6858;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v27 = *(unsigned int **)(a2 + 8);
  if (v27)
  {
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
  }
  *(_QWORD *)(a1 + 32) = v27;
  *(_QWORD *)(a1 + 40) = a3;
  WTF::SuspendableWorkQueue::create();
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_BYTE *)(a1 + 184) = 1;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 296) = a4;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  if (*a5 && *((_DWORD *)*a5 + 1))
  {
    if ((_MergedGlobals_74 & 1) == 0)
    {
      qword_1ECE72A50 = 0;
      _MergedGlobals_74 = 1;
    }
    WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::add<WebKit::NetworkStorageManager&>((uint64_t)v42, a5, (const WTF::StringImpl *)a1);
    if (!v43)
    {
      v33 = *(_QWORD *)v42;
      v35 = (unsigned __int8 **)(*(_QWORD *)v42 + 8);
      v34 = *(_QWORD *)(*(_QWORD *)v42 + 8);
      if (v34
        && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v41, v34, *(_QWORD *)(*(_QWORD *)v42 + 16)), (v36 = v41) != 0))
      {
        v37 = qword_1ECE718E8;
        if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
        {
          v39 = *(_QWORD *)(a1 + 40);
          v40 = *(_QWORD *)(v36 + 40);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v39;
          *(_WORD *)&buf[22] = 2048;
          v45 = v40;
          _os_log_error_impl(&dword_196BCC000, v37, OS_LOG_TYPE_ERROR, "%p - NetworkStorageManager::NetworkStorageManager path for session %llu is already in use by session %llu", buf, 0x20u);
        }
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v36 + 16), v38);
      }
      else
      {
        WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>::operator=(v35, *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 16));
        *(_QWORD *)(v33 + 16) = a1;
      }
    }
  }
  *(_QWORD *)buf = a1;
  v29 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 16);
  if (v29)
    v29 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v29);
  *(_QWORD *)&buf[8] = v29;
  *(_QWORD *)&buf[16] = a1;
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v46 = a10;
  v47 = a11;
  v48 = a12;
  v49 = a13;
  v50 = a14;
  v51 = a15;
  v52 = a16;
  v53 = a17;
  v54 = a18;
  v55 = a20;
  v56 = a21;
  WTF::Function<void ()(void)>::Function<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0,void>((uint64_t *)v42, (uint64_t *)buf);
  WTF::SuspendableWorkQueue::dispatch();
  v31 = *(_QWORD *)v42;
  *(_QWORD *)v42 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::~$_0(buf, v30);
  return a1;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = WTF::fastMalloc((WTF *)0x98);
  v5 = *a2;
  *(_QWORD *)v4 = off_1E34C6940;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = a2[1];
  v6 = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  *(_QWORD *)(v4 + 24) = v6;
  v7 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(v4 + 32) = v7;
  v8 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(v4 + 40) = v8;
  v9 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(v4 + 48) = v9;
  v10 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(v4 + 56) = v10;
  v11 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(v4 + 64) = v11;
  v12 = *((_OWORD *)a2 + 5);
  v13 = *((_OWORD *)a2 + 6);
  v14 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(v4 + 130) = *(_OWORD *)((char *)a2 + 122);
  *(_OWORD *)(v4 + 120) = v14;
  *(_OWORD *)(v4 + 104) = v13;
  *(_OWORD *)(v4 + 88) = v12;
  *(_OWORD *)(v4 + 72) = *((_OWORD *)a2 + 4);
  *a1 = v4;
  return a1;
}

_QWORD *WebKit::NetworkStorageManager::NetworkStorageManager(WebKit::NetworkProcess &,PAL::SessionID,WTF::Markable<WTF::UUID,WTF::UUID::MarkableTraits>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,WTF::String const&,unsigned long long,std::optional<double>,std::optional<double>,std::optional<unsigned long long>,std::optional<unsigned long long>,WebKit::UnifiedOriginStorageLevel,BOOL)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned __int8 *v8;

  v3 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (unsigned __int8 *)a1[1];
  a1[1] = 0;
  if (v8)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v8, a2);
  return a1;
}

void WebKit::NetworkStorageManager::~NetworkStorageManager(WebKit::NetworkStorageManager *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl ***v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  void *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned __int8 *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::WorkQueue *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  char v35;

  if (*((_BYTE *)this + 376))
  {
    v3 = *((_QWORD *)this + 46);
    if (v3)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  }
  v4 = *((_QWORD *)this + 45);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = v4 + 32;
      do
      {
        v7 = WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)(v6 - 32));
        if ((v8 & 1) == 0)
        {
          v9 = *(unsigned int *)(v6 + 24);
          if ((_DWORD)v9 != -1)
            ((void (*)(char *, uint64_t, double))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v9])(&v34, v6, v7);
          *(_DWORD *)(v6 + 24) = -1;
          v10 = *(unsigned int *)(v6 - 8);
          if ((_DWORD)v10 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v10])(&v35, v6 - 32);
          *(_DWORD *)(v6 - 8) = -1;
        }
        v6 += 72;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v11 = (uint64_t *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v11)
    std::default_delete<WebKit::ServiceWorkerStorageManager>::operator()[abi:sn180100]((uint64_t)this + 352, v11);
  if (*((_BYTE *)this + 336))
  {
    v12 = (WTF::StringImpl **)*((_QWORD *)this + 41);
    if (v12)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, (WTF::StringImpl *)v11);
  }
  WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 312, v11);
  v14 = *((_QWORD *)this + 38);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v15)
    {
      v16 = (WTF::StringImpl ***)(v14 + 8);
      do
      {
        if (*(v16 - 1) != (WTF::StringImpl **)-1 && *v16)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v16, v13);
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), v13);
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v13);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v13);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v13);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v13);
    else
      *(_DWORD *)v20 -= 2;
  }
  std::unique_ptr<WebKit::CacheStorageRegistry>::reset[abi:sn180100]((WTF **)this + 17, 0);
  v22 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v22)
    std::default_delete<WebKit::IDBStorageRegistry>::operator()[abi:sn180100](v22, v21);
  std::unique_ptr<WebKit::StorageAreaRegistry>::reset[abi:sn180100]((WTF **)this + 15, 0);
  std::unique_ptr<WebKit::StorageAreaRegistry>::reset[abi:sn180100]((WTF **)this + 14, 0);
  v24 = *((_QWORD *)this + 11);
  if (v24)
  {
    v25 = *(unsigned int *)(v24 - 4);
    if ((_DWORD)v25)
    {
      v26 = (unsigned __int8 **)(v24 + 8);
      do
      {
        if (*(v26 - 1) != (unsigned __int8 *)-1)
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v27, v23);
        }
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v24 - 16), v23);
  }
  v28 = *((_QWORD *)this + 10);
  if (v28)
    WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v28, v23);
  v29 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = (WTF::WorkQueue *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v30)
    WTF::WorkQueue::deref(v30);
  v31 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, v23);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v23);
}

{
  uint64_t v2;
  void *v3;

  WebKit::NetworkStorageManager::~NetworkStorageManager(this, a2);
  if (*(_DWORD *)(v2 + 24))
  {
    *(_OWORD *)(v2 + 352) = 0u;
    *(_OWORD *)(v2 + 368) = 0u;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_OWORD *)(v2 + 336) = 0u;
    *(_OWORD *)(v2 + 288) = 0u;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

uint64_t WebKit::NetworkStorageManager::close(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  unsigned int v12;

  *(_BYTE *)(a1 + 72) = 1;
  WTF::ThreadSafeWeakHashSet<IPC::Connection>::values(a1 + 88, a2, (uint64_t)&v11);
  if (v12)
  {
    v5 = v11;
    v6 = 8 * v12;
    do
    {
      v7 = *v5++;
      IPC::Connection::removeWorkQueueMessageReceiver(v7, 0x2Au, 0);
      v6 -= 8;
    }
    while (v6);
  }
  WTF::Vector<WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v8 = *a2;
  *a2 = 0;
  v9 = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
  *v9 = (uint64_t)&off_1E34C6990;
  v9[1] = a1;
  v9[2] = a1;
  v9[3] = v8;
  v11 = v9;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int8 **WebKit::NetworkStorageManager::startReceivingMessageFromConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  IPC::Connection::addWorkQueueMessageReceiver(a2, 0x2Au, *(_QWORD *)(a1 + 48), a1, 0);
  WTF::ThreadSafeWeakHashSet<IPC::Connection>::add<IPC::Connection,(void *)0>((uint64_t *)(a1 + 88), (WTF::ThreadSafeWeakPtrControlBlock **)a2);
  return WebKit::NetworkStorageManager::addAllowedSitesForConnection((unsigned __int8 **)a1, *(_QWORD *)(a2 + 24), a3);
}

unsigned __int8 **WebKit::NetworkStorageManager::addAllowedSitesForConnection(unsigned __int8 **result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6;
  _QWORD *v7;
  unsigned __int8 **v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  WTF::ThreadSafeWeakPtrControlBlock *v12;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if (*(_DWORD *)(a3 + 12))
  {
    v5 = result;
    v6 = (WTF::ThreadSafeWeakPtrControlBlock *)result[2];
    if (v6)
      v6 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v6);
    v12 = v6;
    v13 = v5;
    v15 = 0;
    v16 = 0;
    v14 = a2;
    _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_((WTF::StringImpl *)&v15, (uint64_t *)a3);
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
    *v7 = off_1E34C70F0;
    v7[1] = v12;
    v8 = v13;
    v12 = 0;
    v13 = 0;
    v7[2] = v8;
    v7[3] = v14;
    v7[4] = v15;
    v9 = v16;
    v15 = 0;
    v16 = 0;
    v7[5] = v9;
    v17 = v7;
    WTF::SuspendableWorkQueue::dispatch();
    v11 = v17;
    v17 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    return WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::~$_0((unsigned __int8 **)&v12, v10);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::stopReceivingMessageFromConnection(WebKit::NetworkStorageManager *this, IPC::Connection *a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = WTF::ThreadSafeWeakHashSet<IPC::Connection>::remove<IPC::Connection,(void *)0>((uint64_t *)this + 11, a2);
  if ((_DWORD)result)
  {
    IPC::Connection::removeWorkQueueMessageReceiver((uint64_t)a2, 0x2Au, 0);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 2);
    v5 = *((_QWORD *)a2 + 3);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = &off_1E34C69E0;
    v6[1] = this;
    v6[2] = this;
    v6[3] = v5;
    v7 = (uint64_t)v6;
    WTF::SuspendableWorkQueue::dispatch();
    result = v7;
    if (v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WTF::ThreadSafeWeakHashSet<IPC::Connection>::remove<IPC::Connection,(void *)0>(uint64_t *a1, WTF *a2)
{
  unsigned __int8 *v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::ThreadSafeWeakPtrControlBlock *v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  WTF *v17;

  v4 = (unsigned __int8 *)(a1 + 2);
  if (__ldaxr((unsigned __int8 *)a1 + 16))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](a1 + 2);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = *((_DWORD *)a1 + 3);
  v7 = *((_DWORD *)a1 + 2) + 1;
  *((_DWORD *)a1 + 2) = v7;
  if (v7 > v6)
  {
    _ZN3WTF9HashTableIPKN3IPC10ConnectionENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_((unsigned __int8 *)a1);
    *((_DWORD *)a1 + 2) = 0;
    v8 = *a1;
    if (*a1)
    {
      LODWORD(v8) = *(_DWORD *)(v8 - 12);
      if (v8 > 0x7FFFFFFE)
        LODWORD(v8) = 0x7FFFFFFF;
    }
    *((_DWORD *)a1 + 3) = 2 * v8;
  }
  v17 = a2;
  v9 = WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::find<WTF::IdentityHashTranslator<WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<IPC::Connection const*>>,IPC::Connection const*>(a1, &v17);
  v10 = (_QWORD *)v9;
  v11 = *a1;
  if (*a1)
    v11 += 16 * *(unsigned int *)(v11 - 4);
  if (v11 == v9)
  {
    v14 = 0;
  }
  else
  {
    v12 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v9 + 8);
    if (v12)
      v13 = !WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v12);
    else
      v13 = 1;
    v14 = v13 & WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::remove(a1, v10);
  }
  v15 = __ldxr(v4);
  if (v15 == 1)
  {
    if (!__stlxr(0, v4))
      return v14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return v14;
}

unint64_t WebKit::OriginQuotaManager::usage(WebKit::OriginQuotaManager *this)
{
  uint64_t v2;
  unint64_t result;

  v2 = *((_QWORD *)this + 10);
  if (v2)
    return *((_QWORD *)this + 11) - v2;
  if (*((_BYTE *)this + 120))
  {
    result = *((_QWORD *)this + 14);
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16));
    *((_QWORD *)this + 14) = result;
    *((_BYTE *)this + 120) = 1;
  }
  if (*((_QWORD *)this + 11) < result)
    return *((_QWORD *)this + 11);
  return result;
}

uint64_t WebKit::NetworkStorageManager::persistedInternal(WebKit::NetworkStorageManager *this, const WebCore::ClientOrigin *a2)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;

  WebKit::NetworkStorageManager::persistedFilePath((WebKit::NetworkStorageManager *)&v6, this, a2);
  v3 = v6;
  if (!v6)
    return 0;
  if (*((_DWORD *)v6 + 1))
  {
    v4 = WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v6, v2);
    v3 = v6;
    v6 = 0;
    if (!v3)
      return v4;
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v2);
  else
    *(_DWORD *)v3 -= 2;
  return v4;
}

uint64_t *WTF::Function<void ()(WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long,unsigned long long)>::Function<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = *a2;
  *(_QWORD *)v4 = &off_1E34C6AD0;
  *(_QWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v4 + 16, (uint64_t)(a2 + 1));
  *(_BYTE *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 72) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v4 + 48, (uint64_t)(a2 + 5));
  *(_QWORD *)(v4 + 80) = a2[9];
  *a1 = v4;
  return a1;
}

uint64_t WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;

  v2 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v2])(&v5, a1 + 40);
  *(_DWORD *)(a1 + 64) = -1;
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v6, a1 + 8);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

uint64_t *WTF::Function<void ()(unsigned long long)>::Function<WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = *a2;
  *(_QWORD *)v4 = &off_1E34C6AF8;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  *(_BYTE *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 48) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v4 + 24, (uint64_t)(a2 + 2));
  *(_BYTE *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v4 + 56, (uint64_t)(a2 + 6));
  *a1 = v4;
  return a1;
}

uint64_t WebKit::NetworkStorageManager::originQuotaManagerParameters(WebCore::ClientOrigin const&)::$_1::~$_1(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  char v7;
  char v8;

  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v3])(&v7, a1 + 48);
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v4])(&v8, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(unsigned __int8 **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  return a1;
}

uint64_t WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::ensure<WebKit::NetworkStorageManager::originStorageManager(WebCore::ClientOrigin const&,WebKit::NetworkStorageManager::ShouldWriteOriginFile)::$_0>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  int v8;
  unsigned int v9;
  WebKit::OriginStorageManager **v10;
  uint64_t *v11;
  WebKit::OriginStorageManager **v12;
  int v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  const WTF::String *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unsigned int v43;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _BYTE v55[24];
  int v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = WTF::computeHash<WebCore::ClientOrigin>(a3) & v8;
  v10 = (WebKit::OriginStorageManager **)(v6 + 72 * v9);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) != 0)
  {
    v11 = a2;
  }
  else
  {
    v12 = 0;
    v13 = 1;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v10);
      if ((v14 & 1) != 0)
      {
        v12 = v10;
      }
      else if (WebCore::operator==())
      {
        result = WebCore::operator==();
        if ((_DWORD)result)
        {
          v42 = *a2;
          if (*a2)
            v43 = *(_DWORD *)(v42 - 4);
          else
            v43 = 0;
          v28 = a1;
          v41 = 0;
          v40 = v42 + 72 * v43;
          goto LABEL_49;
        }
      }
      v9 = (v9 + v13) & v8;
      v10 = (WebKit::OriginStorageManager **)(v6 + 72 * v9);
      ++v13;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>());
    v11 = a2;
    if (v12)
    {
      v12[8] = 0;
      *((_OWORD *)v12 + 2) = 0u;
      *((_OWORD *)v12 + 3) = 0u;
      *(_OWORD *)v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      --*(_DWORD *)(*a2 - 16);
      v10 = v12;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v10, a3);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v10 + 4), a3 + 32);
  v16 = *a4;
  WebKit::originDirectoryPath((WTF::StringImpl *)&v49, *a4 + 56, (WebCore::SecurityOriginData *)a4[1]);
  WebKit::LocalStorageManager::localStorageFilePath((WTF::StringImpl *)&v48, *(const WTF::String **)(v16 + 144), (const WebCore::ClientOrigin *)a4[1]);
  WebKit::IDBStorageManager::idbStorageOriginDirectory((WTF::StringImpl *)&v47, (const WTF::String *)(v16 + 152), (const WebCore::ClientOrigin *)a4[1]);
  WebKit::CacheStorageManager::cacheStorageOriginDirectory((WebKit::CacheStorageManager *)(v16 + 160), (const WTF::String *)a4[1], &v46);
  WebKit::CacheStorageManager::copySaltFileToOriginDirectory((WebKit::CacheStorageManager *)(v16 + 160), (const WTF::String *)&v46, v17);
  *(_QWORD *)&v51 = *(_QWORD *)(v16 + 40);
  v18 = a4[1];
  BYTE8(v51) = 0;
  v54 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v51 + 8, v18);
  v55[0] = 0;
  v56 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v55, v18 + 32);
  v57 = *(_QWORD *)(v16 + 296);
  v19 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v19 = &off_1E34C6B48;
  *(_QWORD *)(v19 + 8) = v51;
  *(_BYTE *)(v19 + 16) = 0;
  *(_DWORD *)(v19 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v19 + 16, (uint64_t)&v51 + 8);
  *(_BYTE *)(v19 + 48) = 0;
  *(_DWORD *)(v19 + 72) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v19 + 48, (uint64_t)v55);
  *(_QWORD *)(v19 + 80) = v57;
  if (v56 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v56])(&v50, v55);
  v56 = -1;
  if (v54 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v54])(&v50, (char *)&v51 + 8);
  WebKit::NetworkStorageManager::originQuotaManagerParameters((WebKit::NetworkStorageManager *)&v51, (const WebCore::ClientOrigin *)v16, (const WebCore::ClientOrigin *)a4[1]);
  v20 = WTF::fastMalloc((WTF *)0x50);
  v21 = *(_BYTE *)(v16 + 289);
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  v23 = v48;
  v22 = v49;
  v48 = 0;
  v49 = 0;
  *(_QWORD *)(v20 + 16) = v22;
  *(_QWORD *)(v20 + 24) = v23;
  v25 = v46;
  v24 = v47;
  v46 = 0;
  v47 = 0;
  *(_QWORD *)(v20 + 32) = v24;
  *(_QWORD *)(v20 + 40) = v25;
  WebKit::OriginStorageManager::createQuotaManager((unsigned int *)v20, &v51, (uint64_t *)(v20 + 48));
  *(_BYTE *)(v20 + 56) = v21;
  *(_QWORD *)(v20 + 64) = 0x7FF8000000000000;
  *(_BYTE *)(v20 + 72) = 0;
  v26 = v53;
  v53 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v52;
  v52 = 0;
  v28 = a1;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v30 = v46;
  v46 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v47;
  v47 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v29);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v29);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v49;
  v49 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v29);
    else
      *(_DWORD *)v33 -= 2;
  }
  result = (uint64_t)std::unique_ptr<WebKit::OriginStorageManager>::reset[abi:sn180100](v10 + 8, (WebKit::OriginStorageManager *)v20);
  v34 = *v11;
  if (*v11)
    v35 = *(_DWORD *)(v34 - 12) + 1;
  else
    v35 = 1;
  *(_DWORD *)(v34 - 12) = v35;
  v36 = *v11;
  if (*v11)
    v37 = *(_DWORD *)(v36 - 12);
  else
    v37 = 0;
  v38 = (*(_DWORD *)(v36 - 16) + v37);
  v39 = *(unsigned int *)(v36 - 4);
  if (v39 > 0x400)
  {
    if (v39 <= 2 * v38)
    {
LABEL_46:
      result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v11, (WebCore::SecurityOriginData *)v10);
      v10 = (WebKit::OriginStorageManager **)result;
      v36 = *v11;
      if (*v11)
        LODWORD(v39) = *(_DWORD *)(v36 - 4);
      else
        LODWORD(v39) = 0;
    }
  }
  else if (3 * v39 <= 4 * v38)
  {
    goto LABEL_46;
  }
  v40 = v36 + 72 * v39;
  v41 = 1;
LABEL_49:
  *(_QWORD *)v28 = v10;
  *(_QWORD *)(v28 + 8) = v40;
  *(_BYTE *)(v28 + 16) = v41;
  return result;
}

uint64_t WebKit::NetworkStorageManager::persisted(WebKit::NetworkStorageManager *a1, const WebCore::ClientOrigin *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = WebKit::NetworkStorageManager::persistedInternal(a1, a2);
  v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebKit::NetworkStorageManager::didFetchRegistrableDomainsForPersist(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  _QWORD *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  WTF::StringImpl **v11;
  _QWORD *v12;

  if (!*(_BYTE *)(result + 72))
  {
    v3 = result;
    v9 = result;
    v4 = *(WTF::ThreadSafeWeakPtrControlBlock **)(result + 16);
    if (v4)
      v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
    v10 = v4;
    WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy(a2, (uint64_t *)&v11);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v5 = &off_1E34C6B98;
    v5[1] = v9;
    v5[2] = v10;
    v5[3] = v3;
    v6 = v11;
    v11 = 0;
    v12 = v5;
    v5[4] = v6;
    WTF::SuspendableWorkQueue::dispatch();
    v8 = v12;
    v12 = 0;
    if (v8)
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    if (v11)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v7);
    return 0;
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::persistOrigin(uint64_t this, const WebCore::ClientOrigin *a2)
{
  const WebCore::ClientOrigin *v3;
  uint64_t *v4;
  WebCore::RegistrableDomain *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if (*(_BYTE *)(this + 336))
  {
    v3 = (const WebCore::ClientOrigin *)this;
    v4 = (uint64_t *)(this + 328);
    v5 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host((const WebCore::ClientOrigin *)((char *)a2 + 32));
    WebCore::RegistrableDomain::uncheckedCreateFromHost(v5, &v11);
    v7 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v4, &v11);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    if ((v7 & 1) != 0)
    {
      WebKit::NetworkStorageManager::persistedFilePath((WebKit::NetworkStorageManager *)&v11, v3, a2);
      WTF::FileSystemImpl::overwriteEntireFile();
    }
    else
    {
      WebKit::NetworkStorageManager::persistedFilePath((WebKit::NetworkStorageManager *)&v11, v3, a2);
      v10 = v11;
      if (!v11)
        return v7;
      if (!*((_DWORD *)v11 + 1))
      {
        v11 = 0;
LABEL_12:
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
        return v7;
      }
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v11, v9);
    }
    v10 = v11;
    v11 = 0;
    if (v10)
      goto LABEL_12;
    return v7;
  }
  __break(1u);
  return this;
}

WTF::StringImpl *WebKit::NetworkStorageManager::persist(uint64_t a1, WebCore::SecurityOriginData *a2, WTF::RunLoop **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  WTF::RunLoop *v11;
  WTF::RunLoop *v12;
  WTF::StringImpl *result;
  WTF::RunLoop *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::RunLoop *v18;
  WTF::ThreadSafeWeakPtrControlBlock *v19;
  WTF::ThreadSafeWeakPtrControlBlock *v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23[3];
  int v24;
  _BYTE v25[24];
  int v26;
  WTF::RunLoop *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t)a2 + 32;
  if ((WebCore::operator==() & 1) == 0)
  {
    v12 = *a3;
    *a3 = 0;
    (*(void (**)(WTF::RunLoop *, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v12 + 8))(v12);
  }
  WebKit::NetworkStorageManager::persistedFilePath((WebKit::NetworkStorageManager *)v23, (const WebCore::ClientOrigin *)a1, a2);
  v8 = v23[0];
  if (!v23[0])
    goto LABEL_9;
  v9 = *((_DWORD *)v23[0] + 1);
  v23[0] = 0;
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
    if (v9)
      goto LABEL_5;
LABEL_9:
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(WTF::RunLoop *, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v11 + 8))(v11);
  }
  WTF::StringImpl::destroy(v8, v7);
  if (!v9)
    goto LABEL_9;
LABEL_5:
  if (*(_BYTE *)(a1 + 336))
  {
    v10 = WebKit::NetworkStorageManager::persistOrigin(a1, a2);
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(WTF::RunLoop *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10);
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v11 + 8))(v11);
  }
  LOBYTE(v23[0]) = 0;
  v24 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v23, (uint64_t)a2);
  v25[0] = 0;
  v26 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v25, v6);
  v14 = *a3;
  *a3 = 0;
  v27 = v14;
  v15 = *(unsigned int *)(a1 + 324);
  if ((_DWORD)v15 == *(_DWORD *)(a1 + 320))
  {
    v16 = WTF::Vector<std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 312), v15 + 1, (unint64_t)v23);
    v17 = *(_QWORD *)(a1 + 312) + 72 * *(unsigned int *)(a1 + 324);
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 312) + 72 * v15;
    v16 = (uint64_t)v23;
  }
  std::pair<WebCore::ClientOrigin,WTF::CompletionHandler<void ()(BOOL)>>::pair[abi:sn180100](v17, v16);
  ++*(_DWORD *)(a1 + 324);
  v18 = v27;
  v27 = 0;
  if (v18)
    v18 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v18 + 8))(v18);
  if (v26 != -1)
    v18 = (WTF::RunLoop *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v26])(&v22, v25);
  v26 = -1;
  if (v24 != -1)
    v18 = (WTF::RunLoop *)((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v24])(&v22, v23);
  WTF::RunLoop::main(v18);
  v19 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 16);
  if (v19)
    v20 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v19);
  else
    v20 = 0;
  v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v21 = &off_1E34C6BC0;
  *((_QWORD *)v21 + 1) = v20;
  *((_QWORD *)v21 + 2) = a1;
  v23[0] = v21;
  WTF::RunLoop::dispatch();
  result = v23[0];
  v23[0] = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::NetworkStorageManager::estimate(uint64_t a1, const WebCore::ClientOrigin *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;

  v4 = WebKit::NetworkStorageManager::originStorageManager(a1, a2);
  v5 = WebKit::OriginQuotaManager::usage(*(WebKit::OriginQuotaManager **)(v4 + 48));
  v6 = WebKit::OriginQuotaManager::reportedQuota(*(WebKit::OriginQuotaManager **)(v4 + 48));
  v7 = *a3;
  *a3 = 0;
  v9[0] = v5;
  v9[1] = v6;
  v10 = 1;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkStorageManager::resetStoragePersistedState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34C6BE8;
  v5[1] = a1;
  v5[2] = a1;
  v5[3] = v4;
  v7 = v5;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

uint64_t WebKit::NetworkStorageManager::clearStorageForWebPage(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E34C6C38;
  v4[1] = a1;
  v4[2] = a1;
  v4[3] = a2;
  v6 = v4;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

uint64_t WebKit::NetworkStorageManager::cloneSessionStorageForWebPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v6 = &off_1E34C6C60;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v8 = v6;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

unsigned __int8 *WebKit::NetworkStorageManager::didIncreaseQuota(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  unsigned __int8 *result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  int v19;
  _BYTE v20[24];
  int v21;
  __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v16 = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v17 = a1;
  WebCore::SecurityOriginData::isolatedCopy();
  WebCore::SecurityOriginData::isolatedCopy();
  *(_QWORD *)&v22 = a3;
  *((_QWORD *)&v22 + 1) = a4;
  v23 = a5;
  v9 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v9 = &off_1E34C6C88;
  *(_QWORD *)(v9 + 8) = v16;
  v10 = v17;
  v17 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  *(_BYTE *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 48) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v9 + 24, (uint64_t)v18);
  *(_BYTE *)(v9 + 56) = 0;
  *(_DWORD *)(v9 + 80) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v9 + 56, (uint64_t)v20);
  v11 = v22;
  *(_BYTE *)(v9 + 104) = v23;
  *(_OWORD *)(v9 + 88) = v11;
  WTF::SuspendableWorkQueue::dispatch();
  result = (unsigned __int8 *)v9;
  if (v9)
    result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v21 != -1)
    result = (unsigned __int8 *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v21])(&v15, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned __int8 *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v19])(&v15, v18);
  v19 = -1;
  v14 = v17;
  v17 = 0;
  if (v14)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 16), v12);
  return result;
}

uint64_t WebKit::NetworkStorageManager::fileSystemGetDirectory(uint64_t a1, uint64_t a2, const WebCore::ClientOrigin *a3, uint64_t *a4)
{
  WebKit::OriginStorageManager *v7;
  WebKit::FileSystemStorageManager *v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  _BYTE v15[16];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v7 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, a3);
  v8 = WebKit::OriginStorageManager::fileSystemStorageManager(v7, *(_QWORD *)(a1 + 112));
  v9 = *(const WTF::String **)(a2 + 24);
  v10 = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
  if (v10)
    *(_DWORD *)v10 += 2;
  v16 = 0;
  v17 = v10;
  WebKit::FileSystemStorageManager::createHandle((WTF::FileSystemImpl *)&v17, (uint64_t)v8, v9, 1, (uint64_t *)&v16, 1, (uint64_t)v15);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v11);
    else
      *(_DWORD *)v16 -= 2;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 16))(v13, v15);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

void WebKit::NetworkStorageManager::closeHandle(uint64_t a1, uint64_t a2)
{
  WebKit::FileSystemStorageHandle *Handle;

  Handle = (WebKit::FileSystemStorageHandle *)WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a2);
  if (Handle)
    WebKit::FileSystemStorageHandle::close(Handle);
}

uint64_t WebKit::NetworkStorageManager::isSameEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Handle;
  uint64_t isSameEntry;
  uint64_t v8;

  Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a2);
  if (Handle)
  {
    isSameEntry = WebKit::FileSystemStorageHandle::isSameEntry(Handle, a3);
    v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, isSameEntry);
  }
  else
  {
    v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t WebKit::NetworkStorageManager::move(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl *a4, uint64_t *a5)
{
  uint64_t Handle;
  uint64_t v9;
  uint64_t v10;

  Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a2);
  if (Handle)
  {
    v9 = (unsigned __int16)WebKit::FileSystemStorageHandle::move(Handle, a3, a4);
    v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v9);
  }
  else
  {
    v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 263);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

uint64_t WebKit::NetworkStorageManager::getFileHandle(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, char a5, uint64_t *a6)
{
  uint64_t Handle;
  uint64_t v11;
  __int128 v13;
  __int128 v14;

  Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a3);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::requestCreateHandle(a4, Handle, *(const WTF::String **)(a2 + 24), 0, a5, (uint64_t)&v13);
    v11 = *a6;
    *a6 = 0;
    v14 = v13;
  }
  else
  {
    v11 = *a6;
    *a6 = 0;
    LOBYTE(v14) = 7;
    DWORD2(v14) = 1;
  }
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 16))(v11, &v14);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkStorageManager::getDirectoryHandle(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, char a5, uint64_t *a6)
{
  uint64_t Handle;
  uint64_t v11;
  __int128 v13;
  __int128 v14;

  Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a3);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::requestCreateHandle(a4, Handle, *(const WTF::String **)(a2 + 24), (const WTF::String *)1, a5, (uint64_t)&v13);
    v11 = *a6;
    *a6 = 0;
    v14 = v13;
  }
  else
  {
    v11 = *a6;
    *a6 = 0;
    LOBYTE(v14) = 7;
    DWORD2(v14) = 1;
  }
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 16))(v11, &v14);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkStorageManager::removeEntry(uint64_t a1, uint64_t a2, const WTF::String *a3, const WTF::String *a4, uint64_t *a5)
{
  WebKit::FileSystemStorageHandle *Handle;
  uint64_t v9;
  uint64_t v10;

  Handle = (WebKit::FileSystemStorageHandle *)WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a2);
  if (Handle)
  {
    v9 = (unsigned __int16)WebKit::FileSystemStorageHandle::removeEntry(Handle, a3, a4);
    v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v9);
  }
  else
  {
    v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 263);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

uint64_t WebKit::NetworkStorageManager::resolve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Handle;
  uint64_t result;
  _BYTE v8[16];
  int v9;
  _BYTE v10[16];
  int v11;
  char v12;

  Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a2);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::resolve(Handle, a3, (uint64_t)v8);
    result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)>::operator()(a4, (uint64_t)v8);
    if (v9 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34C6890[v9])(&v12, v8);
  }
  else
  {
    v10[0] = 7;
    v11 = 1;
    result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)>::operator()(a4, (uint64_t)v10);
    if (v11 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34C6890[v11])(&v12, v10);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v4[16];
  int v5;
  _BYTE v6[16];
  int v7;
  char v8;

  v2 = *a1;
  *a1 = 0;
  v4[0] = 0;
  v5 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v4, a2);
  v6[0] = 0;
  v7 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v6, (uint64_t)v4);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v6);
  if (v7 != -1)
    ((void (*)(char *, _BYTE *))off_1E34C6890[v7])(&v8, v6);
  if (v5 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E34C6890[v5])(v6, v4);
  v5 = -1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebKit::NetworkStorageManager::getFile(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Handle;
  _DWORD *v5;
  uint64_t result;
  _DWORD *v7;
  int v8;
  char v9[8];
  int v10;
  char v11;

  Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a2);
  if (Handle)
  {
    v5 = *(_DWORD **)(Handle + 32);
    if (v5)
      *v5 += 2;
    v7 = v5;
    v8 = 0;
    result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>)>::operator()(a3, (uint64_t)&v7);
    if (v8 != -1)
      return ((uint64_t (*)(char *, _DWORD **))off_1E34C68A0[v8])(&v11, &v7);
  }
  else
  {
    v9[0] = 7;
    v10 = 1;
    result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>)>::operator()(a3, (uint64_t)v9);
    if (v10 != -1)
      return ((uint64_t (*)(char *, char *))off_1E34C68A0[v10])(&v11, v9);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v4[8];
  int v5;
  _BYTE v6[8];
  int v7;
  char v8;

  v2 = *a1;
  *a1 = 0;
  v4[0] = 0;
  v5 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v4, a2);
  v6[0] = 0;
  v7 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v6, (uint64_t)v4);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v6);
  if (v7 != -1)
    ((void (*)(char *, _BYTE *))off_1E34C68A0[v7])(&v8, v6);
  if (v5 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E34C68A0[v5])(v6, v4);
  v5 = -1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebKit::NetworkStorageManager::createSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Handle;
  uint64_t result;
  _BYTE v6[40];
  unsigned int v7;
  _BYTE v8[40];
  unsigned int v9;
  char v10;

  Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a2);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::createSyncAccessHandle(Handle, (uint64_t)v6);
    result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>)>::operator()(a3, (uint64_t)v6);
    if (v7 != -1)
      return ((uint64_t (*)(char *, _BYTE *))*(&off_1E34C68B0 + v7))(&v10, v6);
  }
  else
  {
    v8[0] = 7;
    v9 = 1;
    result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>)>::operator()(a3, (uint64_t)v8);
    if (v9 != -1)
      return ((uint64_t (*)(char *, _BYTE *))*(&off_1E34C68B0 + v9))(&v10, v8);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v4[40];
  unsigned int v5;
  _BYTE v6[40];
  unsigned int v7;
  char v8;

  v2 = *a1;
  *a1 = 0;
  v4[0] = 0;
  v5 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v4, a2);
  v6[0] = 0;
  v7 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v6, (uint64_t)v4);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v6);
  if (v7 != -1)
    ((void (*)(char *, _BYTE *))*(&off_1E34C68B0 + v7))(&v8, v6);
  if (v5 != -1)
    ((void (*)(_BYTE *, _BYTE *))*(&off_1E34C68B0 + v5))(v6, v4);
  v5 = -1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebKit::NetworkStorageManager::closeSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Handle;
  uint64_t v7;

  Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a2);
  if (Handle)
    WebKit::FileSystemStorageHandle::closeSyncAccessHandle(Handle, a3);
  v7 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkStorageManager::requestNewCapacityForSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t Handle;
  uint64_t v10;

  Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a2);
  if (Handle)
    return WebKit::FileSystemStorageHandle::requestNewCapacityForSyncAccessHandle(Handle, a3, a4, a5);
  v10 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

uint64_t WebKit::NetworkStorageManager::getHandleNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Handle;
  const WTF::String *v5;
  uint64_t result;
  _BYTE v7[16];
  int v8;
  _BYTE v9[16];
  int v10;
  char v11;

  Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a2);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::getHandleNames(Handle, v5, (uint64_t)v7);
    result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)>::operator()(a3, (uint64_t)v7);
    if (v8 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34C6890[v8])(&v11, v7);
  }
  else
  {
    v9[0] = 7;
    v10 = 1;
    result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>)>::operator()(a3, (uint64_t)v9);
    if (v10 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34C6890[v10])(&v11, v9);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::getHandle(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, uint64_t *a5)
{
  uint64_t Handle;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  Handle = WebKit::FileSystemStorageHandleRegistry::getHandle(*(unsigned int ***)(a1 + 112), a3);
  if (Handle)
  {
    WebKit::FileSystemStorageHandle::getHandle(a4, Handle, *(const WTF::String **)(a2 + 24), (uint64_t)&v11);
    v9 = *a5;
    *a5 = 0;
    v14 = v12;
    v13 = v11;
  }
  else
  {
    v9 = *a5;
    *a5 = 0;
    LOBYTE(v13) = 7;
    LODWORD(v14) = 1;
  }
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v9 + 16))(v9, &v13);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::updateOriginData(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  char v12;
  uint64_t result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  _DWORD *v29;
  int v30;
  _QWORD v31[3];
  __int128 v32;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  LODWORD(v31[0]) = -1640531527;
  WORD2(v31[0]) = 0;
  BYTE6(v31[0]) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v31, a2);
  v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v31) & v7;
  v9 = (uint64_t *)(v6 + 40 * v8);
  if ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9) & 1) == 0)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v9);
      if ((v12 & 1) != 0)
      {
        v10 = v9;
      }
      else
      {
        result = WebCore::operator==();
        if ((result & 1) != 0)
          goto LABEL_23;
      }
      v8 = (v8 + v11) & v7;
      v9 = (uint64_t *)(v6 + 40 * v8);
      ++v11;
    }
    while (!WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9));
    if (v10)
    {
      v10[4] = 0;
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      --*(_DWORD *)(*a1 - 16);
      v9 = v10;
    }
  }
  result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v9, a2);
  v15 = v9[4];
  v9[4] = 0;
  if (v15)
    result = WTF::fastFree((WTF *)(v15 - 16), v14);
  v16 = *a1;
  if (*a1)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 <= 0x400)
  {
    if (3 * v21 > 4 * v20)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v21 <= 2 * v20)
  {
LABEL_22:
    result = (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(a1, (unsigned int *)v9);
    v9 = (uint64_t *)result;
  }
LABEL_23:
  v22 = (_DWORD *)*a3;
  if (*a3)
  {
    v23 = *(v22 - 1);
    v24 = &v22[4 * v23];
    if (*(v22 - 3))
    {
      v25 = v22;
      if ((_DWORD)v23)
      {
        v26 = 16 * v23;
        v25 = v22;
        while (*v25 >= 0xFFFFFFFE)
        {
          v25 += 4;
          v26 -= 16;
          if (!v26)
          {
            v25 = v24;
            break;
          }
        }
      }
      if (v22)
        goto LABEL_31;
      goto LABEL_35;
    }
    v25 = &v22[4 * v23];
  }
  else
  {
    v25 = 0;
    v23 = 0;
  }
  v24 = &v22[4 * v23];
  if (v22)
  {
LABEL_31:
    v27 = &v22[4 * *(v22 - 1)];
    goto LABEL_36;
  }
LABEL_35:
  v27 = 0;
LABEL_36:
  if (v27 != v25)
  {
    v28 = v9 + 4;
    do
    {
      v32 = *(_OWORD *)v25;
      v30 = 0;
      result = (uint64_t)WTF::HashMap<WebKit::WebsiteDataType,unsigned long long,WTF::IntHash<WebKit::WebsiteDataType>,WTF::StrongEnumHashTraits<WebKit::WebsiteDataType>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<int>(v28, (int *)&v32, &v30, (uint64_t)v31);
      *(_QWORD *)(v31[0] + 8) += *((_QWORD *)&v32 + 1);
      v29 = v25 + 4;
      v25 = v24;
      if (v29 != v24)
      {
        v25 = v29;
        while (*v25 >= 0xFFFFFFFE)
        {
          v25 += 4;
          if (v25 == v24)
          {
            v25 = v24;
            break;
          }
        }
      }
    }
    while (v25 != v27);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::fetchData(uint64_t a1, int a2, char a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v8 = *a4;
  *a4 = 0;
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v9 = &off_1E34C6D08;
  *(_QWORD *)(v9 + 8) = a1;
  *(_QWORD *)(v9 + 16) = a1;
  *(_DWORD *)(v9 + 24) = a2;
  *(_BYTE *)(v9 + 28) = a3;
  *(_QWORD *)(v9 + 32) = v8;
  v11 = v9;
  WTF::SuspendableWorkQueue::dispatch();
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

uint64_t WebKit::NetworkStorageManager::deleteDataOnDisk(uint64_t *a1, WebCore::SecurityOriginData **a2, unsigned int a3, _QWORD *a4, double a5)
{
  WebCore::SecurityOriginData *v10;
  WebCore::SecurityOriginData *v11;
  WebCore::SecurityOriginData *v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  WebKit::OriginStorageManager *v16;
  WTF::StringImpl *v17;
  WebKit::OriginStorageManager *v18;
  WTF::StringImpl *v19;
  const WTF::String *v20;
  WTF::StringImpl *v21;
  void *v22;
  WTF::StringImpl *v23[3];
  uint64_t v24;
  WebCore::SecurityOriginData *v25[2];
  uint64_t v26;

  *a1 = 0;
  WebKit::NetworkStorageManager::getAllOrigins((WebKit::NetworkStorageManager *)&v26, a2);
  v11 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(&v26);
  v12 = 0;
  v25[0] = v11;
  v25[1] = v10;
  result = v26;
  if (v26)
    v12 = (WebCore::SecurityOriginData *)(v26 + ((unint64_t)*(unsigned int *)(v26 - 4) << 6));
  if (v12 != v11)
  {
    v14 = a3;
    v15 = *(_QWORD *)&a3 & 0x8C0B0;
    while (!(*(unsigned int (**)(_QWORD, WebCore::SecurityOriginData *))(*(_QWORD *)*a4 + 16))(*a4, v11))
    {
LABEL_20:
      v25[0] = (WebCore::SecurityOriginData *)((char *)v25[0] + 64);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v25);
      v11 = v25[0];
      if (v25[0] == v12)
      {
        result = v26;
        goto LABEL_22;
      }
    }
    v16 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)a2, v11);
    v17 = WebKit::OriginStorageManager::defaultBucket(v16);
    WebKit::OriginStorageManager::StorageBucket::fetchDataTypesInList(v17, v14, 0, &v24);
    if (v24 && *(_DWORD *)(v24 - 12))
    {
      WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add(a1, (uint64_t)v11, (uint64_t)v23);
      v18 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)a2, v11);
      v19 = WebKit::OriginStorageManager::defaultBucket(v18);
      WebKit::OriginStorageManager::StorageBucket::deleteData(v19, (void *)v14, a5);
    }
    if (v15 == 573616)
    {
      WebKit::NetworkStorageManager::persistedFilePath((WebKit::NetworkStorageManager *)v23, (const WebCore::ClientOrigin *)a2, v11);
      v21 = v23[0];
      if (v23[0])
      {
        if (*((_DWORD *)v23[0] + 1))
        {
          WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)v23, v20);
          v21 = v23[0];
          v23[0] = 0;
          if (!v21)
            goto LABEL_18;
        }
        else
        {
          v23[0] = 0;
        }
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
LABEL_18:
    WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible((WebKit::NetworkStorageManager *)a2, v11);
    if (v24)
      WTF::fastFree((WTF *)(v24 - 16), v22);
    goto LABEL_20;
  }
LABEL_22:
  if (result)
    return WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(result, v10);
  return result;
}

uint64_t WebKit::NetworkStorageManager::deleteData(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v17 = 0;
  v18 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore18SecurityOriginDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_((uint64_t)&v17, a3);
  v8 = *a4;
  *a4 = 0;
  v19 = v8;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v9 = off_1E34C6D58;
  *(_QWORD *)(v9 + 8) = a1;
  *(_QWORD *)(v9 + 16) = a1;
  *(_DWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = v17;
  v10 = v18;
  v17 = 0;
  v18 = 0;
  *(_QWORD *)(v9 + 40) = v10;
  v11 = v19;
  v19 = 0;
  v20 = v9;
  *(_QWORD *)(v9 + 48) = v11;
  WTF::SuspendableWorkQueue::dispatch();
  v13 = v20;
  v20 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v12);
}

unsigned __int8 *WebKit::NetworkStorageManager::deleteData(uint64_t a1, int a2, uint64_t a3, unsigned __int8 **a4)
{
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned __int8 *result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE v18[24];
  int v19;
  _BYTE v20[24];
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v16 = a1;
  v17 = a2;
  WebCore::SecurityOriginData::isolatedCopy();
  WebCore::SecurityOriginData::isolatedCopy();
  v7 = *a4;
  *a4 = 0;
  v22 = v7;
  v8 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v8 = &off_1E34C6DD0;
  *(_QWORD *)(v8 + 8) = v15;
  v9 = v16;
  v16 = 0;
  *(_QWORD *)(v8 + 16) = v9;
  *(_DWORD *)(v8 + 24) = v17;
  *(_BYTE *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v8 + 32, (uint64_t)v18);
  *(_BYTE *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 88) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v8 + 64, (uint64_t)v20);
  v10 = v22;
  v22 = 0;
  *(_QWORD *)(v8 + 96) = v10;
  WTF::SuspendableWorkQueue::dispatch();
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  result = v22;
  v22 = 0;
  if (result)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  if (v21 != -1)
    result = (unsigned __int8 *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v21])(&v14, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned __int8 *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v19])(&v14, v18);
  v19 = -1;
  v13 = v16;
  v16 = 0;
  if (v13)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v13 + 16), v11);
  return result;
}

uint64_t WebKit::NetworkStorageManager::deleteDataModifiedSince(uint64_t a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v8 = *a3;
  *a3 = 0;
  v9 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v9 = &off_1E34C6E48;
  *(_QWORD *)(v9 + 8) = a1;
  *(_QWORD *)(v9 + 16) = a1;
  *(_DWORD *)(v9 + 24) = a2;
  *(double *)(v9 + 32) = a4;
  *(_QWORD *)(v9 + 40) = v8;
  v11 = v9;
  WTF::SuspendableWorkQueue::dispatch();
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

uint64_t WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v17 = 0;
  v18 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN7WebCore17RegistrableDomainELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS7_EUlRT_E_S7_SA_vE3mapERS7_SA_RKSD_((WTF::StringImpl *)&v17, a3);
  v8 = *a4;
  *a4 = 0;
  v19 = v8;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v9 = off_1E34C6EC0;
  *(_QWORD *)(v9 + 8) = a1;
  *(_QWORD *)(v9 + 16) = a1;
  *(_DWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = v17;
  v10 = v18;
  v17 = 0;
  v18 = 0;
  *(_QWORD *)(v9 + 40) = v10;
  v11 = v19;
  v19 = 0;
  v20 = v9;
  *(_QWORD *)(v9 + 48) = v11;
  WTF::SuspendableWorkQueue::dispatch();
  v13 = v20;
  v20 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v12);
}

unsigned __int8 *WebKit::NetworkStorageManager::moveData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  void *v12;
  unsigned __int8 *result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v19[24];
  int v20;
  _BYTE v21[24];
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v16 = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v17 = a1;
  v18 = a2;
  WebCore::SecurityOriginData::isolatedCopy();
  WebCore::SecurityOriginData::isolatedCopy();
  v8 = *a5;
  *a5 = 0;
  v23 = v8;
  v9 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v9 = &off_1E34C6F38;
  *(_QWORD *)(v9 + 8) = v16;
  v10 = v17;
  v17 = 0;
  *(_QWORD *)(v9 + 16) = v10;
  *(_DWORD *)(v9 + 24) = v18;
  *(_BYTE *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v9 + 32, (uint64_t)v19);
  *(_BYTE *)(v9 + 64) = 0;
  *(_DWORD *)(v9 + 88) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v9 + 64, (uint64_t)v21);
  v11 = v23;
  v23 = 0;
  *(_QWORD *)(v9 + 96) = v11;
  WTF::SuspendableWorkQueue::dispatch();
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v23;
  v23 = 0;
  if (result)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  if (v22 != -1)
    result = (unsigned __int8 *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v22])(&v15, v21);
  v22 = -1;
  if (v20 != -1)
    result = (unsigned __int8 *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v20])(&v15, v19);
  v20 = -1;
  v14 = v17;
  v17 = 0;
  if (v14)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 16), v12);
  return result;
}

unsigned __int8 *WebKit::NetworkStorageManager::getOriginDirectory(uint64_t a1, uint64_t a2, int a3, unsigned __int8 **a4)
{
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned __int8 *result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE v18[24];
  int v19;
  _BYTE v20[24];
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v16 = a1;
  v17 = a3;
  WebCore::SecurityOriginData::isolatedCopy();
  WebCore::SecurityOriginData::isolatedCopy();
  v7 = *a4;
  *a4 = 0;
  v22 = v7;
  v8 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v8 = &off_1E34C6F60;
  *(_QWORD *)(v8 + 8) = v15;
  v9 = v16;
  v16 = 0;
  *(_QWORD *)(v8 + 16) = v9;
  *(_DWORD *)(v8 + 24) = v17;
  *(_BYTE *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v8 + 32, (uint64_t)v18);
  *(_BYTE *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 88) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v8 + 64, (uint64_t)v20);
  v10 = v22;
  v22 = 0;
  *(_QWORD *)(v8 + 96) = v10;
  WTF::SuspendableWorkQueue::dispatch();
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  result = v22;
  v22 = 0;
  if (result)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  if (v21 != -1)
    result = (unsigned __int8 *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v21])(&v14, v20);
  v21 = -1;
  if (v19 != -1)
    result = (unsigned __int8 *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v19])(&v14, v18);
  v19 = -1;
  v13 = v16;
  v16 = 0;
  if (v13)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v13 + 16), v11);
  return result;
}

uint64_t WebKit::NetworkStorageManager::syncLocalStorage(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD v9[3];
  _QWORD *v10;

  v9[0] = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34C7000;
  v5[1] = a1;
  v5[2] = a1;
  v5[3] = v4;
  v9[1] = 0;
  v9[2] = 0;
  v10 = v5;
  WTF::SuspendableWorkQueue::dispatch();
  v7 = v10;
  v10 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v9, v6);
}

uint64_t WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WebKit::NetworkStorageManager::registerTemporaryBlobFilePaths(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v12 = *(_QWORD *)(a2 + 24);
  v13 = 0;
  v14 = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS6_EUlRT_E_S6_S9_vE3mapERS6_S9_RKSC_((uint64_t)&v13, a3);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v6 = off_1E34C7028;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = v12;
  v6[4] = v13;
  v7 = v14;
  v13 = 0;
  v14 = 0;
  v6[5] = v7;
  v15 = v6;
  WTF::SuspendableWorkQueue::dispatch();
  v9 = v15;
  v15 = 0;
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v8);
}

uint64_t WebKit::NetworkStorageManager::resetQuotaForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34C7050;
  v5[1] = a1;
  v5[2] = a1;
  v5[3] = v4;
  v7 = v5;
  WTF::SuspendableWorkQueue::dispatch();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

WebCore::SecurityOriginData *WebKit::NetworkStorageManager::resetQuotaUpdatedBasedOnUsageForTesting(uint64_t a1, uint64_t a2)
{
  WebCore::SecurityOriginData *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>>,WebCore::ClientOrigin>(*(WebCore::SecurityOriginData **)(a1 + 80), a2);
  if (result)
  {
    v3 = *((_QWORD *)result + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 48);
      v5 = *(_QWORD *)(v4 + 104);
      *(_QWORD *)(v4 + 80) = 0;
      *(_QWORD *)(v4 + 88) = v5;
      if (*(_BYTE *)(v4 + 120))
        *(_BYTE *)(v4 + 120) = 0;
    }
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::setOriginQuotaRatioEnabledForTesting(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v6 = *a3;
  *a3 = 0;
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v7 = &off_1E34C7078;
  *(_QWORD *)(v7 + 8) = a1;
  *(_QWORD *)(v7 + 16) = a1;
  *(_BYTE *)(v7 + 24) = a2;
  *(_QWORD *)(v7 + 32) = v6;
  v9 = v7;
  WTF::SuspendableWorkQueue::dispatch();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t WebKit::NetworkStorageManager::setBackupExclusionPeriodForTesting(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v6 = *a2;
  *a2 = 0;
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v7 = &off_1E34C70A0;
  *(_QWORD *)(v7 + 8) = a1;
  *(_QWORD *)(v7 + 16) = a1;
  *(double *)(v7 + 24) = a3;
  *(_QWORD *)(v7 + 32) = v6;
  v9 = v7;
  WTF::SuspendableWorkQueue::dispatch();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t WebKit::NetworkStorageManager::setStorageSiteValidationEnabledInternal(uint64_t this, WTF::StringImpl *a2)
{
  int v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(this + 376);
  if ((*(_BYTE *)(this + 376) != 0) != (_DWORD)a2)
  {
    v3 = this;
    this += 368;
    if ((_DWORD)a2)
    {
      v5 = 0;
      std::optional<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>,void>(this, (WTF::StringImpl *)&v5);
      this = v5;
      if (v5)
        return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, v4);
    }
    else if (v2)
    {
      this = *(_QWORD *)this;
      if (this)
        this = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(this, a2);
      *(_BYTE *)(v3 + 376) = 0;
    }
  }
  return this;
}

uint64_t std::optional<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>,void>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v4 = *(_QWORD *)a1;
    *(_QWORD *)a1 = v3;
    if (v4)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v4, a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    v5 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

uint64_t WebKit::NetworkStorageManager::setStorageSiteValidationEnabled(WebKit::NetworkStorageManager *this, char a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 2);
  if (v4)
    v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  else
    v5 = 0;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = &off_1E34C70C8;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 16) = this;
  *(_BYTE *)(v6 + 24) = a2;
  v8 = v6;
  WTF::SuspendableWorkQueue::dispatch();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

WTF::StringImpl **WebKit::NetworkStorageManager::addAllowedSitesForConnectionInternal(WTF::StringImpl **result, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t *v7;
  WTF::ASCIICaseInsensitiveHash **v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11[3];
  uint64_t v12;

  v12 = a2;
  if (*((_BYTE *)result + 376))
  {
    v10 = 0;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(v11, (uint64_t *)result + 46, &v12, (uint64_t *)&v10);
    result = v10;
    v5 = v11[0];
    if (v10)
      result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v4);
    v6 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v6)
    {
      v7 = (uint64_t *)((char *)v5 + 8);
      v8 = *(WTF::ASCIICaseInsensitiveHash ***)a3;
      v9 = 8 * v6;
      do
      {
        result = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v7, v8++, (uint64_t)v11);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(WTF::StringImpl **result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  WTF::StringImpl **v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v23;
        goto LABEL_31;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a4;
  *a4 = 0;
  result = (WTF::StringImpl **)v16[1];
  v16[1] = v20;
  if (result)
    result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, (WTF::StringImpl *)a2);
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_24:
      result = (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v16);
      v16 = (uint64_t *)result;
      v24 = *a2;
      if (*a2)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_24;
  }
  v29 = v24 + 16 * v27;
  v28 = 1;
LABEL_31:
  *v7 = (WTF::StringImpl *)v16;
  v7[1] = (WTF::StringImpl *)v29;
  *((_BYTE *)v7 + 16) = v28;
  return result;
}

unsigned __int8 **WebKit::NetworkStorageManager::addAllowedSitesForConnection(WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::~$_0(unsigned __int8 **a1, void *a2)
{
  void *v3;
  unsigned __int8 *v4;

  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v4 = *a1;
  *a1 = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
  return a1;
}

uint64_t WebKit::NetworkStorageManager::isSiteAllowedForConnection(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!*(_BYTE *)(a1 + 376))
    return 1;
  v5 = *(_QWORD *)(a1 + 368);
  v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5, a2);
  if (v5)
    v7 = v5 + 16 * *(unsigned int *)(v5 - 4);
  else
    v7 = 0;
  if (v7 == v6)
    return 0;
  else
    return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(v6 + 8), a3);
}

WTF::StringImpl **WebKit::NetworkStorageManager::connectToStorageArea(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, char a6, WebCore::SecurityOriginData *a7, uint64_t *a8)
{
  uint64_t v16;
  WTF::StringImpl *v17;
  char isSiteAllowedForConnection;
  WTF::StringImpl *v19;
  void *v20;
  WebKit::OriginStorageManager *v21;
  uint64_t v22;
  WebKit::OriginStorageManager::StorageBucket *v23;
  _QWORD *v24;
  WTF::WorkQueue *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t StorageArea;
  WebKit::StorageAreaBase *v29;
  WebKit::StorageAreaBase *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **result;
  uint64_t v33;
  WebKit::OriginStorageManager::StorageBucket *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WebKit::OriginStorageManager::StorageBucket *v39;
  WTF *v40;
  NSObject *v41;
  _BOOL8 v42;
  WTF::StringImpl **v43;
  WTF::StringImpl **v44;
  WTF::StringImpl **v45;
  WTF::StringImpl **v46;
  uint64_t v47[2];
  _BYTE buf[24];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)(a2 + 24);
  WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, a7);
  isSiteAllowedForConnection = WebKit::NetworkStorageManager::isSiteAllowedForConnection(a1, v16, (WTF::ASCIICaseInsensitiveHash **)buf);
  v19 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  if ((isSiteAllowedForConnection & 1) != 0)
  {
    v20 = *(void **)(a2 + 24);
    v47[0] = a1;
    v47[1] = (uint64_t)a7;
    WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::ensure<WebKit::NetworkStorageManager::originStorageManager(WebCore::ClientOrigin const&,WebKit::NetworkStorageManager::ShouldWriteOriginFile)::$_0>((uint64_t)buf, (uint64_t *)(a1 + 80), (uint64_t)a7, v47);
    v21 = *(WebKit::OriginStorageManager **)(*(_QWORD *)buf + 64);
    if (a3 == 1)
    {
      v22 = *(_QWORD *)(a1 + 120);
      v23 = WebKit::OriginStorageManager::defaultBucket(v21);
      v24 = (_QWORD *)WebKit::OriginStorageManager::StorageBucket::localStorageManager(v23, v22);
      v25 = *(WTF::WorkQueue **)(a1 + 48);
      WTF::WorkQueue::ref(v25);
      *(_QWORD *)buf = v25;
      v26 = WebKit::LocalStorageManager::connectToLocalStorageArea(v24, v20, a4, a7, (uint64_t)buf);
      v27 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 56))(v27);
      goto LABEL_8;
    }
    if (a3)
    {
      if (a3 != 2)
      {
        v26 = 0;
        goto LABEL_8;
      }
      v33 = *(_QWORD *)(a1 + 120);
      v34 = WebKit::OriginStorageManager::defaultBucket(v21);
      v35 = WebKit::OriginStorageManager::StorageBucket::localStorageManager(v34, v33);
      v36 = WebKit::LocalStorageManager::connectToTransientLocalStorageArea(v35, v20, a4, a7);
    }
    else
    {
      if (!a6)
      {
        v45 = 0;
        WebKit::StorageAreaBase::nextMessageIdentifier(v21);
        WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(a8, 0, &v45);
        result = v45;
        if (!v45)
          return result;
        return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v37);
      }
      v38 = *(_QWORD *)(a1 + 120);
      v39 = WebKit::OriginStorageManager::defaultBucket(v21);
      v40 = WebKit::OriginStorageManager::StorageBucket::sessionStorageManager((uint64_t)v39, v38);
      v36 = WebKit::SessionStorageManager::connectToSessionStorageArea((uint64_t)v40, v20, a4, a7, a5);
    }
    v26 = v36;
LABEL_8:
    StorageArea = WebKit::StorageAreaRegistry::getStorageArea(*(uint64_t **)(a1 + 120), v26);
    if (StorageArea)
    {
      v29 = (WebKit::StorageAreaBase *)StorageArea;
      v30 = (WebKit::StorageAreaBase *)(*(_QWORD *(**)(WTF::StringImpl ***__return_ptr))(*(_QWORD *)StorageArea
                                                                                                  + 48))(&v44);
      WebKit::StorageAreaBase::nextMessageIdentifier(v30);
      WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(a8, v26, &v44);
      if (v44)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v44, v31);
      return (WTF::StringImpl **)WebKit::NetworkStorageManager::writeOriginToFileIfNecessary((WebCore::SecurityOriginData **)a1, a7, v29);
    }
    v43 = 0;
    WebKit::StorageAreaBase::nextMessageIdentifier(0);
    WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(a8, v26, &v43);
    result = v43;
    if (!v43)
      return result;
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v37);
  }
  v41 = off_1ECE71C40;
  v42 = os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT);
  if (v42)
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::NetworkStorageManager::connectToStorageArea(IPC::Connection &, WebCore::StorageTyp"
                         "e, StorageAreaMapIdentifier, std::optional<StorageNamespaceIdentifier>, const WebCore::ClientOr"
                         "igin &, CompletionHandler<void (StorageAreaIdentifier, HashMap<String, String>, uint64_t)> &&)";
    _os_log_fault_impl(&dword_196BCC000, v41, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1383: Invalid message dispatched %s", buf, 0xCu);
  }
  *(_BYTE *)(a2 + 98) = 1;
  v46 = 0;
  WebKit::StorageAreaBase::nextMessageIdentifier((WebKit::StorageAreaBase *)v42);
  WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(a8, 0, &v46);
  result = v46;
  if (v46)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v37);
  return result;
}

WTF::StringImpl **WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(uint64_t *a1, uint64_t a2, WTF::StringImpl ***a3)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **result;
  WTF::StringImpl **v7;

  v3 = *a1;
  *a1 = 0;
  v4 = *a3;
  *a3 = 0;
  v7 = v4;
  WTF::Function<void ()(WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long)>::operator()(v3, a2, &v7);
  result = v7;
  if (v7)
    result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v5);
  if (v3)
    return (WTF::StringImpl **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

void WebKit::NetworkStorageManager::cancelConnectToStorageArea(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, WebCore::SecurityOriginData *a6)
{
  uint64_t v12;
  WTF::StringImpl *v13;
  char isSiteAllowedForConnection;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  BOOL v22;
  _BYTE v23[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a2 + 24);
  WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)v23, a6);
  isSiteAllowedForConnection = WebKit::NetworkStorageManager::isSiteAllowedForConnection(a1, v12, (WTF::ASCIICaseInsensitiveHash **)v23);
  v15 = *(WTF::StringImpl **)v23;
  *(_QWORD *)v23 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v13);
      if ((isSiteAllowedForConnection & 1) != 0)
        goto LABEL_5;
      goto LABEL_14;
    }
    *(_DWORD *)v15 -= 2;
  }
  if ((isSiteAllowedForConnection & 1) != 0)
  {
LABEL_5:
    v16 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 80), (uint64_t)a6);
    v17 = *(_QWORD *)(a1 + 80);
    if (v17)
      v17 += 72 * *(unsigned int *)(v17 - 4);
    if (v17 != v16)
    {
      v18 = *(_QWORD *)(a2 + 24);
      if (a3)
      {
        if (a3 == 2 || a3 == 1)
        {
          v19 = *((_QWORD *)WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v16 + 64)) + 4);
          if (v19)
            WebKit::LocalStorageManager::connectionClosedForLocalStorageArea(v19, v18);
        }
      }
      else
      {
        v21 = *((_QWORD *)WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v16 + 64)) + 7);
        if (v21)
          v22 = a5 == 0;
        else
          v22 = 1;
        if (!v22)
          WebKit::SessionStorageManager::cancelConnectToSessionStorageArea(v21, v18, a4);
      }
    }
    return;
  }
LABEL_14:
  v20 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)v23 = 136315138;
    *(_QWORD *)&v23[4] = "void WebKit::NetworkStorageManager::cancelConnectToStorageArea(IPC::Connection &, WebCore::Stor"
                         "ageType, std::optional<StorageNamespaceIdentifier>, const WebCore::ClientOrigin &)";
    _os_log_fault_impl(&dword_196BCC000, v20, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1419: Invalid message dispatched %s", v23, 0xCu);
  }
  *(_BYTE *)(a2 + 98) = 1;
}

void WebKit::NetworkStorageManager::disconnectFromStorageArea(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t StorageArea;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char isSiteAllowedForConnection;
  WTF::StringImpl *v13;
  WebKit::OriginStorageManager *v14;
  uint64_t v15;
  WebKit::OriginStorageManager::StorageBucket *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebKit::OriginStorageManager *v20;
  uint64_t v21;
  WebKit::OriginStorageManager::StorageBucket *v22;
  WTF *v23;
  uint64_t v24;
  NSObject *v25;
  WTF::StringImpl *v26;
  char v27;
  uint8_t buf[4];
  const char *v29;
  int v30;
  _BYTE v31[24];
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  StorageArea = WebKit::StorageAreaRegistry::getStorageArea(*(uint64_t **)(a1 + 120), a3);
  if (StorageArea)
  {
    v7 = StorageArea;
    v8 = *(_QWORD *)(a2 + 24);
    v9 = StorageArea + 32;
    buf[0] = 0;
    v30 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, StorageArea + 32);
    v10 = v7 + 64;
    v31[0] = 0;
    v32 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v31, v7 + 64);
    WebCore::RegistrableDomain::RegistrableDomain(&v26, (const WebCore::SecurityOriginData *)buf);
    isSiteAllowedForConnection = WebKit::NetworkStorageManager::isSiteAllowedForConnection(a1, v8, &v26);
    v13 = v26;
    v26 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (v32 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v32])(&v27, v31);
    v32 = -1;
    if (v30 != -1)
      ((void (*)(char *, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v30])(&v27, buf);
    if ((isSiteAllowedForConnection & 1) != 0)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
      {
        buf[0] = 0;
        v30 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v9);
        v31[0] = 0;
        v32 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v31, v10);
        v14 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, (const WebCore::ClientOrigin *)buf);
        v15 = *(_QWORD *)(a1 + 120);
        v16 = WebKit::OriginStorageManager::defaultBucket(v14);
        v17 = WebKit::OriginStorageManager::StorageBucket::localStorageManager(v16, v15);
        v18 = *(_QWORD *)(a2 + 24);
        v19 = *(_QWORD *)(v17 + 24);
        if (v19 && *(_QWORD *)(v19 + 16) == a3)
        {
          WebKit::LocalStorageManager::connectionClosedForLocalStorageArea(v17, v18);
        }
        else
        {
          v24 = *(_QWORD *)(v17 + 16);
          if (v24 && *(_QWORD *)(v24 + 16) == a3)
            WebKit::LocalStorageManager::connectionClosedForTransientStorageArea(v17, v18);
        }
        if (v32 != -1)
          ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v32])(&v26, v31);
        v32 = -1;
      }
      else
      {
        buf[0] = 0;
        v30 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v9);
        v31[0] = 0;
        v32 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v31, v10);
        v20 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a1, (const WebCore::ClientOrigin *)buf);
        v21 = *(_QWORD *)(a1 + 120);
        v22 = WebKit::OriginStorageManager::defaultBucket(v20);
        v23 = WebKit::OriginStorageManager::StorageBucket::sessionStorageManager((uint64_t)v22, v21);
        WebKit::SessionStorageManager::disconnectFromStorageArea((uint64_t)v23, *(_QWORD *)(a2 + 24), a3);
        if (v32 != -1)
          ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v32])(&v26, v31);
        v32 = -1;
      }
      if (v30 != -1)
        ((void (*)(WTF::StringImpl **, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v30])(&v26, buf);
    }
    else
    {
      v25 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v29 = "void WebKit::NetworkStorageManager::disconnectFromStorageArea(IPC::Connection &, StorageAreaIdentifier)";
        _os_log_fault_impl(&dword_196BCC000, v25, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1452: Invalid message dispatched %s", buf, 0xCu);
      }
      *(_BYTE *)(a2 + 98) = 1;
    }
  }
}

WTF::StringImpl **WebKit::NetworkStorageManager::setItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t StorageArea;
  WebKit::StorageAreaBase *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char isSiteAllowedForConnection;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  _BOOL8 v32;
  uint64_t v33;
  WTF::StringImpl **result;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl **v40;
  char v41;
  _BYTE buf[24];
  int v43;
  _BYTE v44[24];
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  StorageArea = WebKit::StorageAreaRegistry::getStorageArea(*(uint64_t **)(a1 + 120), a3);
  if (!StorageArea)
  {
    v21 = *a8;
    *a8 = 0;
LABEL_6:
    (*(void (**)(uint64_t, _QWORD, WTF::StringImpl ***))(*(_QWORD *)v21 + 16))(v21, 0, &v40);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    goto LABEL_30;
  }
  v16 = (WebKit::StorageAreaBase *)StorageArea;
  v37 = a4;
  v17 = *(_QWORD *)(a2 + 24);
  buf[0] = 0;
  v43 = -1;
  v38 = StorageArea + 32;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, StorageArea + 32);
  v44[0] = 0;
  v45 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v44, (uint64_t)v16 + 64);
  WebCore::RegistrableDomain::RegistrableDomain(&v39, (const WebCore::SecurityOriginData *)buf);
  isSiteAllowedForConnection = WebKit::NetworkStorageManager::isSiteAllowedForConnection(a1, v17, &v39);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (v45 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v45])(&v41, v44);
  v45 = -1;
  if (v43 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v43])(&v41, buf);
  if ((isSiteAllowedForConnection & 1) == 0)
  {
    v35 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkStorageManager::setItem(IPC::Connection &, StorageAreaIdentifier, Storage"
                           "AreaImplIdentifier, String &&, String &&, String &&, CompletionHandler<void (BOOL, HashMap<St"
                           "ring, String> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v35, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1470: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
    v21 = *a8;
    *a8 = 0;
    goto LABEL_6;
  }
  v23 = *(_QWORD *)(a2 + 24);
  buf[0] = 0;
  v43 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v38);
  v44[0] = 0;
  v45 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v44, (uint64_t)v16 + 64);
  WebCore::RegistrableDomain::RegistrableDomain(&v39, (const WebCore::SecurityOriginData *)buf);
  v25 = WebKit::NetworkStorageManager::isSiteAllowedForConnection(a1, v23, &v39);
  v26 = v39;
  v39 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (v45 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v45])(&v41, v44);
  v45 = -1;
  if (v43 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v43])(&v41, buf);
  if ((v25 & 1) != 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebKit::StorageAreaBase *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 56))(&v39, v16, *(_QWORD *)(a2 + 24), v37, a5, a6, a7);
    v27 = BYTE1(v39);
    if (BYTE1(v39))
    {
      (*(void (**)(_BYTE *__return_ptr, WebKit::StorageAreaBase *))(*(_QWORD *)v16 + 48))(buf, v16);
      v29 = *(WTF::StringImpl ***)buf;
      *(_QWORD *)buf = 0;
      v30 = v40;
      v40 = v29;
      if (v30)
      {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v28);
        if (*(_QWORD *)buf)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v31);
      }
    }
    v32 = v27 != 0;
    v33 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, _BOOL8, WTF::StringImpl ***))(*(_QWORD *)v33 + 16))(v33, v32, &v40);
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    buf[0] = 0;
    v43 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v38);
    v44[0] = 0;
    v45 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v44, (uint64_t)v16 + 64);
    WebKit::NetworkStorageManager::writeOriginToFileIfNecessary((WebCore::SecurityOriginData **)a1, (const WebCore::ClientOrigin *)buf, v16);
    if (v45 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v45])(&v41, v44);
    v45 = -1;
    if (v43 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v43])(&v41, buf);
  }
  else
  {
    v36 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkStorageManager::setItem(IPC::Connection &, StorageAreaIdentifier, Storage"
                           "AreaImplIdentifier, String &&, String &&, String &&, CompletionHandler<void (BOOL, HashMap<St"
                           "ring, String> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v36, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1472: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
  }
LABEL_30:
  result = v40;
  if (v40)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v40, v22);
  return result;
}

WTF::StringImpl **WebKit::NetworkStorageManager::removeItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t StorageArea;
  WebKit::StorageAreaBase *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char isSiteAllowedForConnection;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  _BOOL8 v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  NSObject *v27;
  uint64_t v28;
  WTF::StringImpl **result;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **v32;
  char v33;
  _BYTE buf[24];
  int v35;
  _BYTE v36[24];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  StorageArea = WebKit::StorageAreaRegistry::getStorageArea(*(uint64_t **)(a1 + 120), a3);
  if (!StorageArea)
  {
LABEL_22:
    v28 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD, WTF::StringImpl ***))(*(_QWORD *)v28 + 16))(v28, 0, &v32);
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    goto LABEL_23;
  }
  v14 = (WebKit::StorageAreaBase *)StorageArea;
  v15 = *(_QWORD *)(a2 + 24);
  buf[0] = 0;
  v35 = -1;
  v30 = StorageArea + 32;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, StorageArea + 32);
  v36[0] = 0;
  v37 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v36, (uint64_t)v14 + 64);
  WebCore::RegistrableDomain::RegistrableDomain(&v31, (const WebCore::SecurityOriginData *)buf);
  isSiteAllowedForConnection = WebKit::NetworkStorageManager::isSiteAllowedForConnection(a1, v15, &v31);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (v37 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v37])(&v33, v36);
  v37 = -1;
  if (v35 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v35])(&v33, buf);
  if ((isSiteAllowedForConnection & 1) == 0)
  {
    v27 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkStorageManager::removeItem(IPC::Connection &, StorageAreaIdentifier, Stor"
                           "ageAreaImplIdentifier, String &&, String &&, CompletionHandler<void (BOOL, HashMap<String, String> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v27, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1493: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a2 + 98) = 1;
    goto LABEL_22;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebKit::StorageAreaBase *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 64))(&v31, v14, *(_QWORD *)(a2 + 24), a4, a5, a6);
  v19 = BYTE1(v31);
  if (BYTE1(v31))
  {
    (*(void (**)(_BYTE *__return_ptr, WebKit::StorageAreaBase *))(*(_QWORD *)v14 + 48))(buf, v14);
    v21 = *(WTF::StringImpl ***)buf;
    *(_QWORD *)buf = 0;
    v22 = v32;
    v32 = v21;
    if (v22)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v22, v20);
      if (*(_QWORD *)buf)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v23);
    }
  }
  v24 = v19 != 0;
  v25 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, _BOOL8, WTF::StringImpl ***))(*(_QWORD *)v25 + 16))(v25, v24, &v32);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  buf[0] = 0;
  v35 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v30);
  v36[0] = 0;
  v37 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v36, (uint64_t)v14 + 64);
  WebKit::NetworkStorageManager::writeOriginToFileIfNecessary((WebCore::SecurityOriginData **)a1, (const WebCore::ClientOrigin *)buf, v14);
  if (v37 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v37])(&v33, v36);
  v37 = -1;
  if (v35 != -1)
    ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v35])(&v33, buf);
LABEL_23:
  result = v32;
  if (v32)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v32, v26);
  return result;
}

WebCore::SecurityOriginData *WebKit::NetworkStorageManager::clear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t StorageArea;
  WebKit::StorageAreaBase *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char isSiteAllowedForConnection;
  WTF::StringImpl *v17;
  uint64_t v18;
  WebCore::SecurityOriginData *result;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char v25;
  uint8_t buf[4];
  const char *v27;
  int v28;
  _BYTE v29[24];
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  StorageArea = WebKit::StorageAreaRegistry::getStorageArea(*(uint64_t **)(a1 + 120), a3);
  if (StorageArea)
  {
    v12 = (WebKit::StorageAreaBase *)StorageArea;
    v23 = a5;
    v13 = *(_QWORD *)(a2 + 24);
    v14 = StorageArea + 32;
    buf[0] = 0;
    v28 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, StorageArea + 32);
    v29[0] = 0;
    v30 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v29, (uint64_t)v12 + 64);
    WebCore::RegistrableDomain::RegistrableDomain(&v24, (const WebCore::SecurityOriginData *)buf);
    isSiteAllowedForConnection = WebKit::NetworkStorageManager::isSiteAllowedForConnection(a1, v13, &v24);
    v17 = v24;
    v24 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (v30 != -1)
      ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v30])(&v25, v29);
    v30 = -1;
    if (v28 != -1)
      ((void (*)(char *, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v28])(&v25, buf);
    if ((isSiteAllowedForConnection & 1) != 0)
    {
      (*(void (**)(uint8_t *__return_ptr, WebKit::StorageAreaBase *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(buf, v12, *(_QWORD *)(a2 + 24), a4, v23);
      v20 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      buf[0] = 0;
      v28 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v14);
      v29[0] = 0;
      v30 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v29, (uint64_t)v12 + 64);
      result = WebKit::NetworkStorageManager::writeOriginToFileIfNecessary((WebCore::SecurityOriginData **)a1, (const WebCore::ClientOrigin *)buf, v12);
      if (v30 != -1)
        result = (WebCore::SecurityOriginData *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v30])(&v24, v29);
      v30 = -1;
      if (v28 != -1)
        return (WebCore::SecurityOriginData *)((uint64_t (*)(WTF::StringImpl **, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v28])(&v24, buf);
    }
    else
    {
      v21 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v27 = "void WebKit::NetworkStorageManager::clear(IPC::Connection &, StorageAreaIdentifier, StorageAreaImplIdentif"
              "ier, String &&, CompletionHandler<void ()> &&)";
        _os_log_fault_impl(&dword_196BCC000, v21, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/storage/NetworkStorageManager.cpp 1512: Invalid message dispatched %s", buf, 0xCu);
      }
      *(_BYTE *)(a2 + 98) = 1;
      v22 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
      return (WebCore::SecurityOriginData *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  else
  {
    v18 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    return (WebCore::SecurityOriginData *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  return result;
}

WTF *WebKit::NetworkStorageManager::openDatabase(uint64_t **this, void **a2, const WebCore::IDBOpenRequestData *a3)
{
  WTF *v5;
  WebKit::OriginStorageManager *v6;
  WebKit::IDBStorageManager *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v13;
  WTF::StringImpl *v14;
  _BYTE v15[24];
  int v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = (WTF *)WebKit::IDBStorageRegistry::ensureConnectionToClient(this[16], a2[3], *((_QWORD *)a3 + 1));
  ++*(_DWORD *)v5;
  WebCore::IDBOpenRequestData::databaseIdentifier((WebCore::IDBOpenRequestData *)&v14, (uint64_t)a3);
  v6 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)this, (const WebCore::ClientOrigin *)v15);
  v7 = WebKit::OriginStorageManager::idbStorageManager(v6, (uint64_t)this[16]);
  WebCore::IDBOpenRequestData::databaseIdentifier((WebCore::IDBOpenRequestData *)&v19, (uint64_t)a3);
  WebKit::IDBStorageManager::getOrCreateUniqueIDBDatabase((uint64_t)v7, (WTF::StringImpl *)&v19);
  if (v23 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v23])(&v13, &v22);
  v23 = -1;
  if (v21 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v21])(&v13, &v20);
  v21 = -1;
  v9 = v19;
  v19 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::IDBServer::UniqueIDBDatabase::openDatabaseConnection();
  if (v18 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v18])(&v19, &v17);
  v18 = -1;
  if (v16 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v16])(&v19, v15);
  v16 = -1;
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  return WTF::RefCounted<WebCore::IDBServer::IDBConnectionToClient>::deref(v5, v10);
}

WTF::StringImpl *WebKit::NetworkStorageManager::openDBRequestCancelled(WebKit::NetworkStorageManager *this, const WebCore::IDBOpenRequestData *a2)
{
  WebKit::OriginStorageManager *v4;
  WebKit::IDBStorageManager *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  WebCore::IDBServer::UniqueIDBDatabase *v8;
  WebCore::IDBServer::UniqueIDBDatabase *v9;
  unsigned int v10;
  int v11;
  const WTF::StringImpl *v12;
  int i;
  unsigned int v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *result;
  char v20;
  WTF::StringImpl *v21;
  _BYTE v22[24];
  int v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26[2];
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  WebCore::IDBOpenRequestData::databaseIdentifier((WebCore::IDBOpenRequestData *)&v21, (uint64_t)a2);
  v4 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager((uint64_t)this, (const WebCore::ClientOrigin *)v22);
  v5 = WebKit::OriginStorageManager::idbStorageManager(v4, *((_QWORD *)this + 16));
  WebCore::IDBOpenRequestData::databaseIdentifier((WebCore::IDBOpenRequestData *)v26, (uint64_t)a2);
  v9 = (WebCore::IDBServer::UniqueIDBDatabase *)*((_QWORD *)v5 + 5);
  v7 = (uint64_t *)((char *)v5 + 40);
  v8 = v9;
  if (v9)
  {
    v10 = *((_DWORD *)v8 - 2);
    v11 = WTF::computeHash<WebCore::IDBDatabaseIdentifier>((uint64_t)v26);
    for (i = 0; ; v11 = i + v14)
    {
      v14 = v11 & v10;
      v15 = (_QWORD *)((char *)v8 + 88 * (v11 & v10));
      if (*v15 != -1)
      {
        if (!*v15)
        {
          v8 = 0;
          goto LABEL_9;
        }
        if ((WebCore::operator==((uint64_t)v15, (uint64_t)v26, v12) & 1) != 0)
          break;
      }
      ++i;
    }
    v8 = (WebCore::IDBServer::UniqueIDBDatabase *)*((_QWORD *)v8 + 11 * v14 + 10);
  }
LABEL_9:
  if (v29 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v29])(&v20, &v28);
  v29 = -1;
  if (v27 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v27])(&v20, &v26[1]);
  v27 = -1;
  v16 = v26[0];
  v26[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v6);
      if (!v8)
        goto LABEL_27;
      goto LABEL_19;
    }
    *(_DWORD *)v16 -= 2;
  }
  if (!v8)
    goto LABEL_27;
LABEL_19:
  *(_OWORD *)v26 = *(_OWORD *)((char *)a2 + 8);
  WebCore::IDBServer::UniqueIDBDatabase::openDBRequestCancelled(v8, (const WebCore::IDBResourceIdentifier *)v26);
  if (!WebCore::IDBServer::UniqueIDBDatabase::tryClose(v8))
    goto LABEL_27;
  v17 = WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>>,WebCore::IDBDatabaseIdentifier>(v7, (uint64_t)v8 + 16);
  v6 = (WTF::StringImpl *)v17;
  if (*v7)
  {
    v18 = *v7 + 88 * *(unsigned int *)(*v7 - 4);
    if (v18 == v17)
      goto LABEL_27;
  }
  else
  {
    if (!v17)
      goto LABEL_27;
    v18 = 0;
  }
  if (v18 != v17)
    WTF::HashTable<WebCore::IDBDatabaseIdentifier,WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashMap<WebCore::IDBDatabaseIdentifier,std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>,WTF::DefaultHash<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>,WTF::HashTraits<std::unique_ptr<WebCore::IDBServer::UniqueIDBDatabase>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IDBDatabaseIdentifier>>::remove(v7, v17);
LABEL_27:
  if (v25 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v25])(v26, &v24);
  v25 = -1;
  if (v23 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v23])(v26, v22);
  v23 = -1;
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

