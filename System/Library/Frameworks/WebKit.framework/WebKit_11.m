unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 8)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 8;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePassEncoder,WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 9)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 9;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePipeline,WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 10)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 10;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDevice,WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 11)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 11;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteExternalTexture,WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 12)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 12;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePipelineLayout,WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 13)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 13;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePresentationContext,WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 14)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 14;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQuerySet,WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 15)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 15;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQueue,WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 16)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 16;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundleEncoder,WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17ELm17EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 17)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 17;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundle,WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18ELm18EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 18)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 18;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPassEncoder,WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19ELm19EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 19)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 19;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPipeline,WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm20ELm20EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 20)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 20;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteSampler,WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21ELm21EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 21)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 21;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteShaderModule,WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm22ELm22EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 22)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 22;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTexture,WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm23ELm23EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISC_NSD_12RawPtrTraitsISC_EENSD_21DefaultRefDerefTraitsISC_EEEEEENSA_INSB_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSA_INSB_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSA_INSB_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSA_INSB_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSA_INSB_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSA_INSB_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSA_INSB_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSA_INSB_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSA_INSB_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSA_INSB_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSA_INSB_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSA_INSB_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSA_INSB_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSA_INSB_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSA_INSB_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSA_INSB_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSA_INSB_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSA_INSB_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSA_INSB_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSA_INSB_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSA_INSB_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSA_INSB_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS3N_LNS0_6_TraitE1EEEEEvOT_EUlRS3T_OT0_E_JRNS0_6__baseILS3R_1EJS8_SK_SP_SU_SZ_S14_S19_S1E_S1J_S1O_S1T_S1Y_S23_S28_S2D_S2I_S2N_S2S_S2X_S32_S37_S3C_S3H_S3M_EEEOS41_EEEDcS3T_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 23)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_12:
    *(_QWORD *)v4 = *a3;
    *a3 = 0;
    *(_DWORD *)(v4 + 8) = 23;
    return result;
  }
  if (a2 != a3)
  {
    if (*a2)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTextureView,WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>(a2);
    v7 = *a3;
    *a3 = 0;
    result = *a2;
    *a2 = v7;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroup,WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x3Cu, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroupLayout,WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x3Du, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBuffer,WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x3Eu, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandBuffer,WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x46u, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandEncoder,WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x47u, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCompositorIntegration,WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x48u, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePassEncoder,WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x49u, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePipeline,WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x4Au, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDevice,WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x4Bu, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteExternalTexture,WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x4Du, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePipelineLayout,WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x6Au, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePresentationContext,WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x6Bu, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQuerySet,WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x6Cu, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQueue,WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x6Du, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundleEncoder,WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x71u, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundle,WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x70u, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPassEncoder,WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x72u, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPipeline,WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x73u, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteSampler,WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x78u, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteShaderModule,WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x7Au, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTexture,WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x7Eu, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTextureView,WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  IPC::StreamServerConnection::stopReceivingMessages(*((_QWORD *)*a1 + 4), 0x7Fu, *((_QWORD *)*a1 + 5));
  result = *a1;
  *a1 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroup,WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroup,WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBindGroup,WTF::RawPtrTraits<WebKit::RemoteBindGroup>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroup>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroupLayout,WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBindGroupLayout,WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBindGroupLayout,WTF::RawPtrTraits<WebKit::RemoteBindGroupLayout>,WTF::DefaultRefDerefTraits<WebKit::RemoteBindGroupLayout>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBuffer,WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteBuffer,WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteBuffer,WTF::RawPtrTraits<WebKit::RemoteBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteBuffer>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandBuffer,WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandBuffer,WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCommandBuffer,WTF::RawPtrTraits<WebKit::RemoteCommandBuffer>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandBuffer>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandEncoder,WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCommandEncoder,WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCommandEncoder,WTF::RawPtrTraits<WebKit::RemoteCommandEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteCommandEncoder>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCompositorIntegration,WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteCompositorIntegration,WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteCompositorIntegration,WTF::RawPtrTraits<WebKit::RemoteCompositorIntegration>,WTF::DefaultRefDerefTraits<WebKit::RemoteCompositorIntegration>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePassEncoder,WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePassEncoder,WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteComputePassEncoder,WTF::RawPtrTraits<WebKit::RemoteComputePassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePassEncoder>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePipeline,WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteComputePipeline,WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteComputePipeline,WTF::RawPtrTraits<WebKit::RemoteComputePipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteComputePipeline>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDevice,WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDevice,WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteDevice,WTF::RawPtrTraits<WebKit::RemoteDevice>,WTF::DefaultRefDerefTraits<WebKit::RemoteDevice>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteExternalTexture,WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteExternalTexture,WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteExternalTexture,WTF::RawPtrTraits<WebKit::RemoteExternalTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteExternalTexture>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePipelineLayout,WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePipelineLayout,WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemotePipelineLayout,WTF::RawPtrTraits<WebKit::RemotePipelineLayout>,WTF::DefaultRefDerefTraits<WebKit::RemotePipelineLayout>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePresentationContext,WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemotePresentationContext,WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemotePresentationContext,WTF::RawPtrTraits<WebKit::RemotePresentationContext>,WTF::DefaultRefDerefTraits<WebKit::RemotePresentationContext>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQuerySet,WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQuerySet,WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteQuerySet,WTF::RawPtrTraits<WebKit::RemoteQuerySet>,WTF::DefaultRefDerefTraits<WebKit::RemoteQuerySet>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQueue,WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteQueue,WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteQueue,WTF::RawPtrTraits<WebKit::RemoteQueue>,WTF::DefaultRefDerefTraits<WebKit::RemoteQueue>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundleEncoder,WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundleEncoder,WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderBundleEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderBundleEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundleEncoder>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundle,WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderBundle,WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderBundle,WTF::RawPtrTraits<WebKit::RemoteRenderBundle>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderBundle>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPassEncoder,WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPassEncoder,WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderPassEncoder,WTF::RawPtrTraits<WebKit::RemoteRenderPassEncoder>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPassEncoder>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPipeline,WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderPipeline,WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderPipeline,WTF::RawPtrTraits<WebKit::RemoteRenderPipeline>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderPipeline>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteSampler,WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteSampler,WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteSampler,WTF::RawPtrTraits<WebKit::RemoteSampler>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampler>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteShaderModule,WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteShaderModule,WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteShaderModule,WTF::RawPtrTraits<WebKit::RemoteShaderModule>,WTF::DefaultRefDerefTraits<WebKit::RemoteShaderModule>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTexture,WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTexture,WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteTexture,WTF::RawPtrTraits<WebKit::RemoteTexture>,WTF::DefaultRefDerefTraits<WebKit::RemoteTexture>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTextureView,WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>::~ScopedActiveMessageReceiveQueue(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteTextureView,WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteTextureView,WTF::RawPtrTraits<WebKit::RemoteTextureView>,WTF::DefaultRefDerefTraits<WebKit::RemoteTextureView>>>(a1);
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t *_ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS3O_EENS_11DefaultHashIS6_EENS_7HashMapIS6_S3N_S3S_NS_10HashTraitsIS6_EENS3U_IS3N_EENS_15HashTableTraitsEE18KeyValuePairTraitsES3V_E6removeEPS3O_(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  char v11;

  v3 = result;
  *(_QWORD *)a2 = -1;
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueIN6WebKit13RemoteAdapterEN3WTF6RefPtrISA_NSB_12RawPtrTraitsISA_EENSB_21DefaultRefDerefTraitsISA_EEEEEENS8_INS9_15RemoteBindGroupENSC_ISJ_NSD_ISJ_EENSF_ISJ_EEEEEENS8_INS9_21RemoteBindGroupLayoutENSC_ISO_NSD_ISO_EENSF_ISO_EEEEEENS8_INS9_12RemoteBufferENSC_IST_NSD_IST_EENSF_IST_EEEEEENS8_INS9_19RemoteCommandBufferENSC_ISY_NSD_ISY_EENSF_ISY_EEEEEENS8_INS9_20RemoteCommandEncoderENSC_IS13_NSD_IS13_EENSF_IS13_EEEEEENS8_INS9_27RemoteCompositorIntegrationENSC_IS18_NSD_IS18_EENSF_IS18_EEEEEENS8_INS9_24RemoteComputePassEncoderENSC_IS1D_NSD_IS1D_EENSF_IS1D_EEEEEENS8_INS9_21RemoteComputePipelineENSC_IS1I_NSD_IS1I_EENSF_IS1I_EEEEEENS8_INS9_12RemoteDeviceENSC_IS1N_NSD_IS1N_EENSF_IS1N_EEEEEENS8_INS9_21RemoteExternalTextureENSC_IS1S_NSD_IS1S_EENSF_IS1S_EEEEEENS8_INS9_20RemotePipelineLayoutENSC_IS1X_NSD_IS1X_EENSF_IS1X_EEEEEENS8_INS9_25RemotePresentationContextENSC_IS22_NSD_IS22_EENSF_IS22_EEEEEENS8_INS9_14RemoteQuerySetENSC_IS27_NSD_IS27_EENSF_IS27_EEEEEENS8_INS9_11RemoteQueueENSC_IS2C_NSD_IS2C_EENSF_IS2C_EEEEEENS8_INS9_25RemoteRenderBundleEncoderENSC_IS2H_NSD_IS2H_EENSF_IS2H_EEEEEENS8_INS9_18RemoteRenderBundleENSC_IS2M_NSD_IS2M_EENSF_IS2M_EEEEEENS8_INS9_23RemoteRenderPassEncoderENSC_IS2R_NSD_IS2R_EENSF_IS2R_EEEEEENS8_INS9_20RemoteRenderPipelineENSC_IS2W_NSD_IS2W_EENSF_IS2W_EEEEEENS8_INS9_13RemoteSamplerENSC_IS31_NSD_IS31_EENSF_IS31_EEEEEENS8_INS9_18RemoteShaderModuleENSC_IS36_NSD_IS36_EENSF_IS36_EEEEEENS8_INS9_13RemoteTextureENSC_IS3B_NSD_IS3B_EENSF_IS3B_EEEEEENS8_INS9_17RemoteTextureViewENSC_IS3G_NSD_IS3G_EENSF_IS3G_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS3N_EEEDcOS3O_DpOT0____fmatrix[v4])(&v11, a2 + 8);
  v5 = -1;
  *(_DWORD *)(a2 + 16) = -1;
  ++*(_DWORD *)(*v3 - 16);
  v6 = *v3;
  if (*v3)
    v5 = *(_DWORD *)(v6 - 12) - 1;
  *(_DWORD *)(v6 - 12) = v5;
  v7 = *v3;
  if (*v3)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return _ZN3WTF9HashTableINS_23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEENS_12KeyValuePairIS6_NSt3__17variantIJNS8_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINS2_13RemoteAdapterENS_6RefPtrISD_NS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEENSC_INS2_15RemoteBindGroupENSE_ISL_NSF_ISL_EENSH_ISL_EEEEEENSC_INS2_21RemoteBindGroupLayoutENSE_ISQ_NSF_ISQ_EENSH_ISQ_EEEEEENSC_INS2_12RemoteBufferENSE_ISV_NSF_ISV_EENSH_ISV_EEEEEENSC_INS2_19RemoteCommandBufferENSE_IS10_NSF_IS10_EENSH_IS10_EEEEEENSC_INS2_20RemoteCommandEncoderENSE_IS15_NSF_IS15_EENSH_IS15_EEEEEENSC_INS2_27RemoteCompositorIntegrationENSE_IS1A_NSF_IS1A_EENSH_IS1A_EEEEEENSC_INS2_24RemoteComputePassEncoderENSE_IS1F_NSF_IS1F_EENSH_IS1F_EEEEEENSC_INS2_21RemoteComputePipelineENSE_IS1K_NSF_IS1K_EENSH_IS1K_EEEEEENSC_INS2_12RemoteDeviceENSE_IS1P_NSF_IS1P_EENSH_IS1P_EEEEEENSC_INS2_21RemoteExternalTextureENSE_IS1U_NSF_IS1U_EENSH_IS1U_EEEEEENSC_INS2_20RemotePipelineLayoutENSE_IS1Z_NSF_IS1Z_EENSH_IS1Z_EEEEEENSC_INS2_25RemotePresentationContextENSE_IS24_NSF_IS24_EENSH_IS24_EEEEEENSC_INS2_14RemoteQuerySetENSE_IS29_NSF_IS29_EENSH_IS29_EEEEEENSC_INS2_11RemoteQueueENSE_IS2E_NSF_IS2E_EENSH_IS2E_EEEEEENSC_INS2_25RemoteRenderBundleEncoderENSE_IS2J_NSF_IS2J_EENSH_IS2J_EEEEEENSC_INS2_18RemoteRenderBundleENSE_IS2O_NSF_IS2O_EENSH_IS2O_EEEEEENSC_INS2_23RemoteRenderPassEncoderENSE_IS2T_NSF_IS2T_EENSH_IS2T_EEEEEENSC_INS2_20RemoteRenderPipelineENSE_IS2Y_NSF_IS2Y_EENSH_IS2Y_EEEEEENSC_INS2_13RemoteSamplerENSE_IS33_NSF_IS33_EENSH_IS33_EEEEEENSC_INS2_18RemoteShaderModuleENSE_IS38_NSF_IS38_EENSH_IS38_EEEEEENSC_INS2_13RemoteTextureENSE_IS3D_NSF_IS3D_EENSH_IS3D_EEEEEENSC_INS2_17RemoteTextureViewENSE_IS3I_NSF_IS3I_EENSH_IS3I_EEEEEEEEEEENS_24KeyValuePairKeyExtractorIS3O_EENS_11DefaultHashIS6_EENS_7HashMapIS6_S3N_S3S_NS_10HashTraitsIS6_EENS3U_IS3N_EENS_15HashTableTraitsEE18KeyValuePairTraitsES3V_E6rehashEjPS3O_(v3, v9 >> 1, 0);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 80))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 88))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 96))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 72))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 104))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 112))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 64))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 120))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 128))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 136))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 144))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 152))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 160))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 168))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 176))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 184))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 192))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 200))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 208))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm20EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 216))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 224))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm22EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 232))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm23EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK6WebKit6WebGPU10ObjectHeap20objectExistsAndValidERKN7WebCore6WebGPU3GPUENS8_23ObjectIdentifierGenericINSA_20WebGPUIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEE3__0JZNKSC_20objectExistsAndValidESH_SM_E3__1EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateEN3IPC31ScopedActiveMessageReceiveQueueINSA_13RemoteAdapterENS8_6RefPtrISX_NS8_12RawPtrTraitsISX_EENS8_21DefaultRefDerefTraitsISX_EEEEEENSW_INSA_15RemoteBindGroupENSY_IS15_NSZ_IS15_EENS11_IS15_EEEEEENSW_INSA_21RemoteBindGroupLayoutENSY_IS1A_NSZ_IS1A_EENS11_IS1A_EEEEEENSW_INSA_12RemoteBufferENSY_IS1F_NSZ_IS1F_EENS11_IS1F_EEEEEENSW_INSA_19RemoteCommandBufferENSY_IS1K_NSZ_IS1K_EENS11_IS1K_EEEEEENSW_INSA_20RemoteCommandEncoderENSY_IS1P_NSZ_IS1P_EENS11_IS1P_EEEEEENSW_INSA_27RemoteCompositorIntegrationENSY_IS1U_NSZ_IS1U_EENS11_IS1U_EEEEEENSW_INSA_24RemoteComputePassEncoderENSY_IS1Z_NSZ_IS1Z_EENS11_IS1Z_EEEEEENSW_INSA_21RemoteComputePipelineENSY_IS24_NSZ_IS24_EENS11_IS24_EEEEEENSW_INSA_12RemoteDeviceENSY_IS29_NSZ_IS29_EENS11_IS29_EEEEEENSW_INSA_21RemoteExternalTextureENSY_IS2E_NSZ_IS2E_EENS11_IS2E_EEEEEENSW_INSA_20RemotePipelineLayoutENSY_IS2J_NSZ_IS2J_EENS11_IS2J_EEEEEENSW_INSA_25RemotePresentationContextENSY_IS2O_NSZ_IS2O_EENS11_IS2O_EEEEEENSW_INSA_14RemoteQuerySetENSY_IS2T_NSZ_IS2T_EENS11_IS2T_EEEEEENSW_INSA_11RemoteQueueENSY_IS2Y_NSZ_IS2Y_EENS11_IS2Y_EEEEEENSW_INSA_25RemoteRenderBundleEncoderENSY_IS33_NSZ_IS33_EENS11_IS33_EEEEEENSW_INSA_18RemoteRenderBundleENSY_IS38_NSZ_IS38_EENS11_IS38_EEEEEENSW_INSA_23RemoteRenderPassEncoderENSY_IS3D_NSZ_IS3D_EENS11_IS3D_EEEEEENSW_INSA_20RemoteRenderPipelineENSY_IS3I_NSZ_IS3I_EENS11_IS3I_EEEEEENSW_INSA_13RemoteSamplerENSY_IS3N_NSZ_IS3N_EENS11_IS3N_EEEEEENSW_INSA_18RemoteShaderModuleENSY_IS3S_NSZ_IS3S_EENS11_IS3S_EEEEEENSW_INSA_13RemoteTextureENSY_IS3X_NSZ_IS3X_EENS11_IS3X_EEEEEENSW_INSA_17RemoteTextureViewENSY_IS42_NSZ_IS42_EENS11_IS42_EEEEEEEEEEEEDcT_DpT0_(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 240))(**a1, *(_QWORD *)(*(_QWORD *)a2 + 16));
}

uint64_t IPC::Connection::send<Messages::RemoteAudioHardwareListener::AudioOutputDeviceChanged>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  unint64_t v32;
  size_t v33;
  char *v34;
  void *v35;
  unint64_t v36;
  size_t v37;
  char *v38;
  void *v39;
  size_t v40;
  IPC::Encoder *v41;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 685;
  *(_QWORD *)(v10 + 8) = a3;
  v11 = (void *)(v10 + 16);
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v41 = (IPC::Encoder *)v10;
  v12 = *a2;
  v13 = *(_QWORD *)(v10 + 544);
  v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = v14 + 8;
  v16 = *(_QWORD *)(v10 + 552);
  if (v16 < v14 + 8)
  {
    v32 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v33 = v32;
      v32 *= 2;
    }
    while (v33 < v15);
    v40 = v33;
    v34 = (char *)mmap(0, v33, 3, 4098, -1, 0);
    if (v34 == (char *)-1)
      goto LABEL_20;
    v17 = v34;
    memcpy(v34, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
    v35 = *(void **)(v10 + 528);
    if (v35 != v11)
      munmap(v35, *(_QWORD *)(v10 + 552));
    *(_QWORD *)(v10 + 528) = v17;
    *(_QWORD *)(v10 + 552) = v40;
    v13 = *(_QWORD *)(v10 + 544);
  }
  else
  {
    v17 = *(char **)(v10 + 528);
  }
  bzero(&v17[v13], v14 - v13);
  *(_QWORD *)(v10 + 544) = v15;
  v18 = (_QWORD *)(*(_QWORD *)(v10 + 528) + v14);
  *(_QWORD *)(v10 + 536) = v18 + 1;
  *v18 = v12;
  v19 = a2[1];
  v20 = *(_QWORD *)(v10 + 544);
  v21 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = v21 + 8;
  v23 = *(_QWORD *)(v10 + 552);
  if (v23 >= v21 + 8)
  {
    v24 = *(char **)(v10 + 528);
    goto LABEL_5;
  }
  v36 = (2 * v23 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v37 = v36;
    v36 *= 2;
  }
  while (v37 < v22);
  v38 = (char *)mmap(0, v37, 3, 4098, -1, 0);
  if (v38 == (char *)-1)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x19705E944);
  }
  v24 = v38;
  memcpy(v38, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
  v39 = *(void **)(v10 + 528);
  if (v39 != v11)
    munmap(v39, *(_QWORD *)(v10 + 552));
  *(_QWORD *)(v10 + 528) = v24;
  *(_QWORD *)(v10 + 552) = v37;
  v20 = *(_QWORD *)(v10 + 544);
LABEL_5:
  bzero(&v24[v20], v21 - v20);
  *(_QWORD *)(v10 + 544) = v22;
  v25 = (_QWORD *)(*(_QWORD *)(v10 + 528) + v21);
  *(_QWORD *)(v10 + 536) = v25 + 1;
  *v25 = v19;
  v27 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v41, a4, a5);
  v28 = v41;
  v41 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v26);
    WTF::fastFree(v29, v30);
  }
  return v27;
}

WTF::ThreadSafeWeakPtrControlBlock *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::RemoteAudioSessionProxy,WebKit::GPUConnectionToWebProcess &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WTF::ThreadSafeWeakPtrControlBlock *result;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v4 = off_1E34B95F8;
  *(_QWORD *)(v4 + 8) = 0;
  result = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 16);
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
  *(_QWORD *)(v4 + 16) = result;
  *(_QWORD *)(v4 + 24) = a1;
  *(_DWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 55) = 0;
  *a2 = v4;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::updatePreferredBufferSizeForProcess(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34B99E0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::updatePreferredBufferSizeForProcess(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B99E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::AudioSession *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::updatePreferredBufferSizeForProcess(void)::$_0,void>::call(WebCore::AudioSession *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    result = *(WebCore::AudioSession **)(v1 + 8);
    if (result)
      return WebKit::RemoteAudioSessionProxyManager::updatePreferredBufferSizeForProcess(result);
  }
  return result;
}

unint64_t WTF::Vector<audit_token_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (unint64_t)v5 + 32 * *(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<audit_token_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    v6 = a3 - (_QWORD)v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<audit_token_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void **WTF::Vector<audit_token_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  int v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *result;
      v5 = *((unsigned int *)result + 3);
      v6 = (void *)WTF::fastMalloc((WTF *)(32 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *v3 = v6;
      result = (void **)memcpy(v6, v4, 32 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

unint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::updatePresentingProcesses(void)::$_0,void,WebKit::RemoteAudioSessionProxy &>::call(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(a2 + 56))
  {
    v2 = result;
    result = *(_QWORD *)(a2 + 16);
    if (result)
    {
      result = (unint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)result, *(_QWORD *)(a2 + 24), &v10);
      v9 = v10;
      v3 = v10 + 208;
      v10 = 0;
      if (v9)
        result = (unint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 16));
    }
    else
    {
      v3 = 208;
    }
    if (*(_BYTE *)(v3 + 32))
    {
      v4 = *(_QWORD *)(v2 + 8);
      v5 = *(unsigned int *)(v4 + 12);
      if ((_DWORD)v5 == *(_DWORD *)(v4 + 8))
      {
        result = WTF::Vector<audit_token_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v5 + 1, v3);
        v6 = (_OWORD *)(*(_QWORD *)v4 + 32 * *(unsigned int *)(v4 + 12));
        v7 = *(_OWORD *)result;
        v8 = *(_OWORD *)(result + 16);
      }
      else
      {
        v6 = (_OWORD *)(*(_QWORD *)v4 + 32 * v5);
        v7 = *(_OWORD *)v3;
        v8 = *(_OWORD *)(v3 + 16);
      }
      *v6 = v7;
      v6[1] = v8;
      ++*(_DWORD *)(v4 + 12);
    }
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::beginAudioSessionInterruption(void)::$_0,void,WebKit::RemoteAudioSessionProxy &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  IPC::Encoder *result;
  uint64_t v5;

  if (*(_BYTE *)(a2 + 56))
  {
    *(_BYTE *)(a2 + 57) = 1;
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(unsigned __int8 **)(a2 + 16), *(_QWORD *)(a2 + 24), &v5);
    v2 = v5;
    v3 = *(_QWORD *)(v5 + 48);
    v5 = 0;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 16));
    return IPC::Connection::send<Messages::RemoteAudioSession::BeginInterruptionRemote>(v3);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::endAudioSessionInterruption(WebCore::AudioSession::MayResume)::$_0,void,WebKit::RemoteAudioSessionProxy &>::call(IPC::Encoder *result, uint64_t a2)
{
  char v2;
  IPC::Encoder *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  if (*(_BYTE *)(a2 + 56))
  {
    v2 = *((_BYTE *)result + 8);
    *(_BYTE *)(a2 + 57) = 0;
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(unsigned __int8 **)(a2 + 16), *(_QWORD *)(a2 + 24), &v9);
    v3 = v9;
    v4 = *((_QWORD *)v9 + 6);
    v9 = 0;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v3 + 2));
    v5 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v5 = 702;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 528) = v5 + 16;
    *(_QWORD *)(v5 + 536) = v5 + 16;
    *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v5 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
    v9 = (IPC::Encoder *)v5;
    *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = v2;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v9, 0, 0);
    result = v9;
    v9 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v6);
      return (IPC::Encoder *)WTF::fastFree(v7, v8);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSessionProxyManager::configurationDidChange(WebCore::AudioSession const&)::$_0,void,WebKit::RemoteAudioSessionProxy &>::call(int a1, WebKit::RemoteAudioSessionProxy *this)
{
  return WebKit::RemoteAudioSessionProxy::configurationChanged(this);
}

void WebKit::WebMemorySampler::processName(WebKit::WebMemorySampler *this)
{
  if (!objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"))
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "processName");
  JUMPOUT(0x19AEABCC8);
}

uint64_t WebKit::WebMemorySampler::sampleWebKit@<X0>(WebKit::WebMemorySampler *this@<X0>, uint64_t a2@<X8>)
{
  WebCore *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::WallTime *v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[8];
  uint64_t v116;
  _QWORD v117[4];
  uint64_t v118;
  uint64_t v119;
  malloc_statistics_t stats;
  mach_msg_type_number_t task_info_outCnt[6];

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (WebCore *)WTF::fastMallocStatistics(this);
  v116 = 0;
  memset(v117, 0, sizeof(v117));
  v118 = 0;
  v119 = 0;
  v4 = (uint64_t *)MEMORY[0x1E0DD1108];
  if (!*MEMORY[0x1E0DD1108])
    WebCore::commonVMSlow(v3);
  MEMORY[0x19AEAA9D8](v115);
  v114 = 0;
  v5 = *v4;
  if (!*v4)
    v5 = WebCore::commonVMSlow(0);
  v113 = 0;
  v114 = JSC::Heap::size((JSC::Heap *)(v5 + 192));
  v6 = *v4;
  if (!*v4)
    v6 = WebCore::commonVMSlow(0);
  v113 = JSC::Heap::capacity((JSC::Heap *)(v6 + 192));
  v119 += v114;
  v118 += v113;
  v111 = JSC::globalMemoryStatistics((JSC *)v113);
  v112 = v7;
  v119 += v7 + v111;
  v118 += v7 + v111;
  *(_QWORD *)task_info_outCnt = 0;
  stats.blocks_in_use = 0;
  memset(&stats.size_in_use, 0, 24);
  v105 = *(unint64_t *)&stats.blocks_in_use;
  v106 = 0u;
  v107 = *(unint64_t *)&stats.blocks_in_use;
  v108 = 0u;
  v110 = 0u;
  v109 = *(unint64_t *)&stats.blocks_in_use;
  malloc_get_all_zones();
  v103 = *((_QWORD *)&v107 + 1);
  v104 = *((_QWORD *)&v105 + 1);
  v101 = 0;
  v102 = *((_QWORD *)&v109 + 1);
  v99 = 0;
  v100 = 0;
  v119 += *((_QWORD *)&v107 + 1) + *((_QWORD *)&v105 + 1) + *((_QWORD *)&v109 + 1);
  task_info_outCnt[0] = 10;
  v8 = (WTF::WallTime *)task_info(*MEMORY[0x1E0C83DA0], 0x12u, (task_info_t)&stats, task_info_outCnt);
  v9 = *(size_t *)((char *)&stats.size_in_use + 4);
  v98 = *(size_t *)((char *)&stats.size_in_use + 4);
  WTF::WallTime::now(v8);
  v11 = v10;
  *(_QWORD *)&stats.blocks_in_use = "Timestamp";
  stats.size_in_use = 10;
  v12 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v13 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v13 + 8 * v12) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v14 + 1;
  }
  v15 = (_QWORD *)(a2 + 16);
  v16 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v16 == *(_DWORD *)(a2 + 24))
  {
    v17 = v16 + (v16 >> 2);
    if (v17 >= 0x10)
      v18 = v17 + 1;
    else
      v18 = 16;
    if (v18 <= v16 + 1)
      v19 = v16 + 1;
    else
      v19 = v18;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2 + 16, v19);
    v16 = *(unsigned int *)(a2 + 28);
    v20 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v16);
  }
  else
  {
    v20 = (_QWORD *)(*v15 + 8 * v16);
  }
  *v20 = (unint64_t)v11;
  *(_DWORD *)(a2 + 28) = v16 + 1;
  *(_QWORD *)&stats.blocks_in_use = "Total Bytes of Memory In Use";
  stats.size_in_use = 29;
  v21 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v21 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v22 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v23 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v22 + 8 * v21) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v23 + 1;
  }
  v24 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v24 == *(_DWORD *)(a2 + 24))
  {
    v25 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v24 + 1, (unint64_t)&v119);
    v24 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v24) = *v25;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v24) = v119;
  }
  *(_DWORD *)(a2 + 28) = v24 + 1;
  *(_QWORD *)&stats.blocks_in_use = "Fast Malloc Zone Bytes";
  stats.size_in_use = 23;
  v26 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v26 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v27 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v28 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v27 + 8 * v26) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v28 + 1;
  }
  v29 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v29 == *(_DWORD *)(a2 + 24))
  {
    v30 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v29 + 1, (unint64_t)v117);
    v29 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v29) = *v30;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v29) = v117[0];
  }
  *(_DWORD *)(a2 + 28) = v29 + 1;
  *(_QWORD *)&stats.blocks_in_use = "Default Malloc Zone Bytes";
  stats.size_in_use = 26;
  v31 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v31 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v32 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v33 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v32 + 8 * v31) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v33 + 1;
  }
  v34 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v34 == *(_DWORD *)(a2 + 24))
  {
    v35 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v34 + 1, (unint64_t)&v104);
    v34 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v34) = *v35;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v34) = v104;
  }
  *(_DWORD *)(a2 + 28) = v34 + 1;
  *(_QWORD *)&stats.blocks_in_use = "Dispatch Continuation Malloc Zone Bytes";
  stats.size_in_use = 40;
  v36 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v36 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v37 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v38 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v37 + 8 * v36) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v38 + 1;
  }
  v39 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v39 == *(_DWORD *)(a2 + 24))
  {
    v40 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v39 + 1, (unint64_t)&v103);
    v39 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v39) = *v40;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v39) = v103;
  }
  *(_DWORD *)(a2 + 28) = v39 + 1;
  *(_QWORD *)&stats.blocks_in_use = "Purgeable Malloc Zone Bytes";
  stats.size_in_use = 28;
  v41 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v41 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v42 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v43 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v42 + 8 * v41) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v43 + 1;
  }
  v44 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v44 == *(_DWORD *)(a2 + 24))
  {
    v45 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v44 + 1, (unint64_t)&v102);
    v44 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v44) = *v45;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v44) = v102;
  }
  *(_DWORD *)(a2 + 28) = v44 + 1;
  *(_QWORD *)&stats.blocks_in_use = "JavaScript Heap Bytes";
  stats.size_in_use = 22;
  v46 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v46 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v47 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v48 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v47 + 8 * v46) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v48 + 1;
  }
  v49 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v49 == *(_DWORD *)(a2 + 24))
  {
    v50 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v49 + 1, (unint64_t)&v114);
    v49 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v49) = *v50;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v49) = v114;
  }
  *(_DWORD *)(a2 + 28) = v49 + 1;
  *(_QWORD *)&stats.blocks_in_use = "Total Bytes of Committed Memory";
  stats.size_in_use = 32;
  v51 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v51 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v52 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v53 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v52 + 8 * v51) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v53 + 1;
  }
  v54 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v54 == *(_DWORD *)(a2 + 24))
  {
    v55 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v54 + 1, (unint64_t)&v118);
    v54 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v54) = *v55;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v54) = v118;
  }
  *(_DWORD *)(a2 + 28) = v54 + 1;
  *(_QWORD *)&stats.blocks_in_use = "Fast Malloc Zone Bytes";
  stats.size_in_use = 23;
  v56 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v56 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v57 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v58 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v57 + 8 * v56) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v58 + 1;
  }
  v59 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v59 == *(_DWORD *)(a2 + 24))
  {
    v60 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v59 + 1, (unint64_t)&v116);
    v59 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v59) = *v60;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v59) = v116;
  }
  *(_DWORD *)(a2 + 28) = v59 + 1;
  *(_QWORD *)&stats.blocks_in_use = "Default Malloc Zone Bytes";
  stats.size_in_use = 26;
  v61 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v61 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v62 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v63 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v62 + 8 * v61) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v63 + 1;
  }
  v64 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v64 == *(_DWORD *)(a2 + 24))
  {
    v65 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v64 + 1, (unint64_t)&v101);
    v64 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v64) = *v65;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v64) = v101;
  }
  *(_DWORD *)(a2 + 28) = v64 + 1;
  *(_QWORD *)&stats.blocks_in_use = "Dispatch Continuation Malloc Zone Bytes";
  stats.size_in_use = 40;
  v66 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v66 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v67 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v68 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v67 + 8 * v66) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v68 + 1;
  }
  v69 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v69 == *(_DWORD *)(a2 + 24))
  {
    v70 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v69 + 1, (unint64_t)&v100);
    v69 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v69) = *v70;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v69) = v100;
  }
  *(_DWORD *)(a2 + 28) = v69 + 1;
  *(_QWORD *)&stats.blocks_in_use = "Purgeable Malloc Zone Bytes";
  stats.size_in_use = 28;
  v71 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v71 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v72 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v73 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v72 + 8 * v71) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v73 + 1;
  }
  v74 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v74 == *(_DWORD *)(a2 + 24))
  {
    v75 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v74 + 1, (unint64_t)&v99);
    v74 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v74) = *v75;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v74) = v99;
  }
  *(_DWORD *)(a2 + 28) = v74 + 1;
  *(_QWORD *)&stats.blocks_in_use = "JavaScript Heap Bytes";
  stats.size_in_use = 22;
  v76 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v76 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v77 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v78 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v77 + 8 * v76) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v78 + 1;
  }
  v79 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v79 == *(_DWORD *)(a2 + 24))
  {
    v80 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v79 + 1, (unint64_t)&v113);
    v79 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v79) = *v80;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v79) = v113;
  }
  *(_DWORD *)(a2 + 28) = v79 + 1;
  *(_QWORD *)&stats.blocks_in_use = "JavaScript Stack Bytes";
  stats.size_in_use = 23;
  v81 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v81 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v82 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v83 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v82 + 8 * v81) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v83 + 1;
  }
  v84 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v84 == *(_DWORD *)(a2 + 24))
  {
    v85 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v84 + 1, (unint64_t)&v111);
    v84 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v84) = *v85;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v84) = v111;
  }
  *(_DWORD *)(a2 + 28) = v84 + 1;
  *(_QWORD *)&stats.blocks_in_use = "JavaScript JIT Bytes";
  stats.size_in_use = 21;
  v86 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v86 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v87 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v88 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v87 + 8 * v86) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v88 + 1;
  }
  v89 = &v112;
  v90 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v90 == *(_DWORD *)(a2 + 24))
  {
    v89 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v90 + 1, (unint64_t)&v112);
    v90 = *(unsigned int *)(a2 + 28);
    v91 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8 * v90);
  }
  else
  {
    v91 = (uint64_t *)(*v15 + 8 * v90);
  }
  *v91 = *v89;
  *(_DWORD *)(a2 + 28) = v90 + 1;
  *(_QWORD *)&stats.blocks_in_use = "Resident Size";
  stats.size_in_use = 14;
  v92 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v92 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t *)&stats);
  }
  else
  {
    v93 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v94 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v93 + 8 * v92) = *(_QWORD *)task_info_outCnt;
    *(_DWORD *)(a2 + 12) = v94 + 1;
  }
  v95 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v95 == *(_DWORD *)(a2 + 24))
  {
    v96 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 16, v95 + 1, (unint64_t)&v98);
    v95 = *(unsigned int *)(a2 + 28);
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v95) = *v96;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v95) = v9;
  }
  *(_DWORD *)(a2 + 28) = v95 + 1;
  return MEMORY[0x19AEAA9E4](v115);
}

void sub_19705FA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  void *v35;
  WTF *v36;

  MEMORY[0x19AEAA9E4](&a33);
  v36 = *(WTF **)(v33 + 16);
  if (v36)
  {
    *(_QWORD *)(v33 + 16) = 0;
    *(_DWORD *)(v33 + 24) = 0;
    WTF::fastFree(v36, v35);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v33, v35);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteAudioTrackProxy::RemoteAudioTrackProxy(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  WTF::ThreadSafeWeakPtrControlBlock *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _QWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  IPC::Encoder *v28;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E34B9AA8;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v8)
    v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = a2;
  v9 = a3 + 2;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a3 + 48))(a3);
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E34B9E00;
  v24 = v11;
  *(_QWORD *)(a1 + 72) = WebCore::TrackPrivateBase::addClient();
  v12 = (uint64_t)v24;
  v24 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a2 + 48);
  WebKit::RemoteAudioTrackProxy::configuration((WebKit::RemoteAudioTrackProxy *)&v24, a1);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v15 = 138;
  *(_QWORD *)(v15 + 8) = v14;
  *(_QWORD *)(v15 + 528) = v15 + 16;
  *(_QWORD *)(v15 + 536) = v15 + 16;
  *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v15 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
  v28 = (IPC::Encoder *)v15;
  IPC::ArgumentCoder<WebKit::AudioTrackPrivateRemoteConfiguration,void>::encode((IPC::Encoder *)v15, (uint64_t *)&v24);
  IPC::Connection::sendMessageImpl(v13, (uint64_t *)&v28, 0, 0);
  v17 = v28;
  v28 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v16);
    WTF::fastFree(v18, v19);
  }
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v26;
  v26 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v25;
  v25 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v22 -= 2;
  }
  return a1;
}

WTF::StringImpl *WebKit::RemoteAudioTrackProxy::configuration(WebKit::RemoteAudioTrackProxy *this, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _BYTE *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  *(_QWORD *)this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 48))(*(_QWORD *)(a2 + 40));
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 40) + 56))(&v14);
  v4 = v14;
  if (v14)
    *(_DWORD *)v14 += 2;
  *((_QWORD *)this + 1) = v4;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 40) + 64))(&v13);
  v5 = v13;
  if (v13)
    *(_DWORD *)v13 += 2;
  *((_QWORD *)this + 2) = v5;
  *((_QWORD *)this + 3) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 96))(*(_QWORD *)(a2 + 40));
  *((_QWORD *)this + 4) = v6;
  *((_DWORD *)this + 10) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 72))(*(_QWORD *)(a2 + 40));
  v7 = *(_BYTE **)(a2 + 40);
  *((_BYTE *)this + 44) = v7[48];
  *((_BYTE *)this + 45) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v7 + 128))(v7);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_DWORD **)(v9 + 56);
  if (v10)
    *v10 += 2;
  *((_QWORD *)this + 6) = v10;
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)(v9 + 64);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::RemoteAudioTrackProxy::~RemoteAudioTrackProxy(WebKit::RemoteAudioTrackProxy *this)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;

  WebCore::TrackPrivateBase::removeClient(*((WebCore::TrackPrivateBase **)this + 5));
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, v2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioTrackProxy::~RemoteAudioTrackProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 *WebKit::RemoteAudioTrackProxy::configurationChanged(WebKit::RemoteAudioTrackProxy *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  IPC::Encoder *v29;

  result = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 4), &v28);
    if (v28)
    {
      v3 = *(_QWORD *)(v28 + 48);
      v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 48))(*((_QWORD *)this + 5));
      v5 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v4;
      WebKit::RemoteAudioTrackProxy::configuration((WebKit::RemoteAudioTrackProxy *)&v24, (uint64_t)this);
      v6 = *((_QWORD *)this + 7);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 161;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v29 = (IPC::Encoder *)v7;
      v8 = *(_QWORD *)(v7 + 544);
      v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
      v10 = v9 + 8;
      v11 = *(_QWORD *)(v7 + 552);
      if (v11 < v9 + 8)
      {
        v21 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v22 = v21;
          v21 *= 2;
        }
        while (v22 < v10);
        result = (unsigned __int8 *)mmap(0, v22, 3, 4098, -1, 0);
        if (result == (unsigned __int8 *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v12 = result;
        memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
        v23 = *(void **)(v7 + 528);
        if (v23 != (void *)(v7 + 16))
          munmap(v23, *(_QWORD *)(v7 + 552));
        *(_QWORD *)(v7 + 528) = v12;
        *(_QWORD *)(v7 + 552) = v22;
        v8 = *(_QWORD *)(v7 + 544);
      }
      else
      {
        v12 = *(unsigned __int8 **)(v7 + 528);
      }
      bzero(&v12[v8], v9 - v8);
      *(_QWORD *)(v7 + 544) = v10;
      v13 = (_QWORD *)(*(_QWORD *)(v7 + 528) + v9);
      *(_QWORD *)(v7 + 536) = v13 + 1;
      *v13 = v5;
      IPC::ArgumentCoder<WebKit::AudioTrackPrivateRemoteConfiguration,void>::encode((IPC::Encoder *)v7, &v24);
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v29, 0, 0);
      v15 = v29;
      v29 = 0;
      if (v15)
      {
        IPC::Encoder::~Encoder(v15, v14);
        WTF::fastFree(v16, v17);
      }
      v18 = v27;
      v27 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v14);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = v26;
      v26 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v14);
        else
          *(_DWORD *)v19 -= 2;
      }
      result = (unsigned __int8 *)v25;
      v25 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
        else
          *(_DWORD *)result -= 2;
      }
      v20 = v28;
      v28 = 0;
      if (v20)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v20 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteAudioTrackProxy::enabledChanged(unsigned __int8 *this, int a2)
{
  if (this[64] != a2)
  {
    this[64] = a2;
    return WebKit::RemoteAudioTrackProxy::configurationChanged((WebKit::RemoteAudioTrackProxy *)this);
  }
  return this;
}

void WebKit::RemoteCDMFactoryProxy::~RemoteCDMFactoryProxy(WebKit::RemoteCDMFactoryProxy *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  }
  v4 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *((_QWORD *)this + 7);
  if (v8)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v8, a2);
  v9 = *((_QWORD *)this + 6);
  if (v9)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v9, a2);
  v10 = *((_QWORD *)this + 5);
  if (v10)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v10, a2);
  v11 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteCDMFactoryProxy::~RemoteCDMFactoryProxy(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteCDMFactoryProxy::clear(WebKit::RemoteCDMFactoryProxy *this, void *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
  {
    *((_QWORD *)this + 5) = 0;
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(result, a2);
  }
  return result;
}

void `non-virtual thunk to'WebKit::RemoteCDMFactoryProxy::~RemoteCDMFactoryProxy(WebKit::RemoteCDMFactoryProxy *this, void *a2)
{
  WebKit::RemoteCDMFactoryProxy::~RemoteCDMFactoryProxy((WebKit::RemoteCDMFactoryProxy *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteCDMFactoryProxy::~RemoteCDMFactoryProxy((WebKit::RemoteCDMFactoryProxy *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteCDMFactoryProxy::createCDM(uint64_t a1, WebKit *this, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t IdentifierInternal;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t result;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v6 = WebKit::factoryForKeySystem(this, this);
  if (!v6)
  {
    v56 = 0;
    *((_QWORD *)&v55 + 1) = 0;
    LOWORD(v55) = 0;
    v53 = 0u;
    v54 = 0u;
    v39 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v39 + 16))(v39, &v56, &v53);
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v40);
    return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v41);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, WebKit *, uint64_t))(*(_QWORD *)v6 + 16))(&v52, v6, this, a1 + 16);
  if (!v52)
  {
    v56 = 0;
    *((_QWORD *)&v55 + 1) = 0;
    LOWORD(v55) = 0;
    v53 = 0u;
    v54 = 0u;
    v43 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v43 + 16))(v43, &v56, &v53);
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    goto LABEL_35;
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v52 + 32))(&v53);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v52 + 64))(&v54);
  LOBYTE(v55) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 112))(v52);
  BYTE1(v55) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 120))(v52);
  *((_QWORD *)&v55 + 1) = 0;
  v7 = operator new();
  v8 = v53;
  *(_QWORD *)&v53 = 0;
  *(_QWORD *)v7 = v8;
  v9 = *((_QWORD *)&v53 + 1);
  *((_QWORD *)&v53 + 1) = 0;
  *(_QWORD *)(v7 + 8) = v9;
  v10 = v54;
  *(_QWORD *)&v54 = 0;
  *(_QWORD *)(v7 + 16) = v10;
  v11 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v54 + 1) = 0;
  *(_QWORD *)(v7 + 24) = v11;
  *(_OWORD *)(v7 + 32) = v55;
  v56 = v7;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v12);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v13);
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E34B9C80;
  v14[1] = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v15 = *(unsigned int **)(a1 + 8);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v7 = v56;
  }
  v17 = v52;
  v52 = 0;
  v14[2] = v15;
  v14[3] = v17;
  v56 = 0;
  v14[4] = v7;
  v18 = WebKit::RemoteCDMFactoryProxy::logger((WebKit::RemoteCDMFactoryProxy *)a1);
  v20 = (unsigned int *)(v18 + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  v14[5] = v18;
  v14[6] = 0;
  std::unique_ptr<WebKit::RemoteCDMConfiguration>::reset[abi:sn180100](&v56, v19);
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v56 = IdentifierInternal;
  v23 = v14[4];
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v53, v23);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v54, v23 + 16);
  v55 = *(_OWORD *)(v23 + 32);
  v26 = *(_QWORD *)(a1 + 40);
  v25 = (uint64_t *)(a1 + 40);
  v24 = v26;
  if (v26
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v25),
        (v24 = *v25) != 0))
  {
    v27 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
  v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
  v31 = v27 & ((v30 >> 31) ^ v30);
  v32 = (uint64_t *)(v24 + 16 * v31);
  v33 = *v32;
  if (*v32)
  {
    v34 = 0;
    v35 = 1;
    while (v33 != IdentifierInternal)
    {
      if (v33 == -1)
        v34 = v32;
      v31 = (v31 + v35) & v27;
      v32 = (uint64_t *)(v24 + 16 * v31);
      v33 = *v32;
      ++v35;
      if (!*v32)
      {
        if (v34)
        {
          *v34 = 0;
          v34[1] = 0;
          --*(_DWORD *)(*v25 - 16);
          v32 = v34;
        }
        goto LABEL_19;
      }
    }
    v45 = v32[1];
    v32[1] = (uint64_t)v14;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    goto LABEL_34;
  }
LABEL_19:
  v36 = v32[1];
  *v32 = IdentifierInternal;
  v32[1] = (uint64_t)v14;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *v25;
  if (*v25)
    v38 = *(_DWORD *)(v37 - 12) + 1;
  else
    v38 = 1;
  *(_DWORD *)(v37 - 12) = v38;
  v46 = *v25;
  if (*v25)
    v47 = *(_DWORD *)(v46 - 12);
  else
    v47 = 0;
  v48 = (*(_DWORD *)(v46 - 16) + v47);
  v49 = *(unsigned int *)(v46 - 4);
  if (v49 > 0x400)
  {
    if (v49 > 2 * v48)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (3 * v49 <= 4 * v48)
LABEL_33:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v25);
LABEL_34:
  v50 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v50 + 16))(v50, &v56, &v53);
  (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
LABEL_35:
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v44);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v51);
  result = v52;
  v52 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::factoryForKeySystem(WebKit *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = WebCore::CDMFactory::registeredFactories(this);
  if (!*(_DWORD *)(v3 + 12))
    return 0;
  v4 = v3;
  v5 = 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD, WebKit *))(**(_QWORD **)(*(_QWORD *)v4 + 8 * v5) + 24))(*(_QWORD *)(*(_QWORD *)v4 + 8 * v5), this);
    if ((result & 1) != 0)
      break;
    if (++v5 >= *(unsigned int *)(v4 + 12))
      return 0;
  }
  if (v5 < *(unsigned int *)(v4 + 12))
    return *(_QWORD *)(*(_QWORD *)v4 + 8 * v5);
  __break(0xC471u);
  return result;
}

uint64_t WebKit::RemoteCDMFactoryProxy::supportsKeySystem(int a1, WebKit *this, uint64_t *a3)
{
  _BOOL8 v4;
  uint64_t v5;

  v4 = WebKit::factoryForKeySystem(this, this) != 0;
  v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v5 + 16))(v5, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

unsigned __int8 ***WebKit::RemoteCDMFactoryProxy::didReceiveCDMMessage(WebKit::RemoteCDMFactoryProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unsigned __int8 ***result;
  uint64_t v6;

  v6 = *((_QWORD *)a3 + 8);
  result = (unsigned __int8 ***)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 5, &v6);
  if (result)
    return WebKit::RemoteCDMProxy::didReceiveMessage(result, a2, a3);
  return result;
}

WTF::StringImpl *WebKit::RemoteCDMFactoryProxy::didReceiveCDMInstanceMessage(WebKit::RemoteCDMFactoryProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *result;
  uint64_t v6;

  v6 = *((_QWORD *)a3 + 8);
  result = (WTF::StringImpl *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 6, &v6);
  if (result)
    return WebKit::RemoteCDMInstanceProxy::didReceiveMessage(result, a2, a3);
  return result;
}

WTF::StringImpl *WebKit::RemoteCDMFactoryProxy::didReceiveCDMInstanceSessionMessage(WebKit::RemoteCDMFactoryProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *result;
  uint64_t v6;

  v6 = *((_QWORD *)a3 + 8);
  result = (WTF::StringImpl *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 7, &v6);
  if (result)
    return WebKit::RemoteCDMInstanceSessionProxy::didReceiveMessage(result, a2, a3);
  return result;
}

uint64_t WebKit::RemoteCDMFactoryProxy::didReceiveSyncCDMMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v9 = *(_QWORD *)(a3 + 64);
  v7 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 40), &v9);
  result = 0;
  if (v7)
  {
    if (*(_WORD *)(a3 + 50) == 3540)
      return IPC::handleMessageSynchronous<Messages::RemoteCDMProxy::CreateInstance,WebKit::RemoteCDMProxy,WebKit::RemoteCDMProxy,void ()(WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::RemoteCDMInstanceConfiguration &&)> &&)>(a2, a3, a4, v7, (void (*)(_QWORD *, _QWORD **))WebKit::RemoteCDMProxy::createInstance, 0);
  }
  return result;
}

BOOL WebKit::RemoteCDMFactoryProxy::didReceiveSyncCDMInstanceMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  uint64_t v7;
  _BOOL8 result;
  uint64_t v9;

  v9 = *(_QWORD *)(a3 + 64);
  v7 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 48), &v9);
  result = 0;
  if (v7)
  {
    if (*(_WORD *)(a3 + 50) == 3539)
      return IPC::handleMessageSynchronous<Messages::RemoteCDMInstanceProxy::CreateSession,WebKit::RemoteCDMInstanceProxy,WebKit::RemoteCDMInstanceProxy,void ()(unsigned long long,WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&)> &&)>(a2, (uint64_t *)a3, a4, v7, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::RemoteCDMInstanceProxy::createSession, 0);
  }
  return result;
}

void WebKit::RemoteCDMFactoryProxy::removeInstance(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1 + 6;
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1 + 6, a2);
  v5 = a1[6];
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4)
      goto LABEL_8;
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v6 = 0;
  }
  if (v6 != v4)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, v4);
LABEL_8:
  v7 = (unsigned __int8 *)a1[3];
  if (v7)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, a1[4], &v9);
    v8 = v9;
    if (v9)
    {
      if (*v3 && *(_DWORD *)(*v3 - 12))
      {
        v9 = 0;
LABEL_15:
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
        return;
      }
      WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(v9 + 72));
      v8 = v9;
      v9 = 0;
      if (v8)
        goto LABEL_15;
    }
  }
}

WebKit::RemoteCDMInstanceSessionProxy *WebKit::RemoteCDMFactoryProxy::removeSession(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  WebKit::RemoteCDMInstanceSessionProxy *result;
  uint64_t v5;
  WebKit::RemoteCDMInstanceSessionProxy *v6;

  v3 = (uint64_t *)(a1 + 56);
  result = (WebKit::RemoteCDMInstanceSessionProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 56), a2);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = (WebKit::RemoteCDMInstanceSessionProxy *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, (uint64_t)result);
  return result;
}

uint64_t *WebKit::RemoteCDMFactoryProxy::mediaKeysStorageDirectory(WebKit::RemoteCDMFactoryProxy *this)
{
  unsigned __int8 *v2;
  uint64_t *v3;
  WebKit::GPUConnectionToWebProcess *v5;
  WebKit::GPUConnectionToWebProcess *v6;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (!v2)
    return (uint64_t *)MEMORY[0x1E0CBF738];
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((_QWORD *)this + 4), &v6);
  if (!v6)
    return (uint64_t *)MEMORY[0x1E0CBF738];
  v3 = WebKit::GPUConnectionToWebProcess::mediaKeysStorageDirectory(v6);
  v5 = v6;
  v6 = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v5 + 2));
  return v3;
}

uint64_t WebKit::RemoteCDMFactoryProxy::logger(WebKit::RemoteCDMFactoryProxy *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v3 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v3 + 8) = 1;
    *(_QWORD *)v3 = off_1E34B8110;
    *(_BYTE *)(v3 + 12) = 1;
    *(_QWORD *)(v3 + 16) = this;
    v4 = (unsigned int *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    v8 = (unsigned __int8 *)*((_QWORD *)this + 3);
    if (v8)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v8, *((_QWORD *)this + 4), &v12);
      v9 = v12;
      result = *((_QWORD *)this + 8);
      if (v12)
      {
        v11 = *(_QWORD *)(v12 + 128);
        v10 = v11 >= 0 || v11 == -1;
      }
      else
      {
        v10 = 0;
      }
    }
    else
    {
      v9 = 0;
      v10 = 0;
      result = *((_QWORD *)this + 8);
    }
    if (*(WebKit::RemoteCDMFactoryProxy **)(result + 16) == this)
      *(_BYTE *)(result + 12) = v10;
    v12 = 0;
    if (v9)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 16));
      return *((_QWORD *)this + 8);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::RemoteCDMFactoryProxy::logger(WebKit::RemoteCDMFactoryProxy *this)
{
  return WebKit::RemoteCDMFactoryProxy::logger((WebKit::RemoteCDMFactoryProxy *)((char *)this - 16));
}

void WebKit::RemoteCDMInstanceProxy::~RemoteCDMInstanceProxy(WebKit::RemoteCDMInstanceProxy *this)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  *(_QWORD *)this = &off_1E34B9B68;
  *((_QWORD *)this + 2) = &unk_1E34B9BB0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5));
  v3 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 8);
  if (v7)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v7, v2);
  v8 = (WTF::StringImpl **)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
    std::default_delete<WebKit::RemoteCDMInstanceConfiguration>::operator()[abi:sn180100](v8, (WTF::StringImpl *)v2);
  v9 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v2);
    }
  }
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v2);
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v13);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WebKit::RemoteCDMInstanceProxy::~RemoteCDMInstanceProxy(this);
  JUMPOUT(0x19AEB936CLL);
}

void `non-virtual thunk to'WebKit::RemoteCDMInstanceProxy::~RemoteCDMInstanceProxy(WebKit::RemoteCDMInstanceProxy *this)
{
  WebKit::RemoteCDMInstanceProxy::~RemoteCDMInstanceProxy((WebKit::RemoteCDMInstanceProxy *)((char *)this - 16));
}

{
  WebKit::RemoteCDMInstanceProxy::~RemoteCDMInstanceProxy((WebKit::RemoteCDMInstanceProxy *)((char *)this - 16));
  JUMPOUT(0x19AEB936CLL);
}

unsigned __int8 *WebKit::RemoteCDMInstanceProxy::unrequestedInitializationDataReceived(unsigned __int8 *result, uint64_t *a2, WebCore::FragmentedSharedBuffer **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  IPC::Encoder *v18;

  v3 = *((_QWORD *)result + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 16);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = result;
          result = *(unsigned __int8 **)(v6 + 24);
          if (result)
          {
            result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(v6 + 32), &v17);
            if (v17)
            {
              v10 = *(_QWORD *)(v17 + 48);
              v11 = *((_QWORD *)v7 + 7);
              v12 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v12 = 731;
              *(_QWORD *)(v12 + 8) = v11;
              *(_QWORD *)(v12 + 528) = v12 + 16;
              *(_QWORD *)(v12 + 536) = v12 + 16;
              *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v12 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
              v18 = (IPC::Encoder *)v12;
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2);
              IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode((IPC::Encoder *)v12, *a3);
              IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v18, 0, 0);
              result = (unsigned __int8 *)v18;
              v18 = 0;
              if (result)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
                result = (unsigned __int8 *)WTF::fastFree(v14, v15);
              }
              v16 = v17;
              v17 = 0;
              if (v16)
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v16 + 16));
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteCDMInstanceProxy::initializeWithConfiguration(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
}

uint64_t WebKit::RemoteCDMInstanceProxy::setServerCertificate(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40));
}

_QWORD *WebKit::RemoteCDMInstanceProxy::setStorageDirectory(_QWORD *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;

  v2 = this[4];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        v5 = this;
        this = *(_QWORD **)(v4 + 8);
        if (this)
        {
          this = WebKit::RemoteCDMFactoryProxy::mediaKeysStorageDirectory((WebKit::RemoteCDMFactoryProxy *)this);
          v8 = (WTF::StringImpl *)*this;
          if (*this)
          {
            v9 = *((_DWORD *)v8 + 1);
            *(_DWORD *)v8 += 2;
            if (v9)
            {
              this = *(_QWORD **)a2;
              if (*(_QWORD *)a2)
              {
                this = (_QWORD *)WTF::StringImpl::startsWith();
                if ((_DWORD)this)
                  this = (_QWORD *)(*(uint64_t (**)(_QWORD, const WTF::String *))(*(_QWORD *)v5[5] + 64))(v5[5], a2);
              }
            }
            if (*(_DWORD *)v8 == 2)
              return (_QWORD *)WTF::StringImpl::destroy(v8, v7);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
      }
    }
  }
  return this;
}

_DWORD *WebKit::RemoteCDMInstanceProxy::createSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t IdentifierInternal;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *result;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  WTF *v50;

  (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)(a1 + 40) + 80))(&v49);
  if (!v49
    || (v5 = *(_QWORD *)(a1 + 32)) == 0
    || (v6 = *(_QWORD *)(v5 + 8)) == 0
    || (v7 = *(_QWORD *)(v6 + 16)) == 0
    || !*(_QWORD *)(v7 + 8))
  {
    v50 = 0;
    v13 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v13 + 16))(v13, &v50);
    goto LABEL_12;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 16))();
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v48 = IdentifierInternal;
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v10 + 8), *(_QWORD *)(v9 + 8));
    v11 = *(unsigned int **)(v10 + 8);
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      IdentifierInternal = v48;
    }
  }
  else
  {
    v11 = 0;
  }
  v15 = v49;
  v49 = 0;
  v16 = operator new();
  *(_QWORD *)(v16 + 16) = &unk_1E34B9C40;
  *(_QWORD *)v16 = &off_1E34B9BE8;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = v11;
  *(_QWORD *)(v16 + 40) = v15;
  *(_QWORD *)(v16 + 48) = IdentifierInternal;
  *(_DWORD *)(v16 + 56) = 0;
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = v16 + 16;
  v19 = *(unsigned int **)(v16 + 24);
  *(_QWORD *)(v16 + 24) = v17;
  if (!v19)
    goto LABEL_58;
  do
  {
    v20 = __ldaxr(v19);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v19));
  if (!v21)
  {
    atomic_store(1u, v19);
    WTF::fastFree((WTF *)v19, v18);
  }
  v17 = *(_QWORD *)(v16 + 24);
  if (v17)
  {
LABEL_58:
    do
      v22 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v22 + 1, (unsigned int *)v17));
  }
  v50 = (WTF *)v17;
  (*(void (**)(_QWORD, WTF **))(**(_QWORD **)(v16 + 40) + 24))(*(_QWORD *)(v16 + 40), &v50);
  v24 = (unsigned int *)v50;
  v50 = 0;
  if (v24)
  {
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v23);
    }
  }
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 16);
  if (v27)
    v28 = *(_QWORD *)(v27 + 8);
  else
    v28 = 0;
  v31 = *(_QWORD *)(v28 + 56);
  v30 = (uint64_t *)(v28 + 56);
  v29 = v31;
  if (v31
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v30, 0), (v29 = *v30) != 0))
  {
    v32 = *(_DWORD *)(v29 - 8);
  }
  else
  {
    v32 = 0;
  }
  v33 = v48;
  v34 = (v48 + ~(v48 << 32)) ^ ((unint64_t)(v48 + ~(v48 << 32)) >> 22);
  v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
  v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
  v37 = v32 & ((v36 >> 31) ^ v36);
  v38 = (uint64_t *)(v29 + 16 * v37);
  v39 = *v38;
  if (*v38)
  {
    v40 = 0;
    v41 = 1;
    do
    {
      if (v39 == v48)
      {
        std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100]((WebKit::RemoteCDMInstanceSessionProxy **)v38 + 1, (WebKit::RemoteCDMInstanceSessionProxy *)v16);
        goto LABEL_52;
      }
      if (v39 == -1)
        v40 = v38;
      v37 = (v37 + v41) & v32;
      v38 = (uint64_t *)(v29 + 16 * v37);
      v39 = *v38;
      ++v41;
    }
    while (*v38);
    if (v40)
    {
      *v40 = 0;
      v40[1] = 0;
      --*(_DWORD *)(*v30 - 16);
      v38 = v40;
    }
  }
  *v38 = v33;
  std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100]((WebKit::RemoteCDMInstanceSessionProxy **)v38 + 1, (WebKit::RemoteCDMInstanceSessionProxy *)v16);
  v42 = *v30;
  if (*v30)
    v43 = *(_DWORD *)(v42 - 12) + 1;
  else
    v43 = 1;
  *(_DWORD *)(v42 - 12) = v43;
  v44 = *v30;
  if (*v30)
    v45 = *(_DWORD *)(v44 - 12);
  else
    v45 = 0;
  v46 = (*(_DWORD *)(v44 - 16) + v45);
  v47 = *(unsigned int *)(v44 - 4);
  if (v47 > 0x400)
  {
    if (v47 > 2 * v46)
      goto LABEL_52;
    goto LABEL_51;
  }
  if (3 * v47 <= 4 * v46)
LABEL_51:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v30, v38);
LABEL_52:
  v13 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 16))(v13, &v48);
LABEL_12:
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v49;
  v49 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebKit::RemoteCDMInstanceSessionProxy::~RemoteCDMInstanceSessionProxy(WebKit::RemoteCDMInstanceSessionProxy *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

{
  WebKit::RemoteCDMInstanceSessionProxy::~RemoteCDMInstanceSessionProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void `non-virtual thunk to'WebKit::RemoteCDMInstanceSessionProxy::~RemoteCDMInstanceSessionProxy(WebKit::RemoteCDMInstanceSessionProxy *this, void *a2)
{
  WebKit::RemoteCDMInstanceSessionProxy::~RemoteCDMInstanceSessionProxy((WebKit::RemoteCDMInstanceSessionProxy *)((char *)this - 16), a2);
}

{
  WebKit::RemoteCDMInstanceSessionProxy::~RemoteCDMInstanceSessionProxy((WebKit::RemoteCDMInstanceSessionProxy *)((char *)this - 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

unsigned int *WebKit::RemoteCDMInstanceSessionProxy::requestLicense(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int *result;
  _QWORD *v20;
  unsigned int *v21;

  if (*a5
    && (v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24),
        ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 128))(v12, a4) & 1) != 0))
  {
    v13 = *(_QWORD *)(a1 + 40);
    v21 = *a5;
    *a5 = 0;
    v14 = *a6;
    *a6 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = &off_1E34B9E28;
    v15[1] = v14;
    v20 = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int **, _QWORD **))(*(_QWORD *)v13 + 40))(v13, a2, a3, a4, &v21, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  else
  {
    v21 = 0;
    v18 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, unsigned int **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v18 + 16))(v18, &v21, MEMORY[0x1E0CBF738], 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  result = v21;
  v21 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v16);
  return result;
}

unsigned int *WebKit::RemoteCDMInstanceSessionProxy::updateLicense(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *result;
  void *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  _QWORD *v21;
  unsigned int *v22;
  char v23;
  char v24[8];
  char v25;
  _QWORD v26[2];
  char v27;

  if (*a4)
  {
    (*(void (**)(unsigned int **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)
                                                        + 136))(&v20);
    if (v20)
    {
      v9 = *(_QWORD *)(a1 + 40);
      v26[0] = v20;
      v20 = 0;
      v10 = *a5;
      *a5 = 0;
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = &off_1E34B9E50;
      v11[1] = v10;
      v21 = v11;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD **))(*(_QWORD *)v9 + 48))(v9, a2, a3, v26, &v21);
      v13 = v21;
      v21 = 0;
      if (v13)
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      v14 = (unsigned int *)v26[0];
      v26[0] = 0;
      if (v14)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v12);
    }
    else
    {
      LOBYTE(v26[0]) = 0;
      v27 = 0;
      v24[0] = 0;
      v25 = 0;
      LOBYTE(v21) = 0;
      v23 = 0;
      v18 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, _QWORD, _QWORD *, char *, _QWORD **, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0, v26, v24, &v21, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      if (v23)
      {
        v19 = v22;
        v22 = 0;
        if (v19)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v12);
      }
      if (v27)
        WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v12);
    }
    result = v20;
    v20 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v12);
  }
  else
  {
    LOBYTE(v26[0]) = 0;
    v27 = 0;
    v24[0] = 0;
    v25 = 0;
    LOBYTE(v21) = 0;
    v23 = 0;
    v15 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *, char *, _QWORD **, _QWORD))(*(_QWORD *)v15 + 16))(v15, 1, v26, v24, &v21, 0);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v23)
    {
      result = v22;
      v22 = 0;
      if (result)
        result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v17);
    }
    if (v27)
      return (unsigned int *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v17);
  }
  return result;
}

unsigned int *WebKit::RemoteCDMInstanceSessionProxy::loadSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  unsigned int *result;
  uint64_t v15;
  _BYTE v16[8];
  unsigned int *v17;
  char v18;
  _BYTE v19[16];
  _QWORD v20[2];
  char v21;
  WTF::StringImpl *v22;
  char v23;

  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 144))(&v22, v9, a3);
  if (v23)
  {
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *a5;
    *a5 = 0;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = &off_1E34B9E78;
    v12[1] = v11;
    v20[0] = v12;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, _QWORD *))(*(_QWORD *)v10 + 56))(v10, a2, &v22, a4, v20);
    result = (unsigned int *)v20[0];
    v20[0] = 0;
    if (result)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    LOBYTE(v20[0]) = 0;
    v21 = 0;
    v19[0] = 0;
    v19[8] = 0;
    v16[0] = 0;
    v18 = 0;
    v15 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD *, _BYTE *, _BYTE *, _QWORD, uint64_t))(*(_QWORD *)v15 + 16))(v15, v20, v19, v16, 0, 2);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v18)
    {
      result = v17;
      v17 = 0;
      if (result)
        result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v13);
    }
    if (v21)
      result = (unsigned int *)WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v13);
  }
  if (v23)
  {
    result = (unsigned int *)v22;
    v22 = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v13);
      else
        *result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::RemoteCDMInstanceSessionProxy::closeSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *a3;
  *a3 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = &off_1E34B9EA0;
  v6[1] = v5;
  v8 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v4 + 64))(v4, a2, &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteCDMInstanceSessionProxy::removeSessionData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = *a4;
  *a4 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E34B9EC8;
  v8[1] = v7;
  v10 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v6 + 72))(v6, a2, a3, &v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int8 *WebKit::RemoteCDMInstanceSessionProxy::updateKeyStatuses(unsigned __int8 *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v2 = *((_QWORD *)result + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = result;
          result = *(unsigned __int8 **)(v5 + 24);
          if (result)
          {
            result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(v5 + 32), &v20);
            if (v20)
            {
              v8 = *(_QWORD *)(v20 + 48);
              v9 = *((_QWORD *)v6 + 6);
              v10 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v10 = 730;
              *(_QWORD *)(v10 + 8) = v9;
              *(_QWORD *)(v10 + 528) = v10 + 16;
              *(_QWORD *)(v10 + 536) = v10 + 16;
              *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v10 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
              v21 = (IPC::Encoder *)v10;
              v11 = *((unsigned int *)a2 + 3);
              *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v11;
              v12 = *((unsigned int *)a2 + 3);
              if ((_DWORD)v12)
              {
                v13 = *a2;
                v14 = v13 + 16 * v12;
                do
                {
                  IPC::ArgumentCoder<WebCore::SharedBuffer,void>::encode((IPC::Encoder *)v10, *(WebCore::FragmentedSharedBuffer **)v13);
                  v15 = *(_BYTE *)(v13 + 8);
                  *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = v15;
                  v13 += 16;
                }
                while (v13 != v14);
              }
              IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v21, 0, 0);
              result = (unsigned __int8 *)v21;
              v21 = 0;
              if (result)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
                result = (unsigned __int8 *)WTF::fastFree(v17, v18);
              }
              v19 = v20;
              v20 = 0;
              if (v19)
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v19 + 16));
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteCDMInstanceSessionProxy::updateKeyStatuses(uint64_t a1, uint64_t *a2)
{
  return WebKit::RemoteCDMInstanceSessionProxy::updateKeyStatuses((unsigned __int8 *)(a1 - 16), a2);
}

unsigned __int8 *WebKit::RemoteCDMInstanceSessionProxy::sendMessage(unsigned __int8 *result, char a2, WebCore::FragmentedSharedBuffer **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v10;
  WebCore::FragmentedSharedBuffer *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WebCore::FragmentedSharedBuffer *v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v3 = *((_QWORD *)result + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 16);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = result;
          result = *(unsigned __int8 **)(v6 + 24);
          if (result)
          {
            result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(v6 + 32), &v20);
            if (v20)
            {
              v10 = *(_QWORD *)(v20 + 48);
              v11 = *a3;
              *a3 = 0;
              v19 = v11;
              v12 = *((_QWORD *)v7 + 6);
              v13 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v13 = 728;
              *(_QWORD *)(v13 + 8) = v12;
              *(_QWORD *)(v13 + 528) = v13 + 16;
              *(_QWORD *)(v13 + 536) = v13 + 16;
              *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v13 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
              v21 = (IPC::Encoder *)v13;
              *IPC::Encoder::grow((IPC::Encoder *)v13, 1uLL, 1) = a2;
              IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>((IPC::Encoder *)v13, &v19);
              IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v21, 0, 0);
              v15 = v21;
              v21 = 0;
              if (v15)
              {
                IPC::Encoder::~Encoder(v15, v14);
                WTF::fastFree(v16, v17);
              }
              result = (unsigned __int8 *)v19;
              v19 = 0;
              if (result)
                result = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v14);
              v18 = v20;
              v20 = 0;
              if (v18)
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v18 + 16));
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteCDMInstanceSessionProxy::sendMessage(uint64_t a1, char a2, WebCore::FragmentedSharedBuffer **a3)
{
  return WebKit::RemoteCDMInstanceSessionProxy::sendMessage((unsigned __int8 *)(a1 - 16), a2, a3);
}

unsigned __int8 *WebKit::RemoteCDMInstanceSessionProxy::sessionIdChanged(unsigned __int8 *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Encoder *v16;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = this;
          this = *(unsigned __int8 **)(v5 + 24);
          if (this)
          {
            this = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(this, *(_QWORD *)(v5 + 32), &v15);
            if (v15)
            {
              v8 = *(_QWORD *)(v15 + 48);
              v9 = *((_QWORD *)v6 + 6);
              v10 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v10 = 729;
              *(_QWORD *)(v10 + 8) = v9;
              *(_QWORD *)(v10 + 528) = v10 + 16;
              *(_QWORD *)(v10 + 536) = v10 + 16;
              *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v10 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
              v16 = (IPC::Encoder *)v10;
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)a2);
              IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v16, 0, 0);
              this = (unsigned __int8 *)v16;
              v16 = 0;
              if (this)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)this, v11);
                this = (unsigned __int8 *)WTF::fastFree(v12, v13);
              }
              v14 = v15;
              v15 = 0;
              if (v14)
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v14 + 16));
            }
          }
        }
      }
    }
  }
  return this;
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteCDMInstanceSessionProxy::sessionIdChanged(WebKit::RemoteCDMInstanceSessionProxy *this, const WTF::String *a2)
{
  return WebKit::RemoteCDMInstanceSessionProxy::sessionIdChanged((unsigned __int8 *)this - 16, a2);
}

void WebKit::RemoteCDMProxy::~RemoteCDMProxy(WebKit::RemoteCDMProxy *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = &off_1E34B9C80;
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  std::unique_ptr<WebKit::RemoteCDMConfiguration>::reset[abi:sn180100]((uint64_t *)this + 4, a2);
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v7);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

{
  WebKit::RemoteCDMProxy::~RemoteCDMProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::RemoteCDMProxy::getSupportedConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v9 = *a4;
  *a4 = 0;
  *v8 = &off_1E34B9EF0;
  v8[1] = v9;
  if (v9)
  {
    v11 = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v7 + 24))(v7, a2, a3, &v11);
    result = (uint64_t)v11;
    v11 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    result = 139;
    __break(0xC471u);
  }
  return result;
}

_DWORD *WebKit::RemoteCDMProxy::createInstance(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t IdentifierInternal;
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  _DWORD *result;
  _DWORD *v55;
  WTF::StringImpl *v56;

  (*(void (**)(_DWORD **__return_ptr))(**(_QWORD **)(a1 + 24) + 96))(&v55);
  if (!v55 || (v4 = *(_QWORD *)(a1 + 16)) == 0 || !*(_QWORD *)(v4 + 8))
  {
    v56 = 0;
    v30 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v30 + 16))(v30, 0, &v56);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    goto LABEL_52;
  }
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v6 = v55;
  v55 = 0;
  v7 = *(_DWORD **)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
  if (v7)
    *v7 += 2;
  v8 = (_QWORD *)operator new();
  *v8 = v7;
  v9 = (_QWORD *)operator new();
  *v9 = &off_1E34B9B68;
  v9[1] = 0;
  v9[2] = &unk_1E34B9BB0;
  v9[3] = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v10 = *(unsigned int **)(a1 + 8);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v9[4] = v10;
  v9[5] = v6;
  v9[6] = v8;
  v9[7] = IdentifierInternal;
  v9[8] = 0;
  v12 = *(_QWORD *)(a1 + 40);
  v13 = (unsigned int *)(v12 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = *(_QWORD *)(a1 + 48);
  v9[9] = v12;
  v9[10] = v15;
  v16 = v9[5];
  v17 = v9[1];
  if (v17)
    goto LABEL_66;
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = v9;
  v19 = (unsigned int *)v9[1];
  v9[1] = v17;
  if (!v19)
    goto LABEL_66;
  do
  {
    v20 = __ldaxr(v19);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v19));
  if (!v21)
  {
    atomic_store(1u, v19);
    WTF::fastFree((WTF *)v19, v18);
  }
  v17 = v9[1];
  if (v17)
  {
LABEL_66:
    do
      v22 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v22 + 1, (unsigned int *)v17));
  }
  v56 = (WTF::StringImpl *)v17;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 16))(v16, &v56);
  v24 = (unsigned int *)v56;
  v56 = 0;
  if (v24)
  {
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v23);
    }
  }
  v27 = *(WTF::StringImpl **)v9[6];
  if (v27)
    *(_DWORD *)v27 += 2;
  v56 = v27;
  v28 = *(_QWORD *)(a1 + 16);
  if (v28)
    v29 = *(_QWORD *)(v28 + 8);
  else
    v29 = 0;
  v34 = *(_QWORD *)(v29 + 48);
  v33 = (uint64_t *)(v29 + 48);
  v32 = v34;
  if (v34
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v33, 0), (v32 = *v33) != 0))
  {
    v35 = *(_DWORD *)(v32 - 8);
  }
  else
  {
    v35 = 0;
  }
  v36 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
  v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
  v39 = v35 & ((v38 >> 31) ^ v38);
  v40 = (uint64_t *)(v32 + 16 * v39);
  v41 = *v40;
  if (*v40)
  {
    v42 = 0;
    v43 = 1;
    while (v41 != IdentifierInternal)
    {
      if (v41 == -1)
        v42 = v40;
      v39 = (v39 + v43) & v35;
      v40 = (uint64_t *)(v32 + 16 * v39);
      v41 = *v40;
      ++v43;
      if (!*v40)
      {
        if (v42)
        {
          *v42 = 0;
          v42[1] = 0;
          --*(_DWORD *)(*v33 - 16);
          v40 = v42;
        }
        goto LABEL_38;
      }
    }
    v47 = v40[1];
    v40[1] = (uint64_t)v9;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    goto LABEL_51;
  }
LABEL_38:
  v44 = v40[1];
  *v40 = IdentifierInternal;
  v40[1] = (uint64_t)v9;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *v33;
  if (*v33)
    v46 = *(_DWORD *)(v45 - 12) + 1;
  else
    v46 = 1;
  *(_DWORD *)(v45 - 12) = v46;
  v48 = *v33;
  if (*v33)
    v49 = *(_DWORD *)(v48 - 12);
  else
    v49 = 0;
  v50 = (*(_DWORD *)(v48 - 16) + v49);
  v51 = *(unsigned int *)(v48 - 4);
  if (v51 > 0x400)
  {
    if (v51 > 2 * v50)
      goto LABEL_51;
    goto LABEL_50;
  }
  if (3 * v51 <= 4 * v50)
LABEL_50:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v33, v40);
LABEL_51:
  v52 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v52 + 16))(v52, IdentifierInternal, &v56);
  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
LABEL_52:
  v53 = v56;
  v56 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v31);
    else
      *(_DWORD *)v53 -= 2;
  }
  result = v55;
  v55 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebKit::RemoteLegacyCDMFactoryProxy::~RemoteLegacyCDMFactoryProxy(WebKit::RemoteLegacyCDMFactoryProxy *this, void *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  WebKit::RemoteLegacyCDMFactoryProxy::clear(this, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v8, v3);
  v9 = *((_QWORD *)this + 3);
  if (v9)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v9, v3);
  v10 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v3);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteLegacyCDMFactoryProxy::~RemoteLegacyCDMFactoryProxy(this, a2);
  WTF::fastFree(v2, v3);
}

_QWORD *WebKit::RemoteLegacyCDMFactoryProxy::clear(_QWORD *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  v2 = this[3];
  v3 = this[4];
  v4 = this[2];
  this[3] = 0;
  this[4] = 0;
  if (!v4)
    goto LABEL_44;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_44;
  if (!v3)
  {
    v8 = 0;
    v6 = 0;
LABEL_12:
    v7 = (uint64_t *)(v3 + 16 * v6);
    goto LABEL_13;
  }
  v6 = *(unsigned int *)(v3 - 4);
  v7 = (uint64_t *)(v3 + 16 * v6);
  if (!*(_DWORD *)(v3 - 12))
  {
    v8 = (uint64_t *)(v3 + 16 * v6);
    goto LABEL_12;
  }
  v8 = (uint64_t *)v3;
  if ((_DWORD)v6)
  {
    v9 = 16 * v6;
    v8 = (uint64_t *)v3;
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_13:
  if (v3)
    v10 = (uint64_t *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v10 = 0;
  while (v8 != v10)
  {
    v11 = v8 + 2;
    this = IPC::MessageReceiverMap::removeMessageReceiver(v5 + 56, 0x5Du, *v8);
    v8 = v7;
    if (v11 != v7)
    {
      v8 = v11;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
  }
  if (v2)
  {
    v12 = *(unsigned int *)(v2 - 4);
    v13 = (uint64_t *)(v2 + 16 * v12);
    if (*(_DWORD *)(v2 - 12))
    {
      v14 = (uint64_t *)v2;
      if ((_DWORD)v12)
      {
        v15 = 16 * v12;
        v14 = (uint64_t *)v2;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 2;
          v15 -= 16;
          if (!v15)
          {
            v14 = v13;
            goto LABEL_33;
          }
        }
      }
      goto LABEL_33;
    }
    v14 = (uint64_t *)(v2 + 16 * v12);
  }
  else
  {
    v14 = 0;
    v12 = 0;
  }
  v13 = (uint64_t *)(v2 + 16 * v12);
LABEL_33:
  if (v2)
    v16 = (uint64_t *)(v2 + 16 * *(unsigned int *)(v2 - 4));
  else
    v16 = 0;
  if (v16 != v14)
  {
    v17 = v5 + 56;
    do
    {
      v18 = v14 + 2;
      this = IPC::MessageReceiverMap::removeMessageReceiver(v17, 0x5Bu, *v14);
      v14 = v13;
      if (v18 != v13)
      {
        v14 = v18;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 2;
          if (v14 == v13)
          {
            v14 = v13;
            break;
          }
        }
      }
    }
    while (v14 != v16);
  }
LABEL_44:
  if (v3)
    this = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  if (v2)
    return (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v2, a2);
  return this;
}

WebCore::LegacyCDM *WebKit::RemoteLegacyCDMFactoryProxy::createCDM(uint64_t a1, WebCore::LegacyCDM *this, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  WebCore::LegacyCDM *v11;
  uint64_t IdentifierInternal;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  WebCore::LegacyCDM *result;
  WTF *v39;
  void *v40;
  uint64_t v41;
  WebCore::LegacyCDM *v42;
  unsigned int *v43[3];
  _QWORD v44[2];

  WebCore::LegacyCDM::create(this, this);
  if (!v42)
  {
    v43[0] = 0;
    v31 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v31 + 16))(v31, v43);
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    goto LABEL_37;
  }
  if (*((_BYTE *)a3 + 8))
    v7 = *a3;
  else
    v7 = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v8 = *(unsigned int **)(a1 + 8);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = (_QWORD *)operator new();
  *v10 = &off_1E34B9CF0;
  v10[1] = 0;
  v10[2] = &unk_1E34B9D30;
  v10[3] = v8;
  v10[4] = v7;
  v11 = v42;
  v42 = 0;
  v10[5] = v11;
  *((_QWORD *)v11 + 2) = v10 + 2;
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v41 = IdentifierInternal;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v15 = IdentifierInternal;
      v44[0] = 91;
      v44[1] = IdentifierInternal;
      WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v14 + 64), (unsigned __int8 *)v44, (uint64_t)v10, v43);
      v18 = *(_QWORD *)(a1 + 24);
      v17 = (uint64_t *)(a1 + 24);
      v16 = v18;
      if (v18
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v17),
            (v16 = *v17) != 0))
      {
        v19 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v19 = 0;
      }
      v20 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = (uint64_t *)(v16 + 16 * v23);
      v25 = *v24;
      if (*v24)
      {
        v26 = 0;
        v27 = 1;
        while (v25 != v15)
        {
          if (v25 == -1)
            v26 = v24;
          v23 = (v23 + v27) & v19;
          v24 = (uint64_t *)(v16 + 16 * v23);
          v25 = *v24;
          ++v27;
          if (!*v24)
          {
            if (v26)
            {
              *v26 = 0;
              v26[1] = 0;
              --*(_DWORD *)(*v17 - 16);
              v24 = v26;
            }
            goto LABEL_20;
          }
        }
        v32 = v24[1];
        v24[1] = (uint64_t)v10;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        goto LABEL_34;
      }
LABEL_20:
      v28 = v24[1];
      *v24 = v15;
      v24[1] = (uint64_t)v10;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      v29 = *v17;
      if (*v17)
        v30 = *(_DWORD *)(v29 - 12) + 1;
      else
        v30 = 1;
      *(_DWORD *)(v29 - 12) = v30;
      v33 = *v17;
      if (*v17)
        v34 = *(_DWORD *)(v33 - 12);
      else
        v34 = 0;
      v35 = (*(_DWORD *)(v33 - 16) + v34);
      v36 = *(unsigned int *)(v33 - 4);
      if (v36 > 0x400)
      {
        if (v36 > 2 * v35)
          goto LABEL_34;
      }
      else if (3 * v36 > 4 * v35)
      {
LABEL_34:
        v10 = 0;
        goto LABEL_35;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v17);
      goto LABEL_34;
    }
  }
LABEL_35:
  v37 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v37 + 16))(v37, &v41);
  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
LABEL_37:
  result = v42;
  v42 = 0;
  if (result)
  {
    WebCore::LegacyCDM::~LegacyCDM(result);
    return (WebCore::LegacyCDM *)WTF::fastFree(v39, v40);
  }
  return result;
}

uint64_t WebKit::RemoteLegacyCDMFactoryProxy::supportsKeySystem(int a1, WebCore::LegacyCDM *this, WTF::String *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;

  if (*((_BYTE *)a3 + 8))
    v5 = WebCore::LegacyCDM::keySystemSupportsMimeType(this, a3, a3);
  else
    v5 = WebCore::LegacyCDM::supportsKeySystem(this, this);
  v6 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t *WebKit::RemoteLegacyCDMFactoryProxy::didReceiveCDMMessage(WebKit::RemoteLegacyCDMFactoryProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t *result;
  uint64_t v6;

  v6 = *((_QWORD *)a3 + 8);
  result = (uint64_t *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 3, &v6);
  if (result)
    return WebKit::RemoteLegacyCDMProxy::didReceiveMessage(result, a2, a3);
  return result;
}

_QWORD *WebKit::RemoteLegacyCDMFactoryProxy::didReceiveCDMSessionMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = *(_QWORD *)(a3 + 64);
  result = (_QWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v5);
  if (result && *(_WORD *)(a3 + 50) == 1112)
  {
    result = (_QWORD *)result[8];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
  }
  return result;
}

uint64_t WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncCDMMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, WTF::StringImpl **a4)
{
  uint64_t result;
  uint64_t v8;

  v8 = *(_QWORD *)(a3 + 64);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 24), &v8);
  if (result)
    return WebKit::RemoteLegacyCDMProxy::didReceiveSyncMessage(result, a2, a3, a4);
  return result;
}

void WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncCDMSessionMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a3 + 64);
  v7 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v8);
  if (v7)
    WebKit::RemoteLegacyCDMSessionProxy::didReceiveSyncMessage(v7, a2, a3, a4);
}

void WebKit::RemoteLegacyCDMFactoryProxy::removeSession(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      IPC::MessageReceiverMap::removeMessageReceiver(v3 + 56, 0x5Du, a2);
      v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v8);
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
      {
        v7 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
        if (v7 == v5)
          goto LABEL_11;
      }
      else
      {
        if (!v5)
          goto LABEL_12;
        v7 = 0;
      }
      if (v7 != v5)
      {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)(a1 + 32), v5);
        v6 = *(_QWORD *)(a1 + 32);
      }
      if (v6)
      {
LABEL_11:
        if (*(_DWORD *)(v6 - 12))
          return;
      }
LABEL_12:
      WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(v3 + 72));
    }
  }
}

void WebKit::RemoteLegacyCDMProxy::~RemoteLegacyCDMProxy(WebKit::RemoteLegacyCDMProxy *this, void *a2)
{
  WebCore::LegacyCDM *v3;
  WTF *v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34B9CF0;
  *((_QWORD *)this + 2) = &unk_1E34B9D30;
  v3 = (WebCore::LegacyCDM *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    WebCore::LegacyCDM::~LegacyCDM(v3);
    WTF::fastFree(v4, v5);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WebKit::RemoteLegacyCDMProxy::~RemoteLegacyCDMProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void `non-virtual thunk to'WebKit::RemoteLegacyCDMProxy::~RemoteLegacyCDMProxy(WebKit::RemoteLegacyCDMProxy *this, void *a2)
{
  WebKit::RemoteLegacyCDMProxy::~RemoteLegacyCDMProxy((WebKit::RemoteLegacyCDMProxy *)((char *)this - 16), a2);
}

{
  WebKit::RemoteLegacyCDMProxy::~RemoteLegacyCDMProxy((WebKit::RemoteLegacyCDMProxy *)((char *)this - 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::RemoteLegacyCDMProxy::supportsMIMEType(uint64_t a1, const WTF::String *a2, uint64_t *a3)
{
  WebCore::LegacyCDM *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(WebCore::LegacyCDM **)(a1 + 40);
  if (v4)
  {
    v5 = WebCore::LegacyCDM::supportsMIMEType(v4, a2);
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
  }
  else
  {
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t WebKit::RemoteLegacyCDMProxy::createSession(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v6;
  uint64_t IdentifierInternal;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned int *v53[4];
  _QWORD v54[2];

  if (!*(_QWORD *)(a1 + 40) || (v6 = *(_QWORD *)(a1 + 24)) == 0 || !*(_QWORD *)(v6 + 8))
  {
    v53[0] = 0;
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(_QWORD *, unsigned int **))(*v11 + 16))(v11, v53);
    return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  }
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v52 = IdentifierInternal;
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x50);
  v11[2] = &unk_1E34B9DB8;
  v11[3] = 0;
  *v11 = off_1E34B9D58;
  v11[1] = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v10 + 8), v10);
  v13 = *(unsigned int **)(v10 + 8);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v11[4] = v13;
  v15 = *(_QWORD *)(v10 + 40);
  if (!v15)
  {
    v16 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v16 + 8) = 1;
    *(_QWORD *)v16 = off_1E34B8110;
    *(_BYTE *)(v16 + 12) = 1;
    *(_QWORD *)(v16 + 16) = v10;
    v17 = *(unsigned int **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v16;
    if (v17)
    {
      v18 = v17 + 2;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v17 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    v21 = *(_QWORD *)(v10 + 16);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      v15 = *(_QWORD *)(v10 + 40);
      if (v22)
      {
        v22 = *(_QWORD *)(v22 + 128);
        LOBYTE(v22) = (v22 & 0x8000000000000000) == 0 || v22 == -1;
      }
    }
    else
    {
      LOBYTE(v22) = 0;
      v15 = *(_QWORD *)(v10 + 40);
    }
    if (*(_QWORD *)(v15 + 16) == v10)
      *(_BYTE *)(v15 + 12) = v22;
  }
  v23 = (unsigned int *)(v15 + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  v11[5] = v15;
  v11[6] = a3;
  v11[7] = IdentifierInternal;
  WebCore::LegacyCDM::createSession();
  v11[9] = 0;
  if (!v11[8])
  {
    v25 = v11[5];
    v26 = (unsigned int *)v11[6];
    v53[0] = (unsigned int *)"RemoteLegacyCDMSessionProxy";
    v53[1] = (unsigned int *)28;
    v53[2] = (unsigned int *)"RemoteLegacyCDMSessionProxy";
    v53[3] = v26;
    if (*(_BYTE *)(v25 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [30]>((uint64_t)&WebKit2LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v53, "could not create CDM session.");
  }
  v27 = *(_QWORD *)(a1 + 24);
  if (v27)
    v28 = *(_QWORD *)(v27 + 8);
  else
    v28 = 0;
  v29 = *(_QWORD *)(v28 + 16);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 8);
    if (v30)
    {
      v54[0] = 93;
      v54[1] = IdentifierInternal;
      WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v30 + 64), (unsigned __int8 *)v54, (uint64_t)v11, v53);
      v33 = *(_QWORD *)(v28 + 32);
      v32 = (uint64_t *)(v28 + 32);
      v31 = v33;
      if (v33
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v32, 0), (v31 = *v32) != 0))
      {
        v34 = *(_DWORD *)(v31 - 8);
      }
      else
      {
        v34 = 0;
      }
      v35 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                   + ~(IdentifierInternal << 32)) >> 22);
      v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
      v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
      v38 = v34 & ((v37 >> 31) ^ v37);
      v39 = (uint64_t *)(v31 + 16 * v38);
      v40 = *v39;
      if (*v39)
      {
        v41 = 0;
        v42 = 1;
        while (v40 != IdentifierInternal)
        {
          if (v40 == -1)
            v41 = v39;
          v38 = (v38 + v42) & v34;
          v39 = (uint64_t *)(v31 + 16 * v38);
          v40 = *v39;
          ++v42;
          if (!*v39)
          {
            if (v41)
            {
              *v41 = 0;
              v41[1] = 0;
              --*(_DWORD *)(*v32 - 16);
              v39 = v41;
            }
            goto LABEL_45;
          }
        }
        v46 = v39[1];
        v39[1] = (uint64_t)v11;
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
        goto LABEL_58;
      }
LABEL_45:
      v43 = v39[1];
      *v39 = IdentifierInternal;
      v39[1] = (uint64_t)v11;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      v44 = *v32;
      if (*v32)
        v45 = *(_DWORD *)(v44 - 12) + 1;
      else
        v45 = 1;
      *(_DWORD *)(v44 - 12) = v45;
      v47 = *v32;
      if (*v32)
        v48 = *(_DWORD *)(v47 - 12);
      else
        v48 = 0;
      v49 = (*(_DWORD *)(v47 - 16) + v48);
      v50 = *(unsigned int *)(v47 - 4);
      if (v50 > 0x400)
      {
        if (v50 > 2 * v49)
          goto LABEL_58;
      }
      else if (3 * v50 > 4 * v49)
      {
LABEL_58:
        v11 = 0;
        goto LABEL_59;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v32, v39);
      goto LABEL_58;
    }
  }
LABEL_59:
  v51 = *a4;
  *a4 = 0;
  (*(void (**)(_QWORD *, uint64_t *))(*v51 + 16))(v51, &v52);
  result = (*(uint64_t (**)(_QWORD *))(*v51 + 8))(v51);
  if (v11)
    return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  return result;
}

unsigned __int8 *WebKit::RemoteLegacyCDMProxy::cdmMediaPlayer@<X0>(unsigned __int8 *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = this + 32;
  if (*((_QWORD *)this + 4)
    && (v5 = *((_QWORD *)this + 3)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (this = (unsigned __int8 *)WebKit::RemoteLegacyCDMFactoryProxy::gpuConnectionToWebProcess(&v8, *(_QWORD *)(v6 + 16)), (v7 = v8) != 0))
  {
    WebKit::RemoteMediaPlayerManagerProxy::mediaPlayer(*(_QWORD *)(v8 + 120), v4, a2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 16));
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

_QWORD *WebKit::RemoteLegacyCDMFactoryProxy::gpuConnectionToWebProcess(_QWORD *this, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;

  v2 = this;
  if (!a2)
  {
    v3 = 0;
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
LABEL_8:
      ++*(_QWORD *)(v4 + 8);
      v6 = __ldxr((unsigned __int8 *)v4);
      if (v6 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
          goto LABEL_13;
      }
      else
      {
        __clrex();
      }
      this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
      goto LABEL_13;
    }
    this = (_QWORD *)MEMORY[0x19AEABB3C](v4);
    goto LABEL_8;
  }
LABEL_13:
  *v2 = v3;
  return this;
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteLegacyCDMProxy::cdmMediaPlayer@<X0>(WebKit::RemoteLegacyCDMProxy *this@<X0>, _QWORD *a2@<X8>)
{
  return WebKit::RemoteLegacyCDMProxy::cdmMediaPlayer((unsigned __int8 *)this - 16, a2);
}

uint64_t WebKit::RemoteLegacyCDMSessionProxy::logger(WebKit::RemoteLegacyCDMSessionProxy *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t WebKit::RemoteLegacyCDMSessionProxy::logIdentifier(WebKit::RemoteLegacyCDMSessionProxy *this)
{
  return *((_QWORD *)this + 6);
}

void WebKit::RemoteLegacyCDMSessionProxy::~RemoteLegacyCDMSessionProxy(WebKit::RemoteLegacyCDMSessionProxy *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  *(_QWORD *)this = off_1E34B9D58;
  *((_QWORD *)this + 2) = &unk_1E34B9DB8;
  v3 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  v11 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v14 = *((_QWORD *)this + 3);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteLegacyCDMSessionProxy::~RemoteLegacyCDMSessionProxy(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::RemoteLegacyCDMSessionProxy::~RemoteLegacyCDMSessionProxy(WebKit::RemoteLegacyCDMSessionProxy *this, void *a2)
{
  WebKit::RemoteLegacyCDMSessionProxy::~RemoteLegacyCDMSessionProxy((WebKit::RemoteLegacyCDMSessionProxy *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteLegacyCDMSessionProxy::~RemoteLegacyCDMSessionProxy((WebKit::RemoteLegacyCDMSessionProxy *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

unsigned int *WebKit::RemoteLegacyCDMSessionProxy::generateKeyRequest(uint64_t a1, uint64_t a2, WTF::DeferrableRefCountedBase **a3, uint64_t *a4)
{
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  unsigned int *result;
  JSC::ArrayBufferView *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  JSC::ArrayBufferView *v19;
  JSC::ArrayBufferView *v20;
  unsigned int v21;
  unsigned __int16 v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;

  if (*(_QWORD *)(a1 + 64) && (WebKit::convertToUint8Array(&v24, a3), (v7 = v24) != 0))
  {
    v23 = 0;
    v22 = 0;
    v21 = 0;
    (*(void (**)(JSC::ArrayBufferView **__return_ptr, _QWORD, uint64_t, _DWORD *, WTF::StringImpl **, unsigned __int16 *, unsigned int *))(**(_QWORD **)(a1 + 64) + 32))(&v20, *(_QWORD *)(a1 + 64), a2, v24, &v23, &v22, &v21);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = v23;
    v23 = v25;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v13 = v20;
    if (v20)
      ++*(_DWORD *)v20;
    WebKit::convertToOptionalSharedBuffer<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>>>((unsigned int *)&v25, v13);
    v14 = v22;
    v15 = v21;
    v16 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, &v25, &v23, v14, v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v18 = (unsigned int *)v25;
    v25 = 0;
    if (v18)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v18, v17);
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v13;
    }
    v19 = v20;
    v20 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v19;
    }
    result = (unsigned int *)v23;
    v23 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
      else
        *result -= 2;
    }
    if (*v7 == 1)
      return (unsigned int *)JSC::ArrayBufferView::operator delete();
    else
      --*v7;
  }
  else
  {
    v25 = 0;
    v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v10 + 16))(v10, &v25, MEMORY[0x1E0CBF738], 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    result = (unsigned int *)v25;
    v25 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v11);
  }
  return result;
}

WTF::DeferrableRefCountedBase *WebKit::convertToUint8Array(_QWORD *a1, WTF::DeferrableRefCountedBase **a2)
{
  WTF::DeferrableRefCountedBase *result;
  uint64_t v5;
  WTF::DeferrableRefCountedBase *v6;
  WTF::DeferrableRefCountedBase *v7;
  uint64_t v8;
  WTF::DeferrableRefCountedBase *v9;

  result = *a2;
  if (*a2
    && (result = (WTF::DeferrableRefCountedBase *)WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(result),
        (v5 = (uint64_t)v9) != 0))
  {
    v9 = 0;
    v7 = (WTF::DeferrableRefCountedBase *)v5;
    JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create((uint64_t *)&v7, 0, *((_QWORD *)*a2 + 6), 1, &v8);
    v6 = v7;
    *a1 = v8;
    v7 = 0;
    v8 = 0;
    if (v6)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
    result = v9;
    v9 = 0;
    if (result)
      return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

unsigned int *WebKit::convertToOptionalSharedBuffer<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>>>(unsigned int *result, JSC::ArrayBufferView *this)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  if (this)
  {
    JSC::ArrayBufferView::baseAddress(this);
    JSC::ArrayBufferView::byteLength(this);
    result = WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>(&v5);
    v4 = v5;
  }
  else
  {
    v4 = 0;
  }
  *v2 = v4;
  return result;
}

unsigned int *WebKit::RemoteLegacyCDMSessionProxy::update(uint64_t a1, WTF::DeferrableRefCountedBase **a2, uint64_t *a3)
{
  unsigned int *v5;
  uint64_t v6;
  JSC::ArrayBufferView *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  uint64_t v13;
  void *v14;
  unsigned int *result;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned __int16 v19;
  JSC::ArrayBufferView *v20;
  unsigned int *v21;

  if (!*(_QWORD *)(a1 + 64))
  {
    v21 = 0;
    v13 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD, unsigned int **, _QWORD, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0, &v21, 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    result = v21;
    v21 = 0;
    if (!result)
      return result;
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v14);
  }
  WebKit::convertToUint8Array(&v21, a2);
  v5 = v21;
  if (!v21)
  {
    v20 = 0;
    v16 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD, JSC::ArrayBufferView **, _QWORD, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0, &v20, 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    result = (unsigned int *)v20;
    v20 = 0;
    if (!result)
      return result;
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v14);
  }
  v20 = 0;
  v19 = 0;
  v18 = 0;
  v6 = (*(uint64_t (**)(_QWORD, unsigned int *, JSC::ArrayBufferView **, unsigned __int16 *, unsigned int *))(**(_QWORD **)(a1 + 64) + 48))(*(_QWORD *)(a1 + 64), v21, &v20, &v19, &v18);
  v7 = v20;
  if (v20)
    ++*(_DWORD *)v20;
  WebKit::convertToOptionalSharedBuffer<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint8Adaptor>>>>((unsigned int *)&v17, v7);
  v8 = v19;
  v9 = v18;
  v10 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned int **, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v6, &v17, v8, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v12 = v17;
  v17 = 0;
  if (v12)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v11);
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v7;
  }
  result = (unsigned int *)v20;
  v20 = 0;
  if (result)
  {
    if (*result == 1)
      result = (unsigned int *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  if (*v5 == 1)
    return (unsigned int *)JSC::ArrayBufferView::operator delete();
  --*v5;
  return result;
}

WTF::DeferrableRefCountedBase *WebKit::RemoteLegacyCDMSessionProxy::cachedKeyForKeyID(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  WTF::DeferrableRefCountedBase *result;
  JSC::ArrayBuffer *v11;
  _QWORD v12[2];
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    (*(void (**)(JSC::ArrayBuffer **__return_ptr))(*(_QWORD *)v4 + 56))(&v11);
    if (v11)
    {
      v12[0] = JSC::ArrayBuffer::span(v11);
      v12[1] = v5;
      WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>(&v13);
      v6 = v13;
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 0;
    v11 = 0;
  }
  v12[0] = v6;
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = (unsigned int *)v12[0];
  v12[0] = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v9, v8);
  result = v11;
  v11 = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

unsigned __int8 *WebKit::RemoteLegacyCDMSessionProxy::sendMessage(unsigned __int8 *result, JSC::ArrayBufferView *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  IPC::Encoder *v10;
  IPC::Encoder *v11;
  WebCore::FragmentedSharedBuffer *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  unsigned int *v19;
  uint64_t v20;
  IPC::Encoder *v21[2];
  WebCore::FragmentedSharedBuffer *v22;

  v3 = *((_QWORD *)result + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v7 = result;
      result = (unsigned __int8 *)WebKit::RemoteLegacyCDMFactoryProxy::gpuConnectionToWebProcess(&v20, *(_QWORD *)(v4 + 16));
      v8 = v20;
      if (v20)
      {
        v9 = *(_QWORD *)(v20 + 48);
        if (a2)
        {
          v10 = (IPC::Encoder *)JSC::ArrayBufferView::baseAddress(a2);
          v11 = (IPC::Encoder *)JSC::ArrayBufferView::byteLength(a2);
          v21[0] = v10;
          v21[1] = v11;
          WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v22);
          v12 = v22;
        }
        else
        {
          v12 = 0;
        }
        v22 = v12;
        v13 = *((_QWORD *)v7 + 7);
        v14 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v14 = 1114;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)(v14 + 528) = v14 + 16;
        *(_QWORD *)(v14 + 536) = v14 + 16;
        *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v14 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
        v21[0] = (IPC::Encoder *)v14;
        IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>((IPC::Encoder *)v14, &v22);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a3);
        IPC::Connection::sendMessageImpl(v9, (uint64_t *)v21, 0, 0);
        v16 = v21[0];
        v21[0] = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v15);
          WTF::fastFree(v17, v18);
        }
        v19 = (unsigned int *)v22;
        v22 = 0;
        if (v19)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v15);
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
      }
    }
  }
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteLegacyCDMSessionProxy::sendMessage(uint64_t a1, JSC::ArrayBufferView *a2, uint64_t *a3)
{
  return WebKit::RemoteLegacyCDMSessionProxy::sendMessage((unsigned __int8 *)(a1 - 16), a2, a3);
}

unsigned __int8 *WebKit::RemoteLegacyCDMSessionProxy::sendError(unsigned __int8 *this, __int16 a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v7 = this;
      this = (unsigned __int8 *)WebKit::RemoteLegacyCDMFactoryProxy::gpuConnectionToWebProcess(&v16, *(_QWORD *)(v4 + 16));
      v8 = v16;
      if (v16)
      {
        v9 = *(_QWORD *)(v16 + 48);
        v10 = *((_QWORD *)v7 + 7);
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 1113;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v17 = (IPC::Encoder *)v11;
        *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 2uLL, 2) = a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 4uLL, 4) = a3;
        IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v17, 0, 0);
        v13 = v17;
        v17 = 0;
        if (v13)
        {
          IPC::Encoder::~Encoder(v13, v12);
          WTF::fastFree(v14, v15);
        }
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
      }
    }
  }
  return this;
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteLegacyCDMSessionProxy::sendError(WebKit::RemoteLegacyCDMSessionProxy *this, __int16 a2, int a3)
{
  return WebKit::RemoteLegacyCDMSessionProxy::sendError((unsigned __int8 *)this - 16, a2, a3);
}

unsigned __int8 *WebKit::RemoteLegacyCDMSessionProxy::mediaKeysStorageDirectory@<X0>(unsigned __int8 *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  WebKit::GPUConnectionToWebProcess *v5;
  _DWORD *v6;
  _DWORD *v7;
  WebKit::GPUConnectionToWebProcess *v8;

  v3 = *((_QWORD *)this + 4);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
    {
LABEL_9:
      *a2 = v7;
      return this;
    }
LABEL_8:
    *v7 += 2;
    goto LABEL_9;
  }
  this = (unsigned __int8 *)WebKit::RemoteLegacyCDMFactoryProxy::gpuConnectionToWebProcess(&v8, *(_QWORD *)(v4 + 16));
  v5 = v8;
  if (!v8)
  {
    v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
    {
      *a2 = 0;
      return this;
    }
    goto LABEL_8;
  }
  v6 = (_DWORD *)*WebKit::GPUConnectionToWebProcess::mediaKeysStorageDirectory(v8);
  if (v6)
    *v6 += 2;
  *a2 = v6;
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v5 + 2));
}

unsigned __int8 *`non-virtual thunk to'WebKit::RemoteLegacyCDMSessionProxy::mediaKeysStorageDirectory@<X0>(WebKit::RemoteLegacyCDMSessionProxy *this@<X0>, _QWORD *a2@<X8>)
{
  return WebKit::RemoteLegacyCDMSessionProxy::mediaKeysStorageDirectory((unsigned __int8 *)this - 16, a2);
}

uint64_t WebCore::AudioTrackPrivateClient::type(WebCore::AudioTrackPrivateClient *this)
{
  return 1;
}

uint64_t WebKit::RemoteCDMInstanceProxy::logger(WebKit::RemoteCDMInstanceProxy *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t WebKit::RemoteCDMInstanceProxy::logIdentifier(WebKit::RemoteCDMInstanceProxy *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t WebKit::RemoteCDMInstanceSessionProxy::displayID(WebKit::RemoteCDMInstanceSessionProxy *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t `non-virtual thunk to'WebKit::RemoteCDMInstanceSessionProxy::displayID(WebKit::RemoteCDMInstanceSessionProxy *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t `non-virtual thunk to'WebKit::RemoteLegacyCDMSessionProxy::logger(WebKit::RemoteLegacyCDMSessionProxy *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t `non-virtual thunk to'WebKit::RemoteLegacyCDMSessionProxy::logIdentifier(WebKit::RemoteLegacyCDMSessionProxy *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::RemoteCDMInstanceSessionProxy **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::RemoteCDMInstanceSessionProxy **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::RemoteCDMInstanceSessionProxy *)-1)
        std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100](v4, 0);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebKit::RemoteCDMInstanceConfiguration>::operator()[abi:sn180100](WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  JUMPOUT(0x19AEB936CLL);
}

WebKit::RemoteCDMInstanceSessionProxy *std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100](WebKit::RemoteCDMInstanceSessionProxy **a1, WebKit::RemoteCDMInstanceSessionProxy *a2)
{
  WebKit::RemoteCDMInstanceSessionProxy *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::RemoteCDMInstanceSessionProxy::~RemoteCDMInstanceSessionProxy(result, a2);
    JUMPOUT(0x19AEB936CLL);
  }
  return result;
}

uint64_t *std::unique_ptr<WebKit::RemoteCDMConfiguration>::reset[abi:sn180100](uint64_t *result, void *a2)
{
  uint64_t v2;
  void *v3;

  v2 = *result;
  *result = 0;
  if (v2)
  {
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 16, a2);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, v3);
    JUMPOUT(0x19AEB936CLL);
  }
  return result;
}

uint64_t JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::create@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  uint64_t v7;

  result = JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(a1, a2, a3, a4, &v7);
  if (v7)
  {
    *a5 = v7;
  }
  else
  {
    result = 72;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  uint64_t result;

  v6 = *a1;
  if (!*a1)
    goto LABEL_13;
  if (*(_BYTE *)(v6 + 64) && (v7 = *(_QWORD *)(v6 + 32)) != 0)
    v8 = *(_QWORD *)(v7 + 32);
  else
    v8 = *(_QWORD *)(v6 + 48);
  v9 = a4 == 0;
  if (a3 <= v8 - a2)
    v9 = 1;
  if (v8 < a2 || !v9)
  {
LABEL_13:
    result = 0;
  }
  else
  {
    WTF::fastMalloc((WTF *)0x28);
    result = JSC::ArrayBufferView::ArrayBufferView();
  }
  *a5 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioTrackProxy::RemoteAudioTrackProxy(WebKit::GPUConnectionToWebProcess &,WebCore::AudioTrackPrivate &,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WTF::Function<void ()(void)> &&>::call()
{
  return WTF::ensureOnMainThread();
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    while (1)
    {
      v9 = (uint64_t *)(v2 + 16 * v8);
      v10 = *v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          v18 = v14 & ((v17 >> 31) ^ v17);
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = *(_QWORD *)(v13 + 16 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (v21);
          v22 = (uint64_t *)(v13 + 16 * v20);
          v23 = v22[1];
          v22[1] = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          *v22 = *v9;
          v24 = v2 + 16 * v8;
          v25 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          v22[1] = v25;
          v12 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (!v12)
            goto LABEL_21;
LABEL_20:
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          goto LABEL_21;
        }
        v11 = v2 + 16 * v8;
        v12 = *(_QWORD *)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (v12)
          goto LABEL_20;
      }
LABEL_21:
      if (++v8 == v3)
        return WTF::fastFree((WTF *)(v2 - 16), v7);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = v15 + 16 * v22;
          std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100]((WebKit::RemoteCDMInstanceSessionProxy **)(v24 + 8), 0);
          *(_QWORD *)v24 = *v13;
          v25 = v6 + 16 * v11;
          v26 = *(_QWORD *)(v25 + 8);
          v25 += 8;
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v24 + 8) = v26;
          std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100]((WebKit::RemoteCDMInstanceSessionProxy **)v25, 0);
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100]((WebKit::RemoteCDMInstanceSessionProxy **)(v6 + 16 * v11 + 8), 0);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebKit::RemoteCDMInstanceSessionProxy *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, uint64_t a2)
{
  WebKit::RemoteCDMInstanceSessionProxy *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>::reset[abi:sn180100]((WebKit::RemoteCDMInstanceSessionProxy **)(a2 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WebKit::RemoteCDMInstanceSessionProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceSessionProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,BOOL)> &&)::$_0,void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::String const,BOOL,WebCore::CDMInstanceSession::SuccessValue>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B9E28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,BOOL)> &&)::$_0,void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::String const,BOOL,WebCore::CDMInstanceSession::SuccessValue>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B9E28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,BOOL)> &&)::$_0,void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::String const,BOOL,WebCore::CDMInstanceSession::SuccessValue>::call(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int *v5;
  uint64_t v6;
  void *v7;
  unsigned int *result;
  unsigned int *v9;

  v5 = *a2;
  *a2 = 0;
  v9 = v5;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, unsigned int **, uint64_t, uint64_t, BOOL))(*(_QWORD *)v6 + 16))(v6, &v9, a3, a4, a5 == 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = v9;
  v9 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::updateLicense(WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref>> &&,BOOL)> &&)::$_0,void,BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,WebCore::CDMInstanceSession::SuccessValue>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B9E50;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::updateLicense(WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref>> &&,BOOL)> &&)::$_0,void,BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,WebCore::CDMInstanceSession::SuccessValue>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B9E50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::updateLicense(WTF::String,WebCore::CDMSessionType,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref>> &&,BOOL)> &&)::$_0,void,BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,WebCore::CDMInstanceSession::SuccessValue>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL))(*(_QWORD *)v6 + 16))(v6, a2, a3, a4, a5, a6 == 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::loadSession(WebCore::CDMSessionType,WTF::String,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,BOOL,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0,void,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::optional<double>,std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,WebCore::CDMInstanceSession::SuccessValue,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B9E78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::loadSession(WebCore::CDMSessionType,WTF::String,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,BOOL,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0,void,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::optional<double>,std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,WebCore::CDMInstanceSession::SuccessValue,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B9E78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::loadSession(WebCore::CDMSessionType,WTF::String,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,BOOL,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0,void,std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::optional<double>,std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,WebCore::CDMInstanceSession::SuccessValue,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, a2, a3, a4, a5 == 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B9EA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B9EA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,BOOL)> &&)::$_0,void,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMInstanceSession::SuccessValue>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B9EC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,BOOL)> &&)::$_0,void,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMInstanceSession::SuccessValue>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B9EC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteCDMInstanceSessionProxy::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,BOOL)> &&)::$_0,void,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMInstanceSession::SuccessValue>::call(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, a2, a3, a4 == 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>,void,std::optional<WebCore::CDMKeySystemConfiguration>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34B9EF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>,void,std::optional<WebCore::CDMKeySystemConfiguration>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B9EF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>,void,std::optional<WebCore::CDMKeySystemConfiguration>>::call(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  LOBYTE(v11) = 0;
  v20 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    std::construct_at[abi:sn180100]<WebCore::CDMKeySystemConfiguration,WebCore::CDMKeySystemConfiguration,WebCore::CDMKeySystemConfiguration*>((uint64_t)&v11, (uint64_t *)a2);
    v20 = 1;
    v31 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    v3 = v11;
    v11 = 0uLL;
    v21 = v3;
    *(_QWORD *)&v3 = v12;
    v12 = 0;
    v22 = v3;
    v4 = v13;
    v13 = 0;
    v23 = v4;
    *(_QWORD *)&v3 = v14;
    v14 = 0;
    v24 = v3;
    v5 = v15;
    v15 = 0;
    v25 = v5;
    *(_QWORD *)&v3 = v16;
    v16 = 0;
    v26 = v3;
    v27 = v17;
    v6 = v18;
    v18 = 0;
    v28 = v6;
    *(_QWORD *)&v3 = v19;
    v19 = 0;
    v29 = v3;
    v30 = 1;
  }
  else
  {
    v31 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    LOBYTE(v21) = 0;
    v30 = 0;
  }
  WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>::operator()(&v31, (uint64_t)&v21);
  std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v7);
  v9 = v31;
  v31 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11, v8);
}

uint64_t WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  _BYTE v5[80];
  char v6;

  v2 = *a1;
  v5[0] = 0;
  v6 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    std::construct_at[abi:sn180100]<WebCore::CDMKeySystemConfiguration,WebCore::CDMKeySystemConfiguration,WebCore::CDMKeySystemConfiguration*>((uint64_t)v5, (uint64_t *)a2);
    v6 = 1;
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v5);
  return std::__optional_destruct_base<WebCore::CDMKeySystemConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v3);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::CDMKeySystemConfiguration,WebCore::CDMKeySystemConfiguration,WebCore::CDMKeySystemConfiguration*>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = v2;
    v3 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(result + 8) = v3;
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(result + 16) = v3;
    LODWORD(v3) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = 0;
    *(_DWORD *)(result + 20) = v3;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    v4 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(result + 24) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = 0;
    *(_DWORD *)(result + 32) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = 0;
    *(_DWORD *)(result + 36) = v4;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    v5 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(result + 40) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = 0;
    *(_DWORD *)(result + 48) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = 0;
    *(_DWORD *)(result + 52) = v5;
    *(_WORD *)(result + 56) = *((_WORD *)a2 + 28);
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    v6 = a2[8];
    a2[8] = 0;
    *(_QWORD *)(result + 64) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = 0;
    *(_DWORD *)(result + 72) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 19);
    *((_DWORD *)a2 + 19) = 0;
    *(_DWORD *)(result + 76) = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [30]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  WTF *v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t i;
  WTF::StringImpl *v25;
  int v26;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint8_t buf[16];
  int v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v29, a4);
  *(_QWORD *)buf = v30;
  v28[0] = v29;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v30;
    v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(NSObject **)(a1 + 32);
    v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      WTF::String::utf8();
      v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          v12 = (WTF *)WTF::fastFree(v12, v13);
        else
          --*(_DWORD *)v12;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v16 = *v15;
        if ((v16 & 1) != 0)
          break;
        v17 = __ldaxr(v15);
        if (v17 == v16)
        {
          if (!__stxr(v16 | 1, v15))
          {
            v18 = WTF::Logger::observers(v12);
            v19 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v19)
            {
              v20 = *(uint64_t **)v18;
              v21 = *(_QWORD *)v18 + 8 * v19;
              do
              {
                v22 = *v20;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v33 = 0;
                WTF::String::String((WTF::String *)v34, a4);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v22 + 16))(v22, a1, a2, v28);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
                for (i = 24; i != -8; i -= 16)
                {
                  v25 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                }
                ++v20;
              }
              while (v20 != (uint64_t *)v21);
            }
            v26 = __ldxr(v15);
            if (v26 == 1)
            {
              if (!__stlxr(0, v15))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v4 = *(_DWORD *)(v3 + 4);
  else
    v4 = 0;
  v5 = *a2;
  if (*a2)
    v6 = *(_DWORD *)(v5 + 4);
  else
    v6 = 0;
  if (((v6 | v4) & 0x80000000) == 0)
  {
    result = (v4 + v6);
    if (!__OFADD__(v4, v6))
    {
      if (v3)
      {
        v7 = *(_DWORD *)(v3 + 16);
        v8 = (v7 >> 2) & 1;
        if (!v5 || (v7 & 4) == 0)
          return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, v3, (_DWORD *)v5, a3);
      }
      else if (!v5)
      {
        v8 = 1;
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, v3, (_DWORD *)v5, a3);
      }
      v8 = (*(unsigned __int8 *)(v5 + 16) >> 2) & 1;
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, v3, (_DWORD *)v5, a3);
    }
  }
  *a3 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  int v7;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  v7 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v9 = v13;
        if (v13)
        {
          *v13 = 2;
          v9[1] = v7;
          *((_QWORD *)v9 + 1) = v9 + 5;
          v9[4] = 4;
          v12 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v12, (char *)v9 + 20);
          v10 = v12;
          if (v12)
            v10 = *(unsigned int *)(v12 + 4);
          v13 = a4;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v13, (char *)v9 + v10 + 20);
        }
        goto LABEL_16;
      }
LABEL_10:
      v9 = 0;
      goto LABEL_16;
    }
LABEL_11:
    v9 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_16;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_10;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v9 = v13;
  if (v13)
  {
    *v13 = 2;
    v9[1] = v7;
    *((_QWORD *)v9 + 1) = v9 + 5;
    v9[4] = 0;
    v12 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v12, (char *)v9 + 20);
    v11 = v12;
    if (v12)
      v11 = *(unsigned int *)(v12 + 4);
    v13 = a4;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v13, (char *)v9 + 2 * v11 + 20);
  }
LABEL_16:
  *a5 = v9;
  return result;
}

void sub_197065260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::applicationType(WebKit *this, UIWindow *a2)
{
  if ((_UIApplicationIsExtension() & 1) != 0)
    return 2;
  return WTF::processHasEntitlement()
      && (-[WebKit _isHostedInAnotherProcess](this, "_isHostedInAnotherProcess") & 1) != 0;
}

void WebKit::ApplicationStateTracker::~ApplicationStateTracker(id *this)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v15;
  int v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint8_t v20[24];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71A28;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v20 = 134217984;
    *(_QWORD *)&v20[4] = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - ~ApplicationStateTracker", v20, 0xCu);
  }
  WebKit::ApplicationStateTracker::setWindow(this, 0);
  WebKit::ApplicationStateTracker::setScene(this, 0);
  WebKit::ApplicationStateTracker::setViewController(this, 0);
  v3 = (uint64_t)WebKit::ApplicationStateTracker::removeAllObservers(this);
  {
    v6 = dword_1ECE73660;
    v5 = dword_1ECE73664;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    WebKit::allApplicationStateTrackers(void)::trackers = 0;
    *(_QWORD *)&dword_1ECE73660 = 0;
  }
  dword_1ECE73660 = v6 + 1;
  if (v6 + 1 > v5)
  {
    v7 = WebKit::allApplicationStateTrackers(void)::trackers;
    if (WebKit::allApplicationStateTrackers(void)::trackers)
    {
      v8 = *(_DWORD *)(WebKit::allApplicationStateTrackers(void)::trackers - 4);
      if (!v8)
        goto LABEL_29;
      v9 = 0;
      do
      {
        while (1)
        {
          v3 = *(_QWORD *)(v7 + 8 * --v8);
          if ((unint64_t)(v3 + 1) >= 2 && !*(_QWORD *)(v3 + 8))
            break;
          if (!v8)
            goto LABEL_18;
        }
        *(_QWORD *)(v7 + 8 * v8) = 0;
        do
        {
          v10 = __ldaxr((unsigned int *)v3);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v3));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v3);
          v3 = WTF::fastFree((WTF *)v3, v4);
        }
        *(_QWORD *)(v7 + 8 * v8) = -1;
        ++v9;
      }
      while (v8);
LABEL_18:
      v7 = WebKit::allApplicationStateTrackers(void)::trackers;
      if (v9)
      {
        *(_DWORD *)(WebKit::allApplicationStateTrackers(void)::trackers - 16) += v9;
        if (WebKit::allApplicationStateTrackers(void)::trackers)
          v12 = *(_DWORD *)(WebKit::allApplicationStateTrackers(void)::trackers - 12);
        else
          v12 = 0;
        *(_DWORD *)(WebKit::allApplicationStateTrackers(void)::trackers - 12) = v12 - v9;
        v7 = WebKit::allApplicationStateTrackers(void)::trackers;
      }
      if (v7)
      {
        v13 = *(_DWORD *)(v7 - 4);
        if (v13 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v13)
        {
          v3 = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&WebKit::allApplicationStateTrackers(void)::trackers);
          v7 = WebKit::allApplicationStateTrackers(void)::trackers;
          dword_1ECE73660 = 0;
          if (!WebKit::allApplicationStateTrackers(void)::trackers)
          {
            v15 = 0;
            goto LABEL_33;
          }
          goto LABEL_32;
        }
LABEL_29:
        dword_1ECE73660 = 0;
LABEL_32:
        v15 = *(_DWORD *)(v7 - 12);
        v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
        {
LABEL_34:
          dword_1ECE73664 = 2 * v16;
          goto LABEL_35;
        }
LABEL_33:
        v16 = v15;
        goto LABEL_34;
      }
    }
    v15 = 0;
    dword_1ECE73660 = 0;
    goto LABEL_33;
  }
LABEL_35:
  if (*this && *((_QWORD *)*this + 1))
  {
    *(_QWORD *)v20 = *this;
    v3 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&WebKit::allApplicationStateTrackers(void)::trackers, v20);
    if (WebKit::allApplicationStateTrackers(void)::trackers)
    {
      v17 = WebKit::allApplicationStateTrackers(void)::trackers
          + 8 * *(unsigned int *)(WebKit::allApplicationStateTrackers(void)::trackers - 4);
      if (v17 == v3)
        goto LABEL_44;
    }
    else
    {
      if (!v3)
        goto LABEL_44;
      v17 = 0;
    }
    if (v17 != v3)
      v3 = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&WebKit::allApplicationStateTrackers(void)::trackers, (unsigned int **)v3);
  }
LABEL_44:
  WebKit::updateApplicationBackgroundState((WebKit *)v3);
  objc_destroyWeak(this + 15);
  objc_destroyWeak(this + 14);
  objc_destroyWeak(this + 13);
  objc_destroyWeak(this + 12);
  v18 = this[5];
  this[5] = 0;
  if (v18)
    CFRelease(v18);
  objc_destroyWeak(this + 4);
  objc_destroyWeak(this + 3);
  objc_destroyWeak(this + 2);
  objc_destroyWeak(this + 1);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, v19);
}

void sub_19706568C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;
  void *v4;

  objc_destroyWeak((id *)(v1 + 120));
  objc_destroyWeak((id *)(v1 + 112));
  objc_destroyWeak((id *)(v1 + 104));
  objc_destroyWeak((id *)(v1 + 96));
  v3 = *(const void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v3)
    CFRelease(v3);
  objc_destroyWeak((id *)(v1 + 32));
  objc_destroyWeak((id *)(v1 + 24));
  objc_destroyWeak((id *)(v1 + 16));
  objc_destroyWeak((id *)(v1 + 8));
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v1, v4);
  _Unwind_Resume(a1);
}

void WebKit::ApplicationStateTracker::setWindow(id *this, UIWindow *a2)
{
  id *v4;
  UIWindow *WeakRetained;
  UIWindow *v6;
  UIWindow *v7;
  unsigned int *v8;
  WebCore *v9;
  WebCore *v10;
  UIView *v11;
  UIViewController *v12;

  v4 = this + 2;
  WeakRetained = (UIWindow *)objc_loadWeakRetained(this + 2);
  v6 = WeakRetained;
  if (WeakRetained)
    CFRelease(WeakRetained);
  if (v6 != a2)
  {
    if (objc_loadWeak(v4) && *((unsigned __int8 *)this + 48) - 1 <= 1)
      WebKit::ApplicationStateTracker::setViewController(this, 0);
    objc_storeWeak(v4, a2);
    objc_msgSend(this[5], "setObservedWindow:", a2);
    if (objc_loadWeak(v4))
    {
      v8 = (unsigned int *)WebKit::applicationType((WebKit *)a2, v7);
      *((_BYTE *)this + 48) = (_BYTE)v8;
      if (((_DWORD)v8 - 1) >= 2)
      {
        if (!(_DWORD)v8)
        {
          WebKit::ApplicationStateTracker::setViewController(this, 0);
          v8 = WebKit::ApplicationStateTracker::setScene(this, (UIScene *)-[UIWindow windowScene](a2, "windowScene"));
        }
      }
      else
      {
        v9 = (WebCore *)objc_loadWeakRetained(this + 1);
        if (v9)
        {
          v10 = v9;
          CFRelease(v9);
          while (1)
          {
            v12 = (UIViewController *)WebCore::viewController(v10, v11);
            if (-[UIViewController _hostProcessIdentifier](v12, "_hostProcessIdentifier"))
              break;
            v10 = (WebCore *)-[WebCore superview](v10, "superview");
            if (!v10)
              goto LABEL_13;
          }
        }
        else
        {
LABEL_13:
          v12 = 0;
        }
        WebKit::ApplicationStateTracker::setScene(this, 0);
        WebKit::ApplicationStateTracker::setViewController(this, v12);
      }
      WebKit::updateApplicationBackgroundState((WebKit *)v8);
    }
  }
}

unsigned int *WebKit::ApplicationStateTracker::setScene(id *this, UIScene *a2)
{
  id *v4;
  UIScene *WeakRetained;
  UIScene *v6;
  char v7;
  unsigned int *result;
  char v9;
  BOOL v10;
  NSObject *v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  _QWORD v55[4];
  id *v56;
  WTF *v57;
  _QWORD v58[4];
  id *v59;
  WTF *v60;
  _QWORD v61[4];
  id *v62;
  WTF *v63;
  _QWORD v64[4];
  id *v65;
  WTF *v66;
  uint8_t buf[4];
  id *v68;
  __int16 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = this + 3;
  WeakRetained = (UIScene *)objc_loadWeakRetained(this + 3);
  v6 = WeakRetained;
  if (WeakRetained)
    CFRelease(WeakRetained);
  if (v6 == a2)
  {
    if (objc_loadWeak(v4))
    {
      result = (unsigned int *)objc_msgSend(objc_loadWeak(v4), "activationState");
      if (result == (unsigned int *)2)
      {
        v9 = 1;
LABEL_71:
        *((_BYTE *)this + 88) = v9;
        return result;
      }
      result = (unsigned int *)objc_msgSend(objc_loadWeak(v4), "activationState");
      v54 = (unsigned int *)((char *)result + 1) == 0;
    }
    else
    {
      result = (unsigned int *)objc_loadWeak(this + 2);
      v54 = result == 0;
    }
    v9 = v54;
    goto LABEL_71;
  }
  WebKit::ApplicationStateTracker::removeAllObservers(this);
  objc_storeWeak(v4, a2);
  if (objc_loadWeak(v4))
  {
    if (objc_msgSend(objc_loadWeak(v4), "activationState") == 2)
    {
      v7 = 1;
      goto LABEL_15;
    }
    v10 = objc_msgSend(objc_loadWeak(v4), "activationState") == -1;
  }
  else
  {
    v10 = objc_loadWeak(this + 2) == 0;
  }
  v7 = v10;
LABEL_15:
  *((_BYTE *)this + 88) = v7;
  result = (unsigned int *)objc_loadWeak(v4);
  if (result)
  {
    v11 = qword_1ECE71A28;
    if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *((unsigned __int8 *)this + 88);
      *(_DWORD *)buf = 134218240;
      v68 = this;
      v69 = 1024;
      v70 = v12;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%p - ApplicationStateTracker::ApplicationStateTracker(): m_isInBackground=%d", buf, 0x12u);
    }
    v13 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v14 = MEMORY[0x1E0C809B0];
    v64[0] = MEMORY[0x1E0C809B0];
    v64[1] = 3321888768;
    v64[2] = ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke;
    v64[3] = &__block_descriptor_48_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__1_e24_v16__0__NSNotification_8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    v15 = *MEMORY[0x1E0CEBB50];
    v16 = (unsigned int *)*this;
    if (*this)
    {
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v65 = this;
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 + 1, v16));
    }
    else
    {
      v65 = this;
    }
    v66 = (WTF *)v16;
    objc_storeWeak(this + 12, (id)objc_msgSend(v13, "addObserverForName:object:queue:usingBlock:", v15, a2, 0, v64));
    if (v16)
    {
      do
      {
        v20 = __ldaxr(v16);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v16));
      if (!v21)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v19);
      }
    }
    v61[0] = v14;
    v61[1] = 3321888768;
    v61[2] = ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke_18;
    v61[3] = &__block_descriptor_48_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__2_e24_v16__0__NSNotification_8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    v22 = *MEMORY[0x1E0CEBB70];
    v23 = (unsigned int *)*this;
    if (*this)
    {
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      v62 = this;
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 + 1, v23));
    }
    else
    {
      v62 = this;
    }
    v63 = (WTF *)v23;
    objc_storeWeak(this + 13, (id)objc_msgSend(v13, "addObserverForName:object:queue:usingBlock:", v22, a2, 0, v61));
    if (v23)
    {
      do
      {
        v27 = __ldaxr(v23);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v23));
      if (!v28)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v26);
      }
    }
    v58[0] = v14;
    v58[1] = 3321888768;
    v58[2] = ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke_20;
    v58[3] = &__block_descriptor_48_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__3_e24_v16__0__NSNotification_8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    v29 = *MEMORY[0x1E0CEC168];
    v30 = (unsigned int *)*this;
    if (*this)
    {
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
      v59 = this;
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 + 1, v30));
    }
    else
    {
      v59 = this;
    }
    v60 = (WTF *)v30;
    objc_storeWeak(this + 14, (id)objc_msgSend(v13, "addObserverForName:object:queue:usingBlock:", v29, a2, 0, v58));
    if (v30)
    {
      do
      {
        v34 = __ldaxr(v30);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v30));
      if (!v35)
      {
        atomic_store(1u, v30);
        WTF::fastFree((WTF *)v30, v33);
      }
    }
    v55[0] = v14;
    v55[1] = 3321888768;
    v55[2] = ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke_22;
    v55[3] = &__block_descriptor_48_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__4_e24_v16__0__NSNotification_8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    v36 = *MEMORY[0x1E0CEC150];
    v37 = (unsigned int *)*this;
    if (*this)
    {
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 + 1, v37));
      v56 = this;
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 + 1, v37));
    }
    else
    {
      v56 = this;
    }
    v57 = (WTF *)v37;
    objc_storeWeak(this + 15, (id)objc_msgSend(v13, "addObserverForName:object:queue:usingBlock:", v36, a2, 0, v55));
    if (v37)
    {
      do
      {
        v41 = __ldaxr(v37);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v37));
      if (!v42)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, v40);
      }
    }
    v43 = (unsigned int *)v57;
    v57 = 0;
    if (v43)
    {
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        atomic_store(1u, v43);
        WTF::fastFree((WTF *)v43, v40);
      }
    }
    v46 = (unsigned int *)v60;
    v60 = 0;
    if (v46)
    {
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        atomic_store(1u, v46);
        WTF::fastFree((WTF *)v46, v40);
      }
    }
    v49 = (unsigned int *)v63;
    v63 = 0;
    if (v49)
    {
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        atomic_store(1u, v49);
        WTF::fastFree((WTF *)v49, v40);
      }
    }
    result = (unsigned int *)v66;
    v66 = 0;
    if (result)
    {
      do
      {
        v52 = __ldaxr(result);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, result));
      if (!v53)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v40);
      }
    }
  }
  return result;
}

void sub_197065D9C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF *a32)
{
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  if (a20)
  {
    do
    {
      v33 = __ldaxr((unsigned int *)a20);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, (unsigned int *)a20));
    if (!v34)
    {
      atomic_store(1u, (unsigned int *)a20);
      WTF::fastFree(a20, a2);
    }
  }
  if (a26)
  {
    do
    {
      v35 = __ldaxr((unsigned int *)a26);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)a26));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)a26);
      WTF::fastFree(a26, a2);
    }
  }
  if (a32)
  {
    do
    {
      v37 = __ldaxr((unsigned int *)a32);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, (unsigned int *)a32));
    if (!v38)
    {
      atomic_store(1u, (unsigned int *)a32);
      WTF::fastFree(a32, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_197065F74(int a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF *a32)
{
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;

  if (!a32)
    goto LABEL_4;
  do
  {
    v33 = __ldaxr((unsigned int *)a32);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, (unsigned int *)a32));
  if (!v34)
  {
    atomic_store(1u, (unsigned int *)a32);
    WTF::fastFree(a32, a2);
    if (v32)
    {
      do
LABEL_5:
        v35 = __ldaxr(v32);
      while (__stlxr(v35 - 1, v32));
      JUMPOUT(0x197065F2CLL);
    }
  }
  else
  {
LABEL_4:
    if (v32)
      goto LABEL_5;
  }
  JUMPOUT(0x197065F30);
}

void sub_197065FC4()
{
  JUMPOUT(0x197065F30);
}

void WebKit::ApplicationStateTracker::setViewController(id *this, UIViewController *a2)
{
  id *v4;
  UIViewController *WeakRetained;
  UIViewController *v6;
  WebKit::EndowmentStateTracker *v7;
  int v8;
  NSObject *v9;
  const char *v10;
  pid_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD v33[4];
  id *v34;
  WTF *v35;
  int v36;
  _QWORD v37[4];
  id *v38;
  WTF *v39;
  int v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  pid_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = this + 4;
  WeakRetained = (UIViewController *)objc_loadWeakRetained(this + 4);
  v6 = WeakRetained;
  if (WeakRetained)
    CFRelease(WeakRetained);
  if (v6 != a2)
  {
    WebKit::ApplicationStateTracker::removeAllObservers(this);
    objc_storeWeak(v4, a2);
    if (objc_loadWeak(v4))
    {
      v7 = (WebKit::EndowmentStateTracker *)-[UIViewController _hostProcessIdentifier](a2, "_hostProcessIdentifier");
      v8 = (int)v7;
      *((_BYTE *)this + 88) = WebKit::EndowmentStateTracker::isApplicationForeground(v7) ^ 1;
      if (objc_msgSend((id)-[UIViewController _hostApplicationBundleIdentifier](a2, "_hostApplicationBundleIdentifier"), "isEqualToString:", CFSTR("com.apple.ios.StoreKitUIService")))*((_BYTE *)this + 88) = 0;
      v9 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        if (_UIApplicationIsExtension())
          v10 = "Extension";
        else
          v10 = "ViewService";
        v11 = getpid();
        v12 = *((unsigned __int8 *)this + 88);
        *(_DWORD *)buf = 136446978;
        v42 = v10;
        v43 = 1024;
        v44 = v11;
        v45 = 1024;
        v46 = v8;
        v47 = 1024;
        v48 = v12;
        _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s has PID %d, host application PID=%d, isInBackground=%d", buf, 0x1Eu);
      }
      v13 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v14 = MEMORY[0x1E0C809B0];
      v37[0] = MEMORY[0x1E0C809B0];
      v37[1] = 3321888768;
      v37[2] = ___ZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewController_block_invoke;
      v37[3] = &__block_descriptor_56_e8_32c83_ZTSKZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewControllerE3__0_e24_v16__0__NSNotification_8l;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
      v15 = (unsigned int *)*this;
      if (*this)
      {
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
        v38 = this;
        do
          v17 = __ldaxr(v15);
        while (__stlxr(v17 + 1, v15));
      }
      else
      {
        v38 = this;
      }
      v39 = (WTF *)v15;
      v40 = v8;
      objc_storeWeak(this + 12, (id)objc_msgSend(v13, "addObserverForName:object:queue:usingBlock:", CFSTR("_UIViewServiceHostSceneDidEnterBackgroundNotification"), a2, 0, v37));
      if (v15)
      {
        do
        {
          v19 = __ldaxr(v15);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v15));
        if (!v20)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, v18);
        }
      }
      v33[0] = v14;
      v33[1] = 3321888768;
      v33[2] = ___ZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewController_block_invoke_33;
      v33[3] = &__block_descriptor_56_e8_32c83_ZTSKZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewControllerE3__1_e24_v16__0__NSNotification_8l;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
      v21 = (unsigned int *)*this;
      if (*this)
      {
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 + 1, v21));
        v34 = this;
        do
          v23 = __ldaxr(v21);
        while (__stlxr(v23 + 1, v21));
      }
      else
      {
        v34 = this;
      }
      v35 = (WTF *)v21;
      v36 = v8;
      objc_storeWeak(this + 13, (id)objc_msgSend(v13, "addObserverForName:object:queue:usingBlock:", CFSTR("_UIViewServiceHostSceneWillEnterForegroundNotification"), a2, 0, v33));
      if (v21)
      {
        do
        {
          v25 = __ldaxr(v21);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v21));
        if (!v26)
        {
          atomic_store(1u, v21);
          WTF::fastFree((WTF *)v21, v24);
        }
      }
      v27 = (unsigned int *)v35;
      v35 = 0;
      if (v27)
      {
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v27);
          WTF::fastFree((WTF *)v27, v24);
        }
      }
      v30 = (unsigned int *)v39;
      v39 = 0;
      if (v30)
      {
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          atomic_store(1u, v30);
          WTF::fastFree((WTF *)v30, v24);
        }
      }
    }
    else
    {
      *((_BYTE *)this + 88) = 1;
    }
  }
}

void sub_197066334(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21)
{
  unsigned int v22;
  unsigned int v23;

  if (a21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)a21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)a21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)a21);
      WTF::fastFree(a21, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

id WebKit::ApplicationStateTracker::removeAllObservers(id *this)
{
  void *v2;
  id WeakRetained;
  id v4;
  id v5;
  id *v6;
  id result;
  id v8;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  if (objc_loadWeak(this + 12))
  {
    WeakRetained = objc_loadWeakRetained(this + 12);
    objc_msgSend(v2, "removeObserver:", WeakRetained);
    if (WeakRetained)
      CFRelease(WeakRetained);
    objc_storeWeak(this + 12, 0);
  }
  if (objc_loadWeak(this + 13))
  {
    v4 = objc_loadWeakRetained(this + 13);
    objc_msgSend(v2, "removeObserver:", v4);
    if (v4)
      CFRelease(v4);
    objc_storeWeak(this + 13, 0);
  }
  if (objc_loadWeak(this + 14))
  {
    v5 = objc_loadWeakRetained(this + 14);
    objc_msgSend(v2, "removeObserver:", v5);
    if (v5)
      CFRelease(v5);
    objc_storeWeak(this + 14, 0);
  }
  v6 = this + 15;
  result = objc_loadWeak(v6);
  if (result)
  {
    v8 = objc_loadWeakRetained(v6);
    objc_msgSend(v2, "removeObserver:", v8);
    if (v8)
      CFRelease(v8);
    return objc_storeWeak(v6, 0);
  }
  return result;
}

void sub_197066580(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke(uint64_t a1)
{
  uint64_t v1;
  WebKit::ApplicationStateTracker *v2;
  NSObject *v3;
  int v4;
  WebKit::ApplicationStateTracker *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *(WebKit::ApplicationStateTracker **)(a1 + 32);
    v3 = qword_1ECE71A28;
    if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 134217984;
      v5 = v2;
      _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - ApplicationStateTracker: UISceneDidEnterBackground", (uint8_t *)&v4, 0xCu);
    }
    WebKit::ApplicationStateTracker::applicationDidEnterBackground(v2);
  }
}

uint64_t __copy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__1(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 40) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__1(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke_18(uint64_t a1)
{
  uint64_t v1;
  WebKit::ApplicationStateTracker *v2;
  NSObject *v3;
  int v4;
  WebKit::ApplicationStateTracker *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *(WebKit::ApplicationStateTracker **)(a1 + 32);
    v3 = qword_1ECE71A28;
    if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 134217984;
      v5 = v2;
      _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - ApplicationStateTracker: UISceneWillEnterForeground", (uint8_t *)&v4, 0xCu);
    }
    WebKit::ApplicationStateTracker::applicationWillEnterForeground(v2);
  }
}

uint64_t __copy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__2(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 40) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__2(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke_20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  const void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = qword_1ECE71A28;
    if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 134217984;
      v7 = v2;
      _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - ApplicationStateTracker:willBeginSnapshotSequence()", (uint8_t *)&v6, 0xCu);
    }
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 8));
    v5 = WeakRetained;
    if (WeakRetained)
    {
      objc_msgSend(WeakRetained, *(SEL *)(v2 + 72));
      CFRelease(v5);
    }
  }
}

void sub_197066898(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__3(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 40) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__3(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit23ApplicationStateTracker8setSceneEP7UIScene_block_invoke_22(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  id WeakRetained;
  const void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = qword_1ECE71A28;
    if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 134217984;
      v7 = v2;
      _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - ApplicationStateTracker:didCompleteSnapshotSequence()", (uint8_t *)&v6, 0xCu);
    }
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 8));
    v5 = WeakRetained;
    if (WeakRetained)
    {
      objc_msgSend(WeakRetained, *(SEL *)(v2 + 80));
      CFRelease(v5);
    }
  }
}

void sub_1970669E0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__4(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 40) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c63_ZTSKZN6WebKit23ApplicationStateTracker8setSceneEP7UISceneE3__4(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewController_block_invoke(uint64_t a1)
{
  uint64_t v1;
  WebKit::ApplicationStateTracker *v3;
  NSObject *v4;
  const char *v5;
  pid_t v6;
  int v7;
  int v8;
  const char *v9;
  __int16 v10;
  pid_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v3 = *(WebKit::ApplicationStateTracker **)(a1 + 32);
    v4 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      if (_UIApplicationIsExtension())
        v5 = "Extension";
      else
        v5 = "ViewService";
      v6 = getpid();
      v7 = *(_DWORD *)(a1 + 48);
      v8 = 136446722;
      v9 = v5;
      v10 = 1024;
      v11 = v6;
      v12 = 1024;
      v13 = v7;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s has PID %d, host application PID=%d, didEnterBackground", (uint8_t *)&v8, 0x18u);
    }
    WebKit::ApplicationStateTracker::applicationDidEnterBackground(v3);
  }
}

uint64_t __copy_helper_block_e8_32c83_ZTSKZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewControllerE3__0(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 40) = v2;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

unsigned int *__destroy_helper_block_e8_32c83_ZTSKZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewControllerE3__0(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void ___ZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewController_block_invoke_33(uint64_t a1)
{
  uint64_t v1;
  WebKit::ApplicationStateTracker *v3;
  NSObject *v4;
  const char *v5;
  pid_t v6;
  int v7;
  int v8;
  const char *v9;
  __int16 v10;
  pid_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v3 = *(WebKit::ApplicationStateTracker **)(a1 + 32);
    v4 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      if (_UIApplicationIsExtension())
        v5 = "Extension";
      else
        v5 = "ViewService";
      v6 = getpid();
      v7 = *(_DWORD *)(a1 + 48);
      v8 = 136446722;
      v9 = v5;
      v10 = 1024;
      v11 = v6;
      v12 = 1024;
      v13 = v7;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s has PID %d, host application PID=%d, willEnterForeground", (uint8_t *)&v8, 0x18u);
    }
    WebKit::ApplicationStateTracker::applicationWillEnterForeground(v3);
  }
}

uint64_t __copy_helper_block_e8_32c83_ZTSKZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewControllerE3__1(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 40) = v2;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

unsigned int *__destroy_helper_block_e8_32c83_ZTSKZN6WebKit23ApplicationStateTracker17setViewControllerEP16UIViewControllerE3__1(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebKit::ApplicationStateTracker::applicationDidEnterBackground(WebKit::ApplicationStateTracker *this)
{
  id WeakRetained;
  const void *v3;

  *((_BYTE *)this + 88) = 1;
  WebKit::updateApplicationBackgroundState(this);
  WeakRetained = objc_loadWeakRetained((id *)this + 1);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, *((SEL *)this + 7));
    CFRelease(v3);
  }
}

void sub_197066D60(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::ApplicationStateTracker::applicationWillEnterForeground(WebKit::ApplicationStateTracker *this)
{
  id WeakRetained;
  const void *v3;

  *((_BYTE *)this + 88) = 0;
  WebKit::updateApplicationBackgroundState(this);
  WeakRetained = objc_loadWeakRetained((id *)this + 1);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, *((SEL *)this + 8));
    CFRelease(v3);
  }
}

void sub_197066DC0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197067060(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970675BC(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_19706777C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_197067848(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void sub_197067908(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_BYTE *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_197067D30(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197067F08(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WKContextIsPlugInUpdateAvailable()
{
  return 0;
}

uint64_t WKContextCopyPlugInInfoForBundleIdentifier()
{
  return 0;
}

WTF::StringImpl *WKContextRegisterSchemeForCustomProtocol(uint64_t a1, void *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v4 = 0;
  }
  WebKit::WebProcessPool::registerGlobalURLSchemeAsHavingCustomProtocolHandlers((WebKit *)&v4, (const WTF::String *)a2);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKContextUnregisterSchemeForCustomProtocol(uint64_t a1, void *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v4 = 0;
  }
  WebKit::WebProcessPool::unregisterGlobalURLSchemeAsHavingCustomProtocolHandlers((WebKit *)&v4, (const WTF::String *)a2);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPlugInInfoPathKey()
{
  return 0;
}

uint64_t WKPlugInInfoBundleIdentifierKey()
{
  return 0;
}

uint64_t WKPlugInInfoVersionKey()
{
  return 0;
}

uint64_t WKPlugInInfoLoadPolicyKey()
{
  return 0;
}

uint64_t WKPlugInInfoUpdatePastLastBlockedVersionIsKnownAvailableKey()
{
  return 0;
}

uint64_t WKPlugInInfoIsSandboxedKey()
{
  return 0;
}

uint64_t WKContextHandlesSafeBrowsing()
{
  return 1;
}

id WKNotificationCopyDictionaryRepresentation(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return (id)WebCore::NotificationData::dictionaryRepresentation((WebCore::NotificationData *)(a1 + 32));
}

void sub_1970681E4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_197068294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_1970683C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WKPageCreateObservableState(CFTypeRef *a1)
{
  WKObservablePageState *v2;
  uint64_t v3;
  CFTypeRef *v4;
  CFTypeRef *v6;

  v2 = [WKObservablePageState alloc];
  if (a1)
  {
    a1 = (CFTypeRef *)-[CFTypeRef _apiObject](a1, "_apiObject");
    CFRetain(a1[1]);
  }
  v6 = a1;
  v3 = -[WKObservablePageState initWithPage:](v2, "initWithPage:", &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    CFRelease(v4[1]);
  return v3;
}

void sub_197068550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WKPageGetObjectRegistry()
{
  return 0;
}

BOOL WKPageIsURLKnownHSTSHost(void *a1, void *a2)
{
  WebKit::WebProcessPool *v3;
  uint64_t v4;

  v3 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 48) + 24));
  if (a2)
    v4 = objc_msgSend(a2, "_apiObject");
  else
    v4 = 0;
  return WebKit::WebProcessPool::isURLKnownHSTSHost(v3, (WTF::StringImpl **)(v4 + 16));
}

CFTypeRef WKPageLoadURLRequestReturningNavigation(void *a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v16;
  _BYTE v17[152];
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  char v22;
  CFTypeRef cf;

  if (a2)
    v3 = objc_msgSend(a2, "_apiObject");
  else
    v3 = 0;
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)v17, (const WebCore::ResourceRequestBase::RequestData *)(v3 + 16));
  v4 = *(_DWORD **)(v3 + 168);
  if (v4)
    *v4 += 2;
  v18 = v4;
  v5 = *(_DWORD **)(v3 + 176);
  if (v5)
    *v5 += 2;
  v19 = v5;
  v6 = *(_DWORD **)(v3 + 184);
  if (v6)
    ++*v6;
  v7 = *(_QWORD *)(v3 + 192);
  v20 = v6;
  v21 = v7;
  v22 = *(_BYTE *)(v3 + 200);
  v8 = *(const void **)(v3 + 208);
  cf = v8;
  if (v8)
    CFRetain(v8);
  if (a1)
    v9 = objc_msgSend(a1, "_apiObject");
  else
    v9 = 0;
  WebKit::WebPageProxy::loadRequest(v9, (WebCore::ResourceRequestBase *)v17, 1, 0, &v16);
  v10 = v16;
  if (v16)
  {
    v11 = *(const void **)(v16 + 8);
    if (v11)
    {
      CFRetain(*(CFTypeRef *)(v16 + 8));
      v12 = *(const void **)(v10 + 8);
    }
    else
    {
      v12 = 0;
    }
    CFRelease(v12);
  }
  else
  {
    v11 = 0;
  }
  v13 = (id)CFMakeCollectable(v11);
  v14 = cf;
  cf = 0;
  if (v14)
    CFRelease(v14);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v17);
  return v13;
}

void sub_1970686FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf)
{
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a10);
  _Unwind_Resume(a1);
}

CFTypeRef WKPageLoadFileReturningNavigation(void *a1, void *a2, void *a3)
{
  WebKit::WebPageProxy *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;

  if (a1)
  {
    v5 = (WebKit::WebPageProxy *)objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_6:
    v6 = 0;
    goto LABEL_7;
  }
  v5 = 0;
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v6 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
  if (v6)
    *(_DWORD *)v6 += 2;
LABEL_7:
  v18 = v6;
  if (a3)
  {
    v7 = *(WTF::StringImpl **)(objc_msgSend(a3, "_apiObject") + 16);
    if (v7)
      *(_DWORD *)v7 += 2;
  }
  else
  {
    v7 = 0;
  }
  v17 = v7;
  WebKit::WebPageProxy::loadFile(v5, &v18, &v17, 0, 1, &v19);
  v8 = v19;
  if (v19)
  {
    v19 = 0;
    v9 = *(const void **)(v8 + 8);
    if (v9)
    {
      CFRetain(*(CFTypeRef *)(v8 + 8));
      v10 = *(const void **)(v8 + 8);
    }
    else
    {
      v10 = 0;
    }
    CFRelease(v10);
  }
  else
  {
    v9 = 0;
  }
  v12 = (id)CFMakeCollectable(v9);
  v13 = v19;
  v19 = 0;
  if (v13)
    CFRelease(*(CFTypeRef *)(v13 + 8));
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v18;
  v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v12;
}

void sub_19706889C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a12)
    CFRelease(*(CFTypeRef *)(a12 + 8));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void *WKPageGetWebView(void *result)
{
  id WeakRetained;

  if (result)
  {
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(objc_msgSend(result, "_apiObject") + 32) + 1984));
    return (void *)(id)CFMakeCollectable(WeakRetained);
  }
  return result;
}

uint64_t WKPageSetFullscreenDelegate(void *a1, void *a2)
{
  uint64_t (***v3)(_QWORD, uint64_t);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD, uint64_t))(objc_msgSend(a1, "_apiObject") + 368);
  if (((**v3)(v3, 1) & 1) != 0)
    return WebKit::FullscreenClient::setDelegate((uint64_t)v3, a2);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WKPageGetFullscreenDelegate(void *a1)
{
  id *v1;
  uint64_t result;
  CFTypeRef cf;

  v1 = *(id **)(objc_msgSend(a1, "_apiObject") + 368);
  if (((*(uint64_t (**)(id *, uint64_t))*v1)(v1, 1) & 1) != 0)
  {
    WebKit::DiagnosticLoggingClient::delegate(v1, &cf);
    return (uint64_t)(id)CFMakeCollectable(cf);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WKProtectionSpaceCopyNSURLProtectionSpace(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return objc_msgSend((id)WebCore::ProtectionSpace::nsSpace((WebCore::ProtectionSpace *)(a1 + 16)), "copy");
}

void *WKWebsiteDataStoreGetDataStore(void *result)
{
  if (result)
    return *(void **)(objc_msgSend(result, "_apiObject") + 8);
  return result;
}

WebKit::PageLoadStateObserver *WebKit::PageLoadStateObserver::PageLoadStateObserver(WebKit::PageLoadStateObserver *this, objc_object *a2, NSString *a3)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_1E34BA060;
  *((_QWORD *)this + 2) = 0;
  objc_initWeak((id *)this + 2, a2);
  *((_QWORD *)this + 3) = -[NSString copy](a3, "copy");
  return this;
}

void sub_197068AC0(_Unwind_Exception *a1)
{
  unsigned int **v1;
  id *v2;
  void *v4;

  objc_destroyWeak(v2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1, v4);
  _Unwind_Resume(a1);
}

void WebKit::PageLoadStateObserver::~PageLoadStateObserver(WebKit::PageLoadStateObserver *this)
{
  const void *v2;
  void *v3;

  *(_QWORD *)this = off_1E34BA060;
  v2 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    CFRelease(v2);
  objc_destroyWeak((id *)this + 2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  const void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_1E34BA060;
  v2 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    CFRelease(v2);
  objc_destroyWeak((id *)this + 2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
  WTF::fastFree(this, v4);
}

void WebKit::PageLoadStateObserver::willChangeIsLoading(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("loading"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197068BC0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::didChangeIsLoading(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("loading"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197068C1C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::willChangeTitle(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("title"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197068C78(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::didChangeTitle(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("title"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197068CD4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::willChangeActiveURL(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", this[3]);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197068D30(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::didChangeActiveURL(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", this[3]);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197068D8C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::willChangeHasOnlySecureContent(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("hasOnlySecureContent"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197068DE8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::didChangeHasOnlySecureContent(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("hasOnlySecureContent"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197068E44(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::willChangeEstimatedProgress(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("estimatedProgress"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197068EB0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::didChangeEstimatedProgress(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("estimatedProgress"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197068F0C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::willChangeWebProcessIsResponsive(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("_webProcessIsResponsive"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197068F88(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageLoadStateObserver::didChangeWebProcessIsResponsive(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("_webProcessIsResponsive"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197068FE4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::RemoteMediaEngineConfigurationFactoryProxy::~RemoteMediaEngineConfigurationFactoryProxy(unsigned int **this, void *a2)
{
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  void *v3;

  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
  WTF::fastFree((WTF *)this, v3);
}

uint64_t WebKit::RemoteMediaEngineConfigurationFactoryProxy::createDecodingConfiguration(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v3 = *a3;
  *a3 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34BA788;
  v4[1] = v3;
  v6 = v4;
  WebCore::MediaEngineConfigurationFactory::createDecodingConfiguration();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

uint64_t WebKit::RemoteMediaEngineConfigurationFactoryProxy::createEncodingConfiguration(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v3 = *a3;
  *a3 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34BA7B0;
  v4[1] = v3;
  v6 = v4;
  WebCore::MediaEngineConfigurationFactory::createEncodingConfiguration();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

void WebKit::RemoteMediaPlayerManagerProxy::~RemoteMediaPlayerManagerProxy(unsigned int **this)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  uint64_t v8;

  *this = (unsigned int *)off_1E34BA1D0;
  WebKit::RemoteMediaPlayerManagerProxy::clear((WebKit::RemoteMediaPlayerManagerProxy *)this);
  v3 = this[5];
  this[5] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned __int8 *)this[3];
  this[3] = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, v2);
  v8 = (uint64_t)this[2];
  if (v8)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v8, v2);
  *this = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteMediaPlayerManagerProxy::~RemoteMediaPlayerManagerProxy(this);
  WTF::fastFree(v1, v2);
}

_QWORD *WebKit::RemoteMediaPlayerManagerProxy::clear(WebKit::RemoteMediaPlayerManagerProxy *this)
{
  _QWORD *v1;
  _QWORD *result;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::begin(v1);
  v4 = (uint64_t)result;
  v5 = v3;
  v6 = 0;
  if (v1)
    v6 = &v1[2 * *((unsigned int *)v1 - 1)];
  if (v6 != result)
  {
    do
    {
      result = WebKit::RemoteMediaPlayerProxy::invalidate(*(WebCore::MediaPlayer ***)(v4 + 8));
      while (1)
      {
        v4 += 16;
        if ((void *)v4 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v4 + 1) > 1)
          goto LABEL_11;
      }
      v4 = (uint64_t)v5;
LABEL_11:
      ;
    }
    while ((_QWORD *)v4 != v6);
  }
  if (v1)
    return (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable((uint64_t)v1, v3);
  return result;
}

unsigned int *WebKit::RemoteMediaPlayerProxy::invalidate(WebCore::MediaPlayer **this)
{
  const char ***v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 24));
  WebCore::MediaPlayer::invalidate(this[15]);
  v2 = (const char ***)this[13];
  if (!v2)
    goto LABEL_5;
  v3 = (uint64_t)v2[2] - 1;
  v2[2] = (const char **)v3;
  if (v3)
  {
    this[13] = 0;
    goto LABEL_4;
  }
  v2[1][1] = 0;
  sandbox_extension_release();
  v2 = (const char ***)this[13];
  this[13] = 0;
  if (v2)
LABEL_4:
    v2 = WTF::RefCounted<WebKit::SandboxExtension>::deref(v2);
LABEL_5:
  if (*((_BYTE *)this + 832))
  {
    do
      v4 = __ldaxr((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests);
    while (__stlxr(v4 - 1, (unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests));
    if (!atomic_load((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests))
      WebKit::ScopedRenderingResourcesRequest::scheduleFreeRenderingResources((WTF::RunLoop *)v2);
  }
  *((_BYTE *)this + 832) = 0;
  result = (unsigned int *)this[106];
  this[106] = 0;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaPlayerManagerProxy::createMediaPlayer(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unsigned __int8 *result;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a2;
  result = (unsigned __int8 *)a1[3];
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, a1[4], &v18);
    if (v18)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v16, (uint64_t **)(v18 + 48));
      v11 = *(_QWORD *)(v18 + 192);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v11 + 16));
      v12 = WTF::fastMalloc((WTF *)0x368);
      v17 = WebKit::RemoteMediaPlayerProxy::RemoteMediaPlayerProxy(v12, (uint64_t)a1, a2, a3, (uint64_t *)v16, a4, a5, v11);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 16), v13);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v16);
      result = (unsigned __int8 *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>(a1 + 2, &v19, &v17, (uint64_t)v16);
      v14 = v17;
      v17 = 0;
      if (v14)
        result = (unsigned __int8 *)WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v14 + 16));
      v15 = v18;
      v18 = 0;
      if (v15)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v15 + 16));
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v30 = 0;
        else
          v30 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v28 = v8 + 16 * v30;
        goto LABEL_26;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  v21 = v16[1];
  v16[1] = v20;
  if (v21)
    result = (uint64_t *)WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v21 + 16));
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_20:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v24 = *v6;
      if (*v6)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_20;
  }
  v28 = v24 + 16 * v27;
  v29 = 1;
LABEL_26:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

void WebKit::RemoteMediaPlayerManagerProxy::deleteMediaPlayer(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  WebKit::RemoteMediaPlayerProxy *v5;
  unsigned __int8 *v6;
  WebKit::RemoteMediaPlayerProxy *v8;
  WebKit::RemoteMediaPlayerProxy *v9;
  uint64_t v10;

  v10 = a2;
  v3 = a1 + 2;
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1 + 2, &v10);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::take(v3, v4, &v9);
  if (v9)
  {
    WebKit::RemoteMediaPlayerProxy::invalidate((WebCore::MediaPlayer **)v9);
    v5 = v9;
    v9 = 0;
    if (v5)
      WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)v5 + 4);
  }
  v6 = (unsigned __int8 *)a1[3];
  if (v6)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v6, a1[4], &v9);
    if (v9)
    {
      if (!atomic_load((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests))
        WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*((WebKit::GPUProcess **)v9 + 9));
      v8 = v9;
      v9 = 0;
      if (v8)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v8 + 2));
    }
  }
}

WTF::StringImpl **WebKit::RemoteMediaPlayerManagerProxy::getSupportedTypes(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::StringImpl **result;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  void *v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  uint64_t v20;

  v4 = WebCore::MediaPlayer::mediaEngine();
  if (v4)
  {
    v18 = 0;
    result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t, WTF::StringImpl ***))(*(_QWORD *)v4 + 32))(v4, &v18);
    v6 = 0;
    v19 = 0;
    v20 = 0;
    if (v18)
    {
      v7 = *((unsigned int *)v18 - 3);
      if ((_DWORD)v7)
      {
        if (v7 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v6 = WTF::fastMalloc((WTF *)(8 * v7));
        LODWORD(v20) = v7;
        v19 = v6;
      }
      else
      {
        v6 = 0;
      }
    }
    v8 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(&v18);
    v10 = v18;
    if (v18)
      v10 = &v18[*((unsigned int *)v18 - 1)];
    if (v10 != v8)
    {
      v11 = 0;
      do
      {
        v12 = *v8;
        if (*v8)
          *(_DWORD *)v12 += 2;
        *(_QWORD *)(v6 + 8 * v11) = v12;
        while (++v8 != v9)
        {
          if ((unint64_t)*v8 + 1 > 1)
            goto LABEL_17;
        }
        v8 = v9;
LABEL_17:
        ++v11;
      }
      while (v8 != v10);
      HIDWORD(v20) = v11;
    }
    v13 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 16))(v13, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v14);
    result = v18;
    if (v18)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v15);
  }
  else
  {
    WTFLogAlways();
    v19 = 0;
    v20 = 0;
    v16 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 16))(v16, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    return (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v17);
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerManagerProxy::supportsTypeAndCodecs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = WebCore::MediaPlayer::mediaEngine();
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, a3);
    v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
  }
  else
  {
    WTFLogAlways();
    v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t WebKit::RemoteMediaPlayerManagerProxy::supportsKeySystem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = WebCore::MediaPlayer::mediaEngine();
  if (!v8)
    return WTFLogAlways();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v8, a3, a4);
  v10 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

WebKit::RemoteMediaPlayerProxy *WebKit::RemoteMediaPlayerManagerProxy::didReceivePlayerMessage(WebKit::RemoteMediaPlayerManagerProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::RemoteMediaPlayerProxy *result;
  uint64_t v6;

  v6 = *((_QWORD *)a3 + 8);
  result = (WebKit::RemoteMediaPlayerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 2, &v6);
  if (result)
    return (WebKit::RemoteMediaPlayerProxy *)WebKit::RemoteMediaPlayerProxy::didReceiveMessage(result, a2, a3);
  return result;
}

uint64_t WebKit::RemoteMediaPlayerManagerProxy::didReceiveSyncPlayerMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  uint64_t result;
  uint64_t v8;

  v8 = *(_QWORD *)(a3 + 64);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v8);
  if (result)
    return WebKit::RemoteMediaPlayerProxy::didReceiveSyncMessage(result, a2, a3, a4);
  return result;
}

uint64_t WebKit::RemoteMediaPlayerManagerProxy::mediaPlayer@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((unint64_t)(*a2 - 1) > 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_7;
  v4 = result;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(result + 16), a2);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
    v5 += 16 * *(unsigned int *)(v5 - 4);
  if (v5 == result)
  {
LABEL_7:
    v7 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(result + 8);
    v7 = *(_QWORD *)(v6 + 120);
    if (v7)
      result = (uint64_t)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(*(unsigned __int8 ***)(v6 + 120));
  }
  *a3 = v7;
  return result;
}

WebCore::ShareableBitmap *WebKit::RemoteMediaPlayerManagerProxy::bitmapImageForCurrentTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WebCore::ShareableBitmap *result;
  WebCore::MediaPlayer *v5;
  void *v6;
  CFTypeRef v7;
  CFTypeRef v8;
  WebCore::NativeImage *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  CFTypeRef v18;
  uint64_t v19;
  CFTypeRef v20;
  char v21;
  uint64_t v22;
  CFTypeRef cf;
  char v24;
  WebCore::ShareableBitmap *v25;
  uint64_t v26;
  WebCore::NativeImage *v27;
  WebCore::MediaPlayer *v28;
  uint64_t v29;

  v29 = a2;
  result = (WebCore::ShareableBitmap *)WebKit::RemoteMediaPlayerManagerProxy::mediaPlayer(a1, &v29, &v28);
  v5 = v28;
  if (!v28)
  {
    *a3 = 0;
    a3[64] = 0;
    return result;
  }
  WebCore::MediaPlayer::nativeImageForCurrentTime(v28);
  result = v27;
  if (!v27)
  {
    *a3 = 0;
    a3[64] = 0;
    goto LABEL_35;
  }
  v26 = WebCore::NativeImage::size(v27);
  WebCore::MediaPlayer::colorSpace(v5);
  v20 = v18;
  v21 = 1;
  MEMORY[0x19AEB3600](&v22, &v26, &v20, 0);
  WebCore::ShareableBitmap::create();
  if (v24)
  {
    v7 = cf;
    cf = 0;
    if (v7)
      CFRelease(v7);
  }
  if (v21)
  {
    v8 = v20;
    v20 = 0;
    if (v8)
      CFRelease(v8);
  }
  result = v25;
  if (v25)
  {
    WebCore::ShareableBitmap::createGraphicsContext(v25);
    if (v19)
    {
      v22 = 0;
      *(float *)&cf = (float)(int)v26;
      *((float *)&cf + 1) = (float)SHIDWORD(v26);
      WebCore::GraphicsContext::drawNativeImage();
      WebCore::ShareableBitmap::createHandle();
      (*(void (**)())(*(_QWORD *)v19 + 8))();
    }
    else
    {
      *a3 = 0;
      a3[64] = 0;
    }
    result = v25;
    v25 = 0;
    if (result)
      result = (WebCore::ShareableBitmap *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v6);
  }
  else
  {
    *a3 = 0;
    a3[64] = 0;
  }
  v9 = v27;
  v27 = 0;
  if (!v9)
    goto LABEL_35;
  v10 = *((_QWORD *)v9 + 1);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_23;
  }
  result = (WebCore::ShareableBitmap *)MEMORY[0x19AEABB3C](v10);
LABEL_23:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v17 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v17 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v10))
    {
      if (!v13)
        goto LABEL_31;
      goto LABEL_35;
    }
  }
  else
  {
    __clrex();
  }
  result = (WebCore::ShareableBitmap *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
  if (!v13)
  {
LABEL_31:
    if (v14)
      result = (WebCore::ShareableBitmap *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (!v15)
      result = (WebCore::ShareableBitmap *)WTF::fastFree((WTF *)v10, v6);
  }
LABEL_35:
  if (v28)
    return (WebCore::ShareableBitmap *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v28);
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::RemoteMediaPlayerProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  WTF::RunLoop *v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  __int128 v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  unsigned __int8 **v51;
  unsigned __int8 **v52;
  uint64_t v54;
  uint64_t v55;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E34BA208;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &unk_1E34BA4D8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = a4;
  *(_QWORD *)(a1 + 104) = 0;
  v13 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  v14 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v15 = *(unsigned int **)(a2 + 8);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 160) = v15;
  *(_BYTE *)(a1 + 168) = a6;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v17 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v14);
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v18 = off_1E34BA850;
  v18[1] = WebKit::RemoteMediaPlayerProxy::timerFired;
  v18[2] = 0;
  v18[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 192), v17);
  *(_QWORD *)(a1 + 192) = off_1E34ABE00;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = v18;
  *(_DWORD *)(a1 + 232) = 10000000;
  *(_BYTE *)(a1 + 236) = 1;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 10000000;
  *(_BYTE *)(a1 + 252) = 1;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 10000000;
  *(_BYTE *)(a1 + 268) = 1;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 10000000;
  *(_BYTE *)(a1 + 284) = 1;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 10000000;
  *(_BYTE *)(a1 + 300) = 1;
  *(_BYTE *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 346) = 0;
  *(_QWORD *)(a1 + 348) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 385) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_WORD *)(a1 + 440) = 257;
  *(_BYTE *)(a1 + 442) = 1;
  *(_DWORD *)(a1 + 443) = 0;
  *(_DWORD *)(a1 + 446) = 0;
  v19 = *(_DWORD **)a7;
  if (*(_QWORD *)a7)
    *v19 += 2;
  *(_QWORD *)(a1 + 456) = v19;
  v20 = *(_DWORD **)(a7 + 8);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(a1 + 464) = v20;
  v21 = *(_DWORD **)(a7 + 16);
  if (v21)
    *v21 += 2;
  *(_QWORD *)(a1 + 472) = v21;
  v22 = *(_DWORD **)(a7 + 24);
  if (v22)
    *v22 += 2;
  *(_QWORD *)(a1 + 480) = v22;
  v23 = *(unsigned int *)(a7 + 44);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 500) = v23;
  if ((_DWORD)v23)
  {
    if (v23 >> 28)
      goto LABEL_62;
    v24 = WTF::fastMalloc((WTF *)(16 * v23));
    *(_DWORD *)(a1 + 496) = v23;
    *(_QWORD *)(a1 + 488) = v24;
    v25 = *(unsigned int *)(a7 + 44);
    if ((_DWORD)v25)
    {
      v26 = *(_QWORD *)(a7 + 32);
      v27 = v26 + 16 * v25;
      do
      {
        v28 = *(_DWORD **)v26;
        if (*(_QWORD *)v26)
          *v28 += 2;
        *(_QWORD *)v24 = v28;
        *(_BYTE *)(v24 + 8) = *(_BYTE *)(v26 + 8);
        v26 += 16;
        v24 += 16;
      }
      while (v26 != v27);
    }
  }
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  if (*(_BYTE *)(a7 + 64))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 504, a7 + 48);
    *(_BYTE *)(a1 + 520) = 1;
  }
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  if (*(_BYTE *)(a7 + 88))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 528, a7 + 72);
    *(_BYTE *)(a1 + 544) = 1;
  }
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  if (*(_BYTE *)(a7 + 112))
  {
    WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 552, a7 + 96);
    *(_BYTE *)(a1 + 568) = 1;
  }
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  if (*(_BYTE *)(a7 + 136))
  {
    WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 576, a7 + 120);
    *(_BYTE *)(a1 + 592) = 1;
  }
  *(_BYTE *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  if (*(_BYTE *)(a7 + 160))
  {
    WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 600, a7 + 144);
    *(_BYTE *)(a1 + 616) = 1;
  }
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a7 + 168);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 640, a7 + 184);
  v29 = *(unsigned int *)(a7 + 212);
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 668) = v29;
  if ((_DWORD)v29)
  {
    if (v29 < 0x6666667)
    {
      v30 = 40 * v29;
      v31 = WTF::fastMalloc((WTF *)(40 * v29));
      *(_DWORD *)(a1 + 664) = (v30 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)(a1 + 656) = v31;
      v32 = *(_DWORD *)(a7 + 212);
      if (v32)
      {
        v33 = *(_QWORD *)(a7 + 200);
        v34 = v33 + 40 * v32;
        do
        {
          v35 = *(_DWORD **)v33;
          if (*(_QWORD *)v33)
            *v35 += 2;
          *(_QWORD *)v31 = v35;
          v36 = *(_DWORD **)(v33 + 8);
          if (v36)
            *v36 += 2;
          *(_QWORD *)(v31 + 8) = v36;
          v37 = *(_DWORD **)(v33 + 16);
          if (v37)
            *v37 += 2;
          *(_QWORD *)(v31 + 16) = v37;
          v38 = *(_QWORD *)(v33 + 24);
          *(_BYTE *)(v31 + 32) = *(_BYTE *)(v33 + 32);
          *(_QWORD *)(v31 + 24) = v38;
          v33 += 40;
          v31 += 40;
        }
        while (v33 != v34);
      }
      goto LABEL_39;
    }
LABEL_62:
    __break(0xC471u);
    JUMPOUT(0x19706A52CLL);
  }
LABEL_39:
  *(_BYTE *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 696) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 672, a7 + 216);
  v39 = *(_OWORD *)(a7 + 248);
  *(_OWORD *)(a1 + 718) = *(_OWORD *)(a7 + 262);
  *(_OWORD *)(a1 + 704) = v39;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_BYTE *)(a1 + 768) = 0;
  *(_DWORD *)(a1 + 772) = 1065353216;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_WORD *)(a1 + 792) = 1;
  *(_DWORD *)(a1 + 796) = 0;
  *(_WORD *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 832) = 1;
  *(_QWORD *)(a1 + 824) = 0;
  do
    v40 = __ldaxr((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests);
  while (__stlxr(v40 + 1, (unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests));
  *(_BYTE *)(a1 + 833) = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a8 + 16));
  *(_QWORD *)(a1 + 840) = a8;
  *(_QWORD *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  v41 = *(_QWORD *)(a2 + 40);
  if (!v41)
  {
    v42 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v42 + 8) = 1;
    *(_QWORD *)v42 = off_1E34B8110;
    *(_BYTE *)(v42 + 12) = 1;
    *(_QWORD *)(v42 + 16) = a2;
    v43 = *(unsigned int **)(a2 + 40);
    *(_QWORD *)(a2 + 40) = v42;
    if (v43)
    {
      v44 = v43 + 2;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        atomic_store(1u, v43 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
      }
    }
    v47 = *(unsigned __int8 **)(a2 + 24);
    if (v47)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v47, *(_QWORD *)(a2 + 32), &v55);
      v48 = v55;
      v41 = *(_QWORD *)(a2 + 40);
      if (v55)
      {
        v54 = *(_QWORD *)(v55 + 128);
        v49 = v54 >= 0 || v54 == -1;
      }
      else
      {
        v49 = 0;
      }
    }
    else
    {
      v48 = 0;
      v49 = 0;
      v41 = *(_QWORD *)(a2 + 40);
    }
    if (*(_QWORD *)(v41 + 16) == a2)
      *(_BYTE *)(v41 + 12) = v49;
    v55 = 0;
    if (v48)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v48 + 16));
      v41 = *(_QWORD *)(a2 + 40);
    }
  }
  *(_QWORD *)(a1 + 864) = v41;
  WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 176, a1 + 488);
  *(_BYTE *)(a1 + 793) = *(_BYTE *)(a1 + 730);
  *(_OWORD *)(a1 + 776) = *(_OWORD *)(a1 + 624);
  WebCore::MediaPlayer::create();
  v50 = v55;
  v55 = 0;
  v51 = *(unsigned __int8 ***)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v50;
  if (v51)
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v51);
    v52 = (unsigned __int8 **)v55;
    v55 = 0;
    if (v52)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v52);
  }
  WebCore::MediaPlayer::setResourceOwner();
  WebCore::MediaPlayer::setPresentationSize(*(WebCore::MediaPlayer **)(a1 + 120), (const IntSize *)(a1 + 704));
  return a1;
}

uint64_t WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  if (a2 != a1)
  {
    v4 = *(unsigned int *)(a1 + 12);
    v5 = *(unsigned int *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::ContentType const*,WebCore::ContentType const*,WebCore::ContentType*,0>(*(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(_QWORD *)a2 + 16 * v4), *(_QWORD *)a1);
    v6 = *(unsigned int *)(a1 + 12);
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6 != (_DWORD)v7)
    {
      v8 = *(_QWORD *)a2 + 16 * v7;
      v9 = *(_QWORD *)a1 + 16 * v6;
      v10 = *(_QWORD *)a2 + 16 * v6;
      do
      {
        v11 = *(_DWORD **)v10;
        if (*(_QWORD *)v10)
          *v11 += 2;
        *(_QWORD *)v9 = v11;
        *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
        v10 += 16;
        v9 += 16;
      }
      while (v10 != v8);
    }
    *(_DWORD *)(a1 + 12) = v7;
  }
  return a1;
}

void WebKit::RemoteMediaPlayerProxy::~RemoteMediaPlayerProxy(WebKit::RemoteMediaPlayerProxy *this)
{
  WebKit::RemoteMediaSourceProxy *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  unsigned __int8 **v34;
  void *v35;
  const char ***v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD v57[2];
  uint64_t *v58;
  uint64_t v59;
  char v60;

  v2 = (WebKit::RemoteMediaSourceProxy *)*((_QWORD *)this + 93);
  if (v2)
    WebKit::RemoteMediaSourceProxy::shutdown(v2);
  v3 = *((_QWORD *)this + 92);
  if (v3)
  {
    *((_QWORD *)this + 92) = 0;
    LOBYTE(v58) = 0;
    v60 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v3 + 16))(v3, &v58);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  WebKit::RemoteMediaPlayerProxy::setShouldEnableAudioSourceProvider((WebCore::MediaPlayer **)this, 0);
  v58 = (uint64_t *)*((_QWORD *)this + 16);
  v59 = *((_QWORD *)this + 17);
  v57[0] = 0;
  *((_QWORD *)this + 16) = 0;
  v57[1] = 0;
  *((_QWORD *)this + 17) = 0;
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v57, v4);
  if (HIDWORD(v59))
  {
    v6 = v58;
    v7 = 8 * HIDWORD(v59);
    do
    {
      v8 = *v6;
      *v6++ = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 -= 8;
    }
    while (v7);
  }
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v5);
  v10 = (unsigned int *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      v10 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  v14 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v14)
    v10 = (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v14 + 16), v9);
  if (*((_BYTE *)this + 832))
  {
    do
      v15 = __ldaxr((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests);
    while (__stlxr(v15 - 1, (unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests));
    if (!atomic_load((unsigned int *)&WebKit::ScopedRenderingResourcesRequest::s_requests))
      WebKit::ScopedRenderingResourcesRequest::scheduleFreeRenderingResources((WTF::RunLoop *)v10);
  }
  v17 = (unsigned int *)*((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v17)
  {
    v18 = v17 + 4;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
    }
  }
  v21 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v21)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v21 + 8), v9);
  v22 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  WebKit::RemoteMediaPlayerProxyConfiguration::~RemoteMediaPlayerProxyConfiguration((WebKit::RemoteMediaPlayerProxy *)((char *)this + 456), v9);
  if (*((_BYTE *)this + 336))
  {
    v24 = (WTF *)*((_QWORD *)this + 40);
    if (v24)
    {
      *((_QWORD *)this + 40) = 0;
      *((_DWORD *)this + 82) = 0;
      WTF::fastFree(v24, v23);
    }
  }
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v26 -= 2;
  }
  *((_QWORD *)this + 24) = off_1E34ABE00;
  v27 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::RemoteMediaPlayerProxy *)((char *)this + 192));
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, v28);
  v30 = (unsigned int *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v29);
    }
  }
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 19, 0);
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 18, 0);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, v33);
  v34 = (unsigned __int8 **)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v34)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v34);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 14);
  v36 = (const char ***)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v36)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v36);
  v37 = *((unsigned int *)this + 21);
  if ((_DWORD)v37)
  {
    v38 = (uint64_t *)*((_QWORD *)this + 9);
    v39 = 8 * v37;
    do
    {
      v40 = *v38;
      *v38 = 0;
      if (v40)
        WTF::ThreadSafeRefCounted<WebKit::RemoteTextTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)(v40 + 16));
      ++v38;
      v39 -= 8;
    }
    while (v39);
  }
  v41 = (WTF *)*((_QWORD *)this + 9);
  if (v41)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v41, v35);
  }
  v42 = *((unsigned int *)this + 17);
  if ((_DWORD)v42)
  {
    v43 = (uint64_t *)*((_QWORD *)this + 7);
    v44 = 8 * v42;
    do
    {
      v45 = *v43;
      *v43 = 0;
      if (v45)
        WTF::ThreadSafeRefCounted<WebKit::RemoteVideoTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)(v45 + 16));
      ++v43;
      v44 -= 8;
    }
    while (v44);
  }
  v46 = (WTF *)*((_QWORD *)this + 7);
  if (v46)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v46, v35);
  }
  v47 = *((unsigned int *)this + 13);
  if ((_DWORD)v47)
  {
    v48 = (uint64_t *)*((_QWORD *)this + 5);
    v49 = 8 * v47;
    do
    {
      v50 = *v48;
      *v48 = 0;
      if (v50)
        WTF::ThreadSafeRefCounted<WebKit::RemoteAudioTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)(v50 + 16));
      ++v48;
      v49 -= 8;
    }
    while (v49);
  }
  v51 = (WTF *)*((_QWORD *)this + 5);
  if (v51)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v51, v35);
  }
  *((_QWORD *)this + 3) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, v35);
  v53 = *((_QWORD *)this + 1);
  if (v53)
  {
    *(_QWORD *)(v53 + 8) = 0;
    v54 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v54)
    {
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        atomic_store(1u, v54);
        WTF::fastFree((WTF *)v54, v52);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteMediaPlayerProxy::~RemoteMediaPlayerProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 *WebKit::RemoteMediaSourceProxy::shutdown(WebKit::RemoteMediaSourceProxy *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 ***v5;
  uint64_t v6;
  unsigned __int8 **v7;
  void *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _BYTE v25[24];
  uint64_t v26;
  uint64_t v27[2];
  IPC::Encoder *v28;

  result = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (!result)
    return result;
  result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 5), &v26);
  v3 = v26;
  if (!v26)
    return result;
  v4 = *((unsigned int *)this + 23);
  if ((_DWORD)v4)
  {
    v5 = (unsigned __int8 ***)*((_QWORD *)this + 10);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      if (*v5)
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v7 + 1);
        WebKit::RemoteSourceBufferProxy::shutdown((WebKit::RemoteSourceBufferProxy *)v7);
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(v7[1], v8);
      }
      else
      {
        WebKit::RemoteSourceBufferProxy::shutdown(0);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
    v3 = v26;
  }
  v9 = *(os_unfair_lock_s **)(v3 + 48);
  *(_QWORD *)v25 = this;
  v10 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_15;
  }
  MEMORY[0x19AEABB3C](v10);
LABEL_15:
  ++*(_QWORD *)(v10 + 8);
  v12 = __ldxr((unsigned __int8 *)v10);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v10))
      goto LABEL_20;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_20:
  *(_QWORD *)&v25[8] = this;
  WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v25[16], v26);
  v13 = *((_QWORD *)this + 6);
  v14 = *(_QWORD *)&v25[16];
  v24 = *(_OWORD *)v25;
  *(_OWORD *)&v25[8] = 0u;
  v15 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v15 = &off_1E34BABB0;
  *(_OWORD *)(v15 + 8) = v24;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 183;
  *(_QWORD *)(v17 + 8) = v13;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v28 = (IPC::Encoder *)v17;
  v27[0] = v15;
  v27[1] = v16;
  IPC::Connection::sendMessageWithAsyncReply(v9, &v28, v27, 0, 0);
  v19 = v27[0];
  v27[0] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  result = (unsigned __int8 *)v28;
  v28 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v18);
    result = (unsigned __int8 *)WTF::fastFree(v20, v21);
  }
  v22 = *(_QWORD *)&v25[16];
  *(_QWORD *)&v25[16] = 0;
  if (v22)
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v22 + 16));
  if (*(_QWORD *)&v25[8])
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(*(_QWORD *)&v25[8] + 8), v18);
  v23 = v26;
  v26 = 0;
  if (v23)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v23 + 16));
  return result;
}

unsigned int *WebKit::RemoteMediaPlayerProxy::setShouldEnableAudioSourceProvider(WebCore::MediaPlayer **this, int a2)
{
  unsigned int *result;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;

  result = (unsigned int *)WebCore::MediaPlayer::audioSourceProvider(this[15]);
  if (result)
  {
    v5 = result;
    if (a2 && (v6 = (uint64_t)this[103]) != 0)
    {
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
      v7 = *(unsigned int **)(v6 + 8);
      if (v7)
      {
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
      }
    }
    else
    {
      v7 = 0;
    }
    v12 = (WTF *)v7;
    (*(void (**)(unsigned int *, WTF **))(*(_QWORD *)v5 + 8))(v5, &v12);
    result = (unsigned int *)v12;
    v12 = 0;
    if (result)
    {
      do
      {
        v10 = __ldaxr(result);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, result));
      if (!v11)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

void `non-virtual thunk to'WebKit::RemoteMediaPlayerProxy::~RemoteMediaPlayerProxy(WebKit::RemoteMediaPlayerProxy *this)
{
  WebKit::RemoteMediaPlayerProxy::~RemoteMediaPlayerProxy((WebKit::RemoteMediaPlayerProxy *)((char *)this - 24));
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteMediaPlayerProxy::~RemoteMediaPlayerProxy((WebKit::RemoteMediaPlayerProxy *)((char *)this - 24));
  WTF::fastFree(v1, v2);
}

uint64_t *WebKit::RemoteMediaPlayerProxy::commitAllTransactions@<X0>(WebKit::RemoteMediaPlayerProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  uint64_t v8;
  os_unfair_lock_s *v9;
  _QWORD v10[4];
  char v11;

  v3 = *((_QWORD *)this + 20);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v6 = *(unsigned __int8 **)(v4 + 24)) != 0
    && (WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v6, *(_QWORD *)(v4 + 32), v10), v8 = v10[0], v10[0] = 0, v8))
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
    v9 = (os_unfair_lock_s *)*((_QWORD *)this + 14);
    LOBYTE(v10[0]) = 0;
    return IPC::Connection::sendWithPromisedReply<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(v9, *((_QWORD *)this + 11), 0, a2);
  }
  else
  {
    v11 = 1;
    v10[0] = 0;
    v10[1] = 0;
    v10[2] = "commitAllTransactions";
    v10[3] = 0;
    return (uint64_t *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>(&v11, (WTF::Logger::LogSiteIdentifier *)v10, a2);
  }
}

WTF::Lock *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>@<X0>(char *a1@<X0>, WTF::Logger::LogSiteIdentifier *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = WTF::fastMalloc((WTF *)0x78);
  v7 = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(v6, a2);
  *a3 = v7;
  return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v7, a1, a2);
}

WTF::StringImpl **WebKit::RemoteMediaPlayerProxy::getConfiguration(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  double v9;
  unsigned int *v10;
  unsigned int v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **result;
  uint64_t v14;
  WTF::StringImpl *v15[3];
  WTF::StringImpl **v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  WebCore::MediaPlayer::engineDescription(*(WebCore::MediaPlayer **)(a1 + 120));
  v5 = v15[0];
  v15[0] = 0;
  v6 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (v6)
  {
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 != 2)
      goto LABEL_5;
    WTF::StringImpl::destroy(v6, v4);
    v6 = v15[0];
    v15[0] = 0;
    if (!v6)
      goto LABEL_6;
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v8);
    else
LABEL_5:
      *(_DWORD *)v6 = v7;
  }
LABEL_6:
  WebCore::MediaPlayer::maximumDurationToCacheMediaTime(*(WebCore::MediaPlayer **)(a1 + 120));
  if (v9 == 0.0)
    v9 = 0.2;
  *(double *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = WebCore::MediaPlayer::supportsScanning(*(WebCore::MediaPlayer **)(a1 + 120));
  *(_BYTE *)(a2 + 17) = WebCore::MediaPlayer::supportsFullscreen(*(WebCore::MediaPlayer **)(a1 + 120));
  *(_BYTE *)(a2 + 18) = WebCore::MediaPlayer::supportsPictureInPicture(*(WebCore::MediaPlayer **)(a1 + 120));
  *(_BYTE *)(a2 + 19) = WebCore::MediaPlayer::supportsAcceleratedRendering(*(WebCore::MediaPlayer **)(a1 + 120));
  *(_BYTE *)(a2 + 20) = WebCore::MediaPlayer::supportsPlayAtHostTime(*(WebCore::MediaPlayer **)(a1 + 120));
  *(_BYTE *)(a2 + 21) = WebCore::MediaPlayer::supportsPauseAtHostTime(*(WebCore::MediaPlayer **)(a1 + 120));
  *(_BYTE *)(a2 + 22) = WebCore::MediaPlayer::canPlayToWirelessPlaybackTarget(*(WebCore::MediaPlayer **)(a1 + 120));
  *(_BYTE *)(a2 + 23) = WebCore::MediaPlayer::shouldIgnoreIntrinsicSize(*(WebCore::MediaPlayer **)(a1 + 120));
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v10 = *(unsigned int **)(a1 + 8);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = (WTF::StringImpl **)operator new(0x18uLL);
  *v12 = (WTF::StringImpl *)&off_1E34BA8F8;
  v12[1] = (WTF::StringImpl *)a1;
  v12[2] = (WTF::StringImpl *)v10;
  v16 = v12;
  *(_BYTE *)(a1 + 833) = WebCore::MediaPlayer::setCurrentTimeDidChangeCallback();
  result = v16;
  if (v16 == v15)
  {
    v14 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v14 = 5;
  }
  return (WTF::StringImpl **)(*((uint64_t (**)(void))*result + v14))();
}

WTF::StringImpl *WebKit::RemoteMediaPlayerProxy::load(uint64_t a1, WTF::URL *a2, uint64_t *a3, WebCore::ContentType *a4, WTF::String *a5, BOOL a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  const char ***v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  WTF::StringImpl *v20[3];

  v20[0] = 0;
  v20[2] = 0;
  if (*((_BYTE *)a3 + 8))
  {
    if (*a3)
    {
      v13 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v13 = 1;
      v14 = *a3;
      *a3 = 0;
      *(_QWORD *)(v13 + 8) = v14;
      *(_QWORD *)(v13 + 16) = 0;
    }
    else
    {
      v13 = 0;
    }
    v15 = *(const char ****)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v13;
    if (v15)
    {
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v15);
      v13 = *(_QWORD *)(a1 + 104);
    }
    if (v13)
    {
      v16 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 16) = v16 + 1;
      if (!v16)
        WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v13 + 8));
    }
    else
    {
      WTFLogAlways();
    }
  }
  WebCore::MediaPlayer::load(*(WebCore::MediaPlayer **)(a1 + 120), a2, a4, a5);
  WebKit::RemoteMediaPlayerProxy::getConfiguration(a1, (uint64_t)v20);
  v17 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  result = v20[0];
  v20[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteMediaPlayerProxy::loadMediaSource(uint64_t a1, const WTF::URL *a2, const WebCore::ContentType *a3, char a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  unsigned int *v18;
  WebKit::RemoteMediaSourceProxy *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::ThreadSafeWeakPtrControlBlock *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31[3];
  unsigned int *v32[3];
  _QWORD v33[2];

  v31[0] = 0;
  v31[2] = 0;
  v7 = *(_QWORD *)(a1 + 160);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v10 = *(unsigned __int8 **)(v8 + 24);
      if (v10)
      {
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v10, *(_QWORD *)(v8 + 32), v32);
        v18 = v32[0];
        v32[0] = 0;
        if (v18)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v18 + 2));
          v19 = *(WebKit::RemoteMediaSourceProxy **)(a1 + 744);
          if (v19)
            WebKit::RemoteMediaSourceProxy::shutdown(v19);
          v20 = WTF::fastMalloc((WTF *)0x60);
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8) + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8) + 32), &v30);
          v21 = v30;
          v22 = WTF::fastMalloc((WTF *)0x20);
          *(_BYTE *)v22 = 0;
          *(_OWORD *)(v22 + 8) = xmmword_1978CE9C0;
          *(_QWORD *)(v22 + 24) = v20;
          *(_QWORD *)(v20 + 16) = &unk_1E34BA610;
          *(_QWORD *)(v20 + 24) = 0;
          *(_QWORD *)v20 = off_1E34BA5B0;
          *(_QWORD *)(v20 + 8) = v22;
          v23 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v21 + 16);
          if (v23)
            v23 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v23);
          *(_QWORD *)(v20 + 32) = v23;
          *(_QWORD *)(v20 + 40) = v21;
          *(_QWORD *)(v20 + 48) = a5;
          *(_BYTE *)(v20 + 56) = a4;
          *(_QWORD *)(v20 + 64) = 0;
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
          v24 = *(unsigned int **)(a1 + 8);
          if (v24)
          {
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 + 1, v24));
          }
          *(_QWORD *)(v20 + 80) = 0;
          *(_QWORD *)(v20 + 88) = 0;
          *(_QWORD *)(v20 + 72) = v24;
          v26 = *(_QWORD *)(v20 + 48);
          v33[0] = 104;
          v33[1] = v26;
          WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v21 + 64), (unsigned __int8 *)v33, v20 + 16, v32);
          v28 = *(_QWORD *)(a1 + 744);
          *(_QWORD *)(a1 + 744) = v20;
          if (v28)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v28 + 8), v27);
          v29 = v30;
          v30 = 0;
          if (v29)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v29 + 16));
          WebCore::MediaPlayer::load(*(WebCore::MediaPlayer **)(a1 + 120), a2, a3, *(WebCore::MediaSourcePrivateClient **)(a1 + 744));
          WebKit::RemoteMediaPlayerProxy::getConfiguration(a1, (uint64_t)v31);
        }
      }
    }
  }
  v11 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v31[0];
  v31[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::prepareForPlayback(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, IntSize a9)
{
  uint64_t result;
  IntSize v14;

  v14 = a9;
  WebCore::MediaPlayer::setPrivateBrowsingMode(*(WebCore::MediaPlayer **)(a1 + 120));
  WebCore::MediaPlayer::setPreload();
  WebCore::MediaPlayer::setPreservesPitch(*(WebCore::MediaPlayer **)(a1 + 120));
  WebCore::MediaPlayer::setPitchCorrectionAlgorithm();
  WebCore::MediaPlayer::setPreferredDynamicRangeMode();
  result = WebCore::MediaPlayer::setPresentationSize(*(WebCore::MediaPlayer **)(a1 + 120), &v14);
  if (a7)
    result = WebCore::MediaPlayer::prepareToPlay(*(WebCore::MediaPlayer **)(a1 + 120));
  if (a8)
    result = WebCore::MediaPlayer::prepareForRendering(*(WebCore::MediaPlayer **)(a1 + 120));
  *(float *)(a1 + 772) = a2;
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::prepareToPlay(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v2 = *((_QWORD *)this + 108);
  v3 = *((_QWORD *)this + 90);
  v5[0] = "RemoteMediaPlayerProxy";
  v5[1] = 23;
  v5[2] = "prepareToPlay";
  v5[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5);
  return WebCore::MediaPlayer::prepareToPlay(*((WebCore::MediaPlayer **)this + 15));
}

WTF *WebKit::RemoteMediaPlayerProxy::play(WebCore::MediaPlayer **this)
{
  if (WebCore::MediaPlayer::movieLoadType(this[15]) != 3)
    WebKit::RemoteMediaPlayerProxy::startUpdateCachedStateMessageTimer((WebKit::RemoteMediaPlayerProxy *)this);
  WebCore::MediaPlayer::play(this[15]);
  return WebKit::RemoteMediaPlayerProxy::sendCachedState((WebKit::RemoteMediaPlayerProxy *)this);
}

uint64_t WebKit::RemoteMediaPlayerProxy::startUpdateCachedStateMessageTimer(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t result;

  result = WTF::RunLoop::TimerBase::isActive((WebKit::RemoteMediaPlayerProxy *)((char *)this + 192));
  if ((result & 1) == 0)
    return WTF::RunLoop::TimerBase::start();
  return result;
}

WTF *WebKit::RemoteMediaPlayerProxy::sendCachedState(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2;
  WTF *result;
  void *v4;
  _QWORD *v5;

  WebKit::RemoteMediaPlayerProxy::updateCachedState(this, 0);
  v2 = *((_QWORD *)this + 14);
  v5 = (_QWORD *)((char *)this + 224);
  result = (WTF *)IPC::Connection::send<Messages::MediaPlayerPrivateRemote::UpdateCachedState>(v2, &v5, *((_QWORD *)this + 11), 0, 0);
  if (*((_BYTE *)this + 336))
  {
    result = (WTF *)*((_QWORD *)this + 40);
    if (result)
    {
      *((_QWORD *)this + 40) = 0;
      *((_DWORD *)this + 82) = 0;
      result = (WTF *)WTF::fastFree(result, v4);
    }
    *((_BYTE *)this + 336) = 0;
  }
  return result;
}

WTF *WebKit::RemoteMediaPlayerProxy::pause(WebCore::MediaPlayer **this)
{
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(this + 24));
  WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics((WebKit::RemoteMediaPlayerProxy *)this);
  WebCore::MediaPlayer::pause(this[15]);
  return WebKit::RemoteMediaPlayerProxy::sendCachedState((WebKit::RemoteMediaPlayerProxy *)this);
}

uint64_t WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics(WebKit::RemoteMediaPlayerProxy *this)
{
  WebKit::RemoteMediaPlayerProxy *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  double v5;
  WTF::RunLoop *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WTF::NativePromiseBase *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  NSObject *v27;
  WTF *v28;
  void *v29;
  char *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t i;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  _BYTE *v66;
  int v67;
  WTF *v68;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76[2];
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  unsigned __int8 *v85;
  __int128 buf;
  const char *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  _DWORD v92[8];
  _DWORD v93[4];
  uint64_t v94;
  int v95;
  _QWORD v96[3];

  v1 = this;
  v96[1] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 108);
  v3 = *((_QWORD *)this + 90);
  *(_QWORD *)&buf = "RemoteMediaPlayerProxy";
  *((_QWORD *)&buf + 1) = 23;
  v87 = "updateCachedVideoMetrics";
  v88 = v3;
  if (*(_BYTE *)(v2 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  result = WTF::MonotonicTime::now(this);
  *((double *)v1 + 95) = *((double *)v1 + 94) + v5;
  if (!*((_BYTE *)v1 + 768))
  {
    *((_BYTE *)v1 + 768) = 1;
    v6 = (WTF::RunLoop *)WebCore::MediaPlayer::asyncVideoPlaybackQualityMetrics(*((WebCore::MediaPlayer **)v1 + 15));
    v7 = WTF::RunLoop::current(v6);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v1 + 2, (uint64_t)v1);
    v8 = (unsigned int *)*((_QWORD *)v1 + 1);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    v10 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v11 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v11 = &off_1E34BA690;
    *((_QWORD *)v11 + 1) = v8;
    *((_QWORD *)v11 + 2) = v1;
    *(_DWORD *)(v10 + 8) = 1;
    *(_QWORD *)(v10 + 16) = v7;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = "updateCachedVideoMetrics";
    *(_QWORD *)(v10 + 48) = 0;
    *(_WORD *)(v10 + 56) = 0;
    *(_QWORD *)v10 = off_1E34BA6B8;
    v12 = (unsigned int *)(v71 + 8);
    *(_QWORD *)(v10 + 64) = 0;
    *(_QWORD *)(v10 + 72) = v11;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v72 = 0uLL;
    v73 = "updateCachedVideoMetrics";
    v74 = 0;
    v75 = v10;
    v14 = (unsigned __int8 *)(v71 + 48);
    if (__ldaxr((unsigned __int8 *)(v71 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v14))
    {
LABEL_12:
      *(_BYTE *)(v71 + 144) = 1;
      v16 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v11);
      if (*v16)
      {
        v17 = v16;
        if (v16[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v72);
          WTF::String::String((WTF::String *)&v83, " invoking maybeSettle() [");
          WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v82, v71);
          WTF::String::String((WTF::String *)&v81, " callback:");
          WTF::LogArgument<void const*>::toString();
          WTF::String::String((WTF::String *)&v79, " isNothing:");
          WTF::LogArgument<BOOL>::toString<BOOL>(&v78);
          WTF::String::String((WTF::String *)&v77, "]");
          result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v84, (uint64_t *)&v83, (uint64_t *)&v82, (uint64_t *)&v81, (uint64_t *)&v80, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, &v85);
          if (!v85)
          {
            __break(0xC471u);
            return result;
          }
          v19 = v77;
          v77 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v18);
            else
              *(_DWORD *)v19 -= 2;
          }
          v20 = v78;
          v78 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v18);
            else
              *(_DWORD *)v20 -= 2;
          }
          v21 = v79;
          v79 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v18);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = v80;
          v80 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v18);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = v81;
          v81 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v18);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = v82;
          v82 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v18);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = v83;
          v83 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v18);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = v84;
          v84 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v18);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = *((_QWORD *)v17 + 4);
          v28 = (WTF *)os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v28)
          {
            WTF::String::utf8();
            v30 = v76[0] ? (char *)v76[0] + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v30;
            _os_log_impl(&dword_196BCC000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v28 = v76[0];
            v76[0] = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 1)
                v28 = (WTF *)WTF::fastFree(v28, v29);
              else
                --*(_DWORD *)v28;
            }
          }
          if (*v17 && v17[16] >= 4u)
          {
            v31 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v32 = *v31;
              if ((v32 & 1) != 0)
                break;
              v33 = __ldaxr(v31);
              if (v33 == v32)
              {
                if (!__stxr(v32 | 1, v31))
                {
                  v34 = WTF::Logger::observers(v28);
                  v35 = *(unsigned int *)(v34 + 12);
                  if ((_DWORD)v35)
                  {
                    v36 = *(uint64_t **)v34;
                    v70 = *(_QWORD *)v34 + 8 * v35;
                    do
                    {
                      v37 = *v36;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v72);
                      LODWORD(v87) = 0;
                      WTF::String::String((WTF::String *)&v88, " invoking maybeSettle() [");
                      v89 = 0;
                      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v90, v71);
                      v91 = 0;
                      WTF::String::String((WTF::String *)v92, " callback:");
                      v92[2] = 0;
                      WTF::LogArgument<void const*>::toString();
                      v92[6] = 0;
                      WTF::String::String((WTF::String *)v93, " isNothing:");
                      v93[2] = 0;
                      WTF::LogArgument<BOOL>::toString<BOOL>(&v94);
                      v95 = 0;
                      WTF::String::String((WTF::String *)v96, "]");
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v76, (uint64_t)&buf, 8uLL);
                      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v37 + 16))(v37, v17, 4, v76);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v76, v38);
                      for (i = 120; i != -8; i -= 16)
                      {
                        v40 = *(WTF::StringImpl **)((char *)&buf + i);
                        *(_QWORD *)((char *)&buf + i) = 0;
                        if (v40)
                        {
                          if (*(_DWORD *)v40 == 2)
                            WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v29);
                          else
                            *(_DWORD *)v40 -= 2;
                        }
                      }
                      ++v36;
                    }
                    while (v36 != (uint64_t *)v70);
                  }
                  v41 = __ldxr(v31);
                  if (v41 == 1)
                  {
                    v14 = (unsigned __int8 *)(v71 + 48);
                    if (!__stlxr(0, v31))
                      break;
                  }
                  else
                  {
                    __clrex();
                    v14 = (unsigned __int8 *)(v71 + 48);
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v16 = v85;
          v85 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              v16 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v16, (WTF::StringImpl *)v29);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
      }
      if (!*(_DWORD *)(v71 + 96))
      {
        v50 = *(unsigned int *)(v71 + 116);
        if ((_DWORD)v50 == *(_DWORD *)(v71 + 112))
        {
          v51 = (uint64_t *)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v71 + 104, v50 + 1, (unint64_t)&v75);
          v50 = *(unsigned int *)(v71 + 116);
          v52 = v50 + 1;
          v53 = *(_QWORD *)(v71 + 104);
          v54 = *v51;
          *v51 = 0;
        }
        else
        {
          v52 = v50 + 1;
          v53 = *(_QWORD *)(v71 + 104);
          v54 = v75;
          v75 = 0;
        }
        *(_QWORD *)(v53 + 8 * v50) = v54;
        *(_DWORD *)(v71 + 116) = v52;
        goto LABEL_94;
      }
      v42 = v75;
      if (*(_QWORD *)(v75 + 16))
      {
        v43 = atomic_load((unsigned __int8 *)(v71 + 145));
        if (v43 != 1
          || (v16 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v75 + 16) + 24))(*(_QWORD *)(v75 + 16)),
              !(_DWORD)v16))
        {
          v44 = *(_QWORD *)(v42 + 16);
          v45 = (unsigned int *)(v42 + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 + 1, v45));
          do
            v47 = __ldaxr(v12);
          while (__stlxr(v47 + 1, v12));
          v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *v48 = &off_1E34BA9F8;
          v48[1] = v42;
          v48[2] = v42;
          v48[3] = v71;
          *(_QWORD *)&buf = v48;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v44 + 16))(v44, &buf);
          v49 = buf;
          *(_QWORD *)&buf = 0;
          if (v49)
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
          goto LABEL_94;
        }
      }
      if (*(_BYTE *)(v42 + 56))
      {
        *(_QWORD *)&buf = v42;
        v66 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v16);
        if (*v66 && v66[16] >= 4u)
          WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)v66, v71, (uint64_t)&buf, (WTF::Logger::LogSiteIdentifier *)(v42 + 24));
        goto LABEL_94;
      }
      v67 = __ldxr(v14);
      if (v67 == 1)
      {
        if (!__stlxr(0, v14))
          goto LABEL_124;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_124:
      if (WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::hasRunnable(v71))
      {
        WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResultRunnable((uint64_t)v76, v71);
        v68 = v76[0];
        (*(void (**)(__int128 *__return_ptr, WTF *))(*(_QWORD *)v76[0] + 16))(&buf, v76[0]);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v42 + 24))(v42, v71, &buf);
        (*(void (**)(WTF *))(*(_QWORD *)v68 + 8))(v68);
      }
      else
      {
        WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResult((WTF::StringImpl *)&buf, v71);
        (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v42 + 24))(v42, v71, &buf);
      }
      if (__ldaxr(v14))
      {
        __clrex();
      }
      else if (!__stxr(1u, v14))
      {
        goto LABEL_94;
      }
      MEMORY[0x19AEABB3C](v14);
LABEL_94:
      v55 = __ldxr(v14);
      if (v55 == 1)
      {
        if (!__stlxr(0, v14))
        {
LABEL_99:
          v56 = (unsigned int *)v75;
          v75 = 0;
          if (v56)
          {
            v57 = v56 + 2;
            do
            {
              v58 = __ldaxr(v57);
              v59 = v58 - 1;
            }
            while (__stlxr(v59, v57));
            if (!v59)
            {
              atomic_store(1u, v56 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 8))(v56);
            }
          }
          if (v71)
          {
            v60 = (unsigned int *)(v71 + 8);
            do
            {
              v61 = __ldaxr(v60);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v60));
            if (!v62)
            {
              atomic_store(1u, (unsigned int *)(v71 + 8));
              (*(void (**)())(*(_QWORD *)v71 + 16))();
            }
          }
          result = v71;
          if (v71)
          {
            v63 = (unsigned int *)(v71 + 8);
            do
            {
              v64 = __ldaxr(v63);
              v65 = v64 - 1;
            }
            while (__stlxr(v65, v63));
            if (!v65)
            {
              atomic_store(1u, (unsigned int *)(v71 + 8));
              return (*(uint64_t (**)())(*(_QWORD *)v71 + 16))();
            }
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
      goto LABEL_99;
    }
    v11 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C](v71 + 48);
    goto LABEL_12;
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::seekToTarget(WebKit::RemoteMediaPlayerProxy *this, const WebCore::SeekTarget *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v2 = *((_QWORD *)this + 108);
  v3 = *((_QWORD *)this + 90);
  v5[0] = "RemoteMediaPlayerProxy";
  v5[1] = 23;
  v5[2] = "seekToTarget";
  v5[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::SeekTarget>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5, a2);
  return WebCore::MediaPlayer::seekToTarget();
}

uint64_t WebKit::RemoteMediaPlayerProxy::prepareForRendering(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v2 = *((_QWORD *)this + 108);
  v3 = *((_QWORD *)this + 90);
  v5[0] = "RemoteMediaPlayerProxy";
  v5[1] = 23;
  v5[2] = "prepareForRendering";
  v5[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5);
  return WebCore::MediaPlayer::prepareForRendering(*((WebCore::MediaPlayer **)this + 15));
}

uint64_t WebKit::RemoteMediaPlayerProxy::setPageIsVisible(WebKit::RemoteMediaPlayerProxy *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  char v7;

  v7 = a2;
  v3 = *((_QWORD *)this + 108);
  v4 = *((_QWORD *)this + 90);
  v6[0] = "RemoteMediaPlayerProxy";
  v6[1] = 23;
  v6[2] = "setPageIsVisible";
  v6[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  return WebCore::MediaPlayer::setPageIsVisible(*((WebCore::MediaPlayer **)this + 15));
}

uint64_t WebKit::RemoteMediaPlayerProxy::acceleratedRenderingStateChanged(WebKit::RemoteMediaPlayerProxy *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  char v7;

  v7 = a2;
  v3 = *((_QWORD *)this + 108);
  v4 = *((_QWORD *)this + 90);
  v6[0] = "RemoteMediaPlayerProxy";
  v6[1] = 23;
  v6[2] = "acceleratedRenderingStateChanged";
  v6[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
    a2 = v7;
  }
  *((_BYTE *)this + 793) = a2;
  return WebCore::MediaPlayer::acceleratedRenderingStateChanged(*((WebCore::MediaPlayer **)this + 15));
}

uint64_t WebKit::RemoteMediaPlayerProxy::didLoadingProgress()
{
  return WebCore::MediaPlayer::didLoadingProgress();
}

uint64_t WebKit::RemoteMediaPlayerProxy::setPresentationSize(uint64_t this, const IntSize *a2)
{
  if (a2->m_width != *(_DWORD *)(this + 704) || a2->m_height != *(_DWORD *)(this + 708))
  {
    *(IntSize *)(this + 704) = *a2;
    return WebCore::MediaPlayer::setPresentationSize(*(WebCore::MediaPlayer **)(this + 120), a2);
  }
  return this;
}

WTF::StringImpl *WebKit::RemoteMediaPlayerProxy::accessLog(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WebCore::MediaPlayer::accessLog(*(WebCore::MediaPlayer **)(a1 + 120));
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a2, &v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::String)>::operator()(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v7 = v3;
  v8 = v2;
  WTF::Function<void ()(WTF::String)>::operator()(&v8, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebKit::RemoteMediaPlayerProxy::errorLog(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WebCore::MediaPlayer::errorLog(*(WebCore::MediaPlayer **)(a1 + 120));
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a2, &v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerNetworkStateChanged(WebCore::MediaPlayer **this)
{
  _QWORD *v2;
  uint64_t v3;
  WebCore::MediaPlayer *v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  WebKit::RemoteMediaPlayerProxy::updateCachedState((WebKit::RemoteMediaPlayerProxy *)this, 1);
  v2 = this + 28;
  *((_BYTE *)this + 344) = WebCore::MediaPlayer::networkState(this[15]);
  v3 = (uint64_t)this[14];
  v4 = this[11];
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 153;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode((IPC::Encoder *)v5, v2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::updateCachedState(WebKit::RemoteMediaPlayerProxy *this, int a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v8;
  _QWORD v9[2];

  if (*((_BYTE *)this + 833))
    v3 = a2 == 0;
  else
    v3 = 0;
  if (!v3)
  {
    v9[0] = WebCore::MediaPlayer::currentTime(*((WebCore::MediaPlayer **)this + 15));
    v9[1] = v4;
    WebKit::RemoteMediaPlayerProxy::currentTimeChanged(this, (const WTF::MediaTime *)v9);
  }
  *((_BYTE *)this + 442) = WebCore::MediaPlayer::paused(*((WebCore::MediaPlayer **)this + 15));
  result = WebKit::RemoteMediaPlayerProxy::maybeUpdateCachedVideoMetrics((uint64_t)this);
  if (*((_BYTE *)this + 792))
  {
    *((_BYTE *)this + 792) = 0;
    v6 = *((unsigned __int8 *)this + 168);
    if (v6 != 1 && v6 != 8)
    {
      v8 = WebCore::MediaPlayer::buffered(*((WebCore::MediaPlayer **)this + 15));
      return std::optional<WebCore::PlatformTimeRanges>::operator=[abi:sn180100]<WebCore::PlatformTimeRanges const&,void>((uint64_t)this + 320, v8);
    }
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerReadyStateChanged(WebCore::MediaPlayer **this)
{
  char *v2;
  WebCore::MediaPlayer *v3;
  WebCore::SecurityOrigin *v4;
  _QWORD *v5;
  int v6;
  char v7;
  int v8;
  char v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  int v16;
  int v17;
  WebCore::MediaPlayer *v18;
  WebCore::MediaPlayer *v19;
  WebCore::MediaPlayer *v20;
  WebCore::MediaPlayer *v21;
  WebCore::MediaPlayer *v22;
  WTF::StringImpl *v23;
  WebCore::SecurityOrigin *v24;
  uint64_t v25;
  char v26;
  WebCore::MediaPlayer *v27;
  uint64_t v28;
  void *v29;
  IPC::Encoder *result;
  WTF *v31;
  void *v32;
  WebCore::SecurityOrigin *v33[4];
  char ready;

  v2 = (char *)(this + 33);
  ready = WebCore::MediaPlayer::readyState(this[15]);
  v3 = this[108];
  v4 = this[90];
  v33[0] = (WebCore::SecurityOrigin *)"RemoteMediaPlayerProxy";
  v33[1] = (WebCore::SecurityOrigin *)23;
  v33[2] = (WebCore::SecurityOrigin *)"mediaPlayerReadyStateChanged";
  v33[3] = v4;
  if (*((_BYTE *)v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerReadyState>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v33);
  WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics((WebKit::RemoteMediaPlayerProxy *)this);
  WebKit::RemoteMediaPlayerProxy::updateCachedState((WebKit::RemoteMediaPlayerProxy *)this, 1);
  *((_BYTE *)this + 344) = WebCore::MediaPlayer::networkState(this[15]);
  this[28] = (WebCore::MediaPlayer *)WebCore::MediaPlayer::duration(this[15]);
  v5 = this + 28;
  *((_DWORD *)this + 58) = v6;
  *((_BYTE *)this + 236) = v7;
  *((_BYTE *)this + 345) = WebCore::MediaPlayer::movieLoadType(this[15]);
  this[30] = (WebCore::MediaPlayer *)WebCore::MediaPlayer::minTimeSeekable(this[15]);
  *((_DWORD *)this + 62) = v8;
  *((_BYTE *)this + 252) = v9;
  this[32] = (WebCore::MediaPlayer *)WebCore::MediaPlayer::maxTimeSeekable(this[15]);
  *(_DWORD *)v2 = v10;
  v2[4] = v11;
  this[34] = (WebCore::MediaPlayer *)WebCore::MediaPlayer::getStartDate(this[15]);
  *((_DWORD *)v2 + 4) = v12;
  v2[20] = v13;
  this[36] = (WebCore::MediaPlayer *)WebCore::MediaPlayer::startTime(this[15]);
  *((_DWORD *)v2 + 8) = v14;
  v2[36] = v15;
  WebCore::MediaPlayer::naturalSize(this[15]);
  *((_DWORD *)this + 87) = v16;
  *((_DWORD *)this + 88) = v17;
  WebCore::MediaPlayer::maxFastForwardRate(this[15]);
  this[45] = v18;
  WebCore::MediaPlayer::minFastReverseRate(this[15]);
  this[46] = v19;
  WebCore::MediaPlayer::seekableTimeRangesLastModifiedTime(this[15]);
  this[47] = v20;
  WebCore::MediaPlayer::liveUpdateInterval(this[15]);
  this[48] = v21;
  *((_BYTE *)this + 447) = WebCore::MediaPlayer::hasAvailableVideoFrame(this[15]);
  *((_BYTE *)this + 448) = WebCore::MediaPlayer::wirelessVideoPlaybackDisabled(this[15]);
  *((_BYTE *)this + 443) = WebCore::MediaPlayer::canSaveMediaData(this[15]);
  *((_BYTE *)this + 449) = WebCore::MediaPlayer::didPassCORSAccessCheck(this[15]);
  v22 = this[15];
  WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)(this + 84));
  *((_WORD *)this + 220) = WebCore::MediaPlayer::isCrossOrigin(v22, v33[0]) | 0x100;
  v24 = v33[0];
  v33[0] = 0;
  if (v24)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v24, v23);
  v25 = (uint64_t)this[14];
  v26 = ready;
  v27 = this[11];
  v28 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v28 = 160;
  *(_QWORD *)(v28 + 8) = v27;
  *(_QWORD *)(v28 + 528) = v28 + 16;
  *(_QWORD *)(v28 + 536) = v28 + 16;
  *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v28 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
  v33[0] = (WebCore::SecurityOrigin *)v28;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode((IPC::Encoder *)v28, v5);
  *IPC::Encoder::grow((IPC::Encoder *)v28, 1uLL, 1) = v26;
  IPC::Connection::sendMessageImpl(v25, (uint64_t *)v33, 0, 0);
  result = v33[0];
  v33[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v29);
    return (IPC::Encoder *)WTF::fastFree(v31, v32);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerVolumeChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v2 = *((_QWORD *)this + 14);
  WebCore::MediaPlayer::volume(*((WebCore::MediaPlayer **)this + 15));
  v4 = v3;
  v5 = *((_QWORD *)this + 11);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 181;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerMuteChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v2 = *((_QWORD *)this + 14);
  v3 = WebCore::MediaPlayer::muted(*((WebCore::MediaPlayer **)this + 15));
  v4 = *((_QWORD *)this + 11);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 152;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = v3;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerSeeked(WebKit::RemoteMediaPlayerProxy *this, const WTF::MediaTime *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::MediaPlayer *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::MonotonicTime *IsProgressing;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  IPC::Encoder *v21;

  v4 = *((_QWORD *)this + 108);
  v5 = *((_QWORD *)this + 90);
  v17 = "RemoteMediaPlayerProxy";
  v18 = 23;
  v19 = "mediaPlayerSeeked";
  v20 = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v17, a2);
  v7 = *((_QWORD *)this + 14);
  v6 = (WebCore::MediaPlayer *)*((_QWORD *)this + 15);
  v8 = *((_QWORD *)a2 + 1);
  v17 = *(const char **)a2;
  LODWORD(v18) = v8;
  BYTE4(v18) = BYTE4(v8);
  IsProgressing = (WTF::MonotonicTime *)WebCore::MediaPlayer::timeIsProgressing(v6);
  LOBYTE(v19) = (_BYTE)IsProgressing;
  WTF::MonotonicTime::now(IsProgressing);
  v20 = v10;
  v11 = *((_QWORD *)this + 11);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 173;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v21 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::encode((IPC::Encoder *)v12, (uint64_t)&v17);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v21, 0, 0);
  result = v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerTimeChanged(WebCore::MediaPlayer **this)
{
  _QWORD *v2;
  int v3;
  char v4;
  uint64_t v5;
  WebCore::MediaPlayer *v6;
  int v7;
  char v8;
  WTF::MonotonicTime *IsProgressing;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *result;
  WTF *v15;
  void *v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  IPC::Encoder *v22;

  WebKit::RemoteMediaPlayerProxy::updateCachedState((WebKit::RemoteMediaPlayerProxy *)this, 1);
  this[28] = (WebCore::MediaPlayer *)WebCore::MediaPlayer::duration(this[15]);
  v2 = this + 28;
  *((_DWORD *)this + 58) = v3;
  *((_BYTE *)this + 236) = v4;
  v5 = (uint64_t)this[14];
  v6 = this[15];
  v17 = WebCore::MediaPlayer::currentTime(v6);
  v18 = v7;
  v19 = v8;
  IsProgressing = (WTF::MonotonicTime *)WebCore::MediaPlayer::timeIsProgressing(v6);
  v20 = (char)IsProgressing;
  WTF::MonotonicTime::now(IsProgressing);
  v21 = v10;
  v11 = *(v2 - 17);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 176;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v22 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode((IPC::Encoder *)v12, v2);
  IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::encode((IPC::Encoder *)v12, (uint64_t)&v17);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v22, 0, 0);
  result = v22;
  v22 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerDurationChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  WebKit::RemoteMediaPlayerProxy *v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v1 = this;
  WebKit::RemoteMediaPlayerProxy::updateCachedState(this, 1);
  *((_QWORD *)v1 + 28) = WebCore::MediaPlayer::duration(*((WebCore::MediaPlayer **)v1 + 15));
  v1 = (WebKit::RemoteMediaPlayerProxy *)((char *)v1 + 224);
  *((_DWORD *)v1 + 2) = v2;
  *((_BYTE *)v1 + 12) = v3;
  v4 = *((_QWORD *)v1 - 14);
  v5 = *((_QWORD *)v1 - 17);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 145;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode((IPC::Encoder *)v6, v1);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerRateChanged(WebCore::MediaPlayer **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::MediaPlayer *v5;
  int v6;
  char v7;
  WTF::MonotonicTime *IsProgressing;
  uint64_t v9;
  WebCore::MediaPlayer *v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  uint64_t v20;
  IPC::Encoder *v21;

  WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics((WebKit::RemoteMediaPlayerProxy *)this);
  WebKit::RemoteMediaPlayerProxy::sendCachedState((WebKit::RemoteMediaPlayerProxy *)this);
  v2 = (uint64_t)this[14];
  WebCore::MediaPlayer::effectiveRate(this[15]);
  v4 = v3;
  v5 = this[15];
  v16 = WebCore::MediaPlayer::currentTime(v5);
  v17 = v6;
  v18 = v7;
  IsProgressing = (WTF::MonotonicTime *)WebCore::MediaPlayer::timeIsProgressing(v5);
  v19 = (char)IsProgressing;
  WTF::MonotonicTime::now(IsProgressing);
  v20 = v9;
  v10 = this[11];
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 159;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v21 = (IPC::Encoder *)v11;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v11, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::encode((IPC::Encoder *)v11, (uint64_t)&v16);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v21, 0, 0);
  result = v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

char *WebKit::RemoteMediaPlayerProxy::mediaPlayerEngineFailedToLoad(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v2 = *((_QWORD *)this + 14);
  v3 = WebCore::MediaPlayer::platformErrorCode(*((WebCore::MediaPlayer **)this + 15));
  v4 = *((_QWORD *)this + 11);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 146;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  v9 = *(_QWORD *)(v5 + 552);
  if (v9 < v7 + 8)
  {
    v16 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v8);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v10;
    *(_QWORD *)(v5 + 552) = v17;
    v6 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v10 = *(char **)(v5 + 528);
  }
  bzero(&v10[v6], v7 - v6);
  *(_QWORD *)(v5 + 544) = v8;
  v11 = (uint64_t *)(*(_QWORD *)(v5 + 528) + v7);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = v3;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaPlayerProxy::mediaPlayerMediaKeysStorageDirectory@<X0>(unsigned __int8 *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  _DWORD *v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  _DWORD *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  v3 = *((_QWORD *)this + 20);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = this, (this = *(unsigned __int8 **)(v4 + 24)) != 0)
    && (this = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(this, *(_QWORD *)(v4 + 32), &v12), v7 = v12, v12 = 0, v7))
  {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v7 + 2));
    v8 = (_QWORD *)*((_QWORD *)v5 + 20);
    if (v8)
      v8 = (_QWORD *)v8[1];
    v9 = (unsigned __int8 *)v8[3];
    if (v9)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v9, v8[4], &v12);
      v9 = v12;
    }
    else
    {
      v12 = 0;
    }
    this = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::mediaKeysStorageDirectory((WebKit::GPUConnectionToWebProcess *)v9);
    v10 = *(_DWORD **)this;
    if (*(_QWORD *)this)
      *v10 += 2;
    *a2 = v10;
    v11 = v12;
    v12 = 0;
    if (v11)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v11 + 2));
  }
  else
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v6 += 2;
    *a2 = v6;
  }
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerReferrer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 456);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerUserAgent@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 464);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerSourceApplicationIdentifier@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 472);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerNetworkInterfaceName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 480);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerGetRawCookies(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t v15[2];
  IPC::Encoder *v16;

  v4 = *(os_unfair_lock_s **)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *a3;
  *a3 = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E34BA978;
  v7[1] = v6;
  v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 148;
  *(_QWORD *)(v9 + 8) = v5;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  v15[0] = (uint64_t)v7;
  v15[1] = v8;
  IPC::Connection::sendMessageWithAsyncReply(v4, &v16, v15, 0, 0);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t *WebKit::RemoteMediaPlayerProxy::mediaPlayerMediaCacheDirectory(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t *v5;
  unsigned __int8 *v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v1 = *((_QWORD *)this + 20);
  if (!v1)
    return (uint64_t *)MEMORY[0x1E0CBF738];
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return (uint64_t *)MEMORY[0x1E0CBF738];
  v4 = *(unsigned __int8 **)(v2 + 24);
  if (!v4)
    return (uint64_t *)MEMORY[0x1E0CBF738];
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v4, *(_QWORD *)(v2 + 32), &v11);
  v7 = v11;
  v11 = 0;
  if (!v7)
    return (uint64_t *)MEMORY[0x1E0CBF738];
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v7 + 2));
  v8 = (_QWORD *)*((_QWORD *)this + 20);
  if (v8)
    v8 = (_QWORD *)v8[1];
  v9 = (unsigned __int8 *)v8[3];
  if (v9)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v9, v8[4], &v11);
    v9 = v11;
  }
  else
  {
    v11 = 0;
  }
  v5 = WebKit::GPUConnectionToWebProcess::mediaCacheDirectory((WebKit::GPUConnectionToWebProcess *)v9);
  v10 = v11;
  v11 = 0;
  if (v10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v10 + 2));
  return v5;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerContentBoxRect(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((_QWORD *)this + 97);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaContentTypesRequiringHardwareSupport(WebKit::RemoteMediaPlayerProxy *this)
{
  return (uint64_t)this + 176;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerPreferredAudioCharacteristics@<X0>(WebKit::RemoteMediaPlayerProxy *this@<X0>, uint64_t a2@<X8>)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, (uint64_t)this + 640);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerShouldUsePersistentCache(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 728);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerIsVideo(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 729);
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerPlaybackStateChanged(WebCore::MediaPlayer **this)
{
  char v2;
  uint64_t v3;
  WebCore::MediaPlayer *v4;
  int v5;
  char v6;
  WTF::MonotonicTime *IsProgressing;
  uint64_t v8;
  WebCore::MediaPlayer *v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  IPC::Encoder *v20;

  v2 = WebCore::MediaPlayer::paused(this[15]);
  *((_BYTE *)this + 442) = v2;
  v3 = (uint64_t)this[14];
  v4 = this[15];
  v15 = WebCore::MediaPlayer::currentTime(v4);
  v16 = v5;
  v17 = v6;
  IsProgressing = (WTF::MonotonicTime *)WebCore::MediaPlayer::timeIsProgressing(v4);
  v18 = (char)IsProgressing;
  WTF::MonotonicTime::now(IsProgressing);
  v19 = v8;
  v9 = this[11];
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 157;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v20 = (IPC::Encoder *)v10;
  *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = v2;
  IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::encode((IPC::Encoder *)v10, (uint64_t)&v15);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v20, 0, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerBufferedTimeRangesChanged(uint64_t this)
{
  *(_BYTE *)(this + 792) = 1;
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerSeekableTimeRangesChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  int v2;
  char v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  *((_QWORD *)this + 30) = WebCore::MediaPlayer::minTimeSeekable(*((WebCore::MediaPlayer **)this + 15));
  *((_DWORD *)this + 62) = v2;
  *((_BYTE *)this + 252) = v3;
  *((_QWORD *)this + 32) = WebCore::MediaPlayer::maxTimeSeekable(*((WebCore::MediaPlayer **)this + 15));
  *((_DWORD *)this + 66) = v4;
  *((_BYTE *)this + 268) = v5;
  WebCore::MediaPlayer::seekableTimeRangesLastModifiedTime(*((WebCore::MediaPlayer **)this + 15));
  *((_QWORD *)this + 47) = v6;
  WebCore::MediaPlayer::liveUpdateInterval(*((WebCore::MediaPlayer **)this + 15));
  *((_QWORD *)this + 48) = v7;
  result = WTF::RunLoop::TimerBase::isActive((WebKit::RemoteMediaPlayerProxy *)((char *)this + 192));
  if ((result & 1) == 0)
    return (uint64_t)WebKit::RemoteMediaPlayerProxy::sendCachedState(this);
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerCharacteristicChanged(WebCore::MediaPlayer **this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  uint64_t v8;
  WebCore::MediaPlayer *v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  WTF::StringImpl *v15;

  WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics((WebKit::RemoteMediaPlayerProxy *)this);
  WebKit::RemoteMediaPlayerProxy::updateCachedState((WebKit::RemoteMediaPlayerProxy *)this, 0);
  *((_BYTE *)this + 444) = WebCore::MediaPlayer::hasAudio(this[15]);
  *((_BYTE *)this + 445) = WebCore::MediaPlayer::hasVideo(this[15]);
  *((_BYTE *)this + 446) = WebCore::MediaPlayer::hasClosedCaptions(this[15]);
  WebCore::MediaPlayer::languageOfPrimaryAudioTrack(this[15]);
  v3 = v15;
  v15 = 0;
  v4 = this[38];
  this[38] = v3;
  if (!v4)
    goto LABEL_6;
  v5 = *(_DWORD *)v4 - 2;
  if (*(_DWORD *)v4 != 2)
    goto LABEL_5;
  WTF::StringImpl::destroy(v4, v2);
  v4 = v15;
  v15 = 0;
  if (!v4)
    goto LABEL_6;
  v5 = *(_DWORD *)v4 - 2;
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v6);
  else
LABEL_5:
    *(_DWORD *)v4 = v5;
LABEL_6:
  v7 = this + 28;
  v8 = (uint64_t)this[14];
  v9 = this[11];
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 141;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v15 = (WTF::StringImpl *)v10;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode((IPC::Encoder *)v10, v7);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v15, 0, 0);
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerRenderingCanBeAccelerated(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 793);
}

unsigned __int8 *WebKit::RemoteMediaPlayerProxy::addRemoteAudioTrackProxy(unsigned __int8 *this, WebCore::AudioTrackPrivate *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;

  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = this;
      this = *(unsigned __int8 **)(v3 + 24);
      if (this)
      {
        this = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(this, *(_QWORD *)(v3 + 32), &v32);
        v6 = v32;
        v32 = 0;
        if (v6)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v6 + 2));
          (*(void (**)(WebCore::AudioTrackPrivate *, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, *((_QWORD *)v4 + 108), *((_QWORD *)v4 + 90));
          v7 = (unsigned __int8 **)*((_QWORD *)v4 + 5);
          v8 = *((unsigned int *)v4 + 13);
          if ((_DWORD)v8)
          {
            v9 = 8 * v8;
            while (1)
            {
              v10 = *((_QWORD *)*v7 + 5);
              if (WebCore::TrackPrivateBase::operator==())
              {
                if (WebCore::operator==((uint64_t)a2 + 56, v10 + 56, v11))
                {
                  v12 = (*(uint64_t (**)(WebCore::AudioTrackPrivate *))(*(_QWORD *)a2 + 128))(a2);
                  this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 128))(v10);
                  if (v12 == (_DWORD)this)
                    break;
                }
              }
              v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*v7 + 5) + 48))(*((_QWORD *)*v7 + 5));
              if (v13 == (*(uint64_t (**)(WebCore::AudioTrackPrivate *))(*(_QWORD *)a2 + 48))(a2))
              {
                v25 = (_QWORD *)*((_QWORD *)v4 + 20);
                if (v25)
                  v25 = (_QWORD *)v25[1];
                v26 = (unsigned __int8 *)v25[3];
                if (v26)
                {
                  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v26, v25[4], &v32);
                  v27 = (uint64_t)v32;
                }
                else
                {
                  v27 = 0;
                  v32 = 0;
                }
                v28 = *((_QWORD *)v4 + 11);
                v29 = WTF::fastMalloc((WTF *)0x50);
                this = (unsigned __int8 *)WebKit::RemoteAudioTrackProxy::RemoteAudioTrackProxy(v29, v27, (unsigned int *)a2, v28);
                v30 = *v7;
                *v7 = this;
                if (v30)
                  this = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::RemoteAudioTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)v30 + 4);
                v24 = v32;
                v32 = 0;
                if (!v24)
                  return this;
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v24 + 2));
              }
              ++v7;
              v9 -= 8;
              if (!v9)
                goto LABEL_13;
            }
          }
          else
          {
LABEL_13:
            v14 = (_QWORD *)*((_QWORD *)v4 + 20);
            if (v14)
              v14 = (_QWORD *)v14[1];
            v15 = (unsigned __int8 *)v14[3];
            if (v15)
            {
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v15, v14[4], &v31);
              v16 = v31;
            }
            else
            {
              v16 = 0;
              v31 = 0;
            }
            v17 = *((_QWORD *)v4 + 11);
            v18 = WTF::fastMalloc((WTF *)0x50);
            this = (unsigned __int8 *)WebKit::RemoteAudioTrackProxy::RemoteAudioTrackProxy(v18, v16, (unsigned int *)a2, v17);
            v32 = this;
            v19 = *((unsigned int *)v4 + 13);
            if ((_DWORD)v19 == *((_DWORD *)v4 + 12))
            {
              this = (unsigned __int8 *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v4 + 40), v19 + 1, (unint64_t)&v32);
              v20 = *((unsigned int *)v4 + 13);
              v21 = *((_QWORD *)v4 + 5);
              v22 = *(_QWORD *)this;
              *(_QWORD *)this = 0;
              *(_QWORD *)(v21 + 8 * v20) = v22;
              v23 = v32;
              *((_DWORD *)v4 + 13) = v20 + 1;
              v32 = 0;
              if (v23)
                this = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::RemoteAudioTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)v23 + 4);
            }
            else
            {
              *(_QWORD *)(*((_QWORD *)v4 + 5) + 8 * v19) = this;
              *((_DWORD *)v4 + 13) = v19 + 1;
              v32 = 0;
            }
            v24 = (unsigned __int8 *)v31;
            v31 = 0;
            if (v24)
              return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v24 + 2));
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerLogger(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((_QWORD *)this + 108);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerLogIdentifier(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((_QWORD *)this + 90);
}

uint64_t WebKit::RemoteMediaPlayerProxy::audioTrackSetEnabled(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(this + 52);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(this + 40);
    v7 = 8 * v3;
    while (1)
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v6 + 40) + 48))(*(_QWORD *)(*v6 + 40));
      if (this == a2)
        break;
      ++v6;
      v7 -= 8;
      if (!v7)
        return this;
    }
    v8 = *v6;
    *(_BYTE *)(v8 + 64) = a3;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 40) + 120))(*(_QWORD *)(v8 + 40), a3);
  }
  return this;
}

unsigned __int8 *WebKit::RemoteMediaPlayerProxy::addRemoteVideoTrackProxy(unsigned __int8 *this, WebCore::VideoTrackPrivate *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;

  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = this;
      this = *(unsigned __int8 **)(v3 + 24);
      if (this)
      {
        this = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(this, *(_QWORD *)(v3 + 32), &v32);
        v6 = v32;
        v32 = 0;
        if (v6)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v6 + 2));
          (*(void (**)(WebCore::VideoTrackPrivate *, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, *((_QWORD *)v4 + 108), *((_QWORD *)v4 + 90));
          v7 = (unsigned __int8 **)*((_QWORD *)v4 + 7);
          v8 = *((unsigned int *)v4 + 17);
          if ((_DWORD)v8)
          {
            v9 = 8 * v8;
            while (1)
            {
              v10 = *((_QWORD *)*v7 + 5);
              if (WebCore::TrackPrivateBase::operator==())
              {
                if (WebCore::operator==((uint64_t)a2 + 56, v10 + 56, v11))
                {
                  v12 = (*(uint64_t (**)(WebCore::VideoTrackPrivate *))(*(_QWORD *)a2 + 136))(a2);
                  this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
                  if (v12 == (_DWORD)this)
                    break;
                }
              }
              v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*v7 + 5) + 48))(*((_QWORD *)*v7 + 5));
              if (v13 == (*(uint64_t (**)(WebCore::VideoTrackPrivate *))(*(_QWORD *)a2 + 48))(a2))
              {
                v25 = (_QWORD *)*((_QWORD *)v4 + 20);
                if (v25)
                  v25 = (_QWORD *)v25[1];
                v26 = (unsigned __int8 *)v25[3];
                if (v26)
                {
                  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v26, v25[4], &v32);
                  v27 = (uint64_t)v32;
                }
                else
                {
                  v27 = 0;
                  v32 = 0;
                }
                v28 = *((_QWORD *)v4 + 11);
                v29 = WTF::fastMalloc((WTF *)0x50);
                this = (unsigned __int8 *)WebKit::RemoteVideoTrackProxy::RemoteVideoTrackProxy(v29, v27, (unsigned int *)a2, v28);
                v30 = *v7;
                *v7 = this;
                if (v30)
                  this = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::RemoteVideoTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)v30 + 4);
                v24 = v32;
                v32 = 0;
                if (!v24)
                  return this;
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v24 + 2));
              }
              ++v7;
              v9 -= 8;
              if (!v9)
                goto LABEL_13;
            }
          }
          else
          {
LABEL_13:
            v14 = (_QWORD *)*((_QWORD *)v4 + 20);
            if (v14)
              v14 = (_QWORD *)v14[1];
            v15 = (unsigned __int8 *)v14[3];
            if (v15)
            {
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v15, v14[4], &v31);
              v16 = v31;
            }
            else
            {
              v16 = 0;
              v31 = 0;
            }
            v17 = *((_QWORD *)v4 + 11);
            v18 = WTF::fastMalloc((WTF *)0x50);
            this = (unsigned __int8 *)WebKit::RemoteVideoTrackProxy::RemoteVideoTrackProxy(v18, v16, (unsigned int *)a2, v17);
            v32 = this;
            v19 = *((unsigned int *)v4 + 17);
            if ((_DWORD)v19 == *((_DWORD *)v4 + 16))
            {
              this = (unsigned __int8 *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v4 + 56), v19 + 1, (unint64_t)&v32);
              v20 = *((unsigned int *)v4 + 17);
              v21 = *((_QWORD *)v4 + 7);
              v22 = *(_QWORD *)this;
              *(_QWORD *)this = 0;
              *(_QWORD *)(v21 + 8 * v20) = v22;
              v23 = v32;
              *((_DWORD *)v4 + 17) = v20 + 1;
              v32 = 0;
              if (v23)
                this = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::RemoteVideoTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)v23 + 4);
            }
            else
            {
              *(_QWORD *)(*((_QWORD *)v4 + 7) + 8 * v19) = this;
              *((_DWORD *)v4 + 17) = v19 + 1;
              v32 = 0;
            }
            v24 = (unsigned __int8 *)v31;
            v31 = 0;
            if (v24)
              return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v24 + 2));
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::videoTrackSetSelected(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(this + 68);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(this + 56);
    v7 = 8 * v3;
    while (1)
    {
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v6 + 40) + 48))(*(_QWORD *)(*v6 + 40));
      if (this == a2)
        break;
      ++v6;
      v7 -= 8;
      if (!v7)
        return this;
    }
    v8 = *v6;
    *(_BYTE *)(v8 + 64) = a3;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 40) + 120))(*(_QWORD *)(v8 + 40), a3);
  }
  return this;
}

unsigned __int8 *WebKit::RemoteMediaPlayerProxy::addRemoteTextTrackProxy(unsigned __int8 *this, WebCore::InbandTextTrackPrivate *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  WTF::StringImpl *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  v2 = *((_QWORD *)this + 20);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return this;
  v4 = this;
  this = *(unsigned __int8 **)(v3 + 24);
  if (!this)
    return this;
  this = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(this, *(_QWORD *)(v3 + 32), &v40);
  v6 = v40;
  v40 = 0;
  if (!v6)
    return this;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v6 + 2));
  (*(void (**)(WebCore::InbandTextTrackPrivate *, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, *((_QWORD *)v4 + 108), *((_QWORD *)v4 + 90));
  v7 = (unsigned __int8 **)*((_QWORD *)v4 + 9);
  v8 = *((unsigned int *)v4 + 21);
  if (!(_DWORD)v8)
  {
LABEL_29:
    v22 = (_QWORD *)*((_QWORD *)v4 + 20);
    if (v22)
      v22 = (_QWORD *)v22[1];
    v23 = (unsigned __int8 *)v22[3];
    if (v23)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v23, v22[4], &v39);
      v24 = (uint64_t)v39;
    }
    else
    {
      v24 = 0;
      v39 = 0;
    }
    v25 = *((_QWORD *)v4 + 11);
    v26 = WTF::fastMalloc((WTF *)0x48);
    this = (unsigned __int8 *)WebKit::RemoteTextTrackProxy::RemoteTextTrackProxy(v26, v24, (unsigned int *)a2, v25);
    v40 = (WTF::StringImpl *)this;
    v27 = *((unsigned int *)v4 + 21);
    if ((_DWORD)v27 == *((_DWORD *)v4 + 20))
    {
      this = (unsigned __int8 *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v4 + 72), v27 + 1, (unint64_t)&v40);
      v28 = *((unsigned int *)v4 + 21);
      v29 = *((_QWORD *)v4 + 9);
      v30 = *(_QWORD *)this;
      *(_QWORD *)this = 0;
      *(_QWORD *)(v29 + 8 * v28) = v30;
      v31 = v40;
      *((_DWORD *)v4 + 21) = v28 + 1;
      v40 = 0;
      if (v31)
        this = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::RemoteTextTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)v31 + 4);
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)v4 + 9) + 8 * v27) = this;
      *((_DWORD *)v4 + 21) = v27 + 1;
      v40 = 0;
    }
    v32 = v39;
    v39 = 0;
    if (v32)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v32 + 2));
    return this;
  }
  v9 = 8 * v8;
  while (1)
  {
    v10 = (unsigned __int8 *)*((_QWORD *)*v7 + 5);
    if (!WebCore::TrackPrivateBase::operator==())
      goto LABEL_27;
    if (*((unsigned __int8 *)a2 + 48) != v10[48])
      goto LABEL_27;
    v11 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)a2 + 136))(a2);
    if (v11 != (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v10 + 136))(v10))
      goto LABEL_27;
    v12 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)a2 + 144))(a2);
    if (v12 != (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v10 + 144))(v10))
      goto LABEL_27;
    v13 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)a2 + 152))(a2);
    if (v13 != (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v10 + 152))(v10))
      goto LABEL_27;
    v14 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)a2 + 160))(a2);
    if (v14 != (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v10 + 160))(v10))
      goto LABEL_27;
    v15 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)a2 + 168))(a2);
    if (v15 != (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v10 + 168))(v10))
      goto LABEL_27;
    v16 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)a2 + 176))(a2);
    if (v16 != (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v10 + 176))(v10))
      goto LABEL_27;
    v17 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)a2 + 184))(a2);
    if (v17 != (*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v10 + 184))(v10))
      goto LABEL_27;
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InbandTextTrackPrivate *))(*(_QWORD *)a2 + 192))(&v40, a2);
    (*(void (**)(WTF::StringImpl **__return_ptr, unsigned __int8 *))(*(_QWORD *)v10 + 192))(&v39, v10);
    v19 = v39;
    v20 = v40;
    v39 = 0;
    if (!v19)
      goto LABEL_20;
    if (*(_DWORD *)v19 != 2)
    {
      *(_DWORD *)v19 -= 2;
LABEL_20:
      this = (unsigned __int8 *)v20;
      goto LABEL_22;
    }
    WTF::StringImpl::destroy(v19, v18);
    this = (unsigned __int8 *)v40;
LABEL_22:
    v40 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v18);
      else
        *(_DWORD *)this -= 2;
    }
    if (v20 == v19)
      return this;
LABEL_27:
    v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*v7 + 5) + 48))(*((_QWORD *)*v7 + 5));
    if (v21 == (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)a2 + 48))(a2))
      break;
    ++v7;
    v9 -= 8;
    if (!v9)
      goto LABEL_29;
  }
  v33 = (_QWORD *)*((_QWORD *)v4 + 20);
  if (v33)
    v33 = (_QWORD *)v33[1];
  v34 = (unsigned __int8 *)v33[3];
  if (v34)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v34, v33[4], &v40);
    v35 = v40;
  }
  else
  {
    v35 = 0;
    v40 = 0;
  }
  v36 = *((_QWORD *)v4 + 11);
  v37 = WTF::fastMalloc((WTF *)0x48);
  this = (unsigned __int8 *)WebKit::RemoteTextTrackProxy::RemoteTextTrackProxy(v37, (uint64_t)v35, (unsigned int *)a2, v36);
  v38 = *v7;
  *v7 = this;
  if (v38)
    this = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::RemoteTextTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)v38 + 4);
  v32 = v40;
  v40 = 0;
  if (v32)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v32 + 2));
  return this;
}

uint64_t WebKit::RemoteMediaPlayerProxy::textTrackSetMode(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(_QWORD *)(result + 72);
    v7 = 8 * v3;
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v6 + 40) + 48))(*(_QWORD *)(*(_QWORD *)v6 + 40));
      if (result == a2)
        break;
      v6 += 8;
      v7 -= 8;
      if (!v7)
        return result;
    }
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v6 + 40) + 120))(*(_QWORD *)(*(_QWORD *)v6 + 40), a3);
  }
  return result;
}

char *WebKit::RemoteMediaPlayerProxy::mediaPlayerDidRemoveAudioTrack(WebKit::RemoteMediaPlayerProxy *this, WebCore::AudioTrackPrivate *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  void *v28;
  IPC::Encoder *v29;

  v4 = *((_QWORD *)this + 14);
  v5 = (*(uint64_t (**)(WebCore::AudioTrackPrivate *))(*(_QWORD *)a2 + 48))(a2);
  v6 = *((_QWORD *)this + 11);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 166;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v29 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 8;
  v11 = *(_QWORD *)(v7 + 552);
  if (v11 < v9 + 8)
  {
    v26 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v27 = v26;
      v26 *= 2;
    }
    while (v27 < v10);
    result = (char *)mmap(0, v27, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v12 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v28 = *(void **)(v7 + 528);
    if (v28 != (void *)(v7 + 16))
      munmap(v28, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v12;
    *(_QWORD *)(v7 + 552) = v27;
    v8 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v12 = *(char **)(v7 + 528);
  }
  bzero(&v12[v8], v9 - v8);
  *(_QWORD *)(v7 + 544) = v10;
  v13 = (uint64_t *)(*(_QWORD *)(v7 + 528) + v9);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = v5;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v29, 0, 0);
  result = (char *)v29;
  v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    result = (char *)WTF::fastFree(v16, v17);
  }
  if (*((_DWORD *)this + 13))
  {
    v18 = 0;
    for (i = -8; ; i -= 8)
    {
      v20 = *((_QWORD *)this + 5);
      v21 = (*(uint64_t (**)(WebCore::AudioTrackPrivate *))(*(_QWORD *)a2 + 48))(a2);
      v22 = *(_QWORD *)(*(_QWORD *)(v20 + 8 * v18) + 40);
      result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
      if ((char *)v21 == result)
        break;
      if (++v18 >= (unint64_t)*((unsigned int *)this + 13))
        return result;
    }
    v23 = *((_QWORD *)this + 5);
    v24 = (uint64_t *)(v23 + 8 * v18);
    v25 = *v24;
    *v24 = 0;
    if (v25)
      WTF::ThreadSafeRefCounted<WebKit::RemoteAudioTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 16));
    result = (char *)memmove((void *)(v23 + 8 * v18), v24 + 1, *((_QWORD *)this + 5) + 8 * *((unsigned int *)this + 13) - v23 + i);
    --*((_DWORD *)this + 13);
  }
  return result;
}

char *WebKit::RemoteMediaPlayerProxy::mediaPlayerDidRemoveVideoTrack(WebKit::RemoteMediaPlayerProxy *this, WebCore::VideoTrackPrivate *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  void *v28;
  IPC::Encoder *v29;

  v4 = *((_QWORD *)this + 14);
  v5 = (*(uint64_t (**)(WebCore::VideoTrackPrivate *))(*(_QWORD *)a2 + 48))(a2);
  v6 = *((_QWORD *)this + 11);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 168;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v29 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 8;
  v11 = *(_QWORD *)(v7 + 552);
  if (v11 < v9 + 8)
  {
    v26 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v27 = v26;
      v26 *= 2;
    }
    while (v27 < v10);
    result = (char *)mmap(0, v27, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v12 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v28 = *(void **)(v7 + 528);
    if (v28 != (void *)(v7 + 16))
      munmap(v28, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v12;
    *(_QWORD *)(v7 + 552) = v27;
    v8 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v12 = *(char **)(v7 + 528);
  }
  bzero(&v12[v8], v9 - v8);
  *(_QWORD *)(v7 + 544) = v10;
  v13 = (uint64_t *)(*(_QWORD *)(v7 + 528) + v9);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = v5;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v29, 0, 0);
  result = (char *)v29;
  v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    result = (char *)WTF::fastFree(v16, v17);
  }
  if (*((_DWORD *)this + 17))
  {
    v18 = 0;
    for (i = -8; ; i -= 8)
    {
      v20 = *((_QWORD *)this + 7);
      v21 = (*(uint64_t (**)(WebCore::VideoTrackPrivate *))(*(_QWORD *)a2 + 48))(a2);
      v22 = *(_QWORD *)(*(_QWORD *)(v20 + 8 * v18) + 40);
      result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
      if ((char *)v21 == result)
        break;
      if (++v18 >= (unint64_t)*((unsigned int *)this + 17))
        return result;
    }
    v23 = *((_QWORD *)this + 7);
    v24 = (uint64_t *)(v23 + 8 * v18);
    v25 = *v24;
    *v24 = 0;
    if (v25)
      WTF::ThreadSafeRefCounted<WebKit::RemoteVideoTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 16));
    result = (char *)memmove((void *)(v23 + 8 * v18), v24 + 1, *((_QWORD *)this + 7) + 8 * *((unsigned int *)this + 17) - v23 + i);
    --*((_DWORD *)this + 17);
  }
  return result;
}

char *WebKit::RemoteMediaPlayerProxy::mediaPlayerDidRemoveTextTrack(WebKit::RemoteMediaPlayerProxy *this, WebCore::InbandTextTrackPrivate *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  void *v28;
  IPC::Encoder *v29;

  v4 = *((_QWORD *)this + 14);
  v5 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)a2 + 48))(a2);
  v6 = *((_QWORD *)this + 11);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 167;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v29 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v7 + 544);
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 8;
  v11 = *(_QWORD *)(v7 + 552);
  if (v11 < v9 + 8)
  {
    v26 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v27 = v26;
      v26 *= 2;
    }
    while (v27 < v10);
    result = (char *)mmap(0, v27, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v12 = result;
    memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v28 = *(void **)(v7 + 528);
    if (v28 != (void *)(v7 + 16))
      munmap(v28, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v12;
    *(_QWORD *)(v7 + 552) = v27;
    v8 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v12 = *(char **)(v7 + 528);
  }
  bzero(&v12[v8], v9 - v8);
  *(_QWORD *)(v7 + 544) = v10;
  v13 = (uint64_t *)(*(_QWORD *)(v7 + 528) + v9);
  *(_QWORD *)(v7 + 536) = v13 + 1;
  *v13 = v5;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v29, 0, 0);
  result = (char *)v29;
  v29 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    result = (char *)WTF::fastFree(v16, v17);
  }
  if (*((_DWORD *)this + 21))
  {
    v18 = 0;
    for (i = -8; ; i -= 8)
    {
      v20 = *((_QWORD *)this + 9);
      v21 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)a2 + 48))(a2);
      v22 = *(_QWORD *)(*(_QWORD *)(v20 + 8 * v18) + 40);
      result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
      if ((char *)v21 == result)
        break;
      if (++v18 >= (unint64_t)*((unsigned int *)this + 21))
        return result;
    }
    v23 = *((_QWORD *)this + 9);
    v24 = (uint64_t *)(v23 + 8 * v18);
    v25 = *v24;
    *v24 = 0;
    if (v25)
      WTF::ThreadSafeRefCounted<WebKit::RemoteTextTrackProxy,(WTF::DestructionThread)1>::deref((unsigned int *)(v25 + 16));
    result = (char *)memmove((void *)(v23 + 8 * v18), v24 + 1, *((_QWORD *)this + 9) + 8 * *((unsigned int *)this + 21) - v23 + i);
    --*((_DWORD *)this + 21);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerResourceNotSupported(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = *((_QWORD *)this + 14);
  v2 = *((_QWORD *)this + 11);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 172;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerSizeChanged(WebCore::MediaPlayer **this)
{
  int *v2;
  int v3;
  int v4;
  uint64_t v5;
  WebCore::MediaPlayer *v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  WebCore::MediaPlayer::naturalSize(this[15]);
  v2 = (int *)this + 87;
  *((_DWORD *)this + 87) = v3;
  *((_DWORD *)this + 88) = v4;
  v5 = (uint64_t)this[14];
  v6 = this[11];
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 175;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v7, v2);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerActiveSourceBuffersChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v1;
  char v3;

  v1 = *((_QWORD *)this + 14);
  v3 = 0;
  return IPC::Connection::send<Messages::MediaPlayerPrivateRemote::ActiveSourceBuffersChanged>(v1, (uint64_t)&v3, *((_QWORD *)this + 11), 0, 0);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerCachedKeyForKeyId@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;

  v4 = *(_QWORD *)(this + 160);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = this;
      this = *(_QWORD *)(v5 + 24);
      if (this)
      {
        this = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)this, *(_QWORD *)(v5 + 32), &v15);
        v8 = v15;
        v15 = 0;
        if (v8)
        {
          this = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v8 + 2));
          if (*(_BYTE *)(v6 + 816))
          {
            v9 = *(_QWORD **)(v6 + 160);
            if (v9)
              v9 = (_QWORD *)v9[1];
            v10 = (unsigned __int8 *)v9[3];
            if (v10)
            {
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v10, v9[4], &v15);
              v10 = v15;
            }
            else
            {
              v15 = 0;
            }
            this = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)v10);
            if (!*(_BYTE *)(v6 + 816))
            {
              __break(1u);
              return this;
            }
            v11 = this;
            this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(this + 32), (_QWORD *)(v6 + 808));
            v12 = *(_QWORD *)(v11 + 32);
            if (v12)
              v12 += 16 * *(unsigned int *)(v12 - 4);
            if (v12 == this)
              v13 = 0;
            else
              v13 = *(_QWORD *)(this + 8);
            v14 = v15;
            v15 = 0;
            if (v14)
              this = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v14 + 2));
            if (v13)
            {
              this = *(_QWORD *)(v13 + 64);
              if (this)
                return (*(uint64_t (**)(uint64_t, const WTF::String *))(*(_QWORD *)this + 56))(this, a2);
            }
          }
        }
      }
    }
  }
  *a3 = 0;
  return this;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerKeyNeeded(WebKit::RemoteMediaPlayerProxy *this, size_t *a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v4 = *((_QWORD *)this + 14);
  v5 = (const void *)WebCore::SharedBuffer::data((WebCore::SharedBuffer *)a2);
  v6 = a2[6];
  v7 = *((_QWORD *)this + 11);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 151;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v8, v5, v6);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerInitializationDataEncountered(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  IPC::Encoder *v18;

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *a3;
  v6 = *(_QWORD *)(*a3 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v7)
    {
      v8 = *(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || *MEMORY[0x1E0CC10F0] == 0;
      v9 = (v6 & 0x3FFFFFFFFLL) + v7;
      if (v8)
        v6 = v9;
    }
  }
  if (*(_BYTE *)(v5 + 64) && (v10 = *(_QWORD *)(v5 + 32)) != 0)
    v11 = *(_QWORD *)(v10 + 32);
  else
    v11 = *(_QWORD *)(v5 + 48);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 149;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v18 = (IPC::Encoder *)v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v13, (const void *)v6, v11);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v18, 0, 0);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerWaitingForKeyChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v2 = *((_QWORD *)this + 14);
  v3 = WebCore::MediaPlayer::waitingForKey(*((WebCore::MediaPlayer **)this + 15));
  v4 = *((_QWORD *)this + 11);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 182;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = v3;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerCurrentPlaybackTargetIsWirelessChanged(WebCore::MediaPlayer **this, char a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::MediaPlayer *v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;

  WebCore::MediaPlayer::wirelessPlaybackTargetName(this[15]);
  v5 = v16;
  v16 = 0;
  v6 = this[39];
  this[39] = v5;
  if (!v6)
    goto LABEL_6;
  v7 = *(_DWORD *)v6 - 2;
  if (*(_DWORD *)v6 != 2)
    goto LABEL_5;
  WTF::StringImpl::destroy(v6, v4);
  v6 = v16;
  v16 = 0;
  if (!v6)
    goto LABEL_6;
  v7 = *(_DWORD *)v6 - 2;
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v8);
  else
LABEL_5:
    *(_DWORD *)v6 = v7;
LABEL_6:
  *((_BYTE *)this + 346) = WebCore::MediaPlayer::wirelessPlaybackTargetType(this[15]);
  WebKit::RemoteMediaPlayerProxy::sendCachedState((WebKit::RemoteMediaPlayerProxy *)this);
  v9 = (uint64_t)this[14];
  v10 = this[11];
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 143;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v16 = (WTF::StringImpl *)v11;
  *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v16, 0, 0);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

WTF *WebKit::RemoteMediaPlayerProxy::setWirelessVideoPlaybackDisabled(WebCore::MediaPlayer **this)
{
  WebCore::MediaPlayer::setWirelessVideoPlaybackDisabled(this[15]);
  *((_BYTE *)this + 448) = WebCore::MediaPlayer::wirelessVideoPlaybackDisabled(this[15]);
  return WebKit::RemoteMediaPlayerProxy::sendCachedState((WebKit::RemoteMediaPlayerProxy *)this);
}

uint64_t WebKit::RemoteMediaPlayerProxy::setWirelessPlaybackTarget(uint64_t a1, WebKit::MediaPlaybackTargetContextSerialized *this)
{
  uint64_t result;
  _QWORD v4[2];
  _QWORD *v5;
  _BYTE v6[32];
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  WebKit::MediaPlaybackTargetContextSerialized::platformContext(this, (uint64_t)v6);
  v4[0] = a1;
  v4[1] = a1;
  if (v7 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v5 = v4;
  result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit22RemoteMediaPlayerProxy25setWirelessPlaybackTargetEONS8_36MediaPlaybackTargetContextSerializedEE3__0JZNS9_25setWirelessPlaybackTargetESB_E3__1EEEEEJNS0_6__implIJN7WebCore31MediaPlaybackTargetContextCocoaENSH_30MediaPlaybackTargetContextMockEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v5, v6);
  if (v7 != -1)
    return (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore31MediaPlaybackTargetContextCocoaENS6_30MediaPlaybackTargetContextMockEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix
            + v7))((int)v4, (WebCore::MediaPlaybackTargetContextCocoa *)v6);
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerIsFullscreen(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerIsFullscreenPermitted(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0;
}

float WebKit::RemoteMediaPlayerProxy::mediaPlayerContentsScale(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((float *)this + 193);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerPlatformVolumeConfigurationRequired(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerCachedResourceLoader(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0;
}

unsigned int *WebKit::RemoteMediaPlayerProxy::mediaPlayerCreateResourceLoader@<X0>(WebKit::RemoteMediaPlayerProxy *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E34BA540;
  result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 16) = v6;
  *a2 = v4;
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::doesHaveAttribute(WebKit::RemoteMediaPlayerProxy *this, const AtomString *a2, AtomString *a3)
{
  return 0;
}

uint64_t WebKit::RemoteMediaPlayerProxy::outOfBandTrackSources@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(unsigned int *)(this + 668);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      this = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(_QWORD *)a2 = this;
      v5 = *(_DWORD *)(v4 + 668);
      if (v5)
      {
        v6 = this;
        v7 = 0;
        v8 = *(uint64_t **)(v4 + 656);
        v9 = &v8[5 * v5];
        do
        {
          this = WTF::fastMalloc((WTF *)0x40);
          *(_DWORD *)(this + 8) = 1;
          *(_QWORD *)this = off_1E34BA9B0;
          v10 = *v8;
          *v8 = 0;
          *(_QWORD *)(this + 16) = v10;
          v11 = v8[1];
          v8[1] = 0;
          *(_QWORD *)(this + 24) = v11;
          v12 = v8[2];
          v8[2] = 0;
          *(_QWORD *)(this + 32) = v12;
          v13 = v8[3];
          *(_BYTE *)(this + 48) = *((_BYTE *)v8 + 32);
          *(_QWORD *)(this + 40) = v13;
          *(_QWORD *)(v6 + 8 * v7++) = this;
          *(_DWORD *)(a2 + 12) = v7;
          v8 += 5;
        }
        while (v8 != v9);
      }
    }
  }
  return this;
}

double WebKit::RemoteMediaPlayerProxy::mediaPlayerRequestedPlaybackRate(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0.0;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerFullscreenMode(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned int *)this + 199);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerIsVideoFullscreenStandby(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 800);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerShouldDisableSleep(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerShouldCheckHardwareSupport(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 856);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerVideoTarget(WebKit::RemoteMediaPlayerProxy *this)
{
  return 0;
}

uint64_t WebKit::RemoteMediaPlayerProxy::currentTimeChanged(WebKit::RemoteMediaPlayerProxy *this, const WTF::MediaTime *a2)
{
  WebCore::MediaPlayer *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::MonotonicTime *IsProgressing;
  uint64_t v7;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;

  v4 = *((_QWORD *)this + 14);
  v3 = (WebCore::MediaPlayer *)*((_QWORD *)this + 15);
  v5 = *((_QWORD *)a2 + 1);
  v9 = *(_QWORD *)a2;
  v10 = v5;
  v11 = BYTE4(v5);
  IsProgressing = (WTF::MonotonicTime *)WebCore::MediaPlayer::timeIsProgressing(v3);
  v12 = (char)IsProgressing;
  WTF::MonotonicTime::now(IsProgressing);
  v13 = v7;
  v14 = &v9;
  return IPC::Connection::send<Messages::MediaPlayerPrivateRemote::CurrentTimeChanged>(v4, (uint64_t *)&v14, *((_QWORD *)this + 11), 0, 0);
}

uint64_t WebKit::RemoteMediaPlayerProxy::videoFrameForCurrentTimeIfChanged(_QWORD *a1, uint64_t *a2)
{
  WebCore::MediaPlayer *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  _OWORD v24[3];
  uint64_t v25;
  _OWORD v26[3];
  uint64_t v27;
  char v28;

  LOBYTE(v26[0]) = 0;
  v28 = 0;
  v4 = (WebCore::MediaPlayer *)a1[15];
  if (v4)
  {
    WebCore::MediaPlayer::videoFrameForCurrentTime(v4);
    v5 = *(unsigned int **)&v24[0];
    v6 = (unsigned int *)a1[106];
    if (v6 != *(unsigned int **)&v24[0])
    {
      if (*(_QWORD *)&v24[0])
      {
        v7 = (unsigned int *)(*(_QWORD *)&v24[0] + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        v6 = (unsigned int *)a1[106];
      }
      a1[106] = *(_QWORD *)&v24[0];
      if (!v6)
        goto LABEL_14;
      goto LABEL_11;
    }
    v17 = 0;
  }
  else
  {
    v6 = (unsigned int *)a1[106];
    if (v6)
    {
      v5 = 0;
      a1[106] = 0;
LABEL_11:
      v9 = v6 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v6 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        if (v5)
          goto LABEL_15;
        goto LABEL_23;
      }
LABEL_14:
      if (v5)
      {
LABEL_15:
        v12 = a1[105];
        v23 = v5;
        WebKit::RemoteVideoFrameObjectHeap::add(v12, (uint64_t *)&v23, (uint64_t)v24);
        v26[0] = v24[0];
        v26[1] = v24[1];
        v26[2] = v24[2];
        v27 = v25;
        if (!v28)
          v28 = 1;
        v13 = v23;
        v23 = 0;
        if (v13)
        {
          v14 = v13 + 2;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v13 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
          }
        }
        v5 = 0;
      }
LABEL_23:
      v17 = 1;
      goto LABEL_26;
    }
    v17 = 0;
    v5 = 0;
  }
LABEL_26:
  v18 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v18 + 16))(v18, v26, v17);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v5)
  {
    v20 = v5 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v5 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::maybeUpdateCachedVideoMetrics(uint64_t this)
{
  uint64_t v1;
  double v2;

  if (!*(_BYTE *)(this + 442))
  {
    v1 = this;
    if (*(double *)(this + 752) != 0.0)
    {
      this = WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      if (v2 >= *(double *)(v1 + 760) && !*(_BYTE *)(v1 + 768))
        return WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics((WebKit::RemoteMediaPlayerProxy *)v1);
    }
  }
  return this;
}

uint64_t std::optional<WebCore::PlatformTimeRanges>::operator=[abi:sn180100]<WebCore::PlatformTimeRanges const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16))
  {
    WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, a2);
  }
  else
  {
    WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t WebKit::RemoteMediaPlayerProxy::setLegacyCDMSession(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int8 *v29;

  v2 = *(_QWORD *)(result + 160);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = result;
      result = *(_QWORD *)(v3 + 24);
      if (result)
      {
        result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)result, *(_QWORD *)(v3 + 32), &v29);
        v6 = v29;
        v29 = 0;
        if (v6)
        {
          result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v6 + 2));
          v7 = (_QWORD *)(v4 + 808);
          if (*(_BYTE *)(v4 + 816) && *((_BYTE *)a2 + 8))
          {
            if (*v7 == *a2)
              return result;
          }
          else
          {
            if ((*(_BYTE *)(v4 + 816) != 0) == (*((_BYTE *)a2 + 8) != 0))
              return result;
            if (!*(_BYTE *)(v4 + 816))
              goto LABEL_28;
          }
          v8 = *(_QWORD **)(v4 + 160);
          if (v8)
            v8 = (_QWORD *)v8[1];
          v9 = (unsigned __int8 *)v8[3];
          if (v9)
          {
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v9, v8[4], &v29);
            v9 = v29;
          }
          else
          {
            v29 = 0;
          }
          result = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)v9);
          if (!*(_BYTE *)(v4 + 816))
            goto LABEL_50;
          v11 = result;
          result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(result + 32), (_QWORD *)(v4 + 808));
          v12 = *(_QWORD *)(v11 + 32);
          if (v12)
            v12 += 16 * *(unsigned int *)(v12 - 4);
          if (v12 == result)
            v13 = 0;
          else
            v13 = *(_QWORD *)(result + 8);
          v14 = v29;
          v29 = 0;
          if (v14)
            result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v14 + 2));
          if (v13)
          {
            WebCore::MediaPlayer::setCDMSession();
            result = *(_QWORD *)(v13 + 72);
            *(_QWORD *)(v13 + 72) = 0;
            if (result)
            {
              do
              {
                v15 = __ldaxr((unsigned int *)result);
                v16 = v15 - 1;
              }
              while (__stlxr(v16, (unsigned int *)result));
              if (!v16)
                goto LABEL_51;
            }
          }
LABEL_28:
          while (1)
          {
            v17 = *a2;
            *(_BYTE *)(v4 + 816) = *((_BYTE *)a2 + 8);
            *v7 = v17;
            if (!*(_BYTE *)(v4 + 816))
              break;
            v18 = *(_QWORD **)(v4 + 160);
            if (v18)
              v18 = (_QWORD *)v18[1];
            v19 = (unsigned __int8 *)v18[3];
            if (v19)
            {
              WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v19, v18[4], &v29);
              v19 = v29;
            }
            else
            {
              v29 = 0;
            }
            result = WebKit::GPUConnectionToWebProcess::legacyCdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)v19);
            if (*(_BYTE *)(v4 + 816))
            {
              v20 = result;
              result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(result + 32), (_QWORD *)(v4 + 808));
              v21 = *(_QWORD *)(v20 + 32);
              if (v21)
                v21 += 16 * *(unsigned int *)(v21 - 4);
              if (v21 == result)
                v22 = 0;
              else
                v22 = *(_QWORD *)(result + 8);
              v23 = v29;
              v29 = 0;
              if (v23)
                result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v23 + 2));
              if (v22)
              {
                WebCore::MediaPlayer::setCDMSession();
                WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
                v25 = *(unsigned int **)(v4 + 8);
                if (v25)
                {
                  do
                    v26 = __ldaxr(v25);
                  while (__stlxr(v26 + 1, v25));
                }
                result = *(_QWORD *)(v22 + 72);
                *(_QWORD *)(v22 + 72) = v25;
                if (result)
                {
                  do
                  {
                    v27 = __ldaxr((unsigned int *)result);
                    v28 = v27 - 1;
                  }
                  while (__stlxr(v28, (unsigned int *)result));
                  if (!v28)
                  {
                    atomic_store(1u, (unsigned int *)result);
                    return WTF::fastFree((WTF *)result, v24);
                  }
                }
              }
              return result;
            }
LABEL_50:
            __break(1u);
LABEL_51:
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v10);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::cdmInstanceAttached(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  v2 = *(_QWORD *)(result + 160);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = result;
      result = *(_QWORD *)(v3 + 24);
      if (result)
      {
        result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)result, *(_QWORD *)(v3 + 32), &v12);
        v6 = v12;
        v12 = 0;
        if (v6)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v6 + 2));
          v7 = *(_QWORD **)(v4 + 160);
          if (v7)
            v7 = (_QWORD *)v7[1];
          v8 = (unsigned __int8 *)v7[3];
          if (v8)
          {
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v8, v7[4], &v12);
            v8 = v12;
          }
          else
          {
            v12 = 0;
          }
          v9 = WebKit::GPUConnectionToWebProcess::cdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)v8);
          result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v9 + 48), a2);
          v10 = result;
          v11 = v12;
          v12 = 0;
          if (v11)
            result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v11 + 2));
          if (v10)
            return WebCore::MediaPlayer::cdmInstanceAttached(*(WebCore::MediaPlayer **)(v4 + 120), *(WebCore::CDMInstance **)(v10 + 40));
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::cdmInstanceDetached(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  v2 = *(_QWORD *)(result + 160);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = result;
      result = *(_QWORD *)(v3 + 24);
      if (result)
      {
        result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)result, *(_QWORD *)(v3 + 32), &v12);
        v6 = v12;
        v12 = 0;
        if (v6)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v6 + 2));
          v7 = *(_QWORD **)(v4 + 160);
          if (v7)
            v7 = (_QWORD *)v7[1];
          v8 = (unsigned __int8 *)v7[3];
          if (v8)
          {
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v8, v7[4], &v12);
            v8 = v12;
          }
          else
          {
            v12 = 0;
          }
          v9 = WebKit::GPUConnectionToWebProcess::cdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)v8);
          result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v9 + 48), a2);
          v10 = result;
          v11 = v12;
          v12 = 0;
          if (v11)
            result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v11 + 2));
          if (v10)
            return WebCore::MediaPlayer::cdmInstanceDetached(*(WebCore::MediaPlayer **)(v4 + 120), *(WebCore::CDMInstance **)(v10 + 40));
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::attemptToDecryptWithInstance(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  v2 = *(_QWORD *)(result + 160);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = result;
      result = *(_QWORD *)(v3 + 24);
      if (result)
      {
        result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)result, *(_QWORD *)(v3 + 32), &v12);
        v6 = v12;
        v12 = 0;
        if (v6)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v6 + 2));
          v7 = *(_QWORD **)(v4 + 160);
          if (v7)
            v7 = (_QWORD *)v7[1];
          v8 = (unsigned __int8 *)v7[3];
          if (v8)
          {
            WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v8, v7[4], &v12);
            v8 = v12;
          }
          else
          {
            v12 = 0;
          }
          v9 = WebKit::GPUConnectionToWebProcess::cdmFactoryProxy((WebKit::GPUConnectionToWebProcess *)v8);
          result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v9 + 48), a2);
          v10 = result;
          v11 = v12;
          v12 = 0;
          if (v11)
            result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v11 + 2));
          if (v10)
            return WebCore::MediaPlayer::attemptToDecryptWithInstance(*(WebCore::MediaPlayer **)(v4 + 120), *(WebCore::CDMInstance **)(v10 + 40));
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::performTaskAtTime(uint64_t a1, WTF::MediaTime *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char v17;

  v6 = *(_QWORD *)(a1 + 736);
  if (v6)
  {
    *(_QWORD *)(a1 + 736) = 0;
    LOBYTE(v16) = 0;
    v17 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 16))(v6, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  *(_QWORD *)&v15 = WebCore::MediaPlayer::currentTime(*(WebCore::MediaPlayer **)(a1 + 120));
  *((_QWORD *)&v15 + 1) = v7;
  if ((int)WTF::MediaTime::compare(a2, (const WTF::MediaTime *)&v15) <= 0)
  {
    v16 = v15;
    v14 = *a3;
    *a3 = 0;
    v17 = 1;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 16))(v14, &v16);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  else
  {
    v8 = *a3;
    *a3 = 0;
    v9 = *(_QWORD *)(a1 + 736);
    *(_QWORD *)(a1 + 736) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    v10 = *(unsigned int **)(a1 + 8);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = &off_1E34BA9D0;
    v12[1] = a1;
    v12[2] = v10;
    *(_QWORD *)&v16 = v12;
    WebCore::MediaPlayer::performTaskAtTime();
    result = v16;
    *(_QWORD *)&v16 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

WebCore::SecurityOrigin *WebKit::RemoteMediaPlayerProxy::isCrossOrigin(uint64_t a1, WebCore::SecurityOriginData *this, uint64_t *a3)
{
  WebCore::MediaPlayer *v4;
  unsigned int isCrossOrigin;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::SecurityOrigin *result;
  WebCore::SecurityOrigin *v9;

  v4 = *(WebCore::MediaPlayer **)(a1 + 120);
  WebCore::SecurityOriginData::securityOrigin(this);
  isCrossOrigin = WebCore::MediaPlayer::isCrossOrigin(v4, v9);
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, isCrossOrigin | 0x100);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = v9;
  if (v9)
    return (WebCore::SecurityOrigin *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v9, v7);
  return result;
}

double WebKit::RemoteMediaPlayerProxy::setVideoPlaybackMetricsUpdateInterval(WebKit::RemoteMediaPlayerProxy *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::MonotonicTime *updated;
  double v6;
  double result;
  _QWORD v8[4];
  double v9;

  v9 = a2;
  v3 = *((_QWORD *)this + 108);
  v4 = *((_QWORD *)this + 90);
  v8[0] = "RemoteMediaPlayerProxy";
  v8[1] = 23;
  v8[2] = "setVideoPlaybackMetricsUpdateInterval";
  v8[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8, &v9);
  updated = (WTF::MonotonicTime *)WebKit::RemoteMediaPlayerProxy::updateCachedVideoMetrics(this);
  *((double *)this + 94) = v9;
  WTF::MonotonicTime::now(updated);
  result = v9 + v6 + -0.25;
  *((double *)this + 95) = result;
  return result;
}

unsigned __int8 ***WebKit::RemoteMediaPlayerProxy::createAudioSourceProvider(WebKit::RemoteMediaPlayerProxy *this)
{
  unsigned __int8 ***result;
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 **v14;
  unsigned int *v15;

  result = (unsigned __int8 ***)*((_QWORD *)this + 15);
  if (result)
  {
    result = (unsigned __int8 ***)WebCore::MediaPlayer::audioSourceProvider((WebCore::MediaPlayer *)result);
    if (result)
    {
      result = (unsigned __int8 ***)((uint64_t (*)(unsigned __int8 ***))(*result)[2])(result);
      if ((_DWORD)result)
      {
        v3 = *((_QWORD *)this + 11);
        v4 = (unsigned __int8 **)*((_QWORD *)this + 14);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4);
        v14 = v4;
        WebKit::RemoteAudioSourceProviderProxy::create(v3, (uint64_t *)&v14, (uint64_t *)&v15);
        v5 = (uint64_t)v15;
        v15 = 0;
        v6 = (unsigned int *)*((_QWORD *)this + 103);
        *((_QWORD *)this + 103) = v5;
        if (v6)
        {
          v7 = v6 + 4;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 4);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
          v10 = v15;
          v15 = 0;
          if (v10)
          {
            v11 = v10 + 4;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v10 + 4);
              (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
            }
          }
        }
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v14);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::playerContentBoxRectChanged(uint64_t this, const WebCore::LayoutRect *a2)
{
  BOOL v2;
  BOOL v3;

  v2 = *(_DWORD *)(this + 776) == *(_DWORD *)a2 && *(_DWORD *)(this + 780) == *((_DWORD *)a2 + 1);
  if (!v2
    || (*(_DWORD *)(this + 784) == *((_DWORD *)a2 + 2)
      ? (v3 = *(_DWORD *)(this + 788) == *((_DWORD *)a2 + 3))
      : (v3 = 0),
        !v3))
  {
    *(_OWORD *)(this + 776) = *(_OWORD *)a2;
    this = *(_QWORD *)(this + 120);
    if (this)
      return WebCore::MediaPlayer::playerContentBoxRectChanged((WebCore::MediaPlayer *)this, a2);
  }
  return this;
}

void WebKit::RemoteMediaResource::~RemoteMediaResource(WebKit::RemoteMediaResource *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34BA510;
  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned __int8 *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  *(_QWORD *)this = &off_1E34BA748;
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteMediaResource::~RemoteMediaResource(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned int *WebKit::RemoteMediaResource::shutdown(unsigned int *this)
{
  unsigned int *v1;
  unsigned __int8 *v2;
  unsigned __int8 v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;

  v1 = this;
  v2 = (unsigned __int8 *)this + 65;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(1u, v2));
  if ((v3 & 1) == 0)
  {
    v37 = 0;
    WebCore::PlatformMediaResource::setClient((uint64_t)this, (uint64_t *)&v37);
    v5 = v37;
    v37 = 0;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
    v9 = *((_QWORD *)v1 + 4);
    if (!v9)
      goto LABEL_53;
    v10 = *((_QWORD *)v1 + 5);
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEABB3C](v9);
LABEL_14:
    if (*(_QWORD *)(v9 + 24))
      ++*(_QWORD *)(v9 + 8);
    else
      v10 = 0;
    v12 = __ldxr((unsigned __int8 *)v9);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (!v10)
        {
LABEL_53:
          v34 = *((_QWORD *)v1 + 6);
          v35 = *((_QWORD *)v1 + 7);
          *((_QWORD *)v1 + 6) = 0;
          v36 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v36 = &off_1E34BAA20;
          *((_QWORD *)v36 + 1) = v34;
          *((_QWORD *)v36 + 2) = v35;
          v37 = v36;
          WTF::ensureOnMainRunLoop();
          this = v37;
          v37 = 0;
          if (this)
            return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
          return this;
        }
LABEL_23:
        v13 = *((_QWORD *)v1 + 7);
        v14 = (unsigned __int8 *)(v10 + 24);
        if (__ldaxr((unsigned __int8 *)(v10 + 24)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v14))
        {
          goto LABEL_27;
        }
        MEMORY[0x19AEABB3C](v10 + 24);
LABEL_27:
        v17 = (uint64_t *)(v10 + 32);
        v16 = *(_QWORD *)(v10 + 32);
        if (v16)
        {
          v18 = *(_DWORD *)(v16 - 8);
          v19 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = (uint64_t *)(v16 + 24 * v22);
          v24 = *v23;
          if (*v23 != v13)
          {
            v25 = 1;
            while (v24)
            {
              v22 = (v22 + v25) & v18;
              v23 = (uint64_t *)(v16 + 24 * v22);
              v24 = *v23;
              ++v25;
              if (*v23 == v13)
                goto LABEL_34;
            }
            v23 = (uint64_t *)(v16 + 24 * *(unsigned int *)(v16 - 4));
          }
LABEL_34:
          if ((uint64_t *)(v16 + 24 * *(unsigned int *)(v16 - 4)) != v23)
          {
            v26 = (unsigned __int8 *)v23[1];
            *v23 = -1;
            v23[1] = 0;
            if (v26)
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v26, v4);
            ++*(_DWORD *)(*v17 - 16);
            v27 = *v17;
            if (*v17)
              v28 = *(_DWORD *)(v27 - 12) - 1;
            else
              v28 = -1;
            *(_DWORD *)(v27 - 12) = v28;
            v29 = *v17;
            if (*v17)
            {
              v30 = 6 * *(_DWORD *)(v29 - 12);
              v31 = *(_DWORD *)(v29 - 4);
              if (v30 < v31 && v31 >= 9)
                WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(v10 + 32), v31 >> 1);
            }
          }
        }
        v33 = __ldxr(v14);
        if (v33 == 1)
        {
          if (!__stlxr(0, v14))
            goto LABEL_52;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 24));
LABEL_52:
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 16), v4);
        goto LABEL_53;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (!v10)
      goto LABEL_53;
    goto LABEL_23;
  }
  return this;
}

unsigned int *WebCore::PlatformMediaResource::setClient(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v4 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 24);
LABEL_5:
  v6 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v11 = __ldxr(v4);
  if (v11 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebKit::RemoteMediaResource::didPassAccessControlCheck(WebKit::RemoteMediaResource *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 64);
  return v1 & 1;
}

uint64_t WebKit::RemoteMediaResourceLoader::defaultQueue@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v3;
  void *v4;
  uint64_t result;
  char v6;
  char **v7;
  char *v8;

  v3 = atomic_load(&WebKit::RemoteMediaResourceLoader::defaultQueue(void)::onceKey);
  if (v3 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WebKit::RemoteMediaResourceLoader::defaultQueue(void)::onceKey, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::RemoteMediaResourceLoader::defaultQueue(void)::{lambda(void)#1} &&>>);
  }
  v4 = WebKit::RemoteMediaResourceLoader::defaultQueue(void)::messageQueue;
  result = (*(uint64_t (**)(void *))(*(_QWORD *)WebKit::RemoteMediaResourceLoader::defaultQueue(void)::messageQueue
                                             + 48))(WebKit::RemoteMediaResourceLoader::defaultQueue(void)::messageQueue);
  *a1 = v4;
  return result;
}

uint64_t WebCore::PlatformMediaResource::client@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;

  v2 = this;
  v4 = (unsigned __int8 *)(this + 24);
  if (__ldaxr((unsigned __int8 *)(this + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEABB3C](this + 24);
LABEL_5:
  v6 = *(_QWORD *)(v2 + 16);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *a2 = v6;
  v9 = __ldxr(v4);
  if (v9 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

unsigned int *WebKit::RemoteMediaResource::dataSent(WebKit::RemoteMediaResource *this, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;

  WebKit::RemoteMediaResourceLoader::defaultQueue(&v11);
  v6 = v11;
  v11 = 0;
  if (v6)
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 56))(v6);
  WebCore::PlatformMediaResource::client((uint64_t)this, &v11);
  result = v11;
  if (v11)
  {
    (*(void (**)(unsigned int *, WebKit::RemoteMediaResource *, uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, this, a2, a3);
    result = v11;
    v11 = 0;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *WebKit::RemoteMediaResource::accessControlCheckFailed(WebKit::RemoteMediaResource *this, const WebCore::ResourceError *a2)
{
  unsigned int *v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;

  WebKit::RemoteMediaResourceLoader::defaultQueue(&v9);
  v4 = v9;
  v9 = 0;
  if (v4)
    (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 56))(v4);
  atomic_store(0, (unsigned __int8 *)this + 64);
  WebCore::PlatformMediaResource::client((uint64_t)this, &v9);
  result = v9;
  if (v9)
  {
    (*(void (**)(unsigned int *, WebKit::RemoteMediaResource *, const WebCore::ResourceError *))(*(_QWORD *)v9 + 56))(v9, this, a2);
    result = v9;
    v9 = 0;
    if (result)
    {
      v6 = result + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *WebKit::RemoteMediaResource::loadFailed(WebKit::RemoteMediaResource *this, const WebCore::ResourceError *a2)
{
  unsigned int *v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;

  WebKit::RemoteMediaResourceLoader::defaultQueue(&v9);
  v4 = v9;
  v9 = 0;
  if (v4)
    (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 56))(v4);
  WebCore::PlatformMediaResource::client((uint64_t)this, &v9);
  result = v9;
  if (v9)
  {
    (*(void (**)(unsigned int *, WebKit::RemoteMediaResource *, const WebCore::ResourceError *))(*(_QWORD *)v9 + 64))(v9, this, a2);
    result = v9;
    v9 = 0;
    if (result)
    {
      v6 = result + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

unsigned int *WebKit::RemoteMediaResource::loadFinished(WebKit::RemoteMediaResource *this, const WebCore::NetworkLoadMetrics *a2)
{
  unsigned int *v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;

  WebKit::RemoteMediaResourceLoader::defaultQueue(&v9);
  v4 = v9;
  v9 = 0;
  if (v4)
    (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 56))(v4);
  WebCore::PlatformMediaResource::client((uint64_t)this, &v9);
  result = v9;
  if (v9)
  {
    (*(void (**)(unsigned int *, WebKit::RemoteMediaResource *, const WebCore::NetworkLoadMetrics *))(*(_QWORD *)v9 + 72))(v9, this, a2);
    result = v9;
    v9 = 0;
    if (result)
    {
      v6 = result + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

void WebKit::RemoteMediaResourceLoader::~RemoteMediaResourceLoader(WebKit::RemoteMediaResourceLoader *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebKit::RemoteMediaResourceLoader::requestResource@<X0>(uint64_t result@<X0>, WebCore::ResourceRequest *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  IPC::Encoder *v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  uint64_t IdentifierInternal;
  uint64_t v17;
  uint64_t v18;
  WTF::ThreadSafeWeakPtrControlBlock *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  uint64_t *v25;
  WTF::ThreadSafeWeakPtrControlBlock *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  WTF *v50;
  void *v51;
  uint64_t v52;
  IPC::Encoder *v53;

  v5 = *(_QWORD *)(result + 16);
  if (!v5
    || (v6 = *(_QWORD *)(v5 + 8)) == 0
    || (v7 = *(_QWORD *)(v6 + 160)) == 0
    || (v8 = *(_QWORD *)(v7 + 8)) == 0
    || (result = *(_QWORD *)(v8 + 24)) == 0
    || (result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)result, *(_QWORD *)(v8 + 32), &v53), v11 = v53, v53 = 0, !v11))
  {
    *a4 = 0;
    return result;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v11 + 2));
  v12 = *(_QWORD **)(v6 + 160);
  if (v12)
    v12 = (_QWORD *)v12[1];
  v13 = (unsigned __int8 *)v12[3];
  if (v13)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v13, v12[4], &v53);
    v13 = (unsigned __int8 *)v53;
  }
  else
  {
    v53 = 0;
  }
  v14 = WebKit::GPUConnectionToWebProcess::remoteMediaResourceManager((WebKit::GPUConnectionToWebProcess *)v13);
  v15 = v53;
  v53 = 0;
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v15 + 2));
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v52 = IdentifierInternal;
  v17 = WTF::fastMalloc((WTF *)0x48);
  v18 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v18 = 0;
  *(_OWORD *)(v18 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v18 + 24) = v17;
  *(_QWORD *)(v17 + 8) = v18;
  *(_QWORD *)(v17 + 16) = 0;
  *(_BYTE *)(v17 + 24) = 0;
  *(_QWORD *)v17 = &off_1E34BA510;
  v19 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v14 + 16);
  if (v19)
    v19 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v19);
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v14;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
  v21 = *(unsigned int **)(v6 + 8);
  if (v21)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  *(_QWORD *)(v17 + 48) = v21;
  *(_QWORD *)(v17 + 56) = IdentifierInternal;
  *(_WORD *)(v17 + 64) = 0;
  v23 = (unsigned __int8 *)(v14 + 24);
  if (__ldaxr((unsigned __int8 *)(v14 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v23))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEABB3C](v14 + 24);
LABEL_23:
  v25 = (uint64_t *)(v14 + 32);
  v26 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v17 + 8);
  if (v26)
    v27 = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::weakRef(v26);
  else
    v27 = 0;
  v28 = *v25;
  if (*v25
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v25),
        (v28 = *v25) != 0))
  {
    v29 = *(_DWORD *)(v28 - 8);
  }
  else
  {
    v29 = 0;
  }
  v30 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
  v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
  v33 = v29 & ((v32 >> 31) ^ v32);
  v34 = (uint64_t *)(v28 + 24 * v33);
  v35 = *v34;
  if (!*v34)
  {
LABEL_36:
    v38 = (unsigned __int8 *)v34[1];
    *v34 = IdentifierInternal;
    v34[1] = (uint64_t)v27;
    if (v38)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v38, v20);
    v34[2] = v17;
    v39 = *v25;
    if (*v25)
      v40 = *(_DWORD *)(v39 - 12) + 1;
    else
      v40 = 1;
    *(_DWORD *)(v39 - 12) = v40;
    v41 = *v25;
    if (*v25)
      v42 = *(_DWORD *)(v41 - 12);
    else
      v42 = 0;
    v43 = (*(_DWORD *)(v41 - 16) + v42);
    v44 = *(unsigned int *)(v41 - 4);
    if (v44 > 0x400)
    {
      if (v44 > 2 * v43)
        goto LABEL_49;
    }
    else if (3 * v44 > 4 * v43)
    {
      goto LABEL_49;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v25);
    goto LABEL_49;
  }
  v36 = 0;
  v37 = 1;
  while (v35 != IdentifierInternal)
  {
    if (v35 == -1)
      v36 = v34;
    v33 = (v33 + v37) & v29;
    v34 = (uint64_t *)(v28 + 24 * v33);
    v35 = *v34;
    ++v37;
    if (!*v34)
    {
      if (v36)
      {
        *v36 = 0;
        v36[1] = 0;
        v36[2] = 0;
        --*(_DWORD *)(*v25 - 16);
        v34 = v36;
      }
      goto LABEL_36;
    }
  }
  if (v27)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v27, v20);
LABEL_49:
  v45 = __ldxr(v23);
  if (v45 == 1)
  {
    if (!__stlxr(0, v23))
      goto LABEL_54;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v23);
LABEL_54:
  v46 = *(_QWORD *)(v6 + 112);
  v47 = *(_QWORD *)(v6 + 88);
  v48 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v48 = 171;
  *(_QWORD *)(v48 + 8) = v47;
  *(_QWORD *)(v48 + 528) = v48 + 16;
  *(_QWORD *)(v48 + 536) = v48 + 16;
  *(_OWORD *)(v48 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v48 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v48);
  v53 = (IPC::Encoder *)v48;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v48, &v52);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v48, a2);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v48, 4uLL, 4) = a3;
  IPC::Connection::sendMessageImpl(v46, (uint64_t *)&v53, 0, 0);
  result = (uint64_t)v53;
  v53 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v49);
    result = WTF::fastFree(v50, v51);
  }
  *a4 = v17;
  return result;
}

IPC::Encoder *WebKit::RemoteMediaResourceLoader::sendH2Ping(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  WTF::StringImpl *v18;
  CFTypeRef v19;
  __int128 v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  CFTypeRef v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26[2];
  __int128 v27;
  __int128 v28;
  WTF::StringImpl *v29;
  int v30;
  __int16 v31;
  CFTypeRef cf;
  char v33;
  char v34;
  _OWORD v35[3];
  WTF::StringImpl *v36;
  int v37;
  __int16 v38;
  CFTypeRef v39;
  char v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = *(os_unfair_lock_s **)(v6 + 112);
    v8 = *(_QWORD *)(v6 + 88);
    v9 = *a3;
    *a3 = 0;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E34BA940;
    v10[1] = v9;
    v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 174;
    *(_QWORD *)(v12 + 8) = v8;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v26[0] = (WTF::StringImpl *)v12;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2);
    *(_QWORD *)&v35[0] = v10;
    *((_QWORD *)&v35[0] + 1) = v11;
    IPC::Connection::sendMessageWithAsyncReply(v7, v26, (uint64_t *)v35, 0, 0);
    v14 = *(_QWORD *)&v35[0];
    *(_QWORD *)&v35[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    result = v26[0];
    v26[0] = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  else
  {
    WebCore::createInternalError();
    v18 = v29;
    v38 = v31;
    v37 = v30;
    v19 = cf;
    v29 = 0;
    cf = 0;
    v20 = *(_OWORD *)v26;
    v26[0] = 0;
    v26[1] = 0;
    v35[0] = v20;
    v35[1] = v27;
    LODWORD(v27) = v27 & 0xFFFFFFFE;
    v35[2] = v28;
    v36 = v18;
    v39 = v19;
    v40 = v33;
    v41 = 1;
    v21 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v21 + 16))(v21, v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (v41 != -1)
      ((void (*)(char *, _OWORD *))off_1E34BA768[v41])(&v34, v35);
    v41 = -1;
    v23 = cf;
    cf = 0;
    if (v23)
      CFRelease(v23);
    v24 = v29;
    v29 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v22);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v26[1];
    v26[1] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v22);
      else
        *(_DWORD *)v25 -= 2;
    }
    result = v26[0];
    v26[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (IPC::Encoder *)WTF::StringImpl::destroy(result, v22);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::RemoteMediaResourceManager::~RemoteMediaResourceManager(WebKit::RemoteMediaResourceManager *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  int v7;
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD *v10;

  *(_QWORD *)this = off_1E34BA578;
  v2 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 24);
LABEL_5:
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34BAA98;
  v5[1] = v4;
  v10 = v5;
  WTF::callOnMainRunLoop();
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v2))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v8 = (unsigned __int8 **)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v8);
  v9 = *((_QWORD *)this + 4);
  if (v9)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v9, v6);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v6);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteMediaResourceManager::~RemoteMediaResourceManager(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 **WebKit::RemoteMediaResourceManager::stopListeningForIPC(WebKit::RemoteMediaResourceManager *this)
{
  return WebKit::RemoteMediaResourceManager::initializeConnection(this, 0);
}

unsigned __int8 **WebKit::RemoteMediaResourceManager::initializeConnection(WebKit::RemoteMediaResourceManager *this, unsigned __int8 **a2)
{
  unsigned __int8 **result;
  unsigned __int8 **v4;
  unsigned __int8 **v5;

  result = (unsigned __int8 **)*((_QWORD *)this + 5);
  if (result != a2)
  {
    v4 = a2;
    if (result)
      IPC::Connection::removeWorkQueueMessageReceiver((uint64_t)result, 0x63u, 0);
    if (v4)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4);
    result = (unsigned __int8 **)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v4;
    if (result)
    {
      result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(result);
      v4 = (unsigned __int8 **)*((_QWORD *)this + 5);
    }
    if (v4)
    {
      WebKit::RemoteMediaResourceLoader::defaultQueue(&v5);
      IPC::Connection::addWorkQueueMessageReceiver((uint64_t)v4, 0x63u, (uint64_t)v5, (uint64_t)this, 0);
      result = v5;
      v5 = 0;
      if (result)
        return (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **))*result + 7))(result);
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaResourceManager::resourceForId@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;
  void *v8;
  int v9;
  WTF::ThreadSafeWeakPtrControlBlock *v10[2];
  uint64_t v11;

  v11 = a2;
  v5 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 24);
LABEL_5:
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((WTF::ThreadSafeWeakPtrControlBlock *)(a1 + 32), &v11, v10);
  result = (unsigned __int8 *)v10[0];
  if (v10[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>((unsigned __int8 *)v10[0], (uint64_t)v10[1], a3);
    result = (unsigned __int8 *)v10[0];
    v10[0] = 0;
    if (result)
      result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v8);
  }
  else
  {
    *a3 = 0;
  }
  v9 = __ldxr(v5);
  if (v9 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

unsigned int *WebKit::RemoteMediaResourceManager::responseReceived(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t *a5)
{
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int *result;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int *v27;

  WebKit::RemoteMediaResourceLoader::defaultQueue(&v27);
  v10 = v27;
  v27 = 0;
  if (v10)
    (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 56))(v10);
  WebKit::RemoteMediaResourceManager::resourceForId(a1, a2, &v25);
  v11 = v25;
  if (v25)
  {
    WebKit::RemoteMediaResourceLoader::defaultQueue(&v27);
    v12 = v27;
    v27 = 0;
    if (v12)
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 56))(v12);
    WebCore::PlatformMediaResource::client(v11, &v27);
    v13 = v27;
    if (v27)
    {
      atomic_store(a4, (unsigned __int8 *)(v11 + 64));
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v11 + 8));
      v14 = *a5;
      *a5 = 0;
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v15 = &off_1E34BAA48;
      v15[1] = v11;
      v15[2] = v14;
      v26 = v15;
      (*(void (**)(unsigned int *, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v13 + 16))(v13, v11, a3, &v26);
      v17 = v26;
      v26 = 0;
      if (v17)
        (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    }
    else
    {
      v20 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
    result = v27;
    v27 = 0;
    if (result)
    {
      v21 = result + 2;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, result + 2);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  else
  {
    v18 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0);
    result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v24 = v25;
  v25 = 0;
  if (v24)
    return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v24 + 8), v16);
  return result;
}

void WebKit::RemoteMediaResourceManager::redirectReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t v20;
  _QWORD v21[24];
  CFTypeRef cf;
  uint64_t v23;

  WebKit::RemoteMediaResourceLoader::defaultQueue(v21);
  v10 = v21[0];
  v21[0] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
  WebKit::RemoteMediaResourceManager::resourceForId(a1, a2, &v23);
  v11 = v23;
  if (v23)
  {
    WebKit::RemoteMediaResourceLoader::defaultQueue(v21);
    v12 = v21[0];
    v21[0] = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
    WebCore::PlatformMediaResource::client(v11, v21);
    if (v21[0])
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v21[0] + 24))(v21[0], v11, a3, a4, a5);
      v14 = (unsigned int *)v21[0];
      v21[0] = 0;
      if (v14)
      {
        v15 = v14 + 2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v14 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
        }
      }
    }
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v21);
    v18 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 16))(v18, v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = cf;
    cf = 0;
    if (v19)
      CFRelease(v19);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v21);
  }
  v20 = v23;
  v23 = 0;
  if (v20)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v20 + 8), v13);
}

unsigned __int8 *WebKit::RemoteMediaResourceManager::dataSent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteMediaResource *v8;
  unsigned __int8 *result;
  void *v10;
  WebKit::RemoteMediaResource *v11;
  WebKit::RemoteMediaResource *v12;

  WebKit::RemoteMediaResourceLoader::defaultQueue(&v12);
  v8 = v12;
  v12 = 0;
  if (v8)
    (*(void (**)(WebKit::RemoteMediaResource *))(*(_QWORD *)v8 + 56))(v8);
  WebKit::RemoteMediaResourceManager::resourceForId(a1, a2, &v12);
  result = (unsigned __int8 *)v12;
  if (v12)
  {
    result = (unsigned __int8 *)WebKit::RemoteMediaResource::dataSent(v12, a3, a4);
    v11 = v12;
    v12 = 0;
    if (v11)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*((unsigned __int8 **)v11 + 1), v10);
  }
  return result;
}

void WebKit::RemoteMediaResourceManager::dataReceived(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  _QWORD v20[2];
  char v21;
  WebCore::SharedMemory *v22;
  _BYTE v23[16];
  char v24;
  uint64_t v25;

  WebKit::RemoteMediaResourceManager::resourceForId(a1, a2, &v25);
  if (v25)
  {
    IPC::SharedBufferReference::sharedCopy(a3, &v22);
    if (v22)
    {
      WebCore::SharedMemory::createHandle();
      if (!v24)
      {
        LOBYTE(v20[0]) = 0;
        v21 = 0;
        v18 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 16))(v18, v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        if (v21)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v20);
        goto LABEL_18;
      }
      v6 = v25;
      WebCore::SharedMemory::createSharedBuffer(v22);
      WebKit::RemoteMediaResourceLoader::defaultQueue(v20);
      v7 = v20[0];
      v20[0] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
      WebCore::PlatformMediaResource::client(v6, v20);
      if (v20[0])
      {
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v20[0] + 48))(v20[0], v6);
        v9 = (unsigned int *)v20[0];
        v20[0] = 0;
        if (v9)
        {
          v10 = v9 + 2;
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            atomic_store(1u, v9 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
          }
        }
      }
      if (v19)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v8);
    }
    else
    {
      v23[0] = 0;
      v24 = 0;
    }
    v15 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 16))(v15, v23);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_18:
    if (v24)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v23);
    v16 = (unsigned int *)v22;
    v22 = 0;
    if (v16)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v16);
    goto LABEL_22;
  }
  v23[0] = 0;
  v24 = 0;
  v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 16))(v13, v23);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v24)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v23);
LABEL_22:
  v17 = v25;
  v25 = 0;
  if (v17)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v17 + 8), v14);
}

unsigned __int8 *WebKit::RemoteMediaResourceManager::accessControlCheckFailed(uint64_t a1, uint64_t a2, const WebCore::ResourceError *a3)
{
  WebKit::RemoteMediaResource *v6;
  unsigned __int8 *result;
  void *v8;
  WebKit::RemoteMediaResource *v9;
  WebKit::RemoteMediaResource *v10;

  WebKit::RemoteMediaResourceLoader::defaultQueue(&v10);
  v6 = v10;
  v10 = 0;
  if (v6)
    (*(void (**)(WebKit::RemoteMediaResource *))(*(_QWORD *)v6 + 56))(v6);
  WebKit::RemoteMediaResourceManager::resourceForId(a1, a2, &v10);
  result = (unsigned __int8 *)v10;
  if (v10)
  {
    result = (unsigned __int8 *)WebKit::RemoteMediaResource::accessControlCheckFailed(v10, a3);
    v9 = v10;
    v10 = 0;
    if (v9)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*((unsigned __int8 **)v9 + 1), v8);
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaResourceManager::loadFailed(uint64_t a1, uint64_t a2, const WebCore::ResourceError *a3)
{
  WebKit::RemoteMediaResource *v6;
  unsigned __int8 *result;
  void *v8;
  WebKit::RemoteMediaResource *v9;
  WebKit::RemoteMediaResource *v10;

  WebKit::RemoteMediaResourceLoader::defaultQueue(&v10);
  v6 = v10;
  v10 = 0;
  if (v6)
    (*(void (**)(WebKit::RemoteMediaResource *))(*(_QWORD *)v6 + 56))(v6);
  WebKit::RemoteMediaResourceManager::resourceForId(a1, a2, &v10);
  result = (unsigned __int8 *)v10;
  if (v10)
  {
    result = (unsigned __int8 *)WebKit::RemoteMediaResource::loadFailed(v10, a3);
    v9 = v10;
    v10 = 0;
    if (v9)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*((unsigned __int8 **)v9 + 1), v8);
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaResourceManager::loadFinished(uint64_t a1, uint64_t a2, const WebCore::NetworkLoadMetrics *a3)
{
  WebKit::RemoteMediaResource *v6;
  unsigned __int8 *result;
  void *v8;
  WebKit::RemoteMediaResource *v9;
  WebKit::RemoteMediaResource *v10;

  WebKit::RemoteMediaResourceLoader::defaultQueue(&v10);
  v6 = v10;
  v10 = 0;
  if (v6)
    (*(void (**)(WebKit::RemoteMediaResource *))(*(_QWORD *)v6 + 56))(v6);
  WebKit::RemoteMediaResourceManager::resourceForId(a1, a2, &v10);
  result = (unsigned __int8 *)v10;
  if (v10)
  {
    result = (unsigned __int8 *)WebKit::RemoteMediaResource::loadFinished(v10, a3);
    v9 = v10;
    v10 = 0;
    if (v9)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*((unsigned __int8 **)v9 + 1), v8);
  }
  return result;
}

void WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(unsigned int **this)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned __int8 *v12;

  WebKit::RemoteMediaSourceProxy::disconnect((WebKit::RemoteMediaSourceProxy *)this);
  v3 = *((unsigned int *)this + 23);
  if ((_DWORD)v3)
  {
    v4 = this[10];
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 8), v2);
      v4 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)this[10];
  if (v7)
  {
    this[10] = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v7, v2);
  }
  v8 = this[9];
  this[9] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v2);
    }
  }
  v11 = this[8];
  this[8] = 0;
  if (v11)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*((unsigned __int8 **)v11 + 1), v2);
  v12 = (unsigned __int8 *)this[4];
  this[4] = 0;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v12, v2);
  this[2] = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 3, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 *WebKit::RemoteMediaSourceProxy::disconnect(WebKit::RemoteMediaSourceProxy *this)
{
  unsigned __int8 *result;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  result = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 5), &v5);
    if (v5)
    {
      IPC::MessageReceiverMap::removeMessageReceiver(v5 + 56, 0x68u, *((_QWORD *)this + 6));
      result = (unsigned __int8 *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = 0;
      if (result)
        result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
      *((_QWORD *)this + 5) = 0;
      v4 = v5;
      v5 = 0;
      if (v4)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 16));
    }
  }
  return result;
}

void `non-virtual thunk to'WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(unsigned int **this)
{
  WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this - 2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteMediaSourceProxy::~RemoteMediaSourceProxy(this - 2);
  WTF::fastFree(v1, v2);
}

unsigned __int8 *WebKit::RemoteMediaSourceProxy::setPrivateAndOpen(unsigned __int8 *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a2 = 0;
  v3 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = v2;
  if (v3)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return result;
}

unsigned __int8 *WebKit::RemoteMediaSourceProxy::waitForTarget@<X0>(WebKit::RemoteMediaSourceProxy *this@<X0>, const WebCore::SeekTarget *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;
  uint64_t v7;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  IPC::Encoder *v28;
  __int128 v29;
  __int128 v30;

  v5 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (!v5)
  {
    v23 = 0;
LABEL_3:
    LOBYTE(v25) = 4;
    v28 = 0;
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = "waitForTarget";
    *(_QWORD *)&v30 = 0;
    result = (unsigned __int8 *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v25, (WTF::Logger::LogSiteIdentifier *)&v28, a3);
    goto LABEL_4;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((_QWORD *)this + 5), &v23);
  if (!v23)
    goto LABEL_3;
  v9 = *(os_unfair_lock_s **)(v23 + 48);
  v10 = *((_QWORD *)this + 6);
  v28 = 0;
  *(_QWORD *)&v29 = 0;
  *((_QWORD *)&v29 + 1) = "sendWithPromisedReply";
  *(_QWORD *)&v30 = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v25, 0, (WTF::Logger::LogSiteIdentifier *)&v28);
  v11 = v25;
  if (v25)
  {
    v12 = (unsigned int *)(v25 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = v25;
  }
  else
  {
    v14 = 0;
  }
  *a3 = v11;
  v25 = 0;
  v29 = v26;
  v30 = v27;
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v15 = off_1E34BAB10;
  *(_QWORD *)(v15 + 8) = v14;
  v28 = 0;
  v16 = v30;
  *(_OWORD *)(v15 + 16) = v29;
  *(_OWORD *)(v15 + 32) = v16;
  v24[0] = v15;
  v24[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v28);
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 185;
  *(_QWORD *)(v17 + 8) = v10;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v28 = (IPC::Encoder *)v17;
  IPC::ArgumentCoder<WebCore::SeekTarget,void>::encode((IPC::Encoder *)v17, a2);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v9, &v28, v24, 0, 0);
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v18);
    WTF::fastFree(v20, v21);
  }
  v22 = v24[0];
  v24[0] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  result = (unsigned __int8 *)WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v25);
LABEL_4:
  v7 = v23;
  v23 = 0;
  if (v7)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 16));
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>@<X0>(char *a1@<X0>, WTF::Logger::LogSiteIdentifier *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = WTF::fastMalloc((WTF *)0x88);
  v7 = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromise(v6, a2);
  *a3 = v7;
  return WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v7, a1, a2);
}

unsigned __int8 *WebKit::RemoteMediaSourceProxy::seekToTime@<X0>(WebKit::RemoteMediaSourceProxy *this@<X0>, const WTF::MediaTime *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;
  uint64_t v7;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  IPC::Encoder *v28;
  __int128 v29;
  __int128 v30;

  v5 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (!v5)
  {
    v23 = 0;
LABEL_3:
    LOBYTE(v25) = 4;
    v28 = 0;
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = "seekToTime";
    *(_QWORD *)&v30 = 0;
    result = (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v25, (WTF::Logger::LogSiteIdentifier *)&v28, a3);
    goto LABEL_4;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((_QWORD *)this + 5), &v23);
  if (!v23)
    goto LABEL_3;
  v9 = *(os_unfair_lock_s **)(v23 + 48);
  v10 = *((_QWORD *)this + 6);
  v28 = 0;
  *(_QWORD *)&v29 = 0;
  *((_QWORD *)&v29 + 1) = "sendWithPromisedReply";
  *(_QWORD *)&v30 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v25, 0, (WTF::Logger::LogSiteIdentifier *)&v28);
  v11 = v25;
  if (v25)
  {
    v12 = (unsigned int *)(v25 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = v25;
  }
  else
  {
    v14 = 0;
  }
  *a3 = v11;
  v25 = 0;
  v29 = v26;
  v30 = v27;
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v15 = off_1E34BAB60;
  *(_QWORD *)(v15 + 8) = v14;
  v28 = 0;
  v16 = v30;
  *(_OWORD *)(v15 + 16) = v29;
  *(_OWORD *)(v15 + 32) = v16;
  v24[0] = v15;
  v24[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v28);
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 184;
  *(_QWORD *)(v17 + 8) = v10;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v28 = (IPC::Encoder *)v17;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v17, a2);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v9, &v28, v24, 0, 0);
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v18);
    WTF::fastFree(v20, v21);
  }
  v22 = v24[0];
  v24[0] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  result = (unsigned __int8 *)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v25);
LABEL_4:
  v7 = v23;
  v23 = 0;
  if (v7)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 16));
  return result;
}

unsigned __int8 *WebKit::RemoteMediaSourceProxy::addSourceBuffer(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t IdentifierInternal;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  result = *(unsigned __int8 **)(a1 + 32);
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 40), &v27);
  else
    v27 = 0;
  v7 = *(_QWORD *)(a1 + 72);
  if (v7 && *(_QWORD *)(v7 + 8))
  {
    if (!v27)
      return result;
    v26 = 0;
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 64) + 32))(*(_QWORD *)(a1 + 64), a2, *(unsigned __int8 *)(a1 + 56), &v26);
    IdentifierInternal = 0;
    v10 = 0;
    if (!(_DWORD)v8)
    {
      IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      v11 = v27;
      v25 = v26;
      v26 = 0;
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v13 = WTF::fastMalloc((WTF *)0x70);
      result = (unsigned __int8 *)WebKit::RemoteSourceBufferProxy::RemoteSourceBufferProxy(v13, v11, IdentifierInternal, &v25, v12);
      if (v25)
        result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v25 + 8));
      v14 = *(unsigned int *)(a1 + 92);
      if ((_DWORD)v14 == *(_DWORD *)(a1 + 88))
      {
        v15 = v14 + (v14 >> 2);
        if (v15 >= 0x10)
          v16 = v15 + 1;
        else
          v16 = 16;
        if (v16 <= v14 + 1)
          v17 = v14 + 1;
        else
          v17 = v16;
        if (v17 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v18 = *(void **)(a1 + 80);
        v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
        *(_DWORD *)(a1 + 88) = v17;
        *(_QWORD *)(a1 + 80) = v19;
        memcpy(v19, v18, 8 * v14);
        if (v18)
        {
          if (*(void **)(a1 + 80) == v18)
          {
            *(_QWORD *)(a1 + 80) = 0;
            *(_DWORD *)(a1 + 88) = 0;
          }
          WTF::fastFree((WTF *)v18, v20);
        }
        v14 = *(unsigned int *)(a1 + 92);
        v21 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 8 * v14);
      }
      else
      {
        v21 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 8 * v14);
      }
      *v21 = v13;
      *(_DWORD *)(a1 + 92) = v14 + 1;
      v10 = 1;
    }
    v22 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v8, IdentifierInternal, v10);
    result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v26;
    v26 = 0;
    if (v23)
      result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v23 + 8));
  }
  v24 = v27;
  v27 = 0;
  if (v24)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v24 + 16));
  return result;
}

void WebKit::RemoteRemoteCommandListenerProxy::~RemoteRemoteCommandListenerProxy(WebKit::RemoteRemoteCommandListenerProxy *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;

  *(_QWORD *)this = off_1E34BA648;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteRemoteCommandListenerProxy::~RemoteRemoteCommandListenerProxy(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *WebKit::RemoteRemoteCommandListenerProxy::updateSupportedCommands(uint64_t a1, unsigned int *a2, char a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned __int8 *result;
  WebKit::GPUConnectionToWebProcess *v11;
  WebKit::GPUConnectionToWebProcess *v12[3];

  v7 = (uint64_t *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    *v7 = 0;
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v8 = a2[3];
  if ((_DWORD)v8)
  {
    v9 = *(_BYTE **)a2;
    do
    {
      WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add(v7, v9++, (uint64_t)v12);
      --v8;
    }
    while (v8);
  }
  *(_BYTE *)(a1 + 56) = a3;
  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), v12);
    result = (unsigned __int8 *)v12[0];
    if (v12[0])
    {
      result = (unsigned __int8 *)WebKit::GPUConnectionToWebProcess::updateSupportedRemoteCommands((uint64_t)v12[0]);
      v11 = v12[0];
      v12[0] = 0;
      if (v11)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*((unsigned __int8 **)v11 + 2));
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerAcceleratedCompositingEnabled(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerIsLooping(WebCore::MediaPlayerClient *this)
{
  return 0;
}

void WebCore::MediaPlayerClient::mediaPlayerElementId(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebKit::RemoteMediaPlayerProxy::allowedMediaContainerTypes(WebKit::RemoteMediaPlayerProxy *this)
{
  return (uint64_t)this + 504;
}

uint64_t WebKit::RemoteMediaPlayerProxy::allowedMediaCodecTypes(WebKit::RemoteMediaPlayerProxy *this)
{
  return (uint64_t)this + 528;
}

uint64_t WebKit::RemoteMediaPlayerProxy::allowedMediaVideoCodecIDs(WebKit::RemoteMediaPlayerProxy *this)
{
  return (uint64_t)this + 552;
}

uint64_t WebKit::RemoteMediaPlayerProxy::allowedMediaAudioCodecIDs(WebKit::RemoteMediaPlayerProxy *this)
{
  return (uint64_t)this + 576;
}

uint64_t WebKit::RemoteMediaPlayerProxy::allowedMediaCaptionFormatTypes(WebKit::RemoteMediaPlayerProxy *this)
{
  return (uint64_t)this + 600;
}

double WebCore::MediaPlayerClient::documentSecurityOrigin@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void WebCore::MediaPlayerClient::audioOutputDeviceId(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::MediaPlayerClient::audioOutputDeviceIdOverride(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerQueueTaskOnEventLoop()
{
  return WTF::callOnMainThread();
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerPrefersSandboxedParsing(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 731);
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerShouldDisableHDR(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((unsigned __int8 *)this + 732);
}

float WebKit::RemoteMediaPlayerProxy::mediaPlayerVideoLayerSize(WebKit::RemoteMediaPlayerProxy *this)
{
  return *((float *)this + 178);
}

uint64_t WebCore::MediaPlayerClient::isGStreamerHolePunchingEnabled(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerClient::mediaPlayerClientIdentifier(WebCore::MediaPlayerClient *this)
{
  return -1;
}

uint64_t WebCore::MediaPlayerClient::canShowWhileLocked(WebCore::MediaPlayerClient *this)
{
  return 0;
}

uint64_t WebKit::RemoteMediaResourceLoader::targetDispatcher@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = WebKit::RemoteMediaResourceLoader::defaultQueue(&v4);
  *a1 = v4 + 32;
  return result;
}

uint64_t WebCore::MediaSourcePrivateClient::logger(WebCore::MediaSourcePrivateClient *this)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v5 + 16));
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 30))
  {
    v5 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(int **)a2;
      v8 = 4 * v6;
      do
      {
        v9 = *v7++;
        *v5++ = v9;
        v8 -= 4;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;

  result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if ((_DWORD)result)
    return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
        && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
        && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return result;
}

{
  uint64_t result;

  result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
    result = WebCore::operator==((unsigned __int8 *)(a1 + 16), (unsigned __int8 *)(a2 + 16));
    if (!(_DWORD)result)
      return result;
    return *(double *)(a1 + 24) == *(double *)(a2 + 24) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  }
  return result;
}

{
  uint64_t result;

  result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if ((_DWORD)result)
  {
    result = WebCore::operator==();
    if ((_DWORD)result)
    {
      result = WebCore::operator==();
      if ((_DWORD)result)
        return *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72);
    }
  }
  return result;
}

BOOL WebCore::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  int v4;
  BOOL v5;
  _BOOL8 v6;

  v2 = a2[1];
  if (a1[1])
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if ((a1[1] != 0) != (v2 != 0))
      return 0;
  }
  else if (*a1 != *a2)
  {
    return 0;
  }
  v4 = a2[3];
  if (a1[3])
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (a1[2] == a2[2])
      goto LABEL_17;
    return 0;
  }
  if ((a1[3] != 0) != (v4 != 0))
    return 0;
LABEL_17:
  if (a1[5] && a2[5])
  {
    if (a1[4] != a2[4])
      return 0;
  }
  else if ((a1[5] != 0) != (a2[5] != 0))
  {
    return 0;
  }
  v6 = (a1[7] != 0) == (a2[7] != 0);
  if (a1[7] && a2[7])
    return a1[6] == a2[6];
  return v6;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31MediaPlaybackTargetContextCocoaENS8_30MediaPlaybackTargetContextMockEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::MediaPlaybackTargetContextCocoa *this)
{
  WebCore::MediaPlaybackTargetContextCocoa::~MediaPlaybackTargetContextCocoa(this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31MediaPlaybackTargetContextCocoaENS8_30MediaPlaybackTargetContextMockEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  if (a2 != a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebKit::DocumentEditingContext::TextRectAndRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *(const void **)a2, 32 * v4);
      v4 = *(_DWORD *)(a1 + 12);
    }
    v6 = *(unsigned int *)(a2 + 12);
    if (v4 != (_DWORD)v6)
    {
      v7 = v4;
      v8 = (_OWORD *)(*(_QWORD *)a1 + 32 * v4);
      v9 = (__int128 *)(*(_QWORD *)a2 + 32 * v7);
      v10 = 32 * v6 - 32 * v7;
      do
      {
        v11 = *v9;
        v12 = v9[1];
        v9 += 2;
        *v8 = v11;
        v8[1] = v12;
        v8 += 2;
        v10 -= 32;
      }
      while (v10);
      v4 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v4;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 27))
  {
    v5 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(__int128 **)a2;
      v8 = 32 * v6;
      do
      {
        v9 = *v7;
        v10 = v7[1];
        v7 += 2;
        *v5 = v9;
        v5[1] = v10;
        v5 += 2;
        v8 -= 32;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore27VideoPlaybackQualityMetricsENS3_18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit22RemoteMediaPlayerProxy24updateCachedVideoMetricsEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSO_EED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34BA690;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore27VideoPlaybackQualityMetricsENS3_18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit22RemoteMediaPlayerProxy24updateCachedVideoMetricsEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSO_EED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BA690;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore27VideoPlaybackQualityMetricsENS3_18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit22RemoteMediaPlayerProxy24updateCachedVideoMetricsEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS4_S5_EEE_vJSO_EE4callESO_(IPC::Encoder *result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;

  v2 = *((_QWORD *)result + 1);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = *((_QWORD *)result + 2);
    if (*((_DWORD *)a2 + 8))
    {
      if (*(_BYTE *)(v4 + 432))
        *(_BYTE *)(v4 + 432) = 0;
    }
    else
    {
      v5 = (_OWORD *)(v4 + 400);
      if (*(_BYTE *)(v4 + 432))
      {
        v6 = *a2;
        *(_OWORD *)(v4 + 412) = *(__int128 *)((char *)a2 + 12);
        *v5 = v6;
      }
      else
      {
        v7 = a2[1];
        *v5 = *a2;
        *(_OWORD *)(v4 + 416) = v7;
        *(_BYTE *)(v4 + 432) = 1;
      }
      if (*((_DWORD *)a2 + 8))
      {
        v14 = std::__throw_bad_variant_access[abi:sn180100]();
        return (IPC::Encoder *)WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(v14);
      }
      v8 = *(_QWORD *)(v4 + 112);
      v9 = *(_QWORD *)(v4 + 88);
      v10 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v10 = 180;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(v10 + 528) = v10 + 16;
      *(_QWORD *)(v10 + 536) = v10 + 16;
      *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v10 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
      v15 = (IPC::Encoder *)v10;
      IPC::ArgumentCoder<WebCore::VideoPlaybackQualityMetrics,void>::encode((IPC::Encoder *)v10, a2);
      IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v15, 0, 0);
      result = v15;
      v15 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v11);
        result = (IPC::Encoder *)WTF::fastFree(v12, v13);
      }
    }
    *(_BYTE *)(v4 + 768) = 0;
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34BA6B8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BA6E8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34BA6B8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BA6E8;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  WTF *v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t i;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  unsigned __int8 *v37;
  uint64_t *v39;
  int v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  char *v44;
  WTF *v45[2];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint8_t buf[16];
  const char *v56;
  uint64_t v57;
  int v58;
  int v59;
  _DWORD v60[4];
  uint64_t v61;
  int v62;
  _DWORD v63[8];
  _QWORD v64[3];

  v64[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 32);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v44 = (char *)v10;
    WTF::String::String((WTF::String *)&v53, v10);
    WTF::String::String((WTF::String *)&v52, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v50, "[");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v49, a2);
    WTF::String::String((WTF::String *)&v48, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v46, "]");
    result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
    if (!v54)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v46;
    v46 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v47;
    v47 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v48;
    v48 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v49;
    v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v50;
    v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v51;
    v51 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v52;
    v52 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v53;
    v53 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = (WTF *)os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v22 = v45[0];
      v45[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = (WTF *)WTF::fastFree(v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers(v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v43 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], v44);
                LODWORD(v56) = 0;
                WTF::String::String((WTF::String *)&v57, " then() call made from ");
                v58 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v59 = 0;
                WTF::String::String((WTF::String *)v60, "[");
                v60[2] = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v61, a2);
                v62 = 0;
                WTF::String::String((WTF::String *)v63, " callback:");
                v63[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v63[6] = 0;
                WTF::String::String((WTF::String *)v64, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v31 + 16))(v31, v9, 4, v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v32);
                for (i = 120; i != -8; i -= 16)
                {
                  v34 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v43);
            }
            v35 = __ldxr(v25);
            if (v35 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v36 = v54;
    v54 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  v37 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v37))
  {
    goto LABEL_80;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_80:
  v39 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
      goto LABEL_85;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
LABEL_85:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (v39)
  {
    *(_OWORD *)buf = 0uLL;
    v56 = "<chained completion promise>";
    v57 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v39, (WTF::NativePromiseBase *)buf);
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v39)
  {
    v41 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v39);
    return WTF::fastFree((WTF *)v41, v42);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t *std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    v4 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(result);
    return (uint64_t *)WTF::fastFree((WTF *)v4, v5);
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,void,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WTF::StringImpl *WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(uint64_t *a1, WTF::NativePromiseBase *a2)
{
  uint64_t isSettled;
  uint64_t v5;
  WTF::StringImpl *result;
  BOOL v7;

  isSettled = *a1;
  if (isSettled)
  {
    isSettled = WTF::NativePromise<void,void,0u>::isSettled(isSettled);
    v5 = *a1;
    if (!(_DWORD)isSettled)
      return WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(v5, a2);
  }
  else
  {
    v5 = 0;
  }
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*(_BYTE *)result)
    v7 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v7 = 0;
  if (v7)
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)result, 4u, a2, " ignored already resolved or rejected ", v5);
  return result;
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  WTF::LogArgument<void const*>::toString();
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a2 + 16));
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>((uint64_t)"NativePromise", 14, (uint64_t *)&v8, 60, (uint64_t *)&v7, 62, a1);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *a1;
  v19 = *a2;
  v20 = v9;
  v18 = *a3;
  v10 = *a4;
  v16 = *a5;
  v17 = v10;
  v11 = *a6;
  v14 = *a7;
  v15 = v11;
  v13 = *a8;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v20, &v19, &v18, &v17, &v16, &v15, &v14, &v13, a9);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, _QWORD *a9@<X8>)
{
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _BYTE v30[4];
  int v31;

  if (*a1)
    v18 = *(_DWORD *)(*a1 + 4);
  else
    v18 = 0;
  if (*a2)
    v19 = *(unsigned int *)(*a2 + 4);
  else
    v19 = 0;
  if (*a3)
    v20 = *(_DWORD *)(*a3 + 4);
  else
    v20 = 0;
  if (*a4)
    v21 = *(_DWORD *)(*a4 + 4);
  else
    v21 = 0;
  if (*a5)
    v22 = *(_DWORD *)(*a5 + 4);
  else
    v22 = 0;
  if (*a6)
    v23 = *(_DWORD *)(*a6 + 4);
  else
    v23 = 0;
  if (*a7)
    v24 = *(_DWORD *)(*a7 + 4);
  else
    v24 = 0;
  if (*a8)
    v25 = *(_DWORD *)(*a8 + 4);
  else
    v25 = 0;
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v19, v20, v21, v22, v23, v24, v25, (uint64_t)v30);
  if (v18 < 0 || v30[0] || (result = (v18 + v31), __OFADD__(v18, v31)))
  {
    *a9 = 0;
  }
  else
  {
    v27 = *a1;
    if (!*a1 || (*(_BYTE *)(v27 + 16) & 4) != 0)
    {
      v29 = *a2;
      if ((!*a2 || (*(_BYTE *)(v29 + 16) & 4) != 0)
        && (!*a3 || (*(_BYTE *)(*a3 + 16) & 4) != 0)
        && (!*a4 || (*(_BYTE *)(*a4 + 16) & 4) != 0)
        && (!*a5 || (*(_BYTE *)(*a5 + 16) & 4) != 0)
        && (!*a6 || (*(_BYTE *)(*a6 + 16) & 4) != 0)
        && (!*a7 || (*(_BYTE *)(*a7 + 16) & 4) != 0))
      {
        if (*a8)
          v28 = (*(unsigned __int8 *)(*a8 + 16) >> 2) & 1;
        else
          v28 = 1;
      }
      else
      {
        v28 = 0;
      }
    }
    else
    {
      v28 = 0;
      v29 = *a2;
    }
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v28, v27, (_DWORD *)v29, *a3, *a4, *a5, *a6, a9, *a7, *a8);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v16;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v31;
  _DWORD *v32;

  v16 = result;
  if (!a2)
  {
    if ((_DWORD)result)
    {
      if (result <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
        v18 = v32;
        if (!v32)
          goto LABEL_21;
        v28 = a9;
        v23 = v32 + 5;
        *v32 = 2;
        v18[1] = v16;
        *((_QWORD *)v18 + 1) = v18 + 5;
        v18[4] = 0;
        v31 = a3;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v31, (char *)v18 + 20);
        v24 = v31;
        v25 = a8;
        if (v31)
          v24 = *(unsigned int *)(v31 + 4);
        v26 = (char *)v23 + 2 * v24;
        v32 = a4;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v32, v26);
        v27 = (unint64_t)v32;
        if (v32)
          v27 = v32[1];
        result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v26[2 * v27], a5, a6, a7, v25, a10, a11);
        goto LABEL_10;
      }
LABEL_13:
      v18 = 0;
      goto LABEL_21;
    }
LABEL_14:
    v18 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_21;
  }
  if (!(_DWORD)result)
    goto LABEL_14;
  if ((result & 0x80000000) != 0)
    goto LABEL_13;
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  v18 = v32;
  if (v32)
  {
    v28 = a9;
    v19 = a8;
    *v32 = 2;
    v18[1] = v16;
    *((_QWORD *)v18 + 1) = v18 + 5;
    v18[4] = 4;
    v31 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v31, (char *)v18 + 20);
    v20 = v31;
    if (v31)
      v20 = *(unsigned int *)(v31 + 4);
    v21 = (char *)v18 + v20 + 20;
    v32 = a4;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v32, v21);
    v22 = (unint64_t)v32;
    if (v32)
      v22 = v32[1];
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v21[v22], a5, a6, a7, v19, a10, a11);
LABEL_10:
    a9 = v28;
  }
LABEL_21:
  *a9 = v18;
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v23 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v23, __dst);
  v13 = v23;
  if (v23)
    v13 = *(unsigned int *)(v23 + 4);
  v14 = &__dst[v13];
  v24 = a3;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v24, v14);
  v15 = v24;
  if (v24)
    v15 = *(unsigned int *)(v24 + 4);
  v16 = &v14[v15];
  v25 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v25, &v14[v15]);
  v17 = v25;
  if (v25)
    v17 = *(unsigned int *)(v25 + 4);
  v18 = &v16[v17];
  v26 = a5;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v26, &v16[v17]);
  v19 = v26;
  if (v26)
    v19 = *(unsigned int *)(v26 + 4);
  v20 = &v18[v19];
  v27 = a6;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v27, &v18[v19]);
  v21 = v27;
  if (v27)
    v21 = *(unsigned int *)(v27 + 4);
  v28 = a7;
  return WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v28, &v20[v21]);
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v23 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v23, __dst);
  v13 = v23;
  if (v23)
    v13 = *(unsigned int *)(v23 + 4);
  v14 = &__dst[2 * v13];
  v24 = a3;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v24, v14);
  v15 = v24;
  if (v24)
    v15 = *(unsigned int *)(v24 + 4);
  v16 = &v14[2 * v15];
  v25 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v25, v16);
  v17 = v25;
  if (v25)
    v17 = *(unsigned int *)(v25 + 4);
  v18 = &v16[2 * v17];
  v26 = a5;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v26, v18);
  v19 = v26;
  if (v26)
    v19 = *(unsigned int *)(v26 + 4);
  v20 = &v18[2 * v19];
  v27 = a6;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v27, v20);
  v21 = v27;
  if (v27)
    v21 = *(unsigned int *)(v27 + 4);
  v28 = a7;
  return WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v28, &v20[2 * v21]);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  uint64_t result;
  char v9;
  char v10;
  uint64_t v11[2];

  v11[0] = a1;
  v11[1] = a2;
  v10 = a4;
  v9 = a6;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>(v11, a3, &v10, a5, &v9, a7);
  if (!*a7)
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, char *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v6 = a1[1];
  v7 = v6 != 0;
  v8 = v6 - 1;
  if (!v7)
    v8 = 0;
  v14 = *a1;
  if (v8 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v15 = v8;
    v13 = *a2;
    v12 = *a3;
    v11 = *a4;
    v10 = *a5;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v14, &v13, &v12, &v11, &v10, a6);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, char *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  _BOOL4 v19;

  v7 = *a2;
  if (*a2)
    v8 = *(_DWORD *)(v7 + 4);
  else
    v8 = 0;
  v9 = *(_DWORD *)(result + 8);
  v10 = *a4;
  if (*a4)
  {
    v11 = *(_DWORD *)(v10 + 4);
    if (v11 < 0)
    {
LABEL_24:
      *a6 = 0;
      return result;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    goto LABEL_24;
  v12 = __OFADD__(v13, 1);
  v14 = v13 + 1;
  v15 = v12;
  if (v8 < 0 || v15)
    goto LABEL_24;
  v12 = __OFADD__(v8, v14);
  v16 = v8 + v14;
  v17 = v12;
  if (v9 < 0)
    goto LABEL_24;
  if (v17)
    goto LABEL_24;
  v12 = __OFADD__(v9, v16);
  v18 = (v9 + v16);
  if (v12)
    goto LABEL_24;
  v19 = (!v7 || (*(_BYTE *)(v7 + 16) & 4) != 0) && (!v10 || (*(_BYTE *)(v10 + 16) & 4) != 0);
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v18, v19, *(_OWORD **)result, *(_QWORD *)(result + 8), v7, *a3, (_DWORD *)v10, *a5, a6);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, _DWORD *a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>)
{
  int v15;
  _DWORD *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  int8x16_t v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  __int16 v33;
  uint64_t v34;
  _WORD *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v17 = v39;
        if (v39)
        {
          v18 = v39 + 5;
          *v39 = 2;
          v17[1] = v15;
          *((_QWORD *)v17 + 1) = v17 + 5;
          v17[4] = 4;
          if (a4)
          {
            if (a4 == 1)
              *v18 = *(_BYTE *)a3;
            else
              memcpy(v17 + 5, a3, a4);
          }
          v19 = &v18[a4];
          v38 = a5;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v38, v19);
          v20 = v38;
          if (v38)
            v20 = *(unsigned int *)(v38 + 4);
          v19[v20] = a6;
          v21 = &v19[v20 + 1];
          v39 = a7;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v39, v21);
          v22 = (unint64_t)v39;
          if (v39)
            v22 = v39[1];
          v21[v22] = a8;
        }
        goto LABEL_29;
      }
LABEL_15:
      v17 = 0;
      goto LABEL_29;
    }
LABEL_16:
    v17 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_29;
  }
  if (!(_DWORD)result)
    goto LABEL_16;
  if (result > 0x7FFFFFEF)
    goto LABEL_15;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v17 = v39;
  if (v39)
  {
    v23 = (char *)(v39 + 5);
    *v39 = 2;
    v17[1] = v15;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    v24 = (uint64_t)v17 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v25 = &v23[2 * (a4 & 0xFFFFFFC0)];
      v26 = 0uLL;
      do
      {
        v40.val[0] = (int8x16_t)*a3;
        v27 = *((int8x16_t *)a3 + 1);
        v41.val[0] = (int8x16_t)a3[2];
        v28 = a3[3];
        a3 += 4;
        v29 = v28;
        v41.val[1] = 0uLL;
        v42.val[0] = v27;
        v40.val[1] = 0uLL;
        v30 = v23;
        vst2q_s8(v30, v40);
        v30 += 32;
        v42.val[1] = 0uLL;
        vst2q_s8(v30, v42);
        v31 = v23 + 64;
        vst2q_s8(v31, v41);
        v32 = v23 + 96;
        vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
        v23 += 128;
      }
      while (v23 != v25);
      v23 = v25;
    }
    while (v23 != (char *)v24)
    {
      v33 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v23 = v33;
      v23 += 2;
    }
    v38 = a5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v38, (char *)v17 + 2 * a4 + 20);
    v34 = v38;
    if (v38)
      v34 = *(unsigned int *)(v38 + 4);
    v35 = (_WORD *)(v24 + 2 * v34);
    *v35 = a6;
    v36 = (char *)(v35 + 1);
    v39 = a7;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v39, v36);
    v37 = (unint64_t)v39;
    if (v39)
      v37 = v39[1];
    *(_WORD *)&v36[2 * v37] = a8;
  }
LABEL_29:
  *a9 = v17;
  return result;
}

BOOL WTF::NativePromise<void,void,0u>::isSettled(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 64);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 != 0;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 != 0;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  WTF *v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t i;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *result;
  uint64_t v30;
  WTF *v32[2];
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint8_t buf[4];
  char *v38;
  int v39;
  _DWORD v40[4];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v34, a4);
  v30 = a5;
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, &v33);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v35, (uint64_t *)&v34, (uint64_t *)&v33, &v36);
  v10 = v33;
  v33 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v34;
  v34 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v35;
  v35 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(NSObject **)(a1 + 32);
  v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v14)
  {
    WTF::String::utf8();
    v16 = v32[0] ? (char *)v32[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v38 = v16;
    _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v14 = v32[0];
    v32[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        v14 = (WTF *)WTF::fastFree(v14, v15);
      else
        --*(_DWORD *)v14;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v18 = *v17;
      if ((v18 & 1) != 0)
        break;
      v19 = __ldaxr(v17);
      if (v19 == v18)
      {
        if (!__stxr(v18 | 1, v17))
        {
          v20 = WTF::Logger::observers(v14);
          v21 = *(unsigned int *)(v20 + 12);
          if ((_DWORD)v21)
          {
            v22 = *(uint64_t **)v20;
            v23 = *(_QWORD *)v20 + 8 * v21;
            do
            {
              v24 = *v22;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v39 = 0;
              WTF::String::String((WTF::String *)v40, a4);
              v40[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(v30, v41);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v32, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v24 + 16))(v24, a1, a2, v32);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v25);
              for (i = 40; i != -8; i -= 16)
              {
                v27 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 2)
                    WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v27 -= 2;
                }
              }
              ++v22;
            }
            while (v22 != (uint64_t *)v23);
          }
          v28 = __ldxr(v17);
          if (v28 == 1)
          {
            if (!__stlxr(0, v17))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::makeString<WTF::String,WTF::String,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v8 = *a2;
  v9 = v5;
  v7 = *a3;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v9, &v8, &v7, a4);
  if (!*a4)
    __break(0xC471u);
  return result;
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  WTF::LogArgument<void const*>::toString();
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>((uint64_t)"GenericPromise", 15, (uint64_t *)&v8, 60, (uint64_t *)&v7, 62, a2);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;

  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v6 = *(_DWORD *)(v5 + 4);
  else
    v6 = 0;
  v7 = *a2;
  if (*a2)
    v8 = *(_DWORD *)(v7 + 4);
  else
    v8 = 0;
  v9 = *a3;
  if (*a3)
    v10 = *(_DWORD *)(v9 + 4);
  else
    v10 = 0;
  if (((v10 | v8) & 0x80000000) == 0)
  {
    v11 = __OFADD__(v8, v10);
    v12 = v8 + v10;
    v13 = v11;
    if ((v6 & 0x80000000) == 0 && !v13)
    {
      result = (v6 + v12);
      if (!__OFADD__(v6, v12))
      {
        if (!v5 || (*(_BYTE *)(v5 + 16) & 4) != 0)
        {
          if (v7)
          {
            v15 = *(_DWORD *)(v7 + 16);
            v14 = (v15 >> 2) & 1;
            if (!v9 || (v15 & 4) == 0)
              return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v5, v7, (_DWORD *)v9, a4);
          }
          else if (!v9)
          {
            v14 = 1;
            return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v5, v7, (_DWORD *)v9, a4);
          }
          v14 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
        }
        else
        {
          v14 = 0;
        }
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v5, v7, (_DWORD *)v9, a4);
      }
    }
  }
  *a4 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  _DWORD *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v22;
        if (v22)
        {
          v12 = (char *)(v22 + 5);
          *v22 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          v20 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v20, (char *)v11 + 20);
          v13 = v20;
          if (v20)
            v13 = *(unsigned int *)(v20 + 4);
          v14 = &v12[v13];
          v21 = a4;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v21, &v12[v13]);
          v15 = v21;
          if (v21)
            v15 = *(unsigned int *)(v21 + 4);
          v22 = a5;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v22, &v14[v15]);
        }
        goto LABEL_20;
      }
LABEL_12:
      v11 = 0;
      goto LABEL_20;
    }
LABEL_13:
    v11 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_20;
  }
  if (!(_DWORD)result)
    goto LABEL_13;
  if (result > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v22;
  if (v22)
  {
    v16 = v22 + 5;
    *v22 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    v20 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v20, (char *)v11 + 20);
    v17 = v20;
    if (v20)
      v17 = *(unsigned int *)(v20 + 4);
    v18 = (char *)v16 + 2 * v17;
    v21 = a4;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v21, v18);
    v19 = v21;
    if (v21)
      v19 = *(unsigned int *)(v21 + 4);
    v22 = a5;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v22, &v18[2 * v19]);
  }
LABEL_20:
  *a6 = v11;
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::settleImpl<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>>(uint64_t a1, _WORD *a2, unsigned __int8 **a3)
{
  uint64_t v6;
  char v8;

  v6 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, uint64_t))off_1E34BA708[v6])(&v8, a1 + 56);
  *(_DWORD *)(a1 + 64) = -1;
  *(_WORD *)(a1 + 56) = *a2;
  *(_DWORD *)(a1 + 64) = 1;
  return WTF::NativePromise<void,void,0u>::dispatchAll(a1, a3);
}

uint64_t WTF::NativePromise<void,void,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  unsigned int *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v15;
  WTF::NativePromiseBase **v16;
  uint64_t v17;
  WTF::NativePromiseBase *v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  WTF::NativePromiseBase **v24;
  uint64_t v25;
  uint64_t v26;

  v5 = (unsigned int *)(a1 + 72);
  v4 = *(void **)(a1 + 72);
  v21 = &v23;
  v22 = 1;
  v24 = (WTF::NativePromiseBase **)&v26;
  v25 = 1;
  if (v4 == (void *)(a1 + 88))
  {
    v6 = *(unsigned int *)(a1 + 84);
    memcpy(&v26, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = a1 + 88;
    v24 = (WTF::NativePromiseBase **)v4;
    v15 = *(_DWORD *)(a1 + 80);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 80) = 1;
    LODWORD(v25) = v15;
  }
  *(_DWORD *)(a1 + 84) = 0;
  HIDWORD(v25) = v6;
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v5, &v21);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v7);
  v20[0] = 0;
  v20[1] = 0;
  v8 = *(_QWORD *)(a1 + 96);
  v21 = (uint64_t *)v8;
  v9 = *(_DWORD *)(a1 + 104);
  v10 = *(unsigned int *)(a1 + 108);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v22 = __PAIR64__(v10, v9);
  WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 96, v20);
  WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v11);
  if (HIDWORD(v25))
  {
    v16 = v24;
    v17 = 8 * HIDWORD(v25);
    do
    {
      v18 = *v16++;
      WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(v18, a1, a2);
      v17 -= 8;
    }
    while (v17);
  }
  if ((_DWORD)v10)
  {
    v19 = 40 * v10;
    do
    {
      WTF::NativePromise<void,void,0u>::settleChainedPromise(a1, v8);
      v8 += 40;
      v19 -= 40;
    }
    while (v19);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v12);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v13);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvvLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvNS8_6detail15VoidPlaceholderEEENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSC_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int8 *WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v19;
  _BYTE v20[2];
  unsigned __int8 *v21;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 113));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E34BAC50;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v21 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v21);
      result = v21;
      v21 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v21 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,void,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v21, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_23:
  if (WTF::NativePromise<void,void,0u>::hasRunnable(a2))
  {
    WTF::NativePromise<void,void,0u>::takeResultRunnable(a2, &v21);
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v21 + 16))(v20);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _BYTE *))(*(_QWORD *)v5 + 24))(v5, a2, v20);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    WTF::NativePromise<void,void,0u>::takeResult(a2, &v21, v19);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v21);
  }
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEABB3C]();
}

uint64_t *WTF::NativePromise<void,void,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  __int128 v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  unsigned int *v13;
  __int128 v14;
  __int128 v15;

  v2 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  v13 = v2;
  v3 = *(_OWORD *)(a2 + 24);
  v14 = *(_OWORD *)(a2 + 8);
  v15 = v3;
  if (v2)
  {
    v4 = v2 + 2;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v9 = 0;
    v10 = 0;
    v11 = "<chained promise>";
    v12 = 0;
    WTF::NativePromise<void,void,0u>::settleAsChainedPromise<WTF::NativePromise<void,void,0u>::Storage>((uint64_t)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v9);
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = "<chained promise>";
    v12 = 0;
    WTF::NativePromise<void,void,0u>::settleAsChainedPromise<WTF::NativePromise<void,void,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v9);
  }
  return WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer((uint64_t *)&v13);
}

unsigned int *WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *__dst, _DWORD *a2)
{
  uint64_t v4;
  unsigned int **v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v4 = __dst[3];
  if ((_DWORD)v4)
  {
    v6 = *(unsigned int ***)__dst;
    v7 = *(_QWORD *)__dst + 8 * v4;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        v9 = v8 + 2;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v8 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
        }
      }
      ++v6;
    }
    while (v6 != (unsigned int **)v7);
  }
  WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(__dst, a2);
  return __dst;
}

WTF *WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(_DWORD *__dst, _DWORD *a2)
{
  WTF *result;
  WTF *v5;
  const void *v6;
  int v7;
  int v8;

  v5 = (WTF *)(__dst + 4);
  result = *(WTF **)__dst;
  if (result != v5)
  {
    if (result)
    {
      *(_QWORD *)__dst = 0;
      __dst[2] = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
    *(_QWORD *)__dst = v5;
  }
  v6 = *(const void **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    result = (WTF *)memcpy(v5, v6, 8 * a2[3]);
    v7 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)__dst = v6;
    v7 = a2[2];
    a2[2] = 1;
  }
  __dst[2] = v7;
  v8 = a2[3];
  a2[3] = 0;
  __dst[3] = v8;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int **v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v7 = *(unsigned int ***)a1;
    v8 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        v10 = v9 + 2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      ++v7;
    }
    while (v7 != (unsigned int **)v8);
  }
  v4 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v4 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

BOOL WTF::NativePromise<void,void,0u>::hasRunnable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 64);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 2;
}

uint64_t WTF::NativePromise<void,void,0u>::takeResultRunnable@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v4 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  if (*(_DWORD *)(v2 + 64) != 2)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<void,void,0u>::takeResult(v7);
  }
  v6 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  *a2 = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::takeResult@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  int v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v3 = result;
  v5 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  if (*(_DWORD *)(v3 + 64) != 1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Logger::log<char [32],WTF::NativePromise<void,void,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(v8, v9, v10, v11, v12, v13, v14, v15, a3);
  }
  *a2 = *(_WORD *)(v3 + 56);
  v7 = __ldxr(v5);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<void,void,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, const char *a5, int a6, const char *a7, WTF::Logger::LogSiteIdentifier *a8, const char *a9)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  WTF *v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t i;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  WTF::Logger::LogSiteIdentifier *v41;
  WTF *v43[2];
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _BYTE buf[12];
  int v58;
  uint64_t v59;
  int v60;
  _DWORD v61[8];
  _DWORD v62[8];
  _QWORD v63[3];

  v63[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v50, a3);
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a4, &v49);
  WTF::String::String((WTF::String *)&v48, a5);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v46, a7);
  v41 = a8;
  WTF::Logger::LogSiteIdentifier::toString(a8);
  WTF::String::String((WTF::String *)&v44, a9);
  v43[0] = v49;
  v56 = v48;
  *(_QWORD *)buf = v50;
  v54 = v46;
  v55 = v47;
  v52 = v44;
  v53 = v45;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v43, (uint64_t *)&v56, (uint64_t *)&v55, (uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52, &v51);
  if (v51)
  {
    v16 = v44;
    v44 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v45;
    v45 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v46;
    v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v47;
    v47 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v15);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v48;
    v48 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v15);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v15);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v50;
    v50 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v15);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = *(NSObject **)(a1 + 32);
    v24 = (WTF *)os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v24)
    {
      WTF::String::utf8();
      v26 = v43[0] ? (char *)v43[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl(&dword_196BCC000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v24 = v43[0];
      v43[0] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
          v24 = (WTF *)WTF::fastFree(v24, v25);
        else
          --*(_DWORD *)v24;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v28 = *v27;
        if ((v28 & 1) != 0)
          break;
        v29 = __ldaxr(v27);
        if (v29 == v28)
        {
          if (!__stxr(v28 | 1, v27))
          {
            v39 = a1;
            v30 = WTF::Logger::observers(v24);
            v31 = *(unsigned int *)(v30 + 12);
            if ((_DWORD)v31)
            {
              v32 = *(uint64_t **)v30;
              v38 = *(_QWORD *)v30 + 8 * v31;
              do
              {
                v33 = *v32;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], a3);
                v58 = 0;
                WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a4, &v59);
                v60 = 0;
                WTF::String::String((WTF::String *)v61, a5);
                v61[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v61[6] = 0;
                WTF::String::String((WTF::String *)v62, a7);
                v62[2] = 0;
                WTF::Logger::LogSiteIdentifier::toString(v41);
                v62[6] = 0;
                WTF::String::String((WTF::String *)v63, a9);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v43, (uint64_t)buf, 7uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v33 + 16))(v33, v39, a2, v43);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v34);
                for (i = 104; i != -8; i -= 16)
                {
                  v36 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                }
                ++v32;
              }
              while (v32 != (uint64_t *)v38);
            }
            v37 = __ldxr(v27);
            if (v37 == 1)
            {
              if (!__stlxr(0, v27))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v51;
    v51 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _BYTE v27[4];
  unsigned int v28;

  if (*a1)
    v16 = *(unsigned int *)(*a1 + 4);
  else
    v16 = 0;
  if (*a2)
    v17 = *(_DWORD *)(*a2 + 4);
  else
    v17 = 0;
  if (*a3)
    v18 = *(_DWORD *)(*a3 + 4);
  else
    v18 = 0;
  if (*a4)
    v19 = *(_DWORD *)(*a4 + 4);
  else
    v19 = 0;
  if (*a5)
    v20 = *(_DWORD *)(*a5 + 4);
  else
    v20 = 0;
  if (*a6)
    v21 = *(_DWORD *)(*a6 + 4);
  else
    v21 = 0;
  if (*a7)
    v22 = *(_DWORD *)(*a7 + 4);
  else
    v22 = 0;
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v16, v17, v18, v19, v20, v21, v22, (uint64_t)v27);
  if (v27[0])
  {
    *a8 = 0;
  }
  else
  {
    v24 = *a1;
    if (!*a1 || (*(_BYTE *)(v24 + 16) & 4) != 0)
    {
      v26 = *a2;
      if ((!*a2 || (*(_BYTE *)(v26 + 16) & 4) != 0)
        && (!*a3 || (*(_BYTE *)(*a3 + 16) & 4) != 0)
        && (!*a4 || (*(_BYTE *)(*a4 + 16) & 4) != 0)
        && (!*a5 || (*(_BYTE *)(*a5 + 16) & 4) != 0)
        && (!*a6 || (*(_BYTE *)(*a6 + 16) & 4) != 0))
      {
        if (*a7)
          v25 = (*(unsigned __int8 *)(*a7 + 16) >> 2) & 1;
        else
          v25 = 1;
      }
      else
      {
        v25 = 0;
      }
    }
    else
    {
      v25 = 0;
      v26 = *a2;
    }
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v28, v25, (_DWORD *)v24, v26, *a3, *a4, *a5, *a6, a8, *a7);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  int v16;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _DWORD *v22;

  v16 = result;
  if (!a2)
  {
    if ((_DWORD)result)
    {
      if (result <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
        v18 = v22;
        if (!v22)
          goto LABEL_17;
        v21 = a9;
        *v22 = 2;
        v18[1] = v16;
        *((_QWORD *)v18 + 1) = v18 + 5;
        v18[4] = 0;
        v22 = a3;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v22, (char *)v18 + 20);
        v20 = (unint64_t)v22;
        if (v22)
          v20 = v22[1];
        result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)v18 + 2 * v20 + 20, a4, a5, a6, a7, a8, a10);
        goto LABEL_8;
      }
LABEL_11:
      v18 = 0;
      goto LABEL_17;
    }
LABEL_12:
    v18 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_17;
  }
  if (!(_DWORD)result)
    goto LABEL_12;
  if ((result & 0x80000000) != 0)
    goto LABEL_11;
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  v18 = v22;
  if (v22)
  {
    v21 = a9;
    *v22 = 2;
    v18[1] = v16;
    *((_QWORD *)v18 + 1) = v18 + 5;
    v18[4] = 4;
    v22 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v22, (char *)v18 + 20);
    v19 = (unint64_t)v22;
    if (v22)
      v19 = v22[1];
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)v18 + v19 + 20, a4, a5, a6, a7, a8, a10);
LABEL_8:
    a9 = v21;
  }
LABEL_17:
  *a9 = v18;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34BAC50;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34BAC50;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[2];
  unsigned __int8 *v10;

  v1 = *a1;
  v2 = a1[2];
  if (*(_BYTE *)(*a1 + 56))
  {
    v10 = (unsigned __int8 *)*a1;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result)
      v4 = result[16] >= 4u;
    else
      v4 = 0;
    if (v4)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,void,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v10, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  }
  else
  {
    hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(a1[2]);
    v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<void,void,0u>::takeResultRunnable(a1[2], &v10);
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v10 + 16))(v9);
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v1 + 24))(v1, v7, v9);
      result = v10;
      v10 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      WTF::NativePromise<void,void,0u>::takeResult(a1[2], &v10, v8);
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<void,void,0u>::settleAsChainedPromise<WTF::NativePromise<void,void,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  WTF::Lock *result;
  int v11;
  WTF::Lock *v12;
  char v13;

  v6 = (WTF::Lock *)(a1 + 48);
  v12 = v6;
  v13 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", a1);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>,(std::__variant_detail::_Trait)1>>(a1 + 56, a2);
  result = (WTF::Lock *)WTF::NativePromise<void,void,0u>::dispatchAll(a1, &v12);
  if (v13)
  {
    result = v12;
    v11 = __ldxr((unsigned __int8 *)v12);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34BA708[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34BA720[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvvLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvNS8_6detail15VoidPlaceholderEEENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSC_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34BA708[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvvLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvNS8_6detail15VoidPlaceholderEEENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSC_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>>(*a1, a2, a3);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvvLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvNS8_6detail15VoidPlaceholderEEENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSC_SI_SL_EEEOS10_EEEDcSS_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  char v9;
  char v10;

  v4 = result;
  v5 = *(unsigned int *)(result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E34BA708[v5])(&v10, result);
LABEL_7:
    *(_DWORD *)(v4 + 8) = -1;
    *(_WORD *)v4 = *(_WORD *)a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v8 = *(unsigned __int8 *)(a2 + 1);
  v6 = (char *)(a2 + 1);
  v7 = v8;
  if ((*(_BYTE *)(a3 + 1) != 0) != (v8 != 0))
  {
    if (*(_BYTE *)(a3 + 1))
    {
      *v6 = 1;
      v6 = &v9;
LABEL_10:
      *v6 = 0;
      return result;
    }
    if (v7)
      goto LABEL_10;
  }
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,void,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WTF::detail::VoidPlaceholder> ()(void)>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = result;
  v5 = result[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E34BA708[v5])(&v8, result);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    v4[2] = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::PlatformMediaResource::didPassAccessControlCheck(WebCore::PlatformMediaResource *this)
{
  return 0;
}

void WebCore::PlatformMediaResource::~PlatformMediaResource(WebCore::PlatformMediaResource *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34BA748;
  v2 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
}

void WebCore::PlatformMediaResource::~PlatformMediaResource(WebCore::PlatformMediaResource *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34BA748;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::RemoteMediaResourceLoader::defaultQueue(void)::{lambda(void)#1} &&>>()
{
  uint64_t result;
  void *v1;

  result = WTF::WorkQueue::create();
  WebKit::RemoteMediaResourceLoader::defaultQueue(void)::messageQueue = v1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactoryProxy::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesDecodingInfo>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BA788;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactoryProxy::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesDecodingInfo>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BA788;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactoryProxy::createDecodingConfiguration(WebCore::MediaDecodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesDecodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesDecodingInfo>::call(uint64_t a1, __int16 *a2)
{
  WTF::StringImpl *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  __int16 v12;
  char v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  _OWORD v19[2];
  char v20;
  _QWORD v21[2];
  char v22;
  _QWORD v23[2];
  char v24;
  __int16 v25;

  v12 = *a2;
  v13 = *((_BYTE *)a2 + 2);
  LOBYTE(v14) = 0;
  v17 = 0;
  if (*((_BYTE *)a2 + 48))
  {
    v2 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v14 = v2;
    v3 = *((_OWORD *)a2 + 2);
    v15 = *((_OWORD *)a2 + 1);
    v16 = v3;
    v17 = 1;
  }
  LOBYTE(v18) = 0;
  v20 = 0;
  if (*((_BYTE *)a2 + 104))
  {
    v4 = *(_OWORD *)(a2 + 28);
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    v5 = *(_OWORD *)(a2 + 36);
    v18 = v4;
    v19[0] = v5;
    *(_OWORD *)((char *)v19 + 10) = *(_OWORD *)(a2 + 41);
    v20 = 1;
  }
  LOBYTE(v21[0]) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 128))
  {
    v21[0] = *((_QWORD *)a2 + 14);
    v6 = *((_QWORD *)a2 + 15);
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 15) = 0;
    v21[1] = v6;
    v22 = 1;
  }
  LOBYTE(v23[0]) = 0;
  v24 = 0;
  if (*((_BYTE *)a2 + 152))
  {
    v23[0] = *((_QWORD *)a2 + 17);
    v7 = *((_QWORD *)a2 + 18);
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    v23[1] = v7;
    v24 = 1;
  }
  v25 = a2[80];
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v8 + 16))(v8, &v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v24)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v9);
  if (v22)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v9);
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, (WTF::StringImpl *)v9);
  if (v17)
  {
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactoryProxy::createEncodingConfiguration(WebCore::MediaEncodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesEncodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesEncodingInfo>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BA7B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactoryProxy::createEncodingConfiguration(WebCore::MediaEncodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesEncodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesEncodingInfo>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BA7B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::RemoteMediaEngineConfigurationFactoryProxy::createEncodingConfiguration(WebCore::MediaEncodingConfiguration &&,WTF::CompletionHandler<void ()(WebCore::MediaCapabilitiesEncodingInfo &&)> &&)::$_0,void,WebCore::MediaCapabilitiesEncodingInfo>::call(uint64_t a1, __int16 *a2)
{
  WTF::StringImpl *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  __int16 v12;
  char v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  _OWORD v19[2];
  char v20;
  _QWORD v21[2];
  char v22;
  _QWORD v23[2];
  char v24;
  char v25;

  v12 = *a2;
  v13 = *((_BYTE *)a2 + 2);
  LOBYTE(v14) = 0;
  v17 = 0;
  if (*((_BYTE *)a2 + 48))
  {
    v2 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    v14 = v2;
    v3 = *((_OWORD *)a2 + 2);
    v15 = *((_OWORD *)a2 + 1);
    v16 = v3;
    v17 = 1;
  }
  LOBYTE(v18) = 0;
  v20 = 0;
  if (*((_BYTE *)a2 + 104))
  {
    v4 = *(_OWORD *)(a2 + 28);
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    v5 = *(_OWORD *)(a2 + 36);
    v18 = v4;
    v19[0] = v5;
    *(_OWORD *)((char *)v19 + 10) = *(_OWORD *)(a2 + 41);
    v20 = 1;
  }
  LOBYTE(v21[0]) = 0;
  v22 = 0;
  if (*((_BYTE *)a2 + 128))
  {
    v21[0] = *((_QWORD *)a2 + 14);
    v6 = *((_QWORD *)a2 + 15);
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 15) = 0;
    v21[1] = v6;
    v22 = 1;
  }
  LOBYTE(v23[0]) = 0;
  v24 = 0;
  if (*((_BYTE *)a2 + 152))
  {
    v23[0] = *((_QWORD *)a2 + 17);
    v7 = *((_QWORD *)a2 + 18);
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    v23[1] = v7;
    v24 = 1;
  }
  v25 = *((_BYTE *)a2 + 160);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v8 + 16))(v8, &v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v24)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v9);
  if (v22)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v9);
  result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, (WTF::StringImpl *)v9);
  if (v17)
  {
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::begin(_QWORD *result)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v4, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
            WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v27 + 16));
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v30 + 16));
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v16 + 16));
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *result;
  if (*result)
    v4 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v4 = 0;
  if (v4 == a2)
  {
    *a3 = 0;
    return result;
  }
  v5 = a2[1];
  if (v5)
  {
    a2[1] = 0;
    v3 = *result;
  }
  *a3 = v5;
  if (v3)
  {
    v6 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v6 = 0;
  }
  if (v6 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(result, a2);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v2 = result;
  v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3)
    result = (uint64_t *)WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref((_DWORD *)(v3 + 16));
  ++*(_DWORD *)(*v2 - 16);
  v4 = *v2;
  if (*v2)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *v2;
  if (*v2)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v2, v8 >> 1, 0);
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::RemoteAudioTrackProxy,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34BA7D8;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::RemoteAudioTrackProxy,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioTrackProxy::~RemoteAudioTrackProxy((WebKit::RemoteAudioTrackProxy *)(*(_QWORD *)(a1 + 8) - 16));
  return WTF::fastFree(v1, v2);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::RemoteTextTrackProxy,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34BA800;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::RemoteTextTrackProxy,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteTextTrackProxy::~RemoteTextTrackProxy((WebKit::RemoteTextTrackProxy *)(*(_QWORD *)(a1 + 8) - 16));
  return WTF::fastFree(v1, v2);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::RemoteVideoTrackProxy,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34BA828;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainThread();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::RemoteVideoTrackProxy,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioTrackProxy::~RemoteAudioTrackProxy((WebKit::RemoteAudioTrackProxy *)(*(_QWORD *)(a1 + 8) - 16));
  return WTF::fastFree(v1, v2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::RemoteMediaPlayerProxy::*&)(void),WebKit::RemoteMediaPlayerProxy*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WTF::StringImpl *std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::ContentType const*,WebCore::ContentType const*,WebCore::ContentType*,0>(WTF::StringImpl *a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    WTF::String::operator=((WTF::StringImpl **)a3, v4);
    *(_BYTE *)(a3 + 8) = *((_BYTE *)v4 + 8);
    a3 += 16;
    v4 = (WTF::StringImpl *)((char *)v4 + 16);
  }
  while (v4 != v5);
  return v5;
}

WTF::Lock *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E34BA868[v11])(&v16, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 57) = 1;
  *(_DWORD *)(a1 + 64) = 1;
  result = (WTF::Lock *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll((_QWORD *)a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  _BYTE *v4;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34BAC00;
  v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v4, 4u, "creating ", a1);
  return a1;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 96);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::~NativePromise(unsigned int *a1)
{
  unsigned int *v1;
  void *v2;

  v1 = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::~NativePromise(a1);
  return WTF::fastFree((WTF *)v1, v2);
}

WTF::StringImpl *WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  WTF *v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t i;
  WTF::StringImpl *v25;
  int v26;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint8_t buf[16];
  int v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v30, a3);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v29);
  *(_QWORD *)buf = v30;
  v28[0] = v29;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v30;
    v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(NSObject **)(a1 + 32);
    v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      WTF::String::utf8();
      v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          v12 = (WTF *)WTF::fastFree(v12, v13);
        else
          --*(_DWORD *)v12;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v16 = *v15;
        if ((v16 & 1) != 0)
          break;
        v17 = __ldaxr(v15);
        if (v17 == v16)
        {
          if (!__stxr(v16 | 1, v15))
          {
            v18 = WTF::Logger::observers(v12);
            v19 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v19)
            {
              v20 = *(uint64_t **)v18;
              v21 = *(_QWORD *)v18 + 8 * v19;
              do
              {
                v22 = *v20;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], a3);
                v33 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, v34);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v22 + 16))(v22, a1, a2, v28);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
                for (i = 24; i != -8; i -= 16)
                {
                  v25 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                }
                ++v20;
              }
              while (v20 != (uint64_t *)v21);
            }
            v26 = __ldxr(v15);
            if (v26 == 1)
            {
              if (!__stlxr(0, v15))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  WTF::LogArgument<void const*>::toString();
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char,WTF::String,char>((uint64_t)"NativePromise", 14, (uint64_t *)&v8, 60, (uint64_t *)&v7, 62, a2);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::~NativePromise(unsigned int *a1)
{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  void *v5;
  uint64_t v6;
  char v8;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v2, 4u, "destroying ", (uint64_t)a1);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v4);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 18), v5);
  v6 = a1[16];
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, unsigned int *))off_1E34BA868[v6])(&v8, a1 + 14);
  a1[16] = -1;
  return a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int ***)a1;
    v5 = *(_QWORD *)a1 + 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
      }
      ++v4;
    }
    while (v4 != (unsigned int **)v5);
  }
  v10 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v10 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSE_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  WTF *v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t i;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *result;
  uint64_t v30;
  WTF *v32[2];
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint8_t buf[4];
  char *v38;
  int v39;
  _DWORD v40[4];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v34, a4);
  v30 = a5;
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v33);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v35, (uint64_t *)&v34, (uint64_t *)&v33, &v36);
  v10 = v33;
  v33 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v34;
  v34 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v35;
  v35 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(NSObject **)(a1 + 32);
  v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v14)
  {
    WTF::String::utf8();
    v16 = v32[0] ? (char *)v32[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v38 = v16;
    _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v14 = v32[0];
    v32[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        v14 = (WTF *)WTF::fastFree(v14, v15);
      else
        --*(_DWORD *)v14;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v18 = *v17;
      if ((v18 & 1) != 0)
        break;
      v19 = __ldaxr(v17);
      if (v19 == v18)
      {
        if (!__stxr(v18 | 1, v17))
        {
          v20 = WTF::Logger::observers(v14);
          v21 = *(unsigned int *)(v20 + 12);
          if ((_DWORD)v21)
          {
            v22 = *(uint64_t **)v20;
            v23 = *(_QWORD *)v20 + 8 * v21;
            do
            {
              v24 = *v22;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v39 = 0;
              WTF::String::String((WTF::String *)v40, a4);
              v40[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v30, v41);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v32, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v24 + 16))(v24, a1, a2, v32);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v25);
              for (i = 40; i != -8; i -= 16)
              {
                v27 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 2)
                    WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v27 -= 2;
                }
              }
              ++v22;
            }
            while (v22 != (uint64_t *)v23);
          }
          v28 = __ldxr(v17);
          if (v28 == 1)
          {
            if (!__stlxr(0, v17))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll(_QWORD *__dst, unsigned __int8 **a2)
{
  _QWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  WTF::NativePromiseBase **v13;
  uint64_t v14;
  WTF::NativePromiseBase *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[2];
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::NativePromiseBase **v23;
  uint64_t v24;
  uint64_t v25;

  v5 = __dst + 9;
  v4 = (_QWORD *)__dst[9];
  v20 = &v22;
  v21 = 1;
  v23 = (WTF::NativePromiseBase **)&v25;
  v24 = 1;
  if (v4 == __dst + 11)
  {
    v7 = *((unsigned int *)__dst + 21);
    memcpy(&v25, v4, 8 * v7);
  }
  else
  {
    __dst[9] = __dst + 11;
    v23 = (WTF::NativePromiseBase **)v4;
    v6 = *((_DWORD *)__dst + 20);
    LODWORD(v7) = *((_DWORD *)__dst + 21);
    *((_DWORD *)__dst + 20) = 1;
    LODWORD(v24) = v6;
  }
  *((_DWORD *)__dst + 21) = 0;
  HIDWORD(v24) = v7;
  WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(v5, &v20);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  v9 = __dst[12];
  v20 = (uint64_t *)v9;
  v10 = *((unsigned int *)__dst + 27);
  LODWORD(v21) = *((_DWORD *)__dst + 26);
  HIDWORD(v21) = v10;
  v19[0] = 0;
  __dst[12] = 0;
  v19[1] = 0;
  __dst[13] = 0;
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v11);
  if (HIDWORD(v24))
  {
    v13 = v23;
    v14 = 8 * HIDWORD(v24);
    do
    {
      v15 = *v13++;
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v15, (uint64_t)__dst, a2);
      v14 -= 8;
    }
    while (v14);
  }
  if ((_DWORD)v10)
  {
    v16 = 40 * v10;
    do
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleChainedPromise((uint64_t)__dst, v9);
      v9 += 40;
      v16 -= 40;
    }
    while (v16);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v12);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v17);
}

unsigned __int8 *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v19;
  _BYTE v20[2];
  unsigned __int8 *v21;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 113));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E34BAC28;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v21 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v21);
      result = v21;
      v21 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v21 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v21, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_23:
  if (WTF::NativePromise<void,void,0u>::hasRunnable(a2))
  {
    WTF::NativePromise<void,void,0u>::takeResultRunnable(a2, &v21);
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v21 + 16))(v20);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _BYTE *))(*(_QWORD *)v5 + 24))(v5, a2, v20);
    v17 = v21;
    v21 = 0;
    if (v17)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    WTF::NativePromise<void,void,0u>::takeResult(a2, &v21, v19);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v21);
  }
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEABB3C]();
}

uint64_t *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v13 = v2;
  v3 = *(_OWORD *)(a2 + 24);
  v14 = *(_OWORD *)(a2 + 8);
  v15 = v3;
  if (v2)
  {
    v4 = (unsigned int *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v9 = 0;
    v10 = 0;
    v11 = "<chained promise>";
    v12 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage>((unsigned __int8 *)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v9);
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = "<chained promise>";
    v12 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v9);
  }
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v13);
}

WTF *WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(_DWORD *__dst, _DWORD *a2)
{
  WTF *result;
  WTF *v5;
  const void *v6;
  int v7;
  int v8;

  v5 = (WTF *)(__dst + 4);
  result = *(WTF **)__dst;
  if (result != v5)
  {
    if (result)
    {
      *(_QWORD *)__dst = 0;
      __dst[2] = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
    *(_QWORD *)__dst = v5;
  }
  v6 = *(const void **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    result = (WTF *)memcpy(v5, v6, 8 * a2[3]);
    v7 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)__dst = v6;
    v7 = a2[2];
    a2[2] = 1;
  }
  __dst[2] = v7;
  v8 = a2[3];
  a2[3] = 0;
  __dst[3] = v8;
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, const char *a5, int a6, const char *a7, WTF::Logger::LogSiteIdentifier *a8, const char *a9)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  WTF *v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t i;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  WTF::Logger::LogSiteIdentifier *v41;
  WTF *v43[2];
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  _BYTE buf[12];
  int v58;
  uint64_t v59;
  int v60;
  _DWORD v61[8];
  _DWORD v62[8];
  _QWORD v63[3];

  v63[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v50, a3);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v49);
  WTF::String::String((WTF::String *)&v48, a5);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v46, a7);
  v41 = a8;
  WTF::Logger::LogSiteIdentifier::toString(a8);
  WTF::String::String((WTF::String *)&v44, a9);
  v43[0] = v49;
  v56 = v48;
  *(_QWORD *)buf = v50;
  v54 = v46;
  v55 = v47;
  v52 = v44;
  v53 = v45;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v43, (uint64_t *)&v56, (uint64_t *)&v55, (uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52, &v51);
  if (v51)
  {
    v16 = v44;
    v44 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v45;
    v45 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v46;
    v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v47;
    v47 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v15);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v48;
    v48 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v15);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v15);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v50;
    v50 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v15);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = *(NSObject **)(a1 + 32);
    v24 = (WTF *)os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v24)
    {
      WTF::String::utf8();
      v26 = v43[0] ? (char *)v43[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl(&dword_196BCC000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v24 = v43[0];
      v43[0] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
          v24 = (WTF *)WTF::fastFree(v24, v25);
        else
          --*(_DWORD *)v24;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v28 = *v27;
        if ((v28 & 1) != 0)
          break;
        v29 = __ldaxr(v27);
        if (v29 == v28)
        {
          if (!__stxr(v28 | 1, v27))
          {
            v39 = a1;
            v30 = WTF::Logger::observers(v24);
            v31 = *(unsigned int *)(v30 + 12);
            if ((_DWORD)v31)
            {
              v32 = *(uint64_t **)v30;
              v38 = *(_QWORD *)v30 + 8 * v31;
              do
              {
                v33 = *v32;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], a3);
                v58 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v59);
                v60 = 0;
                WTF::String::String((WTF::String *)v61, a5);
                v61[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v61[6] = 0;
                WTF::String::String((WTF::String *)v62, a7);
                v62[2] = 0;
                WTF::Logger::LogSiteIdentifier::toString(v41);
                v62[6] = 0;
                WTF::String::String((WTF::String *)v63, a9);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v43, (uint64_t)buf, 7uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v33 + 16))(v33, v39, a2, v43);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v34);
                for (i = 104; i != -8; i -= 16)
                {
                  v36 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                }
                ++v32;
              }
              while (v32 != (uint64_t *)v38);
            }
            v37 = __ldxr(v27);
            if (v37 == 1)
            {
              if (!__stlxr(0, v27))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v51;
    v51 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34BAC28;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34BAC28;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[2];
  unsigned __int8 *v10;

  v1 = *a1;
  v2 = a1[2];
  if (*(_BYTE *)(*a1 + 56))
  {
    v10 = (unsigned __int8 *)*a1;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result)
      v4 = result[16] >= 4u;
    else
      v4 = 0;
    if (v4)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v10, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  }
  else
  {
    hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(a1[2]);
    v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<void,void,0u>::takeResultRunnable(a1[2], &v10);
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v10 + 16))(v9);
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v1 + 24))(v1, v7, v9);
      result = v10;
      v10 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      WTF::NativePromise<void,void,0u>::takeResult(a1[2], &v10, v8);
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage>(unsigned __int8 *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  unsigned __int8 *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t result;
  int v11;
  unsigned __int8 *v12;

  v6 = a1 + 48;
  v12 = v6;
  if (__ldaxr(v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  v6 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", (uint64_t)a1);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>,(std::__variant_detail::_Trait)1>>((uint64_t)(a1 + 56), a2);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll(a1);
  result = (uint64_t)v12;
  v11 = __ldxr(v12);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v12);
  }
  if (__stlxr(0, v12))
    return WTF::Lock::unlockSlow((WTF::Lock *)v12);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34BA868[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34BA880[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34BA868[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

_BYTE *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(_BYTE **a1, _BYTE *a2, __int16 *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(*a1, a2, a3);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>(*a1, a2, a3);
}

_BYTE *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(_BYTE *result, _BYTE *a2, __int16 *a3)
{
  _BYTE *v4;
  uint64_t v5;
  __int16 v6;
  char v7;

  v4 = result;
  v5 = *((unsigned int *)result + 2);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      return std::optional<WebCore::PlatformMediaError>::swap[abi:sn180100](&v6, a2);
    }
    result = (_BYTE *)((uint64_t (*)(char *, _BYTE *))off_1E34BA868[v5])(&v7, result);
  }
  *((_DWORD *)v4 + 2) = -1;
  *(_WORD *)v4 = *a3;
  *((_DWORD *)v4 + 2) = 1;
  return result;
}

_BYTE *std::optional<WebCore::PlatformMediaError>::swap[abi:sn180100](_BYTE *result, _BYTE *a2)
{
  char v2;

  if ((result[1] != 0) != (a2[1] != 0))
  {
    if (result[1])
    {
      *a2 = *result;
      a2[1] = 1;
      if (result[1])
        result[1] = 0;
    }
    else
    {
      *result = *a2;
      result[1] = 1;
      if (a2[1])
        a2[1] = 0;
    }
  }
  else if (result[1])
  {
    v2 = *result;
    *result = *a2;
    *a2 = v2;
  }
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> ()(void)>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = result;
  v5 = result[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E34BA868[v5])(&v8, result);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    v4[2] = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *IPC::Connection::sendWithPromisedReply<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>@<X0>(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v18;
  uint64_t v19[4];
  uint64_t v20[5];

  v19[0] = 0;
  v19[1] = 0;
  v19[2] = (uint64_t)"sendWithPromisedReply";
  v19[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v20, 0, (WTF::Logger::LogSiteIdentifier *)v19);
  v8 = v20[0];
  if (v20[0])
  {
    v9 = (unsigned int *)(v20[0] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  *a4 = v8;
  IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(v20, v19);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 142;
  *(_QWORD *)(v11 + 8) = a2;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v18 = (IPC::Encoder *)v11;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(a1, &v18, v19, a3, 0);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v12);
    WTF::fastFree(v14, v15);
  }
  v16 = v19[0];
  v19[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v20);
}

uint64_t *IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v3 = *a1;
  *a1 = 0;
  v4 = *(_OWORD *)(a1 + 3);
  v9 = *(_OWORD *)(a1 + 1);
  v10 = v4;
  v5 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v5 = off_1E34BA8A8;
  *(_QWORD *)(v5 + 8) = v3;
  v8 = 0;
  v6 = v10;
  *(_OWORD *)(v5 + 16) = v9;
  *(_OWORD *)(v5 + 32) = v6;
  *a2 = v5;
  a2[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v8);
}

uint64_t WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  __int128 v8;

  v6 = WTF::fastMalloc((WTF *)0x78);
  v7 = (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(v6, a3);
  *(_QWORD *)a1 = v7;
  v8 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a1 + 8) = v8;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::setDispatchMode(v7, a2, a3);
  return a1;
}

_BYTE *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::setDispatchMode(unsigned __int8 *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  _BYTE *result;
  BOOL v9;
  int v10;

  v5 = (uint64_t)a1;
  v6 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  result = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*result)
    v9 = result[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, a3, " runSynchronouslyOnTarget ", v5);
  atomic_store(a2, (unsigned __int8 *)(v5 + 113));
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BA8A8;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34BA8A8;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34BA8D0;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(uint64_t *a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t isSettled;
  uint64_t v7;
  WTF::StringImpl *result;
  BOOL v9;

  isSettled = *a1;
  if (isSettled)
  {
    isSettled = WTF::NativePromise<void,void,0u>::isSettled(isSettled);
    v7 = *a1;
    if (!(_DWORD)isSettled)
      return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleWithFunction(v7, a2, a3);
  }
  else
  {
    v7 = 0;
  }
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*(_BYTE *)result)
    v9 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v9 = 0;
  if (v9)
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, a3, " ignored already resolved or rejected ", v7);
  return result;
}

WTF::Lock *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleWithFunction(uint64_t a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling ", a1);
  v10 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E34BA868[v10])(&v16, a1 + 56);
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 56) = v11;
  *(_DWORD *)(a1 + 64) = 2;
  result = (WTF::Lock *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll((_QWORD *)a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BA8D0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34BA8D0;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaPlayerPrivateRemote::CommitAllTransactions,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::call@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(result + 8);
  if (v2 && *v2)
    *a2 = 0;
  else
    *a2 = 260;
  return result;
}

_QWORD *std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::~__func(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34BA8F8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

void std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::~__func(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34BA8F8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int **)(a1 + 16);
  *result = &off_1E34BA8F8;
  result[1] = v4;
  if (v3)
  {
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
  }
  result[2] = v3;
  return result;
}

uint64_t std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E34BA8F8;
  a2[1] = v2;
  v3 = *(unsigned int **)(result + 16);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  a2[2] = v3;
  return result;
}

unsigned int *std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::destroy(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::destroy_deallocate(_QWORD *__p, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)__p[2];
  __p[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  operator delete(__p);
}

uint64_t std::__function::__func<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0,std::allocator<WebKit::RemoteMediaPlayerProxy::getConfiguration(WebKit::RemoteMediaPlayerConfiguration &)::$_0>,void ()(WTF::MediaTime const&)>::operator()(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;

  v3 = *a2;
  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
      return WebKit::RemoteMediaPlayerProxy::currentTimeChanged(*(WebKit::RemoteMediaPlayerProxy **)(result + 8), (const WTF::MediaTime *)&v3);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::SeekTarget>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WebCore::SeekTarget *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  WTF *v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t i;
  WTF::StringImpl *v25;
  int v26;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint8_t buf[16];
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WebCore::SeekTarget::toString(a4);
  *(_QWORD *)buf = v30;
  v28[0] = v29;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v30;
    v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(NSObject **)(a1 + 32);
    v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      WTF::String::utf8();
      v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          v12 = (WTF *)WTF::fastFree(v12, v13);
        else
          --*(_DWORD *)v12;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v16 = *v15;
        if ((v16 & 1) != 0)
          break;
        v17 = __ldaxr(v15);
        if (v17 == v16)
        {
          if (!__stxr(v16 | 1, v15))
          {
            v18 = WTF::Logger::observers(v12);
            v19 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v19)
            {
              v20 = *(uint64_t **)v18;
              v21 = *(_QWORD *)v18 + 8 * v19;
              do
              {
                v22 = *v20;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v33 = 0;
                WebCore::SeekTarget::toString(a4);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v22 + 16))(v22, a1, a2, v28);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
                for (i = 24; i != -8; i -= 16)
                {
                  v25 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                }
                ++v20;
              }
              while (v20 != (uint64_t *)v21);
            }
            v26 = __ldxr(v15);
            if (v26 == 1)
            {
              if (!__stlxr(0, v15))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF *v26[2];
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint8_t buf[16];
  int v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::LogArgument<BOOL>::toString<BOOL>(&v27);
  *(_QWORD *)buf = v28;
  v26[0] = v27;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v26, &v29);
  if (v29)
  {
    v7 = v27;
    v27 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v28;
    v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *(NSObject **)(a1 + 32);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v26[0] ? (char *)v26[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v26[0];
      v26[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v31 = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(v32);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v26, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v20 + 16))(v20, a1, a2, v26);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::LogArgument<BOOL>::toString<BOOL>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a1 = v3;
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BA940;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BA940;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  _BYTE v6[80];
  int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>>(a2, (uint64_t)v6);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
  {
    if (v7 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E34BA768[v7])(&v5, v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::MediaPlayerPrivateRemote::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  char v3;
  _QWORD v4[10];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 16))(v1, v4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v5 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34BA768[v5])(&v3, v4);
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 88))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  int v5;
  char v6;
  _BYTE v7[80];
  int v8;
  unsigned __int8 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>(a1, (uint64_t)v7);
  v4 = v9;
  *(_BYTE *)a2 = 0;
  if (v4)
  {
    *(_DWORD *)(a2 + 80) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v7);
    v5 = v9;
    *(_BYTE *)(a2 + 88) = 1;
    if (v5)
    {
      if (v8 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E34BA768[v8])(&v6, v7);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 88))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t result;
  char v9;
  WTF::StringImpl *v10;
  __int128 v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  char v37;
  char v38;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v15 = 0;
    v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      v20 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        a1 = v20;
        v16 = *v20;
        v15 = v20[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_15;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v15 = v3;
    v16 = 0;
LABEL_15:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      v19 = a1;
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16, v15);
        a1 = v19;
        v4 = *v19;
        v3 = v19[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_16;
  }
  v7 = *v6;
  if (v7 >= 2)
  {
LABEL_16:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v3)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
LABEL_17:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 88) = 0;
    return result;
  }
  if (v7)
  {
    result = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
    if (v9)
    {
      *(_QWORD *)a2 = result;
      *(_DWORD *)(a2 + 80) = 0;
      *(_BYTE *)(a2 + 88) = 1;
      return result;
    }
    goto LABEL_17;
  }
  IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)&v29);
  if (v38)
  {
    v11 = v31;
    LODWORD(v31) = v31 & 0xFFFFFFFE;
    v24 = v33;
    v25 = v34;
    v26 = v35;
    v27 = v36;
    v28 = v37;
    v12 = v29;
    v13 = v30;
    v29 = 0;
    v30 = 0;
    v22 = v11;
    v23 = v32;
    v33 = 0;
    v36 = 0;
    v21 = v13;
    *(_QWORD *)a2 = v12;
    WTF::URL::URL(a2 + 8, (uint64_t *)&v21);
    v14 = v21;
    *(_QWORD *)(a2 + 48) = v24;
    *(_DWORD *)(a2 + 56) = v25;
    *(_WORD *)(a2 + 60) = v26;
    *(_QWORD *)(a2 + 64) = v27;
    *(_BYTE *)(a2 + 72) = v28;
    *(_DWORD *)(a2 + 80) = 1;
    *(_BYTE *)(a2 + 88) = 1;
    v27 = 0;
    v24 = 0;
    v21 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 88) = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v10);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 80);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34BA768[v4])(&v7, result);
  *(_DWORD *)(v3 + 80) = -1;
  v5 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34BA958[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7SecondsEN7WebCore13ResourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7SecondsEN7WebCore13ResourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v5;
  WTF::URL::URL(a2 + 8, a3 + 1);
  v6 = a3[6];
  a3[6] = 0;
  *(_QWORD *)(a2 + 48) = v6;
  LODWORD(v6) = *((_DWORD *)a3 + 14);
  *(_WORD *)(a2 + 60) = *((_WORD *)a3 + 30);
  *(_DWORD *)(a2 + 56) = v6;
  v7 = a3[8];
  a3[8] = 0;
  *(_QWORD *)(a2 + 64) = v7;
  *(_BYTE *)(a2 + 72) = *((_BYTE *)a3 + 72);
}

WTF::StringImpl *WTF::Function<void ()(WTF::String)>::operator()(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  v6 = v3;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerReadyState>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF *v26[2];
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint8_t buf[16];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WebCore::convertEnumerationToString();
  *(_QWORD *)buf = v28;
  v26[0] = v27;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v26, &v29);
  if (v29)
  {
    v7 = v27;
    v27 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v28;
    v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *(NSObject **)(a1 + 32);
    v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v10)
    {
      WTF::String::utf8();
      v12 = v26[0] ? (char *)v26[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v10 = v26[0];
      v26[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          v10 = (WTF *)WTF::fastFree(v10, v11);
        else
          --*(_DWORD *)v10;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v14 = *v13;
        if ((v14 & 1) != 0)
          break;
        v15 = __ldaxr(v13);
        if (v15 == v14)
        {
          if (!__stxr(v14 | 1, v13))
          {
            v16 = WTF::Logger::observers(v10);
            v17 = *(unsigned int *)(v16 + 12);
            if ((_DWORD)v17)
            {
              v18 = *(uint64_t **)v16;
              v19 = *(_QWORD *)v16 + 8 * v17;
              do
              {
                v20 = *v18;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v31 = 0;
                WebCore::convertEnumerationToString();
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v26, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v20 + 16))(v20, a1, a2, v26);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v21);
                for (i = 24; i != -8; i -= 16)
                {
                  v23 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                }
                ++v18;
              }
              while (v18 != (uint64_t *)v19);
            }
            v24 = __ldxr(v13);
            if (v24 == 1)
            {
              if (!__stlxr(0, v13))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WTF::MediaTime *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  WTF *v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t i;
  WTF::StringImpl *v25;
  int v26;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint8_t buf[16];
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::MediaTime::toJSONString(a4);
  *(_QWORD *)buf = v30;
  v28[0] = v29;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v30;
    v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(NSObject **)(a1 + 32);
    v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      WTF::String::utf8();
      v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          v12 = (WTF *)WTF::fastFree(v12, v13);
        else
          --*(_DWORD *)v12;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v16 = *v15;
        if ((v16 & 1) != 0)
          break;
        v17 = __ldaxr(v15);
        if (v17 == v16)
        {
          if (!__stxr(v16 | 1, v15))
          {
            v18 = WTF::Logger::observers(v12);
            v19 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v19)
            {
              v20 = *(uint64_t **)v18;
              v21 = *(_QWORD *)v18 + 8 * v19;
              do
              {
                v22 = *v20;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v33 = 1;
                WTF::MediaTime::toJSONString(a4);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v22 + 16))(v22, a1, a2, v28);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
                for (i = 24; i != -8; i -= 16)
                {
                  v25 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                }
                ++v20;
              }
              while (v20 != (uint64_t *)v21);
            }
            v26 = __ldxr(v15);
            if (v26 == 1)
            {
              if (!__stlxr(0, v15))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaPlayerPrivateRemote::GetRawCookies,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BA978;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaPlayerPrivateRemote::GetRawCookies,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BA978;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaPlayerPrivateRemote::GetRawCookies,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7), !v8))
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  return result;
}

uint64_t IPC::Connection::send<Messages::MediaPlayerPrivateRemote::ActiveSourceBuffersChanged>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v16;

  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 134;
  *(_QWORD *)(v9 + 8) = a3;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v13, v14);
  }
  return v11;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RemoteMediaPlayerProxy::setWirelessPlaybackTarget(WebKit::MediaPlaybackTargetContextSerialized &&)::$_0,WebKit::RemoteMediaPlayerProxy::setWirelessPlaybackTarget(WebKit::MediaPlaybackTargetContextSerialized &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MediaPlaybackTargetContextCocoa,std::__variant_detail::__base::MediaPlaybackTargetContextMock> &&>()
{
  uint64_t result;
  _DWORD *v1;

  WebCore::MediaPlaybackTargetCocoa::create();
  WebCore::MediaPlayer::setWirelessPlaybackTarget();
  result = (uint64_t)v1;
  if (v1)
  {
    if (v1[2] == 1)
      return (*(uint64_t (**)())(*(_QWORD *)v1 + 8))();
    else
      --v1[2];
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::RemoteMediaPlayerProxy::setWirelessPlaybackTarget(WebKit::MediaPlaybackTargetContextSerialized &&)::$_0,WebKit::RemoteMediaPlayerProxy::setWirelessPlaybackTarget(WebKit::MediaPlaybackTargetContextSerialized &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MediaPlaybackTargetContextCocoa,std::__variant_detail::__base::MediaPlaybackTargetContextMock> &&>()
{
  uint64_t result;
  _DWORD *v1;

  WebCore::MediaPlaybackTargetMock::create();
  WebCore::MediaPlayer::setWirelessPlaybackTarget();
  result = (uint64_t)v1;
  if (v1)
  {
    if (v1[2] == 1)
      return (*(uint64_t (**)())(*(_QWORD *)v1 + 8))();
    else
      --v1[2];
  }
  return result;
}

void WebCore::PlatformTextTrack::~PlatformTextTrack(WebCore::PlatformTextTrack *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::PlatformTextTrack::~PlatformTextTrack(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E34BA9B0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

uint64_t IPC::Connection::send<Messages::MediaPlayerPrivateRemote::CurrentTimeChanged>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 144;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::MediaTimeUpdateData,void>::encode((IPC::Encoder *)v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t IPC::Connection::send<Messages::MediaPlayerPrivateRemote::UpdateCachedState>(uint64_t a1, _QWORD **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 177;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerState,void>::encode((IPC::Encoder *)v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteMediaPlayerProxy::performTaskAtTime(WTF::MediaTime const&,WTF::CompletionHandler<void ()(std::optional<WTF::MediaTime>)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34BA9D0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaPlayerProxy::performTaskAtTime(WTF::MediaTime const&,WTF::CompletionHandler<void ()(std::optional<WTF::MediaTime>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34BA9D0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaPlayerProxy::performTaskAtTime(WTF::MediaTime const&,WTF::CompletionHandler<void ()(std::optional<WTF::MediaTime>)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *(_QWORD *)(result + 8);
    v3 = *(_QWORD *)(v2 + 736);
    if (v3)
    {
      *(_QWORD *)(v2 + 736) = 0;
      v5[0] = WebCore::MediaPlayer::currentTime(*(WebCore::MediaPlayer **)(v2 + 120));
      v5[1] = v4;
      v6 = 1;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v5);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, double *a4)
{
  WTF::String *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  WTF *v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::String *v24;
  double v25;
  void *v26;
  uint64_t i;
  WTF::StringImpl *v28;
  int v29;
  WTF *v31[2];
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint8_t buf[16];
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::number(v7, *a4);
  *(_QWORD *)buf = v33;
  v31[0] = v32;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v31, &v34);
  if (v34)
  {
    v10 = v32;
    v32 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v33;
    v33 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = *(NSObject **)(a1 + 32);
    v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v13)
    {
      WTF::String::utf8();
      v15 = v31[0] ? (char *)v31[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v15;
      _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v13 = v31[0];
      v31[0] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          v13 = (WTF *)WTF::fastFree(v13, v14);
        else
          --*(_DWORD *)v13;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v17 = *v16;
        if ((v17 & 1) != 0)
          break;
        v18 = __ldaxr(v16);
        if (v18 == v17)
        {
          if (!__stxr(v17 | 1, v16))
          {
            v19 = WTF::Logger::observers(v13);
            v20 = *(unsigned int *)(v19 + 12);
            if ((_DWORD)v20)
            {
              v21 = *(uint64_t **)v19;
              v22 = *(_QWORD *)v19 + 8 * v20;
              do
              {
                v23 = *v21;
                *(_DWORD *)buf = 0;
                v24 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString(this);
                v25 = *a4;
                v36 = 0;
                WTF::String::number(v24, v25);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v31, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v23 + 16))(v23, a1, a2, v31);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v26);
                for (i = 24; i != -8; i -= 16)
                {
                  v28 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v28)
                  {
                    if (*(_DWORD *)v28 == 2)
                      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v14);
                    else
                      *(_DWORD *)v28 -= 2;
                  }
                }
                ++v21;
              }
              while (v21 != (uint64_t *)v22);
            }
            v29 = __ldxr(v16);
            if (v29 == 1)
            {
              if (!__stlxr(0, v16))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v34;
    v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

BOOL WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::hasRunnable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 96);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 2;
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResultRunnable(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 96) != 2)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResult(v7);
  }
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *v3 = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

WTF::StringImpl *WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResult(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v3;
  unsigned __int8 *v4;
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::Logger::LogSiteIdentifier *v11;

  v3 = result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = (WTF::StringImpl *)MEMORY[0x19AEABB3C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 96) != 1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(v8, v9, v10, v11);
  }
  v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)v3 = *(_OWORD *)(a2 + 56);
  *((_OWORD *)v3 + 1) = v6;
  *((_QWORD *)v3 + 4) = *(_QWORD *)(a2 + 88);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, uint64_t a2, uint64_t a3, WTF::Logger::LogSiteIdentifier *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  WTF *v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t i;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::Logger::LogSiteIdentifier *v34;
  WTF *v35[2];
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  _BYTE buf[12];
  int v50;
  uint64_t v51;
  int v52;
  _DWORD v53[8];
  _DWORD v54[8];
  _QWORD v55[3];

  v55[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, "ThenCallback disconnected from ");
  v33 = a2;
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v41, a2);
  WTF::String::String((WTF::String *)&v40, " aborting [callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v38, " callSite:");
  v34 = a4;
  WTF::Logger::LogSiteIdentifier::toString(a4);
  WTF::String::String((WTF::String *)&v36, "]");
  v35[0] = v41;
  v48 = v40;
  *(_QWORD *)buf = v42;
  v46 = v38;
  v47 = v39;
  v44 = v36;
  v45 = v37;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)buf, (uint64_t *)v35, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, &v43);
  if (v43)
  {
    v9 = v36;
    v36 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v37;
    v37 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v38;
    v38 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v39;
    v39 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v40;
    v40 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v8);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v41;
    v41 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v42;
    v42 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = *(NSObject **)(a1 + 32);
    v17 = (WTF *)os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v17)
    {
      WTF::String::utf8();
      v19 = v35[0] ? (char *)v35[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v19;
      _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v17 = v35[0];
      v35[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
          v17 = (WTF *)WTF::fastFree(v17, v18);
        else
          --*(_DWORD *)v17;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v21 = *v20;
        if ((v21 & 1) != 0)
          break;
        v22 = __ldaxr(v20);
        if (v22 == v21)
        {
          if (!__stxr(v21 | 1, v20))
          {
            v32 = a1;
            v23 = WTF::Logger::observers(v17);
            v24 = *(unsigned int *)(v23 + 12);
            if ((_DWORD)v24)
            {
              v25 = *(uint64_t **)v23;
              v31 = *(_QWORD *)v23 + 8 * v24;
              do
              {
                v26 = *v25;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "ThenCallback disconnected from ");
                v50 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v51, v33);
                v52 = 0;
                WTF::String::String((WTF::String *)v53, " aborting [callback:");
                v53[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v53[6] = 0;
                WTF::String::String((WTF::String *)v54, " callSite:");
                v54[2] = 0;
                WTF::Logger::LogSiteIdentifier::toString(v34);
                v54[6] = 0;
                WTF::String::String((WTF::String *)v55, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v35, (uint64_t)buf, 7uLL);
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v26 + 16))(v26, v32, 4, v35);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v27);
                for (i = 104; i != -8; i -= 16)
                {
                  v29 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v29)
                  {
                    if (*(_DWORD *)v29 == 2)
                      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v29 -= 2;
                  }
                }
                ++v25;
              }
              while (v25 != (uint64_t *)v31);
            }
            v30 = __ldxr(v20);
            if (v30 == 1)
            {
              if (!__stlxr(0, v20))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v43;
    v43 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34BA9F8;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34BA9F8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  _BYTE *v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 3);
  if (v1[56])
  {
    v10[0] = *((_QWORD *)a1 + 1);
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
  }
  else
  {
    hasRunnable = WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::hasRunnable(*((_QWORD *)a1 + 3));
    v7 = *((_QWORD *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResultRunnable((uint64_t)&v9, *((_QWORD *)a1 + 3));
      v8 = v9;
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(v10, v9);
      (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v10);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResult((WTF::StringImpl *)v10, *((_QWORD *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v10);
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    v6 = a3 - (_QWORD)v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void **WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  int v2;
  void **v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (void **)*result;
    v5 = *((unsigned int *)result + 3);
    if (a2 < 2)
    {
      v6 = result + 2;
      *v3 = v3 + 2;
      *((_DWORD *)v3 + 2) = 1;
    }
    else
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *v3 = v6;
    }
    result = (void **)memcpy(v6, v4, 8 * v5);
    if (v3 + 2 != v4 && v4 != 0)
    {
      if (*v3 == v4)
      {
        *v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteMediaResource::shutdown(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34BAA20;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaResource::shutdown(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BAA20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteMediaResource::shutdown(void)::$_0,void>::call(IPC::Encoder *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v9 = *((_QWORD *)result + 2);
      v3 = *(_QWORD *)(v2 + 112);
      v4 = *(_QWORD *)(v2 + 88);
      v5 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v5 = 169;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v10 = (IPC::Encoder *)v5;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v5, &v9);
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
      result = v10;
      v10 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v6);
        return (IPC::Encoder *)WTF::fastFree(v7, v8);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteMediaResource::responseReceived(WebCore::ResourceResponse const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0,void,WebCore::ShouldContinuePolicyCheck>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34BAA48;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaResource::responseReceived(WebCore::ResourceResponse const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0,void,WebCore::ShouldContinuePolicyCheck>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34BAA48;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaResource::responseReceived(WebCore::ResourceResponse const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ShouldContinuePolicyCheck)> &&)::$_0,void,WebCore::ShouldContinuePolicyCheck>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  if ((a2 & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v4 + 8));
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = &off_1E34BAA70;
    v5[1] = v4;
    v8 = v5;
    WTF::ensureOnMainThread();
    if (v8)
      (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  }
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19RemoteMediaResource16responseReceivedERKN7WebCore16ResourceResponseEbONS_17CompletionHandlerIFvNS4_25ShouldContinuePolicyCheckEEEEEN3__0clIS9_EEDaT_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34BAA70;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19RemoteMediaResource16responseReceivedERKN7WebCore16ResourceResponseEbONS_17CompletionHandlerIFvNS4_25ShouldContinuePolicyCheckEEEEEN3__0clIS9_EEDaT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BAA70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19RemoteMediaResource16responseReceivedERKN7WebCore16ResourceResponseEbONS_17CompletionHandlerIFvNS4_25ShouldContinuePolicyCheckEEEEEN3__0clIS9_EEDaT_EUlvE_vJEE4callEv(uint64_t a1)
{
  return WebKit::RemoteMediaResource::shutdown(*(unsigned int **)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteMediaResourceManager::~RemoteMediaResourceManager()::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34BAA98;
  v3 = a1[1];
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaResourceManager::~RemoteMediaResourceManager()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34BAA98;
  v3 = *((_QWORD *)this + 1);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::RemoteMediaResourceManager::~RemoteMediaResourceManager()::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  WebKit::RemoteMediaResource *v8;
  _QWORD *v9;
  WebKit::RemoteMediaResource *v10;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
  {
    v4 = 0;
    LODWORD(v2) = 0;
LABEL_10:
    v3 = (_QWORD *)(v1 + 24 * v2);
    goto LABEL_11;
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = (_QWORD *)(v1 + 24 * v2);
  if (!*(_DWORD *)(v1 - 12))
  {
    v4 = (_QWORD *)(v1 + 24 * v2);
    goto LABEL_10;
  }
  v4 = (_QWORD *)*((_QWORD *)result + 1);
  if ((_DWORD)v2)
  {
    v5 = 24 * v2;
    v4 = (_QWORD *)*((_QWORD *)result + 1);
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 3;
      v5 -= 24;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v6 = (_QWORD *)(v1 + 24 * *(unsigned int *)(v1 - 4));
  else
    v6 = 0;
  while (v4 != v6)
  {
    result = (unsigned __int8 *)v4[1];
    if (result)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, v4[2], &v10);
      result = (unsigned __int8 *)v10;
      if (v10)
      {
        result = (unsigned __int8 *)WebKit::RemoteMediaResource::shutdown((unsigned int *)v10);
        v8 = v10;
        v10 = 0;
        if (v8)
          result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::PlatformMediaResource,(WTF::DestructionThread)0>(*((unsigned __int8 **)v8 + 1), v7);
      }
    }
    v9 = v4 + 3;
    v4 = v3;
    if (v9 != v3)
    {
      v4 = v9;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 3;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (a2)
    bzero((void *)(v6 + 16), 24 * a2);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    while (1)
    {
      v12 = (uint64_t *)(v3 + 24 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = (uint64_t *)(v16 + 24 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          v25 = v23;
          v26 = v16 + 24 * v23;
          v29 = *(unsigned __int8 **)(v26 + 8);
          v28 = (_QWORD *)(v26 + 8);
          v27 = v29;
          *v28 = 0;
          if (v29)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v27, v7);
          *v24 = *v12;
          v30 = v3 + 24 * v10;
          *v28 = *(_QWORD *)(v30 + 8);
          v31 = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v30 + 8) = 0;
          *(_QWORD *)(v30 + 16) = 0;
          *(_QWORD *)(v16 + 24 * v25 + 16) = v31;
          v15 = *(unsigned __int8 **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (!v15)
            goto LABEL_21;
LABEL_20:
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v15, v7);
          goto LABEL_21;
        }
        v14 = v3 + 24 * v10;
        v15 = *(unsigned __int8 **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = 0;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if (++v10 == v11)
        goto LABEL_24;
    }
  }
  if (v3)
LABEL_24:
    WTF::fastFree((WTF *)(v3 - 16), v7);
}

WTF::ThreadSafeWeakPtrControlBlock *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>@<X0>(WTF::ThreadSafeWeakPtrControlBlock *result@<X0>, _QWORD *a2@<X1>, WTF::ThreadSafeWeakPtrControlBlock **a3@<X8>)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  WTF::ThreadSafeWeakPtrControlBlock *v12;

  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  v5 = *(_DWORD *)(v4 - 8);
  v6 = *a2 + ~(*a2 << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = v5 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
  v10 = *(_QWORD *)(v4 + 24 * v9);
  if (v10 != *a2)
  {
    v11 = 1;
    while (v10)
    {
      v9 = (v9 + v11) & v5;
      v10 = *(_QWORD *)(v4 + 24 * v9);
      ++v11;
      if (v10 == *a2)
        goto LABEL_6;
    }
    goto LABEL_9;
  }
LABEL_6:
  result = *(WTF::ThreadSafeWeakPtrControlBlock **)(v4 + 24 * v9 + 8);
  if (result)
    result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
  v12 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v4 + 24 * v9 + 16);
  *a3 = result;
  a3[1] = v12;
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E34BAAB0[v11])(&v16, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 80) = 1;
  result = (WTF::Lock *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll((_QWORD *)a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  _BYTE *v4;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34BABD8;
  v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v4, 4u, "creating ", a1);
  return a1;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 124);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 112);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromise(unsigned int *a1)
{
  unsigned int *v1;
  void *v2;

  v1 = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromise(a1);
  return WTF::fastFree((WTF *)v1, v2);
}

unsigned int *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromise(unsigned int *a1)
{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  void *v5;
  uint64_t v6;
  char v8;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v2, 4u, "destroying ", (uint64_t)a1);
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 28), v4);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 22), v5);
  v6 = a1[20];
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, unsigned int *))off_1E34BAAB0[v6])(&v8, a1 + 14);
  a1[20] = -1;
  return a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll(_QWORD *__dst, unsigned __int8 **a2)
{
  _QWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  WTF::NativePromiseBase **v13;
  uint64_t v14;
  WTF::NativePromiseBase *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[2];
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::NativePromiseBase **v23;
  uint64_t v24;
  uint64_t v25;

  v5 = __dst + 11;
  v4 = (_QWORD *)__dst[11];
  v20 = &v22;
  v21 = 1;
  v23 = (WTF::NativePromiseBase **)&v25;
  v24 = 1;
  if (v4 == __dst + 13)
  {
    v7 = *((unsigned int *)__dst + 25);
    memcpy(&v25, v4, 8 * v7);
  }
  else
  {
    __dst[11] = __dst + 13;
    v23 = (WTF::NativePromiseBase **)v4;
    v6 = *((_DWORD *)__dst + 24);
    LODWORD(v7) = *((_DWORD *)__dst + 25);
    *((_DWORD *)__dst + 24) = 1;
    LODWORD(v24) = v6;
  }
  *((_DWORD *)__dst + 25) = 0;
  HIDWORD(v24) = v7;
  WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(v5, &v20);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  v9 = __dst[14];
  v20 = (uint64_t *)v9;
  v10 = *((unsigned int *)__dst + 31);
  LODWORD(v21) = *((_DWORD *)__dst + 30);
  HIDWORD(v21) = v10;
  v19[0] = 0;
  __dst[14] = 0;
  v19[1] = 0;
  __dst[15] = 0;
  WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v11);
  if (HIDWORD(v24))
  {
    v13 = v23;
    v14 = 8 * HIDWORD(v24);
    do
    {
      v15 = *v13++;
      WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v15, (unsigned __int8 *)__dst, a2);
      v14 -= 8;
    }
    while (v14);
  }
  if ((_DWORD)v10)
  {
    v16 = 40 * v10;
    do
    {
      WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleChainedPromise((uint64_t)__dst, v9);
      v9 += 40;
      v16 -= 40;
    }
    while (v16);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v12);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v17);
}

unsigned __int8 *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, unsigned __int8 *a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[3];

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load(a2 + 129);
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E34BACA0;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v20[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v20);
      result = (unsigned __int8 *)v20[0];
      v20[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v20[0] = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", (uint64_t)a2, " aborting [callback:", (int)v20, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_23:
  if (WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable((uint64_t)a2))
  {
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResultRunnable((uint64_t)a2, &v19);
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v19 + 16))(v20);
    (*(void (**)(WTF::NativePromiseBase *, unsigned __int8 *, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v20);
    v17 = v19;
    v19 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResult(a2, (uint64_t)v20);
    (*(void (**)(WTF::NativePromiseBase *, unsigned __int8 *, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v20);
  }
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEABB3C]();
}

uint64_t *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v13 = v2;
  v3 = *(_OWORD *)(a2 + 24);
  v14 = *(_OWORD *)(a2 + 8);
  v15 = v3;
  if (v2)
  {
    v4 = (unsigned int *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v9 = 0;
    v10 = 0;
    v11 = "<chained promise>";
    v12 = 0;
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage>((unsigned __int8 *)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v9);
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = "<chained promise>";
    v12 = 0;
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v9);
  }
  return WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v13);
}

BOOL WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 80);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 2;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResultRunnable@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v4 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  if (*(_DWORD *)(v2 + 80) != 2)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResult(v7);
  }
  v6 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  *a2 = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

unsigned __int8 *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResult@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned __int8 *v4;
  int v6;
  _QWORD *v7;

  v2 = result;
  v4 = result + 48;
  if (__ldaxr(result + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  if (*((_DWORD *)v2 + 20) != 1)
  {
    v7 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 *)WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v7);
  }
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 56);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v2 + 9);
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34BACA0;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34BACA0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  unsigned __int8 *v8;
  _QWORD v9[3];

  v1 = *a1;
  v2 = a1[2];
  if (*(_BYTE *)(*a1 + 56))
  {
    v9[0] = *a1;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result)
      v4 = result[16] >= 4u;
    else
      v4 = 0;
    if (v4)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v9, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  }
  else
  {
    hasRunnable = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a1[2]);
    v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResultRunnable(a1[2], &v8);
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v8 + 16))(v9);
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v9);
      result = v8;
      v8 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResult((unsigned __int8 *)a1[2], (uint64_t)v9);
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v9);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage>(unsigned __int8 *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  unsigned __int8 *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t result;
  int v11;
  unsigned __int8 *v12;

  v6 = a1 + 48;
  v12 = v6;
  if (__ldaxr(v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  v6 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", (uint64_t)a1);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>,(std::__variant_detail::_Trait)1>>((uint64_t)(a1 + 56), a2);
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll(a1);
  result = (uint64_t)v12;
  v11 = __ldxr(v12);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v12);
  }
  if (__stlxr(0, v12))
    return WTF::Lock::unlockSlow((WTF::Lock *)v12);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 24);
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34BAAB0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34BAAC8[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34BAAB0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(__n128 **a1, uint64_t a2, __n128 *a3)
{
  double result;

  *(_QWORD *)&result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>(*a1, a2, a3).n128_u64[0];
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISA_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>(*a1, a2, a3);
}

__n128 std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>(__n128 *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5;
  __n128 result;
  __n128 v7;
  unint64_t v8;

  v5 = a1[1].n128_u32[2];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v7 = *a3;
      v8 = a3[1].n128_u64[0];
      std::variant<WTF::MediaTime,WebCore::PlatformMediaError>::swap[abi:sn180100]<true,0>((uint64_t)&v7, a2);
      return result;
    }
    ((void (*)(__n128 *, __n128 *))off_1E34BAAB0[v5])(&v7, a1);
  }
  a1[1].n128_u32[2] = -1;
  result = *a3;
  a1[1].n128_u64[0] = a3[1].n128_u64[0];
  *a1 = result;
  a1[1].n128_u32[2] = 1;
  return result;
}

uint64_t std::variant<WTF::MediaTime,WebCore::PlatformMediaError>::swap[abi:sn180100]<true,0>(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  char v15;

  v2 = *(_DWORD *)(result + 16);
  v3 = *(unsigned int *)(a2 + 16);
  if (v2 != -1 || (_DWORD)v3 != -1)
  {
    v5 = v2 == -1;
    if (v2 == -1)
      v6 = -1;
    else
      v6 = *(unsigned int *)(result + 16);
    if ((_DWORD)v3 != -1)
      v5 = v6 == v3;
    if (v5)
    {
      return ((uint64_t (*)(__int128 *, uint64_t, uint64_t))off_1E34BAAE0[v6])(&v13, result, a2);
    }
    else
    {
      v8 = (v2 - 2) < 0xFFFFFFFD || (v3 + 1) < 3;
      if (v8)
        v9 = result;
      else
        v9 = a2;
      if (v8)
        v10 = a2;
      else
        v10 = result;
      v13 = *(_OWORD *)v10;
      v14 = *(_QWORD *)(v10 + 16);
      *(_DWORD *)(v10 + 16) = -1;
      v11 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34BAAF0[v11])(&v15, v10, v9);
        *(_DWORD *)(v10 + 16) = v11;
      }
      *(_DWORD *)(v9 + 16) = -1;
      v12 = v14;
      if ((_DWORD)v14 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, __int128 *))off_1E34BAAF0[v14])(&v15, v9, &v13);
        *(_DWORD *)(v9 + 16) = v12;
      }
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF9MediaTimeEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __n128 result;
  uint64_t v4;
  _BYTE v5[13];

  result = *(__n128 *)a2;
  v4 = *(_QWORD *)((char *)a3 + 5);
  *(_QWORD *)a2 = *a3;
  *(_QWORD *)(a2 + 5) = v4;
  *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)&v5[5];
  *a3 = *(_QWORD *)v5;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF9MediaTimeEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9MediaTimeEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9MediaTimeEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> ()(void)>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = result;
  v5 = result[6];
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E34BAAB0[v5])(&v8, result);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    v4[6] = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  __int128 v8;

  v6 = WTF::fastMalloc((WTF *)0x88);
  v7 = (unsigned __int8 *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromise(v6, a3);
  *(_QWORD *)a1 = v7;
  v8 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a1 + 8) = v8;
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::setDispatchMode(v7, a2, a3);
  return a1;
}

_BYTE *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::setDispatchMode(unsigned __int8 *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  _BYTE *result;
  BOOL v9;
  int v10;

  v5 = (uint64_t)a1;
  v6 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  result = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*result)
    v9 = result[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, a3, " runSynchronouslyOnTarget ", v5);
  atomic_store(a2, (unsigned __int8 *)(v5 + 129));
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxyWaitForTarget,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BAB10;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxyWaitForTarget,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34BAB10;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxyWaitForTarget,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34BAB38;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(uint64_t *a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t isSettled;
  uint64_t v7;
  WTF::StringImpl *result;
  BOOL v9;

  isSettled = *a1;
  if (isSettled)
  {
    isSettled = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::isSettled(isSettled);
    v7 = *a1;
    if (!(_DWORD)isSettled)
      return WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleWithFunction(v7, a2, a3);
  }
  else
  {
    v7 = 0;
  }
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*(_BYTE *)result)
    v9 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v9 = 0;
  if (v9)
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, a3, " ignored already resolved or rejected ", v7);
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleWithFunction(uint64_t a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  WTF::Lock *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling ", a1);
  v10 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E34BAAB0[v10])(&v16, a1 + 56);
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 56) = v11;
  *(_DWORD *)(a1 + 80) = 2;
  result = (WTF::Lock *)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::dispatchAll((_QWORD *)a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

BOOL WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::isSettled(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 80);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 != 0;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 != 0;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxyWaitForTarget,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BAB38;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxyWaitForTarget,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34BAB38;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxyWaitForTarget,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  __int128 v4;
  uint64_t v5;
  char v6;

  result = *(uint64_t **)(a1 + 8);
  if (result
    && *result
    && (result = (uint64_t *)IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>>(result, (uint64_t)&v4), v6))
  {
    *(_OWORD *)a2 = v4;
    *(_QWORD *)(a2 + 16) = v5;
  }
  else
  {
    *(_BYTE *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

int64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>(a1, (uint64_t)&v8);
  if (v10)
  {
    *(_OWORD *)a2 = v8;
    *(_QWORD *)(a2 + 16) = v9;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(int64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

int64_t IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(int64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

int64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int64_t result;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 v16;
  char v17;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        a1 = v15;
        v11 = *v15;
        v10 = v15[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_14;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v10 = v3;
    v11 = 0;
LABEL_14:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v14 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        a1 = v14;
        v4 = *v14;
        v3 = v14[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_15;
  }
  v7 = *v6;
  if (v7 >= 2)
  {
LABEL_15:
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v3)
      result = (*(uint64_t (**)(int64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
    goto LABEL_8;
  }
  if (v7)
  {
    result = IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)&v16);
    v9 = v17;
    if (v17)
    {
      *(_OWORD *)a2 = v16;
      *(_DWORD *)(a2 + 16) = 0;
      v9 = 1;
    }
    else
    {
      *(_BYTE *)a2 = 0;
    }
    goto LABEL_11;
  }
  result = IPC::Decoder::decode<WebCore::PlatformMediaError>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
LABEL_8:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return result;
  }
  *(_BYTE *)a2 = result;
  v9 = 1;
  *(_DWORD *)(a2 + 16) = 1;
LABEL_11:
  *(_BYTE *)(a2 + 24) = v9;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PlatformMediaError>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::PlatformMediaError,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PlatformMediaError,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_6;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10 && v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    goto LABEL_7;
  }
  v5 = *v4;
  if (v5 >= 0xC)
  {
LABEL_7:
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  v6 = 1;
  return v5 | (v6 << 8);
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxySeekToTime,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BAB60;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxySeekToTime,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34BAB60;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxySeekToTime,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34BAB88;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxySeekToTime,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BAB88;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxySeekToTime,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34BAB88;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::MediaSourcePrivateRemoteMessageReceiver::ProxySeekToTime,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::call@<X0>(uint64_t a1@<X0>, __int16 *a2@<X8>)
{
  uint64_t *result;
  __int16 v4;
  __int16 v5;
  char v6;

  result = *(uint64_t **)(a1 + 8);
  if (result
    && *result
    && (result = IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>>(result, (uint64_t)&v5), v6))
  {
    v4 = v5;
  }
  else
  {
    v4 = 260;
  }
  *a2 = v4;
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int16 v8;
  char v9;

  result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(a1, &v8);
  if (v9)
  {
    *(_WORD *)a2 = v8;
    *(_BYTE *)(a2 + 2) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 2) = 0;
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[2])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        result = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_11;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_11:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        result = v13;
        v4 = *v13;
        v3 = v13[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_12;
  }
  v7 = *v6;
  if (v7 >= 2)
  {
LABEL_12:
    *result = 0;
    result[1] = 0;
    result = (uint64_t *)result[3];
    if (result && v3)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
LABEL_7:
    v8 = 0;
    *a2 = 0;
    goto LABEL_9;
  }
  if (!v7)
  {
    result = (uint64_t *)IPC::Decoder::decode<WebCore::PlatformMediaError>(result);
    if ((unsigned __int16)result > 0xFFu)
    {
      *a2 = (_BYTE)result;
      v8 = 1;
      a2[1] = 1;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *(_WORD *)a2 = 0;
  v8 = 1;
LABEL_9:
  a2[2] = v8;
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E34BAC78;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaSourcePrivateRemoteMessageReceiver::MediaSourcePrivateShuttingDown,WebKit::RemoteMediaSourceProxy::shutdown(void)::$_0>(WebKit::RemoteMediaSourceProxy::shutdown(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34BABB0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 16));
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaSourcePrivateRemoteMessageReceiver::MediaSourcePrivateShuttingDown,WebKit::RemoteMediaSourceProxy::shutdown(void)::$_0>(WebKit::RemoteMediaSourceProxy::shutdown(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34BABB0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 16));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::MediaSourcePrivateRemoteMessageReceiver::MediaSourcePrivateShuttingDown,WebKit::RemoteMediaSourceProxy::shutdown(void)::$_0>(WebKit::RemoteMediaSourceProxy::shutdown(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WebKit::RemoteMediaSourceProxy::disconnect(*(WebKit::RemoteMediaSourceProxy **)(a1 + 8));
}

uint64_t *WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = v11 ^ HIWORD(v11);
  v13 = v8;
  v14 = v12 & v8;
  v15 = (uint64_t *)(v6 + v14);
  v16 = *(unsigned __int8 *)(v6 + v14);
  if (v16 != 255)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v6 - 4);
        v27 = 0;
        v26 = v6 + v25;
        goto LABEL_29;
      }
      if (v16 == 254)
        v17 = v15;
      v14 = ((_DWORD)v14 + v18) & v13;
      v15 = (uint64_t *)(v6 + v14);
      v16 = *(unsigned __int8 *)(v6 + v14);
      ++v18;
    }
    while (v16 != 255);
    if (v17)
    {
      *(_BYTE *)v17 = -1;
      --*(_DWORD *)(*v4 - 16);
      LOBYTE(v9) = *a2;
      v15 = v17;
    }
  }
  *(_BYTE *)v15 = v9;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_20:
      result = (uint64_t *)WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::expand(v4, (uint64_t)v15);
      v15 = result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_20;
  }
  v26 = v21 + v24;
  v27 = 1;
LABEL_29:
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

_BYTE *WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  size_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *result;

  v4 = *a1;
  if (!*a1)
  {
    v13 = WTF::fastMalloc((WTF *)0x18);
    v11 = v13;
    v6 = 0;
    v5 = 0;
LABEL_7:
    v12 = (void *)(v13 + 16);
    v8 = 8;
    v9 = 8;
    goto LABEL_8;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
    v13 = WTF::fastMalloc((WTF *)0x18);
    v11 = v13;
    goto LABEL_7;
  }
  v7 = 6 * v6 >= (2 * v5);
  v8 = (v5 << v7);
  v9 = v5 << v7;
  v11 = WTF::fastMalloc((WTF *)(v8 + 16));
  v12 = (void *)(v11 + 16);
  if ((_DWORD)v8)
LABEL_8:
    memset(v12, 255, v8);
  *a1 = (uint64_t)v12;
  *(_DWORD *)(v11 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = *(unsigned __int8 *)(v4 + v14);
      if (v16 <= 0xFD)
      {
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 8);
        else
          v18 = 0;
        v19 = 0;
        v20 = 9 * ((~(v16 << 15) + v16) ^ ((~(v16 << 15) + v16) >> 10));
        v21 = ((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) ^ (((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) >> 16);
        do
        {
          v22 = v21 & v18;
          v21 = ++v19 + v22;
        }
        while (*(unsigned __int8 *)(v17 + v22) != 255);
        v23 = (_BYTE *)(v17 + v22);
        *v23 = v16;
        if (v4 + v14 == a2)
          v15 = v23;
      }
      ++v14;
    }
    while (v14 != v5);
  }
  else
  {
    v15 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v10);
  return v15;
}

void API::Attachment::setFileWrapper(API::Attachment *this, CFTypeRef cf)
{
  unsigned __int8 *v4;
  const void *v6;
  int v7;

  v4 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 16);
LABEL_5:
  if (cf)
    CFRetain(cf);
  v6 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = cf;
  if (v6)
    CFRelease(v6);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v4))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

void sub_19707CDE8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t API::Attachment::doWithFileWrapper(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  int v7;

  v4 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 16);
LABEL_5:
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 24));
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_19707CEA8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void API::Attachment::mimeType(API::Attachment *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  __CFString *v6;
  WTF::StringImpl *v7;
  NSString *v8;
  CFStringRef v9;
  _DWORD *v10;
  WTF::StringImpl *v11;

  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  if (v4 && *((_DWORD *)v4 + 1))
  {
    *(_DWORD *)v4 += 2;
    v11 = v4;
  }
  else
  {
    API::mimeTypeInferredFromFileExtension((API *)&v11, this);
    if (!v11)
    {
      v6 = &stru_1E351F1B8;
      goto LABEL_9;
    }
  }
  v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
LABEL_9:
  if (-[__CFString length](v6, "length"))
  {
    if (API::isDeclaredOrDynamicTypeIdentifier(v6, v8))
    {
      v9 = UTTypeCopyPreferredTagWithClass(v6, (CFStringRef)*MEMORY[0x1E0CA5A90]);
      MEMORY[0x19AEABCC8](a2, v9);
      if (v9)
        CFRelease(v9);
    }
    else
    {
      MEMORY[0x19AEABCC8](a2, v6);
    }
  }
  else
  {
    v10 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *v10 += 2;
    *a2 = v10;
  }
}

void sub_19707CFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *API::mimeTypeInferredFromFileExtension(API *this, const API::Attachment *a2)
{
  __CFString *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  API::Attachment::fileName(a2, (uint64_t)&v8);
  if (v8)
    v3 = (__CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E351F1B8;
  v5 = -[__CFString pathExtension](v3, "pathExtension");
  result = v8;
  v8 = 0;
  if (!result)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_11:
    *(_QWORD *)this = 0;
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_6;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  if (!v5)
    goto LABEL_11;
LABEL_7:
  MEMORY[0x19AEABCC8](&v8, v5);
  WebCore::MIMETypeRegistry::mimeTypeForExtension();
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19707D10C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL API::isDeclaredOrDynamicTypeIdentifier(const __CFString *this, NSString *a2)
{
  return UTTypeIsDeclared(this) || UTTypeIsDynamic(this) != 0;
}

void API::Attachment::utiType(API::Attachment *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  __CFString *v6;
  WTF::StringImpl *v7;
  NSString *v8;
  _DWORD *v9;
  CFStringRef PreferredIdentifierForTag;
  WTF::StringImpl *v11;

  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  if (v4 && *((_DWORD *)v4 + 1))
  {
    *(_DWORD *)v4 += 2;
    v11 = v4;
  }
  else
  {
    API::mimeTypeInferredFromFileExtension((API *)&v11, this);
    if (!v11)
    {
      v6 = &stru_1E351F1B8;
      goto LABEL_9;
    }
  }
  v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
LABEL_9:
  if (-[__CFString length](v6, "length"))
  {
    if (API::isDeclaredOrDynamicTypeIdentifier(v6, v8))
    {
      MEMORY[0x19AEABCC8](a2, v6);
    }
    else
    {
      PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x1E0CA5A90], v6, 0);
      MEMORY[0x19AEABCC8](a2, PreferredIdentifierForTag);
      if (PreferredIdentifierForTag)
        CFRelease(PreferredIdentifierForTag);
    }
  }
  else
  {
    v9 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *v9 += 2;
    *a2 = v9;
  }
}

void sub_19707D290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t API::Attachment::fileName@<X0>(API::Attachment *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;
  int v10;

  v4 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 16);
LABEL_5:
  v6 = objc_msgSend((id)objc_msgSend(*((id *)this + 3), "filename"), "length");
  v7 = (void *)*((_QWORD *)this + 3);
  if (v6)
    v8 = objc_msgSend(v7, "filename");
  else
    v8 = objc_msgSend(v7, "preferredFilename");
  result = MEMORY[0x19AEABCC8](a2, v8);
  v10 = __ldxr(v4);
  if (v10 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_19707D384(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void API::Attachment::setFileWrapperAndUpdateContentType(WTF::StringImpl **this, NSFileWrapper *a2, __CFString *a3)
{
  __CFString *v3;
  NSString *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = a3;
  if (!-[__CFString length](a3, "length"))
  {
    if (-[NSFileWrapper isDirectory](a2, "isDirectory"))
    {
      v3 = (__CFString *)*MEMORY[0x1E0CA5B30];
    }
    else if (-[NSFileWrapper isRegularFile](a2, "isRegularFile"))
    {
      if (-[NSString length](-[NSFileWrapper filename](a2, "filename"), "length"))
        v6 = -[NSFileWrapper filename](a2, "filename");
      else
        v6 = -[NSFileWrapper preferredFilename](a2, "preferredFilename");
      v7 = -[NSString pathExtension](v6, "pathExtension");
      if (v7)
      {
        MEMORY[0x19AEABCC8](&v13, v7);
        WebCore::MIMETypeRegistry::mimeTypeForExtension();
        if (v14)
        {
          v3 = (__CFString *)WTF::StringImpl::operator NSString *();
          v9 = v14;
          v14 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v8);
            else
              *(_DWORD *)v9 -= 2;
          }
        }
        else
        {
          v14 = 0;
          v3 = &stru_1E351F1B8;
        }
        v10 = v13;
        v13 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v8);
          else
            *(_DWORD *)v10 -= 2;
        }
      }
      if (!-[__CFString length](v3, "length", v13))
        v3 = (__CFString *)*MEMORY[0x1E0CA5B20];
    }
  }
  MEMORY[0x19AEABCC8](&v14, v3);
  WTF::String::operator=(this + 6, (WTF::StringImpl *)&v14);
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  API::Attachment::setFileWrapper((API::Attachment *)this, a2);
}

void sub_19707D554(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unint64_t API::Attachment::fileSizeForDisplay(API::Attachment *this)
{
  unsigned __int8 *v2;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;

  v2 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 16);
LABEL_5:
  if ((objc_msgSend(*((id *)this + 3), "isRegularFile") & 1) != 0)
  {
    v4 = (void *)objc_msgSend(*((id *)this + 3), "fileAttributes");
    v5 = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2AF0]), "unsignedLongLongValue");
    if (!v5)
      v5 = objc_msgSend((id)objc_msgSend(*((id *)this + 3), "regularFileContents"), "length");
    v6 = v5 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    LOBYTE(v5) = 0;
    v6 = 0;
  }
  v7 = __ldxr(v2);
  if (v7 == 1)
  {
    if (!__stlxr(0, v2))
      return v6 | v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v6 | v5;
}

void sub_19707D698(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t API::Attachment::associatedElementData@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 *v4;
  NSData *v6;
  int v7;
  int v8;
  uint64_t v9;
  WebCore::FragmentedSharedBuffer *v10;

  if (!*(_BYTE *)(this + 65))
  {
LABEL_17:
    *a2 = 0;
    return this;
  }
  v3 = this;
  v10 = 0;
  v4 = (unsigned __int8 *)(this + 16);
  if (__ldaxr((unsigned __int8 *)(this + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](this + 16);
LABEL_6:
  this = objc_msgSend(*(id *)(v3 + 24), "isRegularFile");
  v7 = this;
  if ((this & 1) != 0)
  {
    this = objc_msgSend(*(id *)(v3 + 24), "regularFileContents");
    v10 = (WebCore::FragmentedSharedBuffer *)this;
  }
  else
  {
    *a2 = 0;
  }
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
LABEL_14:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (!v7)
      return this;
LABEL_15:
    if (v10)
    {
      this = (uint64_t)WebCore::SharedBuffer::create<NSData *&>(&v10, v6, &v9);
      *a2 = v9;
      return this;
    }
    goto LABEL_17;
  }
  if (__stlxr(0, v4))
    goto LABEL_14;
  if (v7)
    goto LABEL_15;
  return this;
}

void sub_19707D7A8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

BOOL API::Attachment::isEmpty(API::Attachment *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;

  v2 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 16);
LABEL_5:
  v4 = *((_QWORD *)this + 3);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 0;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 0;
}

unsigned __int8 *API::Attachment::createSerializedRepresentation@<X0>(unsigned __int8 *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned __int8 *v4;
  uint64_t v6;
  NSData *v7;
  int v8;
  int v9;
  uint64_t v10;
  WebCore::FragmentedSharedBuffer *v11;

  v2 = this;
  v11 = 0;
  v4 = this + 16;
  if (__ldaxr(this + 16))
  {
    __clrex();
LABEL_4:
    this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  if (!*((_QWORD *)v2 + 3) || (v6 = *((_QWORD *)v2 + 7)) == 0 || !*(_QWORD *)(v6 + 8))
  {
    *a2 = 0;
    v9 = __ldxr(v4);
    if (v9 == 1)
    {
      if (!__stlxr(0, v4))
        return this;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  this = (unsigned __int8 *)objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:");
  v11 = (WebCore::FragmentedSharedBuffer *)this;
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v4))
LABEL_17:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v11)
  {
    this = (unsigned __int8 *)WebCore::SharedBuffer::create<NSData *&>(&v11, v7, &v10);
    *a2 = v10;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void sub_19707D958(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void API::Attachment::updateFromSerializedRepresentation(uint64_t a1, WebCore::SharedBuffer **a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSFileWrapper *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  CFTypeRef v15;
  _QWORD *v16;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      WebCore::SharedBuffer::createNSData(*a2);
      if (cf)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        if (v6)
          v7 = v6 - 16;
        else
          v7 = 0;
        v8 = (NSFileWrapper *)objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 40) + 8) + 1720))(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8)), cf, 0);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          *(_BYTE *)(a1 + 67) = 1;
          if (*a3)
            v9 = (__CFString *)WTF::StringImpl::operator NSString *();
          else
            v9 = &stru_1E351F1B8;
          API::Attachment::setFileWrapperAndUpdateContentType((WTF::StringImpl **)a1, v8, v9);
          v10 = *(_QWORD *)(a1 + 56);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
              v12 = v11 - 16;
            else
              v12 = 0;
          }
          else
          {
            v12 = 0;
          }
          v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v13 = off_1E34BAF38;
          v16 = v13;
          WebKit::WebPageProxy::updateAttachmentAttributes(v12, (API::Attachment *)a1, (uint64_t *)&v16);
          v14 = (uint64_t)v16;
          v16 = 0;
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v15 = cf;
        cf = 0;
        if (v15)
          CFRelease(v15);
      }
    }
  }
}

void sub_19707DAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void API::Attachment::cloneFileWrapperTo(API::Attachment *this, API::Attachment *a2)
{
  unsigned __int8 *v4;
  int v6;

  *((_BYTE *)a2 + 67) = *((_BYTE *)this + 67);
  v4 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 16);
LABEL_5:
  API::Attachment::setFileWrapper(a2, *((CFTypeRef *)this + 3));
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

void sub_19707DB90(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void API::ContentRuleListStore::defaultStorePath(API::ContentRuleListStore *this)
{
  void *v1;

  if ((_MergedGlobals_61 & 1) == 0)
  {
    qword_1ECE72840 = 0;
    _MergedGlobals_61 = 1;
  }
  if (qword_1ECE72838 != -1)
    dispatch_once(&qword_1ECE72838, &__block_literal_global_17);
  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  objc_msgSend(v1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", qword_1ECE72840, 1, 0, 0);
  objc_msgSend((id)objc_msgSend((id)qword_1ECE72840, "absoluteURL"), "path");
  JUMPOUT(0x19AEABCC8);
}

void ___ZN3API20ContentRuleListStore16defaultStorePathEv_block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  const void *v5;

  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "URLForDirectory:inDomain:appropriateForURL:create:error:", 5, 1, 0, 0, 0);
  if (v0)
  {
    v1 = (void *)objc_msgSend(v0, "URLByAppendingPathComponent:isDirectory:", CFSTR("WebKit"), 1);
    if (!WebKit::processHasContainer((WebKit *)v1))
    {
      v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
      if (!v2)
        v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "processName");
      v1 = (void *)objc_msgSend(v1, "URLByAppendingPathComponent:isDirectory:", v2, 1);
    }
    v3 = (const void *)objc_msgSend(v1, "URLByAppendingPathComponent:isDirectory:", CFSTR("ContentRuleLists"), 1);
    v4 = (uint64_t)v3;
    if (v3)
      CFRetain(v3);
    v5 = (const void *)qword_1ECE72840;
    qword_1ECE72840 = v4;
    if (v5)
      CFRelease(v5);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t API::PageConfiguration::Data::defaultDragLiftDelay(API::PageConfiguration::Data *this)
{
  uint64_t v1;

  v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "integerForKey:", CFSTR("WebKitDebugDragLiftDelay"));
  if (v1 == 1)
    return 1;
  else
    return 2 * (v1 == 2);
}

void API::SerializedScriptValue::createFromNSObject(_BOOL8 this@<X0>, objc_object *a2@<X1>, WebKit **a3@<X8>)
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  OpaqueJSContext *v7;
  OpaqueJSContext *v8;
  WebKit *v9;
  uint64_t v10;
  char v11[8];
  void *v12;

  v3 = this;
  if (this)
  {
    this = API::validateObject((API *)this, a2);
    if (!this)
      goto LABEL_12;
  }
  {
    API::SharedJSContext::SharedJSContext((API::SharedJSContext *)this);
  }
  API::SharedJSContext::ensureContext((API::SharedJSContext *)&v12);
  v5 = v12;
  v6 = (void *)objc_msgSend(MEMORY[0x1E0CBE108], "valueWithObject:inContext:", v3, v12);
  if (v6)
  {
    v7 = (OpaqueJSContext *)objc_msgSend(v5, "JSGlobalContextRef");
    v8 = v7;
    if (v7)
      JSGlobalContextRetain(v7);
    JSC::JSLockHolder::JSLockHolder();
    objc_msgSend(v6, "JSValueRef");
    WebCore::SerializedScriptValue::create();
    MEMORY[0x19AEAA9E4](v11);
    JSGlobalContextRelease(v8);
    if (v5)
      goto LABEL_9;
  }
  else
  {
    v10 = 0;
    if (v5)
LABEL_9:
      CFRelease(v5);
  }
  if (v10)
  {
    v9 = (WebKit *)API::Object::newObject(0x18uLL, 20);
    *(_QWORD *)v9 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v9);
    *(_QWORD *)v9 = &off_1E34AD2F8;
    *((_QWORD *)v9 + 2) = v10;
    *a3 = v9;
    return;
  }
LABEL_12:
  *a3 = 0;
}

void sub_19707DF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, unsigned int *a12)
{
  unsigned int *v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  do
  {
    v14 = __ldaxr(v12);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v12));
  if (!v15)
  {
    atomic_store(1u, v12);
    a12 = v12;
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WebCore::SerializedScriptValue **)&a12);
  }
  if (a10)
  {
    do
    {
      v16 = __ldaxr(a10);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, a10));
    if (!v17)
    {
      atomic_store(1u, a10);
      a12 = a10;
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WebCore::SerializedScriptValue **)&a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19707E478(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t readOnlyAccessPaths(void)
{
  uint64_t result;

  if (byte_1ECE72834 == 1)
    return qword_1ECE72860;
  result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 2);
  qword_1ECE72860 = result;
  byte_1ECE72834 = 1;
  return result;
}

void sub_19707EAF8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void sub_19707F384(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  char a68;
  WebKit::ProcessThrottlerActivity *v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  WebKit::ProcessThrottlerActivity *v72;
  WTF *v74;
  void *v75;
  uint64_t v76;
  const void *v77;
  const void *v78;
  const void *v79;

  v72 = v68;
  WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(v72, a2);
  WTF::fastFree(v74, v75);
  if (v70)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v69);
  _Block_object_dispose(&a61, 8);
  v76 = a67;
  a67 = 0;
  if (v76)
    WTF::ThreadSafeRefCounted<WTF::Box<WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>::Data,(WTF::DestructionThread)0>::deref(v76);
  _Block_object_dispose(&a68, 8);
  v77 = (const void *)STACK[0x208];
  STACK[0x208] = 0;
  if (v77)
    CFRelease(v77);
  _Block_object_dispose((const void *)(v71 - 208), 8);
  v78 = *(const void **)(v71 - 160);
  *(_QWORD *)(v71 - 160) = 0;
  if (v78)
    CFRelease(v78);
  _Block_object_dispose((const void *)(v71 - 152), 8);
  v79 = *(const void **)(v71 - 104);
  *(_QWORD *)(v71 - 104) = 0;
  if (v79)
    CFRelease(v79);
  _Block_object_dispose((const void *)(v71 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t __Block_byref_object_copy__183(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__184(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t __Block_byref_object_copy__187(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void __Block_byref_object_dispose__188(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t __Block_byref_object_copy__190(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__191(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WTF::Box<WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>::Data,(WTF::DestructionThread)0>::deref(result);
  return result;
}

void sub_19707F6A4(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19707F734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19707FE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

void sub_19707FE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

void API::SharedJSContext::releaseContextIfNecessary(API::SharedJSContext *this)
{
  double v2;
  const void *v3;

  WTF::MonotonicTime::now(this);
  if (v2 - *((double *)this + 5) >= 10.0)
  {
    v3 = *(const void **)this;
    *(_QWORD *)this = 0;
    if (v3)
      CFRelease(v3);
  }
  else
  {
    WTF::RunLoop::TimerBase::start();
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (API::SharedJSContext::*&)(void),API::SharedJSContext*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

BOOL API::validateObject(API *this, objc_object *a2)
{
  _BOOL8 v3;
  _QWORD v5[5];
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 1;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = ___ZN3APIL14validateObjectEP11objc_object_block_invoke;
    v6[3] = &unk_1E34BAEE0;
    v6[4] = &v7;
    -[API enumerateObjectsUsingBlock:](this, "enumerateObjectsUsingBlock:", v6);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      return 0;
    v7 = 0;
    v8 = &v7;
    v9 = 0x2020000000;
    v10 = 1;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = ___ZN3APIL14validateObjectEP11objc_object_block_invoke_2;
    v5[3] = &unk_1E34BAF08;
    v5[4] = &v7;
    -[API enumerateKeysAndObjectsUsingBlock:](this, "enumerateKeysAndObjectsUsingBlock:", v5);
  }
  v3 = *((_BYTE *)v8 + 24) != 0;
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1970802D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3APIL14validateObjectEP11objc_object_block_invoke(uint64_t a1, API *this, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = API::validateObject(this, (objc_object *)this);
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t ___ZN3APIL14validateObjectEP11objc_object_block_invoke_2(uint64_t a1, API *this, API *a3, _BYTE *a4)
{
  uint64_t result;
  objc_object *v8;

  result = API::validateObject(this, (objc_object *)this);
  if (!(_DWORD)result || (result = API::validateObject(a3, v8), (result & 1) == 0))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WTF::Box<WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>::Data,(WTF::DestructionThread)0>::deref(uint64_t result)
{
  WTF *v1;
  unsigned int v2;
  unsigned int v3;
  void *v4;

  v1 = (WTF *)result;
  do
  {
    v2 = __ldaxr((unsigned int *)result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)result));
  if (!v3)
  {
    atomic_store(1u, (unsigned int *)result);
    std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(result + 8), 0);
    return WTF::fastFree(v1, v4);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ58___WKAttributedStringWebViewCache_retrieveOrCreateWebView_EUb_E3__2vJNS_8CriticalENS_11SynchronousEEE4callES3_S4_(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "purgeAllWebViews");
}

uint64_t WebKit::RemoteSourceBufferProxy::RemoteSourceBufferProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v17;
  _QWORD v18[2];

  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v10 + 24) = a1;
  *(_QWORD *)(a1 + 16) = &unk_1E34BB018;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E34BAFB0;
  *(_QWORD *)(a1 + 8) = v10;
  v11 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v11)
    v11 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v11);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  v12 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 56) = v12;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a5 + 8), a5);
  v13 = *(unsigned int **)(a5 + 8);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  v15 = *(_QWORD *)(a1 + 48);
  v18[0] = 124;
  v18[1] = v15;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(a2 + 64), (unsigned __int8 *)v18, a1 + 16, &v17);
  WebCore::SourceBufferPrivate::setClient();
  return a1;
}

void WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(unsigned int **this)
{
  void *v2;
  unsigned int *v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned __int8 *v14;

  WebKit::RemoteSourceBufferProxy::disconnect((WebKit::RemoteSourceBufferProxy *)this);
  v3 = this[11];
  while (v3)
  {
    v4 = (WTF *)v3;
    v3 = *(unsigned int **)v3;
    v5 = (unsigned int *)*((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
    WTF::fastFree(v4, v2);
  }
  v9 = (WTF *)this[9];
  this[9] = 0;
  if (v9)
    WTF::fastFree(v9, v2);
  v10 = this[8];
  this[8] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v2);
    }
  }
  v13 = this[7];
  this[7] = 0;
  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*((unsigned __int8 **)v13 + 1));
  v14 = (unsigned __int8 *)this[4];
  this[4] = 0;
  if (v14)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v14, v2);
  this[2] = (unsigned int *)&off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 3, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 *WebKit::RemoteSourceBufferProxy::disconnect(WebKit::RemoteSourceBufferProxy *this)
{
  unsigned __int8 *result;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  result = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 5), &v5);
    if (v5)
    {
      IPC::MessageReceiverMap::removeMessageReceiver(v5 + 56, 0x7Cu, *((_QWORD *)this + 6));
      result = (unsigned __int8 *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = 0;
      if (result)
        result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
      *((_QWORD *)this + 5) = 0;
      v4 = v5;
      v5 = 0;
      if (v4)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 16));
    }
  }
  return result;
}

void `non-virtual thunk to'WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(unsigned int **this)
{
  WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteSourceBufferProxy::~RemoteSourceBufferProxy(this - 2);
  WTF::fastFree(v1, v2);
}

WTF::Lock *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateDidReceiveInitializationSegment@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  WTF::ThreadSafeWeakPtrControlBlock *v8;
  WTF::ThreadSafeWeakPtrControlBlock *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  __int16 v19;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unint64_t *v32;
  uint64_t v33;
  __int16 v34;
  void *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unint64_t *v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  WebKit::RemoteMediaPlayerProxy *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  WTF::ThreadSafeWeakPtrControlBlock *v53;
  WTF::ThreadSafeWeakPtrControlBlock *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unsigned int *v58;
  unsigned int v59;
  void *v60;
  void *v61;
  void *v62;
  unsigned __int8 *v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned __int8 *v68;
  int v70;
  WTF::NativePromiseBase *v71;
  void *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  WTF::NativePromiseBase *v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  void *v90;
  void *v91;
  void *v92;
  unsigned __int8 *v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  void *v98;
  void *v99;
  unsigned int v100;
  WTF::ThreadSafeWeakPtrControlBlock *v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v109;
  WTF::ThreadSafeWeakPtrControlBlock *v110;
  uint64_t v111;
  const char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  unint64_t *v117;
  WTF::NativePromiseBase *v118;
  __int128 v119;
  const char *v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  unint64_t v126;
  WTF::NativePromiseBase *v127;
  uint64_t v128;
  const char *v129;
  __int128 v130;
  _QWORD v131[2];
  _QWORD v132[2];
  _QWORD v133[3];

  v4 = *((_QWORD *)a1 + 8);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    LOBYTE(v110) = 1;
    v127 = 0;
    v128 = 0;
    v129 = "sourceBufferPrivateDidReceiveInitializationSegment";
    *(_QWORD *)&v130 = 0;
    return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v110, (WTF::Logger::LogSiteIdentifier *)&v127, a3);
  }
  v124 = 0u;
  v125 = 0u;
  *(_QWORD *)&v122 = *(_QWORD *)a2;
  *(_QWORD *)((char *)&v122 + 5) = *(_QWORD *)(a2 + 5);
  v110 = 0;
  v111 = 0;
  v6 = *(unsigned int *)(a2 + 28);
  if (!(_DWORD)v6)
  {
    v10 = 0;
    v9 = 0;
LABEL_14:
    LODWORD(v12) = 0;
    goto LABEL_15;
  }
  if (v6 >= 0xAAAAAAB)
  {
    __break(0xC471u);
    goto LABEL_93;
  }
  v7 = 24 * v6;
  v8 = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::fastMalloc((WTF *)(24 * v6));
  v9 = v8;
  v10 = (v7 & 0xFFFFFFF8) / 0x18;
  LODWORD(v111) = v10;
  v110 = v8;
  if (!*(_DWORD *)(a2 + 28))
    goto LABEL_14;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t *)((char *)v8 + 16);
  do
  {
    v14 = *(_QWORD *)(a2 + 16);
    v126 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + v11 + 8) + 48))(*(_QWORD *)(v14 + v11 + 8));
    v15 = *((_QWORD *)a1 + 8);
    if (v15)
      v16 = *(unsigned __int8 **)(v15 + 8);
    else
      v16 = 0;
    WebKit::RemoteMediaPlayerProxy::addRemoteAudioTrackProxy(v16, *(WebCore::AudioTrackPrivate **)(v14 + v11 + 8));
    v17 = *(_QWORD *)(v14 + v11);
    v117 = &v126;
    *(_QWORD *)&v109 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WebCore::MediaDescription&>>((_QWORD *)a1 + 9, v126, &v117, (uint64_t *)&v109);
    WebKit::MediaDescriptionInfo::MediaDescriptionInfo((WebKit::MediaDescriptionInfo *)&v127, *(const WebCore::MediaDescription **)(v14 + v11));
    v18 = v126;
    v129 = (const char *)v126;
    *(v13 - 2) = (unint64_t)v127;
    v19 = v128;
    *((_BYTE *)v13 - 6) = BYTE2(v128);
    *((_WORD *)v13 - 4) = v19;
    *v13 = v18;
    v13 += 3;
    ++v12;
    v11 += 16;
  }
  while (v12 < *(unsigned int *)(a2 + 28));
  v9 = v110;
  v10 = v111;
LABEL_15:
  v110 = 0;
  v111 = 0;
  *(_QWORD *)&v123 = v9;
  *((_QWORD *)&v123 + 1) = __PAIR64__(v12, v10);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v110, (void *)a2);
  v22 = *(unsigned int *)(a2 + 44);
  v100 = v10;
  v101 = v9;
  if ((_DWORD)v22)
  {
    if (v22 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x197080F74);
    }
    v23 = 24 * v22;
    v24 = WTF::fastMalloc((WTF *)(24 * v22));
    v25 = (v23 & 0xFFFFFFF8) / 0x18;
    if (*(_DWORD *)(a2 + 44))
    {
      v104 = v25;
      v106 = v24;
      v26 = 0;
      v27 = 0;
      v28 = (_QWORD *)(v24 + 16);
      do
      {
        v29 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)&v109 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v29 + v26 + 8) + 48))(*(_QWORD *)(v29 + v26 + 8));
        v30 = *((_QWORD *)a1 + 8);
        if (v30)
          v31 = *(unsigned __int8 **)(v30 + 8);
        else
          v31 = 0;
        WebKit::RemoteMediaPlayerProxy::addRemoteVideoTrackProxy(v31, *(WebCore::VideoTrackPrivate **)(v29 + v26 + 8));
        v32 = *(unint64_t **)(v29 + v26);
        v110 = (WTF::ThreadSafeWeakPtrControlBlock *)&v109;
        v117 = v32;
        std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WebCore::MediaDescription&>>((_QWORD *)a1 + 9, v109, (_QWORD **)&v110, (uint64_t *)&v117);
        WebKit::MediaDescriptionInfo::MediaDescriptionInfo((WebKit::MediaDescriptionInfo *)&v127, *(const WebCore::MediaDescription **)(v29 + v26));
        v33 = v109;
        v129 = (const char *)v109;
        *(v28 - 2) = v127;
        v34 = v128;
        *((_BYTE *)v28 - 6) = BYTE2(v128);
        *((_WORD *)v28 - 4) = v34;
        *v28 = v33;
        v28 += 3;
        ++v27;
        v26 += 16;
      }
      while (v27 < *(unsigned int *)(a2 + 44));
      v25 = v104;
      v24 = v106;
    }
    else
    {
      LODWORD(v27) = 0;
    }
  }
  else
  {
    LODWORD(v27) = 0;
    v25 = 0;
    v24 = 0;
  }
  v127 = 0;
  v128 = 0;
  v107 = v24;
  *(_QWORD *)&v124 = v24;
  *((_QWORD *)&v124 + 1) = __PAIR64__(v27, v25);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v127, v21);
  v36 = *(unsigned int *)(a2 + 60);
  v105 = v25;
  if (!(_DWORD)v36)
  {
    LODWORD(v40) = 0;
    v102 = 0;
    v103 = 0;
    goto LABEL_37;
  }
  if (v36 >= 0xAAAAAAB)
  {
    __break(0xC471u);
LABEL_93:
    JUMPOUT(0x197080F6CLL);
  }
  v37 = 24 * v36;
  v38 = WTF::fastMalloc((WTF *)(24 * v36));
  v102 = (v37 & 0xFFFFFFF8) / 0x18;
  v103 = v38;
  if (*(_DWORD *)(a2 + 60))
  {
    v39 = 0;
    v40 = 0;
    v41 = (_QWORD *)(v38 + 16);
    do
    {
      v42 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)&v109 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v42 + v39 + 8) + 48))(*(_QWORD *)(v42 + v39 + 8));
      v43 = *((_QWORD *)a1 + 8);
      if (v43)
        v44 = *(unsigned __int8 **)(v43 + 8);
      else
        v44 = 0;
      WebKit::RemoteMediaPlayerProxy::addRemoteTextTrackProxy(v44, *(WebCore::InbandTextTrackPrivate **)(v42 + v39 + 8));
      v45 = *(unint64_t **)(v42 + v39);
      v110 = (WTF::ThreadSafeWeakPtrControlBlock *)&v109;
      v117 = v45;
      std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WebCore::MediaDescription&>>((_QWORD *)a1 + 9, v109, (_QWORD **)&v110, (uint64_t *)&v117);
      WebKit::MediaDescriptionInfo::MediaDescriptionInfo((WebKit::MediaDescriptionInfo *)&v127, *(const WebCore::MediaDescription **)(v42 + v39));
      v46 = v109;
      v129 = (const char *)v109;
      *(v41 - 2) = v127;
      v47 = v128;
      *((_BYTE *)v41 - 6) = BYTE2(v128);
      *((_WORD *)v41 - 4) = v47;
      *v41 = v46;
      v41 += 3;
      ++v40;
      v39 += 16;
    }
    while (v40 < *(unsigned int *)(a2 + 60));
  }
  else
  {
    LODWORD(v40) = 0;
  }
LABEL_37:
  v127 = 0;
  v128 = 0;
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v127, v35);
  v48 = *((_QWORD *)a1 + 8);
  if (v48)
    v49 = *(WebKit::RemoteMediaPlayerProxy **)(v48 + 8);
  else
    v49 = 0;
  v50 = WebKit::RemoteMediaPlayerProxy::commitAllTransactions(v49, (uint64_t *)&v126);
  v51 = (_QWORD *)v126;
  v52 = WTF::RunLoop::current((WTF::RunLoop *)v50);
  v53 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)a1 + 1);
  if (v53)
    v54 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v53);
  else
    v54 = 0;
  v111 = 0;
  v112 = a1;
  v113 = v122;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  v109 = 0uLL;
  v110 = 0;
  v129 = a1;
  v130 = v122;
  v115 = 0u;
  v114 = 0u;
  v116 = 0u;
  v55 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 32))(v52);
  v56 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v56 = off_1E34BB280;
  *(_QWORD *)(v56 + 8) = v54;
  v127 = 0;
  v128 = 0;
  *(_QWORD *)(v56 + 16) = a1;
  *(_QWORD *)(v56 + 24) = a1;
  *(_OWORD *)(v56 + 32) = v130;
  v131[0] = 0;
  *(_QWORD *)(v56 + 48) = v101;
  v131[1] = 0;
  *(_DWORD *)(v56 + 56) = v100;
  *(_DWORD *)(v56 + 60) = v12;
  v132[0] = 0;
  *(_QWORD *)(v56 + 64) = v107;
  v132[1] = 0;
  *(_DWORD *)(v56 + 72) = v105;
  *(_DWORD *)(v56 + 76) = v27;
  v133[0] = 0;
  *(_QWORD *)(v56 + 80) = v103;
  v133[1] = 0;
  *(_DWORD *)(v56 + 88) = v102;
  *(_DWORD *)(v56 + 92) = v40;
  *(_DWORD *)(v55 + 8) = 1;
  *(_QWORD *)(v55 + 16) = v52;
  *(_QWORD *)(v55 + 24) = 0;
  *(_QWORD *)(v55 + 32) = 0;
  *(_QWORD *)(v55 + 40) = "sourceBufferPrivateDidReceiveInitializationSegment";
  *(_QWORD *)(v55 + 48) = 0;
  *(_WORD *)(v55 + 56) = 0;
  *(_QWORD *)v55 = off_1E34BB310;
  v58 = (unsigned int *)(v51 + 1);
  *(_QWORD *)(v55 + 64) = 0;
  *(_QWORD *)(v55 + 72) = v56;
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 + 1, v58));
  v117 = v51;
  v118 = (WTF::NativePromiseBase *)v55;
  v119 = v109;
  v120 = "sourceBufferPrivateDidReceiveInitializationSegment";
  v121 = 0;
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v133, v57);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v132, v60);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v131, v61);
  v63 = (unsigned __int8 *)v127;
  v127 = 0;
  if (v63)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v63, v62);
  v127 = 0;
  v128 = 0;
  v129 = "<completion promise>";
  *(_QWORD *)&v130 = 0;
  v64 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
  v65 = *(_QWORD *)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v64, 0, (WTF::Logger::LogSiteIdentifier *)&v127);
  if (v65)
  {
    v66 = (unsigned int *)(v65 + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 + 1, v66));
    v55 = (uint64_t)v118;
  }
  *a3 = v65;
  v68 = (unsigned __int8 *)(v55 + 57);
  if (__ldaxr((unsigned __int8 *)(v55 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v68))
  {
    goto LABEL_54;
  }
  MEMORY[0x19AEABB3C](v55 + 57);
LABEL_54:
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(v55 + 64), v64);
  v70 = __ldxr(v68);
  if (v70 != 1)
  {
    __clrex();
    goto LABEL_58;
  }
  if (__stlxr(0, v68))
LABEL_58:
    WTF::Lock::unlockSlow((WTF::Lock *)v68);
  v71 = v118;
  v118 = 0;
  v127 = v71;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle((uint64_t)v117, &v127, (WTF::Logger::LogSiteIdentifier *)&v119);
  v73 = (unsigned int *)v127;
  v127 = 0;
  if (v73)
  {
    v74 = v73 + 2;
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
    {
      atomic_store(1u, v73 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 8))(v73);
    }
  }
  v77 = v118;
  if (v118)
  {
    v118 = 0;
    v127 = v77;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle((uint64_t)v117, &v127, (WTF::Logger::LogSiteIdentifier *)&v119);
    v78 = (unsigned int *)v127;
    v127 = 0;
    if (v78)
    {
      v79 = v78 + 2;
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (!v81)
      {
        atomic_store(1u, v78 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v78 + 8))(v78);
      }
    }
    v82 = (unsigned int *)v118;
    v118 = 0;
    if (v82)
    {
      v83 = v82 + 2;
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (!v85)
      {
        atomic_store(1u, v82 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v82 + 8))(v82);
      }
    }
  }
  else
  {
    v118 = 0;
  }
  v86 = (unsigned int *)v117;
  v117 = 0;
  if (v86)
  {
    v87 = v86 + 2;
    do
    {
      v88 = __ldaxr(v87);
      v89 = v88 - 1;
    }
    while (__stlxr(v89, v87));
    if (!v89)
    {
      atomic_store(1u, v86 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v86 + 16))(v86);
    }
  }
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v116, v72);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v115, v90);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v114, v91);
  v93 = (unsigned __int8 *)v110;
  v110 = 0;
  if (v93)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v93, v92);
  v94 = (unsigned int *)v126;
  v126 = 0;
  if (v94)
  {
    v95 = v94 + 2;
    do
    {
      v96 = __ldaxr(v95);
      v97 = v96 - 1;
    }
    while (__stlxr(v97, v95));
    if (!v97)
    {
      atomic_store(1u, v94 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v94 + 16))(v94);
    }
  }
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v125, v92);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v124, v98);
  return (WTF::Lock *)WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v123, v99);
}

unsigned __int8 *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateHighestPresentationTimestampChanged(WebKit::RemoteSourceBufferProxy *this, const WTF::MediaTime *a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;

  result = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 5), &v12);
    if (v12)
    {
      v5 = *(_QWORD *)(v12 + 48);
      v6 = *((_QWORD *)this + 6);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 1444;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v13 = (IPC::Encoder *)v7;
      IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v7, a2);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v13, 0, 0);
      result = (unsigned __int8 *)v13;
      v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
        result = (unsigned __int8 *)WTF::fastFree(v9, v10);
      }
      v11 = v12;
      v12 = 0;
      if (v11)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v11 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateDurationChanged@<X0>(WebKit::RemoteSourceBufferProxy *this@<X0>, const WTF::MediaTime *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;
  uint64_t v7;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  IPC::Encoder *v28;
  __int128 v29;
  __int128 v30;

  v5 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (!v5)
  {
    v23 = 0;
LABEL_3:
    LOBYTE(v25) = 4;
    v28 = 0;
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = "sourceBufferPrivateDurationChanged";
    *(_QWORD *)&v30 = 0;
    result = (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v25, (WTF::Logger::LogSiteIdentifier *)&v28, a3);
    goto LABEL_4;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((_QWORD *)this + 5), &v23);
  if (!v23)
    goto LABEL_3;
  v9 = *(os_unfair_lock_s **)(v23 + 48);
  v10 = *((_QWORD *)this + 6);
  v28 = 0;
  *(_QWORD *)&v29 = 0;
  *((_QWORD *)&v29 + 1) = "sendWithPromisedReply";
  *(_QWORD *)&v30 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v25, 0, (WTF::Logger::LogSiteIdentifier *)&v28);
  v11 = v25;
  if (v25)
  {
    v12 = (unsigned int *)(v25 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = v25;
  }
  else
  {
    v14 = 0;
  }
  *a3 = v11;
  v25 = 0;
  v29 = v26;
  v30 = v27;
  v15 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v15 = off_1E34BB560;
  *(_QWORD *)(v15 + 8) = v14;
  v28 = 0;
  v16 = v30;
  *(_OWORD *)(v15 + 16) = v29;
  *(_OWORD *)(v15 + 32) = v16;
  v24[0] = v15;
  v24[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v28);
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 1442;
  *(_QWORD *)(v17 + 8) = v10;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v28 = (IPC::Encoder *)v17;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v17, a2);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v9, &v28, v24, 0, 0);
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v18);
    WTF::fastFree(v20, v21);
  }
  v22 = v24[0];
  v24[0] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  result = (unsigned __int8 *)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v25);
LABEL_4:
  v7 = v23;
  v23 = 0;
  if (v7)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 16));
  return result;
}

unsigned __int8 *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateBufferedChanged@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::Lock *v8;
  _BYTE *v10;
  uint64_t v11;
  unsigned __int8 *result;
  int v13;
  uint64_t v14;
  os_unfair_lock_s *v16;
  uint64_t v17;
  WTF::Lock *v18;
  unsigned int *v19;
  unsigned int v20;
  WTF::Lock *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  size_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44[2];
  WTF::Lock *v45;
  __int128 v46;
  __int128 v47;
  IPC::Encoder *v48;
  __int128 v49;
  __int128 v50;

  v5 = (unsigned __int8 *)a1[4];
  if (!v5)
  {
    v43 = 0;
    goto LABEL_3;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, a1[5], &v43);
  if (!v43)
  {
LABEL_3:
    v48 = 0;
    *(_QWORD *)&v49 = 0;
    *((_QWORD *)&v49 + 1) = "sourceBufferPrivateBufferedChanged";
    *(_QWORD *)&v50 = 0;
    v6 = WTF::fastMalloc((WTF *)0x78);
    v7 = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(v6, &v48);
    *a3 = v7;
    v8 = (WTF::Lock *)(v7 + 48);
    v45 = v8;
    LOBYTE(v46) = 1;
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
LABEL_7:
      v10 = (_BYTE *)WTF::NativePromiseBase::logChannel(v8);
      if (*v10 && v10[16] >= 4u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v10, 4u, (WTF::Logger::LogSiteIdentifier *)&v48, " resolving ", v6);
      v11 = *(unsigned int *)(v6 + 64);
      if ((_DWORD)v11 != -1)
        ((void (*)(uint64_t *, uint64_t))off_1E34BB298[v11])(v44, v6 + 56);
      *(_WORD *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 1;
      result = (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll((_QWORD *)v6, (unsigned __int8 **)&v45);
      if (!(_BYTE)v46)
        goto LABEL_18;
      result = (unsigned __int8 *)v45;
      v13 = __ldxr((unsigned __int8 *)v45);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v45))
          goto LABEL_18;
      }
      else
      {
        __clrex();
      }
      result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
      goto LABEL_18;
    }
    v8 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
    goto LABEL_7;
  }
  v16 = *(os_unfair_lock_s **)(v43 + 48);
  v17 = a1[6];
  v48 = 0;
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = "sendWithPromisedReply";
  *(_QWORD *)&v50 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v45, 0, (WTF::Logger::LogSiteIdentifier *)&v48);
  v18 = v45;
  if (v45)
  {
    v19 = (unsigned int *)((char *)v45 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v21 = v45;
  }
  else
  {
    v21 = 0;
  }
  *a3 = v18;
  v45 = 0;
  v49 = v46;
  v50 = v47;
  v22 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v22 = off_1E34BB5B0;
  *(_QWORD *)(v22 + 8) = v21;
  v48 = 0;
  v23 = v50;
  *(_OWORD *)(v22 + 16) = v49;
  *(_OWORD *)(v22 + 32) = v23;
  v44[0] = v22;
  v44[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v48);
  v24 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v24 = 1438;
  *(_QWORD *)(v24 + 8) = v17;
  *(_QWORD *)(v24 + 528) = v24 + 16;
  *(_QWORD *)(v24 + 536) = v24 + 16;
  *(_OWORD *)(v24 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v24 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v24);
  v48 = (IPC::Encoder *)v24;
  v25 = *(unsigned int *)(a2 + 12);
  v26 = *(_QWORD *)(v24 + 544);
  v27 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = v27 + 8;
  v29 = *(_QWORD *)(v24 + 552);
  if (v29 < v27 + 8)
  {
    v40 = (2 * v29 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v41 = v40;
      v40 *= 2;
    }
    while (v41 < v28);
    result = (unsigned __int8 *)mmap(0, v41, 3, 4098, -1, 0);
    if (result == (unsigned __int8 *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v30 = result;
    memcpy(result, *(const void **)(v24 + 528), *(_QWORD *)(v24 + 544));
    v42 = *(void **)(v24 + 528);
    if (v42 != (void *)(v24 + 16))
      munmap(v42, *(_QWORD *)(v24 + 552));
    *(_QWORD *)(v24 + 528) = v30;
    *(_QWORD *)(v24 + 552) = v41;
    v26 = *(_QWORD *)(v24 + 544);
  }
  else
  {
    v30 = *(unsigned __int8 **)(v24 + 528);
  }
  bzero(&v30[v26], v27 - v26);
  *(_QWORD *)(v24 + 544) = v28;
  v31 = (_QWORD *)(*(_QWORD *)(v24 + 528) + v27);
  *(_QWORD *)(v24 + 536) = v31 + 1;
  *v31 = v25;
  v32 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v32)
  {
    v33 = *(_QWORD *)a2;
    v34 = 16 * v32;
    do
    {
      IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v24, v33);
      v33 += 16;
      v34 -= 16;
    }
    while (v34);
  }
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v16, &v48, v44, 0, 0);
  v36 = v48;
  v48 = 0;
  if (v36)
  {
    IPC::Encoder::~Encoder(v36, v35);
    WTF::fastFree(v37, v38);
  }
  v39 = v44[0];
  v44[0] = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  result = (unsigned __int8 *)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v45);
LABEL_18:
  v14 = v43;
  v43 = 0;
  if (v14)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v14 + 16));
  return result;
}

unsigned __int8 *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateDidDropSample(WebKit::RemoteSourceBufferProxy *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;

  result = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 5), &v10);
    if (v10)
    {
      v3 = *(_QWORD *)(v10 + 48);
      v4 = *((_QWORD *)this + 6);
      v5 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v5 = 1439;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v11 = (IPC::Encoder *)v5;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
      result = (unsigned __int8 *)v11;
      v11 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
        result = (unsigned __int8 *)WTF::fastFree(v7, v8);
      }
      v9 = v10;
      v10 = 0;
      if (v9)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v9 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateDidReceiveRenderingError(WebKit::RemoteSourceBufferProxy *this, uint64_t a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  void *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;

  result = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 5), &v21);
    if (v21)
    {
      v5 = *(_QWORD *)(v21 + 48);
      v6 = *((_QWORD *)this + 6);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 1441;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v22 = (IPC::Encoder *)v7;
      v8 = *(_QWORD *)(v7 + 544);
      v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
      v10 = v9 + 8;
      v11 = *(_QWORD *)(v7 + 552);
      if (v11 < v9 + 8)
      {
        v18 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v19 = v18;
          v18 *= 2;
        }
        while (v19 < v10);
        result = (unsigned __int8 *)mmap(0, v19, 3, 4098, -1, 0);
        if (result == (unsigned __int8 *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v12 = result;
        memcpy(result, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
        v20 = *(void **)(v7 + 528);
        if (v20 != (void *)(v7 + 16))
          munmap(v20, *(_QWORD *)(v7 + 552));
        *(_QWORD *)(v7 + 528) = v12;
        *(_QWORD *)(v7 + 552) = v19;
        v8 = *(_QWORD *)(v7 + 544);
      }
      else
      {
        v12 = *(unsigned __int8 **)(v7 + 528);
      }
      bzero(&v12[v8], v9 - v8);
      *(_QWORD *)(v7 + 544) = v10;
      v13 = (_QWORD *)(*(_QWORD *)(v7 + 528) + v9);
      *(_QWORD *)(v7 + 536) = v13 + 1;
      *v13 = a2;
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v22, 0, 0);
      result = (unsigned __int8 *)v22;
      v22 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
        result = (unsigned __int8 *)WTF::fastFree(v15, v16);
      }
      v17 = v21;
      v21 = 0;
      if (v17)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v17 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteSourceBufferProxy::sourceBufferPrivateEvictionDataChanged(_QWORD *a1, uint64_t *a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;

  result = (unsigned __int8 *)a1[4];
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, a1[5], &v12);
    if (v12)
    {
      v5 = *(_QWORD *)(v12 + 48);
      v6 = a1[6];
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 1443;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v13 = (IPC::Encoder *)v7;
      IPC::ArgumentCoder<WebCore::SourceBufferEvictionData,void>::encode((IPC::Encoder *)v7, a2);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v13, 0, 0);
      result = (unsigned __int8 *)v13;
      v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
        result = (unsigned __int8 *)WTF::fastFree(v9, v10);
      }
      v11 = v12;
      v12 = 0;
      if (v11)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v11 + 16));
    }
  }
  return result;
}

unsigned int *WebKit::RemoteSourceBufferProxy::append(uint64_t a1, IPC::SharedBufferReference *this, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  WTF::RunLoop *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  void *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *result;
  IPC::Encoder *v32[2];
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35[2];
  __int128 v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  char v41;
  WebCore::SharedMemory *v42;

  IPC::SharedBufferReference::sharedCopy((unsigned int *)this, &v42);
  if (v42)
  {
    WebCore::SharedMemory::createHandle();
    v5 = *(unsigned __int8 **)(a1 + 32);
    if (v5)
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *(_QWORD *)(a1 + 40), &v39);
    else
      v39 = 0;
    if (v41)
    {
      if (v39)
      {
        v6 = *(_QWORD *)(v39 + 48);
        v7 = *(_QWORD *)(a1 + 48);
        v8 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v8 = 1446;
        *(_QWORD *)(v8 + 8) = v7;
        *(_QWORD *)(v8 + 528) = v8 + 16;
        *(_QWORD *)(v8 + 536) = v8 + 16;
        *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v8 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
        v32[0] = (IPC::Encoder *)v8;
        IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v8, (unint64_t)v40);
        IPC::Connection::sendMessageImpl(v6, (uint64_t *)v32, 0, 0);
        v10 = v32[0];
        v32[0] = 0;
        if (v10)
        {
          IPC::Encoder::~Encoder(v10, v9);
          WTF::fastFree(v11, v12);
        }
      }
    }
    v13 = *(_QWORD *)(a1 + 56);
    WebCore::SharedMemory::createSharedBuffer(v42);
    v14 = (WTF::RunLoop *)(*(_QWORD *(**)(unsigned int **__return_ptr, uint64_t, unsigned int **))(*(_QWORD *)v13 + 64))(&v34, v13, &v33);
    v15 = (uint64_t)v34;
    v16 = WTF::RunLoop::current(v14);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
    v17 = *a3;
    *a3 = 0;
    v32[0] = 0;
    v32[1] = 0;
    v18 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v19 = &off_1E34BB340;
    v19[1] = a1;
    v19[2] = a1;
    v19[3] = v17;
    *(_DWORD *)(v18 + 8) = 1;
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 40) = "append";
    *(_QWORD *)(v18 + 48) = 0;
    *(_WORD *)(v18 + 56) = 0;
    *(_QWORD *)v18 = off_1E34BB828;
    v20 = (unsigned int *)(v15 + 8);
    *(_QWORD *)(v18 + 64) = 0;
    *(_QWORD *)(v18 + 72) = v19;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    v35[0] = v15;
    v35[1] = v18;
    v36 = *(_OWORD *)v32;
    v37 = "append";
    v38 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand(v35);
    v23 = v34;
    v34 = 0;
    if (v23)
    {
      v24 = v23 + 2;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v23 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
      }
    }
    v27 = v33;
    v33 = 0;
    if (v27)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v27, v22);
    v28 = v39;
    v39 = 0;
    if (v28)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v28 + 16));
    if (v41)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v40);
  }
  else
  {
    v40[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 304))(*(_QWORD *)(a1 + 56));
    v40[1] = v29;
    v30 = *a3;
    *a3 = 0;
    LOWORD(v32[0]) = 262;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD *))(*(_QWORD *)v30 + 16))(v30, v32, v40);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  result = (unsigned int *)v42;
  v42 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  return result;
}

uint64_t WebKit::RemoteSourceBufferProxy::canSwitchToType(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 96))(*(_QWORD *)(a1 + 56));
  v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

unsigned int *WebKit::RemoteSourceBufferProxy::removeCodedFrames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WTF::RunLoop *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *result;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  __n128 v13;
  const char *v14;
  uint64_t v15;
  unsigned int *v16;
  __n128 v17[3];

  v6 = (WTF::RunLoop *)(*(_QWORD *(**)(unsigned int **__return_ptr))(**(_QWORD **)(a1 + 56) + 184))(&v16);
  v7 = (unint64_t)v16;
  v8 = WTF::RunLoop::current(v6);
  v13 = 0uLL;
  v14 = "removeCodedFrames";
  v15 = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(void)>>(v7, v8, a5, &v13, v17);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v17);
  result = v16;
  v16 = 0;
  if (result)
  {
    v10 = result + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

__n128 WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(void)>>@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 v12;
  unsigned int *v13;
  unsigned int v14;
  __n128 result;
  __n128 v16;

  v9 = *a3;
  *a3 = 0;
  v10 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34BB888;
  v11[1] = v9;
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = off_1E34BB858;
  *(_QWORD *)(v10 + 16) = a2;
  v12 = *a4;
  *(__n128 *)(v10 + 40) = a4[1];
  *(__n128 *)(v10 + 24) = v12;
  *(_WORD *)(v10 + 56) = 0;
  *(_QWORD *)v10 = off_1E34BB828;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = v11;
  v13 = (unsigned int *)(a1 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  a5->n128_u64[0] = a1;
  a5->n128_u64[1] = v10;
  result = *a4;
  v16 = a4[1];
  a5[1] = *a4;
  a5[2] = v16;
  return result;
}

uint64_t WebKit::RemoteSourceBufferProxy::evictCodedFrames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  _OWORD v11[2];
  _BYTE v12[16];

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 192))(*(_QWORD *)(a1 + 56));
  WebCore::SourceBufferPrivate::trackBuffersRanges(*(WebCore::SourceBufferPrivate **)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_OWORD *)(v6 + 56);
  v11[0] = *(_OWORD *)(v6 + 40);
  v11[1] = v7;
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _BYTE *, _OWORD *))(*(_QWORD *)v8 + 16))(v8, v12, v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v9);
}

unsigned int *WebKit::RemoteSourceBufferProxy::addTrackBuffer(WebKit::RemoteSourceBufferProxy *this, unint64_t a2)
{
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  unsigned int *result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint8_t v23[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(int8x8_t *)((char *)this + 80);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a2;
      if (*(_QWORD *)&v3 <= a2)
        v5 = a2 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & a2;
    }
    v6 = *((_QWORD *)this + 9);
    v7 = *(_QWORD **)(v6 + 8 * v5);
    if (v7)
    {
      v8 = (_QWORD *)*v7;
      if (*v7)
      {
        v9 = *(_QWORD *)&v3 - 1;
        do
        {
          v10 = v8[1];
          if (v10 == a2)
          {
            if (v8[2] == a2)
            {
              v14 = *((_QWORD *)this + 7);
              if (v4.u32[0] > 1uLL)
              {
                v15 = a2;
                if (*(_QWORD *)&v3 <= a2)
                  v15 = a2 % *(_QWORD *)&v3;
              }
              else
              {
                v15 = v9 & a2;
              }
              v16 = *(_QWORD **)(v6 + 8 * v15);
              do
              {
                do
                  v16 = (_QWORD *)*v16;
                while (v16[1] != a2);
              }
              while (v16[2] != a2);
              v17 = v16[3];
              v18 = (unsigned int *)(v17 + 8);
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 + 1, v18));
              *(_QWORD *)v23 = v17;
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14);
              result = *(unsigned int **)v23;
              *(_QWORD *)v23 = 0;
              if (result)
              {
                v20 = result + 2;
                do
                {
                  v21 = __ldaxr(v20);
                  v22 = v21 - 1;
                }
                while (__stlxr(v22, v20));
                if (!v22)
                {
                  atomic_store(1u, result + 2);
                  return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
                }
              }
              return result;
            }
          }
          else
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v10 >= *(_QWORD *)&v3)
                v10 %= *(_QWORD *)&v3;
            }
            else
            {
              v10 &= v9;
            }
            if (v10 != v5)
              break;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
  v11 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)v23 = 136315138;
    *(_QWORD *)&v23[4] = "void WebKit::RemoteSourceBufferProxy::addTrackBuffer(TrackID)";
    _os_log_fault_impl(&dword_196BCC000, v11, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/media/RemoteSourceBufferProxy.cpp 247: Invalid message dispatched %s", v23, 0xCu);
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(*((unsigned __int8 **)this + 4), *((_QWORD *)this + 5), v23);
  v12 = *(_QWORD *)v23;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v23 + 48) + 98) = 1;
  *(_QWORD *)v23 = 0;
  return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v12 + 16));
}

unsigned int *WebKit::RemoteSourceBufferProxy::setMaximumBufferSize(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::RunLoop *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *result;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  __int128 v31;
  const char *v32;
  uint64_t v33;
  WTF::NativePromiseBase *v34;

  v4 = (WTF::RunLoop *)(*(_QWORD *(**)(unsigned int **__return_ptr))(**(_QWORD **)(a1 + 56) + 320))(&v28);
  v5 = (uint64_t)v28;
  v6 = WTF::RunLoop::current(v4);
  v7 = *a3;
  *a3 = 0;
  v8 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34BB368;
  v9[1] = v7;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = "setMaximumBufferSize";
  *(_QWORD *)(v8 + 48) = 0;
  *(_WORD *)(v8 + 56) = 0;
  *(_QWORD *)v8 = off_1E34BB390;
  v10 = (unsigned int *)(v5 + 8);
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = v9;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v31 = 0uLL;
  v32 = "setMaximumBufferSize";
  v33 = 0;
  v29 = (unsigned int *)v5;
  v30 = 0;
  v34 = (WTF::NativePromiseBase *)v8;
  WTF::NativePromise<void,void,0u>::maybeSettle(v5, &v34, (WTF::Logger::LogSiteIdentifier *)&v31);
  v12 = (unsigned int *)v34;
  v34 = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  v16 = v30;
  v30 = 0;
  if (v16)
  {
    v17 = v16 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v16 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    v21 = v20 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v20 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
    }
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    v25 = result + 2;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteSourceBufferProxy::computeSeekTime(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::RunLoop *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  __n128 v11;
  const char *v12;
  uint64_t v13;
  unsigned int *v14;
  __n128 v15[3];

  v4 = (WTF::RunLoop *)(*(_QWORD *(**)(unsigned int **__return_ptr))(**(_QWORD **)(a1 + 56) + 264))(&v14);
  v5 = (unint64_t)v14;
  v6 = WTF::RunLoop::current(v4);
  v11 = 0uLL;
  v12 = "computeSeekTime";
  v13 = 0;
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &&)>>(v5, v6, a3, &v11, v15);
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v15);
  result = v14;
  v14 = 0;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

__n128 WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError> &&)>>@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __n128 *a4@<X3>, __n128 *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 v12;
  unsigned int *v13;
  unsigned int v14;
  __n128 result;
  __n128 v16;

  v9 = *a3;
  *a3 = 0;
  v10 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34BB3F0;
  v11[1] = v9;
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = off_1E34BB448;
  *(_QWORD *)(v10 + 16) = a2;
  v12 = *a4;
  *(__n128 *)(v10 + 40) = a4[1];
  *(__n128 *)(v10 + 24) = v12;
  *(_WORD *)(v10 + 56) = 0;
  *(_QWORD *)v10 = off_1E34BB418;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = v11;
  v13 = (unsigned int *)(a1 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  a5->n128_u64[0] = a1;
  a5->n128_u64[1] = v10;
  result = *a4;
  v16 = a4[1];
  a5[1] = *a4;
  a5[2] = v16;
  return result;
}

unsigned int *WebKit::RemoteSourceBufferProxy::bufferedSamplesForTrackId(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::RunLoop *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  __n128 v11;
  const char *v12;
  uint64_t v13;
  unsigned int *v14;
  __n128 v15[3];

  v4 = (WTF::RunLoop *)(*(_QWORD *(**)(unsigned int **__return_ptr))(**(_QWORD **)(a1 + 56) + 336))(&v14);
  v5 = (unint64_t)v14;
  v6 = WTF::RunLoop::current(v4);
  v11 = 0uLL;
  v12 = "bufferedSamplesForTrackId";
  v13 = 0;
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError> &&)>>(v15, v5, v6, a3, &v11);
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v15);
  result = v14;
  v14 = 0;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

__n128 WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError> &&)>>(__n128 *a1, unint64_t a2, uint64_t a3, uint64_t *a4, __n128 *a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 v12;
  unsigned int *v13;
  unsigned int v14;
  __n128 result;
  __n128 v16;

  v9 = *a4;
  *a4 = 0;
  v10 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E34BB478;
  v11[1] = v9;
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = off_1E34BB4D0;
  *(_QWORD *)(v10 + 16) = a3;
  v12 = *a5;
  *(__n128 *)(v10 + 40) = a5[1];
  *(__n128 *)(v10 + 24) = v12;
  *(_WORD *)(v10 + 56) = 0;
  *(_QWORD *)v10 = off_1E34BB4A0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = v11;
  v13 = (unsigned int *)(a2 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  a1->n128_u64[0] = a2;
  a1->n128_u64[1] = v10;
  result = *a5;
  v16 = a5[1];
  a1[1] = *a5;
  a1[2] = v16;
  return result;
}

unsigned int *WebKit::RemoteSourceBufferProxy::enqueuedSamplesForTrackID(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::RunLoop *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  __n128 v11;
  const char *v12;
  uint64_t v13;
  unsigned int *v14;
  __n128 v15[3];

  v4 = (WTF::RunLoop *)(*(_QWORD *(**)(unsigned int **__return_ptr))(**(_QWORD **)(a1 + 56) + 344))(&v14);
  v5 = (unint64_t)v14;
  v6 = WTF::RunLoop::current(v4);
  v11 = 0uLL;
  v12 = "enqueuedSamplesForTrackID";
  v13 = 0;
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError> &&)>>(v15, v5, v6, a3, &v11);
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v15);
  result = v14;
  v14 = 0;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

uint64_t WebKit::RemoteSourceBufferProxy::minimumUpcomingPresentationTimeForTrackID(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 352))(*(_QWORD *)(a1 + 56));
  v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

unsigned __int8 *WebKit::RemoteSourceBufferProxy::shutdown(WebKit::RemoteSourceBufferProxy *this)
{
  unsigned __int8 *result;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[24];
  uint64_t v17;
  uint64_t v18[2];
  IPC::Encoder *v19;

  result = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 5), &v17);
    if (v17)
    {
      v3 = *(os_unfair_lock_s **)(v17 + 48);
      *(_QWORD *)v16 = this;
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 1);
      *(_QWORD *)&v16[8] = this;
      WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v16[16], v17);
      v4 = *((_QWORD *)this + 6);
      v5 = *(_QWORD *)&v16[16];
      v15 = *(_OWORD *)v16;
      *(_OWORD *)&v16[8] = 0u;
      v6 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v6 = &off_1E34BB620;
      *(_OWORD *)(v6 + 8) = v15;
      *(_QWORD *)(v6 + 24) = v5;
      v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 1445;
      *(_QWORD *)(v8 + 8) = v4;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v19 = (IPC::Encoder *)v8;
      v18[0] = v6;
      v18[1] = v7;
      IPC::Connection::sendMessageWithAsyncReply(v3, &v19, v18, 0, 0);
      v10 = v18[0];
      v18[0] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      result = (unsigned __int8 *)v19;
      v19 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
        result = (unsigned __int8 *)WTF::fastFree(v11, v12);
      }
      v13 = *(_QWORD *)&v16[16];
      *(_QWORD *)&v16[16] = 0;
      if (v13)
        result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v13 + 16));
      if (*(_QWORD *)&v16[8])
        result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(*(_QWORD *)&v16[8] + 8), v9);
      v14 = v17;
      v17 = 0;
      if (v14)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v14 + 16));
    }
  }
  return result;
}

uint64_t WebKit::RemoteTextTrackProxy::RemoteTextTrackProxy(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  WTF::ThreadSafeWeakPtrControlBlock *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v15;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E34BB050;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v8)
    v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = a2;
  v9 = a3 + 2;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a3 + 48))(a3);
  *(_QWORD *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *v11 = (uint64_t)off_1E34BB648;
  v15 = v11;
  *(_QWORD *)(a1 + 64) = WebCore::TrackPrivateBase::addClient();
  v12 = v15;
  v15 = 0;
  if (v12)
    (*(void (**)(uint64_t *))(*v12 + 8))(v12);
  v13 = *(_QWORD *)(a2 + 48);
  WebKit::RemoteTextTrackProxy::configuration((WebKit::RemoteTextTrackProxy *)a1);
  v15 = &qword_1ECE72878;
  IPC::Connection::send<Messages::MediaPlayerPrivateRemote::AddRemoteTextTrack>(v13, &v15, *(_QWORD *)(a1 + 56), 0, 0);
  return a1;
}

uint64_t *WebKit::RemoteTextTrackProxy::configuration(WebKit::RemoteTextTrackProxy *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;
  _BYTE *v10;
  WTF::StringImpl *v12;

  if ((_MergedGlobals_62 & 1) == 0)
  {
    *(_OWORD *)&dword_1ECE728A8 = 0u;
    *(_OWORD *)&qword_1ECE72898 = 0u;
    *(_OWORD *)&qword_1ECE72888 = 0u;
    *(_OWORD *)&qword_1ECE72878 = 0u;
    *(_OWORD *)&qword_1ECE72898 = *(_OWORD *)WTF::MediaTime::zeroTime(this);
    *(_QWORD *)&byte_1ECE728AC = 0x10000000601;
    _MergedGlobals_62 = 1;
  }
  qword_1ECE72878 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 48))(*((_QWORD *)this + 5));
  (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 5) + 56))(&v12);
  WTF::String::operator=(&qword_1ECE72880, (WTF::StringImpl *)&v12);
  v3 = v12;
  v12 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 5) + 64))(&v12);
  WTF::String::operator=(&qword_1ECE72888, (WTF::StringImpl *)&v12);
  v5 = v12;
  v12 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  dword_1ECE728A8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
  (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 5) + 192))(&v12);
  WTF::String::operator=(&qword_1ECE72890, (WTF::StringImpl *)&v12);
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  qword_1ECE72898 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 96))(*((_QWORD *)this + 5));
  dword_1ECE728A0 = v8;
  byte_1ECE728A4 = v9;
  v10 = (_BYTE *)*((_QWORD *)this + 5);
  byte_1ECE728AC = v10[48];
  byte_1ECE728AE = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v10 + 144))(v10);
  byte_1ECE728AF = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 152))(*((_QWORD *)this + 5));
  byte_1ECE728B0 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 160))(*((_QWORD *)this + 5));
  byte_1ECE728B1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 168))(*((_QWORD *)this + 5));
  byte_1ECE728B2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 176))(*((_QWORD *)this + 5));
  byte_1ECE728B3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 184))(*((_QWORD *)this + 5));
  byte_1ECE728AD = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 136))(*((_QWORD *)this + 5));
  return &qword_1ECE72878;
}

void WebKit::RemoteTextTrackProxy::~RemoteTextTrackProxy(WebKit::RemoteTextTrackProxy *this)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;

  WebCore::TrackPrivateBase::removeClient(*((WebCore::TrackPrivateBase **)this + 5));
  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, v2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteTextTrackProxy::~RemoteTextTrackProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 *WebKit::RemoteTextTrackProxy::configurationChanged(WebKit::RemoteTextTrackProxy *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;

  result = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 4), &v12);
    if (v12)
    {
      v3 = *(_QWORD *)(v12 + 48);
      v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 48))(*((_QWORD *)this + 5));
      v5 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v4;
      WebKit::RemoteTextTrackProxy::configuration(this);
      v6 = *((_QWORD *)this + 7);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 162;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v13 = (IPC::Encoder *)v7;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v5;
      IPC::ArgumentCoder<WebKit::TextTrackPrivateRemoteConfiguration,void>::encode((IPC::Encoder *)v7, &qword_1ECE72878);
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
      result = (unsigned __int8 *)v13;
      v13 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
        result = (unsigned __int8 *)WTF::fastFree(v9, v10);
      }
      v11 = v12;
      v12 = 0;
      if (v11)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v11 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteTextTrackProxy::addDataCue(uint64_t a1, _QWORD *a2, _QWORD *a3, const void *a4, size_t a5)
{
  unsigned __int8 *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  IPC::Encoder *v20;

  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), &v19);
    if (v19)
    {
      v11 = *(_QWORD *)(v19 + 48);
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
      v13 = *(_QWORD *)(a1 + 56);
      v14 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v14 = 135;
      *(_QWORD *)(v14 + 8) = v13;
      *(_QWORD *)(v14 + 528) = v14 + 16;
      *(_QWORD *)(v14 + 536) = v14 + 16;
      *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v14 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
      v20 = (IPC::Encoder *)v14;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 8uLL, 8) = v12;
      IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v14, a2);
      IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v14, a3);
      IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v14, a4, a5);
      IPC::Connection::sendMessageImpl(v11, (uint64_t *)&v20, 0, 0);
      result = (unsigned __int8 *)v20;
      v20 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v15);
        result = (unsigned __int8 *)WTF::fastFree(v16, v17);
      }
      v18 = v19;
      v19 = 0;
      if (v18)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v18 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteTextTrackProxy::addDataCue(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  unsigned __int8 *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[7];
  uint64_t v21;
  IPC::Encoder *v22;

  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), &v21);
    if (v21)
    {
      v11 = *(_QWORD *)(v21 + 48);
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a4 + 56))(v20);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v14 = 136;
      *(_QWORD *)(v14 + 8) = v13;
      *(_QWORD *)(v14 + 528) = v14 + 16;
      *(_QWORD *)(v14 + 536) = v14 + 16;
      *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v14 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
      v22 = (IPC::Encoder *)v14;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 8uLL, 8) = v12;
      IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v14, a2);
      IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v14, a3);
      IPC::ArgumentCoder<std::optional<WebCore::SerializedPlatformDataCueValue::Data>,void>::encode<IPC::Encoder,std::optional<WebCore::SerializedPlatformDataCueValue::Data> const&>((IPC::Encoder *)v14, (uint64_t)v20);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a5);
      IPC::Connection::sendMessageImpl(v11, (uint64_t *)&v22, 0, 0);
      v16 = v22;
      v22 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v15);
        WTF::fastFree(v17, v18);
      }
      result = (unsigned __int8 *)std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, (WTF::StringImpl *)v15);
      v19 = v21;
      v21 = 0;
      if (v19)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v19 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteTextTrackProxy::updateDataCue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[7];
  uint64_t v19[4];
  uint64_t v20;
  IPC::Encoder *v21;

  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), &v20);
    if (v20)
    {
      v9 = *(_QWORD *)(v20 + 48);
      v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a4 + 56))(v18, a4);
      v19[0] = v10;
      v19[1] = a2;
      v19[2] = a3;
      v19[3] = (uint64_t)v18;
      v11 = *(_QWORD *)(a1 + 56);
      v12 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v12 = 178;
      *(_QWORD *)(v12 + 8) = v11;
      *(_QWORD *)(v12 + 528) = v12 + 16;
      *(_QWORD *)(v12 + 536) = v12 + 16;
      *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v12 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
      v21 = (IPC::Encoder *)v12;
      IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::MediaTime const&,WTF::MediaTime const&,WebCore::SerializedPlatformDataCueValue const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WTF::MediaTime const&,WTF::MediaTime const&,WebCore::SerializedPlatformDataCueValue const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v12, v19);
      IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v21, 0, 0);
      v14 = v21;
      v21 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v13);
        WTF::fastFree(v15, v16);
      }
      result = (unsigned __int8 *)std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, (WTF::StringImpl *)v13);
      v17 = v20;
      v20 = 0;
      if (v17)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v17 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteTextTrackProxy::removeDataCue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[7];
  uint64_t v19[4];
  uint64_t v20;
  IPC::Encoder *v21;

  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), &v20);
    if (v20)
    {
      v9 = *(_QWORD *)(v20 + 48);
      v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a4 + 56))(v18, a4);
      v19[0] = v10;
      v19[1] = a2;
      v19[2] = a3;
      v19[3] = (uint64_t)v18;
      v11 = *(_QWORD *)(a1 + 56);
      v12 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v12 = 164;
      *(_QWORD *)(v12 + 8) = v11;
      *(_QWORD *)(v12 + 528) = v12 + 16;
      *(_QWORD *)(v12 + 536) = v12 + 16;
      *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v12 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
      v21 = (IPC::Encoder *)v12;
      IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::MediaTime const&,WTF::MediaTime const&,WebCore::SerializedPlatformDataCueValue const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WTF::MediaTime const&,WTF::MediaTime const&,WebCore::SerializedPlatformDataCueValue const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v12, v19);
      IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v21, 0, 0);
      v14 = v21;
      v21 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v13);
        WTF::fastFree(v15, v16);
      }
      result = (unsigned __int8 *)std::__optional_destruct_base<WebCore::SerializedPlatformDataCueValue::Data,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, (WTF::StringImpl *)v13);
      v17 = v20;
      v20 = 0;
      if (v17)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v17 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteTextTrackProxy::addGenericCue(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;

  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), &v13);
    if (v13)
    {
      v5 = *(_QWORD *)(v13 + 48);
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
      v7 = *(_QWORD *)(a1 + 56);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 137;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v14 = (IPC::Encoder *)v8;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v6;
      IPC::ArgumentCoder<WebCore::GenericCueData,void>::encode((IPC::Encoder *)v8, (_QWORD *)(a2 + 8));
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
      result = (unsigned __int8 *)v14;
      v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
        result = (unsigned __int8 *)WTF::fastFree(v10, v11);
      }
      v12 = v13;
      v13 = 0;
      if (v12)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v12 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteTextTrackProxy::updateGenericCue(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;

  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), &v13);
    if (v13)
    {
      v5 = *(_QWORD *)(v13 + 48);
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
      v7 = *(_QWORD *)(a1 + 56);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 179;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v14 = (IPC::Encoder *)v8;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v6;
      IPC::ArgumentCoder<WebCore::GenericCueData,void>::encode((IPC::Encoder *)v8, (_QWORD *)(a2 + 8));
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
      result = (unsigned __int8 *)v14;
      v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
        result = (unsigned __int8 *)WTF::fastFree(v10, v11);
      }
      v12 = v13;
      v13 = 0;
      if (v12)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v12 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteTextTrackProxy::removeGenericCue(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;

  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), &v13);
    if (v13)
    {
      v5 = *(_QWORD *)(v13 + 48);
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
      v7 = *(_QWORD *)(a1 + 56);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 165;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v14 = (IPC::Encoder *)v8;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v6;
      IPC::ArgumentCoder<WebCore::GenericCueData,void>::encode((IPC::Encoder *)v8, (_QWORD *)(a2 + 8));
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
      result = (unsigned __int8 *)v14;
      v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
        result = (unsigned __int8 *)WTF::fastFree(v10, v11);
      }
      v12 = v13;
      v13 = 0;
      if (v12)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v12 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteTextTrackProxy::parseWebVTTFileHeader(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;

  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), &v13);
    if (v13)
    {
      v5 = *(_QWORD *)(v13 + 48);
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
      v7 = *(_QWORD *)(a1 + 56);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 156;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v14 = (IPC::Encoder *)v8;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v6;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
      result = (unsigned __int8 *)v14;
      v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
        result = (unsigned __int8 *)WTF::fastFree(v10, v11);
      }
      v12 = v13;
      v13 = 0;
      if (v12)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v12 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteTextTrackProxy::parseWebVTTCueData(uint64_t a1, const void *a2, size_t a3)
{
  unsigned __int8 *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Encoder *v16;

  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), &v15);
    if (v15)
    {
      v7 = *(_QWORD *)(v15 + 48);
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
      v9 = *(_QWORD *)(a1 + 56);
      v10 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v10 = 154;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(v10 + 528) = v10 + 16;
      *(_QWORD *)(v10 + 536) = v10 + 16;
      *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v10 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
      v16 = (IPC::Encoder *)v10;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v8;
      IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v10, a2, a3);
      IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v16, 0, 0);
      result = (unsigned __int8 *)v16;
      v16 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
        result = (unsigned __int8 *)WTF::fastFree(v12, v13);
      }
      v14 = v15;
      v15 = 0;
      if (v14)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v14 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteTextTrackProxy::parseWebVTTCueData(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t *v14;
  void *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;

  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), &v22);
    if (v22)
    {
      v5 = *(_QWORD *)(v22 + 48);
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
      v7 = *(_QWORD *)(a1 + 56);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 155;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v23 = (IPC::Encoder *)v8;
      v9 = *(_QWORD *)(v8 + 544);
      v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
      v11 = v10 + 8;
      v12 = *(_QWORD *)(v8 + 552);
      if (v12 < v10 + 8)
      {
        v19 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v20 = v19;
          v19 *= 2;
        }
        while (v20 < v11);
        result = (unsigned __int8 *)mmap(0, v20, 3, 4098, -1, 0);
        if (result == (unsigned __int8 *)-1)
        {
          __break(0xC471u);
          return result;
        }
        v13 = result;
        memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
        v21 = *(void **)(v8 + 528);
        if (v21 != (void *)(v8 + 16))
          munmap(v21, *(_QWORD *)(v8 + 552));
        *(_QWORD *)(v8 + 528) = v13;
        *(_QWORD *)(v8 + 552) = v20;
        v9 = *(_QWORD *)(v8 + 544);
      }
      else
      {
        v13 = *(unsigned __int8 **)(v8 + 528);
      }
      bzero(&v13[v9], v10 - v9);
      *(_QWORD *)(v8 + 544) = v11;
      v14 = (uint64_t *)(*(_QWORD *)(v8 + 528) + v10);
      *(_QWORD *)(v8 + 536) = v14 + 1;
      *v14 = v6;
      IPC::ArgumentCoder<WebCore::ISOWebVTTCue,void>::encode((IPC::Encoder *)v8, a2);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v23, 0, 0);
      result = (unsigned __int8 *)v23;
      v23 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v15);
        result = (unsigned __int8 *)WTF::fastFree(v16, v17);
      }
      v18 = v22;
      v22 = 0;
      if (v18)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v18 + 16));
    }
  }
  return result;
}

void WebKit::RemoteVideoFrameObjectHeap::create(uint64_t *a1@<X0>, WebKit **a2@<X8>)
{
  uint64_t v4;
  WebKit *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = WTF::fastMalloc((WTF *)0xB8);
  v5 = (WebKit *)WebKit::RemoteVideoFrameObjectHeap::RemoteVideoFrameObjectHeap(v4, a1);
  *a2 = v5;
  v6 = *((_QWORD *)v5 + 3);
  v7 = WebKit::remoteVideoFrameObjectHeapQueue(v5);
  IPC::Connection::addWorkQueueMessageReceiver(v6, 0x80u, v7, v4, 0);
}

uint64_t WebKit::RemoteVideoFrameObjectHeap::RemoteVideoFrameObjectHeap(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E34B0558;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)a1 = off_1E34BB0E8;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = &off_1E34BB500;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::SharedVideoFrameWriter *)(a1 + 56));
  WebKit::SharedVideoFrameReader::SharedVideoFrameReader((WebKit::SharedVideoFrameReader *)(a1 + 80));
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  return a1;
}

void WebKit::RemoteVideoFrameObjectHeap::~RemoteVideoFrameObjectHeap(WebKit::RemoteVideoFrameObjectHeap *this)
{
  _QWORD *v2;
  WTF *v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v4 = (WTF *)*((_QWORD *)this + 21);
  v2 = (_QWORD *)((char *)this + 168);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v2, v3);
  WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::RemoteVideoFrameObjectHeap *)((char *)this + 80));
  WebKit::SharedVideoFrameWriter::~SharedVideoFrameWriter((WebKit::RemoteVideoFrameObjectHeap *)((char *)this + 56));
  *((_QWORD *)this + 4) = &off_1E34BB500;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v6, v5);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteVideoFrameObjectHeap::~RemoteVideoFrameObjectHeap(this);
  WTF::fastFree(v1, v2);
}

void WebKit::SharedVideoFrameWriter::~SharedVideoFrameWriter(WebKit::SharedVideoFrameWriter *this)
{
  unsigned int *v2;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this, 0);
}

_QWORD *IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::~ThreadSafeObjectHeap(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34BB500;
  v3 = a1[2];
  if (v3)
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v3, a2);
  return a1;
}

uint64_t WebKit::RemoteVideoFrameObjectHeap::close(uint64_t this)
{
  uint64_t v1;

  if (!*(_BYTE *)(this + 176))
  {
    v1 = this;
    *(_BYTE *)(this + 176) = 1;
    IPC::Connection::removeWorkQueueMessageReceiver(*(_QWORD *)(this + 24), 0x80u, 0);
    WebKit::SharedVideoFrameWriter::disable((WebKit::SharedVideoFrameWriter *)(v1 + 56));
  }
  return this;
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::clear(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  int v6;

  v3 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C](a1 + 8);
    goto LABEL_4;
  }
  if (__stxr(1u, v3))
    goto LABEL_3;
LABEL_4:
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    *(_QWORD *)(a1 + 16) = 0;
    result = WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(result, a2);
  }
  v6 = __ldxr(v3);
  if (v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

unsigned int *WebKit::RemoteVideoFrameObjectHeap::add@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12[2];

  v12[0] = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v12[1] = 0;
  WebKit::RemoteVideoFrameProxy::properties(v12[0], 0, *a2, a3);
  v6 = *a2;
  *a2 = 0;
  v11 = (unsigned int *)v6;
  IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::add(a1 + 32, v12, (uint64_t *)&v11);
  result = v11;
  v11 = 0;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::add(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unsigned __int8 *v6;
  uint64_t *v8;
  const void *v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v6 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 8);
LABEL_5:
  v8 = (uint64_t *)(a1 + 16);
  v16 = a3;
  WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::ensure<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::add(IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>)::{lambda(void)#1}>((uint64_t *)(a1 + 16), a2, &v16, (uint64_t)&v17);
  if (v18)
    goto LABEL_6;
  if (*(_BYTE *)(v17 + 32) && !*(_QWORD *)(v17 + 24))
  {
    v15 = *v8;
    if (!*v8 || (v15 += 56 * *(unsigned int *)(v15 - 4), v15 != v17))
    {
      if (v15 != v17)
        WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t *)(a1 + 16), v17);
    }
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v17 + 48))
  {
    std::optional<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::operator=[abi:sn180100]<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,void>(v17 + 40, a3);
LABEL_6:
    v10 = (unsigned __int8 *)(a1 + 9);
    v11 = atomic_load((unsigned __int8 *)(a1 + 9));
    if ((v11 & 1) != 0)
    {
      atomic_store(0, v10);
      WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v10, v9);
    }
LABEL_8:
    v12 = 1;
    goto LABEL_9;
  }
  v12 = 0;
LABEL_9:
  v13 = __ldxr(v6);
  if (v13 == 1)
  {
    if (!__stlxr(0, v6))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v12;
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::remove(uint64_t a1, __int128 *a2)
{
  unsigned __int8 *v4;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  char v38;
  unsigned int *v39;
  char v40;

  v4 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 8);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  v6 = *((_QWORD *)a2 + 2);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = (uint64_t *)(a1 + 16);
  v8 = v9;
  v36 = *a2;
  if (v9
    || (WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v7, 0), (v8 = *v7) != 0))
  {
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
  }
  LODWORD(v37) = -1640531527;
  WORD2(v37) = 0;
  BYTE6(v37) = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v37, &v36);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v37);
  v12 = result & v10;
  v13 = v8 + 56 * (result & v10);
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  if (*(_OWORD *)v13 == 0)
  {
LABEL_16:
    *(_OWORD *)v13 = v36;
    *(_QWORD *)&v37 = 0;
    *((_QWORD *)&v37 + 1) = v6;
    v38 = 1;
    LOBYTE(v39) = 0;
    v40 = 0;
    *(_BYTE *)(v13 + 32) = 1;
    *(_OWORD *)(v13 + 16) = v37;
    std::__optional_storage_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>>((unsigned int *)(v13 + 40), (uint64_t *)&v39);
    if (v40)
    {
      v18 = v39;
      v39 = 0;
      if (v18)
      {
        v19 = v18 + 2;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v18 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
        }
      }
    }
    v22 = *v7;
    if (*v7)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *v7;
    if (*v7)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26)
        goto LABEL_31;
    }
    else if (3 * v27 > 4 * v26)
    {
LABEL_31:
      v28 = 0;
      goto LABEL_32;
    }
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v7, (_OWORD *)v13);
    goto LABEL_31;
  }
  v16 = 0;
  v17 = 1;
  while (v36 != __PAIR128__(v15, v14))
  {
    if (v14 == -1)
      v16 = v13;
    v12 = (v12 + v17) & v10;
    v13 = v8 + 56 * v12;
    v14 = *(_QWORD *)v13;
    v15 = *(_QWORD *)(v13 + 8);
    ++v17;
    if (*(_OWORD *)v13 == 0)
    {
      if (v16)
      {
        *(_QWORD *)(v16 + 48) = 0;
        *(_OWORD *)(v16 + 16) = 0u;
        *(_OWORD *)(v16 + 32) = 0u;
        *(_OWORD *)v16 = 0u;
        --*(_DWORD *)(*v7 - 16);
        v13 = v16;
      }
      goto LABEL_16;
    }
  }
  if (*(_BYTE *)(v13 + 32) || (v30 = *(_QWORD *)(v13 + 16), v30 > v6))
  {
    v28 = 0;
    v29 = 0;
    goto LABEL_36;
  }
  if (v30 != v6)
  {
    v28 = 0;
    *(_QWORD *)(v13 + 24) = v6;
    v29 = 1;
    *(_BYTE *)(v13 + 32) = 1;
    goto LABEL_36;
  }
  if (!*(_BYTE *)(v13 + 48))
  {
    __break(1u);
    return result;
  }
  v28 = *(unsigned int **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = 0;
  v35 = *v7;
  if (!*v7 || (v35 += 56 * *(unsigned int *)(v35 - 4), v35 != v13))
  {
    if (v35 != v13)
      WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v7, v13);
  }
LABEL_32:
  v29 = 1;
LABEL_36:
  v31 = __ldxr(v4);
  if (v31 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_41;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_41:
  if (v28)
  {
    v32 = v28 + 2;
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v28 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
  }
  return v29;
}

unsigned int *WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer(WebKit *a1, __int128 *a2, int a3)
{
  WTF::ApproximateTime *v6;
  uint64_t v7;
  double v8;
  WebCore::SharedVideoFrameInfo *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  unsigned int *result;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  IPC::Encoder *v24[2];
  int v25;
  char v26;
  _BYTE v27[16];
  int v28;
  char v29;
  unsigned int *v30;
  char v31;

  v6 = (WTF::ApproximateTime *)WebKit::remoteVideoFrameObjectHeapQueue(a1);
  v7 = *(_QWORD *)a2;
  WTF::ApproximateTime::now(v6);
  IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::read((uint64_t)a1 + 32, a2, &v30, v8 + 0.0);
  v27[0] = 0;
  v29 = 0;
  if (v30)
  {
    v9 = (WebCore::SharedVideoFrameInfo *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v30 + 56))(v30);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E34BB670;
    v10[1] = a1;
    v23 = v10;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E34BB698;
    v11[1] = a1;
    v22 = v11;
    WebKit::SharedVideoFrameWriter::writeBuffer(v9, (_QWORD *)a1 + 7, (uint64_t *)&v23, &v22, a3, (uint64_t)v24);
    if (v29 == v26)
    {
      if (!v29)
      {
LABEL_14:
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
        goto LABEL_15;
      }
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v27, (uint64_t)v24);
    }
    else if (v29)
    {
      if (v28 != -1)
        ((void (*)(char *, _BYTE *))off_1E34BB510[v28])(&v31, v27);
      v28 = -1;
      v29 = 0;
    }
    else
    {
      v27[0] = 0;
      v28 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v27, (uint64_t)v24);
      v29 = 1;
    }
    if (v26)
    {
      if (v25 != -1)
        ((void (*)(char *, IPC::Encoder **))off_1E34BB510[v25])(&v31, v24);
      v25 = -1;
    }
    goto LABEL_14;
  }
LABEL_15:
  v12 = *((_QWORD *)a1 + 3);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 1390;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v24[0] = (IPC::Encoder *)v13;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v13, 8uLL, 8) = v7;
  IPC::ArgumentCoder<std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>,void>::encode<IPC::Encoder,std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>>((IPC::Encoder *)v13, (uint64_t)v27);
  IPC::Connection::sendMessageImpl(v12, (uint64_t *)v24, 0, 0);
  v15 = v24[0];
  v24[0] = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v16, v17);
  }
  if (v29 && v28 != -1)
    ((void (*)(IPC::Encoder **, _BYTE *))off_1E34BB510[v28])(v24, v27);
  result = v30;
  v30 = 0;
  if (result)
  {
    v19 = result + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *WebKit::RemoteVideoFrameObjectHeap::pixelBuffer(WebKit *a1, __int128 *a2, uint64_t *a3)
{
  WTF::ApproximateTime *v6;
  double v7;
  const void *v8;
  CFTypeRef v9;
  unsigned int *result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  const void *v14;
  CFTypeRef cf;
  unsigned int *v16;

  v6 = (WTF::ApproximateTime *)WebKit::remoteVideoFrameObjectHeapQueue(a1);
  WTF::ApproximateTime::now(v6);
  IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::read((uint64_t)a1 + 32, a2, &v16, v7 + 0.0);
  if (!v16)
  {
    cf = 0;
    WTF::CompletionHandler<void ()(WTF::RetainPtr<__CVBuffer *>)>::operator()(a3, &cf);
    v9 = cf;
    cf = 0;
    if (!v9)
      goto LABEL_5;
    goto LABEL_12;
  }
  v8 = (const void *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v16 + 56))(v16);
  v14 = v8;
  if (v8)
    CFRetain(v8);
  WTF::CompletionHandler<void ()(WTF::RetainPtr<__CVBuffer *>)>::operator()(a3, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
LABEL_12:
    CFRelease(v9);
LABEL_5:
  result = v16;
  v16 = 0;
  if (result)
  {
    v11 = result + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::RetainPtr<__CVBuffer *>)>::operator()(uint64_t *a1, const void **a2)
{
  uint64_t v2;
  const void *v3;
  CFTypeRef v4;
  CFTypeRef cf;

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  cf = v3;
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v2 + 16))(v2, &cf);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebKit::RemoteVideoFrameObjectHeap::convertFrameBuffer(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const void *v6;
  void *v7;
  double v8;
  unsigned int *v9;
  WebCore *v10;
  __CVBuffer *v11;
  WebCore *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  WebCore::SharedVideoFrameInfo *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  WebCore::PixelBufferConformerCV *v21;
  CFTypeRef v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  WebCore::SharedVideoFrameInfo *v26;
  NSObject *v27;
  uint64_t v28;
  CFTypeRef v29;
  int v30;
  _QWORD *v31;
  CFTypeRef *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef *v39;
  CFTypeRef v40;
  CFTypeRef v41[2];
  int v42;
  char v43;
  CFTypeRef v44;
  CFTypeRef cf;
  CFTypeRef v46;
  char v47;

  v6 = *(const void **)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
  cf = v6;
  if (v6)
    CFRetain(v6);
  WebCore::DestinationColorSpace::DestinationColorSpace();
  v7 = (void *)cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  if (*(_DWORD *)(a2 + 40) == 1)
  {
    WTF::ApproximateTime::now((WTF::ApproximateTime *)v7);
    IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::read(a1 + 32, (__int128 *)(a2 + 24), v41, v8 + 0.0);
  }
  else
  {
    WebKit::SharedVideoFrameReader::read(a1 + 80, a2, v41);
  }
  v9 = (unsigned int *)v41[0];
  if (v41[0])
  {
    v10 = (WebCore *)(*(uint64_t (**)(CFTypeRef))(*(_QWORD *)v41[0] + 56))(v41[0]);
    v12 = v10;
    if (v10)
      CFRetain(v10);
    WebCore::createCGColorSpaceForCVPixelBuffer(v12, v11);
    WebCore::DestinationColorSpace::DestinationColorSpace();
    v13 = v41[0];
    v41[0] = 0;
    v14 = v46;
    v46 = v13;
    if (v14)
    {
      CFRelease(v14);
      v15 = v41[0];
      v41[0] = 0;
      if (v15)
        CFRelease(v15);
    }
    v16 = v40;
    v40 = 0;
    if (v16)
      CFRelease(v16);
    if (((unsigned int (*)(WebCore *))*MEMORY[0x1E0DD4928])(v12) == 1111970369)
    {
      v17 = v12;
LABEL_49:
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v31 = &unk_1E34BB6C0;
      v31[1] = a1;
      v44 = v31;
      v32 = (CFTypeRef *)WTF::fastMalloc((WTF *)0x10);
      *v32 = off_1E34BB6E8;
      v32[1] = (CFTypeRef)a1;
      v39 = v32;
      WebKit::SharedVideoFrameWriter::writeBuffer(v17, (_QWORD *)(a1 + 56), (uint64_t *)&v44, &v39, 0, (uint64_t)v41);
      if (v39)
        (*((void (**)(CFTypeRef *))*v39 + 1))(v39);
      if (v44)
        (*(void (**)(CFTypeRef))(*(_QWORD *)v44 + 8))(v44);
      v33 = *(_QWORD *)(a1 + 24);
      v44 = v41;
      IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::NewConvertedVideoFrameBuffer>(v33, (uint64_t *)&v44);
      if (v43 && v42 != -1)
        ((void (*)(CFTypeRef *, CFTypeRef *))off_1E34BB510[v42])(&v44, v41);
      goto LABEL_56;
    }
    v19 = (unsigned __int8 *)(a1 + 160);
    if (__ldaxr((unsigned __int8 *)(a1 + 160)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v19))
    {
      goto LABEL_25;
    }
    MEMORY[0x19AEABB3C](a1 + 160);
LABEL_25:
    v21 = *(WebCore::PixelBufferConformerCV **)(a1 + 168);
    if (!v21)
    {
      WebKit::RemoteVideoFrameObjectHeap::createPixelConformer((WebKit::RemoteVideoFrameObjectHeap *)a1, (WebCore::PixelBufferConformerCV **)&v44);
      v22 = v44;
      v44 = 0;
      v41[0] = 0;
      v23 = *(WTF **)(a1 + 168);
      *(_QWORD *)(a1 + 168) = v22;
      if (v23)
      {
        std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100](a1 + 168, v23);
        v24 = (WTF *)v41[0];
        v41[0] = 0;
        if (v24)
          std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v41, v24);
        v25 = (WTF *)v44;
        v44 = 0;
        if (v25)
          std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)&v44, v25);
      }
      v21 = *(WebCore::PixelBufferConformerCV **)(a1 + 168);
    }
    WebCore::PixelBufferConformerCV::convert(v21, v12);
    v26 = (WebCore::SharedVideoFrameInfo *)v44;
    if (v44)
    {
      v44 = 0;
      v17 = v26;
      if (!v12)
        goto LABEL_43;
      CFRelease(v12);
      v12 = v26;
    }
    else
    {
      v27 = qword_1ECE71B18;
      if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v41[0]) = 0;
        _os_log_error_impl(&dword_196BCC000, v27, OS_LOG_TYPE_ERROR, "RemoteVideoFrameObjectHeap::convertFrameBuffer conformer failed", (uint8_t *)v41, 2u);
      }
      v28 = *(_QWORD *)(a1 + 24);
      LOBYTE(v41[0]) = 0;
      v43 = 0;
      v39 = v41;
      IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::NewConvertedVideoFrameBuffer>(v28, (uint64_t *)&v39);
      if (v43 && v42 != -1)
        ((void (*)(char *, CFTypeRef *))off_1E34BB510[v42])(&v47, v41);
    }
    v29 = v44;
    v44 = 0;
    if (v29)
      CFRelease(v29);
    v17 = v12;
LABEL_43:
    v30 = __ldxr(v19);
    if (v30 == 1)
    {
      if (!__stlxr(0, v19))
      {
        if (v26)
          goto LABEL_49;
LABEL_56:
        if (v17)
          CFRelease(v17);
        v34 = v9 + 2;
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
        goto LABEL_62;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 160));
    if (v26)
      goto LABEL_49;
    goto LABEL_56;
  }
  v18 = *(_QWORD *)(a1 + 24);
  LOBYTE(v41[0]) = 0;
  v43 = 0;
  v44 = v41;
  IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::NewConvertedVideoFrameBuffer>(v18, (uint64_t *)&v44);
  if (v43 && v42 != -1)
    ((void (*)(CFTypeRef **, CFTypeRef *))off_1E34BB510[v42])(&v39, v41);
LABEL_62:
  v41[0] = v46;
  if (v46)
    CFRetain(v46);
  WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)>::operator()(a3, v41);
  v37 = v41[0];
  v41[0] = 0;
  if (v37)
    CFRelease(v37);
  v38 = v46;
  v46 = 0;
  if (v38)
    CFRelease(v38);
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::NewConvertedVideoFrameBuffer>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1389;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>,void>::encode<IPC::Encoder,std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>>((IPC::Encoder *)v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void WebKit::RemoteVideoFrameObjectHeap::lowMemoryHandler(WebKit::RemoteVideoFrameObjectHeap *this)
{
  unsigned __int8 *v2;
  WTF *v4;
  _QWORD *v5;
  WTF *v6;
  int v7;

  v2 = (unsigned __int8 *)this + 160;
  if (__ldaxr((unsigned __int8 *)this + 160))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 160);
LABEL_5:
  v6 = (WTF *)*((_QWORD *)this + 21);
  v5 = (_QWORD *)((char *)this + 168);
  v4 = v6;
  *v5 = 0;
  if (v6)
    std::default_delete<WebCore::PixelBufferConformerCV>::operator()[abi:sn180100]((int)v5, v4);
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v2))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
}

uint64_t WebKit::RemoteVideoTrackProxy::RemoteVideoTrackProxy(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  WTF::ThreadSafeWeakPtrControlBlock *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _QWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  IPC::Encoder *v28;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E34BB120;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a2 + 16);
  if (v8)
    v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = a2;
  v9 = a3 + 2;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a3 + 48))(a3);
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E34BB710;
  v24 = v11;
  *(_QWORD *)(a1 + 72) = WebCore::TrackPrivateBase::addClient();
  v12 = (uint64_t)v24;
  v24 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a2 + 48);
  WebKit::RemoteVideoTrackProxy::configuration((WebKit::RemoteVideoTrackProxy *)&v24, a1);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v15 = 140;
  *(_QWORD *)(v15 + 8) = v14;
  *(_QWORD *)(v15 + 528) = v15 + 16;
  *(_QWORD *)(v15 + 536) = v15 + 16;
  *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v15 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
  v28 = (IPC::Encoder *)v15;
  IPC::ArgumentCoder<WebKit::VideoTrackPrivateRemoteConfiguration,void>::encode((IPC::Encoder *)v15, (uint64_t *)&v24);
  IPC::Connection::sendMessageImpl(v13, (uint64_t *)&v28, 0, 0);
  v17 = v28;
  v28 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v16);
    WTF::fastFree(v18, v19);
  }
  v20 = v27;
  v27 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v26;
  v26 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v25;
  v25 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v22 -= 2;
  }
  return a1;
}

WTF::StringImpl *WebKit::RemoteVideoTrackProxy::configuration(WebKit::RemoteVideoTrackProxy *this, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD *v9;
  __int128 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  *(_QWORD *)this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 48))(*(_QWORD *)(a2 + 40));
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 40) + 56))(&v14);
  v4 = v14;
  if (v14)
    *(_DWORD *)v14 += 2;
  *((_QWORD *)this + 1) = v4;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 40) + 64))(&v13);
  v5 = v13;
  if (v13)
    *(_DWORD *)v13 += 2;
  *((_QWORD *)this + 2) = v5;
  *((_QWORD *)this + 3) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 96))(*(_QWORD *)(a2 + 40));
  *((_QWORD *)this + 4) = v6;
  *((_DWORD *)this + 10) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 72))(*(_QWORD *)(a2 + 40));
  *((_BYTE *)this + 44) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 128))(*(_QWORD *)(a2 + 40));
  *((_BYTE *)this + 45) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 136))(*(_QWORD *)(a2 + 40));
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_DWORD **)(v8 + 56);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 6) = v9;
  v10 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)(v8 + 64);
  *(_OWORD *)((char *)this + 72) = v10;
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::RemoteVideoTrackProxy::~RemoteVideoTrackProxy(WebKit::RemoteVideoTrackProxy *this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioTrackProxy::~RemoteAudioTrackProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned __int8 *WebKit::RemoteVideoTrackProxy::updateConfiguration(WebKit::RemoteVideoTrackProxy *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  IPC::Encoder *v20;

  result = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 4), &v19);
    if (v19)
    {
      v3 = *(_QWORD *)(v19 + 48);
      v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 48))(*((_QWORD *)this + 5));
      v5 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v4;
      WebKit::RemoteVideoTrackProxy::configuration((WebKit::RemoteVideoTrackProxy *)&v15, (uint64_t)this);
      v6 = *((_QWORD *)this + 7);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 163;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v20 = (IPC::Encoder *)v7;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v5;
      IPC::ArgumentCoder<WebKit::VideoTrackPrivateRemoteConfiguration,void>::encode((IPC::Encoder *)v7, &v15);
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v20, 0, 0);
      v9 = v20;
      v20 = 0;
      if (v9)
      {
        IPC::Encoder::~Encoder(v9, v8);
        WTF::fastFree(v10, v11);
      }
      v12 = v18;
      v18 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v17;
      v17 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)v13 -= 2;
      }
      result = (unsigned __int8 *)v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)result -= 2;
      }
      v14 = v19;
      v19 = 0;
      if (v14)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v14 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteVideoTrackProxy::selectedChanged(unsigned __int8 *this, int a2)
{
  if (this[64] != a2)
  {
    this[64] = a2;
    return WebKit::RemoteVideoTrackProxy::updateConfiguration((WebKit::RemoteVideoTrackProxy *)this);
  }
  return this;
}

uint64_t WebKit::RemoteAudioSourceProviderProxy::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t result;
  _QWORD *v16;
  _QWORD *v17;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v6 + 16) = 1;
  v7 = (unsigned int *)(v6 + 16);
  *(_QWORD *)(v6 + 8) = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
  *(_QWORD *)v6 = &off_1E34BB178;
  *(_QWORD *)(v6 + 24) = a1;
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(v6 + 32) = v8;
  *a3 = v6;
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34BB738;
  v10[1] = v6;
  v16 = v10;
  WebCore::AudioSourceProviderAVFObjC::setConfigureAudioStorageCallback();
  if (v16)
    (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  v11 = *a3;
  v12 = (unsigned int *)(v11 + 16);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34BB760;
  v14[1] = v11;
  v17 = v14;
  WebCore::AudioSourceProviderAVFObjC::setAudioCallback();
  result = (uint64_t)v17;
  if (v17)
    return (*(uint64_t (**)(_QWORD *))(*v17 + 8))(v17);
  return result;
}

void WebKit::RemoteAudioSourceProviderProxy::~RemoteAudioSourceProviderProxy(unsigned __int8 ***this)
{
  unsigned int **v1;
  void *v2;

  *this = (unsigned __int8 **)&off_1E34BB178;
  v1 = (unsigned int **)(this + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 4);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1, v2);
}

{
  unsigned int **v2;
  void *v3;
  void *v4;

  *this = (unsigned __int8 **)&off_1E34BB178;
  v2 = (unsigned int **)(this + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 4);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, v3);
  WTF::fastFree((WTF *)this, v4);
}

WebKit::RemoteImageDecoderAVFProxy *WebKit::RemoteImageDecoderAVFProxy::RemoteImageDecoderAVFProxy(WebKit::RemoteImageDecoderAVFProxy *this, WebKit::GPUConnectionToWebProcess *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;

  *(_QWORD *)this = off_1E34B75D0;
  *((_QWORD *)this + 1) = 0;
  v4 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)a2 + 2);
  if (v4)
    v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = 0;
  WTF::MachSendRight::MachSendRight((WebKit::RemoteImageDecoderAVFProxy *)((char *)this + 40), (WebKit::GPUConnectionToWebProcess *)((char *)a2 + 88));
  return this;
}

unsigned int *WebKit::RemoteImageDecoderAVFProxy::createDecoder(uint64_t a1, IPC::SharedBufferReference *this, uint64_t a3, uint64_t *a4)
{
  WebCore::SharedBuffer *v6;
  void *v7;
  uint64_t IdentifierInternal;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int *result;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v44;
  WebCore::SharedBuffer *v45;
  char v46;
  _BYTE v47[4];
  unsigned int *v48;

  if (*(_QWORD *)this || *((_QWORD *)this + 1))
  {
    IPC::SharedBufferReference::unsafeBuffer((unsigned int *)this, &v45);
    v6 = v45;
  }
  else
  {
    v6 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v6);
  }
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v47, (const WTF::MachSendRight *)(a1 + 40));
  WebCore::ImageDecoderAVFObjC::create();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v47);
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v7);
  LOBYTE(v45) = 0;
  v46 = 0;
  if (!v48)
    goto LABEL_44;
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  v9 = (uint64_t *)(a1 + 32);
  v10 = v48;
  if (v48)
  {
    v11 = v48 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = *v9;
  if (*v9
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 32), 0), (v13 = *v9) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v13 + 16 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    while (v20 != IdentifierInternal)
    {
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v14;
      v19 = (uint64_t *)(v13 + 16 * v18);
      v20 = *v19;
      ++v22;
      if (!*v19)
      {
        if (v21)
        {
          *v21 = 0;
          v21[1] = 0;
          --*(_DWORD *)(*v9 - 16);
          v19 = v21;
        }
        goto LABEL_18;
      }
    }
    if (v10)
    {
      v29 = v10 + 2;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    goto LABEL_37;
  }
LABEL_18:
  v23 = (unsigned int *)v19[1];
  *v19 = IdentifierInternal;
  v19[1] = (uint64_t)v10;
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v23 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
    }
  }
  v27 = *v9;
  if (*v9)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v32 = *v9;
  if (*v9)
    v33 = *(_DWORD *)(v32 - 12);
  else
    v33 = 0;
  v34 = (*(_DWORD *)(v32 - 16) + v33);
  v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 > 2 * v34)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (3 * v35 <= 4 * v34)
LABEL_36:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 32), v19);
LABEL_37:
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v36 = *(unsigned int **)(a1 + 8);
  if (v36)
  {
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v38 = &off_1E34BB788;
  v38[1] = v36;
  v38[2] = IdentifierInternal;
  v44 = v38;
  WebCore::ImageDecoderAVFObjC::setEncodedDataStatusChangeCallback();
  if (v44)
    (*(void (**)(_QWORD *))(*v44 + 8))(v44);
  if (!v46)
    v46 = 1;
  v45 = (WebCore::SharedBuffer *)IdentifierInternal;
LABEL_44:
  v39 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WebCore::SharedBuffer **))(*(_QWORD *)v39 + 16))(v39, &v45);
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  result = v48;
  v48 = 0;
  if (result)
  {
    v41 = result + 2;
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WebKit::RemoteImageDecoderAVFProxy::deleteDecoder(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v13 = a2;
  v3 = a1 + 4;
  if (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1 + 4, &v13))
  {
    v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3, &v13);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::take(v3, v4, &v12);
    v5 = v12;
    v12 = 0;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
    v9 = (unsigned __int8 *)a1[2];
    if (v9)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v9, a1[3], &v11);
      v10 = v11;
      if (v11)
      {
        if (*v3 && *(_DWORD *)(*v3 - 12))
        {
          v11 = 0;
LABEL_14:
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v10 + 16));
          return;
        }
        WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(v11 + 72));
        v10 = v11;
        v11 = 0;
        if (v10)
          goto LABEL_14;
      }
    }
  }
}

uint64_t WebKit::RemoteImageDecoderAVFProxy::setExpectedContentSize(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;
  WebCore::ImageDecoderAVFObjC *v4;
  uint64_t v5;

  v5 = a2;
  v2 = (uint64_t *)(a1 + 32);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v5);
  if ((_DWORD)result)
  {
    v4 = (WebCore::ImageDecoderAVFObjC *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v2, &v5);
    return WebCore::ImageDecoderAVFObjC::setExpectedContentSize(v4);
  }
  return result;
}

WTF *WebKit::RemoteImageDecoderAVFProxy::setData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t *v7;
  WebCore::ImageDecoderAVFObjC *v8;
  WebCore::SharedBuffer *v9;
  void *v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  WTF *result;
  void *v15;
  _QWORD v16[2];
  WTF *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = a2;
  v7 = (uint64_t *)(a1 + 32);
  if (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v20))
  {
    v8 = (WebCore::ImageDecoderAVFObjC *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v7, &v20);
    if (*(_QWORD *)a3 || *(_QWORD *)(a3 + 8))
    {
      IPC::SharedBufferReference::unsafeBuffer((unsigned int *)a3, &v17);
      v9 = v17;
    }
    else
    {
      v9 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
      WebCore::SharedBuffer::SharedBuffer(v9);
    }
    WebCore::ImageDecoderAVFObjC::setData();
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v9, v10);
    v11 = WebCore::ImageDecoderAVFObjC::frameCount(v8);
    LOBYTE(v17) = 0;
    v19 = 0;
    if (v11)
    {
      WebCore::ImageDecoderAVFObjC::frameInfos(v8);
      v17 = (WTF *)v16[0];
      v18 = v16[1];
      v19 = 1;
    }
    v16[0] = WebCore::ImageDecoderAVFObjC::size(v8);
    v12 = *((_QWORD *)v8 + 5) != 0;
    v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *, _BOOL8, WTF **))(*(_QWORD *)v13 + 16))(v13, v11, v16, v12, &v17);
  }
  else
  {
    v16[0] = 0;
    LOBYTE(v17) = 0;
    v19 = 0;
    v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD *, _QWORD, WTF **))(*(_QWORD *)v13 + 16))(v13, 0, v16, 0, &v17);
  }
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (v19)
  {
    result = v17;
    if (v17)
    {
      v17 = 0;
      LODWORD(v18) = 0;
      return (WTF *)WTF::fastFree(result, v15);
    }
  }
  return result;
}

WTF::MachSendRight *WebKit::RemoteImageDecoderAVFProxy::createFrameImageAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v5;
  CFTypeRef v6;
  CFTypeRef v7;
  void *v8;
  const void *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  uint64_t v12;
  WebCore::ShareableBitmap *v13;
  WebCore::NativeImage *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  _BYTE v25[8];
  const void *v26;
  char v27;
  CFTypeRef v28;
  float32x2_t v29;
  uint64_t v30;
  CFTypeRef cf;
  char v32;
  WebCore::ShareableBitmap *v33;
  uint64_t v34;
  WebCore::NativeImage *v35;
  _BYTE v36[72];
  uint64_t v37;

  v37 = a2;
  v36[0] = 0;
  v36[64] = 0;
  v5 = (uint64_t *)(a1 + 32);
  if (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v37))
  {
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5, &v37);
    v25[0] = 1;
    v25[4] = 0;
    BYTE4(v26) = 0;
    WebCore::ImageDecoderAVFObjC::createFrameImageAtIndex();
    WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    WebCore::NativeImage::createTransient();
    v6 = v28;
    v28 = 0;
    if (v6)
      CFRelease(v6);
    if (v35)
    {
      v34 = WebCore::NativeImage::size(v35);
      WebCore::NativeImage::colorSpace(v35);
      v7 = v28;
      v28 = 0;
      cf = v7;
      v32 = 1;
      MEMORY[0x19AEB3600](v25, &v34, &cf, 0);
      WebCore::ShareableBitmap::create();
      if (v27)
      {
        v9 = v26;
        v26 = 0;
        if (v9)
          CFRelease(v9);
      }
      if (v32)
      {
        v10 = cf;
        cf = 0;
        if (v10)
          CFRelease(v10);
      }
      v11 = v28;
      v28 = 0;
      if (v11)
        CFRelease(v11);
      if (v33)
      {
        WebCore::ShareableBitmap::createGraphicsContext(v33);
        if (v30)
        {
          v28 = 0;
          v29 = vcvt_f32_s32((int32x2_t)v34);
          WebCore::GraphicsContext::drawNativeImage();
          WebCore::ShareableBitmap::createHandle();
          std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>((WTF::MachSendRight *)v36, (uint64_t)v25);
          std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v25);
          v12 = v30;
          v30 = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        v13 = v33;
        v33 = 0;
        if (v13)
          WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v13, v8);
      }
      v14 = v35;
      v35 = 0;
      if (v14)
      {
        v15 = *((_QWORD *)v14 + 1);
        if (__ldaxr((unsigned __int8 *)v15))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v15))
        {
          goto LABEL_24;
        }
        MEMORY[0x19AEABB3C](v15);
LABEL_24:
        v17 = *(_QWORD *)(v15 + 8);
        v18 = v17 - 1;
        *(_QWORD *)(v15 + 8) = v17 - 1;
        if (v17 == 1)
        {
          v24 = *(_QWORD *)(v15 + 16);
          v19 = *(_QWORD *)(v15 + 24);
          *(_QWORD *)(v15 + 24) = 0;
          v20 = v24 != 0;
        }
        else
        {
          v19 = 0;
          v20 = 1;
        }
        v21 = __ldxr((unsigned __int8 *)v15);
        if (v21 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v15))
          {
            if (v18)
              goto LABEL_36;
            goto LABEL_32;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v15);
        if (v18)
          goto LABEL_36;
LABEL_32:
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        if (!v20)
          WTF::fastFree((WTF *)v15, v8);
      }
    }
  }
LABEL_36:
  v22 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v22 + 16))(v22, v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v36);
}

WebCore::ImageDecoderAVFObjC *WebKit::RemoteImageDecoderAVFProxy::clearFrameBufferCache(uint64_t a1, uint64_t a2)
{
  WebCore::ImageDecoderAVFObjC *result;
  WebCore::ImageDecoderAVFObjC *v3;
  uint64_t v4;

  v4 = a2;
  result = (WebCore::ImageDecoderAVFObjC *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 32), &v4);
  if (result)
  {
    v3 = result;
    WebCore::ImageDecoderAVFObjC::frameCount(result);
    return (WebCore::ImageDecoderAVFObjC *)WebCore::ImageDecoderAVFObjC::clearFrameBufferCache(v3);
  }
  return result;
}

WebKit::RemoteMediaSessionHelperProxy *WebKit::RemoteMediaSessionHelperProxy::RemoteMediaSessionHelperProxy(WebKit::RemoteMediaSessionHelperProxy *this, WebKit::GPUConnectionToWebProcess *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;

  *(_QWORD *)this = off_1E34BB1A0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &unk_1E34BB210;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  v4 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)a2 + 2);
  if (v4)
    v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  *((_QWORD *)this + 5) = v4;
  *((_QWORD *)this + 6) = a2;
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 60) = 0;
  WebCore::MediaSessionHelper::sharedHelper(v4);
  WebCore::MediaSessionHelper::addClient();
  return this;
}

void WebKit::RemoteMediaSessionHelperProxy::~RemoteMediaSessionHelperProxy(WebKit::RemoteMediaSessionHelperProxy *this)
{
  WebCore::MediaSessionHelper *v2;
  void *v3;
  unsigned __int8 *v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E34BB1A0;
  *((_QWORD *)this + 2) = &unk_1E34BB210;
  v2 = WebKit::RemoteMediaSessionHelperProxy::stopMonitoringWirelessRoutes(this);
  WebCore::MediaSessionHelper::sharedHelper(v2);
  WebCore::MediaSessionHelper::removeClient();
  v4 = (unsigned __int8 *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v3);
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteMediaSessionHelperProxy::~RemoteMediaSessionHelperProxy(this);
  WTF::fastFree(v1, v2);
}

WebCore::MediaSessionHelper *WebKit::RemoteMediaSessionHelperProxy::stopMonitoringWirelessRoutes(WebCore::MediaSessionHelper *this)
{
  WebCore::MediaSessionHelper *v1;

  if (*((_BYTE *)this + 32))
  {
    *((_BYTE *)this + 32) = 0;
    v1 = (WebCore::MediaSessionHelper *)WebCore::MediaSessionHelper::sharedHelper(this);
    return (WebCore::MediaSessionHelper *)WebCore::MediaSessionHelper::stopMonitoringWirelessRoutes(v1);
  }
  return this;
}

void `non-virtual thunk to'WebKit::RemoteMediaSessionHelperProxy::~RemoteMediaSessionHelperProxy(WebKit::RemoteMediaSessionHelperProxy *this)
{
  WebKit::RemoteMediaSessionHelperProxy::~RemoteMediaSessionHelperProxy((WebKit::RemoteMediaSessionHelperProxy *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteMediaSessionHelperProxy::~RemoteMediaSessionHelperProxy((WebKit::RemoteMediaSessionHelperProxy *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

WebCore::MediaSessionHelper *WebKit::RemoteMediaSessionHelperProxy::startMonitoringWirelessRoutes(WebCore::MediaSessionHelper *this)
{
  WebCore::MediaSessionHelper *v1;

  if (!*((_BYTE *)this + 32))
  {
    *((_BYTE *)this + 32) = 1;
    v1 = (WebCore::MediaSessionHelper *)WebCore::MediaSessionHelper::sharedHelper(this);
    return (WebCore::MediaSessionHelper *)WebCore::MediaSessionHelper::startMonitoringWirelessRoutes(v1);
  }
  return this;
}

_BYTE *WebKit::RemoteMediaSessionHelperProxy::overridePresentingApplicationPIDIfNeeded(_BYTE *this)
{
  _BYTE *v1;

  if (this[60])
  {
    v1 = this;
    this = (_BYTE *)WebCore::MediaSessionHelper::sharedHelper((WebCore::MediaSessionHelper *)this);
    if (v1[60])
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)this + 16))(this, *((unsigned int *)v1 + 14), 1);
    else
      __break(1u);
  }
  return this;
}

unsigned __int8 *WebKit::RemoteMediaSessionHelperProxy::applicationWillEnterForeground(uint64_t a1, char a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  result = *(unsigned __int8 **)(a1 + 40);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 48), &v11);
    if (v11)
    {
      v5 = *(_QWORD *)(v11 + 48);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 1222;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v12 = (IPC::Encoder *)v6;
      *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a2;
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
      result = (unsigned __int8 *)v12;
      v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
        result = (unsigned __int8 *)WTF::fastFree(v8, v9);
      }
      v10 = v11;
      v11 = 0;
      if (v10)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v10 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaSessionHelperProxy::applicationDidEnterBackground(uint64_t a1, char a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  result = *(unsigned __int8 **)(a1 + 40);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 48), &v11);
    if (v11)
    {
      v5 = *(_QWORD *)(v11 + 48);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 1220;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v12 = (IPC::Encoder *)v6;
      *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a2;
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
      result = (unsigned __int8 *)v12;
      v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
        result = (unsigned __int8 *)WTF::fastFree(v8, v9);
      }
      v10 = v11;
      v11 = 0;
      if (v10)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v10 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaSessionHelperProxy::applicationWillBecomeInactive(WebKit::RemoteMediaSessionHelperProxy *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  IPC::Encoder *v10;

  result = (unsigned __int8 *)*((_QWORD *)this + 5);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 6), &v9);
    if (v9)
    {
      v3 = *(_QWORD *)(v9 + 48);
      v4 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v4 = 1221;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 528) = v4 + 16;
      *(_QWORD *)(v4 + 536) = v4 + 16;
      *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v4 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
      v10 = (IPC::Encoder *)v4;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
      result = (unsigned __int8 *)v10;
      v10 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
        result = (unsigned __int8 *)WTF::fastFree(v6, v7);
      }
      v8 = v9;
      v9 = 0;
      if (v8)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaSessionHelperProxy::applicationDidBecomeActive(WebKit::RemoteMediaSessionHelperProxy *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  IPC::Encoder *v10;

  result = (unsigned __int8 *)*((_QWORD *)this + 5);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 6), &v9);
    if (v9)
    {
      v3 = *(_QWORD *)(v9 + 48);
      v4 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v4 = 1219;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 528) = v4 + 16;
      *(_QWORD *)(v4 + 536) = v4 + 16;
      *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v4 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
      v10 = (IPC::Encoder *)v4;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
      result = (unsigned __int8 *)v10;
      v10 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
        result = (unsigned __int8 *)WTF::fastFree(v6, v7);
      }
      v8 = v9;
      v9 = 0;
      if (v8)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaSessionHelperProxy::externalOutputDeviceAvailableDidChange(uint64_t a1, char a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  result = *(unsigned __int8 **)(a1 + 40);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 48), &v11);
    if (v11)
    {
      v5 = *(_QWORD *)(v11 + 48);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 1223;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v12 = (IPC::Encoder *)v6;
      *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a2;
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
      result = (unsigned __int8 *)v12;
      v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
        result = (unsigned __int8 *)WTF::fastFree(v8, v9);
      }
      v10 = v11;
      v11 = 0;
      if (v10)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v10 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaSessionHelperProxy::isPlayingToAutomotiveHeadUnitDidChange(uint64_t a1, char a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  result = *(unsigned __int8 **)(a1 + 40);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 48), &v11);
    if (v11)
    {
      v5 = *(_QWORD *)(v11 + 48);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 1224;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v12 = (IPC::Encoder *)v6;
      *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a2;
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
      result = (unsigned __int8 *)v12;
      v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
        result = (unsigned __int8 *)WTF::fastFree(v8, v9);
      }
      v10 = v11;
      v11 = 0;
      if (v10)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v10 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaSessionHelperProxy::activeAudioRouteDidChange(uint64_t a1, char a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  result = *(unsigned __int8 **)(a1 + 40);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 48), &v11);
    if (v11)
    {
      v5 = *(_QWORD *)(v11 + 48);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 1216;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v12 = (IPC::Encoder *)v6;
      *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a2;
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
      result = (unsigned __int8 *)v12;
      v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
        result = (unsigned __int8 *)WTF::fastFree(v8, v9);
      }
      v10 = v11;
      v11 = 0;
      if (v10)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v10 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaSessionHelperProxy::activeVideoRouteDidChange(uint64_t a1, char a2, _QWORD *a3)
{
  unsigned __int8 *result;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _BYTE v17[16];
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  IPC::Encoder *v22;

  result = *(unsigned __int8 **)(a1 + 40);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 48), &v21);
    if (v21)
    {
      v7 = *(_QWORD *)(v21 + 48);
      v8 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
      WebKit::MediaPlaybackTargetContextSerialized::MediaPlaybackTargetContextSerialized((uint64_t)v17, v8);
      v9 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v9 = 1218;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 528) = v9 + 16;
      *(_QWORD *)(v9 + 536) = v9 + 16;
      *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v9 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
      v22 = (IPC::Encoder *)v9;
      *IPC::Encoder::grow((IPC::Encoder *)v9, 1uLL, 1) = a2;
      IPC::ArgumentCoder<WebKit::MediaPlaybackTargetContextSerialized,void>::encode((IPC::Encoder *)v9, (uint64_t)v17);
      IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v22, 0, 0);
      v11 = v22;
      v22 = 0;
      if (v11)
      {
        IPC::Encoder::~Encoder(v11, v10);
        WTF::fastFree(v12, v13);
      }
      v14 = v20;
      v20 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v19;
      v19 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v10);
        else
          *(_DWORD *)v15 -= 2;
      }
      result = (unsigned __int8 *)v18;
      v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v10);
        else
          *(_DWORD *)result -= 2;
      }
      v16 = v21;
      v21 = 0;
      if (v16)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v16 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaSessionHelperProxy::activeAudioRouteSupportsSpatialPlaybackDidChange(uint64_t a1, char a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;

  result = *(unsigned __int8 **)(a1 + 40);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 48), &v11);
    if (v11)
    {
      v5 = *(_QWORD *)(v11 + 48);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 1217;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v12 = (IPC::Encoder *)v6;
      *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a2;
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
      result = (unsigned __int8 *)v12;
      v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
        result = (unsigned __int8 *)WTF::fastFree(v8, v9);
      }
      v10 = v11;
      v11 = 0;
      if (v10)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v10 + 16));
    }
  }
  return result;
}

unsigned __int8 *WebKit::RemoteMediaRecorder::create@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unsigned __int8 **a4@<X8>)
{
  unsigned __int8 *result;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;

  result = (unsigned __int8 *)WebCore::MediaRecorderPrivateWriter::create();
  if (v12)
  {
    v9 = WTF::fastMalloc((WTF *)0xF0);
    v11 = v12;
    v12 = 0;
    result = (unsigned __int8 *)WebKit::RemoteMediaRecorder::RemoteMediaRecorder(v9, a1, a2, (uint64_t *)&v11, a3);
    *a4 = result;
    if (v11)
      result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v11);
    v10 = v12;
    v12 = 0;
    if (v10)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v10);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t WebKit::RemoteMediaRecorder::RemoteMediaRecorder(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, char a5)
{
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  uint64_t v11;
  uint64_t v12;

  v10 = (WTF::ThreadSafeWeakPtrControlBlock *)a2[2];
  *(_QWORD *)a1 = off_1E34BB248;
  *(_QWORD *)(a1 + 8) = 0;
  if (v10)
    v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = a5;
  v12 = a2[24];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v12 + 16));
  *(_QWORD *)(a1 + 160) = v12;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(a1 + 168), (const WTF::MachSendRight *)(a2 + 11));
  *(_BYTE *)(a1 + 172) = 1;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  return a1;
}

void WebKit::RemoteMediaRecorder::~RemoteMediaRecorder(WebKit::RemoteMediaRecorder *this)
{
  WTF *v2;
  WebCore::CARingBuffer *v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;

  *(_QWORD *)this = off_1E34BB248;
  WebCore::MediaRecorderPrivateWriter::close(*((WebCore::MediaRecorderPrivateWriter **)this + 5));
  WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::RemoteMediaRecorder *)((char *)this + 160));
  v2 = (WTF *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v2)
    std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100]((_DWORD)this + 144, v2);
  v3 = (WebCore::CARingBuffer *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((_DWORD)this + 136, v3);
  if (*((_BYTE *)this + 128))
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::RemoteMediaRecorder *)((char *)this + 48));
  v4 = (unsigned __int8 **)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(*v4);
  v5 = (unsigned __int8 *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, v3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteMediaRecorder::~RemoteMediaRecorder(this);
  WTF::fastFree(v1, v2);
}

void WebKit::RemoteMediaRecorder::audioSamplesStorageChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  WTF *v6;
  WTF **v7;
  WebCore::CARingBuffer *v8;
  uint64_t v9;
  WebCore::CARingBuffer *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  _BYTE buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 **)(a1 + 16);
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *(_QWORD *)(a1 + 24), &v22);
  else
    v22 = 0;
  if (!*(_BYTE *)(a1 + 152))
  {
    v21 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::RemoteMediaRecorder::audioSamplesStorageChanged(ConsumerSharedCARingBuffer::Hand"
                           "le &&, const WebCore::CAAudioStreamDescription &)";
      _os_log_fault_impl(&dword_196BCC000, v21, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/webrtc/RemoteMediaRecorder.cpp 71: Invalid message dispatched %s", buf, 0xCu);
    }
    v20 = v22;
    *(_BYTE *)(*(_QWORD *)(v22 + 48) + 98) = 1;
    v22 = 0;
    goto LABEL_17;
  }
  v7 = (WTF **)(a1 + 144);
  v6 = *(WTF **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v6)
    std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100](a1 + 144, v6);
  WebKit::ConsumerSharedCARingBuffer::map((WebCore::CAAudioStreamDescription *)a3, (WebCore::CARingBuffer **)buf);
  v8 = *(WebCore::CARingBuffer **)(a1 + 136);
  v9 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)(a1 + 136) = v9;
  if (v8)
  {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 136, v8);
    v10 = *(WebCore::CARingBuffer **)buf;
    *(_QWORD *)buf = 0;
    if (v10)
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)buf, v10);
    v9 = *(_QWORD *)(a1 + 136);
  }
  if (v9)
  {
    if (*(_BYTE *)(a1 + 128))
    {
      v11 = *(_OWORD *)(a3 + 8);
      v12 = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(a1 + 72) = v12;
      *(_OWORD *)(a1 + 56) = v11;
      v13 = *(_OWORD *)(a3 + 48);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a3 + 64);
      *(_OWORD *)(a1 + 96) = v13;
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a3 + 72);
    }
    else
    {
      *(_QWORD *)(a1 + 48) = MEMORY[0x1E0DD8FD8] + 16;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 8);
      v14 = *(_OWORD *)(a3 + 24);
      v15 = *(_OWORD *)(a3 + 40);
      v16 = *(_OWORD *)(a3 + 56);
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a3 + 72);
      *(_OWORD *)(a1 + 104) = v16;
      *(_OWORD *)(a1 + 88) = v15;
      *(_OWORD *)(a1 + 72) = v14;
      *(_BYTE *)(a1 + 128) = 1;
    }
    v17 = WTF::fastMalloc((WTF *)0x48);
    v18 = MEMORY[0x19AEB018C](v17, a1 + 48);
    v19 = *v7;
    *v7 = (WTF *)v18;
    if (v19)
      std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100](a1 + 144, v19);
  }
  v20 = v22;
  v22 = 0;
  if (v20)
LABEL_17:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v20 + 16));
}

void WebKit::ConsumerSharedCARingBuffer::map(WebCore::CAAudioStreamDescription *a1@<X0>, WebCore::CARingBuffer **a2@<X8>)
{
  WebCore::CARingBuffer *v4;

  v4 = (WebCore::CARingBuffer *)WebCore::CAAudioStreamDescription::bytesPerFrame(a1);
  WebCore::CAAudioStreamDescription::numberOfChannelStreams(a1);
  WebKit::ConsumerSharedCARingBuffer::map(v4, a2);
}

unsigned __int8 *WebKit::RemoteMediaRecorder::audioSamplesAvailable(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  unsigned __int8 *v6;
  unsigned __int8 *result;
  uint64_t v8;
  const char *v9;
  _QWORD v10[3];
  uint8_t buf[4];
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v10[1] = a2;
  v10[2] = a3;
  v6 = *(unsigned __int8 **)(a1 + 16);
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v6, *(_QWORD *)(a1 + 24), v10);
  else
    v10[0] = 0;
  if (*(_QWORD *)(a1 + 136))
  {
    if (*(_QWORD *)(a1 + 144))
    {
      if (*(_BYTE *)(a1 + 128) && (WebCore::WebAudioBufferList::isSupportedDescription() & 1) != 0)
      {
        WebCore::WebAudioBufferList::setSampleCount(*(WebCore::WebAudioBufferList **)(a1 + 144));
        WebCore::CARingBuffer::fetch();
        if (*(_BYTE *)(a1 + 128))
        {
          result = (unsigned __int8 *)WebCore::MediaRecorderPrivateWriter::appendAudioSampleBuffer();
          v8 = v10[0];
          v10[0] = 0;
          if (!v8)
            return result;
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
        }
        __break(1u);
        goto LABEL_19;
      }
      a4 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v12 = "void WebKit::RemoteMediaRecorder::audioSamplesAvailable(MediaTime, uint64_t)";
        v9 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/webrtc/RemoteMediaRecorder.cpp 85: In"
             "valid message dispatched %s";
LABEL_20:
        _os_log_fault_impl(&dword_196BCC000, a4, OS_LOG_TYPE_FAULT, v9, buf, 0xCu);
      }
    }
    else
    {
      a4 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
LABEL_19:
        *(_DWORD *)buf = 136315138;
        v12 = "void WebKit::RemoteMediaRecorder::audioSamplesAvailable(MediaTime, uint64_t)";
        v9 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/webrtc/RemoteMediaRecorder.cpp 84: In"
             "valid message dispatched %s";
        goto LABEL_20;
      }
    }
  }
  else
  {
    a4 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v12 = "void WebKit::RemoteMediaRecorder::audioSamplesAvailable(MediaTime, uint64_t)";
      v9 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/webrtc/RemoteMediaRecorder.cpp 83: Inva"
           "lid message dispatched %s";
      goto LABEL_20;
    }
  }
  v8 = v10[0];
  *(_BYTE *)(*(_QWORD *)(v10[0] + 48) + 98) = 1;
  v10[0] = 0;
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
}

void WebKit::RemoteMediaRecorder::videoFrameAvailable(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::VideoFrame *v7;

  WebKit::SharedVideoFrameReader::read(a1 + 160, a2, &v7);
  v3 = (unsigned int *)v7;
  if (v7)
  {
    WebCore::MediaRecorderPrivateWriter::appendVideoFrame(*(WebCore::MediaRecorderPrivateWriter **)(a1 + 40), v7);
    v7 = 0;
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
}

uint64_t WebKit::RemoteMediaRecorder::fetchData(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = *a2;
  *a2 = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E34BB7D8;
  v3[1] = v2;
  v5 = v3;
  WebCore::MediaRecorderPrivateWriter::fetchData();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

uint64_t WebKit::RemoteMediaRecorder::stopRecording(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  WebCore::MediaRecorderPrivateWriter::stopRecording(*(WebCore::MediaRecorderPrivateWriter **)(a1 + 40));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::RemoteMediaRecorder::pause(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  WebCore::MediaRecorderPrivateWriter::pause(*(WebCore::MediaRecorderPrivateWriter **)(a1 + 40));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::RemoteMediaRecorder::resume(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  WebCore::MediaRecorderPrivateWriter::resume(*(WebCore::MediaRecorderPrivateWriter **)(a1 + 40));
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebCore::InbandTextTrackPrivateClient::type(WebCore::InbandTextTrackPrivateClient *this)
{
  return 0;
}

uint64_t WebCore::VideoTrackPrivateClient::type(WebCore::VideoTrackPrivateClient *this)
{
  return 2;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit23RemoteSourceBufferProxy50sourceBufferPrivateDidReceiveInitializationSegmentEONS3_25SourceBufferPrivateClient21InitializationSegmentEE3__3EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EED1Ev(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  unsigned __int8 *v6;

  *a1 = off_1E34BB280;
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 10), a2);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 8), v3);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 6), v4);
  v6 = (unsigned __int8 *)a1[1];
  a1[1] = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit23RemoteSourceBufferProxy50sourceBufferPrivateDidReceiveInitializationSegmentEONS3_25SourceBufferPrivateClient21InitializationSegmentEE3__3EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EED0Ev(WTF *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  unsigned __int8 *v6;

  *(_QWORD *)a1 = off_1E34BB280;
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 80, a2);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 64, v3);
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 48, v4);
  v6 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  return WTF::fastFree(a1, v5);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit23RemoteSourceBufferProxy50sourceBufferPrivateDidReceiveInitializationSegmentEONS3_25SourceBufferPrivateClient21InitializationSegmentEE3__3EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefIS5_NS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEJSQ_EE4callESQ_@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  unsigned __int8 *v11;
  os_unfair_lock_s *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  unsigned __int8 *result;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  IPC::Encoder *v35;
  __int128 v36;
  __int128 v37;

  v6 = (_QWORD *)a1[3];
  v7 = a1[1];
  if (!v7)
  {
    v8 = 0;
    goto LABEL_15;
  }
  v8 = a1[2];
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEABB3C](v7);
LABEL_7:
  if (*(_QWORD *)(v7 + 24))
    ++*(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_15:
  v11 = (unsigned __int8 *)v6[4];
  if (v11)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v11, v6[5], &v30);
    if (v8)
      goto LABEL_17;
LABEL_29:
    LOBYTE(v32) = 4;
    v35 = 0;
    *(_QWORD *)&v36 = 0;
    *((_QWORD *)&v36 + 1) = "operator()";
    *(_QWORD *)&v37 = 0;
    result = (unsigned __int8 *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v32, (WTF::Logger::LogSiteIdentifier *)&v35, a3);
    goto LABEL_30;
  }
  v30 = 0;
  if (!v8)
    goto LABEL_29;
LABEL_17:
  if (*(_BYTE *)(a2 + 1) || !v30)
    goto LABEL_29;
  v12 = *(os_unfair_lock_s **)(v30 + 48);
  v13 = a1 + 4;
  v14 = v6[6];
  v35 = 0;
  *(_QWORD *)&v36 = 0;
  *((_QWORD *)&v36 + 1) = "sendWithPromisedReply";
  *(_QWORD *)&v37 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v32, 0, (WTF::Logger::LogSiteIdentifier *)&v35);
  v15 = v32;
  if (v32)
  {
    v16 = (unsigned int *)(v32 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    v18 = v32;
  }
  else
  {
    v18 = 0;
  }
  *a3 = v15;
  v32 = 0;
  v36 = v33;
  v37 = v34;
  v19 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v19 = off_1E34BB2C0;
  *(_QWORD *)(v19 + 8) = v18;
  v35 = 0;
  v20 = v37;
  *(_OWORD *)(v19 + 16) = v36;
  *(_OWORD *)(v19 + 32) = v20;
  v31[0] = v19;
  v31[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v35);
  v21 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v21 = 1440;
  *(_QWORD *)(v21 + 8) = v14;
  *(_QWORD *)(v21 + 528) = v21 + 16;
  *(_QWORD *)(v21 + 536) = v21 + 16;
  *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v21 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
  v35 = (IPC::Encoder *)v21;
  IPC::ArgumentCoder<WebKit::InitializationSegmentInfo,void>::encode((IPC::Encoder *)v21, v13);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v12, &v35, v31, 0, 0);
  v23 = v35;
  v35 = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, v22);
    WTF::fastFree(v24, v25);
  }
  v26 = v31[0];
  v31[0] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  result = (unsigned __int8 *)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v32);
LABEL_30:
  v29 = v30;
  v30 = 0;
  if (v29)
    result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v29 + 16));
  if (v8)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v8 + 8), v28);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDidReceiveInitializationSegment,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BB2C0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDidReceiveInitializationSegment,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34BB2C0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDidReceiveInitializationSegment,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34BB2E8;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDidReceiveInitializationSegment,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BB2E8;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDidReceiveInitializationSegment,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34BB2E8;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDidReceiveInitializationSegment,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::call@<X0>(uint64_t a1@<X0>, __int16 *a2@<X8>)
{
  uint64_t *result;
  __int16 v4;
  __int16 v5;
  char v6;

  result = *(uint64_t **)(a1 + 8);
  if (result
    && *result
    && (result = IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>>(result, (uint64_t)&v5), v6))
  {
    v4 = v5;
  }
  else
  {
    v4 = 260;
  }
  *a2 = v4;
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34BB310;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BB858;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34BB310;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BB858;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  uint64_t *v19;
  void *v20;
  _QWORD v21[4];
  unsigned __int8 *v22;

  v6 = *(unsigned __int8 *)(a3 + 1);
  v21[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v21, "]");
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(unsigned __int8 **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(&v22, *(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v21[0] = 0;
    v21[1] = 0;
    v21[2] = "<chained completion promise>";
    v21[3] = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo(v22, (unint64_t)v12, (WTF::Logger::LogSiteIdentifier *)v21);
  }
  v14 = (unsigned int *)v22;
  v22 = 0;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
    }
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    v19 = WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v19, v20);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t *std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    v4 = WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(result);
    return (uint64_t *)WTF::fastFree((WTF *)v4, v5);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo(unsigned __int8 *a1, unint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  unsigned int *v9;
  unsigned int v10;
  _BYTE *v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unsigned __int8 *v23;
  __int128 v24;
  int v25;
  BOOL v26;

  v5 = (uint64_t)a1;
  v6 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  *(_BYTE *)(v5 + 112) = 1;
  v8 = *(unsigned __int8 **)a2;
  if (*(_QWORD *)a2)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v26 = *(_DWORD *)(v5 + 64) == 0;
  v11 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v11)
    v12 = v11[16] >= 4u;
  else
    v12 = 0;
  if (v12)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [17],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [12],BOOL,char [2]>((uint64_t)v11, 4u, a3, " invoking chainTo() [", v5, " chainedPromise:", (uint64_t)v8, " isNothing:", (uint64_t)&v26, "]");
  if (v8)
  {
    v13 = (unsigned int *)(v8 + 8);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v8 + 2);
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  v16 = atomic_load((unsigned __int8 *)(v5 + 113));
  result = (uint64_t)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::setDispatchMode(*(unsigned __int8 **)a2, v16, a3);
  if (*(_DWORD *)(v5 + 64))
  {
    result = (uint64_t)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleChainedPromise(v5, a2);
  }
  else
  {
    v18 = *(unsigned int *)(v5 + 108);
    if ((_DWORD)v18 == *(_DWORD *)(v5 + 104))
    {
      result = WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 96, v18 + 1, a2);
      v19 = *(_QWORD *)(v5 + 96) + 40 * *(unsigned int *)(v5 + 108);
      v20 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v19 = v20;
      v21 = *(_OWORD *)(result + 24);
      *(_OWORD *)(v19 + 8) = *(_OWORD *)(result + 8);
      *(_OWORD *)(v19 + 24) = v21;
    }
    else
    {
      v22 = *(_QWORD *)(v5 + 96) + 40 * v18;
      v23 = *(unsigned __int8 **)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v22 = v23;
      v24 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v22 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v22 + 8) = v24;
    }
    ++*(_DWORD *)(v5 + 108);
  }
  v25 = __ldxr(v6);
  if (v25 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>(uint64_t a1, unsigned int a2, char *a3, const char *a4, WTF::Logger::LogSiteIdentifier *a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9, const char *a10)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  WTF *v27;
  void *v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t i;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  char *v43;
  WTF *v45[2];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint8_t buf[4];
  char *v56;
  int v57;
  _DWORD v58[8];
  _DWORD v59[4];
  uint64_t v60;
  int v61;
  _DWORD v62[8];
  _QWORD v63[3];

  v63[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v53, a3);
  WTF::String::String((WTF::String *)&v52, a4);
  WTF::Logger::LogSiteIdentifier::toString(a5);
  WTF::String::String((WTF::String *)&v50, a6);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a7, &v49);
  v43 = (char *)a8;
  WTF::String::String((WTF::String *)&v48, a8);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v46, a10);
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
  if (v54)
  {
    v18 = v46;
    v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v47;
    v47 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v48;
    v48 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v17);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v50;
    v50 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v17);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v51;
    v51 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v17);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v52;
    v52 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v17);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v53;
    v53 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = *(NSObject **)(a1 + 32);
    v27 = (WTF *)os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v27)
    {
      WTF::String::utf8();
      v29 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      v56 = v29;
      _os_log_impl(&dword_196BCC000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v27 = v45[0];
      v45[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          v27 = (WTF *)WTF::fastFree(v27, v28);
        else
          --*(_DWORD *)v27;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v30 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v31 = *v30;
        if ((v31 & 1) != 0)
          break;
        v32 = __ldaxr(v30);
        if (v32 == v31)
        {
          if (!__stxr(v31 | 1, v30))
          {
            v33 = WTF::Logger::observers(v27);
            v34 = *(unsigned int *)(v33 + 12);
            if ((_DWORD)v34)
            {
              v35 = *(uint64_t **)v33;
              v41 = *(_QWORD *)v33 + 8 * v34;
              do
              {
                v36 = *v35;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)((char *)&v56 + 4), a3);
                v57 = 0;
                WTF::String::String((WTF::String *)v58, a4);
                v58[2] = 0;
                WTF::Logger::LogSiteIdentifier::toString(a5);
                v58[6] = 0;
                WTF::String::String((WTF::String *)v59, a6);
                v59[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a7, &v60);
                v61 = 0;
                WTF::String::String((WTF::String *)v62, v43);
                v62[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v62[6] = 0;
                WTF::String::String((WTF::String *)v63, a10);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v36 + 16))(v36, a1, a2, v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v37);
                for (i = 120; i != -8; i -= 16)
                {
                  v39 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v28);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                }
                ++v35;
              }
              while (v35 != (uint64_t *)v41);
            }
            v40 = __ldxr(v30);
            if (v40 == 1)
            {
              if (!__stlxr(0, v30))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v54;
    v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v28);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [17],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [12],BOOL,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9, const char *a10)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  WTF *v27;
  void *v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t i;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  char *v43;
  WTF *v45[2];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint8_t buf[4];
  char *v56;
  int v57;
  _DWORD v58[4];
  uint64_t v59;
  int v60;
  _DWORD v61[4];
  uint64_t v62;
  int v63;
  _DWORD v64[4];
  uint64_t v65;
  int v66;
  _QWORD v67[3];

  v67[1] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v51);
  WTF::String::String((WTF::String *)&v50, a6);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a7, &v49);
  v43 = (char *)a8;
  WTF::String::String((WTF::String *)&v48, a8);
  WTF::LogArgument<BOOL>::toString<BOOL>(&v47);
  WTF::String::String((WTF::String *)&v46, a10);
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
  if (v54)
  {
    v18 = v46;
    v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v47;
    v47 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v48;
    v48 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v17);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v50;
    v50 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v17);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v51;
    v51 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v17);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v52;
    v52 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v17);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v53;
    v53 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = *(NSObject **)(a1 + 32);
    v27 = (WTF *)os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v27)
    {
      WTF::String::utf8();
      v29 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      v56 = v29;
      _os_log_impl(&dword_196BCC000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v27 = v45[0];
      v45[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          v27 = (WTF *)WTF::fastFree(v27, v28);
        else
          --*(_DWORD *)v27;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v30 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v31 = *v30;
        if ((v31 & 1) != 0)
          break;
        v32 = __ldaxr(v30);
        if (v32 == v31)
        {
          if (!__stxr(v31 | 1, v30))
          {
            v33 = WTF::Logger::observers(v27);
            v34 = *(unsigned int *)(v33 + 12);
            if ((_DWORD)v34)
            {
              v35 = *(uint64_t **)v33;
              v41 = *(_QWORD *)v33 + 8 * v34;
              do
              {
                v36 = *v35;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v57 = 0;
                WTF::String::String((WTF::String *)v58, a4);
                v58[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v59);
                v60 = 0;
                WTF::String::String((WTF::String *)v61, a6);
                v61[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a7, &v62);
                v63 = 0;
                WTF::String::String((WTF::String *)v64, v43);
                v64[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(&v65);
                v66 = 0;
                WTF::String::String((WTF::String *)v67, a10);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v36 + 16))(v36, a1, a2, v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v37);
                for (i = 120; i != -8; i -= 16)
                {
                  v39 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v28);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                }
                ++v35;
              }
              while (v35 != (uint64_t *)v41);
            }
            v40 = __ldxr(v30);
            if (v40 == 1)
            {
              if (!__stlxr(0, v30))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v54;
    v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v28);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x6666667)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = (uint64_t *)v3;
      do
      {
        v10 = *v9;
        *v9 = 0;
        *(_QWORD *)v8 = v10;
        v11 = *(_OWORD *)(v9 + 1);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 3);
        *(_OWORD *)(v8 + 8) = v11;
        v9 = WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v9) + 5;
        v8 += 40;
      }
      while (v9 != (uint64_t *)((char *)v3 + 40 * v4));
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit23RemoteSourceBufferProxy6appendEON3IPC21SharedBufferReferenceEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIvS4_EERKNS_9MediaTimeEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlOSG_E_vJSX_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34BB340;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit23RemoteSourceBufferProxy6appendEON3IPC21SharedBufferReferenceEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIvS4_EERKNS_9MediaTimeEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlOSG_E_vJSX_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34BB340;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZN6WebKit23RemoteSourceBufferProxy6appendEON3IPC21SharedBufferReferenceEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIvS4_EERKNS_9MediaTimeEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlOSG_E_vJSX_EE4callESX_(uint64_t a1, __int16 *a2)
{
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  __int16 v8;

  v3 = *a2;
  v7[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) + 304))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
  v7[1] = v4;
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v8 = v3;
  (*(void (**)(uint64_t, __int16 *, _QWORD *))(*(_QWORD *)v5 + 16))(v5, &v8, v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34BB828;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BB858;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34BB828;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BB858;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  uint64_t result;
  uint64_t *v15;
  void *v16;
  _QWORD v17[4];

  v6 = *(unsigned __int8 *)(a3 + 1);
  v17[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v17, "]");
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = "<chained completion promise>";
    v17[3] = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v12, (WTF::NativePromiseBase *)v17);
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    v15 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v15, v16);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSN_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BB888;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSN_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BB888;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSN_EE4callESN_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvvLj0EE11whenSettledINS_17CompletionHandlerIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvNS_6detail15VoidPlaceholderEEEE_vJSN_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BB368;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvvLj0EE11whenSettledINS_17CompletionHandlerIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvNS_6detail15VoidPlaceholderEEEE_vJSN_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BB368;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvvLj0EE11whenSettledINS_17CompletionHandlerIFvvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvNS_6detail15VoidPlaceholderEEEE_vJSN_EE4callESN_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34BB390;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BB3C0;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34BB390;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BB3C0;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  uint64_t result;
  uint64_t *v15;
  void *v16;
  _QWORD v17[4];

  v6 = *(unsigned __int8 *)(a3 + 1);
  v17[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,void,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v17, "]");
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = "<chained completion promise>";
    v17[3] = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v12, (WTF::NativePromiseBase *)v17);
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    v15 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v15, v16);
  }
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,void,0u>,char [11],void const*,char [2]>(uint64_t a1, unsigned int a2, char *a3, const char *a4, WTF::Logger::LogSiteIdentifier *a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9, const char *a10)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  WTF *v27;
  void *v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t i;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  char *v43;
  WTF *v45[2];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint8_t buf[4];
  char *v56;
  int v57;
  _DWORD v58[8];
  _DWORD v59[4];
  uint64_t v60;
  int v61;
  _DWORD v62[8];
  _QWORD v63[3];

  v63[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v53, a3);
  WTF::String::String((WTF::String *)&v52, a4);
  WTF::Logger::LogSiteIdentifier::toString(a5);
  WTF::String::String((WTF::String *)&v50, a6);
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a7, &v49);
  v43 = (char *)a8;
  WTF::String::String((WTF::String *)&v48, a8);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v46, a10);
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
  if (v54)
  {
    v18 = v46;
    v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v47;
    v47 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v48;
    v48 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v17);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v50;
    v50 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v17);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v51;
    v51 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v17);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v52;
    v52 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v17);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v53;
    v53 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = *(NSObject **)(a1 + 32);
    v27 = (WTF *)os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v27)
    {
      WTF::String::utf8();
      v29 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      v56 = v29;
      _os_log_impl(&dword_196BCC000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v27 = v45[0];
      v45[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          v27 = (WTF *)WTF::fastFree(v27, v28);
        else
          --*(_DWORD *)v27;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v30 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v31 = *v30;
        if ((v31 & 1) != 0)
          break;
        v32 = __ldaxr(v30);
        if (v32 == v31)
        {
          if (!__stxr(v31 | 1, v30))
          {
            v33 = WTF::Logger::observers(v27);
            v34 = *(unsigned int *)(v33 + 12);
            if ((_DWORD)v34)
            {
              v35 = *(uint64_t **)v33;
              v41 = *(_QWORD *)v33 + 8 * v34;
              do
              {
                v36 = *v35;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)((char *)&v56 + 4), a3);
                v57 = 0;
                WTF::String::String((WTF::String *)v58, a4);
                v58[2] = 0;
                WTF::Logger::LogSiteIdentifier::toString(a5);
                v58[6] = 0;
                WTF::String::String((WTF::String *)v59, a6);
                v59[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a7, &v60);
                v61 = 0;
                WTF::String::String((WTF::String *)v62, v43);
                v62[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v62[6] = 0;
                WTF::String::String((WTF::String *)v63, a10);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v36 + 16))(v36, a1, a2, v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v37);
                for (i = 120; i != -8; i -= 16)
                {
                  v39 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v28);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                }
                ++v35;
              }
              while (v35 != (uint64_t *)v41);
            }
            v40 = __ldxr(v30);
            if (v40 == 1)
            {
              if (!__stlxr(0, v30))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v54;
    v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v28);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS3_S5_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSD_E_vJSD_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BB3F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS3_S5_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSD_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BB3F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS3_S5_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSD_E_vJSD_EE4callESD_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34BB418;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BB448;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34BB418;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BB448;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  uint64_t result;
  uint64_t *v15;
  void *v16;
  _QWORD v17[4];

  v6 = *(_DWORD *)(a3 + 16);
  v17[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v17, "]");
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = "<chained completion promise>";
    v17[3] = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v12, (WTF::NativePromiseBase *)v17);
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    v15 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v15, v16);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS7_S9_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSH_E_vJSH_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BB478;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS7_S9_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSH_E_vJSH_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BB478;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS7_S9_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSH_E_vJSH_EE4callESH_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34BB4A0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BB4D0;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34BB4A0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BB4D0;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  WTF *v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t i;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  unsigned __int8 *v37;
  uint64_t *v39;
  int v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  char *v44;
  WTF *v45[2];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint8_t buf[16];
  const char *v56;
  uint64_t v57;
  int v58;
  int v59;
  _DWORD v60[4];
  uint64_t v61;
  int v62;
  _DWORD v63[8];
  _QWORD v64[3];

  v64[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 16);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v44 = (char *)v10;
    WTF::String::String((WTF::String *)&v53, v10);
    WTF::String::String((WTF::String *)&v52, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v50, "[");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v49);
    WTF::String::String((WTF::String *)&v48, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v46, "]");
    result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
    if (!v54)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v46;
    v46 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v47;
    v47 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v48;
    v48 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v49;
    v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v50;
    v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v51;
    v51 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v52;
    v52 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v53;
    v53 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = (WTF *)os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v22 = v45[0];
      v45[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = (WTF *)WTF::fastFree(v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers(v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v43 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], v44);
                LODWORD(v56) = 0;
                WTF::String::String((WTF::String *)&v57, " then() call made from ");
                v58 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v59 = 0;
                WTF::String::String((WTF::String *)v60, "[");
                v60[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v61);
                v62 = 0;
                WTF::String::String((WTF::String *)v63, " callback:");
                v63[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v63[6] = 0;
                WTF::String::String((WTF::String *)v64, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v31 + 16))(v31, v9, 4, v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v32);
                for (i = 120; i != -8; i -= 16)
                {
                  v34 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v43);
            }
            v35 = __ldxr(v25);
            if (v35 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v36 = v54;
    v54 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  v37 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v37))
  {
    goto LABEL_80;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_80:
  v39 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
      goto LABEL_85;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
LABEL_85:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (v39)
  {
    *(_OWORD *)buf = 0uLL;
    v56 = "<chained completion promise>";
    v57 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v39, (WTF::NativePromiseBase *)buf);
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v39)
  {
    v41 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v39);
    return WTF::fastFree((WTF *)v41, v42);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

void IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::~ThreadSafeObjectHeap(_QWORD *a1, void *a2)
{
  uint64_t v2;

  *a1 = &off_1E34BB500;
  v2 = a1[2];
  if (v2)
    WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v2, a2);
  JUMPOUT(0x19AEB936CLL);
}

IPC::Semaphore **std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100](IPC::Semaphore **result, IPC::Semaphore *a2)
{
  IPC::Semaphore *v2;
  WTF *v3;
  void *v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    IPC::Semaphore::destroy(v2);
    WTF::MachSendRight::~MachSendRight(v2);
    return (IPC::Semaphore **)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)(a1 + 56 * i) != -1)
      {
        if (*(_BYTE *)(a1 + 56 * i + 48))
        {
          v5 = a1 + 56 * i;
          v6 = *(unsigned int **)(v5 + 40);
          *(_QWORD *)(v5 + 40) = 0;
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v6 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
            }
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34BB510[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 16) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34BB530[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSH_SI_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E34BB510[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 16) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSH_SI_SK_EEEOSZ_EEEDcSR_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E34BB510[v5])(&v7, v4);
  }
  v4[1].n128_u32[0] = -1;
  result = *a3;
  *v4 = *a3;
  v4[1].n128_u32[0] = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSH_SI_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t *a1)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__assign_alt[abi:sn180100]<2ul,WTF::MachSendRight,WTF::MachSendRight>(*a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENSA_13MachSendRightEN7WebCore7IntSizeEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSH_SI_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E34BB510[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 3;
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__assign_alt[abi:sn180100]<2ul,WTF::MachSendRight,WTF::MachSendRight>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == 2)
    return WTF::MachSendRight::operator=();
  else
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__emplace[abi:sn180100]<2ul,WTF::MachSendRight>(a1);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>::__emplace[abi:sn180100]<2ul,WTF::MachSendRight>(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E34BB510[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  result = WTF::MachSendRight::MachSendRight();
  *(_DWORD *)(a1 + 16) = 2;
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  WebCore::CARingBuffer *v2;

  if (*(_BYTE *)(a1 + 32))
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
    v2 = *(WebCore::CARingBuffer **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1, v2);
  }
  return a1;
}

void std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>(WTF::MachSendRight *a1, uint64_t a2)
{
  uint64_t v2;

  if (*((unsigned __int8 *)a1 + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (*((_BYTE *)a1 + 64))
      WebCore::ShareableBitmapHandle::operator=((uint64_t)a1, a2);
  }
  else if (*((_BYTE *)a1 + 64))
  {
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::reset[abi:sn180100](a1);
  }
  else
  {
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a1, a2);
    *(_BYTE *)(v2 + 64) = 1;
  }
}

void std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::reset[abi:sn180100](WTF::MachSendRight *this)
{
  const void *v2;

  if (*((_BYTE *)this + 64))
  {
    if (*((_BYTE *)this + 32))
    {
      v2 = (const void *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = 0;
      if (v2)
        CFRelease(v2);
    }
    WTF::MachSendRight::~MachSendRight(this);
    *((_BYTE *)this + 64) = 0;
  }
}

void std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100](int a1, WTF *this)
{
  WTF *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v3 = (WTF *)*((_QWORD *)this + 7);
    if (v3)
    {
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v3, this);
    }
    v4 = (const void *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v4)
      CFRelease(v4);
    v5 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v5)
      MEMORY[0x19AEB936C](v5, 0x1080C404ACF7207);
    v6 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v6)
      MEMORY[0x19AEB936C](v6, 0x1080C404ACF7207);
    WTF::fastFree(this, this);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::Ref<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WebCore::MediaDescription&>>(_QWORD *result, unint64_t a2, _QWORD **a3, uint64_t *a4)
{
  unint64_t v4;
  float *v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  size_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  size_t v35;
  _QWORD *v36;
  unint64_t v37;

  v8 = (float *)result;
  v9 = result[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*result + 8 * v4);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2)
            return result;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = result + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v16 = result;
  *result = 0;
  result[1] = a2;
  v17 = *a4;
  result[2] = **a3;
  v18 = (unsigned int *)(v17 + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  result[3] = v17;
  v20 = (float)(unint64_t)(*((_QWORD *)v8 + 3) + 1);
  v21 = v8[8];
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    if (v25 == 1)
    {
      v25 = 2;
    }
    else if ((v25 & (v25 - 1)) != 0)
    {
      result = (_QWORD *)std::__next_prime(v25);
      v25 = (size_t)result;
    }
    v9 = *((_QWORD *)v8 + 1);
    if (v25 > v9)
      goto LABEL_32;
    if (v25 < v9)
    {
      result = (_QWORD *)vcvtps_u32_f32((float)*((unint64_t *)v8 + 3) / v8[8]);
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        result = (_QWORD *)std::__next_prime((size_t)result);
      }
      else
      {
        v33 = 1 << -(char)__clz((unint64_t)result - 1);
        if ((unint64_t)result >= 2)
          result = (_QWORD *)v33;
      }
      if (v25 <= (unint64_t)result)
        v25 = (size_t)result;
      if (v25 >= v9)
      {
        v9 = *((_QWORD *)v8 + 1);
      }
      else
      {
        if (v25)
        {
LABEL_32:
          v27 = WTF::fastMalloc((WTF *)(8 * v25));
          result = *(_QWORD **)v8;
          *(_QWORD *)v8 = v27;
          if (result)
            result = (_QWORD *)WTF::fastFree((WTF *)result, v26);
          v28 = 0;
          *((_QWORD *)v8 + 1) = v25;
          do
            *(_QWORD *)(*(_QWORD *)v8 + 8 * v28++) = 0;
          while (v25 != v28);
          v29 = (_QWORD *)*v14;
          if (*v14)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= v25)
                v30 %= v25;
            }
            else
            {
              v30 &= v25 - 1;
            }
            *(_QWORD *)(*(_QWORD *)v8 + 8 * v30) = v14;
            v34 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v35 = v34[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v35 >= v25)
                    v35 %= v25;
                }
                else
                {
                  v35 &= v25 - 1;
                }
                if (v35 != v30)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v8 + 8 * v35))
                  {
                    *(_QWORD *)(*(_QWORD *)v8 + 8 * v35) = v29;
                    goto LABEL_56;
                  }
                  *v29 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)v8 + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)v8 + 8 * v35) = v34;
                  v34 = v29;
                }
                v35 = v30;
LABEL_56:
                v29 = v34;
                v34 = (_QWORD *)*v34;
                v30 = v35;
              }
              while (v34);
            }
          }
          v9 = v25;
          goto LABEL_60;
        }
        result = *(_QWORD **)v8;
        *(_QWORD *)v8 = 0;
        if (result)
          result = (_QWORD *)WTF::fastFree((WTF *)result, v15);
        v9 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
    }
LABEL_60:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2)
        v4 = a2 % v9;
      else
        v4 = a2;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
  }
  v36 = *(_QWORD **)(*(_QWORD *)v8 + 8 * v4);
  if (v36)
  {
    *v16 = *v36;
LABEL_73:
    *v36 = v16;
    goto LABEL_74;
  }
  *v16 = *((_QWORD *)v8 + 2);
  *((_QWORD *)v8 + 2) = v16;
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v4) = v14;
  if (*v16)
  {
    v37 = *(_QWORD *)(*v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)v8 + 8 * v37);
    goto LABEL_73;
  }
LABEL_74:
  ++*((_QWORD *)v8 + 3);
  return result;
}

WebKit::MediaDescriptionInfo *WebKit::MediaDescriptionInfo::MediaDescriptionInfo(WebKit::MediaDescriptionInfo *this, const WebCore::MediaDescription *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 2);
  if (v4 && (*(_BYTE *)(v4 + 16) & 4) == 0)
    WTF::String::String();
  else
    WTF::String::String();
  *((_BYTE *)this + 8) = (*(uint64_t (**)(const WebCore::MediaDescription *))(*(_QWORD *)a2 + 16))(a2);
  *((_BYTE *)this + 9) = (*(uint64_t (**)(const WebCore::MediaDescription *))(*(_QWORD *)a2 + 24))(a2);
  *((_BYTE *)this + 10) = (*(uint64_t (**)(const WebCore::MediaDescription *))(*(_QWORD *)a2 + 32))(a2);
  return this;
}

unsigned __int8 *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  unsigned __int8 *result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF::NativePromiseBase *v12;
  int v13;
  BOOL v14;
  WTF::NativePromiseBase *v15;
  WTF::Lock *v16;
  char v17;

  v6 = (WTF::Lock *)(a1 + 48);
  v16 = v6;
  v17 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 112) = 1;
  v15 = *a2;
  v14 = *(_DWORD *)(a1 + 64) == 0;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (*result && result[16] >= 4u)
    result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [12],BOOL,char [2]>((uint64_t)result, 4u, a3, " invoking maybeSettle() [", a1, " callback:", (int)&v15, " isNothing:", (uint64_t)&v14, "]");
  if (*(_DWORD *)(a1 + 64))
  {
    result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v16);
  }
  else
  {
    v9 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 80))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 72, v9 + 1, (unint64_t)a2);
      v9 = *(unsigned int *)(a1 + 84);
      v10 = v9 + 1;
      v11 = *(_QWORD *)(a1 + 72);
      v12 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v10 = v9 + 1;
      v11 = *(_QWORD *)(a1 + 72);
      v12 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v11 + 8 * v9) = v12;
    *(_DWORD *)(a1 + 84) = v10;
  }
  if (v17)
  {
    result = (unsigned __int8 *)v16;
    v13 = __ldxr((unsigned __int8 *)v16);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [12],BOOL,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6, int a7, const char *a8, uint64_t a9, const char *a10)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  WTF *v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  char *v42;
  WTF *v44[2];
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint8_t buf[4];
  char *v55;
  int v56;
  _DWORD v57[4];
  uint64_t v58;
  int v59;
  _DWORD v60[8];
  _DWORD v61[4];
  uint64_t v62;
  int v63;
  _QWORD v64[3];

  v64[1] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v51, a4);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v50);
  WTF::String::String((WTF::String *)&v49, a6);
  WTF::LogArgument<void const*>::toString();
  v42 = (char *)a8;
  WTF::String::String((WTF::String *)&v47, a8);
  WTF::LogArgument<BOOL>::toString<BOOL>(&v46);
  WTF::String::String((WTF::String *)&v45, a10);
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, &v53);
  if (v53)
  {
    v17 = v45;
    v45 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v46;
    v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v47;
    v47 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v48;
    v48 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v16);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v16);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v50;
    v50 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v16);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v51;
    v51 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v16);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v52;
    v52 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v16);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = *(NSObject **)(a1 + 32);
    v26 = (WTF *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v26)
    {
      WTF::String::utf8();
      v28 = v44[0] ? (char *)v44[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      v55 = v28;
      _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v26 = v44[0];
      v44[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          v26 = (WTF *)WTF::fastFree(v26, v27);
        else
          --*(_DWORD *)v26;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v30 = *v29;
        if ((v30 & 1) != 0)
          break;
        v31 = __ldaxr(v29);
        if (v31 == v30)
        {
          if (!__stxr(v30 | 1, v29))
          {
            v32 = WTF::Logger::observers(v26);
            v33 = *(unsigned int *)(v32 + 12);
            if ((_DWORD)v33)
            {
              v34 = *(uint64_t **)v32;
              v40 = *(_QWORD *)v32 + 8 * v33;
              do
              {
                v35 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v56 = 0;
                WTF::String::String((WTF::String *)v57, a4);
                v57[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v58);
                v59 = 0;
                WTF::String::String((WTF::String *)v60, a6);
                v60[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v60[6] = 0;
                WTF::String::String((WTF::String *)v61, v42);
                v61[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(&v62);
                v63 = 0;
                WTF::String::String((WTF::String *)v64, a10);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v44, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v35 + 16))(v35, a1, a2, v44);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v36);
                for (i = 120; i != -8; i -= 16)
                {
                  v38 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v40);
            }
            v39 = __ldxr(v29);
            if (v39 == 1)
            {
              if (!__stlxr(0, v29))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v53;
    v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  v3 = result;
  v4 = *(void **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 < 2)
  {
    v6 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 1;
LABEL_6:
    memcpy(v6, v4, 8 * v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  if (!(a2 >> 29))
  {
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDurationChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BB560;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDurationChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34BB560;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDurationChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34BB588;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDurationChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BB588;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDurationChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34BB588;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateDurationChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::call@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(result + 8);
  if (v2 && *v2)
    *a2 = 0;
  else
    *a2 = 260;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateBufferedChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(_QWORD *a1)
{
  *a1 = off_1E34BB5B0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateBufferedChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34BB5B0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateBufferedChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD v6[4];
  _QWORD *v7;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34BB5D8;
  v4[1] = v3;
  v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateBufferedChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BB5D8;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateBufferedChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  void *v2;

  *a1 = (IPC::Decoder *)off_1E34BB5D8;
  std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateBufferedChanged,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::call@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(result + 8);
  if (v2 && *v2)
    *a2 = 0;
  else
    *a2 = 260;
  return result;
}

uint64_t *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand(uint64_t *a1)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::NativePromiseBase *v17;

  v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    v3 = *a1;
    a1[1] = 0;
    v17 = v2;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v3, &v17, (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
    v4 = (unsigned int *)v17;
    v17 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    v8 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  v12 = (unsigned int *)*a1;
  *a1 = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  return a1;
}

unsigned __int8 *WTF::NativePromise<void,void,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  unsigned __int8 *result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF::NativePromiseBase *v12;
  int v13;
  BOOL v14;
  WTF::NativePromiseBase *v15;
  WTF::Lock *v16;
  char v17;

  v6 = (WTF::Lock *)(a1 + 48);
  v16 = v6;
  v17 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 112) = 1;
  v15 = *a2;
  v14 = *(_DWORD *)(a1 + 64) == 0;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (*result && result[16] >= 4u)
    result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,void,0u>,char [11],void const*,char [12],BOOL,char [2]>((uint64_t)result, 4u, a3, " invoking maybeSettle() [", a1, " callback:", (int)&v15, " isNothing:", (uint64_t)&v14, "]");
  if (*(_DWORD *)(a1 + 64))
  {
    result = WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v16);
  }
  else
  {
    v9 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 80))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 72, v9 + 1, (unint64_t)a2);
      v9 = *(unsigned int *)(a1 + 84);
      v10 = v9 + 1;
      v11 = *(_QWORD *)(a1 + 72);
      v12 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v10 = v9 + 1;
      v11 = *(_QWORD *)(a1 + 72);
      v12 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v11 + 8 * v9) = v12;
    *(_DWORD *)(a1 + 84) = v10;
  }
  if (v17)
  {
    result = (unsigned __int8 *)v16;
    v13 = __ldxr((unsigned __int8 *)v16);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,void,0u>,char [11],void const*,char [12],BOOL,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6, int a7, const char *a8, uint64_t a9, const char *a10)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  WTF *v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  char *v42;
  WTF *v44[2];
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint8_t buf[4];
  char *v55;
  int v56;
  _DWORD v57[4];
  uint64_t v58;
  int v59;
  _DWORD v60[8];
  _DWORD v61[4];
  uint64_t v62;
  int v63;
  _QWORD v64[3];

  v64[1] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v51, a4);
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, &v50);
  WTF::String::String((WTF::String *)&v49, a6);
  WTF::LogArgument<void const*>::toString();
  v42 = (char *)a8;
  WTF::String::String((WTF::String *)&v47, a8);
  WTF::LogArgument<BOOL>::toString<BOOL>(&v46);
  WTF::String::String((WTF::String *)&v45, a10);
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, &v53);
  if (v53)
  {
    v17 = v45;
    v45 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v46;
    v46 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v47;
    v47 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v48;
    v48 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v16);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v16);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v50;
    v50 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v16);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v51;
    v51 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v16);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v52;
    v52 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v16);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = *(NSObject **)(a1 + 32);
    v26 = (WTF *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v26)
    {
      WTF::String::utf8();
      v28 = v44[0] ? (char *)v44[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      v55 = v28;
      _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v26 = v44[0];
      v44[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          v26 = (WTF *)WTF::fastFree(v26, v27);
        else
          --*(_DWORD *)v26;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v30 = *v29;
        if ((v30 & 1) != 0)
          break;
        v31 = __ldaxr(v29);
        if (v31 == v30)
        {
          if (!__stxr(v30 | 1, v29))
          {
            v32 = WTF::Logger::observers(v26);
            v33 = *(unsigned int *)(v32 + 12);
            if ((_DWORD)v33)
            {
              v34 = *(uint64_t **)v32;
              v40 = *(_QWORD *)v32 + 8 * v33;
              do
              {
                v35 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v56 = 0;
                WTF::String::String((WTF::String *)v57, a4);
                v57[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, &v58);
                v59 = 0;
                WTF::String::String((WTF::String *)v60, a6);
                v60[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v60[6] = 0;
                WTF::String::String((WTF::String *)v61, v42);
                v61[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(&v62);
                v63 = 0;
                WTF::String::String((WTF::String *)v64, a10);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v44, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v35 + 16))(v35, a1, a2, v44);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v36);
                for (i = 120; i != -8; i -= 16)
                {
                  v38 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v40);
            }
            v39 = __ldxr(v29);
            if (v39 == 1)
            {
              if (!__stlxr(0, v29))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v53;
    v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  v3 = result;
  v4 = *(void **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 < 2)
  {
    v6 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 1;
LABEL_6:
    memcpy(v6, v4, 8 * v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  if (!(a2 >> 29))
  {
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand(uint64_t *a1)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::NativePromiseBase *v17;

  v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    v3 = *a1;
    a1[1] = 0;
    v17 = v2;
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::maybeSettle(v3, &v17, (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
    v4 = (unsigned int *)v17;
    v17 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    v8 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  v12 = (unsigned int *)*a1;
  *a1 = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  return a1;
}

unsigned __int8 *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  unsigned __int8 *result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF::NativePromiseBase *v12;
  int v13;
  BOOL v14;
  WTF::NativePromiseBase *v15;
  WTF::Lock *v16;
  char v17;

  v6 = (WTF::Lock *)(a1 + 48);
  v16 = v6;
  v17 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 128) = 1;
  v15 = *a2;
  v14 = *(_DWORD *)(a1 + 80) == 0;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  if (*result && result[16] >= 4u)
    result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [12],BOOL,char [2]>((uint64_t)result, 4u, a3, " invoking maybeSettle() [", a1, " callback:", (int)&v15, " isNothing:", (uint64_t)&v14, "]");
  if (*(_DWORD *)(a1 + 80))
  {
    result = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(*a2, (unsigned __int8 *)a1, (unsigned __int8 **)&v16);
  }
  else
  {
    v9 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 96))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v9 + 1, (unint64_t)a2);
      v9 = *(unsigned int *)(a1 + 100);
      v10 = v9 + 1;
      v11 = *(_QWORD *)(a1 + 88);
      v12 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v10 = v9 + 1;
      v11 = *(_QWORD *)(a1 + 88);
      v12 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v11 + 8 * v9) = v12;
    *(_DWORD *)(a1 + 100) = v10;
  }
  if (v17)
  {
    result = (unsigned __int8 *)v16;
    v13 = __ldxr((unsigned __int8 *)v16);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand(uint64_t *a1)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  WTF::NativePromiseBase *v4;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  WTF *v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  uint64_t i;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::NativePromiseBase **v35;
  int v36;
  uint64_t v37;
  WTF::NativePromiseBase *v38;
  WTF::Lock *v39;
  int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  WTF::NativePromiseBase *v54;
  WTF::Lock *v55;
  char v56;
  WTF *v57[2];
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint8_t buf[4];
  char *v68;
  int v69;
  _DWORD v70[4];
  uint64_t v71;
  int v72;
  _DWORD v73[8];
  _DWORD v74[4];
  uint64_t v75;
  int v76;
  _QWORD v77[3];

  v77[1] = *MEMORY[0x1E0C80C00];
  v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    v3 = *a1;
    a1[1] = 0;
    v4 = (WTF::NativePromiseBase *)(v3 + 48);
    v54 = v2;
    v55 = (WTF::Lock *)(v3 + 48);
    v56 = 1;
    if (__ldaxr((unsigned __int8 *)(v3 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
LABEL_7:
      *(_BYTE *)(v3 + 128) = 1;
      v6 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
      if (*v6)
      {
        v7 = v6;
        if (v6[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 2));
          WTF::String::String((WTF::String *)&v64, " invoking maybeSettle() [");
          WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v3, &v63);
          WTF::String::String((WTF::String *)&v62, " callback:");
          WTF::LogArgument<void const*>::toString();
          WTF::String::String((WTF::String *)&v60, " isNothing:");
          WTF::LogArgument<BOOL>::toString<BOOL>(&v59);
          WTF::String::String((WTF::String *)&v58, "]");
          result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v65, (uint64_t *)&v64, (uint64_t *)&v63, (uint64_t *)&v62, (uint64_t *)&v61, (uint64_t *)&v60, (uint64_t *)&v59, (uint64_t *)&v58, &v66);
          if (!v66)
          {
            __break(0xC471u);
            return result;
          }
          v10 = v58;
          v58 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v9);
            else
              *(_DWORD *)v10 -= 2;
          }
          v11 = v59;
          v59 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v9);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v60;
          v60 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v9);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = v61;
          v61 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v9);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = v62;
          v62 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v9);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = v63;
          v63 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v9);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = v64;
          v64 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v9);
            else
              *(_DWORD *)v16 -= 2;
          }
          v17 = v65;
          v65 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v9);
            else
              *(_DWORD *)v17 -= 2;
          }
          v18 = *((_QWORD *)v7 + 4);
          v19 = (WTF *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v19)
          {
            WTF::String::utf8();
            v21 = v57[0] ? (char *)v57[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            v68 = v21;
            _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v19 = v57[0];
            v57[0] = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 1)
                v19 = (WTF *)WTF::fastFree(v19, v20);
              else
                --*(_DWORD *)v19;
            }
          }
          if (*v7 && v7[16] >= 4u)
          {
            v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v23 = *v22;
              if ((v23 & 1) != 0)
                break;
              v24 = __ldaxr(v22);
              if (v24 == v23)
              {
                if (!__stxr(v23 | 1, v22))
                {
                  v25 = WTF::Logger::observers(v19);
                  v26 = *(unsigned int *)(v25 + 12);
                  if ((_DWORD)v26)
                  {
                    v27 = *(uint64_t **)v25;
                    v53 = *(_QWORD *)v25 + 8 * v26;
                    do
                    {
                      v28 = *v27;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 2));
                      v69 = 0;
                      WTF::String::String((WTF::String *)v70, " invoking maybeSettle() [");
                      v70[2] = 0;
                      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v3, &v71);
                      v72 = 0;
                      WTF::String::String((WTF::String *)v73, " callback:");
                      v73[2] = 0;
                      WTF::LogArgument<void const*>::toString();
                      v73[6] = 0;
                      WTF::String::String((WTF::String *)v74, " isNothing:");
                      v74[2] = 0;
                      WTF::LogArgument<BOOL>::toString<BOOL>(&v75);
                      v76 = 0;
                      WTF::String::String((WTF::String *)v77, "]");
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v57, (uint64_t)buf, 8uLL);
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v28 + 16))(v28, v7, 4, v57);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v57, v29);
                      for (i = 120; i != -8; i -= 16)
                      {
                        v31 = *(WTF::StringImpl **)&buf[i];
                        *(_QWORD *)&buf[i] = 0;
                        if (v31)
                        {
                          if (*(_DWORD *)v31 == 2)
                            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
                          else
                            *(_DWORD *)v31 -= 2;
                        }
                      }
                      ++v27;
                    }
                    while (v27 != (uint64_t *)v53);
                  }
                  v32 = __ldxr(v22);
                  if (v32 == 1)
                  {
                    if (!__stlxr(0, v22))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v33 = v66;
          v66 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v20);
            else
              *(_DWORD *)v33 -= 2;
          }
        }
      }
      if (*(_DWORD *)(v3 + 80))
      {
        WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v54, v3, (unsigned __int8 **)&v55);
      }
      else
      {
        v34 = *(unsigned int *)(v3 + 100);
        if ((_DWORD)v34 == *(_DWORD *)(v3 + 96))
        {
          v35 = (WTF::NativePromiseBase **)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 88, v34 + 1, (unint64_t)&v54);
          v34 = *(unsigned int *)(v3 + 100);
          v36 = v34 + 1;
          v37 = *(_QWORD *)(v3 + 88);
          v38 = *v35;
          *v35 = 0;
        }
        else
        {
          v36 = v34 + 1;
          v37 = *(_QWORD *)(v3 + 88);
          v38 = v54;
          v54 = 0;
        }
        *(_QWORD *)(v37 + 8 * v34) = v38;
        *(_DWORD *)(v3 + 100) = v36;
      }
      if (!v56)
        goto LABEL_88;
      v39 = v55;
      v40 = __ldxr((unsigned __int8 *)v55);
      if (v40 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v55))
        {
LABEL_88:
          v41 = (unsigned int *)v54;
          v54 = 0;
          if (v41)
          {
            v42 = v41 + 2;
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              atomic_store(1u, v41 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
            }
          }
          v45 = (unsigned int *)a1[1];
          a1[1] = 0;
          if (v45)
          {
            v46 = v45 + 2;
            do
            {
              v47 = __ldaxr(v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v46));
            if (!v48)
            {
              atomic_store(1u, v45 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
            }
          }
          goto LABEL_98;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v39);
      goto LABEL_88;
    }
    v4 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C]();
    goto LABEL_7;
  }
  a1[1] = 0;
LABEL_98:
  v49 = (unsigned int *)*a1;
  *a1 = 0;
  if (v49)
  {
    v50 = v49 + 2;
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v49 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
    }
  }
  return (uint64_t)a1;
}

unsigned __int8 *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[2];
  int v21;
  char v22;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 129));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E34BB800;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v20[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v20);
      result = (unsigned __int8 *)v20[0];
      v20[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v20[0] = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v20, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_23:
  if (WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a2))
  {
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResultRunnable(a2, &v19);
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v19 + 16))(v20);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v20);
    if (v21 != -1)
      ((void (*)(char *, _QWORD *))off_1E34BB5F0[v21])(&v22, v20);
    v21 = -1;
    v17 = v19;
    v19 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::takeResult(a2, (uint64_t)v20);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v20);
    if (v21 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E34BB5F0[v21])(&v19, v20);
  }
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEABB3C]();
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::takeResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t result;
  int v7;
  uint64_t v8;

  v4 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  if (*(_DWORD *)(a1 + 80) != 1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(v8);
  }
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>(a2, a1 + 56);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34BB5F0[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34BB600[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSD_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34BB800;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34BB800;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  unsigned __int8 *v8;
  _QWORD v9[2];
  int v10;
  char v11;

  v1 = *a1;
  v2 = a1[2];
  if (*(_BYTE *)(*a1 + 56))
  {
    v9[0] = *a1;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result)
      v4 = result[16] >= 4u;
    else
      v4 = 0;
    if (v4)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v9, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  }
  else
  {
    hasRunnable = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::hasRunnable(a1[2]);
    v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::takeResultRunnable(a1[2], &v8);
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v8 + 16))(v9);
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v9);
      if (v10 != -1)
        ((void (*)(char *, _QWORD *))off_1E34BB5F0[v10])(&v11, v9);
      v10 = -1;
      result = v8;
      v8 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::takeResult(a1[2], (uint64_t)v9);
      result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v9);
      if (v10 != -1)
        return (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, _QWORD *))off_1E34BB5F0[v10])(&v8, v9);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateShuttingDown,WebKit::RemoteSourceBufferProxy::shutdown(void)::$_0>(WebKit::RemoteSourceBufferProxy::shutdown(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34BB620;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 16));
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateShuttingDown,WebKit::RemoteSourceBufferProxy::shutdown(void)::$_0>(WebKit::RemoteSourceBufferProxy::shutdown(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34BB620;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 16));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::SourceBufferPrivateRemoteMessageReceiver::SourceBufferPrivateShuttingDown,WebKit::RemoteSourceBufferProxy::shutdown(void)::$_0>(WebKit::RemoteSourceBufferProxy::shutdown(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WebKit::RemoteSourceBufferProxy::disconnect(*(WebKit::RemoteSourceBufferProxy **)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteTextTrackProxy::RemoteTextTrackProxy(WebKit::GPUConnectionToWebProcess &,WebCore::InbandTextTrackPrivate &,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WTF::Function<void ()(void)> &&>::call()
{
  return WTF::ensureOnMainThread();
}

uint64_t IPC::Connection::send<Messages::MediaPlayerPrivateRemote::AddRemoteTextTrack>(uint64_t a1, _QWORD **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 139;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::TextTrackPrivateRemoteConfiguration,void>::encode((IPC::Encoder *)v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

void IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::MediaTime const&,WTF::MediaTime const&,WebCore::SerializedPlatformDataCueValue const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WTF::MediaTime const&,WTF::MediaTime const&,WebCore::SerializedPlatformDataCueValue const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, (_QWORD *)a2[1]);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, (_QWORD *)a2[2]);
  IPC::ArgumentCoder<std::optional<WebCore::SerializedPlatformDataCueValue::Data>,void>::encode<IPC::Encoder,std::optional<WebCore::SerializedPlatformDataCueValue::Data> const&>(a1, a2[3]);
}

uint64_t WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::ensure<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::add(IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>)::{lambda(void)#1}>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  char v35;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  LODWORD(v32) = -1640531527;
  WORD2(v32) = 0;
  BYTE6(v32) = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v32, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v32);
  v11 = result & v9;
  v12 = v8 + 56 * (result & v9);
  v13 = *(_QWORD *)v12;
  v14 = *(_QWORD *)(v12 + 8);
  if (*(_OWORD *)v12 != 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (*a2 == v13 && a2[1] == v14)
      {
        v28 = *a1;
        if (*a1)
          v29 = *(_DWORD *)(v28 - 4);
        else
          v29 = 0;
        v31 = 0;
        v30 = v28 + 56 * v29;
        goto LABEL_36;
      }
      if (v13 == -1)
        v15 = v12;
      v11 = (v11 + v16) & v9;
      v12 = v8 + 56 * v11;
      v13 = *(_QWORD *)v12;
      v14 = *(_QWORD *)(v12 + 8);
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *(_QWORD *)(v15 + 48) = 0;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)v15 = 0u;
      --*(_DWORD *)(*a1 - 16);
      v12 = v15;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a2;
  v17 = *a3;
  *(_QWORD *)&v32 = 0;
  BYTE8(v32) = 0;
  v33 = 0;
  v18 = *v17;
  *v17 = 0;
  v34 = v18;
  v35 = 1;
  *(_BYTE *)(v12 + 32) = 0;
  *(_OWORD *)(v12 + 16) = v32;
  result = (uint64_t)std::__optional_storage_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>>((unsigned int *)(v12 + 40), &v34);
  if (v35)
  {
    result = v34;
    v34 = 0;
    if (result)
    {
      v19 = (unsigned int *)(result + 8);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, (unsigned int *)(result + 8));
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_27:
      result = (uint64_t)WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, (_OWORD *)v12);
      v12 = result;
      v24 = *a1;
      if (*a1)
        LODWORD(v27) = *(_DWORD *)(v24 - 4);
      else
        LODWORD(v27) = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_27;
  }
  v30 = v24 + 56 * v27;
  v31 = 1;
LABEL_36:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v31;
  return result;
}

uint64_t std::optional<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::operator=[abi:sn180100]<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,void>(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *a2;
  *a2 = 0;
  if (v3)
  {
    v5 = *(unsigned int **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
  }
  else
  {
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

_OWORD *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

unsigned int *std::__optional_storage_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>>(unsigned int *result, uint64_t *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = result;
  if (*((unsigned __int8 *)result + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*((_BYTE *)result + 8))
    {
      v3 = *a2;
      *a2 = 0;
      result = *(unsigned int **)result;
      *(_QWORD *)v2 = v3;
      if (result)
      {
        v4 = result + 2;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, result + 2);
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
    }
  }
  else if (*((_BYTE *)result + 8))
  {
    result = *(unsigned int **)result;
    *(_QWORD *)v2 = 0;
    if (result)
    {
      v7 = result + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, result + 2);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
    *((_BYTE *)v2 + 8) = 0;
  }
  else
  {
    v10 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v10;
    *((_BYTE *)result + 8) = 1;
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer(IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> &&,BOOL)::$_0,void,IPC::Semaphore &>::call(uint64_t a1, IPC::Semaphore *a2)
{
  uint64_t v2;
  IPC::Semaphore *v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v4 = a2;
  return IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::SetSharedVideoFrameSemaphore>(v2, &v4);
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::SetSharedVideoFrameSemaphore>(uint64_t a1, IPC::Semaphore **a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1392;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeap::getVideoFrameBuffer(IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> &&,BOOL)::$_1,void,WebCore::SharedMemoryHandle &&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v4 = a2;
  return IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::SetSharedVideoFrameMemory>(v2, &v4);
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::SetSharedVideoFrameMemory>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1391;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>,void>::encode<IPC::Encoder,std::optional<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  int v6;

  v4 = *(unsigned __int8 *)(a2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (!*(_BYTE *)(a2 + 24))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      JUMPOUT(0x19708CC50);
    }
    v6 = *(_DWORD *)(a2 + 16);
    *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::MachSendRight,WebCore::IntSize>>((char *)a1, a2, v6);
  }
  else
  {
    *result = 0;
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeap::convertFrameBuffer(WebKit::SharedVideoFrame &&,WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)> &&)::$_1,void,IPC::Semaphore &>::call(uint64_t a1, IPC::Semaphore *a2)
{
  uint64_t v2;
  IPC::Semaphore *v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v4 = a2;
  return IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::SetSharedVideoFrameSemaphore>(v2, &v4);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeap::convertFrameBuffer(WebKit::SharedVideoFrame &&,WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)> &&)::$_2,void,WTF::CompletionHandler::SharedMemoryHandle &&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v4 = a2;
  return IPC::Connection::send<Messages::RemoteVideoFrameObjectHeapProxyProcessor::SetSharedVideoFrameMemory>(v2, &v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoTrackProxy::RemoteVideoTrackProxy(WebKit::GPUConnectionToWebProcess &,WebCore::VideoTrackPrivate &,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WTF::Function<void ()(void)> &&>::call()
{
  return WTF::ensureOnMainThread();
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_0,std::unique_ptr<WebCore::CARingBuffer,WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_0::default_delete<std::unique_ptr>>,WebCore::CAAudioStreamDescription const&,unsigned long>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34BB738;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_0,std::unique_ptr<WebCore::CARingBuffer,WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_0::default_delete<std::unique_ptr>>,WebCore::CAAudioStreamDescription const&,unsigned long>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BB738;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 4;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_0,std::unique_ptr<WebCore::CARingBuffer,WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_0::default_delete<std::unique_ptr>>,WebCore::CAAudioStreamDescription const&,unsigned long>::call@<X0>(WebKit::ProducerSharedCARingBuffer *this@<X1>, WebCore::CAAudioStreamDescription *a2@<X2>, uint64_t a3@<X0>, WebCore::CARingBuffer **a4@<X8>)
{
  uint64_t v6;
  WebCore::CARingBuffer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  WebCore::CARingBuffer *v16;
  WebCore::CARingBuffer *v17;
  uint64_t result;
  WebCore::CARingBuffer *v19;
  _BYTE v20[24];
  _QWORD v21[2];
  __int128 v22;
  char v23;
  IPC::Encoder *v24;

  v6 = *(_QWORD *)(a3 + 8);
  WebKit::ProducerSharedCARingBuffer::allocate(this, a2, (uint64_t)v21);
  if (v23)
  {
    v7 = (WebCore::CARingBuffer *)v21[0];
    v21[0] = 0;
    v19 = v7;
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)&v20[8] = v22;
    v8 = *(_QWORD *)(v6 + 32);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 704;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v24 = (IPC::Encoder *)v9;
    v10 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v10;
    IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode((IPC::Encoder *)v9, (unint64_t)v20);
    v11 = (_QWORD *)WebCore::CAAudioStreamDescription::streamDescription(this);
    IPC::ArgumentCoder<AudioStreamBasicDescription,void>::encode((IPC::Encoder *)v9, v11);
    IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v24, 0, 0);
    v13 = v24;
    v24 = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v12);
      WTF::fastFree(v14, v15);
    }
    v16 = v19;
    v19 = 0;
    *a4 = v16;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v20);
    v17 = v19;
    v19 = 0;
    if (v17)
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v19, v17);
    return std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21);
  }
  else
  {
    result = 61;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_1,void,unsigned long long,unsigned long long>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E34BB760;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 4;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_1,void,unsigned long long,unsigned long long>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BB760;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 4;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 4);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderProxy::create(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,WebCore::AudioSourceProviderAVFObjC &)::$_1,void,unsigned long long,unsigned long long>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 32);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 703;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v8;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a3;
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteImageDecoderAVFProxy::createDecoder(IPC::SharedBufferReference const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &&)> &&)::$_0,void,WebCore::EncodedDataStatus>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34BB788;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteImageDecoderAVFProxy::createDecoder(IPC::SharedBufferReference const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &&)> &&)::$_0,void,WebCore::EncodedDataStatus>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BB788;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteImageDecoderAVFProxy::createDecoder(IPC::SharedBufferReference const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &&)> &&)::$_0,void,WebCore::EncodedDataStatus>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  WebCore::ImageDecoderAVFObjC *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(uint64_t **)(v1 + 8);
    if (v2)
    {
      v16 = *(_QWORD *)(result + 16);
      result = v2[2];
      if (result)
      {
        result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)result, v2[3], &v15);
        if (v15)
        {
          v3 = v2 + 4;
          result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3, &v16);
          if ((_DWORD)result)
          {
            v4 = (WebCore::ImageDecoderAVFObjC *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3, &v16);
            v5 = *(_QWORD *)(v15 + 48);
            v6 = WebCore::ImageDecoderAVFObjC::frameCount(v4);
            v14 = WebCore::ImageDecoderAVFObjC::size(v4);
            v7 = *((_QWORD *)v4 + 5) != 0;
            v8 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v8 = 1101;
            *(_QWORD *)(v8 + 8) = 0;
            *(_QWORD *)(v8 + 528) = v8 + 16;
            *(_QWORD *)(v8 + 536) = v8 + 16;
            *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v8 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
            v17 = (IPC::Encoder *)v8;
            v9 = v16;
            *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
            *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v6;
            IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v8, &v14);
            *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = v7;
            IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v17, 0, 0);
            result = (uint64_t)v17;
            v17 = 0;
            if (result)
            {
              IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
              result = WTF::fastFree(v11, v12);
            }
          }
          v13 = v15;
          v15 = 0;
          if (v13)
            return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v13 + 16));
        }
      }
    }
  }
  return result;
}

BOOL WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BOOL8 result;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 == *a2)
    return 1;
  v10 = 1;
  do
  {
    result = v8 != 0;
    if (!v8)
      break;
    v7 = (v7 + v10) & v3;
    v8 = *(_QWORD *)(v2 + 16 * v7);
    ++v10;
  }
  while (v8 != *a2);
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)*a1;
  if (*a1)
    v3 += 2 * *((unsigned int *)v3 - 1);
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = (_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteBarcodeDetector,WTF::RawPtrTraits<WebKit::RemoteBarcodeDetector>,WTF::DefaultRefDerefTraits<WebKit::RemoteBarcodeDetector>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return a1;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E34BB7B0;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaRecorderPrivateWriter,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  WTF *v5;
  void *v6;
  BOOL v7;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEB2FAC]();
    result = WTF::fastFree(v5, v6);
  }
  if (*(_BYTE *)(a1 + 24))
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
    return WTF::fastFree(v4, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteMediaRecorder::fetchData(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,double)> &&)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,double>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BB7D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteMediaRecorder::fetchData(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,double)> &&)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,double>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BB7D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteMediaRecorder::fetchData(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>,double)> &&)::$_0,void,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,double>::call(uint64_t a1, WebCore::FragmentedSharedBuffer **a2, double a3)
{
  WebCore::FragmentedSharedBuffer *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *result;
  void *v10;
  WebCore::SharedBuffer *v11;

  v5 = *a2;
  if (*a2)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous(*a2);
    v6 = WebCore::SharedBuffer::data(v11);
    v7 = *((_QWORD *)v11 + 6);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v8 + 16))(v8, v6, v7, a3);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v5)
  {
    result = (unsigned int *)v11;
    if (v11)
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v11, v10);
  }
  return result;
}

void sub_19708D8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_19708D988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  CFTypeRef v34;

  v34 = cf;
  cf = 0;
  if (v34)
    CFRelease(v34);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_19708DABC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19708DC70(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WTF::StringImpl *v10;

  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19708DE00(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  uint64_t v15;
  WTF::StringImpl *v17;
  unsigned int *v18;
  const void *v19;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  v17 = *(WTF::StringImpl **)(v15 - 56);
  *(_QWORD *)(v15 - 56) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(unsigned int **)(v15 - 40);
  *(_QWORD *)(v15 - 40) = 0;
  if (v18)
    WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v18, a2);
  v19 = *(const void **)(v15 - 48);
  *(_QWORD *)(v15 - 48) = 0;
  if (v19)
    CFRelease(v19);
  _Unwind_Resume(exception_object);
}

void sub_19708DFF0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19708E190(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19708E40C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19708E548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19708EA8C(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19708EF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19708F1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  const void *v12;
  WTF::StringImpl *v14;

  _Block_release(v12);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v14);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_19708F294(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_19708F354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_19708F4C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_19708F5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  WTF::StringImpl *v12;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_19708F79C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19708FA4C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19708FBAC(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_19708FD8C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_19708FEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  const void *v10;

  _Block_release(v10);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

uint64_t createNSError@<X0>(WKErrorCode a1@<X0>, const __CFString *a2@<X1>, _QWORD *a3@<X8>)
{
  const __CFString *v6;
  void *v7;
  const __CFString **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  const __CFString *v14;
  _QWORD v15[2];
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v15[0] = *MEMORY[0x1E0CB2D50];
    v6 = localizedDescriptionForErrorCode(a1, a2);
    v15[1] = *MEMORY[0x1E0CB3388];
    v16[0] = v6;
    v16[1] = a2;
    v7 = (void *)MEMORY[0x1E0C99D80];
    v8 = (const __CFString **)v16;
    v9 = v15;
    v10 = 2;
  }
  else
  {
    v13 = *MEMORY[0x1E0CB2D50];
    v14 = localizedDescriptionForErrorCode(a1, 0);
    v7 = (void *)MEMORY[0x1E0C99D80];
    v8 = &v14;
    v9 = &v13;
    v10 = 1;
  }
  v11 = objc_msgSend(v7, "dictionaryWithObjects:forKeys:count:", v8, v9, v10);
  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("WKErrorDomain"), a1, v11);
  *a3 = result;
  return result;
}

void didStartProvisionalNavigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 32));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browsingContextControllerDidStartProvisionalLoad:", a4);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197090288(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didReceiveServerRedirectForProvisionalNavigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 32));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browsingContextControllerDidReceiveServerRedirectForProvisionalLoad:", a4);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1970902F8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didFailProvisionalNavigation(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a5 + 32));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browsingContextController:didFailProvisionalLoadWithError:", a5, *(_QWORD *)(objc_msgSend(a3, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197090384(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didCommitNavigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 32));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browsingContextControllerDidCommitLoad:", a4);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1970903F4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didFinishNavigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 32));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browsingContextControllerDidFinishLoad:", a4);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197090464(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didFailNavigation(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a5 + 32));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browsingContextController:didFailLoadWithError:", a5, *(_QWORD *)(objc_msgSend(a3, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1970904F0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t canAuthenticateAgainstProtectionSpace(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;
  uint64_t v6;
  uint64_t v7;

  WeakRetained = objc_loadWeakRetained((id *)(a3 + 32));
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    v7 = 0;
    if (!WeakRetained)
      return v7;
LABEL_7:
    CFRelease(WeakRetained);
    return v7;
  }
  if (a2)
    v6 = objc_msgSend(a2, "_apiObject");
  else
    v6 = 0;
  v7 = objc_msgSend(WeakRetained, "browsingContextController:canAuthenticateAgainstProtectionSpace:", a3, WebCore::ProtectionSpace::nsSpace((WebCore::ProtectionSpace *)(v6 + 16)));
  if (WeakRetained)
    goto LABEL_7;
  return v7;
}

void sub_197090598(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didReceiveAuthenticationChallenge(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a3 + 32));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browsingContextController:didReceiveAuthenticationChallenge:", a3, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197090624(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void processDidCrash(const OpaqueWKPage *a1, id *a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(a2 + 4);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "browsingContextControllerWebProcessDidCrash:", a2);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197090694(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void setUpPagePolicyClient(WKBrowsingContextController *,WebKit::WebPageProxy &)::$_0::__invoke(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10, uint64_t a11)
{
  id WeakRetained;
  const void *v19;
  const void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  double PolicyDecisionBlock;
  const void *v26;
  void *v27;
  const void *v28;
  _QWORD v29[6];
  _QWORD v30[7];

  v30[6] = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a11 + 40));
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (a9)
      v24 = objc_msgSend(a9, "_apiObject");
    else
      v24 = 0;
    WebKit::WebFramePolicyListenerProxy::use(v24, 0, 0);
    goto LABEL_22;
  }
  v27 = a9;
  v29[0] = CFSTR("WKActionIsMainFrameKey");
  v30[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", WKFrameIsMainFrame(a2));
  v29[1] = CFSTR("WKActionNavigationTypeKey");
  v30[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
  v29[2] = CFSTR("WKActionModifierFlagsKey");
  v30[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a4);
  v29[3] = CFSTR("WKActionMouseButtonKey");
  v30[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a5);
  v29[4] = CFSTR("WKActionOriginalURLRequestKey");
  if (a7)
    objc_msgSend(a7, "_apiObject", a9);
  v19 = (const void *)objc_msgSend((id)WebCore::ResourceRequest::nsURLRequest(), "copy");
  v30[4] = v19;
  v29[5] = CFSTR("WKActionURLRequestKey");
  if (a8)
    objc_msgSend(a8, "_apiObject");
  v20 = (const void *)objc_msgSend((id)WebCore::ResourceRequest::nsURLRequest(), "copy");
  v30[5] = v20;
  v21 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, v29, 6);
  v22 = v21;
  if (v21)
    CFRetain(v21);
  if (!v20)
  {
    if (!v19)
      goto LABEL_10;
LABEL_18:
    CFRelease(v19);
    if (a6)
      goto LABEL_11;
    goto LABEL_19;
  }
  CFRelease(v20);
  if (v19)
    goto LABEL_18;
LABEL_10:
  if (a6)
  {
LABEL_11:
    v23 = (void *)objc_msgSend(v22, "mutableCopy", v27);
    if (v22)
      CFRelease(v22);
    objc_msgSend(a6, "_apiObject");
    objc_msgSend(v23, "setObject:forKey:", WTF::URL::operator NSURL *(), CFSTR("WKActionOriginatingFrameURLKey"));
    goto LABEL_20;
  }
LABEL_19:
  v23 = v22;
LABEL_20:
  PolicyDecisionBlock = makePolicyDecisionBlock(&v28, v27);
  v26 = v28;
  objc_msgSend(WeakRetained, "browsingContextController:decidePolicyForNavigationAction:decisionHandler:", a11, v23, v28, PolicyDecisionBlock);
  _Block_release(v26);
  if (v23)
    CFRelease(v23);
LABEL_22:
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_197090960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

double makePolicyDecisionBlock(_QWORD *a1, void *a2)
{
  _QWORD *v4;
  double result;

  if (a2)
    CFRetain(*(CFTypeRef *)(objc_msgSend(a2, "_apiObject") + 8));
  v4 = malloc_type_malloc(0x28uLL, 0x10E0040711A3A6CuLL);
  *v4 = MEMORY[0x1E0C809A0];
  *(_QWORD *)&result = 50331650;
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtr<void ()(WKPolicyDecision)>::fromCallable<makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0>(makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0)::{lambda(void *,WKPolicyDecision)#1}::__invoke;
  v4[3] = &WTF::BlockPtr<void ()(WKPolicyDecision)>::fromCallable<makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0>(makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0)::descriptor;
  v4[4] = a2;
  *a1 = v4;
  return result;
}

void sub_197090A60(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(objc_msgSend(v1, "_apiObject") + 8));
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtr<void ()(WKPolicyDecision)>::fromCallable<makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0>(makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  if (v1)
    CFRelease(*(CFTypeRef *)(objc_msgSend(v1, "_apiObject") + 8));
}

void WTF::BlockPtr<void ()(WKPolicyDecision)>::fromCallable<makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0>(makePolicyDecisionBlock(OpaqueWKFramePolicyListener const*)::$_0)::{lambda(void *,WKPolicyDecision)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;

  switch(a2)
  {
    case 2:
      v3 = *(void **)(a1 + 32);
      if (v3)
        v3 = (void *)objc_msgSend(v3, "_apiObject");
      WebKit::WebFramePolicyListenerProxy::download((WTF *)v3);
      break;
    case 1:
      v4 = *(void **)(a1 + 32);
      if (v4)
        v4 = (void *)objc_msgSend(v4, "_apiObject");
      WebKit::WebFramePolicyListenerProxy::use((uint64_t)v4, 0, 0);
      break;
    case 0:
      v2 = *(void **)(a1 + 32);
      if (v2)
        v2 = (void *)objc_msgSend(v2, "_apiObject");
      WebKit::WebFramePolicyListenerProxy::ignore((WTF *)v2, 0);
      break;
  }
}

void setUpPagePolicyClient(WKBrowsingContextController *,WebKit::WebPageProxy &)::$_1::__invoke(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10)
{
  id WeakRetained;
  const void *v18;
  uint64_t v19;
  double PolicyDecisionBlock;
  const void *v21;
  uint64_t v22;
  const void *v23;
  _QWORD v24[6];
  _QWORD v25[7];

  v25[6] = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a10 + 40));
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (a8)
      v22 = objc_msgSend(a8, "_apiObject");
    else
      v22 = 0;
    WebKit::WebFramePolicyListenerProxy::use(v22, 0, 0);
    if (!WeakRetained)
      return;
LABEL_11:
    CFRelease(WeakRetained);
    return;
  }
  v24[0] = CFSTR("WKActionIsMainFrameKey");
  v25[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", WKFrameIsMainFrame(a2));
  v24[1] = CFSTR("WKActionNavigationTypeKey");
  v25[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
  v24[2] = CFSTR("WKActionModifierFlagsKey");
  v25[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a4);
  v24[3] = CFSTR("WKActionMouseButtonKey");
  v25[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a5);
  v24[4] = CFSTR("WKActionURLRequestKey");
  if (a6)
    objc_msgSend(a6, "_apiObject");
  v18 = (const void *)objc_msgSend((id)WebCore::ResourceRequest::nsURLRequest(), "copy");
  v25[4] = v18;
  v24[5] = CFSTR("WKActionFrameNameKey");
  v25[5] = *(_QWORD *)(objc_msgSend(a7, "_apiObject") + 8);
  v19 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, v24, 6);
  if (v18)
    CFRelease(v18);
  PolicyDecisionBlock = makePolicyDecisionBlock(&v23, a8);
  v21 = v23;
  objc_msgSend(WeakRetained, "browsingContextController:decidePolicyForNewWindowAction:decisionHandler:", a10, v19, v23, PolicyDecisionBlock);
  _Block_release(v21);
  if (WeakRetained)
    goto LABEL_11;
}

void sub_197090D24(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  _Block_release(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void setUpPagePolicyClient(WKBrowsingContextController *,WebKit::WebPageProxy &)::$_2::__invoke(uint64_t a1, _QWORD *a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  id WeakRetained;
  const void *v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  double PolicyDecisionBlock;
  const void *v20;
  uint64_t v21;
  const void *v22;
  _QWORD v23[4];
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a8 + 40));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v23[0] = CFSTR("WKActionIsMainFrameKey");
    v24[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", WKFrameIsMainFrame(a2));
    v23[1] = CFSTR("WKActionURLRequestKey");
    if (a4)
      objc_msgSend(a4, "_apiObject");
    v15 = (const void *)objc_msgSend((id)WebCore::ResourceRequest::nsURLRequest(), "copy");
    v24[1] = v15;
    v23[2] = CFSTR("WKActionURLResponseKey");
    if (a3)
      v16 = objc_msgSend(a3, "_apiObject");
    else
      v16 = 0;
    v17 = (const void *)objc_msgSend((id)WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(v16 + 16)), "copy");
    v24[2] = v17;
    v23[3] = CFSTR("WKActionCanShowMIMETypeKey");
    v24[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a5);
    v18 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 4);
    if (v17)
    {
      CFRelease(v17);
      if (!v15)
        goto LABEL_8;
    }
    else if (!v15)
    {
      goto LABEL_8;
    }
    CFRelease(v15);
LABEL_8:
    PolicyDecisionBlock = makePolicyDecisionBlock(&v22, a6);
    v20 = v22;
    objc_msgSend(WeakRetained, "browsingContextController:decidePolicyForResponseAction:decisionHandler:", a8, v18, v22, PolicyDecisionBlock);
    _Block_release(v20);
    if (!WeakRetained)
      return;
    goto LABEL_13;
  }
  if (a6)
    v21 = objc_msgSend(a6, "_apiObject");
  else
    v21 = 0;
  WebKit::WebFramePolicyListenerProxy::use(v21, 0, 0);
  if (WeakRetained)
LABEL_13:
    CFRelease(WeakRetained);
}

void sub_197090F5C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  _Block_release(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_197090FAC()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x197090FB4);
  JUMPOUT(0x197090F84);
}

void sub_197090FC4()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x197090F90);
  JUMPOUT(0x197090F88);
}

void DownloadClient::~DownloadClient(id *this)
{
  objc_destroyWeak(this + 2);
}

{
  void *v2;

  objc_destroyWeak(this + 2);
  WTF::fastFree((WTF *)this, v2);
}

void DownloadClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  CFTypeRef v10;
  WTF::StringImpl *v11;
  id Weak;
  uint64_t v13;
  const void *v14;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  WTF::StringImpl *v16;
  uint64_t v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  CFTypeRef cf;

  v6 = (id *)(a1 + 16);
  if (objc_loadWeak((id *)(a1 + 16)) && (*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    Weak = objc_loadWeak(v6);
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(const void **)(a3 + 8);
    CFRetain(v14);
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v6);
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_download_didReceiveAuthenticationChallenge_completionHandler_, (uint64_t *)&v21);
    v17 = a3;
    v16 = v21;
    v18 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v18 = MEMORY[0x1E0C809A0];
    v18[1] = 50331650;
    v18[2] = WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke;
    v18[3] = &WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::descriptor;
    v18[4] = v17;
    v18[5] = v16;
    objc_msgSend(Weak, "download:didReceiveAuthenticationChallenge:completionHandler:", v13, v14, v18);
    _Block_release(v18);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 464);
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v20);
    cf = 0;
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
      *(_QWORD *)(v7 + 16) = 0;
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, 3, &v20);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = cf;
      cf = 0;
      if (v10)
        CFRelease(v10);
    }
    v11 = v21;
    v21 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v19 = v20;
    v20 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v8);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
}

void sub_1970911DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;
  const void *v10;

  _Block_release(v10);
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(a1);
}

uint64_t DownloadClient::didReceiveData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;

  v7 = (void *)objc_msgSend(*(id *)(a2 + 8), "progress");
  objc_msgSend(v7, "setTotalUnitCount:", a5);
  return objc_msgSend(v7, "setCompletedUnitCount:", a4);
}

void DownloadClient::decideDestinationWithSuggestedFilename(uint64_t a1, uint64_t a2, WebCore::ResourceResponse *a3, _QWORD *a4, uint64_t *a5)
{
  id *v9;
  id Weak;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  v9 = (id *)(a1 + 16);
  if (objc_loadWeak((id *)(a1 + 16)))
  {
    Weak = objc_loadWeak(v9);
    v11 = *(_QWORD *)(a2 + 8);
    v12 = WebCore::ResourceResponse::nsURLResponse(a3);
    if (*a4)
      v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v13 = &stru_1E351F1B8;
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v14 = *a5;
    *a5 = 0;
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v9);
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_download_decideDestinationUsingResponse_suggestedFilename_completionHandler_, &v22);
    v17 = a2;
    v16 = v14;
    v18 = v22;
    v19 = malloc_type_malloc(0x38uLL, 0x10E0040CBD43D72uLL);
    *v19 = MEMORY[0x1E0C809A0];
    v19[1] = 50331650;
    v19[2] = WTF::BlockPtr<void ()(NSURL *)>::fromCallable<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}>(DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1})::{lambda(void *,NSURL *)#1}::__invoke;
    v19[3] = &WTF::BlockPtr<void ()(NSURL *)>::fromCallable<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}>(DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1})::descriptor;
    v19[4] = v17;
    v19[5] = v16;
    v19[6] = v18;
    objc_msgSend(Weak, "download:decideDestinationUsingResponse:suggestedFilename:completionHandler:", v11, v12, v13, v19);
    _Block_release(v19);
    if (WeakRetained)
      CFRelease(WeakRetained);
  }
  else
  {
    v23 = 0;
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v23);
    v21 = v23;
    v23 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
}

void sub_197091424(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id DownloadClient::didFinish(uint64_t a1, uint64_t a2)
{
  id *v4;
  id result;

  v4 = (id *)(a1 + 16);
  result = objc_loadWeak((id *)(a1 + 16));
  if (result)
  {
    if ((*(_BYTE *)(a1 + 24) & 4) != 0)
      return (id)objc_msgSend(objc_loadWeak(v4), "downloadDidFinish:", *(_QWORD *)(a2 + 8));
  }
  return result;
}

id DownloadClient::didFail(uint64_t a1, uint64_t a2, WebCore::ResourceError *a3, uint64_t a4)
{
  id *v8;
  id result;
  id Weak;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (id *)(a1 + 16);
  result = objc_loadWeak((id *)(a1 + 16));
  if (result && (*(_BYTE *)(a1 + 24) & 8) != 0)
  {
    Weak = objc_loadWeak(v8);
    v11 = *(_QWORD *)(a2 + 8);
    v12 = WebCore::ResourceError::nsError(a3);
    if (a4)
      v13 = *(_QWORD *)(a4 + 8);
    else
      v13 = 0;
    return (id)objc_msgSend(Weak, "download:didFailWithError:resumeData:", v11, v12, v13);
  }
  return result;
}

id DownloadClient::processDidCrash(uint64_t a1, uint64_t a2)
{
  id *v4;
  id result;

  v4 = (id *)(a1 + 16);
  result = objc_loadWeak((id *)(a1 + 16));
  if (result)
  {
    if ((*(_BYTE *)(a1 + 24) & 8) != 0)
      return (id)objc_msgSend(objc_loadWeak(v4), "download:didFailWithError:resumeData:", *(_QWORD *)(a2 + 8), objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB32E8], -1005, 0), 0);
  }
  return result;
}

void DownloadClient::willSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceResponse *a4, const void **a5)
{
  id *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  id Weak;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  WebKit::CompletionHandlerCallChecker *WeakRetained;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int *v23;
  CFTypeRef v24;
  CFTypeRef v25;
  _BYTE v26[192];
  CFTypeRef cf[2];
  unsigned int *v28;
  _BYTE v29[192];
  __int128 v30;
  uint64_t v31;

  v10 = (id *)(a1 + 16);
  if (objc_loadWeak((id *)(a1 + 16)) && (*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v12 = (const void *)WebCore::ResourceRequest::nsURLRequest();
    v13 = v12;
    if (v12)
      CFRetain(v12);
    Weak = objc_loadWeak(v10);
    v15 = *(_QWORD *)(a2 + 8);
    v16 = WebCore::ResourceResponse::nsURLResponse(a4);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v26, a3);
    v17 = *(const void **)(a3 + 192);
    *(_QWORD *)(a3 + 192) = 0;
    v18 = *a5;
    *a5 = 0;
    cf[0] = v17;
    cf[1] = v18;
    WeakRetained = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained(v10);
    WebKit::CompletionHandlerCallChecker::create(WeakRetained, (objc_object *)sel_download_willPerformHTTPRedirection_newRequest_decisionHandler_, (uint64_t *)&v28);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v29, (uint64_t)v26);
    v20 = *(_OWORD *)cf;
    cf[0] = 0;
    cf[1] = 0;
    v30 = v20;
    v21 = (uint64_t)v28;
    v28 = 0;
    v31 = v21;
    v22 = malloc_type_malloc(0xF8uLL, 0x10E004087F5301AuLL);
    *v22 = MEMORY[0x1E0C809A0];
    v22[1] = 50331650;
    v22[2] = WTF::BlockPtr<void ()(WKDownloadRedirectPolicy)>::fromCallable<DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1}>(DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1})::{lambda(void *,WKDownloadRedirectPolicy)#1}::__invoke;
    v22[3] = &WTF::BlockPtr<void ()(WKDownloadRedirectPolicy)>::fromCallable<DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1}>(DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1})::descriptor;
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)(v22 + 4), (uint64_t)v29);
    *((_OWORD *)v22 + 14) = v30;
    v22[30] = v31;
    v31 = 0;
    v30 = 0uLL;
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v29);
    objc_msgSend(Weak, "download:willPerformHTTPRedirection:newRequest:decisionHandler:", v15, v16, v13, v22);
    _Block_release(v22);
    v23 = v28;
    v28 = 0;
    if (v23)
      WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v23);
    v24 = cf[1];
    cf[1] = 0;
    if (v24)
      (*(void (**)(CFTypeRef))(*(_QWORD *)v24 + 8))(v24);
    v25 = cf[0];
    cf[0] = 0;
    if (v25)
      CFRelease(v25);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v26);
    if (WeakRetained)
      CFRelease(WeakRetained);
    if (v13)
      CFRelease(v13);
  }
  else
  {
    v11 = *a5;
    *a5 = 0;
    (*(void (**)(const void *, uint64_t))(*(_QWORD *)v11 + 16))(v11, a3);
    (*(void (**)(const void *))(*(_QWORD *)v11 + 8))(v11);
  }
}

void sub_1970918D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf,uint64_t a34,unsigned int *a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,CFTypeRef a60,uint64_t a61,uint64_t a62)
{
  const void *v62;
  const void *v63;
  const void *v64;
  unsigned int *v66;
  uint64_t v67;
  CFTypeRef v68;

  _Block_release(v64);
  v66 = a35;
  a35 = 0;
  if (v66)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v66);
  v67 = a34;
  a34 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = cf;
  cf = 0;
  if (v68)
    CFRelease(v68);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  if (v63)
    CFRelease(v63);
  if (v62)
    CFRelease(v62);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(uint64_t *a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;

  v3 = *a1;
  *a1 = 0;
  v4 = *a3;
  *a3 = 0;
  v8 = v4;
  v9 = v3;
  WTF::Function<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(&v9, a2, &v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_197091A8C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Function<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(uint64_t *a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  v3 = *a1;
  v4 = *a3;
  *a3 = 0;
  v7 = v4;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, a2, &v7);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_197091B38(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

uint64_t WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}>(DownloadClient::didReceiveAuthenticationChallenge(WebKit::DownloadProxy &,WebKit::AuthenticationChallengeProxy &)::{lambda(NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1})::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  CFTypeRef cf;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 40));
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 24) = 1;
    switch(a2)
    {
      case 0:
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464);
        if (a3)
        {
          MEMORY[0x19AEAC4CC](&v15, a3);
        }
        else
        {
          WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v15);
          cf = 0;
        }
        v10 = *(_QWORD *)(v7 + 16);
        if (!v10)
          goto LABEL_16;
        *(_QWORD *)(v7 + 16) = 0;
        (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, 0, &v15);
        break;
      case 1:
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464);
        WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v15);
        cf = 0;
        v10 = *(_QWORD *)(v9 + 16);
        if (!v10)
          goto LABEL_18;
        *(_QWORD *)(v9 + 16) = 0;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, 1, &v15);
        break;
      case 2:
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464);
        WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v15);
        cf = 0;
        v10 = *(_QWORD *)(v11 + 16);
        if (!v10)
          goto LABEL_18;
        *(_QWORD *)(v11 + 16) = 0;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, 2, &v15);
        break;
      case 3:
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 464);
        WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v15);
        cf = 0;
        v10 = *(_QWORD *)(v12 + 16);
        if (!v10)
          goto LABEL_18;
        *(_QWORD *)(v12 + 16) = 0;
        (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, 3, &v15);
        break;
      default:
        return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Invalid NSURLSessionAuthChallengeDisposition (%ld)"), a2);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_16:
    v13 = cf;
    cf = 0;
    if (v13)
      CFRelease(v13);
LABEL_18:
    v14 = v16;
    v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = (uint64_t)v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WTF::BlockPtr<void ()(NSURL *)>::fromCallable<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}>(DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1})::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

uint64_t WTF::BlockPtr<void ()(NSURL *)>::fromCallable<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}>(DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1})::{lambda(void *,NSURL *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result;
  void *v5;
  WTF::RunLoop *v6;
  WTF::RunLoop *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  result = WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 48));
  if ((result & 1) != 0)
    return result;
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 24) = 1;
  if (!a2)
    goto LABEL_8;
  if ((objc_msgSend(a2, "isFileURL") & 1) != 0)
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v6 = (WTF::RunLoop *)objc_msgSend(v5, "fileExistsAtPath:", objc_msgSend((id)objc_msgSend(a2, "URLByDeletingLastPathComponent"), "path"));
    if ((v6 & 1) != 0)
    {
      v7 = (WTF::RunLoop *)objc_msgSend(v5, "fileExistsAtPath:", objc_msgSend(a2, "path"));
      if (!(_DWORD)v7)
      {
        objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "progress"), "setFileURL:", a2);
        MEMORY[0x19AEABCC8](&v17, objc_msgSend(a2, "path"));
        WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()((uint64_t *)(a1 + 40), 0, &v17);
LABEL_19:
        result = (uint64_t)v17;
        v17 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
      WTF::RunLoop::main(v7);
      v8 = *(_QWORD *)(a1 + 32);
      CFRetain(*(CFTypeRef *)(v8 + 8));
      v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v9 = &off_1E34BB9F8;
      *((_QWORD *)v9 + 1) = v8;
      v17 = v9;
      WTF::RunLoop::dispatch();
      v10 = v17;
      v17 = 0;
      if (v10)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 8))(v10);
    }
    else
    {
      WTF::RunLoop::main(v6);
      v14 = *(_QWORD *)(a1 + 32);
      CFRetain(*(CFTypeRef *)(v14 + 8));
      v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v15 = &off_1E34BB9D0;
      *((_QWORD *)v15 + 1) = v14;
      v17 = v15;
      WTF::RunLoop::dispatch();
      v16 = v17;
      v17 = 0;
      if (v16)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
    }
LABEL_8:
    v17 = 0;
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()((uint64_t *)(a1 + 40), 0, &v17);
    goto LABEL_19;
  }
  v17 = 0;
  WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()((uint64_t *)(a1 + 40), 0, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("destination must be a file URL"));
}

void sub_197092040(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}::operator()(NSURL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BB9D0;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}::operator()(NSURL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BB9D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}::operator()(NSURL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  CFTypeRef v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef cf;

  v1 = *(_QWORD *)(a1 + 8);
  MEMORY[0x19AEADCC0](&v7, objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB32E8], -3000, 0));
  WebKit::DownloadProxy::didFail(v1, (uint64_t)&v7, 0, 0);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}::operator()(NSURL)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BB9F8;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}::operator()(NSURL)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BB9F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<DownloadClient::decideDestinationWithSuggestedFilename(WebKit::DownloadProxy &,WebCore::ResourceResponse const&,WTF::String const&,WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)> &&)::{lambda(NSURL *)#1}::operator()(NSURL)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  CFTypeRef v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef cf;

  v1 = *(_QWORD *)(a1 + 8);
  MEMORY[0x19AEADCC0](&v7, objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB32E8], -3000, 0));
  WebKit::DownloadProxy::didFail(v1, (uint64_t)&v7, 0, 0);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  _BYTE v7[192];
  CFTypeRef cf;

  if (!WebKit::CompletionHandlerCallChecker::completionHandlerHasBeenCalled(*(SEL **)(a1 + 208)))
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 208) + 24) = 1;
    if (a2 == 1)
    {
      v6 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a1);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    else if (a2)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Invalid WKDownloadRedirectPolicy (%ld)"), a2);
    }
    else
    {
      WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v7);
      v4 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v7);
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = cf;
      cf = 0;
      if (v5)
        CFRelease(v5);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v7);
    }
  }
}

void sub_19709246C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf)
{
  uint64_t v34;

  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  _Unwind_Resume(a1);
}

void WTF::BlockPtr<void ()(WKDownloadRedirectPolicy)>::fromCallable<DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1}>(DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1})::{lambda(void const*)#1}::__invoke(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t v3;
  const void *v4;

  v2 = (unsigned int *)a1[30];
  a1[30] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(v2);
  v3 = a1[29];
  a1[29] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (const void *)a1[28];
  a1[28] = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 4));
}

void WTF::BlockPtr<void ()(WKDownloadRedirectPolicy)>::fromCallable<DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1}>(DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1})::{lambda(void *,WKDownloadRedirectPolicy)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  DownloadClient::willSendRequest(WebKit::DownloadProxy &,WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::{lambda(WKDownloadRedirectPolicy)#1}::operator()(a1 + 32, a2);
}

void sub_1970925A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WKBrowsingContextController *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t i;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  v2 = qword_1ECE728C8;
  if (qword_1ECE728C8)
  {
    v3 = *(_DWORD *)(qword_1ECE728C8 - 4);
    v4 = *(_DWORD *)(qword_1ECE728C8 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE728C8 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE728C8 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = (unsigned int **)(v2 + 16 * i);
      v9 = *v8;
      if (*v8 != (unsigned int *)-1)
      {
        if (v9)
        {
          if (qword_1ECE728C8)
            v10 = *(_DWORD *)(qword_1ECE728C8 - 8);
          else
            v10 = 0;
          v11 = 0;
          v12 = *((_QWORD *)v9 + 1);
          if (v12)
            v13 = v12 - 16;
          else
            v13 = 0;
          v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = (v16 >> 31) ^ v16;
          do
          {
            v18 = v17 & v10;
            v17 = ++v11 + v18;
          }
          while (*(_QWORD *)(qword_1ECE728C8 + 16 * v18));
          v19 = (_QWORD *)(qword_1ECE728C8 + 16 * v18);
          *v19 = 0;
          v20 = *(_OWORD *)v8;
          *v8 = 0;
          *(_OWORD *)v19 = v20;
          v21 = *v8;
          *v8 = 0;
          if (v21)
          {
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v21);
              WTF::fastFree((WTF *)v21, v6);
            }
          }
        }
        else
        {
          *v8 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WKBrowsingContextController *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>::expand()
{
  int v0;

  if (qword_1ECE728C8 && (v0 = *(_DWORD *)(qword_1ECE728C8 - 4)) != 0)
    return WTF::HashTable<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WKBrowsingContextController *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1ECE728C8 - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *>>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WKBrowsingContextController *,WTF::DefaultHash<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WKBrowsingContextController *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>::rehash(8u);
}

void sub_197092B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  if (v16)
    CFRelease(*(CFTypeRef *)(v16 + 8));
  _Unwind_Resume(exception_object);
}

void sub_197092D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  if (v16)
    CFRelease(*(CFTypeRef *)(v16 + 8));
  _Unwind_Resume(exception_object);
}

void sub_197092E64(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, CFTypeRef cf)
{
  CFTypeRef v13;

  v13 = cf;
  cf = 0;
  if (v13)
    CFRelease(v13);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const WTF::String *v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  const void *v10;
  CFTypeRef cf;

  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  *a2 = v4;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = (void *)v4;
    v8 = *(WTF **)a1;
    v9 = 8 * v6;
    do
    {
      WTF::makeNSArrayElement(v8, v5);
      if (cf)
      {
        objc_msgSend(v7, "addObject:");
        v10 = cf;
        cf = 0;
        CFRelease(v10);
      }
      v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_197092F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _QWORD *v10;
  const void *v11;

  if (cf)
    CFRelease(cf);
  *v10 = 0;
  if (v11)
    CFRelease(v11);
  _Unwind_Resume(exception_object);
}

void sub_197093100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_197093200(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void WebKit::RemoteMediaRecorderManager::~RemoteMediaRecorderManager(WebKit::RemoteMediaRecorderManager *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 *v7;

  *(_QWORD *)this = off_1E34BBBF0;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1)
        {
          v6 = *v5;
          *v5 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = (unsigned __int8 *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, a2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteMediaRecorderManager::~RemoteMediaRecorderManager(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::RemoteMediaRecorderManager::didReceiveRemoteMediaRecorderMessage(WebKit::RemoteMediaRecorderManager *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::RemoteMediaRecorder *v5;
  uint64_t v6;

  v6 = *((_QWORD *)a3 + 8);
  v5 = (WebKit::RemoteMediaRecorder *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 4, &v6);
  if (v5)
    WebKit::RemoteMediaRecorder::didReceiveMessage(v5, a2, a3);
}

unsigned __int8 *WebKit::RemoteMediaRecorderManager::createRecorder(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unsigned __int8 *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  unsigned __int8 *result;
  _QWORD *v12;
  WebCore::MediaRecorderPrivateWriter **v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  char v43[8];
  WTF::StringImpl *v44;
  char v45;
  _QWORD *v46;

  v8 = (unsigned __int8 *)a1[2];
  if (!v8)
  {
    v46 = 0;
    goto LABEL_3;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v8, a1[3], &v46);
  if (!v46)
  {
LABEL_3:
    v43[0] = 0;
    v45 = 0;
    v42 = 0;
    v9 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, char *, WTF::StringImpl **, _QWORD, _QWORD))(*(_QWORD *)v9 + 16))(v9, v43, &v42, 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    result = (unsigned __int8 *)v42;
    v42 = 0;
    if (!result)
      goto LABEL_7;
    goto LABEL_4;
  }
  WebKit::RemoteMediaRecorder::create(v46, a2, a3, (unsigned __int8 **)&v42);
  v15 = (WebCore::MediaRecorderPrivateWriter **)v42;
  if (!v42)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v43[0] = 6;
    v45 = 1;
    v41 = 0;
    v21 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, char *, WTF::StringImpl **, _QWORD, _QWORD))(*(_QWORD *)v21 + 16))(v21, v43, &v41, 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    result = (unsigned __int8 *)v41;
    v41 = 0;
    if (!result)
      goto LABEL_7;
LABEL_4:
    if (*(_DWORD *)result == 2)
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
    else
      *(_DWORD *)result -= 2;
LABEL_7:
    if (v45)
    {
      result = (unsigned __int8 *)v44;
      v44 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
    goto LABEL_12;
  }
  v43[0] = 0;
  v45 = 0;
  v16 = *(WTF::StringImpl **)WebCore::MediaRecorderPrivateWriter::mimeType(*((WebCore::MediaRecorderPrivateWriter **)v42
                                                                           + 5));
  if (v16)
    *(_DWORD *)v16 += 2;
  v41 = v16;
  v17 = WebCore::MediaRecorderPrivateWriter::audioBitRate(v15[5]);
  v18 = WebCore::MediaRecorderPrivateWriter::videoBitRate(v15[5]);
  v19 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, char *, WTF::StringImpl **, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v43, &v41, v17, v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  result = (unsigned __int8 *)v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  if (v45)
  {
    result = (unsigned __int8 *)v44;
    v44 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v24 = a1[4];
  v23 = a1 + 4;
  v22 = v24;
  if (v24
    || (result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v23, 0), (v22 = *v23) != 0))
  {
    v25 = *(_DWORD *)(v22 - 8);
  }
  else
  {
    v25 = 0;
  }
  v26 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
  v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
  v29 = v25 & ((v28 >> 31) ^ v28);
  v30 = (uint64_t *)(v22 + 16 * v29);
  v31 = *v30;
  if (*v30)
  {
    v32 = 0;
    v33 = 1;
    while (v31 != a2)
    {
      if (v31 == -1)
        v32 = v30;
      v29 = (v29 + v33) & v25;
      v30 = (uint64_t *)(v22 + 16 * v29);
      v31 = *v30;
      ++v33;
      if (!*v30)
      {
        if (v32)
        {
          *v32 = 0;
          v32[1] = 0;
          --*(_DWORD *)(*v23 - 16);
          v30 = v32;
        }
        goto LABEL_41;
      }
    }
  }
  else
  {
LABEL_41:
    *v30 = a2;
    v34 = v42;
    v42 = 0;
    result = (unsigned __int8 *)v30[1];
    v30[1] = (uint64_t)v34;
    if (result)
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    v35 = *v23;
    if (*v23)
      v36 = *(_DWORD *)(v35 - 12) + 1;
    else
      v36 = 1;
    *(_DWORD *)(v35 - 12) = v36;
    v37 = *v23;
    if (*v23)
      v38 = *(_DWORD *)(v37 - 12);
    else
      v38 = 0;
    v39 = (*(_DWORD *)(v37 - 16) + v38);
    v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 > 2 * v39)
        goto LABEL_12;
    }
    else if (3 * v40 > 4 * v39)
    {
      goto LABEL_12;
    }
    result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v23, v30);
    v15 = (WebCore::MediaRecorderPrivateWriter **)v42;
  }
  if (v15)
    result = (unsigned __int8 *)(*((uint64_t (**)(WebCore::MediaRecorderPrivateWriter **))*v15 + 1))(v15);
LABEL_12:
  v12 = v46;
  v46 = 0;
  if (v12)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>((unsigned __int8 *)v12[2]);
  return result;
}

void WebKit::RemoteMediaRecorderManager::releaseRecorder(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v3 = a1 + 4;
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1 + 4, &v10);
  v5 = a1[4];
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4)
      goto LABEL_9;
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v6 = 0;
  }
  if (v6 != v4)
  {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, v4);
    v5 = *v3;
  }
  if (v5)
  {
LABEL_9:
    if (*(_DWORD *)(v5 - 12))
      return;
  }
LABEL_10:
  v7 = (unsigned __int8 *)a1[2];
  if (v7)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, a1[3], &v9);
    if (v9)
    {
      WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(v9 + 72));
      v8 = v9;
      v9 = 0;
      if (v8)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
    }
  }
}

void WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  uint64_t v2;
  void *v3;
  unsigned __int8 *v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E34BBC28;
  *((_QWORD *)this + 3) = &unk_1E34BBC80;
  *((_QWORD *)this + 5) = &unk_1E34BBCB8;
  WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::RemoteSampleBufferDisplayLayer *)((char *)this + 96));
  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 11, 0);
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 8));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 9);
  v4 = (unsigned __int8 *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
  *((_QWORD *)this + 3) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, v3);
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v7 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer((WebKit::RemoteSampleBufferDisplayLayer *)((char *)this - 24));
}

{
  WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer((WebKit::RemoteSampleBufferDisplayLayer *)((char *)this - 40));
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer((WebKit::RemoteSampleBufferDisplayLayer *)((char *)this - 24));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteSampleBufferDisplayLayer::~RemoteSampleBufferDisplayLayer((WebKit::RemoteSampleBufferDisplayLayer *)((char *)this - 40));
  WTF::fastFree(v1, v2);
}

void WebKit::RemoteSampleBufferDisplayLayer::updateBoundsAndPosition(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 4) && *(_DWORD *)a2)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 88) + 8), "setFencePort:");
  WebCore::LocalSampleBufferDisplayLayer::updateBoundsAndPosition();
}

void WebKit::RemoteSampleBufferDisplayLayer::enqueueVideoFrame(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::VideoFrame *v7;

  WebKit::SharedVideoFrameReader::read(a1 + 96, a2, &v7);
  v3 = (unsigned int *)v7;
  if (v7)
  {
    WebCore::LocalSampleBufferDisplayLayer::enqueueVideoFrame(*(WebCore::LocalSampleBufferDisplayLayer **)(a1 + 80), v7);
    v7 = 0;
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
}

uint64_t WebKit::RemoteSampleBufferDisplayLayer::messageSenderConnection(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t `non-virtual thunk to'WebKit::RemoteSampleBufferDisplayLayer::messageSenderConnection(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  return *((_QWORD *)this + 4);
}

char *WebKit::RemoteSampleBufferDisplayLayer::sampleBufferDisplayLayerStatusDidFail(WebCore::LocalSampleBufferDisplayLayer **this)
{
  char v2;
  char *v3;
  WebCore::LocalSampleBufferDisplayLayer *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  char *result;
  WTF *v15;
  void *v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  IPC::Encoder *v20;

  v2 = WebCore::LocalSampleBufferDisplayLayer::didFail(this[10]);
  v4 = this[5];
  v3 = (char *)(this + 5);
  v5 = (*((uint64_t (**)(char *))v4 + 7))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1421;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v20 = (IPC::Encoder *)v6;
  v7 = *(_QWORD *)(v6 + 544);
  v8 = v7 + 1;
  v9 = *(_QWORD *)(v6 + 552);
  if (v9 < v7 + 1)
  {
    v17 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v18 = v17;
      v17 *= 2;
    }
    while (v18 < v8);
    result = (char *)mmap(0, v18, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v19 = *(void **)(v6 + 528);
    if (v19 != (void *)(v6 + 16))
      munmap(v19, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v10;
    *(_QWORD *)(v6 + 552) = v18;
    v11 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v10 = *(char **)(v6 + 528);
    v11 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v10[v11], v7 - v11);
  *(_QWORD *)(v6 + 544) = v8;
  v12 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v7);
  *(_QWORD *)(v6 + 536) = v12 + 1;
  *v12 = v2;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v20, 0);
  result = (char *)v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
    return (char *)WTF::fastFree(v15, v16);
  }
  return result;
}

void WebKit::RemoteSampleBufferDisplayLayerManager::~RemoteSampleBufferDisplayLayerManager(WebKit::RemoteSampleBufferDisplayLayerManager *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 *v6;

  v3 = *((_QWORD *)this + 8);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 5);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteSampleBufferDisplayLayerManager::~RemoteSampleBufferDisplayLayerManager(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *WebKit::RemoteSampleBufferDisplayLayerManager::close(WebKit::RemoteSampleBufferDisplayLayerManager *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;

  result = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 4), &v7);
    if (v7)
    {
      IPC::Connection::removeWorkQueueMessageReceiver(*(_QWORD *)(v7 + 48), 0x76u, 0);
      IPC::Connection::removeWorkQueueMessageReceiver(*(_QWORD *)(v7 + 48), 0x77u, 0);
      v3 = *((_QWORD *)this + 6);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 2);
      v4 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v4 = &off_1E34BBE68;
      *((_QWORD *)v4 + 1) = this;
      *((_QWORD *)v4 + 2) = this;
      v6 = v4;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v3 + 32))(v3, &v6);
      result = v6;
      v6 = 0;
      if (result)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      v5 = v7;
      v7 = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v5 + 16));
    }
  }
  return result;
}

BOOL WebKit::RemoteSampleBufferDisplayLayerManager::dispatchMessage(WebKit::RemoteSampleBufferDisplayLayerManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3;
  unsigned __int8 *v7;
  WebCore::LocalSampleBufferDisplayLayer **v9;
  int v10;
  uint64_t v12;

  v3 = *((_QWORD *)a3 + 8);
  if (!v3)
    return v3 != 0;
  v12 = *((_QWORD *)a3 + 8);
  v7 = (unsigned __int8 *)this + 56;
  if (__ldaxr((unsigned __int8 *)this + 56))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEABB3C]((char *)this + 56);
    goto LABEL_6;
  }
  if (__stxr(1u, v7))
    goto LABEL_5;
LABEL_6:
  v9 = (WebCore::LocalSampleBufferDisplayLayer **)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 8, &v12);
  if (v9)
    WebKit::RemoteSampleBufferDisplayLayer::didReceiveMessage(v9, a2, a3);
  v10 = __ldxr(v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, v7))
      return v3 != 0;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v3 != 0;
}

uint64_t WebKit::RemoteSampleBufferDisplayLayerManager::createLayer(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v14 = *a7;
  *a7 = 0;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v15 = &off_1E34BBEB8;
  *(_QWORD *)(v15 + 8) = a1;
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  *(_BYTE *)(v15 + 32) = a3;
  *(_QWORD *)(v15 + 36) = a4;
  *(_BYTE *)(v15 + 44) = a5;
  *(_BYTE *)(v15 + 45) = a6;
  *(_QWORD *)(v15 + 48) = v14;
  v17 = v15;
  WTF::callOnMainRunLoop();
  result = v17;
  if (v17)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return result;
}

uint64_t WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E34BBF30;
  v4[1] = a1;
  v4[2] = a1;
  v4[3] = a2;
  v6 = v4;
  WTF::callOnMainRunLoop();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

BOOL WebKit::RemoteSampleBufferDisplayLayerManager::allowsExitUnderMemoryPressure(WebKit::RemoteSampleBufferDisplayLayerManager *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  _BOOL8 v5;
  int v6;

  v2 = (unsigned __int8 *)this + 56;
  if (__ldaxr((unsigned __int8 *)this + 56))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 56);
LABEL_5:
  v4 = *((_QWORD *)this + 8);
  if (v4)
    v5 = *(_DWORD *)(v4 - 12) == 0;
  else
    v5 = 1;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

void WebKit::RemoteSampleBufferDisplayLayerManager::updateSampleBufferDisplayLayerBoundsAndPosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = a2;
  v5 = (unsigned __int8 *)(a1 + 56);
  if (__ldaxr((unsigned __int8 *)(a1 + 56)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 56);
LABEL_5:
  v7 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 64), &v10);
  if (v7)
  {
    v8 = v7;
    WebCore::FloatRect::operator CGRect();
    WebKit::RemoteSampleBufferDisplayLayer::updateBoundsAndPosition(v8, a3);
  }
  v9 = __ldxr(v5);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v5))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
}

void WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::~RemoteAudioMediaStreamTrackRendererInternalUnitManager(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager *this, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E34BBD40;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)(v4 + 8);
      do
      {
        if (*(v6 - 1) != -1)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::~RemoteAudioMediaStreamTrackRendererInternalUnitManager(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::createUnit(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *result;
  unsigned __int8 **v7;
  char v8;
  uint64_t v9;
  unsigned __int8 **v10;
  WebCore::AudioSession *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 **v38;
  _QWORD *v39;

  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *(_QWORD *)(a1 + 32), &v37);
    if (v37)
    {
      v7 = *(unsigned __int8 ***)(v37 + 48);
      v8 = *(_BYTE *)(v37 + 152);
      v9 = WTF::fastMalloc((WTF *)0xD0);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v38, v7);
      *(_QWORD *)(v9 + 16) = &unk_1E34BBDD8;
      *(_QWORD *)(v9 + 32) = &unk_1E34BBE10;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)v9 = off_1E34BBD78;
      *(_QWORD *)(v9 + 8) = 0;
      v10 = v38;
      v38 = 0;
      *(_QWORD *)(v9 + 40) = a2;
      *(_QWORD *)(v9 + 48) = v10;
      WebCore::AudioMediaStreamTrackRendererInternalUnit::create();
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      v11 = (WebCore::AudioSession *)semaphore_create(*MEMORY[0x1E0C83DA0], (semaphore_t *)(v9 + 92), 0, 0);
      *(_QWORD *)(v9 + 96) = 0;
      *(_BYTE *)(v9 + 104) = 0;
      *(_BYTE *)(v9 + 112) = 0;
      *(_BYTE *)(v9 + 192) = 0;
      *(_BYTE *)(v9 + 200) = v8;
      *(_BYTE *)(v9 + 201) = 1;
      v12 = WebCore::AudioSession::sharedSession(v11);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 208))(v12, v9 + 16);
      v13 = *(_QWORD *)(v9 + 56);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 24), v9 + 16);
      v14 = *(unsigned int **)(v9 + 24);
      if (v14)
      {
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
      v16 = (uint64_t *)(a1 + 16);
      v17 = *a3;
      *a3 = 0;
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v18 = &off_1E34BBFA8;
      v18[1] = v14;
      v18[2] = v9;
      v18[3] = v17;
      v39 = v18;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v13 + 32))(v13, &v39);
      v19 = v39;
      v39 = 0;
      if (v19)
        (*(void (**)(_QWORD *))(*v19 + 8))(v19);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v38);
      v20 = *v16;
      if (*v16
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v16, 0), (v20 = *v16) != 0))
      {
        v21 = *(_DWORD *)(v20 - 8);
      }
      else
      {
        v21 = 0;
      }
      v22 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      v25 = v21 & ((v24 >> 31) ^ v24);
      v26 = (uint64_t *)(v20 + 16 * v25);
      v27 = *v26;
      if (*v26)
      {
        v28 = 0;
        v29 = 1;
        do
        {
          if (v27 == a2)
          {
            result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
            goto LABEL_31;
          }
          if (v27 == -1)
            v28 = v26;
          v25 = (v25 + v29) & v21;
          v26 = (uint64_t *)(v20 + 16 * v25);
          v27 = *v26;
          ++v29;
        }
        while (*v26);
        if (v28)
        {
          *v28 = 0;
          v28[1] = 0;
          --*(_DWORD *)(*v16 - 16);
          v26 = v28;
        }
      }
      result = (unsigned __int8 *)v26[1];
      *v26 = a2;
      v26[1] = v9;
      if (result)
        result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      v30 = *v16;
      if (*v16)
        v31 = *(_DWORD *)(v30 - 12) + 1;
      else
        v31 = 1;
      *(_DWORD *)(v30 - 12) = v31;
      v32 = *v16;
      if (*v16)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      v34 = (*(_DWORD *)(v32 - 16) + v33);
      v35 = *(unsigned int *)(v32 - 4);
      if (v35 > 0x400)
      {
        if (v35 > 2 * v34)
        {
LABEL_31:
          v36 = v37;
          v37 = 0;
          if (v36)
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v36 + 16));
          return result;
        }
      }
      else if (3 * v35 > 4 * v34)
      {
        goto LABEL_31;
      }
      result = (unsigned __int8 *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v16, v26);
      goto LABEL_31;
    }
  }
  return result;
}

void WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::deleteUnit(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v3 = a1 + 2;
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1 + 2, &v10);
  v5 = a1[2];
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4)
      return;
  }
  else
  {
    if (!v4)
      return;
    v6 = 0;
  }
  if (v6 != v4)
  {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, v4);
    v5 = *v3;
  }
  if (!v5 || !*(_DWORD *)(v5 - 12))
  {
    v7 = (unsigned __int8 *)a1[3];
    if (v7)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, a1[4], &v9);
      if (v9)
      {
        WebKit::GPUProcess::tryExitIfUnusedAndUnderMemoryPressure(*(WebKit::GPUProcess **)(v9 + 72));
        v8 = v9;
        v9 = 0;
        if (v8)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
      }
    }
  }
}

void WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::startUnit(uint64_t a1, uint64_t a2, uint64_t a3, IPC::Semaphore *a4)
{
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v7);
  if (v6)
    WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::start(v6, a3, a4);
}

void WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::start(uint64_t a1, uint64_t a2, IPC::Semaphore *a3)
{
  WebCore::CARingBuffer *v5;
  WebCore::CARingBuffer *v6;
  WebCore::CARingBuffer *v7;
  WebCore::CoreAudioCaptureSourceFactory *v8;
  WebCore::CoreAudioCaptureSourceFactory *v9;
  WebCore::CoreAudioCaptureSourceFactory *v10;
  uint64_t shouldAudioCaptureUnitRenderAudio;
  WebCore::CARingBuffer *v12;

  if (*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 104) = 0;
    WebCore::CoreAudioCaptureSourceFactory::singleton((WebCore::CoreAudioCaptureSourceFactory *)a1);
    WebCore::CoreAudioCaptureSourceFactory::unregisterSpeakerSamplesProducer();
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56));
  }
  if (*(_BYTE *)(a1 + 192))
  {
    WebKit::ConsumerSharedCARingBuffer::map((WebCore::CAAudioStreamDescription *)(a1 + 112), &v12);
    v5 = *(WebCore::CARingBuffer **)(a1 + 96);
    v6 = v12;
    v12 = 0;
    *(_QWORD *)(a1 + 96) = v6;
    if (v5)
    {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 96, v5);
      v7 = v12;
      v12 = 0;
      if (v7)
        std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v12, v7);
      v6 = *(WebCore::CARingBuffer **)(a1 + 96);
    }
    if (v6)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_BYTE *)(a1 + 104) = 1;
      *(_BYTE *)(a1 + 201) = 1;
      v8 = IPC::Semaphore::operator=((IPC::Semaphore *)(a1 + 88), a3);
      if (!*(_BYTE *)(a1 + 200)
        || (WebCore::CoreAudioCaptureSourceFactory::singleton(v8),
            v9 = (WebCore::CoreAudioCaptureSourceFactory *)WebCore::CoreAudioCaptureSourceFactory::registerSpeakerSamplesProducer(),
            v10 = (WebCore::CoreAudioCaptureSourceFactory *)WebCore::CoreAudioCaptureSourceFactory::singleton(v9),
            shouldAudioCaptureUnitRenderAudio = WebCore::CoreAudioCaptureSourceFactory::shouldAudioCaptureUnitRenderAudio(v10),
            (shouldAudioCaptureUnitRenderAudio & 1) == 0)
        && !*(_BYTE *)(WebCore::AudioSession::sharedSession((WebCore::AudioSession *)shouldAudioCaptureUnitRenderAudio)
                     + 42))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
      }
    }
  }
  else
  {
    __break(1u);
  }
}

WebCore::CoreAudioCaptureSourceFactory *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::stopUnit(uint64_t a1, uint64_t a2)
{
  WebCore::CoreAudioCaptureSourceFactory *result;
  WebCore::CoreAudioCaptureSourceFactory *v3;
  uint64_t v4;

  v4 = a2;
  result = (WebCore::CoreAudioCaptureSourceFactory *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v4);
  if (result)
  {
    v3 = result;
    *((_BYTE *)result + 104) = 0;
    WebCore::CoreAudioCaptureSourceFactory::singleton(result);
    WebCore::CoreAudioCaptureSourceFactory::unregisterSpeakerSamplesProducer();
    return (WebCore::CoreAudioCaptureSourceFactory *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 7) + 24))(*((_QWORD *)v3 + 7));
  }
  return result;
}

unsigned __int8 *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::notifyLastToCaptureAudioChanged(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager *this)
{
  unsigned __int8 *result;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;

  result = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(result, *((_QWORD *)this + 4), &v9);
    if (v9)
    {
      result = (unsigned __int8 *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 2);
      v3 = result;
      v5 = v4;
      v6 = *((_QWORD *)this + 2);
      if (v6)
        v7 = (unsigned __int8 *)(v6 + 16 * *(unsigned int *)(v6 - 4));
      else
        v7 = 0;
      if (v7 != result)
      {
        do
        {
          result = (unsigned __int8 *)WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::setShouldRegisterAsSpeakerSamplesProducer(*((WebCore::CoreAudioCaptureSourceFactory **)v3 + 1), *(unsigned __int8 *)(v9 + 152));
          while (1)
          {
            v3 += 16;
            if (v3 == v5)
              break;
            if ((unint64_t)(*(_QWORD *)v3 + 1) > 1)
              goto LABEL_13;
          }
          v3 = v5;
LABEL_13:
          ;
        }
        while (v3 != v7);
      }
      v8 = v9;
      v9 = 0;
      if (v8)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 16));
    }
  }
  return result;
}

WebCore::CoreAudioCaptureSourceFactory *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::setShouldRegisterAsSpeakerSamplesProducer(WebCore::CoreAudioCaptureSourceFactory *this, int a2)
{
  BOOL v2;

  if (*((unsigned __int8 *)this + 200) != a2)
  {
    *((_BYTE *)this + 200) = a2;
    if (*((_BYTE *)this + 104))
      v2 = a2 == 0;
    else
      v2 = 1;
    if (!v2)
    {
      WebCore::CoreAudioCaptureSourceFactory::singleton(this);
      return (WebCore::CoreAudioCaptureSourceFactory *)WebCore::CoreAudioCaptureSourceFactory::registerSpeakerSamplesProducer();
    }
  }
  return this;
}

void WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *this)
{
  char *v2;
  uint64_t v3;
  WebCore::CoreAudioCaptureSourceFactory *v4;
  WebCore::CARingBuffer *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  *(_QWORD *)this = off_1E34BBD78;
  *((_QWORD *)this + 2) = &unk_1E34BBDD8;
  v2 = (char *)this + 16;
  *((_QWORD *)this + 4) = &unk_1E34BBE10;
  v3 = WebCore::AudioSession::sharedSession(this);
  v4 = (WebCore::CoreAudioCaptureSourceFactory *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v3 + 216))(v3, v2);
  *((_BYTE *)this + 104) = 0;
  WebCore::CoreAudioCaptureSourceFactory::singleton(v4);
  WebCore::CoreAudioCaptureSourceFactory::unregisterSpeakerSamplesProducer();
  (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7));
  if (*((_BYTE *)this + 192))
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this + 112));
  v5 = (WebCore::CARingBuffer *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((_DWORD)this + 96, v5);
  IPC::Semaphore::destroy((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this + 88));
  WTF::MachSendRight::~MachSendRight((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this + 88));
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 6);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v7);
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v8);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *this)
{
  WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this - 16));
}

{
  WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this - 32));
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::~RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this - 32));
  WTF::fastFree(v1, v2);
}

IPC::Encoder *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::reset(IPC::Encoder *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  void *v6;
  IPC::Encoder *v7;

  if (*((_BYTE *)this + 201))
  {
    *((_BYTE *)this + 201) = 0;
    v1 = *((_QWORD *)this + 6);
    v2 = (uint64_t *)((char *)this + 40);
    v3 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v3 = 55;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 528) = v3 + 16;
    *(_QWORD *)(v3 + 536) = v3 + 16;
    *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v3 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
    v7 = (IPC::Encoder *)v3;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, v2);
    IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
    this = v7;
    v7 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v4);
      return (IPC::Encoder *)WTF::fastFree(v5, v6);
    }
  }
  return this;
}

IPC::Encoder *`non-virtual thunk to'WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::reset(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *this)
{
  return WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::reset((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this - 32));
}

uint64_t WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::render(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *this, unint64_t a2, AudioBufferList *a3, unint64_t a4, double a5, unsigned int *a6)
{
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t i;

  result = WebCore::CARingBuffer::fetchIfHasEnoughData();
  if ((_DWORD)result)
  {
    v11 = 0;
    *((_QWORD *)this + 8) += a2;
  }
  else
  {
    if (!*((_BYTE *)this + 192))
    {
      __break(1u);
      return result;
    }
    v12 = WebCore::CAAudioStreamDescription::bytesPerFrame((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this + 112));
    WebCore::AudioSampleBufferList::zeroABL((WebCore::AudioSampleBufferList *)a3, (AudioBufferList *)(v12 * a2));
    *a6 = 16;
    v11 = 0xFFFFFFFFLL;
  }
  for (i = *((_QWORD *)this + 9); i < a2; i += *((_QWORD *)this + 10))
    MEMORY[0x19AEBA1A0](*((unsigned int *)this + 23));
  *((_QWORD *)this + 9) = i - a2;
  return v11;
}

uint64_t `non-virtual thunk to'WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::render(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *this, unint64_t a2, AudioBufferList *a3, unint64_t a4, double a5, unsigned int *a6)
{
  return WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::render((WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit *)((char *)this - 32), a2, a3, a4, a5, a6);
}

_BYTE *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::captureUnitIsStarting(_BYTE *this)
{
  _BYTE *v1;
  WebCore::CoreAudioCaptureSourceFactory *v2;

  if (this[104])
  {
    v1 = this;
    v2 = (WebCore::CoreAudioCaptureSourceFactory *)WebCore::CoreAudioCaptureSourceFactory::singleton((WebCore::CoreAudioCaptureSourceFactory *)this);
    this = (_BYTE *)WebCore::CoreAudioCaptureSourceFactory::shouldAudioCaptureUnitRenderAudio(v2);
    if ((_DWORD)this)
      return (_BYTE *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 7) + 24))(*((_QWORD *)v1 + 7));
  }
  return this;
}

_BYTE *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::captureUnitHasStopped(_BYTE *this)
{
  _BYTE *v1;

  if (this[104])
  {
    v1 = this;
    this = (_BYTE *)WebCore::CoreAudioSharedUnit::unit((WebCore::CoreAudioSharedUnit *)this);
    if (!this[36])
      return (_BYTE *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 7) + 16))(*((_QWORD *)v1 + 7));
  }
  return this;
}

uint64_t WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::beginAudioSessionInterruption(uint64_t this)
{
  if (*(_BYTE *)(this + 104))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 56) + 24))(*(_QWORD *)(this + 56));
  return this;
}

uint64_t `non-virtual thunk to'WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::beginAudioSessionInterruption(uint64_t this)
{
  if (*(_BYTE *)(this + 88))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 40) + 24))(*(_QWORD *)(this + 40));
  return this;
}

WebCore::CoreAudioSharedUnit *WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::endAudioSessionInterruption(WebCore::CoreAudioSharedUnit *result)
{
  WebCore::CoreAudioSharedUnit *v1;

  if (*((_BYTE *)result + 104))
  {
    v1 = result;
    if (!*((_BYTE *)result + 200))
      return (WebCore::CoreAudioSharedUnit *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 7) + 16))(*((_QWORD *)v1 + 7));
    result = (WebCore::CoreAudioSharedUnit *)WebCore::CoreAudioSharedUnit::unit(result);
    if (!*((_BYTE *)result + 377))
    {
      result = (WebCore::CoreAudioSharedUnit *)WebCore::CoreAudioSharedUnit::unit(result);
      if (!*((_BYTE *)result + 36))
        return (WebCore::CoreAudioSharedUnit *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 7) + 16))(*((_QWORD *)v1 + 7));
    }
  }
  return result;
}

WebCore::CoreAudioSharedUnit *`non-virtual thunk to'WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::endAudioSessionInterruption(uint64_t a1)
{
  return WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::endAudioSessionInterruption((WebCore::CoreAudioSharedUnit *)(a1 - 16));
}

uint64_t WebKit::RemoteSampleBufferDisplayLayer::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

_DWORD *WebKit::RemoteSampleBufferDisplayLayer::deref(_DWORD *this)
{
  if (this[4] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
  --this[4];
  return this;
}

uint64_t WebKit::RemoteSampleBufferDisplayLayer::canShowWhileLocked(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  return 0;
}

uint64_t WebKit::RemoteSampleBufferDisplayLayer::messageSenderDestinationID(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteSampleBufferDisplayLayer::messageSenderDestinationID(WebKit::RemoteSampleBufferDisplayLayer *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::format(uint64_t this)
{
  if (*(_BYTE *)(this + 192))
    this += 112;
  else
    __break(1u);
  return this;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (_DWORD *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (v5[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
          else
            --v5[4];
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E34BBFD0;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,BOOL,WTF::CompletionHandler<void ()(std::optional<unsigned int>)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34BBE40;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,BOOL,WTF::CompletionHandler<void ()(std::optional<unsigned int>)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34BBE40;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,BOOL,WTF::CompletionHandler<void ()(std::optional<unsigned int>)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  id *v5;
  id *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  WebKit::LayerHostingContext *v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8) && (a2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    WebKit::LayerHostingContext::createForExternalHostingProcess((unsigned __int8 *)(a1 + 24), (uint64_t *)&v16);
    v5 = (id *)v16;
    v16 = 0;
    std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)(v4 + 88), v5);
    v6 = (id *)v16;
    v16 = 0;
    if (v6)
    {
      WebKit::LayerHostingContext::~LayerHostingContext(v6);
      WTF::fastFree(v7, v8);
    }
    v9 = *(_QWORD *)(v4 + 88);
    v10 = WebCore::LocalSampleBufferDisplayLayer::rootLayer(*(WebCore::LocalSampleBufferDisplayLayer **)(v4 + 80));
    v11 = *(void **)(v9 + 16);
    if (!v11)
      v11 = *(void **)(v9 + 8);
    objc_msgSend(v11, "setLayer:", v10);
    v12 = WebKit::LayerHostingContext::contextID(*(id **)(v4 + 88));
    v13 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v12 | 0x100000000);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::close(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34BBE68;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::close(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34BBE68;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::close(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  int v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 56);
  if (__ldaxr((unsigned __int8 *)(v1 + 56)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](v1 + 56);
LABEL_5:
  v4 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34BBE90;
  v5[1] = v4;
  v8 = v5;
  WTF::callOnMainRunLoop();
  result = (uint64_t)v8;
  if (v8)
    result = (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 56));
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 56));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::close(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34BBE90;
  v3 = a1[1];
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::close(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34BBE90;
  v3 = *((_QWORD *)this + 1);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::createLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,WebCore::IntSize,BOOL,BOOL,WTF::CompletionHandler<void ()(std::optional<unsigned int>)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34BBEB8;
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::createLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,WebCore::IntSize,BOOL,BOOL,WTF::CompletionHandler<void ()(std::optional<unsigned int>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34BBEB8;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::createLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,BOOL,WebCore::IntSize,BOOL,BOOL,WTF::CompletionHandler<void ()(std::optional<unsigned int>)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *result;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  unsigned __int8 **v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned __int8 **v21;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 **)(v2 + 24);
  if (!v3)
  {
    v20 = 0;
LABEL_3:
    v4 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
    result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    goto LABEL_4;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v3, *(_QWORD *)(v2 + 32), &v20);
  v7 = v20;
  if (!v20)
    goto LABEL_3;
  v8 = *(_QWORD *)(a1 + 24);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v21, *(unsigned __int8 ***)(v2 + 40));
  v9 = WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v9 + 16) = 1;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)v9 = off_1E34BBC28;
  *(_QWORD *)(v9 + 24) = &unk_1E34BBC80;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = &unk_1E34BBCB8;
  v10 = (WTF::ThreadSafeWeakPtrControlBlock *)v7[2];
  if (v10)
    v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
  *(_QWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 56) = v7;
  v11 = v21;
  v21 = 0;
  *(_QWORD *)(v9 + 64) = v8;
  *(_QWORD *)(v9 + 72) = v11;
  WebCore::LocalSampleBufferDisplayLayer::create();
  *(_QWORD *)(v9 + 88) = 0;
  v12 = v7[24];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v12 + 16));
  *(_QWORD *)(v9 + 96) = v12;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v9 + 104), (const WTF::MachSendRight *)(v7 + 11));
  *(_BYTE *)(v9 + 108) = 1;
  *(_BYTE *)(v9 + 112) = 0;
  *(_BYTE *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 168) = 0;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_DWORD *)(v9 + 160) = 0;
  if (!*(_QWORD *)(v9 + 80))
  {
    if (*(_DWORD *)(v9 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    else
      --*(_DWORD *)(v9 + 16);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
    goto LABEL_3;
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v21);
  v13 = *(unsigned __int8 *)(a1 + 45);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v2 + 16));
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v16 = &off_1E34BBEE0;
  v16[1] = v2;
  v16[2] = v2;
  v16[3] = v14;
  v16[4] = v15;
  v16[5] = v9;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 8), v9);
  v17 = *(unsigned int **)(v9 + 8);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v19 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v19 = &off_1E34BBE40;
  *(_QWORD *)(v19 + 8) = v9;
  *(_QWORD *)(v19 + 16) = v17;
  *(_WORD *)(v19 + 24) = v13;
  *(_QWORD *)(v19 + 32) = v16;
  v21 = (unsigned __int8 **)v19;
  WebCore::LocalSampleBufferDisplayLayer::initialize();
  result = (unsigned __int8 *)v21;
  v21 = 0;
  if (result)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
LABEL_4:
  v6 = v20;
  v20 = 0;
  if (v6)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>((unsigned __int8 *)v6[2]);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit37RemoteSampleBufferDisplayLayerManager11createLayerENS_23ObjectIdentifierGenericINS2_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEN3__0clEvEUlT_E_vJSE_EED1Ev(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34BBEE0;
  v3 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit37RemoteSampleBufferDisplayLayerManager11createLayerENS_23ObjectIdentifierGenericINS2_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEN3__0clEvEUlT_E_vJSE_EED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34BBEE0;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit37RemoteSampleBufferDisplayLayerManager11createLayerENS_23ObjectIdentifierGenericINS2_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEN3__0clEvEUlT_E_vJSE_EE4callESE_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = a2 & 0xFFFFFFFFFFLL;
  v7 = *(_OWORD *)(a1 + 8);
  v8 = *(_OWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v7 + 48);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v5 = &off_1E34BBF08;
  *(_OWORD *)(v5 + 8) = v7;
  *(_OWORD *)(v5 + 24) = v8;
  *(_QWORD *)(v5 + 40) = v2;
  *(_QWORD *)(v5 + 48) = v3;
  v9 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 32))(v4, &v9);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit37RemoteSampleBufferDisplayLayerManager11createLayerENS_23ObjectIdentifierGenericINS2_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEN3__0clEvENUlT_E_clISE_EEDaSJ_EUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34BBF08;
  v3 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit37RemoteSampleBufferDisplayLayerManager11createLayerENS_23ObjectIdentifierGenericINS2_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEN3__0clEvENUlT_E_clISE_EEDaSJ_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34BBF08;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit37RemoteSampleBufferDisplayLayerManager11createLayerENS_23ObjectIdentifierGenericINS2_38SampleBufferDisplayLayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEbN7WebCore7IntSizeEbbONS_17CompletionHandlerIFvNSt3__18optionalIjEEEEEEN3__0clEvENUlT_E_clISE_EEDaSJ_EUlvE_vJEE4callEv(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  int v29;

  v2 = a1[1];
  v3 = (unsigned __int8 *)(v2 + 56);
  if (__ldaxr((unsigned __int8 *)(v2 + 56)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](v2 + 56);
    goto LABEL_5;
  }
  if (__stxr(1u, v3))
    goto LABEL_4;
LABEL_5:
  v7 = *(_QWORD *)(v2 + 64);
  v6 = (uint64_t *)(v2 + 64);
  v5 = v7;
  if (v7
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6),
        (v5 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = a1[4];
  v10 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (_QWORD *)(v5 + 16 * v13);
  v15 = *v14;
  if (!*v14)
  {
LABEL_16:
    *v14 = v9;
    v18 = a1[5];
    a1[5] = 0;
    v19 = (_DWORD *)v14[1];
    v14[1] = v18;
    if (v19)
    {
      if (v19[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
      else
        --v19[4];
    }
    v20 = *v6;
    if (*v6)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v6;
    if (*v6)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_29;
    }
    else if (3 * v25 > 4 * v24)
    {
      goto LABEL_29;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6);
    goto LABEL_29;
  }
  v16 = 0;
  v17 = 1;
  while (v15 != v9)
  {
    if (v15 == -1)
      v16 = v14;
    v13 = (v13 + v17) & v8;
    v14 = (_QWORD *)(v5 + 16 * v13);
    v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v9 = a1[4];
        v14 = v16;
      }
      goto LABEL_16;
    }
  }
LABEL_29:
  v26 = a1[6];
  v27 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v26);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v29 = __ldxr(v3);
  if (v29 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  if (__stlxr(0, v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (_DWORD *)v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (v24[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
            else
              --v24[4];
          }
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(_DWORD **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_25;
          if (v13[4] == 1)
          {
LABEL_24:
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
            goto LABEL_25;
          }
          --v13[4];
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(_DWORD **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            if (v13[4] == 1)
              goto LABEL_24;
            --v13[4];
          }
        }
      }
LABEL_25:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34BBF30;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34BBF30;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 24);
  v5 = *(_OWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(a1 + 16) = 0;
  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v3 = &off_1E34BBF58;
  *(_OWORD *)(v3 + 8) = v5;
  *(_QWORD *)(v3 + 24) = v1;
  v6 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 32))(v2, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34BBF58;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34BBF58;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v28;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (unsigned __int8 *)(v2 + 56);
  if (__ldaxr((unsigned __int8 *)(v2 + 56)))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](v2 + 56);
    goto LABEL_5;
  }
  if (__stxr(1u, v3))
    goto LABEL_4;
LABEL_5:
  v7 = *(_QWORD *)(v2 + 64);
  v6 = (uint64_t *)(v2 + 64);
  v5 = v7;
  if (!v7)
    goto LABEL_13;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v5 - 8);
  v10 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(_QWORD *)(v5 + 16 * v13);
  if (v14 != v8)
  {
    v15 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(_QWORD *)(v5 + 16 * v13);
      ++v15;
      if (v14 == v8)
        goto LABEL_12;
    }
    v13 = *(unsigned int *)(v5 - 4);
  }
LABEL_12:
  if (v13 != *(_DWORD *)(v5 - 4))
  {
    v20 = (_QWORD *)(v5 + 16 * v13);
    v21 = v20 + 1;
    v16 = v20[1];
    if (v16 && (*v21 = 0, (v5 = *v6) == 0) || (v5 += 16 * *(unsigned int *)(v5 - 4), (_QWORD *)v5 != v20))
    {
      if ((_QWORD *)v5 != v20)
      {
        *v20 = -1;
        *v21 = 0;
        ++*(_DWORD *)(*v6 - 16);
        v22 = *v6;
        v23 = *v6 ? *(_DWORD *)(v22 - 12) - 1 : -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v6;
        if (*v6)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteSampleBufferDisplayLayer,WTF::RawPtrTraits<WebKit::RemoteSampleBufferDisplayLayer>,WTF::DefaultRefDerefTraits<WebKit::RemoteSampleBufferDisplayLayer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v6, v26 >> 1);
        }
      }
    }
  }
  else
  {
LABEL_13:
    v16 = 0;
  }
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = &off_1E34BBF80;
  v17[1] = v16;
  v28 = v17;
  WTF::callOnMainRunLoop();
  result = (uint64_t)v28;
  if (v28)
    result = (*(uint64_t (**)(_QWORD *))(*v28 + 8))(v28);
  v19 = __ldxr(v3);
  if (v19 == 1)
  {
    if (!__stlxr(0, v3))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34BBF80;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteSampleBufferDisplayLayerManager::releaseLayer(WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BBF80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit(WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)> &&)::$_0,void,WebCore::CAAudioStreamDescription>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34BBFA8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit(WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)> &&)::$_0,void,WebCore::CAAudioStreamDescription>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34BBFA8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit::RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit(WTF::ObjectIdentifierGeneric<WebKit::AudioMediaStreamTrackRendererInternalUnitIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>> &&,BOOL,WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)> &&)::$_0,void,WebCore::CAAudioStreamDescription>::call(_QWORD *a1, WebCore::CAAudioStreamDescription *this)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  NSObject *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  char v23;

  v4 = a1[1];
  if (v4 && *(_QWORD *)(v4 + 8) && *((_BYTE *)this + 80))
  {
    v5 = a1[2];
    WebCore::CAAudioStreamDescription::sampleRate(this);
    if (!*((_BYTE *)this + 80))
      goto LABEL_18;
    v7 = (unint64_t)(v6 * 10.0 / 1000.0);
    v8 = MEMORY[0x1E0DD8FD8];
    if (*(_BYTE *)(v5 + 192))
    {
      v9 = *(_OWORD *)((char *)this + 8);
      v10 = *(_OWORD *)((char *)this + 24);
      *(_QWORD *)(v5 + 152) = *((_QWORD *)this + 5);
      *(_OWORD *)(v5 + 136) = v10;
      *(_OWORD *)(v5 + 120) = v9;
      v11 = *((_OWORD *)this + 3);
      *(_QWORD *)(v5 + 176) = *((_QWORD *)this + 8);
      *(_OWORD *)(v5 + 160) = v11;
      *(_DWORD *)(v5 + 184) = *((_DWORD *)this + 18);
    }
    else
    {
      *(_QWORD *)(v5 + 112) = MEMORY[0x1E0DD8FD8] + 16;
      *(_OWORD *)(v5 + 120) = *(_OWORD *)((char *)this + 8);
      v13 = *(_OWORD *)((char *)this + 24);
      v14 = *(_OWORD *)((char *)this + 40);
      v15 = *(_OWORD *)((char *)this + 56);
      *(_DWORD *)(v5 + 184) = *((_DWORD *)this + 18);
      *(_OWORD *)(v5 + 168) = v15;
      *(_OWORD *)(v5 + 152) = v14;
      *(_OWORD *)(v5 + 136) = v13;
      *(_BYTE *)(v5 + 192) = 1;
    }
    v16 = v7 <= 0x80 ? 128 : v7;
    *(_QWORD *)(v5 + 80) = v16;
    if (*((_BYTE *)this + 80))
    {
      v17 = v8 + 16;
      v19 = *(_OWORD *)((char *)this + 24);
      v20 = *(_OWORD *)((char *)this + 40);
      v21 = *(_OWORD *)((char *)this + 56);
      v22 = *((_DWORD *)this + 18);
      v18 = *(_OWORD *)((char *)this + 8);
      v23 = 1;
      WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)>::operator()(a1 + 3, (uint64_t)&v17);
      WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v17);
    }
    else
    {
LABEL_18:
      __break(1u);
    }
  }
  else
  {
    if (!*((_BYTE *)this + 80))
    {
      v12 = qword_1ECE71B18;
      if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "RemoteAudioMediaStreamTrackRendererInternalUnitManagerUnit unable to get format description", (uint8_t *)&v17, 2u);
      }
    }
    LOBYTE(v17) = 0;
    v23 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)>::operator()(a1 + 3, (uint64_t)&v17);
  }
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>,unsigned long)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  char v19;

  v2 = *a1;
  *a1 = 0;
  LOBYTE(v6) = 0;
  v12 = 0;
  v3 = *(unsigned __int8 *)(a2 + 80);
  if (*(_BYTE *)(a2 + 80))
  {
    v6 = MEMORY[0x1E0DD8FD8] + 16;
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    v10 = *(_OWORD *)(a2 + 56);
    v11 = *(_DWORD *)(a2 + 72);
    v7 = *(_OWORD *)(a2 + 8);
    v12 = 1;
    v13 = MEMORY[0x1E0DD8FD8] + 16;
    v4 = *(_OWORD *)(a2 + 24);
    v16 = *(_OWORD *)(a2 + 40);
    v17 = *(_OWORD *)(a2 + 56);
    v18 = *(_DWORD *)(a2 + 72);
    v14 = *(_OWORD *)(a2 + 8);
    v15 = v4;
    v19 = 1;
  }
  else
  {
    LOBYTE(v13) = 0;
    v19 = 0;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v13);
  if (v19)
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v13);
  if (v3)
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_1970966F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_197096774(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_19709681C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_197096ACC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_197096B70(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  WebCore::Cookie::~Cookie((WebCore::Cookie *)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_197096D6C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;
  unsigned int **v3;
  void *v5;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  WTF::fastFree(v2, v5);
  _Unwind_Resume(a1);
}

void sub_197096EF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_197096FA0(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_19709702C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_197097164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_197097234(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970972C0(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t checkChallenge(NSURLAuthenticationChallenge *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = objc_opt_class();
  result = objc_opt_class();
  if (v1 != result)
    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("The challenge was not sent by the receiver."));
  return result;
}

void sub_197097C10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  CFRelease(*(CFTypeRef *)(v1 + 8));
  CFRelease(*(CFTypeRef *)(v3 + 8));
  _Unwind_Resume(a1);
}

void sub_197097D2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_197097DD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t API::ObjectImpl<(API::Object::Type)18>::type()
{
  return 18;
}

void WKHTTPCookieStoreObserver::~WKHTTPCookieStoreObserver(id *this)
{
  unsigned int **v1;
  void *v2;

  *this = off_1E34BC178;
  v1 = (unsigned int **)(this + 1);
  objc_destroyWeak(this + 2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1, v2);
}

{
  unsigned int **v2;
  void *v3;
  void *v4;

  *this = off_1E34BC178;
  v2 = (unsigned int **)(this + 1);
  objc_destroyWeak(this + 2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, v3);
  WTF::fastFree((WTF *)this, v4);
}

uint64_t WKHTTPCookieStoreObserver::cookiesDidChange(id *this, API::HTTPCookieStore *a2)
{
  id *v3;
  uint64_t result;

  v3 = this + 2;
  objc_loadWeak(this + 2);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return objc_msgSend(objc_loadWeak(v3), "cookiesDidChangeInCookieStore:", *((_QWORD *)a2 + 1));
  return result;
}

CFTypeRef coreCookiesToNSCookies(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)a1 + 3));
  v3 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a1;
    v5 = 136 * v3;
    do
    {
      v6 = WebCore::Cookie::operator NSHTTPCookie *();
      if (v6)
        objc_msgSend(v2, "addObject:", v6);
      v4 += 136;
      v5 -= 136;
    }
    while (v5);
  }
  return (id)CFMakeCollectable(v2);
}

void sub_197098084(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WebCore::Cookie *WebCore::Cookie::Cookie(WebCore::Cookie *this, const WebCore::Cookie *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  __int128 v8;
  _DWORD *v9;
  _DWORD *v10;
  __int128 v11;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 1) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 2) = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 3) = v7;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 43) = *(_OWORD *)((char *)a2 + 43);
  *((_OWORD *)this + 2) = v8;
  v9 = (_DWORD *)*((_QWORD *)a2 + 8);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 8) = v9;
  v10 = (_DWORD *)*((_QWORD *)a2 + 9);
  if (v10)
    *v10 += 2;
  *((_QWORD *)this + 9) = v10;
  v11 = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 6) = v11;
  WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 112, (uint64_t)a2 + 112);
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  return this;
}

void sub_19709817C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v4 = v2[9];
  v2[9] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v2[8];
  v2[8] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v2[3];
  v2[3] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v2[2];
  v2[2] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v2[1];
  v2[1] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *v2;
  *v2 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<void const*,WTF::KeyValuePair<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<std::unique_ptr<WKHTTPCookieStoreObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<void const*,WTF::KeyValuePair<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<std::unique_ptr<WKHTTPCookieStoreObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<void const*,WTF::KeyValuePair<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,std::unique_ptr<WKHTTPCookieStoreObserver>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<std::unique_ptr<WKHTTPCookieStoreObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void sub_197098D7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_197099E2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_197099F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  CFRelease(*(CFTypeRef *)(v9 + 8));
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_19709A034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  CFRelease(*(CFTypeRef *)(v9 + 8));
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_19709BC48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  uint64_t v11;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  _Unwind_Resume(exception_object);
}

void sub_19709BDF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  uint64_t v11;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  _Unwind_Resume(exception_object);
}

void didNavigateWithNavigationData(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  id WeakRetained;

  if (a4)
    v6 = objc_msgSend(a4, "_apiObject");
  else
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      if (*(_QWORD *)(v8 + 264) == v6 || (v9 = *(_QWORD *)(v8 + 1104)) != 0 && *(_QWORD *)(v9 + 72) == v6)
      {
        v10 = +[WKBrowsingContextController _browsingContextControllerForPageRef:](WKBrowsingContextController, "_browsingContextControllerForPageRef:", a2);
        WeakRetained = objc_loadWeakRetained(v10 + 1);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(WeakRetained, "browsingContextController:didNavigateWithNavigationData:", v10, *(_QWORD *)(objc_msgSend(a3, "_apiObject") + 8));
        if (WeakRetained)
          CFRelease(WeakRetained);
      }
    }
  }
}

void sub_19709BFC0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didPerformClientRedirect(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  id WeakRetained;

  if (a5)
    v8 = objc_msgSend(a5, "_apiObject");
  else
    v8 = 0;
  v9 = *(_QWORD *)(v8 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 264) == v8 || (v11 = *(_QWORD *)(v10 + 1104)) != 0 && *(_QWORD *)(v11 + 72) == v8)
      {
        v12 = +[WKBrowsingContextController _browsingContextControllerForPageRef:](WKBrowsingContextController, "_browsingContextControllerForPageRef:", a2);
        WeakRetained = objc_loadWeakRetained(v12 + 1);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(WeakRetained, "browsingContextController:didPerformClientRedirectFromURL:toURL:", v12, *(_QWORD *)(objc_msgSend(a3, "_apiObject") + 8), *(_QWORD *)(objc_msgSend(a4, "_apiObject") + 8));
        if (WeakRetained)
          CFRelease(WeakRetained);
      }
    }
  }
}

void sub_19709C0B8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didPerformServerRedirect(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  id WeakRetained;

  if (a5)
    v8 = objc_msgSend(a5, "_apiObject");
  else
    v8 = 0;
  v9 = *(_QWORD *)(v8 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 264) == v8 || (v11 = *(_QWORD *)(v10 + 1104)) != 0 && *(_QWORD *)(v11 + 72) == v8)
      {
        v12 = +[WKBrowsingContextController _browsingContextControllerForPageRef:](WKBrowsingContextController, "_browsingContextControllerForPageRef:", a2);
        WeakRetained = objc_loadWeakRetained(v12 + 1);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(WeakRetained, "browsingContextController:didPerformServerRedirectFromURL:toURL:", v12, *(_QWORD *)(objc_msgSend(a3, "_apiObject") + 8), *(_QWORD *)(objc_msgSend(a4, "_apiObject") + 8));
        if (WeakRetained)
          CFRelease(WeakRetained);
      }
    }
  }
}

void sub_19709C1B0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didUpdateHistoryTitle(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  id WeakRetained;

  if (a5)
    v8 = objc_msgSend(a5, "_apiObject");
  else
    v8 = 0;
  v9 = *(_QWORD *)(v8 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 264) == v8 || (v11 = *(_QWORD *)(v10 + 1104)) != 0 && *(_QWORD *)(v11 + 72) == v8)
      {
        v12 = +[WKBrowsingContextController _browsingContextControllerForPageRef:](WKBrowsingContextController, "_browsingContextControllerForPageRef:", a2);
        WeakRetained = objc_loadWeakRetained(v12 + 1);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(WeakRetained, "browsingContextController:didUpdateHistoryTitle:forURL:", v12, *(_QWORD *)(objc_msgSend(a3, "_apiObject") + 8), *(_QWORD *)(objc_msgSend(a4, "_apiObject") + 8));
        if (WeakRetained)
          CFRelease(WeakRetained);
      }
    }
  }
}

void sub_19709C2A8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::BackgroundFetchLoad::BackgroundFetchLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  __int128 v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  __int128 v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t result;
  uint64_t v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  __int128 v41;
  WTF::StringImpl *v42;
  CFTypeRef v43;
  WTF::StringImpl *v44;
  CFTypeRef v45;
  WTF::StringImpl *v46;
  int v47;
  unint64_t v48;
  BOOL v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  BOOL v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  void *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  WTF::StringImpl *v68;
  CFTypeRef v69;
  int v70;
  WTF::StringImpl *v71;
  _BYTE v72[40];
  WTF::StringImpl *v73;
  int v74;
  __int16 v75;
  CFTypeRef v76;
  char v77;
  WTF::StringImpl *v78;
  WTF *v79;
  WTF *v80;
  WTF *v81;
  WTF::StringImpl *v82[5];
  uint64_t v83[2];
  _BYTE v84[16];
  WTF *v85;
  WTF *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  _OWORD v89[7];
  char v90;
  CFTypeRef v91;
  CFTypeRef cf;
  char v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = &unk_1E34BC3A0;
  v12 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  v13 = (unsigned int *)(a1 + 16);
  *(_QWORD *)a1 = off_1E34BC328;
  *(_QWORD *)(a1 + 24) = a3;
  v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_98;
  v14 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = a4;
  v17 = *(unsigned int **)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v14;
  if (!v17)
    goto LABEL_98;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v16);
  }
  v14 = *(_QWORD *)(a4 + 8);
  if (v14)
  {
LABEL_98:
    do
      v20 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v20 + 1, (unsigned int *)v14));
  }
  *(_QWORD *)(a1 + 32) = v14;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 40), (const WebCore::ResourceRequest *)a5);
  WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)(a1 + 240));
  *(_QWORD *)(a1 + 4016) = 0;
  LODWORD(v87) = *(_DWORD *)(a5 + 208);
  *(_DWORD *)((char *)&v87 + 3) = *(_DWORD *)(a5 + 211);
  v21 = *(WTF::StringImpl **)(a5 + 216);
  if (v21)
    *(_DWORD *)v21 += 2;
  v88 = v21;
  v22 = *(_OWORD *)(a5 + 240);
  v89[0] = *(_OWORD *)(a5 + 224);
  v89[1] = v22;
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v83, (WTF::ASCIILiteral *)(a5 + 264));
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v84, (WTF::ASCIILiteral *)(a5 + 280));
  v23 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 40));
  v24 = *(WTF::StringImpl **)v23;
  if (*(_QWORD *)v23)
    *(_DWORD *)v24 += 2;
  v71 = v24;
  v25 = *(_OWORD *)(v23 + 24);
  *(_OWORD *)v72 = *(_OWORD *)(v23 + 8);
  *(_OWORD *)&v72[16] = v25;
  v82[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v82);
  WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)(a7 + 32));
  WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)a7);
  v79 = 0;
  v26 = *(WTF::StringImpl **)(a5 + 296);
  if (v26)
    *(_DWORD *)v26 += 2;
  v78 = v26;
  v27 = WTF::fastMalloc((WTF *)0x490);
  v28 = *(_QWORD *)(a1 + 24);
  v29 = v80;
  v30 = v81;
  v80 = 0;
  v81 = 0;
  v85 = v29;
  v86 = v30;
  *(_QWORD *)(a1 + 4024) = WebKit::NetworkLoadChecker::NetworkLoadChecker(v27, a2, 0, 0, (int *)&v87, v28, 0, v83, (uint64_t *)&v71, (uint64_t *)v82, (uint64_t *)&v86, (uint64_t *)&v85, (uint64_t *)&v79, 0, (uint64_t *)&v78, 1, v70, 0, 0,
                             0,
                             1);
  if (v85)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v85, v31);
  if (v86)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v86, v31);
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v31);
    else
      *(_DWORD *)v78 -= 2;
  }
  if (v79)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v79, v31);
  v32 = v80;
  v80 = 0;
  if (v32)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v32, v31);
  v33 = v81;
  v81 = 0;
  if (v33)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v33, v31);
  v34 = v82[0];
  v82[0] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v31);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v71;
  v71 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v31);
    else
      *(_DWORD *)v35 -= 2;
  }
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v84);
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v83);
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
      WTF::StringImpl::destroy(v88, v36);
    else
      *(_DWORD *)v88 -= 2;
  }
  *(_OWORD *)(a1 + 4032) = 0u;
  result = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 40));
  if ((*(_BYTE *)(result + 8) & 2) == 0)
  {
    v38 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 40));
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v39 = v87;
    v71 = 0;
    v40 = *(_DWORD **)v38;
    if (*(_QWORD *)v38)
      *v40 += 2;
    *(_QWORD *)v72 = v40;
    v41 = *(_OWORD *)(v38 + 8);
    *(_OWORD *)&v72[24] = *(_OWORD *)(v38 + 24);
    *(_OWORD *)&v72[8] = v41;
    if (v39)
      *(_DWORD *)v39 += 2;
    v73 = v39;
    v74 = 0;
    v75 = 3;
    v76 = 0;
    v77 = 1;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v87);
    cf = 0;
    v93 = 0;
    v90 = v90 & 0xF1 | 4;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v71);
    v43 = cf;
    cf = 0;
    if (v43)
      CFRelease(v43);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v87, v42);
    v45 = v76;
    v76 = 0;
    if (v45)
      CFRelease(v45);
    v46 = v73;
    v73 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v44);
      else
        *(_DWORD *)v46 -= 2;
    }
    v60 = *(WTF::StringImpl **)v72;
    *(_QWORD *)v72 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v44);
      else
        *(_DWORD *)v60 -= 2;
    }
    v61 = v71;
    v71 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::destroy(v61, v44);
        if (!v39)
          return a1;
LABEL_79:
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v44);
        else
          *(_DWORD *)v39 -= 2;
        return a1;
      }
      *(_DWORD *)v61 -= 2;
    }
    if (!v39)
      return a1;
    goto LABEL_79;
  }
  if (!a6)
  {
LABEL_83:
    v62 = *(_QWORD *)(a1 + 4024);
    *(_BYTE *)(v62 + 528) = 1;
    if (!*(_BYTE *)(a5 + 324))
    {
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v87, (uint64_t *)(a5 + 304));
      LODWORD(v89[0]) = *(_DWORD *)(a5 + 320);
      BYTE4(v89[0]) = *(_BYTE *)(a5 + 324);
      std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>(v62 + 264, (uint64_t *)&v87);
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v63);
      v62 = *(_QWORD *)(a1 + 4024);
    }
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&v87, (const WebCore::ResourceRequest *)(a1 + 40));
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v13, v12);
    v64 = *(unsigned int **)v13;
    if (*(_QWORD *)v13)
    {
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 + 1, v64));
    }
    v66 = (unsigned int *)(a2 + 120);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 + 1, v66));
    v68 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v68 = &off_1E34BC728;
    *((_QWORD *)v68 + 1) = a1;
    *((_QWORD *)v68 + 2) = v64;
    *((_QWORD *)v68 + 3) = a2;
    v71 = v68;
    WebKit::NetworkLoadChecker::check(v62, (WebCore::ResourceRequestBase *)&v87, 0, &v71);
    if (v71)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v71 + 8))(v71);
    v69 = v91;
    v91 = 0;
    if (v69)
      CFRelease(v69);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v87);
    return a1;
  }
  v47 = 0;
  v48 = a6;
  do
  {
    ++v47;
    v49 = v48 > 9;
    v48 /= 0xAuLL;
  }
  while (v49);
  if ((v47 & 0x80000000) == 0)
  {
    v50 = __OFADD__(v47, 1);
    v51 = v47 + 1;
    if (!v50)
    {
      v52 = (v51 + 6);
      if (!__OFADD__(v51, 6))
      {
        result = WTF::tryFastCompactMalloc((WTF *)(v52 + 20));
        v53 = v87;
        if (v87)
        {
          v54 = 0;
          *(_DWORD *)v87 = 2;
          *((_DWORD *)v53 + 1) = v52;
          *((_QWORD *)v53 + 1) = (char *)v53 + 20;
          *((_QWORD *)v53 + 2) = 0x6574796200000004;
          v55 = a6;
          *((_WORD *)v53 + 12) = 15731;
          do
          {
            *((_BYTE *)v89 + v54-- + 8) = (v55 % 0xA) | 0x30;
            v49 = v55 > 9;
            v55 /= 0xAuLL;
          }
          while (v49);
          if (v54 + 26 <= 25)
            memcpy((char *)v53 + 26, (char *)v89 + v54 + 9, -v54);
          v56 = 0;
          do
          {
            ++v56;
            v57 = a6 >= 0xA;
            a6 /= 0xAuLL;
          }
          while (v57);
          *((_BYTE *)v53 + v56 + 26) = 45;
          v87 = v53;
          WebCore::ResourceRequestBase::setHTTPHeaderField();
          v59 = v87;
          v87 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, v58);
            else
              *(_DWORD *)v59 -= 2;
          }
          goto LABEL_83;
        }
      }
    }
  }
  __break(0xC471u);
  return result;
}

void WebKit::BackgroundFetchLoad::~BackgroundFetchLoad(WebKit::BackgroundFetchLoad *this, void *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  WebKit::BackgroundFetchLoad::abort((unsigned __int8 *)this, a2);
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 4032, v3);
  std::unique_ptr<WebKit::NetworkLoadChecker>::reset[abi:sn180100]((WebKit::NetworkLoadChecker **)this + 503, 0);
  v5 = *((_QWORD *)this + 502);
  *((_QWORD *)this + 502) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v5 + 8));
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::BackgroundFetchLoad *)((char *)this + 240), v4);
  v6 = (const void *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::BackgroundFetchLoad *)((char *)this + 40));
  v8 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v7);
}

{
  WTF *v2;
  void *v3;

  WebKit::BackgroundFetchLoad::~BackgroundFetchLoad(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned __int8 *WebKit::BackgroundFetchLoad::abort(unsigned __int8 *this, void *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 502);
  if (v2)
  {
    v3 = this;
    v4 = *(unsigned int **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    this = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 502) + 16))(*((_QWORD *)v3 + 502));
    v7 = *((_QWORD *)v3 + 502);
    *((_QWORD *)v3 + 502) = 0;
    if (v7)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 8));
  }
  return this;
}

void `non-virtual thunk to'WebKit::BackgroundFetchLoad::~BackgroundFetchLoad(WebKit::BackgroundFetchLoad *this, void *a2)
{
  WebKit::BackgroundFetchLoad::~BackgroundFetchLoad((WebKit::BackgroundFetchLoad *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::BackgroundFetchLoad::~BackgroundFetchLoad((WebKit::BackgroundFetchLoad *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

void WebKit::BackgroundFetchLoad::willPerformHTTPRedirection(uint64_t a1, WebCore::ResourceResponse *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  CFTypeRef v14;
  WTF::StringImpl *v15;
  _BYTE v16[192];
  CFTypeRef cf;

  v8 = *(_QWORD *)(a1 + 4024);
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v16);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1 + 8);
  v9 = *(unsigned int **)(a1 + 16);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *a4;
  *a4 = 0;
  v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v12 = &off_1E34BC768;
  *((_QWORD *)v12 + 1) = v9;
  *((_QWORD *)v12 + 2) = v11;
  v15 = v12;
  WebKit::NetworkLoadChecker::checkRedirection(v8, (uint64_t)v16, a3, a2, 0, &v15);
  v13 = v15;
  v15 = 0;
  if (v13)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
  v14 = cf;
  cf = 0;
  if (v14)
    CFRelease(v14);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v16);
}

void `non-virtual thunk to'WebKit::BackgroundFetchLoad::willPerformHTTPRedirection(uint64_t a1, WebCore::ResourceResponse *a2, uint64_t a3, uint64_t *a4)
{
  WebKit::BackgroundFetchLoad::willPerformHTTPRedirection(a1 - 8, a2, a3, a4);
}

WTF::StringImpl *WebKit::BackgroundFetchLoad::didReceiveChallenge(uint64_t a1, WebCore::AuthenticationChallengeBase *a2, char a3, uint64_t *a4)
{
  NSObject *v8;
  uint64_t *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *result;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  WTF::StringImpl *v24;
  CFTypeRef v25;
  CFTypeRef v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  WTF::StringImpl *v35;
  int v36;
  __int16 v37;
  CFTypeRef v38;
  char v39;
  __int128 buf;
  CFTypeRef v41;
  char v42;
  CFTypeRef cf;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v8 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::didReceiveChallenge", (uint8_t *)&buf, 0xCu);
  }
  if (*(_BYTE *)(WebCore::AuthenticationChallengeBase::protectionSpace(a2) + 21) == 8)
  {
    v9 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 4024) + 80) + 192);
    *(_QWORD *)&buf = "AuthenticationManager";
    *((_QWORD *)&buf + 1) = 22;
    v10 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v9, (WTF::ASCIILiteralHash *)&buf);
    v11 = *(_QWORD *)(a1 + 272);
    if (v11)
      v12 = v11 + 8;
    else
      v12 = 0;
    return (WTF::StringImpl *)WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v10, *(_QWORD *)(a1 + 24), 0, v12, a2, a3, a4);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    do
      v15 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v15 + 1, (unsigned int *)v14));
  }
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&buf);
  v41 = 0;
  v16 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v16 + 16))(v16, 2, &buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v18 = v41;
  v41 = 0;
  if (v18)
    CFRelease(v18);
  v19 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
  *((_QWORD *)&buf + 1) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = (WTF::StringImpl *)buf;
  *(_QWORD *)&buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      if (!v14)
        return result;
      goto LABEL_22;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v14)
    return result;
LABEL_22:
  if (!*(_QWORD *)(v14 + 8))
    goto LABEL_48;
  v20 = *(_QWORD *)(a1 + 4024);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = (WTF::StringImpl *)buf;
  v31 = 0;
  v22 = *(WTF::StringImpl **)(v20 + 160);
  if (v22)
    *(_DWORD *)v22 += 2;
  v32 = v22;
  v23 = *(_OWORD *)(v20 + 184);
  v33 = *(_OWORD *)(v20 + 168);
  v34 = v23;
  if (v21)
    *(_DWORD *)v21 += 2;
  v35 = v21;
  v36 = 0;
  v37 = 2;
  v38 = 0;
  v39 = 1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&buf);
  cf = 0;
  v44 = 0;
  v42 = v42 & 0xF1 | 4;
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v31);
  v25 = cf;
  cf = 0;
  if (v25)
    CFRelease(v25);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&buf, v24);
  v26 = v38;
  v38 = 0;
  if (v26)
    CFRelease(v26);
  v27 = v35;
  v35 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v17);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v32;
  v32 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v17);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      if (!v21)
        goto LABEL_48;
LABEL_45:
      if (*(_DWORD *)v21 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v21, v17);
      else
        *(_DWORD *)v21 -= 2;
      goto LABEL_48;
    }
    *(_DWORD *)result -= 2;
  }
  if (v21)
    goto LABEL_45;
  do
  {
LABEL_48:
    v29 = __ldaxr((unsigned int *)v14);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, (unsigned int *)v14));
  if (!v30)
  {
    atomic_store(1u, (unsigned int *)v14);
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v14, v17);
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::BackgroundFetchLoad::didReceiveChallenge(uint64_t a1, WebCore::AuthenticationChallengeBase *a2, char a3, uint64_t *a4)
{
  return WebKit::BackgroundFetchLoad::didReceiveChallenge(a1 - 8, a2, a3, a4);
}

WTF::StringImpl *WebKit::BackgroundFetchLoad::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  CFTypeRef v23;
  unsigned int v24;
  unsigned int v25;
  CFTypeRef v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  uint64_t v30;
  WTF *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  char v36;
  CFTypeRef v37;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  char v44;
  CFTypeRef cf;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v39 = a1;
    v40 = 1024;
    LODWORD(v41) = WebCore::ResourceResponseBase::httpStatusCode(a2);
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::didReceiveResponse - httpStatusCode=%d", buf, 0x12u);
  }
  WebKit::NetworkLoadChecker::validateResponse(*(WebKit::NetworkLoadChecker **)(a1 + 4024), (const WebCore::ResourceRequest *)(a1 + 40), (WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)a2, (uint64_t)&v32);
  if (v36)
  {
    v9 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      MEMORY[0x19AEB7BFC](&v32);
      WTF::String::utf8();
      v10 = v31 ? (uint64_t)v31 + 16 : 0;
      MEMORY[0x19AEB7BFC](&v32);
      *(_DWORD *)buf = 134218498;
      v39 = a1;
      v40 = 2082;
      v41 = v10;
      v42 = 1024;
      v43 = v35;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::didReceiveResponse: NetworkLoadChecker::validateResponse returned an error (error.domain=%{public}s, error.code=%d)", buf, 0x1Cu);
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
          WTF::fastFree(v31, v11);
        else
          --*(_DWORD *)v31;
      }
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1 + 8);
    v19 = *(_QWORD *)(a1 + 16);
    if (v19)
    {
      do
        v20 = __ldaxr((unsigned int *)v19);
      while (__stlxr(v20 + 1, (unsigned int *)v19));
      v21 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, 2);
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if (*(_QWORD *)(v19 + 8))
      {
        WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
        cf = 0;
        v46 = 0;
        v44 = v44 & 0xF1 | 4;
        (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v32);
        v23 = cf;
        cf = 0;
        if (v23)
          CFRelease(v23);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v22);
      }
      do
      {
        v24 = __ldaxr((unsigned int *)v19);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unsigned int *)v19));
      if (v25)
        goto LABEL_27;
      atomic_store(1u, (unsigned int *)v19);
      v18 = (WTF *)v19;
LABEL_44:
      WTF::fastFree(v18, v15);
      goto LABEL_27;
    }
    v30 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, 2);
LABEL_46:
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    goto LABEL_27;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
    v30 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 16))(v30, 0);
    goto LABEL_46;
  }
  do
    v13 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v13 + 1, (unsigned int *)v12));
  v14 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (*(_QWORD *)(v12 + 8))
    (*(void (**)(_QWORD, WebCore::ResourceResponseBase *))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2);
  do
  {
    v16 = __ldaxr((unsigned int *)v12);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)v12));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)v12);
    v18 = (WTF *)v12;
    goto LABEL_44;
  }
LABEL_27:
  v26 = v37;
  v37 = 0;
  if (v26)
    CFRelease(v26);
  v27 = v34;
  v34 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v33;
  v33 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::BackgroundFetchLoad::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return WebKit::BackgroundFetchLoad::didReceiveResponse(a1 - 8, a2, 0, 0, a5);
}

uint64_t WebKit::BackgroundFetchLoad::didReceiveData(WebKit::BackgroundFetchLoad *this, const WebCore::SharedBuffer *a2)
{
  NSObject *v4;
  int v6;
  WebKit::BackgroundFetchLoad *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = this;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::didReceiveData", (uint8_t *)&v6, 0xCu);
  }
  return (*(uint64_t (**)(_QWORD, const WebCore::SharedBuffer *))(**(_QWORD **)(*((_QWORD *)this + 4) + 8)
                                                                          + 32))(*(_QWORD *)(*((_QWORD *)this + 4) + 8), a2);
}

uint64_t `non-virtual thunk to'WebKit::BackgroundFetchLoad::didReceiveData(WebKit::BackgroundFetchLoad *this, const WebCore::SharedBuffer *a2)
{
  return WebKit::BackgroundFetchLoad::didReceiveData((WebKit::BackgroundFetchLoad *)((char *)this - 8), a2);
}

void WebKit::BackgroundFetchLoad::didCompleteWithError(WebKit::BackgroundFetchLoad *this, const WebCore::ResourceError *a2, const WebCore::NetworkLoadMetrics *a3)
{
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  int v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  WTF::StringImpl *v12;
  CFTypeRef v13;
  int v14;
  WebKit::BackgroundFetchLoad *v15;
  __int16 v16;
  int v17;
  char v18;
  CFTypeRef cf;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int8 *)a2 + 60);
  v6 = off_1ECE713E8;
  v7 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (!v7)
      goto LABEL_7;
    MEMORY[0x19AEB7BFC](a2);
    v8 = *((_DWORD *)a2 + 14);
    v14 = 134218240;
    v15 = this;
    v16 = 1024;
    v17 = v8;
    v9 = "%p - BackgroundFetchLoad::didCompleteWithError, error_code=%d";
    v10 = v6;
    v11 = 18;
  }
  else
  {
    if (!v7)
      goto LABEL_7;
    v14 = 134217984;
    v15 = this;
    v9 = "%p - BackgroundFetchLoad::didComplete";
    v10 = v6;
    v11 = 12;
  }
  _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, v11);
LABEL_7:
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v14);
  cf = 0;
  v20 = 0;
  v18 = v18 & 0xF1 | 4;
  (*(void (**)(_QWORD, const WebCore::ResourceError *))(**(_QWORD **)(*((_QWORD *)this + 4) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 4) + 8), a2);
  v13 = cf;
  cf = 0;
  if (v13)
    CFRelease(v13);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v14, v12);
}

void `non-virtual thunk to'WebKit::BackgroundFetchLoad::didCompleteWithError(WebKit::BackgroundFetchLoad *this, const WebCore::ResourceError *a2, const WebCore::NetworkLoadMetrics *a3)
{
  WebKit::BackgroundFetchLoad::didCompleteWithError((WebKit::BackgroundFetchLoad *)((char *)this - 8), a2, a3);
}

uint64_t WebKit::BackgroundFetchLoad::didSendData(WebKit::BackgroundFetchLoad *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 4) + 8));
}

uint64_t `non-virtual thunk to'WebKit::BackgroundFetchLoad::didSendData(WebKit::BackgroundFetchLoad *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 3) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 3) + 8));
}

void WebKit::BackgroundFetchLoad::wasBlocked(WebKit::BackgroundFetchLoad *this)
{
  NSObject *v2;
  WTF::StringImpl *v3;
  CFTypeRef v4;
  WTF::StringImpl *v5;
  CFTypeRef v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  _BYTE v11[29];
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  uint8_t buf[4];
  WebKit::BackgroundFetchLoad *v18;
  char v19;
  CFTypeRef cf;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v18 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::wasBlocked", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v11, (const WTF::URL *)(*((_QWORD *)this + 503) + 160), 0);
  v12 = 0;
  WebKit::blockedError((WebKit *)v11, (uint64_t)&v13);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  cf = 0;
  v21 = 0;
  v19 = v19 & 0xF1 | 4;
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)this + 4) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 4) + 8), &v13);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v3);
  v6 = v16;
  v16 = 0;
  if (v6)
    CFRelease(v6);
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v12;
  v12 = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

void `non-virtual thunk to'WebKit::BackgroundFetchLoad::wasBlocked(WebKit::BackgroundFetchLoad *this)
{
  WebKit::BackgroundFetchLoad::wasBlocked((WebKit::BackgroundFetchLoad *)((char *)this - 8));
}

void WebKit::BackgroundFetchLoad::cannotShowURL(WebKit::BackgroundFetchLoad *this)
{
  NSObject *v2;
  WTF::StringImpl *v3;
  CFTypeRef v4;
  WTF::StringImpl *v5;
  CFTypeRef v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  _BYTE v11[29];
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  uint8_t buf[4];
  WebKit::BackgroundFetchLoad *v18;
  char v19;
  CFTypeRef cf;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v18 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::cannotShowURL", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v11, (const WTF::URL *)(*((_QWORD *)this + 503) + 160), 0);
  v12 = 0;
  WebKit::cannotShowURLError((WebKit *)v11, (uint64_t)&v13);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  cf = 0;
  v21 = 0;
  v19 = v19 & 0xF1 | 4;
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)this + 4) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 4) + 8), &v13);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v3);
  v6 = v16;
  v16 = 0;
  if (v6)
    CFRelease(v6);
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v12;
  v12 = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

void `non-virtual thunk to'WebKit::BackgroundFetchLoad::cannotShowURL(WebKit::BackgroundFetchLoad *this)
{
  WebKit::BackgroundFetchLoad::cannotShowURL((WebKit::BackgroundFetchLoad *)((char *)this - 8));
}

void WebKit::BackgroundFetchLoad::wasBlockedByRestrictions(WebKit::BackgroundFetchLoad *this)
{
  NSObject *v2;
  WTF::StringImpl *v3;
  CFTypeRef v4;
  WTF::StringImpl *v5;
  CFTypeRef v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  _BYTE v11[29];
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  uint8_t buf[4];
  WebKit::BackgroundFetchLoad *v18;
  char v19;
  CFTypeRef cf;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v18 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::wasBlockedByRestrictions", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v11, (const WTF::URL *)(*((_QWORD *)this + 503) + 160), 0);
  v12 = 0;
  WebKit::wasBlockedByRestrictionsError((WebKit *)v11, (uint64_t)&v13);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  cf = 0;
  v21 = 0;
  v19 = v19 & 0xF1 | 4;
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)this + 4) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 4) + 8), &v13);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v3);
  v6 = v16;
  v16 = 0;
  if (v6)
    CFRelease(v6);
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v12;
  v12 = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

void `non-virtual thunk to'WebKit::BackgroundFetchLoad::wasBlockedByRestrictions(WebKit::BackgroundFetchLoad *this)
{
  WebKit::BackgroundFetchLoad::wasBlockedByRestrictions((WebKit::BackgroundFetchLoad *)((char *)this - 8));
}

void WebKit::BackgroundFetchLoad::wasBlockedByDisabledFTP(WebKit::BackgroundFetchLoad *this)
{
  NSObject *v2;
  WTF::StringImpl *v3;
  CFTypeRef v4;
  WTF::StringImpl *v5;
  CFTypeRef v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  _BYTE v11[29];
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  uint8_t buf[4];
  WebKit::BackgroundFetchLoad *v18;
  char v19;
  CFTypeRef cf;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v18 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::wasBlockedByDisabledFTP", buf, 0xCu);
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v11, (const WTF::URL *)(*((_QWORD *)this + 503) + 160), 0);
  v12 = 0;
  WebKit::ftpDisabledError((WebKit *)v11, (uint64_t)&v13);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
  cf = 0;
  v21 = 0;
  v19 = v19 & 0xF1 | 4;
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)this + 4) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 4) + 8), &v13);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v3);
  v6 = v16;
  v16 = 0;
  if (v6)
    CFRelease(v6);
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v12;
  v12 = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

void `non-virtual thunk to'WebKit::BackgroundFetchLoad::wasBlockedByDisabledFTP(WebKit::BackgroundFetchLoad *this)
{
  WebKit::BackgroundFetchLoad::wasBlockedByDisabledFTP((WebKit::BackgroundFetchLoad *)((char *)this - 8));
}

void WebKit::DatabaseUtilities::~DatabaseUtilities(WebKit::DatabaseUtilities *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  *(_QWORD *)this = &unk_1E34BC428;
  MEMORY[0x19AEAFB44]((char *)this + 80);
  WebCore::SQLiteDatabase::~SQLiteDatabase((WebKit::DatabaseUtilities *)((char *)this + 16));
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

WTF::StringImpl *WebKit::DatabaseUtilities::buildPrivateClickMeasurementFromDatabase@<X0>(WebCore::SQLiteStatement *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  unsigned __int8 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  double v34;
  double v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *result;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  char v56;
  WTF::StringImpl *v57;
  char v58;
  uint64_t v59[4];
  char v60;
  unsigned __int8 v61[32];
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;

  v8 = WebCore::SQLiteStatement::columnInt(this);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(&v70, a2, v8);
  v9 = WebCore::SQLiteStatement::columnInt(this);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(&v69, a2, v9);
  v10 = WebCore::SQLiteStatement::columnInt(this);
  WebCore::SQLiteStatement::columnDouble(this);
  v12 = v11;
  WebCore::SQLiteStatement::columnText(this);
  WebCore::SQLiteStatement::columnText(this);
  WebCore::SQLiteStatement::columnText(this);
  WebCore::SQLiteStatement::columnText(this);
  if (!v65 || !*((_DWORD *)v65 + 1))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v65;
    v65 = v52;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v70, &v52);
  v15 = v52;
  v52 = 0;
  WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v69, &v64);
  v17 = v64;
  v64 = 0;
  *(_BYTE *)a4 = v10;
  if (v15)
    *(_DWORD *)v15 += 2;
  *(_QWORD *)(a4 + 8) = v15;
  if (v17)
    *(_DWORD *)v17 += 2;
  *(_BYTE *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 16) = v17;
  *(_QWORD *)(a4 + 24) = v12;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 184) = 0;
  *(_BYTE *)(a4 + 192) = 0;
  *(_BYTE *)(a4 + 200) = 0;
  *(_BYTE *)(a4 + 208) = 0;
  *(_BYTE *)(a4 + 216) = 0;
  *(_BYTE *)(a4 + 224) = 0;
  *(_BYTE *)(a4 + 232) = 0;
  *(_BYTE *)(a4 + 296) = 0;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_BYTE *)(a4 + 272) = 0;
  v18 = v65;
  if (v65)
    *(_DWORD *)v65 += 2;
  *(_QWORD *)(a4 + 304) = v18;
  if (v17)
  {
    v19 = *(_DWORD *)v17 - 2;
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v16);
      v17 = v64;
      v64 = 0;
      if (!v17)
        goto LABEL_18;
      v19 = *(_DWORD *)v17 - 2;
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v16);
        if (!v15)
          goto LABEL_22;
        goto LABEL_19;
      }
    }
    *(_DWORD *)v17 = v19;
  }
LABEL_18:
  if (!v15)
    goto LABEL_22;
LABEL_19:
  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy(v15, v16);
  else
    *(_DWORD *)v15 -= 2;
LABEL_22:
  v20 = v52;
  v52 = 0;
  if (!v20)
    goto LABEL_25;
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 -= 2;
LABEL_25:
    if (!a3)
      goto LABEL_77;
    goto LABEL_28;
  }
  WTF::StringImpl::destroy(v20, v16);
  if (!a3)
    goto LABEL_77;
LABEL_28:
  v21 = WebCore::SQLiteStatement::columnInt(this);
  v22 = WebCore::SQLiteStatement::columnInt(this);
  WebCore::SQLiteStatement::columnDouble(this);
  v24 = v23;
  WebCore::SQLiteStatement::columnDouble(this);
  v26 = v25;
  WebCore::SQLiteStatement::columnText(this);
  WebCore::SQLiteStatement::columnText(this);
  WebCore::SQLiteStatement::columnText(this);
  if (v21 != -1)
  {
    LOBYTE(v52) = v21;
    *(_WORD *)((char *)&v52 + 1) = v22;
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    LOBYTE(v55) = 0;
    v56 = 0;
    LOBYTE(v57) = 0;
    v58 = 0;
    LOBYTE(v59[0]) = 0;
    v60 = 0;
    v61[0] = 0;
    v61[24] = 0;
    if (*(_BYTE *)(a4 + 184))
    {
      *(_WORD *)(a4 + 56) = (_WORD)v52;
      *(_BYTE *)(a4 + 58) = BYTE2(v52);
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((WTF::StringImpl **)(a4 + 64), (WTF::StringImpl *)&v53);
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((WTF::StringImpl **)(a4 + 80), (WTF::StringImpl *)&v55);
      std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>((WTF::StringImpl **)(a4 + 96), (WTF::StringImpl *)&v57);
      std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationUnlinkableToken,false>>(a4 + 112, v59);
      std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>((WTF::StringImpl **)(a4 + 152), v61);
    }
    else
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData*>(a4 + 56, (uint64_t)&v52);
      *(_BYTE *)(a4 + 184) = 1;
    }
    std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v61, v27);
    std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v59, v28);
    if (v58)
    {
      v30 = v57;
      v57 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
    }
    if (v56)
    {
      v31 = v55;
      v55 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v29);
        else
          *(_DWORD *)v31 -= 2;
      }
    }
    if ((_BYTE)v54)
    {
      v32 = v53;
      v53 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v29);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
  }
  v52 = 0;
  v53 = 0;
  v54 = 0;
  WTF::String::operator=(&v52, (WTF::StringImpl *)&v64);
  WTF::String::operator=(&v53, (WTF::StringImpl *)&v63);
  WTF::String::operator=(&v54, (WTF::StringImpl *)&v62);
  WebCore::PrivateClickMeasurement::setDestinationSecretToken();
  v34 = v24;
  if (v24 <= 0.0)
    v34 = 0.0;
  v35 = v26;
  if (v26 <= 0.0)
    v35 = 0.0;
  *(double *)(a4 + 192) = v34;
  *(_BYTE *)(a4 + 200) = v24 > 0.0;
  *(double *)(a4 + 208) = v35;
  *(_BYTE *)(a4 + 216) = v26 > 0.0;
  v36 = v54;
  v54 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v33);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = v53;
  v53 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v33);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = v52;
  v52 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v33);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = v62;
  v62 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v33);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v63;
  v63 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v33);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v64;
  v64 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v33);
    else
      *(_DWORD *)v41 -= 2;
  }
LABEL_77:
  v52 = 0;
  v53 = 0;
  v54 = 0;
  WTF::String::operator=(&v52, (WTF::StringImpl *)&v68);
  WTF::String::operator=(&v53, (WTF::StringImpl *)&v67);
  WTF::String::operator=(&v54, (WTF::StringImpl *)&v66);
  WebCore::PrivateClickMeasurement::setSourceSecretToken();
  v43 = v54;
  v54 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v42);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = v53;
  v53 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v42);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = v52;
  v52 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v42);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = v65;
  v65 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v42);
    else
      *(_DWORD *)v46 -= 2;
  }
  v47 = v66;
  v66 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v42);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = v67;
  v67 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v42);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = v68;
  v68 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v42);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = v69;
  v69 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v42);
    else
      *(_DWORD *)v50 -= 2;
  }
  result = v70;
  v70 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v42);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    WTF::String::operator=((WTF::StringImpl **)a1, a2);
  }
  else
  {
    v3 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v3 += 2;
    *(_QWORD *)a1 = v3;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t result;
  uint64_t v9[2];
  uint64_t v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v9[0] = a4;
  v9[1] = a5;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(v10, a3, v9, a6, a7);
  if (!*a7)
    __break(0xC471u);
  return result;
}

uint64_t WebKit::DatabaseUtilities::addMissingColumnToTable(uint64_t a1, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  size_t v5;
  size_t v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  _QWORD v25[2];
  unsigned int v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t ErrorMsg;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a3)
    v5 = a3 - 1;
  else
    v5 = 0;
  if (v5 >> 31)
    goto LABEL_43;
  if (a5)
    v6 = a5 - 1;
  else
    v6 = 0;
  if (v6 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19709E824);
  }
  v7 = v6 + 12;
  if (__OFADD__((_DWORD)v6, 12))
    goto LABEL_43;
  v8 = __OFADD__((_DWORD)v5, v7);
  v9 = v5 + v7;
  if (v8)
    goto LABEL_43;
  v10 = (v9 + 12);
  if (__OFADD__(v9, 12))
    goto LABEL_43;
  if (v9 == -12)
  {
    v14 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_21;
  }
  if ((v10 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v10 + 20)), (v14 = v25[0]) == 0))
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x19709E804);
  }
  *(_DWORD *)v25[0] = 2;
  *(_DWORD *)(v14 + 4) = v10;
  *(_QWORD *)(v14 + 20) = *(_QWORD *)"ALTER TABLE ";
  *(_QWORD *)(v14 + 8) = v14 + 20;
  *(_DWORD *)(v14 + 16) = 4;
  *(_DWORD *)(v14 + 28) = 541412418;
  v15 = (_BYTE *)(v14 + 32);
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 == 1)
      *v15 = *a2;
    else
      memcpy((void *)(v14 + 32), a2, v5);
  }
  v16 = &v15[v5];
  *(_QWORD *)v16 = *(_QWORD *)" ADD COLUMN ";
  *((_DWORD *)v16 + 2) = 542002517;
  if ((_DWORD)v6)
  {
    v17 = v16 + 12;
    if ((_DWORD)v6 == 1)
      *v17 = *a4;
    else
      memcpy(v17, a4, v6);
  }
LABEL_21:
  WebCore::SQLiteDatabase::prepareStatementSlow();
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v14, v18);
  else
    *(_DWORD *)v14 -= 2;
  v19 = v26;
  if (v26)
  {
    v20 = qword_1ECE715F0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      v21 = 0;
      goto LABEL_35;
    }
    *(_DWORD *)buf = 134218243;
    v28 = a1;
    v29 = 2081;
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
    v23 = "%p - Database::addMissingColumnToTable Unable to prepare statement to add missing columns to table, error mess"
          "age: %{private}s";
    goto LABEL_32;
  }
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v25) != 101)
  {
    v20 = qword_1ECE715F0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
LABEL_33:
      v21 = 0;
      goto LABEL_34;
    }
    v22 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
    *(_DWORD *)buf = 134218243;
    v28 = a1;
    v29 = 2081;
    ErrorMsg = v22;
    v23 = "%p - Database::addMissingColumnToTable error executing statement to add missing columns to table, error message: %{private}s";
LABEL_32:
    _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, v23, buf, 0x16u);
    goto LABEL_33;
  }
  v21 = 1;
LABEL_34:
  v19 = v26;
LABEL_35:
  if (v19 != -1)
    (*(&off_1E34BC698 + v19))((int)buf, (WebCore::SQLiteStatement *)v25);
  return v21;
}

void WebKit::EarlyHintsResourceLoader::~EarlyHintsResourceLoader(WebKit::EarlyHintsResourceLoader *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BC470;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BC470;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

IPC::Encoder *WebKit::EarlyHintsResourceLoader::addConsoleMessage(IPC::Encoder *result, char a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 *v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  IPC::Encoder *v19;

  v4 = *((_QWORD *)result + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v13 = *(_OWORD *)(v5 + 48);
      v11 = *(_QWORD *)(v5 + 2984);
      v12 = 1;
      v14 = &v13;
      v15 = a2;
      v16 = a3;
      v17 = a4;
      v18 = &v11;
      v6 = *(_QWORD *)(v5 + 40);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 2100;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v19 = (IPC::Encoder *)v7;
      IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v7, (uint64_t)&v14);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v5 - 32) + 32))(v5 - 32, &v19, 0);
      result = v19;
      v19 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v8);
        return (IPC::Encoder *)WTF::fastFree(v9, v10);
      }
    }
  }
  return result;
}

uint64_t WebKit::EarlyHintsResourceLoader::handleEarlyHintsResponse(uint64_t a1, WebCore::ResourceResponseBase *this)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  WTF::URL *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  __int128 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t PartyForCookies;
  WTF::StringImpl *v42;
  __int128 v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::RefCountedBase *v52;
  WTF::RefCountedBase *v53;
  CFTypeRef v54;
  CFTypeRef v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  CFTypeRef v63;
  CFTypeRef v64;
  WTF *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  CFTypeRef v68;
  uint64_t v69;
  char *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  __int128 v82;
  WebKit::NetworkSession *v83;
  WebCore::ResourceRequestBase *v84;
  WebCore::ResourceRequestBase *v85;
  WTF *v86;
  int v87;
  unsigned int v88;
  _BYTE v89[240];
  __int128 v90;
  __int128 v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93[19];
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::RefCountedBase *v96;
  uint64_t v97;
  char v98;
  CFTypeRef v99;
  WTF::StringImpl *v100;
  char v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[40];
  WTF *v107;
  _BYTE v108[152];
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::RefCountedBase *v111;
  uint64_t v112;
  char v113;
  CFTypeRef v114;
  __int16 v115;
  char v116;
  _BYTE v117[2584];
  _BYTE v118[40];
  CFTypeRef cf;
  char v120;
  __int16 v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  result = WebCore::ResourceResponseBase::httpStatusCode(this);
  if ((_DWORD)result != 103)
  {
    __break(0xC471u);
    JUMPOUT(0x19709EBECLL);
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 267) == 1 && !*(_DWORD *)(v6 + 3284))
      {
        v7 = (WTF::URL *)WebCore::ResourceResponseBase::url(this);
        result = WTF::URL::protocol(v7);
        if ((char *)result == "https" || v8 != 5)
        {
          if ((char *)result != "https" || v8 != 5)
            return result;
        }
        else if ((v8 & 0xFF00000000) != 0)
        {
          if (*(_BYTE *)result != 104 || *(_WORD *)(result + 1) != 29812 || *(_WORD *)(result + 3) != 29552)
            return result;
        }
        else if (*(_WORD *)result != 104 || *(_QWORD *)(result + 2) != 0x73007000740074)
        {
          return result;
        }
        result = *(_QWORD *)WebCore::ResourceResponseBase::httpVersion(this);
        if (!result || (result = WTF::StringImpl::startsWith(), (result & 1) == 0))
        {
          if (!*(_BYTE *)(a1 + 16))
          {
            *(_BYTE *)(a1 + 16) = 1;
            WebCore::ResourceResponseBase::httpHeaderField();
            result = (uint64_t)v92;
            if (v92)
            {
              if (!*((_DWORD *)v92 + 1))
              {
                v92 = 0;
LABEL_194:
                if (*(_DWORD *)result == 2)
                  return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
                *(_DWORD *)result -= 2;
                return result;
              }
              v10 = WebCore::ResourceResponseBase::url(this);
              v11 = *(WTF::StringImpl **)v10;
              if (*(_QWORD *)v10)
              {
                v12 = *(_DWORD *)v11;
                *(_DWORD *)v11 += 2;
                v13 = *(_OWORD *)(v10 + 24);
                v90 = *(_OWORD *)(v10 + 8);
                v91 = v13;
                *(_DWORD *)v11 = v12 + 4;
              }
              else
              {
                v82 = *(_OWORD *)(v10 + 24);
                v90 = *(_OWORD *)(v10 + 8);
                v91 = v82;
              }
              *(_QWORD *)v106 = v11;
              *(_OWORD *)&v106[8] = v90;
              *(_OWORD *)&v106[24] = v91;
              MEMORY[0x19AEB0E58](v89, v106, a1, 0);
              v15 = *(WTF::StringImpl **)v106;
              *(_QWORD *)v106 = 0;
              if (v15)
              {
                if (*(_DWORD *)v15 == 2)
                  WTF::StringImpl::destroy(v15, v14);
                else
                  *(_DWORD *)v15 -= 2;
              }
              MEMORY[0x19AEB40D4](v106, this);
              v16 = *(_QWORD *)(a1 + 8);
              if (v16)
              {
                v17 = *(_QWORD *)(v16 + 8);
                if (v17)
                  v16 = v17 - 48;
                else
                  v16 = 0;
              }
              WebCore::ResourceRequestBase::httpReferrer((WebCore::ResourceRequestBase *)(v16 + 168));
              WebCore::ContentSecurityPolicy::didReceiveHeaders();
              v19 = v93[0];
              v93[0] = 0;
              if (v19)
              {
                if (*(_DWORD *)v19 == 2)
                  WTF::StringImpl::destroy(v19, v18);
                else
                  *(_DWORD *)v19 -= 2;
              }
              WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v106, v18);
              MEMORY[0x19AEADC24](&v86, &v92);
              v21 = v86;
              if (v88)
              {
                v22 = 96 * v88;
                while (1)
                {
                  if (*((_BYTE *)v21 + 88))
                  {
                    if (*(_QWORD *)v21)
                    {
                      if (*(_DWORD *)(*(_QWORD *)v21 + 4))
                      {
                        v23 = *((_QWORD *)v21 + 1);
                        if (v23)
                        {
                          if (*(_DWORD *)(v23 + 4))
                          {
                            v24 = *((_QWORD *)v21 + 4);
                            if (!v24 || !*(_DWORD *)(v24 + 4))
                            {
                              v25 = *((_QWORD *)v21 + 6);
                              if (!v25 || !*(_DWORD *)(v25 + 4))
                              {
                                v26 = *((_QWORD *)v21 + 7);
                                if (!v26 || !*(_DWORD *)(v26 + 4))
                                {
                                  if (WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(v23, "preconnect", 0xAuLL))
                                  {
                                    v27 = WebCore::ResourceResponseBase::url(this);
                                    v28 = *(_QWORD *)(a1 + 8);
                                    if (v28)
                                    {
                                      v29 = *(_QWORD *)(v28 + 8);
                                      if (v29)
                                      {
                                        if (*(_BYTE *)(v29 + 3801))
                                          break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_129:
                  v21 = (WTF *)((char *)v21 + 96);
                  v22 -= 96;
                  if (!v22)
                  {
                    v21 = v86;
                    if (v88)
                    {
                      v69 = 96 * v88;
                      v70 = (char *)v86 + 40;
                      do
                      {
                        v71 = (WTF::StringImpl *)*((_QWORD *)v70 + 5);
                        *((_QWORD *)v70 + 5) = 0;
                        if (v71)
                        {
                          if (*(_DWORD *)v71 == 2)
                            WTF::StringImpl::destroy(v71, v20);
                          else
                            *(_DWORD *)v71 -= 2;
                        }
                        v72 = (WTF::StringImpl *)*((_QWORD *)v70 + 4);
                        *((_QWORD *)v70 + 4) = 0;
                        if (v72)
                        {
                          if (*(_DWORD *)v72 == 2)
                            WTF::StringImpl::destroy(v72, v20);
                          else
                            *(_DWORD *)v72 -= 2;
                        }
                        v73 = (WTF::StringImpl *)*((_QWORD *)v70 + 3);
                        *((_QWORD *)v70 + 3) = 0;
                        if (v73)
                        {
                          if (*(_DWORD *)v73 == 2)
                            WTF::StringImpl::destroy(v73, v20);
                          else
                            *(_DWORD *)v73 -= 2;
                        }
                        v74 = (WTF::StringImpl *)*((_QWORD *)v70 + 2);
                        *((_QWORD *)v70 + 2) = 0;
                        if (v74)
                        {
                          if (*(_DWORD *)v74 == 2)
                            WTF::StringImpl::destroy(v74, v20);
                          else
                            *(_DWORD *)v74 -= 2;
                        }
                        v75 = (WTF::StringImpl *)*((_QWORD *)v70 + 1);
                        *((_QWORD *)v70 + 1) = 0;
                        if (v75)
                        {
                          if (*(_DWORD *)v75 == 2)
                            WTF::StringImpl::destroy(v75, v20);
                          else
                            *(_DWORD *)v75 -= 2;
                        }
                        v76 = *(WTF::StringImpl **)v70;
                        *(_QWORD *)v70 = 0;
                        if (v76)
                        {
                          if (*(_DWORD *)v76 == 2)
                            WTF::StringImpl::destroy(v76, v20);
                          else
                            *(_DWORD *)v76 -= 2;
                        }
                        v77 = (WTF::StringImpl *)*((_QWORD *)v70 - 1);
                        *((_QWORD *)v70 - 1) = 0;
                        if (v77)
                        {
                          if (*(_DWORD *)v77 == 2)
                            WTF::StringImpl::destroy(v77, v20);
                          else
                            *(_DWORD *)v77 -= 2;
                        }
                        v78 = (WTF::StringImpl *)*((_QWORD *)v70 - 2);
                        *((_QWORD *)v70 - 2) = 0;
                        if (v78)
                        {
                          if (*(_DWORD *)v78 == 2)
                            WTF::StringImpl::destroy(v78, v20);
                          else
                            *(_DWORD *)v78 -= 2;
                        }
                        v79 = (WTF::StringImpl *)*((_QWORD *)v70 - 3);
                        *((_QWORD *)v70 - 3) = 0;
                        if (v79)
                        {
                          if (*(_DWORD *)v79 == 2)
                            WTF::StringImpl::destroy(v79, v20);
                          else
                            *(_DWORD *)v79 -= 2;
                        }
                        v80 = (WTF::StringImpl *)*((_QWORD *)v70 - 4);
                        *((_QWORD *)v70 - 4) = 0;
                        if (v80)
                        {
                          if (*(_DWORD *)v80 == 2)
                            WTF::StringImpl::destroy(v80, v20);
                          else
                            *(_DWORD *)v80 -= 2;
                        }
                        v81 = (WTF::StringImpl *)*((_QWORD *)v70 - 5);
                        *((_QWORD *)v70 - 5) = 0;
                        if (v81)
                        {
                          if (*(_DWORD *)v81 == 2)
                            WTF::StringImpl::destroy(v81, v20);
                          else
                            *(_DWORD *)v81 -= 2;
                        }
                        v70 += 96;
                        v69 -= 96;
                      }
                      while (v69);
                      v21 = v86;
                    }
                    goto LABEL_187;
                  }
                }
                MEMORY[0x19AEABB24](&v100, v27, v21, 0);
                if ((v101 & 1) == 0)
                  goto LABEL_125;
                v30 = WTF::URL::protocol((WTF::URL *)&v100);
                if ((char *)v30 == "https" || v20 != 5)
                {
                  if ((char *)v30 != "https" || v20 != 5)
                    goto LABEL_125;
                }
                else
                {
                  if (((unint64_t)v20 & 0xFF00000000) != 0)
                  {
                    if (*(_BYTE *)v30 == 104 && *(_WORD *)(v30 + 1) == 29812 && *(_WORD *)(v30 + 3) == 29552)
                      goto LABEL_58;
LABEL_125:
                    v67 = v100;
                    v100 = 0;
                    if (v67)
                    {
                      if (*(_DWORD *)v67 == 2)
                        WTF::StringImpl::destroy(v67, v20);
                      else
                        *(_DWORD *)v67 -= 2;
                    }
                    goto LABEL_129;
                  }
                  if (*(_WORD *)v30 != 104 || *(_QWORD *)(v30 + 2) != 0x73007000740074)
                    goto LABEL_125;
                }
LABEL_58:
                v31 = *(_QWORD *)(a1 + 8);
                if (v31)
                {
                  v32 = *(_QWORD *)(v31 + 8);
                  if (v32)
                    v31 = v32 - 48;
                  else
                    v31 = 0;
                }
                v84 = (WebCore::ResourceRequestBase *)(v31 + 168);
                WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v31 + 168));
                if (!WebCore::ContentSecurityPolicy::allowConnectToSource())
                  goto LABEL_125;
                v33 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
                v34 = v33 ? v33 - 48 : 0;
                v35 = *(_QWORD *)(v34 + 3856);
                v36 = *(_QWORD *)(v35 + 72);
                *(_QWORD *)v106 = *(_QWORD *)(v35 + 80);
                v83 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v36 + 208), v106);
                if (!v83)
                  goto LABEL_125;
                WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v106);
                v37 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
                if (v37)
                  v38 = v37 - 48;
                else
                  v38 = 0;
                v39 = *(_OWORD *)(v38 + 96);
                *(_OWORD *)v106 = *(_OWORD *)(v38 + 80);
                *(_OWORD *)&v106[16] = v39;
                v40 = *((_QWORD *)v21 + 5);
                if (v40)
                  LOBYTE(v40) = WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(v40, "anonymous", 9uLL);
                v116 = v40 ^ 1;
                v115 = 1;
                v118[16] = 1;
                WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v93, (const WTF::URL *)&v100, 0);
                v99 = 0;
                PartyForCookies = WebCore::ResourceRequestBase::firstPartyForCookies(v84);
                v42 = *(WTF::StringImpl **)PartyForCookies;
                if (*(_QWORD *)PartyForCookies)
                  *(_DWORD *)v42 += 2;
                v103 = v42;
                v43 = *(_OWORD *)(PartyForCookies + 24);
                v104 = *(_OWORD *)(PartyForCookies + 8);
                v105 = v43;
                if ((v104 & 1) != 0)
                  WebCore::ResourceRequestBase::setFirstPartyForCookies((WebCore::ResourceRequestBase *)v93, (const WTF::URL *)&v103);
                WebCore::ResourceRequestBase::httpUserAgent(v84);
                v45 = v102;
                if (!v102)
                  goto LABEL_84;
                if (*((_DWORD *)v102 + 1))
                {
                  WebCore::ResourceRequestBase::setHTTPUserAgent((WebCore::ResourceRequestBase *)v93, (const WTF::String *)&v102);
                  v45 = v102;
                  v102 = 0;
                  if (!v45)
                  {
LABEL_84:
                    v46 = v103;
                    v103 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, v44);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v108, (uint64_t)v93);
                    v48 = v94;
                    v94 = 0;
                    v49 = v109;
                    v109 = v48;
                    if (v49)
                    {
                      if (*(_DWORD *)v49 == 2)
                        WTF::StringImpl::destroy(v49, v47);
                      else
                        *(_DWORD *)v49 -= 2;
                    }
                    v50 = v95;
                    v95 = 0;
                    v51 = v110;
                    v110 = v50;
                    if (v51)
                    {
                      if (*(_DWORD *)v51 == 2)
                        WTF::StringImpl::destroy(v51, v47);
                      else
                        *(_DWORD *)v51 -= 2;
                    }
                    v52 = v96;
                    v96 = 0;
                    v53 = v111;
                    v111 = v52;
                    if (v53)
                      WTF::RefCounted<WebCore::FormData>::deref(v53);
                    v112 = v97;
                    v113 = v98;
                    v54 = v99;
                    v99 = 0;
                    v55 = v114;
                    v114 = v54;
                    if (v55)
                    {
                      CFRelease(v55);
                      v68 = v99;
                      v99 = 0;
                      if (v68)
                        CFRelease(v68);
                    }
                    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v93);
                    v56 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
                    if (v56)
                      v57 = v56 - 48;
                    else
                      v57 = 0;
                    v121 = *(_WORD *)(v57 + 3024);
                    v85 = (WebCore::ResourceRequestBase *)operator new();
                    v58 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v58 = off_1E34BC7E0;
                    v93[0] = v58;
                    WebKit::PreconnectTask::PreconnectTask(v85, v83, (uint64_t)v106, (uint64_t *)v93);
                    WebKit::PreconnectTask::start((WebKit::NetworkLoad **)v85);
                    if (v93[0])
                      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v93[0] + 8))(v93[0]);
                    v59 = v100;
                    if (v100)
                      *(_DWORD *)v100 += 2;
                    v103 = v59;
                    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Preconnecting to ", 18, (uint64_t *)&v103, (uint64_t)" due to early hint", 19, v93);
                    WebKit::EarlyHintsResourceLoader::addConsoleMessage((IPC::Encoder *)a1, 2, 4, (uint64_t)v93);
                    v61 = v93[0];
                    v93[0] = 0;
                    if (v61)
                    {
                      if (*(_DWORD *)v61 == 2)
                        WTF::StringImpl::destroy(v61, v60);
                      else
                        *(_DWORD *)v61 -= 2;
                    }
                    v62 = v103;
                    v103 = 0;
                    if (v62)
                    {
                      if (*(_DWORD *)v62 == 2)
                        WTF::StringImpl::destroy(v62, v60);
                      else
                        *(_DWORD *)v62 -= 2;
                    }
                    if (v120)
                    {
                      v63 = cf;
                      cf = 0;
                      if (v63)
                        CFRelease(v63);
                    }
                    WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v118, v60);
                    if (v117[2560])
                      WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v117);
                    v64 = v114;
                    v114 = 0;
                    if (v64)
                      CFRelease(v64);
                    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v108);
                    v65 = v107;
                    v107 = 0;
                    if (v65)
                      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v65, v20);
                    v66 = *(_QWORD *)&v106[32];
                    *(_QWORD *)&v106[32] = 0;
                    if (v66)
                      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v66, v20);
                    goto LABEL_125;
                  }
                }
                else
                {
                  v102 = 0;
                }
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, v44);
                else
                  *(_DWORD *)v45 -= 2;
                goto LABEL_84;
              }
LABEL_187:
              if (v21)
              {
                v86 = 0;
                v87 = 0;
                WTF::fastFree(v21, v20);
              }
              MEMORY[0x19AEB0E64](v89);
              if (v11)
              {
                if (*(_DWORD *)v11 == 2)
                  WTF::StringImpl::destroy(v11, v9);
                else
                  *(_DWORD *)v11 -= 2;
              }
              result = (uint64_t)v92;
              v92 = 0;
              if (result)
                goto LABEL_194;
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *WebKit::NetworkBroadcastChannelRegistry::registerChannel(WebKit::NetworkProcess **this, IPC::Connection *a2, const WebCore::ClientOrigin *a3, WTF::StringImpl **a4)
{
  uint64_t *v8;
  uint64_t v9;
  WebKit::NetworkProcess *v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  char v16;
  const WTF::StringImpl *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  int i;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  WTF *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *result;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  IPC::Connection *v50;
  uint64_t *v51;
  _QWORD *v52;

  if ((WebCore::SecurityOriginData::isNull(a3) & 1) != 0
    || WebCore::SecurityOriginData::isNull((const WebCore::ClientOrigin *)((char *)a3 + 32)))
  {
    result = (_QWORD *)WebKit::NetworkProcess::webProcessIdentifierForConnection(*this, a2);
    v52 = result;
    if (result)
    {
      v48 = *((_QWORD *)*this + 4);
      v51 = (uint64_t *)&v52;
      return (_QWORD *)IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(v48, &v51, 0, 0, 0);
    }
    return result;
  }
  v10 = this[1];
  v8 = (uint64_t *)(this + 1);
  v9 = (uint64_t)v10;
  v50 = a2;
  if (v10
    || (WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v8, 0), (v9 = *v8) != 0))
  {
    v11 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = WTF::computeHash<WebCore::ClientOrigin>((uint64_t)a3) & v11;
  v13 = (uint64_t *)(v9 + 72 * v12);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
  {
    v49 = v8;
    v14 = 0;
    v15 = 1;
    do
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v13);
      if ((v16 & 1) != 0)
      {
        v14 = v13;
      }
      else if (WebCore::operator==() && (WebCore::operator==() & 1) != 0)
      {
        goto LABEL_24;
      }
      v12 = (v12 + v15) & v11;
      v13 = (uint64_t *)(v9 + 72 * v12);
      ++v15;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>());
    v8 = v49;
    if (v14)
    {
      v14[8] = 0;
      *((_OWORD *)v14 + 2) = 0u;
      *((_OWORD *)v14 + 3) = 0u;
      *(_OWORD *)v14 = 0u;
      *((_OWORD *)v14 + 1) = 0u;
      --*(_DWORD *)(*v49 - 16);
      v13 = v14;
    }
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v13, (uint64_t)a3);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v13 + 4), (uint64_t)a3 + 32);
  v19 = v13[8];
  v13[8] = 0;
  if (v19)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v19, v18);
  v20 = *v8;
  if (*v8)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v8;
  if (*v8)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 <= 0x400)
  {
    if (3 * v25 > 4 * v24)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v25 <= 2 * v24)
LABEL_23:
    v13 = (uint64_t *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(v8, (unsigned int *)v13);
LABEL_24:
  v28 = v13[8];
  v26 = v13 + 8;
  v27 = v28;
  if (v28
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v26, 0), (v27 = *v26) != 0))
  {
    v29 = *(_DWORD *)(v27 - 8);
  }
  else
  {
    v29 = 0;
  }
  v30 = *((_DWORD *)*a4 + 4);
  if (v30 >= 0x100)
    v31 = v30 >> 8;
  else
    v31 = WTF::StringImpl::hashSlowCase(*a4);
  v32 = 0;
  for (i = 1; ; ++i)
  {
    v34 = v31 & v29;
    v35 = v27 + 24 * (v31 & v29);
    v36 = *(WTF **)v35;
    if (*(_QWORD *)v35 == -1)
    {
      v32 = (_QWORD *)(v27 + 24 * v34);
      goto LABEL_36;
    }
    if (!v36)
      break;
    if ((WTF::equal(v36, *a4, v17) & 1) != 0)
      goto LABEL_50;
LABEL_36:
    v31 = i + v34;
  }
  if (v32)
  {
    *v32 = 0;
    v32[1] = 0;
    v32[2] = 0;
    --*(_DWORD *)(*v26 - 16);
    v35 = (uint64_t)v32;
  }
  WTF::String::operator=((WTF::StringImpl **)v35, (WTF::StringImpl *)a4);
  v38 = *(WTF **)(v35 + 8);
  if (v38)
  {
    *(_QWORD *)(v35 + 8) = 0;
    *(_DWORD *)(v35 + 16) = 0;
    WTF::fastFree(v38, v37);
  }
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  v39 = *v26;
  if (*v26)
    v40 = *(_DWORD *)(v39 - 12) + 1;
  else
    v40 = 1;
  *(_DWORD *)(v39 - 12) = v40;
  v41 = *v26;
  if (*v26)
    v42 = *(_DWORD *)(v41 - 12);
  else
    v42 = 0;
  v43 = (*(_DWORD *)(v41 - 16) + v42);
  v44 = *(unsigned int *)(v41 - 4);
  if (v44 > 0x400)
  {
    if (v44 <= 2 * v43)
LABEL_49:
      v35 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v26, (WTF::StringImpl **)v35);
  }
  else if (3 * v44 <= 4 * v43)
  {
    goto LABEL_49;
  }
LABEL_50:
  result = (_QWORD *)(v35 + 8);
  v46 = (_QWORD *)*((_QWORD *)v50 + 3);
  v52 = v46;
  v47 = *(unsigned int *)(v35 + 20);
  if ((_DWORD)v47 == *(_DWORD *)(v35 + 16))
  {
    result = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v47 + 1, (unint64_t)&v52);
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * *(unsigned int *)(v35 + 20)) = *result;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v47) = v46;
  }
  ++*(_DWORD *)(v35 + 20);
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 347;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t *WebKit::NetworkBroadcastChannelRegistry::unregisterChannel(WebKit::NetworkBroadcastChannelRegistry *this, IPC::Connection *a2, const WebCore::ClientOrigin *a3, WTF::StringImpl **a4)
{
  uint64_t *result;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  if ((WebCore::SecurityOriginData::isNull(a3) & 1) != 0
    || WebCore::SecurityOriginData::isNull((const WebCore::ClientOrigin *)((char *)a3 + 32)))
  {
    result = (uint64_t *)WebKit::NetworkProcess::webProcessIdentifierForConnection(*(WebKit::NetworkProcess **)this, a2);
    v21 = (uint64_t)result;
    if (result)
    {
      v19 = *(_QWORD *)(*(_QWORD *)this + 32);
      v20 = &v21;
      return (uint64_t *)IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(v19, &v20, 0, 0, 0);
    }
  }
  else
  {
    result = (uint64_t *)WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)this + 1, (uint64_t)a3);
    v10 = (uint64_t)result;
    v11 = (uint64_t *)*((_QWORD *)this + 1);
    if (v11)
      v11 += 9 * *((unsigned int *)v11 - 1);
    if (v11 != result)
    {
      result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(result + 8, a4, v9);
      v12 = (uint64_t)result;
      v13 = *(uint64_t **)(v10 + 64);
      if (v13)
        v13 += 3 * *((unsigned int *)v13 - 1);
      if (v13 != result)
      {
        v14 = *((unsigned int *)result + 5);
        if ((_DWORD)v14)
        {
          v15 = *((_QWORD *)a2 + 3);
          v16 = (_QWORD *)result[1];
          if (*v16 == v15)
          {
            v17 = 0;
LABEL_15:
            result = &v16[v17];
            if (result + 1 != &v16[v14])
            {
              result = (uint64_t *)memmove(result, result + 1, 8 * (v14 - v17) - 8);
              LODWORD(v14) = *(_DWORD *)(v12 + 20);
            }
            *(_DWORD *)(v12 + 20) = v14 - 1;
          }
          else
          {
            v17 = 0;
            while (v14 - 1 != v17)
            {
              v18 = v16[++v17];
              if (v18 == v15)
                goto LABEL_15;
            }
          }
        }
      }
    }
  }
  return result;
}

void WebKit::NetworkBroadcastChannelRegistry::postMessage(uint64_t a1, IPC::Connection *a2, WebCore::SecurityOriginData *this, WTF::StringImpl **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  os_unfair_lock_s *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  unsigned __int8 **v33;
  unsigned __int8 *v34;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50[3];
  os_unfair_lock_s *v51;
  uint64_t *v52[2];
  IPC::Encoder *v53;

  if ((WebCore::SecurityOriginData::isNull(this) & 1) != 0
    || WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)((char *)this + 32)))
  {
    v50[0] = WebKit::NetworkProcess::webProcessIdentifierForConnection(*(WebKit::NetworkProcess **)a1, a2);
    if (v50[0])
    {
      v47 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v52[0] = v50;
      IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(v47, v52, 0, 0, 0);
    }
    v48 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
  else
  {
    v11 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)(a1 + 8), (uint64_t)this);
    v13 = v11;
    v14 = *(_QWORD *)(a1 + 8);
    if (v14)
      v14 += 72 * *(unsigned int *)(v14 - 4);
    if (v14 == v11)
      goto LABEL_41;
    v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v11 + 64), a4, v12);
    v16 = v15;
    v17 = *(_QWORD *)(v13 + 64);
    if (v17)
      v17 += 24 * *(unsigned int *)(v17 - 4);
    if (v17 == v15)
    {
LABEL_41:
      v46 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    }
    else
    {
      v18 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v18 = 1;
      v19 = *a6;
      *a6 = 0;
      *(_QWORD *)(v18 + 8) = v19;
      v20 = *(unsigned int *)(v16 + 20);
      if ((_DWORD)v20)
      {
        v21 = *(uint64_t **)(v16 + 8);
        v22 = &v21[v20];
        while (1)
        {
          if (*v21 == *((_QWORD *)a2 + 3))
            goto LABEL_34;
          IPC::Connection::connection(*v21, &v51);
          v23 = v51;
          if (!v51)
            goto LABEL_34;
          v50[0] = (uint64_t)this;
          v50[1] = (uint64_t)a4;
          v50[2] = a5;
          do
            v24 = __ldaxr((unsigned int *)v18);
          while (__stlxr(v24 + 1, (unsigned int *)v18));
          v25 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
          *v25 = (uint64_t)off_1E34BC808;
          v25[1] = v18;
          v26 = (uint64_t *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
          v27 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v27 = 1545;
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v27 + 528) = v27 + 16;
          *(_QWORD *)(v27 + 536) = v27 + 16;
          *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v27 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
          v53 = (IPC::Encoder *)v27;
          IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts const&>,0ul,1ul,2ul>((IPC::Encoder *)v27, (uint64_t)v50);
          v52[0] = v25;
          v52[1] = v26;
          IPC::Connection::sendMessageWithAsyncReply(v23, &v53, (uint64_t *)v52, 0, 0);
          v29 = v52[0];
          v52[0] = 0;
          if (v29)
            (*(void (**)(uint64_t *))(*v29 + 8))(v29);
          v30 = v53;
          v53 = 0;
          if (v30)
          {
            IPC::Encoder::~Encoder(v30, v28);
            WTF::fastFree(v31, v32);
          }
          v33 = (unsigned __int8 **)v51;
          v51 = 0;
          if (!v33)
            goto LABEL_34;
          v34 = *v33;
          if (__ldaxr(*v33))
          {
            __clrex();
          }
          else if (!__stxr(1u, v34))
          {
            goto LABEL_24;
          }
          MEMORY[0x19AEABB3C](v34);
LABEL_24:
          v36 = *((_QWORD *)v34 + 1);
          v37 = v36 - 1;
          *((_QWORD *)v34 + 1) = v36 - 1;
          if (v36 == 1)
          {
            v43 = *((_QWORD *)v34 + 2);
            v39 = *((_QWORD *)v34 + 3);
            *((_QWORD *)v34 + 3) = 0;
            v38 = v43 == 0;
          }
          else
          {
            v38 = 0;
            v39 = 0;
          }
          v40 = __ldxr(v34);
          if (v40 == 1)
          {
            if (!__stlxr(0, v34))
            {
              if (!v37)
                goto LABEL_32;
              goto LABEL_34;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v34);
          if (!v37)
          {
LABEL_32:
            v41 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v41 = off_1E34ACA48;
            *(_QWORD *)(v41 + 8) = v34;
            *(_QWORD *)(v41 + 16) = v39;
            *(_BYTE *)(v41 + 24) = v38;
            v50[0] = v41;
            WTF::ensureOnMainRunLoop();
            v42 = v50[0];
            v50[0] = 0;
            if (v42)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          }
LABEL_34:
          if (++v21 == v22)
            goto LABEL_37;
        }
      }
      do
      {
LABEL_37:
        v44 = __ldaxr((unsigned int *)v18);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, (unsigned int *)v18));
      if (!v45)
      {
        atomic_store(1u, (unsigned int *)v18);
        v50[0] = v18;
        WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v50);
      }
    }
  }
}

uint64_t WebKit::NetworkBroadcastChannelRegistry::removeConnection(WebCore::SecurityOriginData **this, IPC::Connection *a2)
{
  uint64_t *v3;
  WebCore::SecurityOriginData *v4;
  WebCore::SecurityOriginData *v5;
  uint64_t *v6;
  WebCore::SecurityOriginData *v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  const WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WebCore::SecurityOriginData *v35[2];
  uint64_t v36;
  uint64_t v37;

  v36 = 0;
  v37 = 0;
  v3 = (uint64_t *)(this + 1);
  v4 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(this[1]);
  v6 = (uint64_t *)v4;
  v7 = 0;
  v35[0] = v4;
  v35[1] = v5;
  if (*v3)
    v7 = (WebCore::SecurityOriginData *)(*v3 + 72 * *(unsigned int *)(*v3 - 4));
  if (v7 != v4)
  {
    while (1)
    {
      v33 = 0;
      v34 = 0;
      v9 = v6 + 8;
      v10 = (_QWORD *)v6[8];
      v11 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v10);
      v14 = (unint64_t)v11;
      v15 = v12;
      if (v10)
        v10 += 3 * *((unsigned int *)v10 - 1);
      if (v10 != v11)
      {
        do
        {
          v16 = *(unsigned int *)(v14 + 20);
          if (!(_DWORD)v16)
            goto LABEL_14;
          v17 = *((_QWORD *)a2 + 3);
          v18 = *(_QWORD **)(v14 + 8);
          if (*v18 == v17)
          {
            v19 = 0;
          }
          else
          {
            v19 = 0;
            do
            {
              if (v16 - 1 == v19)
                goto LABEL_18;
              v25 = v18[++v19];
            }
            while (v25 != v17);
          }
          v20 = (char *)&v18[v19];
          v12 = v20 + 8;
          if (v20 + 8 != (char *)&v18[v16])
          {
            memmove(v20, v12, 8 * (v16 - v19) - 8);
            LODWORD(v16) = *(_DWORD *)(v14 + 20);
          }
          v21 = v16 - 1;
          *(_DWORD *)(v14 + 20) = v21;
          if (!v21)
          {
LABEL_14:
            v22 = HIDWORD(v34);
            if (HIDWORD(v34) == (_DWORD)v34)
            {
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v33, v14);
            }
            else
            {
              v23 = v33;
              v24 = *(WTF::StringImpl **)v14;
              if (*(_QWORD *)v14)
                *(_DWORD *)v24 += 2;
              v23[v22] = v24;
              HIDWORD(v34) = v22 + 1;
            }
          }
LABEL_18:
          while (1)
          {
            v14 += 24;
            if ((void *)v14 == v15)
              break;
            if ((unint64_t)(*(_QWORD *)v14 + 1) > 1)
              goto LABEL_22;
          }
          v14 = (unint64_t)v15;
LABEL_22:
          ;
        }
        while ((_QWORD *)v14 != v10);
        if (HIDWORD(v34))
          break;
      }
LABEL_39:
      if (!*v9 || !*(_DWORD *)(*v9 - 12))
      {
        v30 = HIDWORD(v37);
        if (HIDWORD(v37) == (_DWORD)v37)
        {
          WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ClientOrigin&>((uint64_t)&v36, (unint64_t)v6);
        }
        else
        {
          WebCore::ClientOrigin::ClientOrigin((WebCore::ClientOrigin *)(v36 + ((unint64_t)HIDWORD(v37) << 6)), (const WebCore::ClientOrigin *)v6);
          HIDWORD(v37) = v30 + 1;
        }
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v12);
      v35[0] = (WebCore::SecurityOriginData *)((char *)v35[0] + 72);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v35);
      v6 = (uint64_t *)v35[0];
      if (v35[0] == v7)
      {
        if (HIDWORD(v37))
        {
          v31 = v36;
          v32 = (unint64_t)HIDWORD(v37) << 6;
          do
          {
            WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(v3, v31);
            v31 += 64;
            v32 -= 64;
          }
          while (v32);
        }
        return WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v5);
      }
    }
    v26 = v33;
    v27 = 8 * HIDWORD(v34);
    while (1)
    {
      v28 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v6 + 8, v26, v13);
      v12 = (void *)v28;
      if (*v9)
      {
        v29 = *v9 + 24 * *(unsigned int *)(*v9 - 4);
        if (v29 != v28)
          goto LABEL_36;
      }
      else if (v28)
      {
        v29 = 0;
LABEL_36:
        if (v29 != v28)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v6 + 8, v28);
      }
      ++v26;
      v27 -= 8;
      if (!v27)
        goto LABEL_39;
    }
  }
  return WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v5);
}

uint64_t WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char v15;
  char v16;

  result = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>(a1, a2);
  v5 = result;
  if (*a1)
  {
    v6 = *a1 + 72 * *(unsigned int *)(*a1 - 4);
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
  {
    v7 = *(unsigned int *)(result + 56);
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v7])(&v15, result + 32);
    *(_DWORD *)(v5 + 56) = -1;
    v8 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v8])(&v16, v5);
    *(_QWORD *)v5 = -1;
    *(_QWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 0;
    *(_DWORD *)(v5 + 24) = 0;
    result = *(_QWORD *)(v5 + 64);
    if (result)
      result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v4);
    ++*(_DWORD *)(*a1 - 16);
    v9 = *a1;
    if (*a1)
      v10 = *(_DWORD *)(v9 - 12) - 1;
    else
      v10 = -1;
    *(_DWORD *)(v9 - 12) = v10;
    v11 = *a1;
    if (*a1)
    {
      v12 = 6 * *(_DWORD *)(v11 - 12);
      v13 = *(_DWORD *)(v11 - 4);
      if (v12 < v13 && v13 >= 9)
        return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v13 >> 1, 0);
    }
  }
  return result;
}

void WebKit::NetworkCORSPreflightChecker::~NetworkCORSPreflightChecker(WebKit::NetworkCORSPreflightChecker *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v15;
  WTF::StringImpl *v16;
  const void *v17;
  const void *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  WTF::StringImpl *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  __int16 v33;
  CFTypeRef cf;
  char v35;

  v3 = *((_QWORD *)this + 68);
  if (v3)
  {
    v4 = *(unsigned int **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 68) + 16))(*((_QWORD *)this + 68));
  }
  if (*((_QWORD *)this + 67))
  {
    v29 = 0;
    v30 = 0;
    WTF::URL::invalidate((WTF::URL *)&v30);
    v31 = 0;
    v32 = 0;
    v33 = 3;
    cf = 0;
    v35 = 1;
    v7 = *((_QWORD *)this + 67);
    *((_QWORD *)this + 67) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v29);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
    v9 = v31;
    v31 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v30;
    v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v29;
    v29 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  v15 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v15)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v15);
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (const void *)*((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v17)
    CFRelease(v17);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkCORSPreflightChecker *)((char *)this + 768), (WTF::StringImpl *)a2);
  v18 = (const void *)*((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v18)
    CFRelease(v18);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkCORSPreflightChecker *)((char *)this + 568));
  v20 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v20)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v20 + 8));
  v21 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = (const void *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v22)
    CFRelease(v22);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NetworkCORSPreflightChecker *)((char *)this + 280), v19);
  v24 = (unsigned int *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v24)
  {
    v25 = v24 + 30;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v24 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
    }
  }
  WebKit::NetworkCORSPreflightChecker::Parameters::~Parameters((WebKit::NetworkCORSPreflightChecker *)((char *)this + 16), v23);
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v28);
}

{
  WTF *v2;
  void *v3;

  WebKit::NetworkCORSPreflightChecker::~NetworkCORSPreflightChecker(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  const void *v8;
  NSObject *v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  _DWORD *v18;
  __int128 v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  CFTypeRef v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  _OWORD buf[3];
  WTF::StringImpl *v29;
  int v30;
  __int16 v31;
  CFTypeRef v32;
  char v33;
  CFTypeRef cf;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 552))
  {
    WebCore::ResourceResponseBase::operator=(a1 + 768, a2);
    v7 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    v8 = *(const void **)(a1 + 1008);
    *(_QWORD *)(a1 + 1008) = v7;
    if (v8)
      CFRelease(v8);
    *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a2 + 248);
  }
  v9 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134217984;
    *(_QWORD *)((char *)buf + 4) = a1;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::willPerformHTTPRedirection", (uint8_t *)buf, 0xCu);
  }
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf);
  v10 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v10 + 16))(v10, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
  v12 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
  if (v12)
  {
    if (v12 == 1)
    {
      v13 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = *(WTF::StringImpl **)&buf[0];
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 16));
  v15 = WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2);
  *(_QWORD *)&buf[0] = "Preflight response is not successful. Status code: ";
  *((_QWORD *)&buf[0] + 1) = 52;
  v27 = v15;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,int>((uint64_t *)buf, &v27, &v26);
  v17 = v26;
  if (!v26)
  {
    __break(0xC471u);
    return result;
  }
  if (v13)
    *(_DWORD *)v13 += 2;
  *(_QWORD *)&buf[0] = v13;
  v18 = *(_DWORD **)v14;
  if (*(_QWORD *)v14)
    *v18 += 2;
  *((_QWORD *)&buf[0] + 1) = v18;
  v19 = *(_OWORD *)(v14 + 24);
  buf[1] = *(_OWORD *)(v14 + 8);
  buf[2] = v19;
  *(_DWORD *)v17 += 2;
  v29 = v17;
  v30 = 0;
  v31 = 2;
  v32 = 0;
  v33 = 1;
  v20 = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 536) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v20 + 16))(v20, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v22 = v32;
  v32 = 0;
  if (v22)
    CFRelease(v22);
  v23 = v29;
  v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)&buf[0] + 1);
  *((_QWORD *)&buf[0] + 1) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *(WTF::StringImpl **)&buf[0];
  *(_QWORD *)&buf[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
      if (!v13)
        return result;
      goto LABEL_37;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v13)
    return result;
LABEL_37:
  if (*(_DWORD *)v13 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v21);
  *(_DWORD *)v13 -= 2;
  return result;
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::didReceiveChallenge(_QWORD *a1, WebCore::AuthenticationChallengeBase *a2, char a3, uint64_t *a4)
{
  NSObject *v8;
  int v9;
  uint64_t *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *result;
  uint64_t v15;
  WTF::StringImpl *v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  _BYTE v19[18];
  CFTypeRef cf;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(unsigned __int8 *)(WebCore::AuthenticationChallengeBase::protectionSpace(a2) + 21);
    *(_DWORD *)v19 = 134218240;
    *(_QWORD *)&v19[4] = a1;
    *(_WORD *)&v19[12] = 1024;
    *(_DWORD *)&v19[14] = v9;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::didReceiveChallenge, authentication scheme: %u", v19, 0x12u);
  }
  if (*(unsigned __int8 *)(WebCore::AuthenticationChallengeBase::protectionSpace(a2) + 21) - 7 >= 2)
  {
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)v19);
    cf = 0;
    v15 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v15 + 16))(v15, 0, v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v17 = cf;
    cf = 0;
    if (v17)
      CFRelease(v17);
    v18 = *(WTF::StringImpl **)&v19[8];
    *(_QWORD *)&v19[8] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    result = *(WTF::StringImpl **)v19;
    *(_QWORD *)v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v10 = (uint64_t *)(a1[34] + 192);
    *(_QWORD *)v19 = "AuthenticationManager";
    *(_QWORD *)&v19[8] = 22;
    v11 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v10, (WTF::ASCIILiteralHash *)v19);
    v12 = a1[28];
    if (v12)
      v13 = v12 + 8;
    else
      v13 = 0;
    return (WTF::StringImpl *)WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v11, a1[31], a1[32], v13, a2, a3, a4);
  }
  return result;
}

uint64_t WebKit::NetworkCORSPreflightChecker::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  NSObject *v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 134217984;
    v16 = a1;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::didReceiveResponse", (uint8_t *)&v15, 0xCu);
  }
  if (*(_BYTE *)(a1 + 552))
  {
    WebCore::ResourceResponseBase::operator=(a1 + 768, a2);
    v9 = *(_QWORD *)(a2 + 240);
    if (v9)
      CFRetain(*(CFTypeRef *)(a2 + 240));
    v10 = *(const void **)(a1 + 1008);
    *(_QWORD *)(a1 + 1008) = v9;
    if (v10)
      CFRelease(v10);
    *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a2 + 248);
  }
  WebCore::ResourceResponseBase::operator=(a1 + 280, a2);
  v11 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  v12 = *(const void **)(a1 + 520);
  *(_QWORD *)(a1 + 520) = v11;
  if (v12)
    CFRelease(v12);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 248);
  v13 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

void WebKit::NetworkCORSPreflightChecker::didReceiveData(WebKit::NetworkCORSPreflightChecker *this, const WebCore::SharedBuffer *a2)
{
  NSObject *v3;
  int v4;
  WebKit::NetworkCORSPreflightChecker *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 134217984;
    v5 = this;
    _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::didReceiveData", (uint8_t *)&v4, 0xCu);
  }
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::didCompleteWithError(WebKit::NetworkCORSPreflightChecker *this, const WebCore::ResourceError *a2, const WebCore::NetworkLoadMetrics *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _DWORD *v11;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v12;
  int v13;
  NSObject *v14;
  _BOOL4 v15;
  _DWORD *v16;
  _DWORD *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  const void *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  CFTypeRef v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *result;
  uint64_t v30;
  CFTypeRef v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  _DWORD *v37;
  __int128 v38;
  uint64_t v39;
  CFTypeRef v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF *v43;
  WTF::StringImpl *v44;
  char v45;
  _BYTE buf[32];
  __int128 v47;
  WTF::StringImpl *v48[2];
  CFTypeRef cf;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 552))
  {
    v6 = *(_OWORD *)a3;
    *((_OWORD *)this + 65) = *((_OWORD *)a3 + 1);
    *((_OWORD *)this + 64) = v6;
    v7 = *((_OWORD *)a3 + 2);
    v8 = *((_OWORD *)a3 + 3);
    v9 = *((_OWORD *)a3 + 4);
    *((_QWORD *)this + 138) = *((_QWORD *)a3 + 10);
    *((_OWORD *)this + 68) = v9;
    *((_OWORD *)this + 67) = v8;
    *((_OWORD *)this + 66) = v7;
    WTF::String::operator=((WTF::StringImpl **)this + 139, (const WebCore::NetworkLoadMetrics *)((char *)a3 + 88));
    v10 = *((_OWORD *)a3 + 6);
    *((_QWORD *)this + 142) = *((_QWORD *)a3 + 14);
    *((_OWORD *)this + 70) = v10;
    v11 = (_DWORD *)*((_QWORD *)a3 + 15);
    if (v11)
      ++*v11;
    v12 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((_QWORD *)this + 143);
    *((_QWORD *)this + 143) = v11;
    if (v12)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v12);
  }
  v13 = *((unsigned __int8 *)a2 + 60);
  v14 = off_1ECE713E8;
  v15 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT);
  if (!v13)
  {
    if (v15)
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = WebCore::ResourceResponseBase::httpStatusCode((WebKit::NetworkCORSPreflightChecker *)((char *)this + 280));
      _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::didComplete http_status_code=%d", buf, 0x12u);
    }
    WebCore::validatePreflightResponse();
    if (v45)
    {
      v25 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        v26 = v43 ? (uint64_t)v43 + 16 : 0;
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = this;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v26;
        _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::didComplete, AccessControl error: %s", buf, 0x16u);
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            WTF::fastFree(v43, v27);
          else
            --*(_DWORD *)v43;
        }
      }
      v34 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
      if (v34)
      {
        if (v34 == 1)
        {
          v35 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v35 = *(WTF::StringImpl **)buf;
        }
      }
      else
      {
        v35 = 0;
      }
      v36 = WebCore::ResourceRequestBase::url((WebKit::NetworkCORSPreflightChecker *)((char *)this + 16));
      if (v35)
        *(_DWORD *)v35 += 2;
      *(_QWORD *)buf = v35;
      v37 = *(_DWORD **)v36;
      if (*(_QWORD *)v36)
        *v37 += 2;
      *(_QWORD *)&buf[8] = v37;
      v38 = *(_OWORD *)(v36 + 24);
      *(_OWORD *)&buf[16] = *(_OWORD *)(v36 + 8);
      v47 = v38;
      if (v44)
        *(_DWORD *)v44 += 2;
      v48[0] = v44;
      LODWORD(v48[1]) = 0;
      WORD2(v48[1]) = 2;
      cf = 0;
      v50 = 1;
      v39 = *((_QWORD *)this + 67);
      *((_QWORD *)this + 67) = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v39 + 16))(v39, buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      v40 = cf;
      cf = 0;
      if (v40)
        CFRelease(v40);
      v41 = v48[0];
      v48[0] = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v22);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = *(WTF::StringImpl **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v22);
        else
          *(_DWORD *)v42 -= 2;
      }
      result = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (!result)
      {
LABEL_77:
        if (!v35)
          goto LABEL_84;
        goto LABEL_80;
      }
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        goto LABEL_77;
      }
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      if (v35)
      {
LABEL_80:
        if (*(_DWORD *)v35 != 2)
        {
          *(_DWORD *)v35 -= 2;
          goto LABEL_84;
        }
        result = v35;
LABEL_83:
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      }
    }
    else
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      WTF::URL::invalidate((WTF::URL *)&buf[8]);
      cf = 0;
      memset(v48, 0, 14);
      v50 = 1;
      v30 = *((_QWORD *)this + 67);
      *((_QWORD *)this + 67) = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v30 + 16))(v30, buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      v31 = cf;
      cf = 0;
      if (v31)
        CFRelease(v31);
      v32 = v48[0];
      v48[0] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v22);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = *(WTF::StringImpl **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v22);
        else
          *(_DWORD *)v33 -= 2;
      }
      result = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          goto LABEL_83;
        *(_DWORD *)result -= 2;
      }
    }
LABEL_84:
    if (!v45)
      return result;
    result = v44;
    if (!v44)
      return result;
LABEL_86:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    *(_DWORD *)result -= 2;
    return result;
  }
  if (v15)
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::didCompleteWithError", buf, 0xCu);
  }
  v16 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v16 += 2;
  *(_QWORD *)buf = v16;
  v17 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v17)
    *v17 += 2;
  *(_QWORD *)&buf[8] = v17;
  v18 = *((_OWORD *)a2 + 2);
  *(_OWORD *)&buf[16] = *((_OWORD *)a2 + 1);
  v47 = v18;
  v19 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  if (v19)
    *(_DWORD *)v19 += 2;
  v48[0] = v19;
  LODWORD(v48[1]) = *((_DWORD *)a2 + 14);
  WORD2(v48[1]) = *((_WORD *)a2 + 30);
  v20 = (const void *)*((_QWORD *)a2 + 8);
  cf = v20;
  if (v20)
    CFRetain(v20);
  v50 = *((_BYTE *)a2 + 72);
  if (BYTE4(v48[1]) <= 1u)
    WebCore::ResourceErrorBase::setType();
  v21 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 16))(v21, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v23 = cf;
  cf = 0;
  if (v23)
    CFRelease(v23);
  v24 = v48[0];
  v48[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
  }
  v28 = *(WTF::StringImpl **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v22);
    else
      *(_DWORD *)v28 -= 2;
  }
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
    goto LABEL_86;
  return result;
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::wasBlocked(WebKit::NetworkCORSPreflightChecker *this)
{
  NSObject *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  __int128 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  _OWORD v15[3];
  WTF::StringImpl *v16;
  int v17;
  __int16 v18;
  CFTypeRef cf;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v15[0]) = 134217984;
    *(_QWORD *)((char *)v15 + 4) = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::wasBlocked", (uint8_t *)v15, 0xCu);
  }
  v3 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = *(WTF::StringImpl **)&v15[0];
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = WebCore::ResourceRequestBase::url((WebKit::NetworkCORSPreflightChecker *)((char *)this + 16));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = *(WTF::StringImpl **)&v15[0];
  if (v4)
    *(_DWORD *)v4 += 2;
  *(_QWORD *)&v15[0] = v4;
  v7 = *(_DWORD **)v5;
  if (*(_QWORD *)v5)
    *v7 += 2;
  *((_QWORD *)&v15[0] + 1) = v7;
  v8 = *(_OWORD *)(v5 + 24);
  v15[1] = *(_OWORD *)(v5 + 8);
  v15[2] = v8;
  if (v6)
    *(_DWORD *)v6 += 2;
  v16 = v6;
  v17 = 0;
  v18 = 2;
  cf = 0;
  v20 = 1;
  v9 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 16))(v9, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)&v15[0] + 1);
  *((_QWORD *)&v15[0] + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = *(WTF::StringImpl **)&v15[0];
  *(_QWORD *)&v15[0] = 0;
  if (!result)
  {
LABEL_25:
    if (!v6)
      goto LABEL_30;
    goto LABEL_28;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_25;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  if (!v6)
    goto LABEL_30;
LABEL_28:
  if (*(_DWORD *)v6 == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v10);
    if (!v4)
      return result;
    goto LABEL_33;
  }
  *(_DWORD *)v6 -= 2;
LABEL_30:
  if (!v4)
    return result;
LABEL_33:
  if (*(_DWORD *)v4 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v10);
  *(_DWORD *)v4 -= 2;
  return result;
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::cannotShowURL(WebKit::NetworkCORSPreflightChecker *this)
{
  NSObject *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  __int128 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  _OWORD v15[3];
  WTF::StringImpl *v16;
  int v17;
  __int16 v18;
  CFTypeRef cf;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v15[0]) = 134217984;
    *(_QWORD *)((char *)v15 + 4) = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::cannotShowURL", (uint8_t *)v15, 0xCu);
  }
  v3 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = *(WTF::StringImpl **)&v15[0];
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = WebCore::ResourceRequestBase::url((WebKit::NetworkCORSPreflightChecker *)((char *)this + 16));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = *(WTF::StringImpl **)&v15[0];
  if (v4)
    *(_DWORD *)v4 += 2;
  *(_QWORD *)&v15[0] = v4;
  v7 = *(_DWORD **)v5;
  if (*(_QWORD *)v5)
    *v7 += 2;
  *((_QWORD *)&v15[0] + 1) = v7;
  v8 = *(_OWORD *)(v5 + 24);
  v15[1] = *(_OWORD *)(v5 + 8);
  v15[2] = v8;
  if (v6)
    *(_DWORD *)v6 += 2;
  v16 = v6;
  v17 = 0;
  v18 = 2;
  cf = 0;
  v20 = 1;
  v9 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 16))(v9, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)&v15[0] + 1);
  *((_QWORD *)&v15[0] + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = *(WTF::StringImpl **)&v15[0];
  *(_QWORD *)&v15[0] = 0;
  if (!result)
  {
LABEL_25:
    if (!v6)
      goto LABEL_30;
    goto LABEL_28;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_25;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  if (!v6)
    goto LABEL_30;
LABEL_28:
  if (*(_DWORD *)v6 == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v10);
    if (!v4)
      return result;
    goto LABEL_33;
  }
  *(_DWORD *)v6 -= 2;
LABEL_30:
  if (!v4)
    return result;
LABEL_33:
  if (*(_DWORD *)v4 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v10);
  *(_DWORD *)v4 -= 2;
  return result;
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::wasBlockedByRestrictions(WebKit::NetworkCORSPreflightChecker *this)
{
  NSObject *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  __int128 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  _OWORD v15[3];
  WTF::StringImpl *v16;
  int v17;
  __int16 v18;
  CFTypeRef cf;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v15[0]) = 134217984;
    *(_QWORD *)((char *)v15 + 4) = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::wasBlockedByRestrictions", (uint8_t *)v15, 0xCu);
  }
  v3 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = *(WTF::StringImpl **)&v15[0];
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = WebCore::ResourceRequestBase::url((WebKit::NetworkCORSPreflightChecker *)((char *)this + 16));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = *(WTF::StringImpl **)&v15[0];
  if (v4)
    *(_DWORD *)v4 += 2;
  *(_QWORD *)&v15[0] = v4;
  v7 = *(_DWORD **)v5;
  if (*(_QWORD *)v5)
    *v7 += 2;
  *((_QWORD *)&v15[0] + 1) = v7;
  v8 = *(_OWORD *)(v5 + 24);
  v15[1] = *(_OWORD *)(v5 + 8);
  v15[2] = v8;
  if (v6)
    *(_DWORD *)v6 += 2;
  v16 = v6;
  v17 = 0;
  v18 = 2;
  cf = 0;
  v20 = 1;
  v9 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 16))(v9, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)&v15[0] + 1);
  *((_QWORD *)&v15[0] + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = *(WTF::StringImpl **)&v15[0];
  *(_QWORD *)&v15[0] = 0;
  if (!result)
  {
LABEL_25:
    if (!v6)
      goto LABEL_30;
    goto LABEL_28;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_25;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  if (!v6)
    goto LABEL_30;
LABEL_28:
  if (*(_DWORD *)v6 == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v10);
    if (!v4)
      return result;
    goto LABEL_33;
  }
  *(_DWORD *)v6 -= 2;
LABEL_30:
  if (!v4)
    return result;
LABEL_33:
  if (*(_DWORD *)v4 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v10);
  *(_DWORD *)v4 -= 2;
  return result;
}

WTF::StringImpl *WebKit::NetworkCORSPreflightChecker::wasBlockedByDisabledFTP(WebKit::NetworkCORSPreflightChecker *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  CFTypeRef v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  CFTypeRef cf;

  WebKit::ftpDisabledError((WebKit::NetworkCORSPreflightChecker *)((char *)this + 16), (uint64_t)&v8);
  v2 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, &v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  v5 = v10;
  v10 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;

  v12 = WTF::fastMalloc((WTF *)0x148);
  v13 = v12;
  v14 = *(_DWORD *)a5;
  v15 = *(void **)(a5 + 8);
  if (v15)
  {
    os_retain(v15);
    WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(v13, a1, a2, a3, a4, v14, v15);
    os_release(v15);
  }
  else
  {
    WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(v12, a1, a2, a3, a4, v14, 0);
  }
  *a6 = v13;
}

uint64_t WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void *object)
{
  uint64_t v12;
  unsigned int *v13;
  mach_port_context_t *v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::RunLoop *v20;
  WTF::RunLoop *v21;
  WTF::RunLoop *v22;
  IPC::Connection *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;
  int v32;
  void *objecta;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 48) = &unk_1E34BC638;
  v12 = a1 + 48;
  *(_QWORD *)a1 = off_1E34BC528;
  *(_QWORD *)(a1 + 16) = &unk_1E34BC5D8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &unk_1E34BC610;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v13 = (unsigned int *)(a1 + 56);
  v14 = (mach_port_context_t *)(a1 + 64);
  v32 = a6;
  objecta = object;
  if (object)
    os_retain(object);
  IPC::Connection::createServerConnection((uint64_t)&v32, v14);
  if (objecta)
    os_release(objecta);
  v15 = (unsigned int *)(a2 + 120);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 80) = a4;
  *(_QWORD *)(a1 + 88) = 0;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = off_1E34BC830;
  v17[1] = a1;
  v31 = v17;
  WebKit::NetworkResourceLoadMap::NetworkResourceLoadMap(a1 + 96, (uint64_t *)&v31);
  v18 = (uint64_t)v31;
  v31 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  WebKit::NetworkMDNSRegister::NetworkMDNSRegister((unsigned int **)(a1 + 160), a1);
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = a3;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  v19 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(a1 + 280) = v19;
  v20 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_1E34BEFB0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = v20;
  *(_WORD *)(a1 + 312) = *(_WORD *)(a5 + 1);
  *(_BYTE *)(a1 + 314) = *(_BYTE *)a5;
  *(_QWORD *)(a1 + 320) = 0;
  v21 = (WTF::RunLoop *)WTF::RunLoop::main(v20);
  if ((WTF::RunLoop::isCurrent(v21) & 1) != 0)
  {
    v22 = (WTF::RunLoop *)IPC::Connection::setOnlySendMessagesAsDispatchWhenWaitingForSyncReplyWhenProcessingSuchAMessage(*v14, 1);
    v23 = (IPC::Connection *)*v14;
    v24 = WTF::RunLoop::current(v22);
    IPC::Connection::open(v23, v12, v24);
    v25 = *v14;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v13, v12);
    v26 = *(unsigned int **)v13;
    if (v26)
    {
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
    }
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v28 = &off_1E34BC858;
    v28[1] = v26;
    v31 = v28;
    IPC::Connection::setOutgoingMessageQueueIsGrowingLargeCallback(v25, (uint64_t *)&v31);
    v29 = (uint64_t)v31;
    v31 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    WebKit::NetworkConnectionToWebProcess::establishSWServerConnection((_QWORD *)a1);
    WebKit::NetworkConnectionToWebProcess::establishSharedWorkerServerConnection((_QWORD *)a1);
    return a1;
  }
  else
  {
    result = 150;
    __break(0xC471u);
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess *this)
{
  WTF::RunLoop *v2;
  WTF::StringImpl *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WebKit::NetworkRTCProvider *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl ***v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl **v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;

  *(_QWORD *)this = off_1E34BC528;
  *((_QWORD *)this + 2) = &unk_1E34BC5D8;
  *((_QWORD *)this + 4) = &unk_1E34BC610;
  *((_QWORD *)this + 6) = &unk_1E34BC638;
  v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1970A200CLL);
  }
  IPC::Connection::invalidate(*((_QWORD *)this + 8));
  WebKit::NetworkResourceLoadMap::clear((WebKit::NetworkConnectionToWebProcess *)((char *)this + 96), v3);
  v4 = (_QWORD *)*((_QWORD *)this + 33);
  v5 = WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::begin(v4);
  v6 = v5;
  v8 = v7;
  if (v4)
    v4 += 2 * *((unsigned int *)v4 - 1);
  if (v4 != v5)
  {
    do
    {
      WebCore::MessagePortChannelRegistry::didCloseMessagePort();
      while (1)
      {
        v6 += 2;
        if (v6 == v8)
          break;
        if (*v6 != -1 && *(_OWORD *)v6 != 0)
          goto LABEL_12;
      }
      v6 = v8;
LABEL_12:
      ;
    }
    while (v6 != v4);
  }
  v10 = (_QWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  v11 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::begin(v10);
  v12 = v11;
  v14 = v13;
  if (v10)
    v15 = &v10[2 * *((unsigned int *)v10 - 1)];
  else
    v15 = 0;
  if (v15 != v11)
  {
    do
    {
      v51 = v12[1];
      v12[1] = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      while (1)
      {
        v12 += 2;
        if (v12 == v14)
          break;
        if ((unint64_t)(*v12 + 1) > 1)
          goto LABEL_71;
      }
      v12 = v14;
LABEL_71:
      ;
    }
    while (v12 != v15);
  }
  v16 = *((_QWORD *)this + 9);
  v52 = *((_QWORD *)this + 10);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v16 + 216), &v52))
  {
    WebCore::NetworkStorageSession::stopListeningForCookieChangeNotifications();
  }
  v17 = *((_QWORD *)this + 9);
  v52 = *((_QWORD *)this + 10);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v17 + 216), &v52))
  {
    WebCore::NetworkStorageSession::removeCookiesEnabledStateObserver();
  }
  v18 = (WebKit::NetworkRTCProvider *)*((_QWORD *)this + 19);
  if (v18)
    WebKit::NetworkRTCProvider::close(v18);
  WebKit::NetworkConnectionToWebProcess::unregisterToRTCDataChannelProxy((WebKit::NetworkProcess **)this);
  WebKit::NetworkConnectionToWebProcess::unregisterSWConnection(*((_DWORD **)this + 26));
  WebKit::NetworkConnectionToWebProcess::unregisterSharedWorkerConnection(this);
  if (v10)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable((uint64_t)v10, v19);
  v20 = *((_QWORD *)this + 40);
  if (v20)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v20, v19);
  v21 = (_QWORD *)*((_QWORD *)this + 38);
  if (v21)
    WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::deallocateTable(v21, (WTF::StringImpl *)v19);
  v22 = *((_QWORD *)this + 37);
  if (v22)
    WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::deallocateTable(v22, (WTF::StringImpl *)v19);
  std::unique_ptr<WebKit::NetworkOriginAccessPatterns>::reset[abi:sn180100]((WTF **)this + 36, v19);
  v24 = (WTF::StringImpl ***)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v24)
    WTF::RefCounted<WebKit::NetworkSchemeRegistry>::deref(v24, v23);
  v25 = *((_QWORD *)this + 34);
  if (v25)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v25, v23);
  v26 = *((_QWORD *)this + 33);
  if (v26)
    WTF::fastFree((WTF *)(v26 - 16), v23);
  v27 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  std::unique_ptr<WebKit::WebSharedWorkerServerToContextConnection>::reset[abi:sn180100]((WebKit::WebSharedWorkerServerToContextConnection **)this + 29, 0);
  v29 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v28);
    }
  }
  v32 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = (unsigned int *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v33)
  {
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, v28);
    }
  }
  v36 = (WTF::StringImpl **)*((_QWORD *)this + 24);
  if (v36)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v36, (WTF::StringImpl *)v28);
  WebKit::NetworkMDNSRegister::~NetworkMDNSRegister((WebKit::NetworkConnectionToWebProcess *)((char *)this + 160));
  v38 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v38)
    WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v38 + 24));
  v39 = *((_QWORD *)this + 18);
  if (v39)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v39, v37);
  WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 32, v37);
  v41 = *((_QWORD *)this + 15);
  if (v41)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v41, v40);
  WebKit::NetworkResourceLoadMap::~NetworkResourceLoadMap((WebKit::NetworkConnectionToWebProcess *)((char *)this + 96));
  v43 = *((_QWORD *)this + 11);
  if (v43)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v43, v42);
  v44 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v44)
  {
    v45 = v44 + 30;
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v44 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
    }
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 8);
  *((_QWORD *)this + 6) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 7, v48);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 5, v49);
  WTF::WeakPtrFactory<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v50);
}

{
  WTF *v1;
  void *v2;

  WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess(this);
  WTF::fastFree(v1, v2);
}

void WebKit::NetworkConnectionToWebProcess::unregisterToRTCDataChannelProxy(WebKit::NetworkProcess **this)
{
  WebKit::RTCDataChannelRemoteManagerProxy *v2;

  if (*((_BYTE *)this + 240))
  {
    v2 = WebKit::NetworkProcess::rtcDataChannelProxy(this[9]);
    WebKit::RTCDataChannelRemoteManagerProxy::unregisterConnectionToWebProcess(v2, (WebKit::NetworkConnectionToWebProcess *)this);
  }
}

_DWORD *WebKit::NetworkConnectionToWebProcess::unregisterSWConnection(_DWORD *this)
{
  uint64_t v1;
  _DWORD *v2;

  if (this)
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
    {
      v2 = *(_DWORD **)(*(_QWORD *)(v1 + 24) + 8);
      ++*v2;
      WebCore::SWServer::removeConnection();
      return WTF::RefCounted<WebCore::SWServer>::deref(v2);
    }
  }
  return this;
}

void WebKit::NetworkConnectionToWebProcess::unregisterSharedWorkerConnection(WebKit::NetworkConnectionToWebProcess *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebKit::NetworkConnectionToWebProcess *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 32);
    v6 = 134218240;
    v7 = this;
    v8 = 2048;
    v9 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::unregisterSharedWorkerConnection:", (uint8_t *)&v6, 0x16u);
  }
  v4 = *((_QWORD *)this + 28);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      WebKit::WebSharedWorkerServer::removeConnection(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
  }
}

void `non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess(WebKit::NetworkConnectionToWebProcess *this)
{
  WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess((WebKit::NetworkConnectionToWebProcess *)((char *)this - 16));
}

{
  WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess((WebKit::NetworkConnectionToWebProcess *)((char *)this - 32));
}

{
  WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess((WebKit::NetworkConnectionToWebProcess *)((char *)this - 48));
}

{
  WTF *v1;
  void *v2;

  WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess((WebKit::NetworkConnectionToWebProcess *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess((WebKit::NetworkConnectionToWebProcess *)((char *)this - 32));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::NetworkConnectionToWebProcess::~NetworkConnectionToWebProcess((WebKit::NetworkConnectionToWebProcess *)((char *)this - 48));
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::NetworkConnectionToWebProcess::loadImageForDecoding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v17[8];
  char v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  v10 = (_DWORD *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 208), &v16);
  if (v10)
  {
    v11 = v10;
    ++v10[4];
    result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v10 + 144))(v10, a2, a3, a4, a5);
    v13 = v11[4];
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x1970A236CLL);
    }
    v11[4] = v13 - 1;
  }
  else
  {
    v16 = 0;
    v17[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v17);
    v17[7] = 0;
    memset(&v17[5], 0, 14);
    v18 = 1;
    v19 = 0;
    v14 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 16))(v14, &v16);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v19 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E34BC6A8[v19])(&v15, &v16);
  }
  return result;
}

_DWORD *WebKit::NetworkConnectionToWebProcess::transferKeptAliveLoad(WebKit::NetworkConnectionToWebProcess *this, WebKit::NetworkResourceLoader *a2)
{
  WTF::RunLoop *v4;
  _DWORD *result;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v4) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1970A2400);
  }
  result = (_DWORD *)WebKit::NetworkResourceLoadMap::take((uint64_t)this + 96, *((_QWORD *)a2 + 379), &v10);
  if (v10)
  {
    v6 = *((_QWORD *)this + 9);
    v9 = v10;
    result = WebKit::NetworkProcess::addKeptAliveLoad(v6, (WTF::StringImpl *)&v9);
    v8 = v9;
    v9 = 0;
    if (v8)
      return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v8 + 8), v7);
  }
  return result;
}

unsigned __int8 ***WebKit::NetworkConnectionToWebProcess::rtcProvider(WebKit::NetworkConnectionToWebProcess *this)
{
  unsigned __int8 ***v1;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;

  v1 = (unsigned __int8 ***)*((_QWORD *)this + 19);
  if (!v1)
  {
    v1 = (unsigned __int8 ***)WTF::fastMalloc((WTF *)0xC8);
    v3 = WebKit::NetworkRTCProvider::NetworkRTCProvider(v1, this)[7][1];
    if (v3)
      v4 = v3 - 48;
    else
      v4 = 0;
    IPC::Connection::addMessageReceiver(*((_QWORD *)v4 + 8), (uint64_t)v1, (uint64_t)(v1 + 1), 0x27u, 0);
    v5 = *((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = v1;
    if (v5)
    {
      WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v5 + 24));
      return (unsigned __int8 ***)*((_QWORD *)this + 19);
    }
  }
  return v1;
}

void `non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::didReceiveMessage(WebKit::NetworkConnectionToWebProcess *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::NetworkConnectionToWebProcess::didReceiveMessage((WebKit::NetworkConnectionToWebProcess *)((char *)this - 48), a2, a3);
}

uint64_t WebKit::NetworkConnectionToWebProcess::createRTCProvider(WebKit::NetworkConnectionToWebProcess *a1, uint64_t *a2)
{
  uint64_t v3;

  WebKit::NetworkConnectionToWebProcess::rtcProvider(a1);
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

IPC::Encoder *WebKit::NetworkConnectionToWebProcess::connectToRTCDataChannelRemoteSource(WebKit::NetworkConnectionToWebProcess *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *result;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24[2];
  uint64_t v25[2];
  uint64_t v26[2];
  IPC::Encoder *v27;

  v25[0] = a2;
  v25[1] = a3;
  v24[0] = a4;
  v24[1] = a5;
  v10 = *((_QWORD *)a1 + 9);
  v26[0] = a4;
  v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v10 + 128), v26);
  if (v11)
  {
    v12 = v11;
    ++*(_DWORD *)(v11 + 8);
    WebKit::NetworkConnectionToWebProcess::registerToRTCDataChannelProxy(a1);
    WebKit::NetworkConnectionToWebProcess::registerToRTCDataChannelProxy((WebKit::NetworkConnectionToWebProcess *)v12);
    v13 = *(os_unfair_lock_s **)(v12 + 64);
    v14 = *a6;
    *a6 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = &off_1E34BC8A8;
    v15[1] = v14;
    v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v17 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v17 = 289;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 528) = v17 + 16;
    *(_QWORD *)(v17 + 536) = v17 + 16;
    *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v17 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
    v27 = (IPC::Encoder *)v17;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v17, v24);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = a5;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v17, v25);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = a3;
    v26[0] = (uint64_t)v15;
    v26[1] = v16;
    IPC::Connection::sendMessageWithAsyncReply(v13, &v27, v26, 0, 0);
    v19 = v26[0];
    v26[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    result = v27;
    v27 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v18);
      result = (IPC::Encoder *)WTF::fastFree(v21, v22);
    }
    if (*(_DWORD *)(v12 + 8) == 1)
      return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    else
      --*(_DWORD *)(v12 + 8);
  }
  else
  {
    v23 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, 256);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::registerToRTCDataChannelProxy(WebKit::NetworkConnectionToWebProcess *this)
{
  WebKit::RTCDataChannelRemoteManagerProxy *v2;

  if (!*((_BYTE *)this + 240))
  {
    *((_BYTE *)this + 240) = 1;
    v2 = WebKit::NetworkProcess::rtcDataChannelProxy(*((WebKit::NetworkProcess **)this + 9));
    WebKit::RTCDataChannelRemoteManagerProxy::registerConnectionToWebProcess(v2, this);
  }
}

uint64_t `non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return WebKit::NetworkConnectionToWebProcess::didReceiveSyncMessage((WebKit::NetworkConnectionToWebProcess *)(a1 - 48), a2, a3, a4);
}

uint64_t WebKit::NetworkConnectionToWebProcess::didClose(WebKit::NetworkConnectionToWebProcess *this, IPC::Connection *a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  WebKit::NetworkRTCProvider *v23;
  uint64_t result;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE v28[12];
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<WebKit::WebSharedWorkerServerToContextConnection>::reset[abi:sn180100]((WebKit::WebSharedWorkerServerToContextConnection **)this + 29, 0);
  ++*((_DWORD *)this + 2);
  v5 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((_QWORD *)this + 32);
    *(_DWORD *)v28 = 134218496;
    *(_QWORD *)&v28[4] = this;
    v29 = 2048;
    v30 = v6;
    v31 = 1024;
    v32 = IPC::Connection::remoteProcessID(a2);
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::didClose: WebProcess (%d) closed its connection. Aborting related loaders.", v28, 0x1Cu);
  }
  v8 = (uint64_t *)((char *)this + 96);
  v7 = *((_QWORD *)this + 12);
  if (v7)
  {
    do
    {
      if (!*(_DWORD *)(v7 - 12))
        break;
      v25 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin((_QWORD **)this + 12);
      WebKit::NetworkResourceLoader::abort((WebKit::NetworkResourceLoader *)v25[1]);
      v7 = *v8;
    }
    while (*v8);
  }
  v9 = *((_QWORD *)this + 9);
  *(_QWORD *)v28 = *((_QWORD *)this + 10);
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 208), v28);
  if (v10)
  {
    WebKit::NetworkBroadcastChannelRegistry::removeConnection(*(WebCore::SecurityOriginData ***)(v10 + 704), a2);
    v12 = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::begin(*((_QWORD **)this + 37));
    v13 = v12;
    v15 = v14;
    v16 = *((_QWORD *)this + 37);
    if (v16)
      v17 = (_QWORD *)(v16 + 80 * *(unsigned int *)(v16 - 4));
    else
      v17 = 0;
    if (v17 != v12)
    {
      do
      {
        WebCore::BlobRegistryImpl::unregisterBlobURL();
        while (1)
        {
          v13 += 10;
          if (v13 == v15)
            break;
          if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v13) & 1) == 0
            && *v13 != -1)
          {
            goto LABEL_15;
          }
        }
        v13 = v15;
LABEL_15:
        ;
      }
      while (v13 != v17);
    }
    v18 = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::begin(*((_QWORD **)this + 38));
    v19 = (uint64_t)v18;
    v20 = v11;
    v21 = *((_QWORD *)this + 38);
    if (v21)
      v22 = (_QWORD *)(v21 + 88 * *(unsigned int *)(v21 - 4));
    else
      v22 = 0;
    if (v22 != v18)
    {
      do
      {
        if (*(_DWORD *)(v19 + 80))
        {
          v26 = 0;
          do
          {
            WebCore::BlobRegistryImpl::unregisterBlobURLHandle();
            ++v26;
          }
          while (v26 < *(_DWORD *)(v19 + 80));
        }
        while (1)
        {
          v19 += 88;
          if ((void *)v19 == v20)
            break;
          if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(v19) & 1) == 0
            && *(_QWORD *)v19 != -1)
          {
            goto LABEL_37;
          }
        }
        v19 = (uint64_t)v20;
LABEL_37:
        ;
      }
      while ((_QWORD *)v19 != v22);
    }
  }
  WebKit::NetworkConnectionToWebProcess::stopAllNetworkActivityTracking(this, v11);
  WebKit::NetworkProcess::connectionToWebProcessClosed(*((_QWORD *)this + 9), a2, *((_QWORD *)this + 10));
  WebKit::NetworkProcess::removeNetworkConnectionToWebProcess(*((WebKit::NetworkProcess **)this + 9), this);
  v23 = (WebKit::NetworkRTCProvider *)*((_QWORD *)this + 19);
  if (v23)
  {
    WebKit::NetworkRTCProvider::close(v23);
    v27 = *((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v27)
      WTF::ThreadSafeRefCounted<WebKit::NetworkRTCProvider,(WTF::DestructionThread)2>::deref((unsigned int *)(v27 + 24));
  }
  WebKit::NetworkConnectionToWebProcess::unregisterSWConnection(*((_DWORD **)this + 26));
  WebKit::NetworkConnectionToWebProcess::unregisterSharedWorkerConnection(this);
  result = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*((_DWORD *)this + 2) == 1)
    return (*(uint64_t (**)(WebKit::NetworkConnectionToWebProcess *))(*(_QWORD *)this + 8))(this);
  --*((_DWORD *)this + 2);
  return result;
}

WTF *WebKit::NetworkConnectionToWebProcess::stopAllNetworkActivityTracking(WebKit::NetworkConnectionToWebProcess *this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = (WebKit::NetworkConnectionToWebProcess *)((char *)this + 128);
  v3 = *((unsigned int *)this + 35);
  if ((_DWORD)v3)
  {
    v5 = 48 * v3;
    v6 = *((_QWORD *)this + 16) + 24;
    do
    {
      WebKit::NetworkActivityTracker::complete(v6);
      v6 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v2, a2);
}

uint64_t `non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::didClose(WebKit::NetworkConnectionToWebProcess *this, IPC::Connection *a2)
{
  return WebKit::NetworkConnectionToWebProcess::didClose((WebKit::NetworkConnectionToWebProcess *)((char *)this - 48), a2);
}

uint64_t WebKit::NetworkConnectionToWebProcess::didReceiveInvalidMessage(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v5;
  uint64_t v6;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  _BYTE v11[12];
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    if (a3 >= 0xE98)
      v8 = 3736;
    else
      v8 = a3;
    v9 = (&IPC::Detail::messageDescriptions)[3 * v8];
    v10 = *(_QWORD *)(a1 + 256);
    *(_DWORD *)v11 = 136446466;
    *(_QWORD *)&v11[4] = v9;
    v12 = 2048;
    v13 = v10;
    _os_log_fault_impl(&dword_196BCC000, v5, OS_LOG_TYPE_FAULT, "Received an invalid message '%{public}s' from WebContent process %llu, requesting for it to be terminated.", v11, 0x16u);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32);
  *(_QWORD *)v11 = a1 + 256;
  return IPC::Connection::send<Messages::NetworkProcessProxy::TerminateWebProcess>(v6, (uint64_t **)v11, 0, 0, 0);
}

uint64_t `non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::didReceiveInvalidMessage(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return WebKit::NetworkConnectionToWebProcess::didReceiveInvalidMessage(a1 - 48, a2, a3);
}

void WebKit::NetworkConnectionToWebProcess::createSocketChannel(_QWORD *a1, WebCore::ResourceRequestBase *this, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, uint64_t a11, __int16 a12)
{
  uint64_t v20;
  uint64_t v21;
  WTF::URL *PartyForCookies;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  NSObject *v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  _BYTE buf[24];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v20 = a1[9];
  v21 = a1[32];
  PartyForCookies = (WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies(this);
  if ((WebKit::NetworkProcess::allowsFirstPartyForCookies(v20, v21, PartyForCookies) & 1) != 0)
  {
    v23 = a1[10];
    v46 = *a6;
    v47 = *((_QWORD *)a6 + 2);
    WebKit::NetworkSocketChannel::create((uint64_t)a1, v23, (uint64_t)this, a3, a4, a5, (uint64_t)&v46, (uint64_t **)buf, a7, a8, a9, a10, v45, a11, 0, a12);
    v24 = *(_QWORD *)buf;
    if (!*(_QWORD *)buf)
      return;
    v27 = a1[11];
    v26 = a1 + 11;
    v25 = v27;
    if (v27
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v26, 0), (v25 = *v26) != 0))
    {
      v28 = *(_DWORD *)(v25 - 8);
    }
    else
    {
      v28 = 0;
    }
    v29 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
    v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
    v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
    v32 = v28 & ((v31 >> 31) ^ v31);
    v33 = (uint64_t *)(v25 + 16 * v32);
    v34 = *v33;
    if (*v33)
    {
      v35 = 0;
      v36 = 1;
      do
      {
        if (v34 == a4)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          return;
        }
        if (v34 == -1)
          v35 = v33;
        v32 = (v32 + v36) & v28;
        v33 = (uint64_t *)(v25 + 16 * v32);
        v34 = *v33;
        ++v36;
      }
      while (*v33);
      if (v35)
      {
        *v35 = 0;
        v35[1] = 0;
        --*(_DWORD *)(*v26 - 16);
        v33 = v35;
      }
    }
    *v33 = a4;
    v37 = v33[1];
    v33[1] = *(_QWORD *)buf;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = *v26;
    if (*v26)
      v39 = *(_DWORD *)(v38 - 12) + 1;
    else
      v39 = 1;
    *(_DWORD *)(v38 - 12) = v39;
    v40 = *v26;
    if (*v26)
      v41 = *(_DWORD *)(v40 - 12);
    else
      v41 = 0;
    v42 = (*(_DWORD *)(v40 - 16) + v41);
    v43 = *(unsigned int *)(v40 - 4);
    if (v43 <= 0x400)
    {
      if (3 * v43 > 4 * v42)
        return;
      goto LABEL_25;
    }
    if (v43 <= 2 * v42)
LABEL_25:
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v26, v33);
  }
  else
  {
    v44 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::createSocketChannel(const ResourceRequest &, cons"
                           "t String &, WebSocketIdentifier, WebPageProxyIdentifier, std::optional<FrameIdentifier>, std:"
                           ":optional<PageIdentifier>, const ClientOrigin &, BOOL, BOOL, OptionSet<AdvancedPrivacyProtect"
                           "ions>, ShouldRelaxThirdPartyCookieBlocking, WebCore::StoredCredentialsPolicy)";
      _os_log_fault_impl(&dword_196BCC000, v44, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 495: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a1[8] + 98) = 1;
  }
}

uint64_t *WebKit::NetworkConnectionToWebProcess::removeSocketChannel(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 88);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 88), &v7);
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

void **WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(void **result, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = result;
  v4 = *(unsigned int *)(a2 + 12);
  v5 = *((unsigned int *)result + 2);
  v6 = v4 + *((unsigned int *)result + 3);
  if (v6 > v5)
  {
    v7 = v5 + (v5 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= v6)
      v9 = v6;
    else
      v9 = v8;
    result = WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(result, v9);
    v4 = *(unsigned int *)(a2 + 12);
  }
  if ((_DWORD)v4)
  {
    v10 = *(uint64_t **)a2;
    v11 = *((_DWORD *)v3 + 3);
    v12 = 8 * v4;
    do
    {
      v13 = *v3;
      v14 = *v10;
      *v10++ = 0;
      v13[v11++] = v14;
      v12 -= 8;
    }
    while (v12);
    *((_DWORD *)v3 + 3) = v11;
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  WebCore::ResourceRequestBase *v10;
  WTF::URL *PartyForCookies;
  char v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::RunLoop *v22;
  uint64_t v23;
  WTF::RunLoop *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  NSObject *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  NSObject *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF *v39;
  WTF::StringImpl *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const WTF::URL *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  NSObject *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void *v57;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  WTF *v61;
  _BYTE buf[22];
  __int16 v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 256);
  v10 = (WebCore::ResourceRequestBase *)(a2 + 88);
  PartyForCookies = (WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies((WebCore::ResourceRequestBase *)(a2 + 88));
  v12 = WebKit::NetworkProcess::allowsFirstPartyForCookies(v8, v9, PartyForCookies);
  v13 = qword_1ECE71320;
  if ((v12 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 256);
      v15 = *(_DWORD *)(a2 + 48);
      v17 = *(_QWORD *)a2;
      v16 = *(_QWORD *)(a2 + 8);
      v18 = *(_QWORD *)(a2 + 16);
      v19 = *(_QWORD *)(a2 + 2952);
      if (a4)
        v20 = a3;
      else
        v20 = 0;
      *(_DWORD *)buf = 134219776;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v14;
      v63 = 1024;
      v64 = v15;
      v65 = 2048;
      v66 = v17;
      v67 = 2048;
      v68 = v16;
      v69 = 2048;
      v70 = v18;
      v71 = 2048;
      v72 = v19;
      v73 = 2048;
      v74 = v20;
      _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::scheduleResourceLoad: (parentPID=%d, pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, existingLoaderToResume=%llu)", buf, 0x4Eu);
    }
    v21 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)buf = *(_QWORD *)(a1 + 80);
    v22 = (WTF::RunLoop *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v21 + 208), buf);
    if (!v22 || (v22 = (WTF::RunLoop *)WebKit::NetworkSession::ensureSWServer(v22), *((_BYTE *)v22 + 176)))
    {
      v23 = *(_QWORD *)(a2 + 2952);
      if (!v23)
      {
        __break(0xC471u);
        JUMPOUT(0x1970A3208);
      }
      v24 = (WTF::RunLoop *)WTF::RunLoop::main(v22);
      if ((WTF::RunLoop::isCurrent(v24) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1970A3228);
      }
      if (!a4)
        goto LABEL_11;
      v33 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)buf = *(_QWORD *)(a1 + 80);
      v34 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v33 + 208), buf);
      if (v34)
      {
        WebKit::NetworkSession::takeLoaderAwaitingWebProcessTransfer(v34, a3, &v61);
        v35 = v61;
        if (v61)
        {
          v36 = qword_1ECE71320;
          if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
          {
            v37 = *(_QWORD *)(a1 + 256);
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = a1;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v37;
            _os_log_impl(&dword_196BCC000, v36, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::scheduleResourceLoad: Resuming existing NetworkResourceLoader", buf, 0x16u);
            v35 = v61;
          }
          ++*((_DWORD *)v35 + 2);
          v60 = v35;
          WebKit::NetworkResourceLoadMap::add(a1 + 96, v23, (uint64_t *)&v60, (uint64_t)buf);
          v39 = v60;
          v60 = 0;
          if (v39)
            WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v39 + 2, v38);
          WebKit::NetworkResourceLoader::transferToNewWebProcess(v61, (WebKit::NetworkConnectionToWebProcess *)a1, (const WebKit::NetworkResourceLoadParameters *)a2);
          v41 = v61;
          v61 = 0;
          if (v41)
            WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v41 + 2, v40);
          return;
        }
        v51 = qword_1ECE71320;
        if (!os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
        {
LABEL_11:
          if (*(_BYTE *)(a2 + 3770))
          {
            if (*(_BYTE *)(a2 + 2864))
            {
              v42 = *(_QWORD *)(a1 + 72);
              *(_QWORD *)buf = *(_QWORD *)(a1 + 80);
              v43 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v42 + 208), buf);
              if (v43)
              {
                v44 = *(uint64_t **)(v43 + 72);
                if (v44)
                {
                  v45 = *(_QWORD *)a2;
                  v46 = *(_QWORD *)(a2 + 16);
                  v47 = *(_QWORD *)(a2 + 24);
                  v48 = (const WTF::URL *)WebCore::ResourceRequestBase::url(v10);
                  WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, v48);
                  WebKit::WebResourceLoadStatisticsStore::recordFrameLoadForStorageAccess(v44, v45, v46, v47, (WTF::StringImpl **)buf);
                  v50 = *(WTF::StringImpl **)buf;
                  *(_QWORD *)buf = 0;
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 2)
                      WTF::StringImpl::destroy(v50, v49);
                    else
                      *(_DWORD *)v50 -= 2;
                  }
                }
              }
            }
          }
          v60 = 0;
          v25 = WTF::fastMalloc((WTF *)0x1350);
          v61 = (WTF *)WebKit::NetworkResourceLoader::NetworkResourceLoader(v25, a2, a1, (uint64_t *)&v60);
          WebKit::NetworkResourceLoadMap::add(a1 + 96, v23, (uint64_t *)&v61, (uint64_t)buf);
          v27 = v61;
          v28 = *(_QWORD *)buf;
          v61 = 0;
          if (v27)
            WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v27 + 2, v26);
          v29 = v60;
          v60 = 0;
          if (v29)
            (*(void (**)(WTF *))(*(_QWORD *)v29 + 8))(v29);
          WebKit::NetworkResourceLoader::startWithServiceWorker(*(WebKit::NetworkResourceLoader **)(v28 + 8));
          return;
        }
        v54 = *(_QWORD *)(a1 + 256);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v54;
        v53 = "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::scheduleResourceLoad: Could not find exist"
              "ing NetworkResourceLoader to resume, will do a fresh load";
      }
      else
      {
        v51 = qword_1ECE71320;
        if (!os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
          goto LABEL_11;
        v52 = *(_QWORD *)(a1 + 256);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v52;
        v53 = "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::scheduleResourceLoad: Could not find netwo"
              "rk session of existing NetworkResourceLoader to resume, will do a fresh load";
      }
      _os_log_error_impl(&dword_196BCC000, v51, OS_LOG_TYPE_ERROR, v53, buf, 0x16u);
      goto LABEL_11;
    }
    ++*(_DWORD *)(a1 + 8);
    *(_QWORD *)buf = a1;
    *(_QWORD *)&buf[8] = a1;
    WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)&buf[16], a2);
    v75 = a3;
    v76 = a4;
    WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(WebKit::NetworkResourceLoadParameters &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void>((uint64_t *)&v61, (uint64_t)buf);
    WebCore::SWServer::whenImportIsCompleted();
    v32 = v61;
    v61 = 0;
    if (v32)
      (*(void (**)(WTF *))(*(_QWORD *)v32 + 8))(v32);
    WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(WebKit::NetworkResourceLoadParameters &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,std::optional::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0::~$_0((uint64_t)buf, v31);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_ERROR))
    {
      WebCore::ResourceRequestBase::firstPartyForCookies(v10);
      WTF::String::utf8();
      if (v61)
        v55 = (char *)v61 + 16;
      else
        v55 = 0;
      WebCore::ResourceRequestBase::url(v10);
      WTF::String::utf8();
      if (v60)
        v56 = (char *)v60 + 16;
      else
        v56 = 0;
      *(_DWORD *)buf = 136643075;
      *(_QWORD *)&buf[4] = v55;
      *(_WORD *)&buf[12] = 2085;
      *(_QWORD *)&buf[14] = v56;
      _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "scheduleResourceLoad: Web process does not have cookie access to url %{sensitive}s for request %{sensitive}s", buf, 0x16u);
      v58 = v60;
      v60 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 1)
          WTF::fastFree(v58, v57);
        else
          --*(_DWORD *)v58;
      }
      v59 = v61;
      v61 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 1)
          WTF::fastFree(v59, v57);
        else
          --*(_DWORD *)v59;
      }
    }
    v30 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(NetworkResourceLoadParameter"
                           "s &&, std::optional<NetworkResourceLoadIdentifier>)";
      _os_log_fault_impl(&dword_196BCC000, v30, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 557: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 64) + 98) = 1;
  }
}

uint64_t *WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(WebKit::NetworkResourceLoadParameters &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = WTF::fastMalloc((WTF *)0xEF0);
  *(_QWORD *)v4 = off_1E34BC8D0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v4 + 24) = v5;
  WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters(v4 + 32, a2 + 16);
  *(_OWORD *)(v4 + 3808) = *(_OWORD *)(a2 + 3792);
  *a1 = v4;
  return a1;
}

uint64_t WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(WebKit::NetworkResourceLoadParameters &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,std::optional::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;

  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)(a1 + 16), a2);
  v3 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

_DWORD *WebKit::NetworkConnectionToWebProcess::performSynchronousLoad(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v6;
  _BOOL8 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::RunLoop *v15;
  WebKit::NetworkResourceLoader *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WebKit::NetworkResourceLoader *v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71320;
  v7 = os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 256);
    v9 = *(_DWORD *)(a2 + 48);
    v10 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 2952);
    *(_DWORD *)buf = 134219520;
    v23 = a1;
    v24 = 2048;
    v25 = v8;
    v26 = 1024;
    v27 = v9;
    v28 = 2048;
    v29 = v10;
    v30 = 2048;
    v31 = v11;
    v32 = 2048;
    v33 = v12;
    v34 = 2048;
    v35 = v13;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::performSynchronousLoad: (parentPID=%d, pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu)", buf, 0x44u);
  }
  v14 = *(_QWORD *)(a2 + 2952);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1970A3824);
  }
  v15 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v7);
  if ((WTF::RunLoop::isCurrent(v15) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1970A3844);
  }
  v16 = (WebKit::NetworkResourceLoader *)WTF::fastMalloc((WTF *)0x1350);
  WebKit::NetworkResourceLoader::NetworkResourceLoader((uint64_t)v16, a2, a1, a3);
  ++*((_DWORD *)v16 + 2);
  v21 = v16;
  WebKit::NetworkResourceLoadMap::add(a1 + 96, v14, (uint64_t *)&v21, (uint64_t)buf);
  v18 = (uint64_t)v21;
  v21 = 0;
  if (v18)
    WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v18 + 8), v17);
  WebKit::NetworkResourceLoader::start(v16);
  return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)v16 + 2, v19);
}

unsigned __int8 ***WebKit::NetworkConnectionToWebProcess::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int16 v8;
  void *v9;
  int v10;
  int v11;
  uint64_t *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  int v24;
  uint64_t *v25;
  int v26;
  IPC::Encoder *v27;
  uint64_t v28;
  char v29;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32);
  v28 = 0;
  IPC::Connection::createSyncMessageEncoder(3528, 0, &v28, (uint64_t *)&v27);
  *(_QWORD *)IPC::Encoder::grow(v27, 8uLL, 8) = a2;
  IPC::Connection::sendSyncMessage(v5, v28, (uint64_t *)&v27, 0, (uint64_t)&v25, INFINITY);
  v6 = v26;
  if (!v26)
  {
    v8 = IPC::Decoder::decode<std::tuple<BOOL>>(v25);
    if (v8 < 0x100u)
    {
      v7 = 0;
      v10 = 0;
      LOBYTE(v22) = 13;
      v6 = 1;
      v24 = 1;
      v11 = v26;
      if (v26 == -1)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (!v26)
    {
      v7 = v8;
      v12 = v25;
      v25 = 0;
      v22 = v12;
      v23 = v8;
      goto LABEL_9;
    }
LABEL_20:
    v20 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::NetworkConnectionToWebProcess::loadPing(v20, v21);
  }
  if (v26 != 1)
    goto LABEL_20;
  v7 = 0;
  LOBYTE(v22) = (_BYTE)v25;
LABEL_9:
  v24 = v6;
  v11 = v6;
LABEL_10:
  ((void (*)(char *, uint64_t **))off_1E34BC8E8[v11])(&v29, &v25);
  v10 = v7;
LABEL_11:
  v13 = v27;
  v27 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v9);
    WTF::fastFree(v14, v15);
  }
  if (v6)
    v16 = 1;
  else
    v16 = v10 == 0;
  v17 = !v16;
  v18 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))off_1E34BC6B8[v6])(&v25, &v22);
}

unsigned __int8 ***WebKit::NetworkConnectionToWebProcess::loadPing(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v15;
  _BYTE buf[22];
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 256);
    v6 = *(_DWORD *)(a2 + 48);
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 2952);
    *(_DWORD *)buf = 134219520;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v5;
    v17 = 1024;
    v18 = v6;
    v19 = 2048;
    v20 = v7;
    v21 = 2048;
    v22 = v8;
    v23 = 2048;
    v24 = v9;
    v25 = 2048;
    v26 = v10;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::loadPing: (parentPID=%d, pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu)", buf, 0x44u);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)(a1 + 64));
  *(_QWORD *)&buf[8] = *(_QWORD *)(a2 + 2952);
  v11 = operator new();
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34BC908;
  v13 = *(_QWORD *)buf;
  v15 = v12;
  *(_QWORD *)buf = 0;
  v12[1] = v13;
  v12[2] = *(_QWORD *)&buf[8];
  WebKit::PingLoad::PingLoad(v11, (_QWORD *)a1, a2, (uint64_t *)&v15);
  if (v15)
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
}

IPC::Encoder *WebKit::NetworkConnectionToWebProcess::cookieAcceptPolicyChanged(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 290;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

_DWORD *WebKit::NetworkConnectionToWebProcess::removeLoadIdentifier(uint64_t *a1, uint64_t a2)
{
  WTF::RunLoop *v4;
  _DWORD *result;
  WebKit::NetworkResourceLoader *v6;
  _DWORD *v7;
  NSObject *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE v11[12];
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1970A3D20);
  }
  v4 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  if ((WTF::RunLoop::isCurrent(v4) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1970A3D40);
  }
  *(_QWORD *)v11 = a2;
  result = (_DWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1 + 12, v11);
  if (result)
  {
    v6 = (WebKit::NetworkResourceLoader *)result;
    v7 = result + 2;
    ++result[2];
    v8 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v9 = a1[32];
      *(_DWORD *)v11 = 134218496;
      *(_QWORD *)&v11[4] = a1;
      v12 = 2048;
      v13 = v9;
      v14 = 2048;
      v15 = a2;
      _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::removeLoadIdentifier: Removing identifier %llu and aborting corresponding loader", v11, 0x20u);
    }
    WebKit::NetworkResourceLoader::abort(v6);
    return WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v7, v10);
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::stopAllNetworkActivityTrackingForPage(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;

  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(unsigned int *)(a1 + 140);
  if ((_DWORD)v4)
  {
    v10 = 48 * v4;
    v11 = v3 + 24;
    do
    {
      if (*(_QWORD *)(v11 - 24) == a2)
        WebKit::NetworkActivityTracker::complete(v11);
      v11 += 48;
      v10 -= 48;
    }
    while (v10);
    v3 = *(_QWORD *)(a1 + 128);
    LODWORD(v4) = *(_DWORD *)(a1 + 140);
    v6 = v3 + 48 * v4;
    v5 = 0;
    if ((_DWORD)v4)
    {
      v12 = *(_QWORD *)(a1 + 128);
      v7 = (__int128 *)(v3 + 48 * v4);
      v13 = (unint64_t)v7;
      do
      {
        if (*(_QWORD *)v3 == a2)
        {
          v14 = v3;
          if (v13 != *(_QWORD *)(a1 + 128) + 48 * *(unsigned int *)(a1 + 140))
          {
            if ((__int128 *)v3 == v7)
            {
              v14 = v13;
            }
            else
            {
              WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::moveOverlapping(v7, (__int128 *)v3, v13);
              v14 = v13 + v12 - (_QWORD)v7;
            }
          }
          v15 = *(const void **)(v3 + 40);
          *(_QWORD *)(v3 + 40) = 0;
          if (v15)
            CFRelease(v15);
          v7 = (__int128 *)(v3 + 48);
          ++v5;
          v13 = v14;
        }
        v3 += 48;
        v12 += 48;
      }
      while (v3 < v6);
      v3 = *(_QWORD *)(a1 + 128);
      LODWORD(v4) = *(_DWORD *)(a1 + 140);
      v6 = v13;
    }
    else
    {
      v7 = *(__int128 **)(a1 + 128);
    }
  }
  else
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 128);
    v7 = (__int128 *)v6;
  }
  v8 = (__int128 *)(v3 + 48 * v4);
  if (v7 != v8)
  {
    WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::moveOverlapping(v7, v8, v6);
    LODWORD(v4) = *(_DWORD *)(a1 + 140);
  }
  *(_DWORD *)(a1 + 140) = v4 - v5;
}

_QWORD *WebKit::NetworkConnectionToWebProcess::browsingContextRemoved(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  v9 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  result = (_QWORD *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 208), &v11);
  if (result)
  {
    result = (_QWORD *)result[76];
    if (result)
      return WebKit::NetworkCache::Cache::browsingContextRemoved((uint64_t)result, a2, a3, a4, a5);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::sendH2Ping(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  WebKit::NetworkSession *v7;
  uint64_t v8;
  _DWORD *v9;
  __int128 v10;
  WebKit::NetworkLoad **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  __int128 v17;
  uint64_t v18;
  CFTypeRef v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22[2];
  __int128 v23;
  __int128 v24;
  WTF::StringImpl *v25;
  int v26;
  __int16 v27;
  CFTypeRef cf;
  char v29;
  char v30;
  _BYTE v31[48];
  WTF::StringImpl *v32;
  int v33;
  __int16 v34;
  CFTypeRef v35;
  char v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)v31 = *(_QWORD *)(a1 + 80);
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 208), v31);
  if (v6)
  {
    v7 = (WebKit::NetworkSession *)v6;
    v8 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 88));
    v9 = *(_DWORD **)v8;
    if (*(_QWORD *)v8)
      *v9 += 2;
    *(_QWORD *)v31 = v9;
    v10 = *(_OWORD *)(v8 + 24);
    *(_OWORD *)&v31[8] = *(_OWORD *)(v8 + 8);
    *(_OWORD *)&v31[24] = v10;
    v11 = (WebKit::NetworkLoad **)operator new();
    v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v12 = off_1E34BC930;
    v22[0] = v12;
    WebKit::PreconnectTask::PreconnectTask(v11, v7, a2, (uint64_t *)v22);
    if (v22[0])
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22[0] + 8))(v22[0]);
    WebKit::NetworkLoad::setH2PingCallback((uint64_t)v11[1], (uint64_t)v31, a3);
    WebKit::PreconnectTask::start(v11);
    result = *(WTF::StringImpl **)v31;
    *(_QWORD *)v31 = 0;
    if (!result)
      return result;
LABEL_21:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    *(_DWORD *)result -= 2;
    return result;
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 88));
  WebCore::createInternalError();
  v15 = v25;
  v34 = v27;
  v33 = v26;
  v16 = cf;
  v25 = 0;
  cf = 0;
  v17 = *(_OWORD *)v22;
  v22[0] = 0;
  v22[1] = 0;
  *(_OWORD *)v31 = v17;
  *(_OWORD *)&v31[16] = v23;
  LODWORD(v23) = v23 & 0xFFFFFFFE;
  *(_OWORD *)&v31[32] = v24;
  v32 = v15;
  v35 = v16;
  v36 = v29;
  v37 = 1;
  v18 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 16))(v18, v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v37 != -1)
    ((void (*)(char *, _BYTE *))off_1E34BC6C8[v37])(&v30, v31);
  v37 = -1;
  v19 = cf;
  cf = 0;
  if (v19)
    CFRelease(v19);
  v20 = v25;
  v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v13);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v22[1];
  v22[1] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v13);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = v22[0];
  v22[0] = 0;
  if (result)
    goto LABEL_21;
  return result;
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::preconnectTo(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  WebKit::LegacyCustomProtocolManager *v16;
  WTF::URL *v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WebKit::NetworkSession *v25;
  _QWORD *v26;
  uint64_t v27;
  WebKit::NetworkLoad **v28;
  WTF::StringImpl *result;
  uint64_t (*v30)(void);
  WTF::StringImpl *v31;
  const void *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _BYTE v35[22];
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  _BYTE v42[10];
  __int16 v43;
  _DWORD cf[9];

  *(_QWORD *)&cf[7] = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 256);
    v10 = *(_DWORD *)(a4 + 48);
    v11 = *(_QWORD *)a4;
    v12 = *(_QWORD *)(a4 + 8);
    v13 = *(_QWORD *)(a4 + 16);
    v14 = *(_QWORD *)(a4 + 2952);
    *(_DWORD *)v35 = 134219520;
    *(_QWORD *)&v35[4] = a1;
    *(_WORD *)&v35[12] = 2048;
    *(_QWORD *)&v35[14] = v9;
    v36 = 1024;
    v37 = v10;
    v38 = 2048;
    v39 = v11;
    v40 = 2048;
    v41 = v12;
    *(_WORD *)v42 = 2048;
    *(_QWORD *)&v42[2] = v13;
    v43 = 2048;
    *(_QWORD *)cf = v14;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::preconnectTo: (parentPID=%d, pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu)", v35, 0x44u);
  }
  ++*(_DWORD *)(a1 + 8);
  v15 = (uint64_t *)(*(_QWORD *)(a1 + 72) + 192);
  *(_QWORD *)v35 = "LegacyCustomProtocolManager";
  *(_QWORD *)&v35[8] = 28;
  v16 = (WebKit::LegacyCustomProtocolManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v15, (WTF::ASCIILiteralHash *)v35);
  v17 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a4 + 88));
  WTF::URL::protocol(v17);
  if ((v18 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  v19 = a3;
  v21 = WebKit::LegacyCustomProtocolManager::supportsScheme(v16, (WTF::ASCIICaseInsensitiveHash **)v35);
  v22 = *(WTF::StringImpl **)v35;
  *(_QWORD *)v35 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v20);
      if (v21)
        goto LABEL_15;
      goto LABEL_11;
    }
    *(_DWORD *)v22 -= 2;
  }
  if (v21)
  {
LABEL_15:
    WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a4 + 88));
    WebCore::createInternalError();
    if (v19)
      WebKit::NetworkConnectionToWebProcess::didFinishPreconnection((IPC::Encoder *)a1, a2, (WebCore::ResourceError *)v35);
    v32 = *(const void **)&cf[1];
    *(_QWORD *)&cf[1] = 0;
    if (v32)
      CFRelease(v32);
    v33 = *(WTF::StringImpl **)v42;
    *(_QWORD *)v42 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v31);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = *(WTF::StringImpl **)&v35[8];
    *(_QWORD *)&v35[8] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v31);
      else
        *(_DWORD *)v34 -= 2;
    }
    result = *(WTF::StringImpl **)v35;
    *(_QWORD *)v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
      else
        *(_DWORD *)result -= 2;
    }
    if (*(_DWORD *)(a1 + 8) != 1)
    {
      --*(_DWORD *)(a1 + 8);
      return result;
    }
    v30 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 8);
    return (WTF::StringImpl *)v30();
  }
LABEL_11:
  v23 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)v35 = *(_QWORD *)(a1 + 80);
  v24 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v23 + 208), v35);
  if (!v24)
    goto LABEL_15;
  v25 = (WebKit::NetworkSession *)v24;
  if (!*(_BYTE *)(v24 + 716))
    goto LABEL_15;
  v26 = (_QWORD *)operator new();
  v27 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v27 = &off_1E34BC958;
  *(_QWORD *)(v27 + 8) = a1;
  *(_QWORD *)(v27 + 16) = a1;
  *(_QWORD *)(v27 + 24) = a2;
  *(_BYTE *)(v27 + 32) = v19;
  *(_QWORD *)v35 = v27;
  v28 = (WebKit::NetworkLoad **)WebKit::PreconnectTask::PreconnectTask(v26, v25, a4, (uint64_t *)v35);
  WebKit::PreconnectTask::start(v28);
  result = *(WTF::StringImpl **)v35;
  if (!*(_QWORD *)v35)
    return result;
  v30 = *(uint64_t (**)(void))(**(_QWORD **)v35 + 8);
  return (WTF::StringImpl *)v30();
}

uint64_t WebKit::NetworkConnectionToWebProcess::isResourceLoadFinished(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL8 v10;
  int v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 96);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v3 + 16 * v8);
    if (v9 == a2)
    {
      v10 = 0;
    }
    else
    {
      v11 = 1;
      do
      {
        v10 = v9 == 0;
        if (!v9)
          break;
        v8 = (v8 + v11) & v4;
        v9 = *(_QWORD *)(v3 + 16 * v8);
        ++v11;
      }
      while (v9 != a2);
    }
  }
  else
  {
    v10 = 1;
  }
  v12 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v12 + 16))(v12, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

IPC::Encoder *WebKit::NetworkConnectionToWebProcess::didFinishPreconnection(IPC::Encoder *result, uint64_t a2, WebCore::ResourceError *a3)
{
  unsigned __int8 v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v3 = atomic_load((unsigned __int8 *)(*((_QWORD *)result + 8) + 33));
  if ((v3 & 1) != 0)
  {
    v6 = *((_QWORD *)result + 8);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 295;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v11 = (IPC::Encoder *)v7;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
    IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v7, a3);
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v11, 0, 0);
    result = v11;
    v11 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return result;
}

WTF *WebKit::NetworkConnectionToWebProcess::startDownload(_QWORD *a1, uint64_t a2, CFTypeRef *a3, WebCore::SecurityOriginData *a4, __int16 a5, WTF::StringImpl *a6, char a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v13;
  uint64_t *v14;
  __int128 v16;
  uint64_t v17;

  v13 = a1[10];
  v14 = (uint64_t *)(a1[9] + 152);
  v16 = *(_OWORD *)a8;
  v17 = *(_QWORD *)(a8 + 16);
  return WebKit::DownloadManager::startDownload(v14, v13, a2, a3, a4, a5, a6, a7, &v16, a9, a10, a1[32], 1);
}

unsigned __int8 ***WebKit::NetworkConnectionToWebProcess::loadCancelledDownloadRedirectRequestInFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v8[3];
  uint64_t *v9;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, (uint64_t **)(a1 + 64));
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  IPC::Connection::send<Messages::NetworkProcessConnection::LoadCancelledDownloadRedirectRequestInFrame>((uint64_t)v9, (uint64_t)v8, 0, 0, 0);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v9);
}

uint64_t IPC::Connection::send<Messages::NetworkProcessConnection::LoadCancelledDownloadRedirectRequestInFrame>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 296;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WebCore::ResourceRequest const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ResourceRequest const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::NetworkConnectionToWebProcess::convertMainResourceLoadToDownload(uint64_t *a1, WTF::StringImpl *a2, char a3, uint64_t a4, WebCore::ResourceRequest *a5, WebCore::SecurityOriginData *a6, WebCore::ResourceResponseBase *a7, __int16 a8)
{
  WTF::RunLoop *v16;
  uint64_t result;
  _DWORD *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  char v24;
  WTF::StringImpl *v25;

  v16 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  if ((WTF::RunLoop::isCurrent(v16) & 1) != 0)
  {
    if (a3)
    {
      v25 = a2;
      result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1 + 12, &v25);
      if (result)
      {
        v18 = (_DWORD *)(result + 8);
        ++*(_DWORD *)(result + 8);
        WebKit::NetworkResourceLoader::convertToDownload(result, a4, a5, a7);
        return (uint64_t)WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v18, v19);
      }
    }
    else
    {
      v20 = a1[10];
      v21 = (uint64_t *)(a1[9] + 152);
      v25 = 0;
      LOBYTE(v23) = 0;
      v24 = 0;
      WebKit::DownloadManager::startDownload(v21, v20, a4, (CFTypeRef *)a5, a6, a8, (WTF::StringImpl *)&v25, 0, &v23, 0, 0, 0, 0);
      result = (uint64_t)v25;
      v25 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v22);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    result = 762;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::cookiesForDOM(_QWORD *a1, const WTF::String **this, unsigned __int8 *a3, const WTF::String **a4, uint64_t a5, uint64_t a6, WTF::String *a7, int a8, char a9, char a10, uint64_t *a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  NSObject *v26;
  WTF::StringImpl *v27;
  _QWORD v28[2];
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  _BYTE buf[12];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if ((WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[9], a1[32], (WTF::URL *)this) & 1) != 0)
  {
    v18 = a1[9];
    *(_QWORD *)buf = a1[10];
    v19 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v18 + 216), buf);
    if (!v19)
    {
      v33 = 0;
      WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v33);
      result = v33;
      if (!v33)
        return result;
      goto LABEL_13;
    }
    v20 = v19;
    v30 = a5;
    v31 = a6;
    v32 = 1;
    WebCore::NetworkStorageSession::cookiesForDOM();
    v21 = a1[9];
    v35 = a1[10];
    v22 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v21 + 208), &v35);
    if (v22 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 88))(v22))
    {
      v28[0] = a5;
      v28[1] = a6;
      v29 = 1;
      WebKit::NetworkResourceLoader::logCookieInformation((uint64_t)a1, (uint64_t)"NetworkConnectionToWebProcess::cookiesForDOM", 45, (uint64_t)a1, v20, this, a3, a4, MEMORY[0x1E0CBF738], (uint64_t)v28, a7, 1, 0, 0);
    }
    v23 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    v27 = v23;
    WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v27);
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v24);
      else
        *(_DWORD *)v27 -= 2;
    }
    result = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (result)
    {
LABEL_13:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v26 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::cookiesForDOM(const URL &, const SameSiteInfo &, "
                           "const URL &, FrameIdentifier, PageIdentifier, IncludeSecureCookies, ApplyTrackingPrevention, "
                           "ShouldRelaxThirdPartyCookieBlocking, CompletionHandler<void (String, BOOL)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v26, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 786: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a1[8] + 98) = 1;
    v34 = 0;
    WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v34);
    result = v34;
    if (v34)
      goto LABEL_13;
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v7 = v3;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebKit::NetworkConnectionToWebProcess::setCookiesFromDOM(_QWORD *a1, const WTF::String **this, unsigned __int8 *a3, const WTF::String **a4, uint64_t a5, uint64_t a6, WTF::String *a7, int a8, uint64_t a9, char a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _QWORD v23[2];
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint8_t buf[24];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if ((WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[9], a1[32], (WTF::URL *)this) & 1) != 0)
  {
    v17 = a1[9];
    *(_QWORD *)buf = a1[10];
    v18 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v17 + 216), buf);
    if (v18)
    {
      v19 = v18;
      v25 = a5;
      v26 = a6;
      v27 = 1;
      WebCore::NetworkStorageSession::setCookiesFromDOM();
      v20 = a1[9];
      *(_QWORD *)buf = a1[10];
      v21 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v20 + 208), buf);
      if (v21)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 88))(v21))
        {
          v23[0] = a5;
          v23[1] = a6;
          v24 = 1;
          WebKit::NetworkResourceLoader::logCookieInformation((uint64_t)a1, (uint64_t)"NetworkConnectionToWebProcess::setCookiesFromDOM", 49, (uint64_t)a1, v19, this, a3, a4, MEMORY[0x1E0CBF738], (uint64_t)v23, a7, 1, 0, 0);
        }
      }
    }
  }
  else
  {
    v22 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::setCookiesFromDOM(const URL &, const SameSiteInfo"
                           " &, const URL &, WebCore::FrameIdentifier, PageIdentifier, ApplyTrackingPrevention, const Str"
                           "ing &, ShouldRelaxThirdPartyCookieBlocking)";
      _os_log_fault_impl(&dword_196BCC000, v22, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 803: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a1[8] + 98) = 1;
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::cookiesEnabledSync(_QWORD *a1, WTF::URL *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  __int128 v9;
  uint64_t v10;

  v9 = *a4;
  v10 = *((_QWORD *)a4 + 2);
  return WebKit::NetworkConnectionToWebProcess::cookiesEnabled(a1, a2, a3, (uint64_t)&v9, a5, a6, a7, a8);
}

uint64_t WebKit::NetworkConnectionToWebProcess::cookiesEnabled(_QWORD *a1, WTF::URL *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  NSObject *v15;
  uint8_t buf[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[9], a1[32], this) & 1) == 0)
  {
    v15 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::cookiesEnabled(const URL &, const URL &, std::opt"
                           "ional<FrameIdentifier>, std::optional<PageIdentifier>, ShouldRelaxThirdPartyCookieBlocking, C"
                           "ompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 824: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a1[8] + 98) = 1;
    v12 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v10 = a1[9];
  *(_QWORD *)buf = a1[10];
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v10 + 216), buf))
  {
    WebCore::NetworkStorageSession::addCookiesEnabledStateObserver();
    v11 = WebCore::NetworkStorageSession::cookiesEnabled();
    v12 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v14 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::cookieRequestHeaderFieldValue(_QWORD *a1, WTF::URL *this, int a3, int a4, __int128 *a5, int a6, int a7, int a8, char a9, char a10, uint64_t *a11)
{
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  NSObject *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _BYTE buf[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[9], a1[32], this) & 1) != 0)
  {
    v13 = a1[9];
    *(_QWORD *)buf = a1[10];
    if (!WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v13 + 216), buf))
    {
      v21 = 0;
      WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v21);
      result = v21;
      if (!v21)
        return result;
      goto LABEL_10;
    }
    v19 = *a5;
    v20 = *((_QWORD *)a5 + 2);
    WebCore::NetworkStorageSession::cookieRequestHeaderFieldValue();
    v14 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    v18 = v14;
    WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v18);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    result = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (result)
    {
LABEL_10:
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v17 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::cookieRequestHeaderFieldValue(const URL &, const "
                           "SameSiteInfo &, const URL &, std::optional<FrameIdentifier>, std::optional<PageIdentifier>, I"
                           "ncludeSecureCookies, ApplyTrackingPrevention, ShouldRelaxThirdPartyCookieBlocking, Completion"
                           "Handler<void (String, BOOL)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 838: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a1[8] + 98) = 1;
    v22 = 0;
    WTF::CompletionHandler<void ()(WTF::String,BOOL)>::operator()(a11, &v22);
    result = v22;
    if (v22)
      goto LABEL_10;
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::getRawCookies(_QWORD *a1, WTF::URL *this, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t *a10)
{
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  uint8_t buf[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[9], a1[32], this) & 1) == 0)
  {
    v12 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::getRawCookies(const URL &, const SameSiteInfo &, "
                           "const URL &, std::optional<FrameIdentifier>, std::optional<PageIdentifier>, ApplyTrackingPrev"
                           "ention, ShouldRelaxThirdPartyCookieBlocking, CompletionHandler<void (Vector<WebCore::Cookie> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 849: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a1[8] + 98) = 1;
    goto LABEL_7;
  }
  v11 = a1[9];
  *(_QWORD *)buf = a1[10];
  if (!WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 216), buf))
  {
LABEL_7:
    *(_OWORD *)buf = 0uLL;
    goto LABEL_8;
  }
  *(_OWORD *)buf = 0uLL;
  WebCore::NetworkStorageSession::getRawCookies();
LABEL_8:
  v13 = *a10;
  *a10 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v13 + 16))(v13, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v14);
}

uint64_t WebKit::NetworkConnectionToWebProcess::setRawCookie(WebKit::NetworkConnectionToWebProcess *this, const WebCore::Cookie *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *((_QWORD *)this + 9);
  v4 = *((_QWORD *)this + 10);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v2 + 216), &v4);
  if (result)
    return WebCore::NetworkStorageSession::setCookie();
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::deleteCookie(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 216), &v8))
  {
    return WebCore::NetworkStorageSession::deleteCookie();
  }
  v7 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkConnectionToWebProcess::cookiesForDOMAsync(_QWORD *a1, WTF::URL *this, unsigned __int8 *a3, const WTF::String **a4, __int128 *a5, WTF::String *a6, uint64_t a7, int a8, char a9, char a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t result;
  void *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[16];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if ((WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[9], a1[32], this) & 1) == 0)
  {
    v24 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::cookiesForDOMAsync(const URL &, const SameSiteInf"
                           "o &, const URL &, std::optional<WebCore::FrameIdentifier>, std::optional<WebCore::PageIdentif"
                           "ier>, IncludeSecureCookies, ApplyTrackingPrevention, ShouldRelaxThirdPartyCookieBlocking, Web"
                           "Core::CookieStoreGetOptions &&, CompletionHandler<void (std::optional<Vector<WebCore::Cookie>> &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v24, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 878: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a1[8] + 98) = 1;
    goto LABEL_9;
  }
  v19 = a1[9];
  *(_QWORD *)buf = a1[10];
  v20 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v19 + 216), buf);
  if (!v20)
  {
LABEL_9:
    buf[0] = 0;
    v34 = 0;
    goto LABEL_10;
  }
  v21 = v20;
  v30 = *a5;
  v31 = *((_QWORD *)a5 + 2);
  WebCore::NetworkStorageSession::cookiesForDOMAsVector();
  v22 = a1[9];
  v32 = a1[10];
  v23 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v22 + 208), &v32);
  if (v23 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 88))(v23))
  {
    v28 = *a5;
    v29 = *((_QWORD *)a5 + 2);
    WebKit::NetworkResourceLoader::logCookieInformation((uint64_t)a1, (uint64_t)"NetworkConnectionToWebProcess::cookiesForDOMAsync", 50, (uint64_t)a1, v21, (const WTF::String **)this, a3, a4, MEMORY[0x1E0CBF738], (uint64_t)&v28, a6, a7, 0, 0);
  }
LABEL_10:
  v25 = *a12;
  *a12 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v25 + 16))(v25, buf);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (v34)
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v27);
  return result;
}

void WebKit::NetworkConnectionToWebProcess::setCookieFromDOMAsync(_QWORD *a1, const WTF::String **this, unsigned __int8 *a3, const WTF::String **a4, __int128 *a5, WTF::String *a6, uint64_t a7, int a8, uint64_t a9, char a10, uint64_t *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint8_t buf[16];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[9], a1[32], (WTF::URL *)this) & 1) != 0)
  {
    v16 = a1[9];
    *(_QWORD *)buf = a1[10];
    v17 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v16 + 216), buf);
    if (v17)
    {
      v18 = v17;
      v29 = *a5;
      v30 = *((_QWORD *)a5 + 2);
      v19 = WebCore::NetworkStorageSession::setCookieFromDOM();
      v20 = a1[9];
      *(_QWORD *)buf = a1[10];
      v21 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v20 + 208), buf);
      if (v21)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 88))(v21))
        {
          v27 = *a5;
          v28 = *((_QWORD *)a5 + 2);
          WebKit::NetworkResourceLoader::logCookieInformation((uint64_t)a1, (uint64_t)"NetworkConnectionToWebProcess::setCookiesFromDOMAsync", 54, (uint64_t)a1, v18, this, a3, a4, MEMORY[0x1E0CBF738], (uint64_t)&v27, a6, a7, 0, 0);
        }
      }
      v22 = *a11;
      *a11 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    else
    {
      v23 = *a11;
      *a11 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
  }
  else
  {
    v24 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::setCookieFromDOMAsync(const URL &, const SameSite"
                           "Info &, const URL &, std::optional<WebCore::FrameIdentifier>, std::optional<WebCore::PageIden"
                           "tifier>, ApplyTrackingPrevention, WebCore::Cookie &&, ShouldRelaxThirdPartyCookieBlocking, Co"
                           "mpletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v24, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 895: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a1[8] + 98) = 1;
  }
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::unsubscribeFromCookieChangeNotifications(WebKit::NetworkConnectionToWebProcess *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *result;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  _QWORD v15[3];
  WTF::StringImpl *v16[2];

  v16[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)((char *)this + 192);
  v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 24, a2, a3);
  v7 = *((_QWORD *)this + 24);
  if (v7)
  {
    v8 = (WTF::StringImpl **)(v7 + 8 * *(unsigned int *)(v7 - 4));
    if (v8 == v6)
      goto LABEL_5;
  }
  else
  {
    if (!v6)
      goto LABEL_5;
    v8 = 0;
  }
  if (v8 != v6)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(v5, v6);
LABEL_5:
  v9 = *((_QWORD *)this + 9);
  v15[0] = *((_QWORD *)this + 10);
  result = (WTF::StringImpl *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 216), v15);
  if (result)
  {
    v12 = *a2;
    if (*a2)
      *(_DWORD *)v12 += 2;
    v16[0] = v12;
    v14 = 0;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v14, v16, v11, (uint64_t)v15);
    WebCore::NetworkStorageSession::stopListeningForCookieChangeNotifications();
    if (v14)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v13);
    result = v16[0];
    v16[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned __int8 ***WebKit::NetworkConnectionToWebProcess::cookiesAdded(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  uint64_t *v12;
  IPC::Encoder *v13;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (uint64_t **)(a1 + 64));
  v5 = v12;
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 291;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a2);
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v6, a3);
  IPC::Connection::sendMessageImpl((uint64_t)v5, (uint64_t *)&v13, 0, 0);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v12);
}

unsigned __int8 ***`non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::cookiesAdded(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return WebKit::NetworkConnectionToWebProcess::cookiesAdded(a1 - 16, a2, a3);
}

unsigned __int8 ***WebKit::NetworkConnectionToWebProcess::cookiesDeleted(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  uint64_t *v12;
  IPC::Encoder *v13;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (uint64_t **)(a1 + 64));
  v5 = v12;
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 292;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, a2);
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v6, a3);
  IPC::Connection::sendMessageImpl((uint64_t)v5, (uint64_t *)&v13, 0, 0);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v12);
}

unsigned __int8 ***`non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::cookiesDeleted(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return WebKit::NetworkConnectionToWebProcess::cookiesDeleted(a1 - 16, a2, a3);
}

unsigned __int8 ***WebKit::NetworkConnectionToWebProcess::allCookiesDeleted(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  IPC::Encoder *v4;
  WTF *v5;
  void *v6;
  uint64_t *v8;
  IPC::Encoder *v9;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v8, this + 8);
  v1 = v8;
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 287;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v9 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl((uint64_t)v1, (uint64_t *)&v9, 0, 0);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    IPC::Encoder::~Encoder(v4, v3);
    WTF::fastFree(v5, v6);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v8);
}

unsigned __int8 ***`non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::allCookiesDeleted(uint64_t **this)
{
  return WebKit::NetworkConnectionToWebProcess::allCookiesDeleted(this - 2);
}

unsigned __int8 ***WebKit::NetworkConnectionToWebProcess::cookieEnabledStateMayHaveChanged(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  IPC::Encoder *v4;
  WTF *v5;
  void *v6;
  uint64_t *v8;
  IPC::Encoder *v9;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v8, this + 8);
  v1 = v8;
  v2 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v2 = 299;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 528) = v2 + 16;
  *(_QWORD *)(v2 + 536) = v2 + 16;
  *(_OWORD *)(v2 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v2 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v2);
  v9 = (IPC::Encoder *)v2;
  IPC::Connection::sendMessageImpl((uint64_t)v1, (uint64_t *)&v9, 0, 0);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    IPC::Encoder::~Encoder(v4, v3);
    WTF::fastFree(v5, v6);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v8);
}

unsigned __int8 ***`non-virtual thunk to'WebKit::NetworkConnectionToWebProcess::cookieEnabledStateMayHaveChanged(uint64_t **this)
{
  return WebKit::NetworkConnectionToWebProcess::cookieEnabledStateMayHaveChanged(this - 4);
}

void WebKit::NetworkConnectionToWebProcess::registerInternalFileBlobURL(_QWORD *a1, uint64_t a2, const WTF::String *a3, const WTF::String *a4, uint64_t *a5)
{
  uint64_t v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::BlobDataFileReference *v17;
  _QWORD *v18;
  _DWORD *v19;
  uint8_t v20[24];
  _BYTE buf[24];
  __int128 v22;
  _BYTE v23[24];
  int v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v10 = a1[9];
    *(_QWORD *)buf = a1[10];
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v10 + 208), buf))
    {
      v11 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v11 += 2;
      *(_QWORD *)buf = v11;
      *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 8);
      v22 = *(_OWORD *)(a2 + 24);
      v23[0] = 0;
      v25 = 0;
      WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::add(a1 + 37, (WTF::StringImpl **)buf, (uint64_t)v20);
      if (v25)
      {
        if (v24 != -1)
          ((void (*)(uint8_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v24])(v20, v23);
        v24 = -1;
      }
      v13 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*a5)
      {
        v15 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v15 = 1;
        v16 = *a5;
        *a5 = 0;
        *(_QWORD *)(v15 + 8) = v16;
        *(_QWORD *)(v15 + 16) = 0;
      }
      else
      {
        v15 = 0;
      }
      v17 = (WebCore::BlobDataFileReference *)WTF::fastMalloc((WTF *)0x40);
      v18 = (_QWORD *)WebCore::BlobDataFileReference::BlobDataFileReference(v17, a3, a4);
      *v18 = off_1E34C9F60;
      v18[7] = v15;
      *(_QWORD *)buf = v18;
      WebCore::BlobRegistryImpl::registerInternalFileBlobURL();
      v19 = *(_DWORD **)buf;
      *(_QWORD *)buf = 0;
      if (v19)
      {
        if (v19[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
        else
          --v19[2];
      }
    }
  }
  else
  {
    v14 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::registerInternalFileBlobURL(const URL &, const St"
                           "ring &, const String &, SandboxExtension::Handle &&, const String &)";
      _os_log_fault_impl(&dword_196BCC000, v14, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 968: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a1[8] + 98) = 1;
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::registerInternalBlobURL(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  WTF::StringImpl *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _BYTE v10[24];
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[24];
  int v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 72);
  v11 = *(WTF::StringImpl **)(a1 + 80);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 208), &v11);
  if (result)
  {
    v6 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v6 += 2;
    v11 = v6;
    v7 = *(_OWORD *)(a2 + 24);
    v12 = *(_OWORD *)(a2 + 8);
    v13 = v7;
    v14[0] = 0;
    v16 = 0;
    WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::add((uint64_t *)(a1 + 296), &v11, (uint64_t)v10);
    if (v16)
    {
      if (v15 != -1)
        ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v15])(v10, v14);
      v15 = -1;
    }
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    return WebCore::BlobRegistryImpl::registerInternalBlobURL();
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::registerBlobURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _BYTE v12[24];
  WTF::StringImpl *v13[5];
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 72);
  v13[0] = *(WTF::StringImpl **)(a1 + 80);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v8 + 208), v13);
  if (result)
  {
    std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100]<true,0>((uint64_t)v13, a2, a5);
    WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::add((uint64_t *)(a1 + 296), v13, (uint64_t)v12);
    if (v16)
    {
      if (v15 != -1)
        ((void (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v15])(v12, &v14);
      v15 = -1;
    }
    v11 = v13[0];
    v13[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return WebCore::BlobRegistryImpl::registerBlobURL();
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::registerInternalBlobURLOptionallyFileBacked(WebKit::NetworkConnectionToWebProcess *this, const WTF::URL *a2, const WTF::URL *a3, const WTF::String *a4, const WTF::String *a5)
{
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  WebCore::BlobDataFileReference *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _QWORD v24[3];
  uint8_t buf[24];
  WTF::StringImpl *v26[2];
  WTF::StringImpl *v27;
  __int16 v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && *(_QWORD *)a3
    && *(_DWORD *)(*(_QWORD *)a3 + 4)
    && *(_QWORD *)a4
    && *(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    v8 = *((_QWORD *)this + 9);
    *(_QWORD *)buf = *((_QWORD *)this + 10);
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v8 + 208), buf))
    {
      v9 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v9 += 2;
      *(_QWORD *)buf = v9;
      *(_OWORD *)&buf[8] = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)v26 = *(_OWORD *)((char *)a2 + 24);
      LOBYTE(v27) = 0;
      v31 = 0;
      WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::add((uint64_t *)this + 37, (WTF::StringImpl **)buf, (uint64_t)v24);
      if (v31)
      {
        if ((_DWORD)v30 != -1)
          ((void (*)(_QWORD *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v30])(v24, &v27);
        LODWORD(v30) = -1;
      }
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      v23 = 0;
      v13 = (WebCore::BlobDataFileReference *)WTF::fastMalloc((WTF *)0x40);
      v14 = (_QWORD *)WebCore::BlobDataFileReference::BlobDataFileReference(v13, a4, (const WTF::String *)&v23);
      *v14 = off_1E34C9F60;
      v14[7] = 0;
      v24[0] = v14;
      memset(buf, 0, sizeof(buf));
      LOWORD(v26[0]) = 0;
      v26[1] = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 7;
      WebCore::BlobRegistryImpl::registerInternalBlobURLOptionallyFileBacked();
      v16 = v30;
      v30 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = v29;
      v29 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v15);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v27;
      v27 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v15);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = v26[1];
      v26[1] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v15);
        else
          *(_DWORD *)v19 -= 2;
      }
      WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v15);
      v21 = (_DWORD *)v24[0];
      v24[0] = 0;
      if (v21)
      {
        if (v21[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        else
          --v21[2];
      }
      v22 = v23;
      v23 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v20);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
  }
  else
  {
    v12 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::registerInternalBlobURLOptionallyFileBacked(const"
                           " URL &, const URL &, const String &, const String &)";
      _os_log_fault_impl(&dword_196BCC000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 1000: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(*((_QWORD *)this + 8) + 98) = 1;
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::registerInternalBlobURLForSlice(WebKit::NetworkConnectionToWebProcess *this, const WTF::URL *a2, const WTF::URL *a3, uint64_t a4, uint64_t a5, const WTF::String *a6)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  WTF::StringImpl *v15;
  __int128 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _BYTE v19[24];
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[24];
  int v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)this + 9);
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 208), &v20);
  if (result)
  {
    v14 = result;
    v15 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v15 += 2;
    v20 = v15;
    v16 = *(_OWORD *)((char *)a2 + 24);
    v21 = *(_OWORD *)((char *)a2 + 8);
    v22 = v16;
    v23[0] = 0;
    v25 = 0;
    WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::add((uint64_t *)this + 37, &v20, (uint64_t)v19);
    if (v25)
    {
      if (v24 != -1)
        ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v24])(v19, v23);
      v24 = -1;
    }
    v18 = v20;
    v20 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    return WebCore::BlobRegistryImpl::registerInternalBlobURLForSlice((WebCore::BlobRegistryImpl *)(v14 + 624), a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::unregisterBlobURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14[5];
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 72);
  v14[0] = *(WTF::StringImpl **)(a1 + 80);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 208), v14);
  if (!result)
    return result;
  std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100]<true,0>((uint64_t)v14, a2, a3);
  v8 = (WTF::StringImpl *)WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t *)(a1 + 296), v14);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 296);
  if (v10)
  {
    v11 = (WTF::StringImpl *)(v10 + 80 * *(unsigned int *)(v10 - 4));
    if (v11 != v8)
      goto LABEL_4;
  }
  else if (v8)
  {
    v11 = 0;
LABEL_4:
    if (v11 != v8)
      WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::remove((uint64_t *)(a1 + 296), v8);
  }
  if (v17)
  {
    if (v16 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v16])(&v13, &v15);
    v16 = -1;
  }
  v12 = v14[0];
  v14[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  return WebCore::BlobRegistryImpl::unregisterBlobURL();
}

uint64_t WebKit::NetworkConnectionToWebProcess::registerBlobURLHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD v10[3];
  int v11;
  WTF::StringImpl *v12[5];
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 72);
  v12[0] = *(WTF::StringImpl **)(a1 + 80);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 208), v12);
  if (result)
  {
    std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100]<true,0>((uint64_t)v12, a2, a3);
    v11 = 0;
    WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(a1 + 304), v12, &v11, (uint64_t)v10);
    ++*(_DWORD *)(v10[0] + 80);
    if (v15)
    {
      if (v14 != -1)
        ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v14])(v10, &v13);
      v14 = -1;
    }
    v9 = v12[0];
    v12[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    return WebCore::BlobRegistryImpl::registerBlobURLHandle();
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::unregisterBlobURLHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13[5];
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 72);
  v13[0] = *(WTF::StringImpl **)(a1 + 80);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 208), v13);
  if (result)
  {
    std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100]<true,0>((uint64_t)v13, a2, a3);
    v8 = (WTF::StringImpl *)WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((_QWORD **)(a1 + 304), v13);
    v10 = *(WTF::StringImpl **)(a1 + 304);
    if (v10)
      v10 = (WTF::StringImpl *)((char *)v10 + 88 * *((unsigned int *)v10 - 1));
    if (v10 != v8)
    {
      if (*((_DWORD *)v8 + 20) == 1)
        WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 304), v8);
      else
        --*((_DWORD *)v8 + 20);
    }
    if (v16)
    {
      if (v15 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v15])(&v12, &v14);
      v15 = -1;
    }
    v11 = v13[0];
    v13[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    return WebCore::BlobRegistryImpl::unregisterBlobURLHandle();
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::blobType(uint64_t a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 208), &v11);
  if (v6)
  {
    WebCore::BlobRegistryImpl::blobType((WebCore::BlobRegistryImpl *)(v6 + 624), a2);
  }
  else
  {
    v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v7 += 2;
    v10 = v7;
  }
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a3, &v10);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::blobSize(uint64_t a1, const WTF::URL *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 208), &v10);
  if (v6)
    v7 = WebCore::BlobRegistryImpl::blobSize((WebCore::BlobRegistryImpl *)(v6 + 624), a2);
  else
    v7 = 0;
  v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  WTF::StringImpl *v35;
  void *v36;
  _DWORD *v37;
  WTF::StringImpl *v38[5];
  WTF::StringImpl *v39;
  _DWORD *v40;
  _QWORD v41[3];
  uint64_t *v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  char v46;
  char v47[24];
  int v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 72);
  v39 = *(WTF::StringImpl **)(a1 + 80);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 208), &v39))
  {
    v44 = 0;
    v45 = 0;
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7)
    {
      v8 = *a2;
      v9 = *a2 + 8 * v7;
      do
      {
        v38[0] = 0;
        WTF::URL::invalidate((WTF::URL *)v38);
        MEMORY[0x19AEABB24](&v39, v38, v8, 0);
        v47[0] = 0;
        v49 = 0;
        WebCore::BlobRegistryImpl::filesInBlob();
        v11 = v43;
        v12 = v43 + (unint64_t)HIDWORD(v45);
        if (v12 > v45)
        {
          v13 = v45 + ((unint64_t)v45 >> 2);
          if (v13 >= 0x10)
            v14 = v13 + 1;
          else
            v14 = 16;
          if (v14 <= v12)
            v15 = v43 + (unint64_t)HIDWORD(v45);
          else
            v15 = v14;
          WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&v44, v15);
          v11 = v43;
        }
        if ((_DWORD)v11)
        {
          v16 = v42;
          v17 = HIDWORD(v45);
          v18 = 8 * v11;
          v19 = v44;
          do
          {
            v20 = *v16;
            *v16++ = 0;
            v19[v17++] = v20;
            v18 -= 8;
          }
          while (v18);
          HIDWORD(v45) = v17;
        }
        WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v10);
        if (v49 && v48 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v48])(&v46, v47);
        v22 = v39;
        v39 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v21);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = v38[0];
        v38[0] = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v21);
          else
            *(_DWORD *)v23 -= 2;
        }
        v8 += 8;
      }
      while (v8 != v9);
      v24 = (char *)v44;
      v25 = HIDWORD(v45);
      if (HIDWORD(v45))
      {
        v26 = 0;
        v27 = 8 * HIDWORD(v45);
        do
        {
          (*(void (**)(_QWORD))(**(_QWORD **)&v24[v26] + 16))(*(_QWORD *)&v24[v26]);
          v26 += 8;
        }
        while (v27 != v26);
      }
    }
    else
    {
      v25 = 0;
      v24 = 0;
    }
    v39 = (WTF::StringImpl *)a1;
    ++*(_DWORD *)(a1 + 8);
    v31 = v45;
    v44 = 0;
    v45 = 0;
    v32 = *a3;
    *a3 = 0;
    v33 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v33 = off_1E34BC980;
    *(_QWORD *)(v33 + 8) = a1;
    *(_QWORD *)(v33 + 16) = a1;
    *(_QWORD *)(v33 + 24) = v24;
    v40 = 0;
    v41[0] = 0;
    v41[1] = 0;
    *(_DWORD *)(v33 + 32) = v31;
    *(_DWORD *)(v33 + 36) = v25;
    *(_QWORD *)(v33 + 40) = v32;
    v38[0] = (WTF::StringImpl *)v33;
    WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB();
    v35 = v38[0];
    v38[0] = 0;
    if (v35)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v35 + 8))(v35);
    v41[2] = 0;
    WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v34);
    v37 = v40;
    v40 = 0;
    if (v37)
    {
      if (v37[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
      else
        --v37[2];
    }
    return WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v36);
  }
  else
  {
    v39 = 0;
    v40 = 0;
    v28 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v28 + 16))(v28, &v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v29);
  }
}

_QWORD *WebKit::NetworkConnectionToWebProcess::setCaptureExtraNetworkLoadMetricsEnabled(_QWORD *this, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  *((_BYTE *)this + 200) = (_BYTE)a2;
  if ((a2 & 1) == 0)
  {
    v2 = this;
    v3 = this[18];
    if (v3)
    {
      v2[18] = 0;
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
    }
    this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin((_QWORD **)v2 + 12);
    v5 = (_QWORD *)v2[12];
    if (v5)
      v5 += 2 * *((unsigned int *)v5 - 1);
    while (this != v5)
    {
      *(_BYTE *)(this[1] + 4328) = 0;
      while (1)
      {
        this += 2;
        if (this == v4)
          break;
        if ((unint64_t)(*this + 1) > 1)
          goto LABEL_12;
      }
      this = v4;
LABEL_12:
      ;
    }
  }
  return this;
}

uint64_t WebKit::NetworkConnectionToWebProcess::clearPageSpecificData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WebKit::NetworkSession *v5;
  WebKit::NetworkLoadScheduler *Scheduler;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v5 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 208), &v11);
  if (v5)
  {
    Scheduler = WebKit::NetworkSession::networkLoadScheduler(v5);
    v11 = a2;
    v7 = (uint64_t *)((char *)Scheduler + 8);
    v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)Scheduler + 1, &v11);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::remove(v7, v8);
  }
  v9 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 216), &v11);
  if (result)
    return WebCore::NetworkStorageSession::clearPageSpecificDataForResourceLoadStatistics();
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::removeStorageAccessForFrame(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v1 + 216), &v3);
  if (result)
    return WebCore::NetworkStorageSession::removeStorageAccessForFrame();
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::logUserInteraction(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD **)(a1 + 80);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 208), &v7);
  if (result)
  {
    v5 = *(_QWORD *)(result + 72);
    if (v5)
    {
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E34BC9A8;
      v7 = v6;
      WebKit::WebResourceLoadStatisticsStore::logUserInteraction(v5, a2, (uint64_t *)&v7);
      result = (uint64_t)v7;
      if (v7)
        return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::hasStorageAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  uint64_t v22;

  v14 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  v15 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v14 + 208), &v22);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 72);
    if (v16)
    {
      *(_QWORD *)&v20 = a4;
      *((_QWORD *)&v20 + 1) = a5;
      v21 = 1;
      return WebKit::WebResourceLoadStatisticsStore::hasStorageAccess(v16, a2, a3, &v20, a6, a7);
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 72);
      v22 = *(_QWORD *)(a1 + 80);
      WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v19 + 216), &v22);
      return WebCore::NetworkStorageSession::hasCookies();
    }
  }
  else
  {
    v18 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::requestStorageAccess(uint64_t a1, WTF::ASCIICaseInsensitiveHash **a2, const WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, char a8, uint64_t *a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *result;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  __int16 v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;

  v16 = *(_QWORD *)(a1 + 72);
  v28 = *(_QWORD *)(a1 + 80);
  v17 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v16 + 208), &v28);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 72);
    if (v18)
      return (WTF::StringImpl *)WebKit::WebResourceLoadStatisticsStore::requestStorageAccess(v18, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  v24 = 1;
  v25 = a8;
  v20 = *a3;
  if (*a3)
    *(_DWORD *)v20 += 2;
  v26 = v20;
  v21 = *a2;
  if (*a2)
    *(_DWORD *)v21 += 2;
  v27 = v21;
  WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(a9, (uint64_t)&v24);
  v23 = v27;
  v27 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WebCore::RequestStorageAccessResult)>::operator()(uint64_t *a1, uint64_t a2)
{
  __int128 v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t result;
  __int16 v7;
  char v8;
  WTF::StringImpl *v9[2];
  uint64_t v10;

  v10 = *a1;
  *a1 = 0;
  v7 = *(_WORD *)a2;
  v8 = *(_BYTE *)(a2 + 2);
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)v9 = v2;
  WTF::Function<void ()(WebCore::RequestStorageAccessResult)>::operator()(&v10, &v7);
  v4 = v9[1];
  v9[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::storageAccessQuirkForTopFrameDomain(int a1, WebCore::NetworkStorageSession *this, uint64_t *a3)
{
  void *v4;
  uint64_t v6[2];

  WebCore::NetworkStorageSession::storageAccessQuirkForTopFrameDomain(this, this);
  WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a3, v6);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v8[2];
  _QWORD v9[2];

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v8[0] = 0;
  v9[0] = v3;
  v8[1] = 0;
  v4 = a2[1];
  a2[1] = 0;
  v9[1] = v4;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v9);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebKit::NetworkConnectionToWebProcess::requestStorageAccessUnderOpener(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v7 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 208), &v9);
  if (result)
  {
    result = *(_QWORD *)(result + 72);
    if (result)
      return WebKit::WebResourceLoadStatisticsStore::requestStorageAccessUnderOpener(result, a2, a3, a4);
  }
  return result;
}

WebCore::SecurityPolicy *WebKit::NetworkConnectionToWebProcess::addOriginAccessAllowListEntry(WebKit::NetworkConnectionToWebProcess *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  WTF::StringImpl *v8;
  WebCore::SecurityPolicy *result;
  WebCore::SecurityPolicy *v10;

  WebCore::SecurityOrigin::createFromString(a2, a2);
  WebCore::SecurityPolicy::addOriginAccessAllowlistEntry(v10, a3, a4, a5);
  result = v10;
  if (v10)
    return (WebCore::SecurityPolicy *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v8);
  return result;
}

WebCore::SecurityPolicy *WebKit::NetworkConnectionToWebProcess::removeOriginAccessAllowListEntry(WebKit::NetworkConnectionToWebProcess *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  WTF::StringImpl *v8;
  WebCore::SecurityPolicy *result;
  WebCore::SecurityPolicy *v10;

  WebCore::SecurityOrigin::createFromString(a2, a2);
  WebCore::SecurityPolicy::removeOriginAccessAllowlistEntry(v10, a3, a4, a5);
  result = v10;
  if (v10)
    return (WebCore::SecurityPolicy *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v8);
  return result;
}

_QWORD *WebKit::NetworkConnectionToWebProcess::startTrackingResourceLoad@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7 = result;
  v23 = a2;
  v9 = result[10];
  if (v9 < 0 && v9 != -1)
    goto LABEL_8;
  if (!a4)
  {
    v10 = *((unsigned int *)result + 35);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = (_BYTE *)(result[16] + 16);
      while (!*v12 || *((_QWORD *)v12 - 2) != a2)
      {
        ++v11;
        v12 += 48;
        if (v10 == v11)
          goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_8:
    v13 = 0;
    *(_BYTE *)a5 = 0;
    goto LABEL_9;
  }
  WebKit::NetworkConnectionToWebProcess::stopAllNetworkActivityTrackingForPage((uint64_t)result, a2);
  v11 = *((unsigned int *)v7 + 35);
  if ((_DWORD)v11 == *((_DWORD *)v7 + 34))
  {
    WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> &>((uint64_t)(v7 + 16), &v23);
    v14 = *((_DWORD *)v7 + 35);
  }
  else
  {
    v22 = v7[16] + 48 * v11;
    *(_QWORD *)v22 = a2;
    *(_QWORD *)(v22 + 8) = 0;
    *(_BYTE *)(v22 + 16) = 1;
    *(_QWORD *)(v22 + 24) = 0x100000010;
    *(_BYTE *)(v22 + 32) = 0;
    *(_QWORD *)(v22 + 40) = nw_activity_create();
    v14 = *((_DWORD *)v7 + 35) + 1;
    *((_DWORD *)v7 + 35) = v14;
  }
  if (v14 <= v11)
    goto LABEL_33;
  nw_activity_activate();
  LODWORD(v10) = *((_DWORD *)v7 + 35);
LABEL_14:
  v15 = v7 + 16;
  if ((_DWORD)v10 == *((_DWORD *)v7 + 34))
  {
    v19 = ((unint64_t)v10 >> 2) + v10;
    if (v19 >= 0x10)
      v20 = v19 + 1;
    else
      v20 = 16;
    if (v20 <= (unint64_t)v10 + 1)
      v21 = v10 + 1;
    else
      v21 = v20;
    WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)(v7 + 16), v21);
    v16 = v7[16] + 48 * *((unsigned int *)v7 + 35);
  }
  else
  {
    v16 = *v15 + 48 * v10;
  }
  *(_QWORD *)v16 = a2;
  *(_QWORD *)(v16 + 8) = a3;
  *(_BYTE *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0x200000010;
  *(_BYTE *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = nw_activity_create();
  v17 = *((_DWORD *)v7 + 35) + 1;
  *((_DWORD *)v7 + 35) = v17;
  if (v17 <= v10)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1970A780CLL);
  }
  if (v11 >= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x1970A7814);
  }
  v18 = *v15 + 48 * v10;
  nw_activity_set_parent_activity();
  nw_activity_activate();
  *(_QWORD *)a5 = *(_QWORD *)(v18 + 24);
  *(_BYTE *)(a5 + 8) = *(_BYTE *)(v18 + 32);
  result = *(_QWORD **)(v18 + 40);
  *(_QWORD *)(a5 + 16) = result;
  if (result)
    result = CFRetain(result);
  v13 = 1;
LABEL_9:
  *(_BYTE *)(a5 + 24) = v13;
  return result;
}

void WebKit::NetworkConnectionToWebProcess::stopTrackingResourceLoad(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  const void *v8;

  v2 = *(unsigned int *)(a1 + 140);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 128);
    for (i = 24; *(_QWORD *)(v5 + i - 16) != a2; i += 48)
    {
      if (v2 == ++v4)
        return;
    }
    if (v4 >= v2)
    {
      __break(0xC471u);
    }
    else
    {
      WebKit::NetworkActivityTracker::complete(v5 + i);
      v7 = *(_QWORD *)(a1 + 128) + i;
      v8 = *(const void **)(v7 + 16);
      *(_QWORD *)(v7 + 16) = 0;
      if (v8)
        CFRelease(v8);
      WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::moveOverlapping((__int128 *)(v7 + 24), (__int128 *)(*(_QWORD *)(a1 + 128) + 48 * *(unsigned int *)(a1 + 140)), v7 - 24);
      --*(_DWORD *)(a1 + 140);
    }
  }
}

uint64_t WebKit::NetworkConnectionToWebProcess::establishSharedWorkerContextConnection(uint64_t a1, uint64_t a2, const WebCore::RegistrableDomain *a3, uint64_t *a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::WebSharedWorkerServer *v11;
  WebKit::WebSharedWorkerServerToContextConnection *v12;
  uint64_t v13;
  _BYTE v15[12];
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 256);
    *(_DWORD *)v15 = 134218240;
    *(_QWORD *)&v15[4] = a1;
    v16 = 2048;
    v17 = v8;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::establishSharedWorkerContextConnection:", v15, 0x16u);
  }
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 80);
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 208), v15);
  if (v10)
  {
    v11 = *(WebKit::WebSharedWorkerServer **)(v10 + 792);
    if (v11)
    {
      v12 = (WebKit::WebSharedWorkerServerToContextConnection *)WTF::fastMalloc((WTF *)0x78);
      WebKit::WebSharedWorkerServerToContextConnection::WebSharedWorkerServerToContextConnection(v12, (WebKit::NetworkConnectionToWebProcess *)a1, a3, v11);
      std::unique_ptr<WebKit::WebSharedWorkerServerToContextConnection>::reset[abi:sn180100]((WebKit::WebSharedWorkerServerToContextConnection **)(a1 + 232), v12);
    }
  }
  v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

WebKit::WebSharedWorkerServerToContextConnection *WebKit::NetworkConnectionToWebProcess::closeSharedWorkerContextConnection(WebKit::NetworkConnectionToWebProcess *this)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  WebKit::NetworkConnectionToWebProcess *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 32);
    v5 = 134218240;
    v6 = this;
    v7 = 2048;
    v8 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::closeSharedWorkerContextConnection:", (uint8_t *)&v5, 0x16u);
  }
  return std::unique_ptr<WebKit::WebSharedWorkerServerToContextConnection>::reset[abi:sn180100]((WebKit::WebSharedWorkerServerToContextConnection **)this + 29, 0);
}

WebKit::WebSharedWorkerServerToContextConnection *WebKit::NetworkConnectionToWebProcess::sharedWorkerServerToContextConnectionIsNoLongerNeeded(WebKit::NetworkConnectionToWebProcess *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint8_t buf[4];
  _BYTE v8[18];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 32);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)v8 = this;
    *(_WORD *)&v8[8] = 2048;
    *(_QWORD *)&v8[10] = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::sharedWorkerServerToContextConnectionIsNoLongerNeeded:", buf, 0x16u);
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 32);
  v6 = *((_QWORD *)this + 32);
  buf[0] = 2;
  *(_QWORD *)&v8[4] = &v6;
  IPC::Connection::send<Messages::NetworkProcessProxy::RemoteWorkerContextConnectionNoLongerNeeded>(v4, (uint64_t)buf);
  return std::unique_ptr<WebKit::WebSharedWorkerServerToContextConnection>::reset[abi:sn180100]((WebKit::WebSharedWorkerServerToContextConnection **)this + 29, 0);
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkProcessProxy::RemoteWorkerContextConnectionNoLongerNeeded>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 332;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  v5 = *(_BYTE *)a2;
  *IPC::Encoder::grow((IPC::Encoder *)v4, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, *(uint64_t **)(a2 + 8));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::NetworkConnectionToWebProcess::establishSWContextConnection(_QWORD *a1, uint64_t a2, WTF **a3, _OWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  WebCore::SWServer *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  _OWORD v18[3];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v10 = a1[9];
  *(_QWORD *)&v18[0] = a1[10];
  v11 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v10 + 208), v18);
  if (!v11)
    goto LABEL_6;
  v12 = *(WebCore::SWServer **)(v11 + 768);
  if (!v12)
    goto LABEL_6;
  if ((WebKit::NetworkProcess::allowsFirstPartyForCookies(*(_QWORD *)(v11 + 32), a1[32], a3) & 1) != 0)
  {
    v13 = WTF::fastMalloc((WTF *)0xC0);
    v14 = a4[1];
    v18[0] = *a4;
    v18[1] = v14;
    v18[2] = a4[2];
    WebKit::WebSWServerToContextConnection::WebSWServerToContextConnection(v13, (uint64_t)a1, a2, (uint64_t)a3, (uint64_t)v18, v12);
    v15 = a1[27];
    a1[27] = v13;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_6:
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    return;
  }
  v17 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    LODWORD(v18[0]) = 136315138;
    *(_QWORD *)((char *)v18 + 4) = "void WebKit::NetworkConnectionToWebProcess::establishSWContextConnection(WebPageProxy"
                                   "Identifier, RegistrableDomain &&, std::optional<ScriptExecutionContextIdentifier>, Co"
                                   "mpletionHandler<void ()> &&)";
    _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 1366: Invalid message dispatched %s", (uint8_t *)v18, 0xCu);
  }
  *(_BYTE *)(a1[8] + 98) = 1;
}

uint64_t WebKit::NetworkConnectionToWebProcess::serviceWorkerServerToContextConnectionNoLongerNeeded(WebKit::NetworkConnectionToWebProcess *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint8_t buf[4];
  _BYTE v8[18];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 32);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)v8 = this;
    *(_WORD *)&v8[8] = 2048;
    *(_QWORD *)&v8[10] = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::serviceWorkerServerToContextConnectionNoLongerNeeded: WebProcess no longer useful for running service workers", buf, 0x16u);
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 32);
  v6 = *((_QWORD *)this + 32);
  buf[0] = 1;
  *(_QWORD *)&v8[4] = &v6;
  IPC::Connection::send<Messages::NetworkProcessProxy::RemoteWorkerContextConnectionNoLongerNeeded>(v4, (uint64_t)buf);
  result = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkProcessConnection::MessagesAvailableForPort>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 297;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v10, *a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

_DWORD *WebKit::NetworkConnectionToWebProcess::postMessageToRemote(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *result;
  _DWORD *v6;
  _DWORD *v7;
  char v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t *v12;

  result = (_DWORD *)WebCore::MessagePortChannelRegistry::didPostMessageToRemote();
  if ((_DWORD)result)
  {
    v6 = (_DWORD *)WebCore::MessagePortChannelRegistry::existingChannelContainingPort();
    v7 = v6;
    if (v6)
      ++*v6;
    result = (_DWORD *)WebCore::MessagePortChannel::processForPort();
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 72);
      v12 = (uint64_t *)result;
      result = (_DWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v9 + 128), &v12);
      if (result)
      {
        v10 = result;
        ++result[2];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (uint64_t **)result + 8);
        v11 = a3;
        IPC::Connection::send<Messages::NetworkProcessConnection::MessagesAvailableForPort>((uint64_t)v12, &v11, 0, 0, 0);
        result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v12);
        if (v10[2] == 1)
        {
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          if (!v7)
            return result;
          return WTF::RefCounted<WebCore::MessagePortChannel>::deref(v7);
        }
        --v10[2];
      }
    }
    if (!v7)
      return result;
    return WTF::RefCounted<WebCore::MessagePortChannel>::deref(v7);
  }
  return result;
}

unsigned __int8 ***WebKit::NetworkConnectionToWebProcess::broadcastConsoleMessage(uint64_t a1, char a2, char a3, uint64_t a4)
{
  _BYTE v8[8];
  uint64_t v9;
  uint64_t *v10;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, (uint64_t **)(a1 + 64));
  v8[0] = a2;
  v8[1] = a3;
  v9 = a4;
  IPC::Connection::send<Messages::NetworkProcessConnection::BroadcastConsoleMessage>((uint64_t)v10, (uint64_t)v8, 0, 0, 0);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v10);
}

uint64_t IPC::Connection::send<Messages::NetworkProcessConnection::BroadcastConsoleMessage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 288;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<JSC::MessageSource,JSC::MessageLevel,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<JSC::MessageSource,JSC::MessageLevel,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

WebKit::NetworkSession *WebKit::NetworkConnectionToWebProcess::setResourceLoadSchedulingMode(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  WebKit::NetworkSession *result;
  WebKit::NetworkLoadScheduler *Scheduler;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  result = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 208), &v8);
  if (result)
  {
    Scheduler = WebKit::NetworkSession::networkLoadScheduler(result);
    return (WebKit::NetworkSession *)WebKit::NetworkLoadScheduler::setResourceLoadSchedulingMode((uint64_t)Scheduler, a2, a3);
  }
  return result;
}

WTF *WebKit::NetworkConnectionToWebProcess::prioritizeResourceLoads(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF *result;
  WebKit::NetworkSession *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t *Scheduler;
  void *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 72);
  v19 = *(WTF **)(a1 + 80);
  result = (WTF *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 208), &v19);
  if (result)
  {
    v6 = result;
    v19 = 0;
    v20 = 0;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7)
    {
      v8 = *(uint64_t **)a2;
      v9 = (uint64_t *)(a1 + 96);
      v10 = 8 * v7;
      do
      {
        v21 = *v8;
        v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v9, &v21);
        if (v11)
        {
          v13 = (_DWORD *)(v11 + 8);
          ++*(_DWORD *)(v11 + 8);
          v14 = *(_QWORD *)(v11 + 3864);
          if (v14)
          {
            v21 = *(_QWORD *)(v11 + 3864);
            v15 = HIDWORD(v20);
            if (HIDWORD(v20) == (_DWORD)v20)
            {
              v16 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v19, HIDWORD(v20) + 1, (unint64_t)&v21);
              v15 = HIDWORD(v20);
              *((_QWORD *)v19 + HIDWORD(v20)) = *v16;
            }
            else
            {
              *((_QWORD *)v19 + HIDWORD(v20)) = v14;
            }
            HIDWORD(v20) = v15 + 1;
          }
          WTF::RefCounted<WebKit::NetworkResourceLoader>::deref(v13, v12);
        }
        ++v8;
        v10 -= 8;
      }
      while (v10);
    }
    Scheduler = (uint64_t *)WebKit::NetworkSession::networkLoadScheduler(v6);
    WebKit::NetworkLoadScheduler::prioritizeLoads(Scheduler, (uint64_t)&v19);
    result = v19;
    if (v19)
    {
      v19 = 0;
      LODWORD(v20) = 0;
      return (WTF *)WTF::fastFree(result, v18);
    }
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::takeNetworkResourceLoader@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if ((unint64_t)(a2 - 1) < 0xFFFFFFFFFFFFFFFELL)
    return WebKit::NetworkResourceLoadMap::take(result + 96, a2, a3);
  *a3 = 0;
  return result;
}

WTF::StringImpl **WebKit::NetworkConnectionToWebProcess::installMockContentFilter(WebCore::MockContentFilterSettings *a1, _DWORD *a2)
{
  uint64_t v3;

  v3 = WebCore::MockContentFilterSettings::singleton(a1);
  *(_DWORD *)v3 = *a2;
  WTF::String::operator=((WTF::StringImpl **)(v3 + 8), (WTF::StringImpl *)(a2 + 2));
  return WTF::String::operator=((WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(a2 + 4));
}

void WebKit::NetworkConnectionToWebProcess::logOnBehalfOfWebContent(uint64_t a1, char *subsystem, uint64_t a3, char *category, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, int a9)
{
  os_log_type_t v10;
  os_log_t v12;
  NSObject *v13;
  char v14;
  NSObject *v15;
  os_log_t v16;
  int v17;
  _DWORD v18[7];

  *(_QWORD *)&v18[5] = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    if (a7)
    {
      v10 = a8;
      if (a8 <= 0x11 && ((0x30007u >> a8) & 1) != 0 && !*(_BYTE *)(a7 + a6 - 1))
      {
        v12 = 0;
        v13 = MEMORY[0x1E0C81028];
        v14 = 1;
        if (!subsystem || !a3)
          goto LABEL_10;
        if (!subsystem[a3 - 1])
        {
          v12 = 0;
          if (!category || !a5)
            goto LABEL_10;
          if (!category[a5 - 1])
          {
            v16 = os_log_create(subsystem, category);
            v12 = v16;
            if (v16)
            {
              v14 = 0;
              v13 = v16;
            }
            goto LABEL_10;
          }
        }
        v12 = 0;
LABEL_10:
        if ((WTFSignpostHandleIndirectLog() & 1) == 0 && os_log_type_enabled(v13, v10))
        {
          v17 = 67109378;
          v18[0] = a9;
          LOWORD(v18[1]) = 2082;
          *(_QWORD *)((char *)&v18[1] + 2) = a6;
          _os_log_impl(&dword_196BCC000, v13, v10, "WebContent[%d]: %{public}s", (uint8_t *)&v17, 0x12u);
        }
        if ((v14 & 1) == 0)
          os_release(v12);
        return;
      }
    }
  }
  v15 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    v17 = 136315138;
    *(_QWORD *)v18 = "void WebKit::NetworkConnectionToWebProcess::logOnBehalfOfWebContent(std::span<const char>, std::spa"
                     "n<const char>, std::span<const char>, uint8_t, int32_t)";
    _os_log_fault_impl(&dword_196BCC000, v15, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 1516: Invalid message dispatched %s", (uint8_t *)&v17, 0xCu);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 64) + 98) = 1;
}

void WebKit::NetworkConnectionToWebProcess::useRedirectionForCurrentNavigation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 96), &v5);
  if (v4)
    WebKit::NetworkResourceLoader::useRedirectionForCurrentNavigation(v4, a3);
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(uint64_t a1, const WTF::URL *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *result;
  uint64_t v20;
  _QWORD *v21;
  WTF::StringImpl *v22[10];
  int v23;

  v8 = *(_QWORD *)(a1 + 72);
  v22[0] = *(WTF::StringImpl **)(a1 + 80);
  v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v8 + 208), v22);
  if (v9)
  {
    v10 = v9;
    WebCore::RegistrableDomain::RegistrableDomain(v22, a2);
    v11 = v10 + 832;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 56), a1 + 48);
    v12 = *(unsigned int **)(a1 + 56);
    if (v12)
    {
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    v14 = *a4;
    *a4 = 0;
    v15 = v22[0];
    v22[0] = 0;
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v16 = &off_1E34BC9F8;
    v16[1] = v12;
    v16[2] = v14;
    v16[3] = v15;
    v21 = v16;
    WebKit::NetworkNotificationManager::subscribeToPushService(v11, (uint64_t)a2, a3, (uint64_t *)&v21);
    v18 = (uint64_t)v21;
    v21 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    result = v22[0];
    v22[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v22[0]) = 8;
    v23 = 1;
    v20 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 16))(v20, v22);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (v23 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(_QWORD **, WTF::StringImpl **))off_1E34BC6D8[v23])(&v21, v22);
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::navigatorUnsubscribeFromPushService(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  char v13;

  v7 = *(_QWORD *)(a1 + 72);
  v11[0] = *(_QWORD *)(a1 + 80);
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v7 + 208), v11);
  if (v8)
    return WebKit::NetworkNotificationManager::unsubscribeFromPushService(v8 + 832, a2, *a3, 1, a4);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v11[0]) = 8;
  v12 = 1;
  v10 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 16))(v10, v11);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v12 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34BC6E8[v12])(&v13, v11);
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::navigatorGetPushSubscription(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11[88];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 208), &v10);
  if (v6)
    return WebKit::NetworkNotificationManager::getPushSubscription(v6 + 832, a2, a3);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11[0] = 8;
  v12 = 1;
  v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, &v10);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v12 != -1)
    return ((uint64_t (*)(char *, char *))off_1E34BC6F8[v12])(&v9, v11);
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::navigatorGetPushPermissionState(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];
  int v10;
  char v11;

  v5 = *(_QWORD *)(a1 + 72);
  v9[0] = *(_QWORD *)(a1 + 80);
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 208), v9);
  if (v6)
    return WebKit::NetworkNotificationManager::getPushPermissionState(v6 + 832, a2, a3);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v9[0]) = 8;
  v10 = 1;
  v8 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 16))(v8, v9);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v10 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34BC708[v10])(&v11, v9);
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(unsigned int *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 14, (uint64_t)(a1 + 12));
  v6 = (unsigned int *)*((_QWORD *)a1 + 7);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *a3;
  *a3 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E34BCA58;
  v9[1] = a1;
  v9[2] = v6;
  v9[3] = v8;
  v11 = v9;
  WebKit::NetworkTransportSession::initialize((WebKit::NetworkConnectionToWebProcess *)a1, a2, (uint64_t *)&v11);
  result = (uint64_t)v11;
  if (v11)
    return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  return result;
}

uint64_t *WebKit::NetworkConnectionToWebProcess::destroyWebTransportSession(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 320);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 320), &v7);
  v5 = *(_QWORD *)(a1 + 320);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

void WebKit::NetworkConnectionToWebProcess::clearFrameLoadRecordsForStorageAccess(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 208), &v8);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      WebKit::WebResourceLoadStatisticsStore::clearFrameLoadRecordsForStorageAccess(v7, a2, a3);
  }
}

void WebKit::NetworkContentRuleListManager::~NetworkContentRuleListManager(WebKit::NetworkContentRuleListManager *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl ****v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl **v19;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 - 12))
    {
      v19 = 0;
      v4 = *(unsigned int *)(v3 - 4);
      v5 = v3;
      if ((_DWORD)v4)
      {
        v6 = 24 * v4;
        v5 = v3;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 24;
          v6 -= 24;
          if (!v6)
            goto LABEL_17;
        }
      }
      v7 = v3 + 24 * v4;
      if (v7 != v5)
      {
LABEL_9:
        v8 = *(unsigned int *)(v5 + 20);
        if ((_DWORD)v8)
        {
          v9 = *(uint64_t **)(v5 + 8);
          v10 = 8 * v8;
          do
          {
            v11 = *v9;
            *v9++ = 0;
            (*(void (**)(uint64_t, WTF::StringImpl ***))(*(_QWORD *)v11 + 16))(v11, &v19);
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
            v10 -= 8;
          }
          while (v10);
        }
        while (1)
        {
          v5 += 24;
          if (v5 == v7)
            break;
          if ((unint64_t)(*(_QWORD *)v5 + 1) > 1)
          {
            if (v5 != v7)
              goto LABEL_9;
            break;
          }
        }
        if (v19)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v19, a2);
      }
    }
LABEL_17:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  }
  v12 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    do
    {
      v17 = __ldaxr(v12);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v12));
    if (!v18)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v13, a2);
  v14 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v15 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v15)
    {
      v16 = (WTF::StringImpl ****)(v14 + 8);
      do
      {
        if (*(v16 - 1) != (WTF::StringImpl ***)-1)
          std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100](v16, 0);
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
}

IPC::Encoder *WebKit::NetworkContentRuleListManager::contentExtensionsBackend(uint64_t *a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  IPC::Encoder *result;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int **v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  WTF *v44;
  void *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  IPC::Encoder *v49;
  uint64_t v50;

  v48 = a2;
  v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v48);
  v7 = *a1;
  if (*a1)
    v7 += 16 * *(unsigned int *)(v7 - 4);
  if (v7 != v5)
  {
    v8 = *(_QWORD *)(v5 + 8);
    v9 = *a3;
    *a3 = 0;
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
    return (IPC::Encoder *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
  v12 = a1 + 1;
  v11 = a1[1];
  if (v11
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 1, 0), (v11 = *v12) != 0))
  {
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = v48;
  v15 = (v48 + ~(v48 << 32)) ^ ((unint64_t)(v48 + ~(v48 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v11 + 24 * v18);
  v20 = *v19;
  if (!*v19)
  {
LABEL_17:
    *v19 = v14;
    v49 = 0;
    v50 = 0;
    v23 = *((unsigned int *)v19 + 5);
    if ((_DWORD)v23)
    {
      v24 = (uint64_t *)v19[1];
      v25 = 8 * v23;
      do
      {
        v26 = *v24;
        *v24 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        ++v24;
        v25 -= 8;
      }
      while (v25);
    }
    v27 = (WTF *)v19[1];
    if (v27)
    {
      v19[1] = 0;
      *((_DWORD *)v19 + 4) = 0;
      WTF::fastFree(v27, v6);
    }
    v49 = 0;
    v19[1] = 0;
    v50 = 0;
    v19[2] = 0;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v6);
    v28 = *v12;
    if (*v12)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v30 = *v12;
    if (*v12)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
        goto LABEL_33;
    }
    else if (3 * v33 > 4 * v32)
    {
      goto LABEL_33;
    }
    v19 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1 + 1, v19);
    goto LABEL_33;
  }
  v21 = 0;
  v22 = 1;
  while (v20 != v48)
  {
    if (v20 == -1)
      v21 = v19;
    v18 = (v18 + v22) & v13;
    v19 = (uint64_t *)(v11 + 24 * v18);
    v20 = *v19;
    ++v22;
    if (!*v19)
    {
      if (v21)
      {
        *v21 = 0;
        v21[1] = 0;
        v21[2] = 0;
        --*(_DWORD *)(*v12 - 16);
        v14 = v48;
        v19 = v21;
      }
      goto LABEL_17;
    }
  }
LABEL_33:
  v34 = (unsigned int *)(v19 + 1);
  v35 = *((unsigned int *)v19 + 5);
  if ((_DWORD)v35 == *((_DWORD *)v19 + 4))
  {
    a3 = (unsigned int **)WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, v35 + 1, (unint64_t)a3);
    v35 = *((unsigned int *)v19 + 5);
    v36 = (unsigned int **)(v19[1] + 8 * v35);
  }
  else
  {
    v36 = (unsigned int **)(*(_QWORD *)v34 + 8 * v35);
  }
  v37 = *a3;
  *a3 = 0;
  *v36 = v37;
  *((_DWORD *)v19 + 5) = v35 + 1;
  v9 = *(unsigned int **)(a1[2] + 8);
  v38 = v9 + 30;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 + 1, v38));
  v40 = *((_QWORD *)v9 + 4);
  v41 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v41 = 300;
  *(_QWORD *)(v41 + 8) = 0;
  *(_QWORD *)(v41 + 528) = v41 + 16;
  *(_QWORD *)(v41 + 536) = v41 + 16;
  *(_OWORD *)(v41 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v41 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v41);
  v49 = (IPC::Encoder *)v41;
  v42 = v48;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v41, 8uLL, 8) = v42;
  IPC::Connection::sendMessageImpl(v40, (uint64_t *)&v49, 0, 0);
  result = v49;
  v49 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v43);
    result = (IPC::Encoder *)WTF::fastFree(v44, v45);
  }
  do
  {
    v46 = __ldaxr(v38);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, v38));
  if (!v47)
  {
    atomic_store(1u, v38);
    return (IPC::Encoder *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::NetworkContentRuleListManager::addContentRuleLists(uint64_t *a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v59;
  WTF::StringImpl *v60;
  unsigned int *v61;
  WTF::StringImpl *v62[2];

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = (v10 >> 31) ^ v10;
  v12 = v7 & v11;
  v13 = v6 + 16 * (v7 & v11);
  v14 = *(_QWORD *)v13;
  if (!*(_QWORD *)v13)
  {
LABEL_12:
    *(_QWORD *)v13 = a2;
    v17 = (WTF::StringImpl ***)WTF::fastMalloc((WTF *)8);
    *v17 = 0;
    v62[0] = 0;
    std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100]((WTF::StringImpl ****)(v13 + 8), v17);
    std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100]((WTF::StringImpl ****)v62, 0);
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        goto LABEL_21;
    }
    else if (3 * v23 > 4 * v22)
    {
      goto LABEL_21;
    }
    v13 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, (uint64_t *)v13);
    goto LABEL_21;
  }
  v15 = 0;
  v16 = 1;
  while ((WTF::StringImpl *)v14 != a2)
  {
    if (v14 == -1)
      v15 = (_QWORD *)v13;
    v12 = (v12 + v16) & v7;
    v13 = v6 + 16 * v12;
    v14 = *(_QWORD *)v13;
    ++v16;
    if (!*(_QWORD *)v13)
    {
      if (v15)
      {
        *v15 = 0;
        v15[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v13 = (uint64_t)v15;
      }
      goto LABEL_12;
    }
  }
LABEL_21:
  v24 = *(_QWORD *)(v13 + 8);
  v25 = *(_DWORD *)(a3 + 12);
  if (v25)
  {
    v26 = *(uint64_t **)a3;
    v27 = &v26[15 * v25];
    do
    {
      v28 = (WTF::StringImpl *)*v26;
      if (*v26)
        *(_DWORD *)v28 += 2;
      v62[0] = v28;
      WebKit::WebCompiledContentRuleList::create(v26, (uint64_t *)&v59);
      v29 = (uint64_t)v59;
      if (v59)
      {
        v59 = 0;
        v61 = (unsigned int *)v29;
        WebCore::ContentExtensions::ContentExtensionsBackend::addContentExtension();
        v30 = v61;
        v61 = 0;
        if (v30)
        {
          v36 = v30 + 2;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            atomic_store(1u, v30 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
          }
        }
        v31 = v59;
        v59 = 0;
        if (v31)
        {
          v32 = v31 + 2;
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            atomic_store(1u, v31 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
          }
        }
      }
      v35 = v62[0];
      v62[0] = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, a2);
        else
          *(_DWORD *)v35 -= 2;
      }
      v26 += 15;
    }
    while (v26 != v27);
  }
  v41 = a1[1];
  v40 = a1 + 1;
  v39 = v41;
  if (!v41)
    goto LABEL_55;
  v42 = *(_DWORD *)(v39 - 8);
  v43 = v42 & v11;
  v44 = (WTF::StringImpl **)(v39 + 24 * (v42 & v11));
  v45 = *v44;
  if (*v44 != a2)
  {
    v46 = 1;
    while (v45)
    {
      v43 = (v43 + v46) & v42;
      v44 = (WTF::StringImpl **)(v39 + 24 * v43);
      v45 = *v44;
      ++v46;
      if (*v44 == a2)
        goto LABEL_49;
    }
    v44 = (WTF::StringImpl **)(v39 + 24 * *(unsigned int *)(v39 - 4));
  }
LABEL_49:
  if ((WTF::StringImpl **)(v39 + 24 * *(unsigned int *)(v39 - 4)) == v44)
  {
LABEL_55:
    v62[0] = 0;
    v59 = 0;
    v62[1] = 0;
    v60 = 0;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v62, a2);
  }
  else
  {
    v59 = (unsigned int *)v44[1];
    v47 = v44[2];
    v44[1] = 0;
    v44[2] = 0;
    v60 = v47;
    v48 = *v40;
    if (!*v40 || (v48 += 24 * *(unsigned int *)(v48 - 4), (WTF::StringImpl **)v48 != v44))
    {
      if ((WTF::StringImpl **)v48 != v44)
      {
        *v44 = (WTF::StringImpl *)-1;
        WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v44 + 1), a2);
        ++*(_DWORD *)(*v40 - 16);
        v49 = *v40;
        v50 = *v40 ? *(_DWORD *)(v49 - 12) - 1 : -1;
        *(_DWORD *)(v49 - 12) = v50;
        v55 = *v40;
        if (*v40)
        {
          v56 = 6 * *(_DWORD *)(v55 - 12);
          v57 = *(_DWORD *)(v55 - 4);
          if (v56 < v57 && v57 >= 9)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v40, v57 >> 1, 0);
        }
      }
    }
  }
  if (HIDWORD(v60))
  {
    v51 = v59;
    v52 = 8 * HIDWORD(v60);
    do
    {
      v53 = *(_QWORD *)v51;
      *(_QWORD *)v51 = 0;
      v51 += 2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(v53, v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
      v52 -= 8;
    }
    while (v52);
  }
  return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, a2);
}

uint64_t WebKit::NetworkContentRuleListManager::removeContentRuleList(uint64_t *a1, uint64_t a2, const WTF::String *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v7);
  v6 = *a1;
  if (*a1)
    v6 += 16 * *(unsigned int *)(v6 - 4);
  if (v6 != result)
    return WebCore::ContentExtensions::ContentExtensionsBackend::removeContentExtension(*(WebCore::ContentExtensions::ContentExtensionsBackend **)(result + 8), a3);
  return result;
}

uint64_t WebKit::NetworkContentRuleListManager::removeAllContentRuleLists(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v5);
  v4 = *a1;
  if (*a1)
    v4 += 16 * *(unsigned int *)(v4 - 4);
  if (v4 != result)
    return WebCore::ContentExtensions::ContentExtensionsBackend::removeAllContentExtensions(*(WebCore::ContentExtensions::ContentExtensionsBackend **)(result + 8));
  return result;
}

WTF::StringImpl ****WebKit::NetworkContentRuleListManager::remove(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl ****result;
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  result = (WTF::StringImpl ****)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, &v5);
  if (*a1)
  {
    v4 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((WTF::StringImpl ****)v4 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v4 = 0;
  }
  if ((WTF::StringImpl ****)v4 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, (uint64_t)result);
  return result;
}

uint64_t std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v4)
      WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v4));
    WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(a1, a2);
    v5 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
    *(_DWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v6 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(a1 + 8) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(a1 + 12) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 4);
    *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
    *(_DWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

WebKit::NetworkLoadChecker *std::unique_ptr<WebKit::NetworkLoadChecker>::reset[abi:sn180100](WebKit::NetworkLoadChecker **a1, WebKit::NetworkLoadChecker *a2)
{
  WebKit::NetworkLoadChecker *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkLoadChecker::~NetworkLoadChecker(result, a2);
    return (WebKit::NetworkLoadChecker *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebCore::SQLiteStatement *std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](WebCore::SQLiteStatement **a1, WebCore::SQLiteStatement *a2)
{
  WebCore::SQLiteStatement *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::SQLiteStatement::~SQLiteStatement(result);
    return (WebCore::SQLiteStatement *)WTF::fastFree(v4, v5);
  }
  return result;
}

WebCore::SQLiteStatement *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore15SQLiteStatementEEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSC_iEEEEEEDcSG_DpT0_(uint64_t a1, WebCore::SQLiteStatement **a2)
{
  return std::unique_ptr<WebCore::SQLiteStatement>::reset[abi:sn180100](a2, 0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_iEEEEEEDcSD_DpT0_(int a1, WebCore::SQLiteStatement *this)
{
  WebCore::SQLiteStatement::~SQLiteStatement(this);
}

WTF::StringImpl **std::__optional_storage_base<WebCore::RegistrableDomain,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RegistrableDomain,false>>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*((_BYTE *)a1 + 8))
      return WTF::String::operator=(a1, a2);
  }
  else if (*((_BYTE *)a1 + 8))
  {
    return (WTF::StringImpl **)std::__optional_destruct_base<WebCore::RegistrableDomain,false>::reset[abi:sn180100]((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v2 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    *a1 = v2;
    *((_BYTE *)a1 + 8) = 1;
  }
  return a1;
}

WTF::StringImpl *std::__optional_destruct_base<WebCore::RegistrableDomain,false>::reset[abi:sn180100](WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*((_BYTE *)result + 8))
  {
    v2 = result;
    result = *(WTF::StringImpl **)result;
    *(_QWORD *)v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *((_BYTE *)v2 + 8) = 0;
  }
  return result;
}

void std::__optional_storage_base<WebCore::PCM::DestinationUnlinkableToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationUnlinkableToken,false>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v4 = *a2;
      *a2 = 0;
      v5 = *(const void **)a1;
      *(_QWORD *)a1 = v4;
      if (v5)
        CFRelease(v5);
      v6 = a2[1];
      a2[1] = 0;
      v7 = *(const void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v6;
      if (v7)
        CFRelease(v7);
      v8 = a2[2];
      a2[2] = 0;
      v9 = *(const void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v8;
      if (v9)
        CFRelease(v9);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 24), (WTF::StringImpl *)(a2 + 3));
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    v10 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v10;
    v11 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(a1 + 8) = v11;
    v12 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(a1 + 16) = v12;
    v13 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(a1 + 24) = v13;
    *(_BYTE *)(a1 + 32) = 1;
  }
}

void std::__optional_destruct_base<WebCore::PCM::DestinationUnlinkableToken,false>::reset[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(const void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
      CFRelease(v6);
    *(_BYTE *)(a1 + 32) = 0;
  }
}

WTF::StringImpl **std::__optional_storage_base<WebCore::PCM::DestinationSecretToken,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::PCM::DestinationSecretToken,false>>(WTF::StringImpl **result, unsigned __int8 *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = result;
  if (*((unsigned __int8 *)result + 24) == a2[24])
  {
    if (*((_BYTE *)result + 24))
    {
      WTF::String::operator=(result, (WTF::StringImpl *)a2);
      WTF::String::operator=(v3 + 1, (WTF::StringImpl *)(a2 + 8));
      return WTF::String::operator=(v3 + 2, (WTF::StringImpl *)(a2 + 16));
    }
  }
  else if (*((_BYTE *)result + 24))
  {
    return (WTF::StringImpl **)std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::reset[abi:sn180100]((uint64_t)result, (WTF::StringImpl *)a2);
  }
  else
  {
    v4 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    *result = v4;
    v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    result[1] = v5;
    v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    result[2] = v6;
    *((_BYTE *)result + 24) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(result + 24))
  {
    v2 = result;
    v3 = *(WTF::StringImpl **)(result + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    result = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v2 + 24) = 0;
  }
  return result;
}

void std::__optional_storage_base<WebCore::CertificateInfo,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CertificateInfo,false>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v2 = *a2;
      *a2 = 0;
      v3 = *(const void **)a1;
      *(_QWORD *)a1 = v2;
      if (v3)
        CFRelease(v3);
    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v4 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      v6 = a1;
      CFRelease(v4);
      a1 = v6;
    }
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = 1;
  }
}

void std::__optional_storage_base<WebCore::CertificateInfo,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::CertificateInfo,false> const&>(uint64_t a1, uint64_t a2)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v2 = *(const void **)a2;
      if (*(_QWORD *)a2)
      {
        v6 = *(const void **)a2;
        v7 = a1;
        CFRetain(v2);
        v2 = v6;
        a1 = v7;
      }
      v3 = *(const void **)a1;
      *(_QWORD *)a1 = v2;
      if (v3)
        CFRelease(v3);
    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v4 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      v9 = a1;
      CFRelease(v4);
      a1 = v9;
    }
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v5 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v5)
    {
      v8 = a1;
      CFRetain(v5);
      a1 = v8;
    }
    *(_BYTE *)(a1 + 8) = 1;
  }
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::deallocateTable(_QWORD *a1, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != -1)
        a1 = (_QWORD *)WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>::~KeyValuePair((uint64_t)a1, a2);
      a1 += 11;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v6;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v3])(&v6, a1 + 40);
    *(_DWORD *)(a1 + 64) = -1;
  }
  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  char v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 40;
    do
    {
      v5 = *(WTF::StringImpl **)(v4 - 40);
      if (v5 != (WTF::StringImpl *)-1)
      {
        if (*(_BYTE *)(v4 + 32))
        {
          v6 = *(unsigned int *)(v4 + 24);
          if ((_DWORD)v6 != -1)
          {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v6])(&v8, v4);
            v5 = *(WTF::StringImpl **)(v4 - 40);
          }
          *(_DWORD *)(v4 + 24) = -1;
        }
        *(_QWORD *)(v4 - 40) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 80;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF **std::unique_ptr<WebKit::NetworkOriginAccessPatterns>::reset[abi:sn180100](WTF **result, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = *result;
  *result = 0;
  if (v2)
  {
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 8, a2);
    return (WTF **)WTF::fastFree(v2, v3);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::UserContentURLPattern>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[2];
      v3[2] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = v3[1];
      v3[1] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 4;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

WebKit::WebSharedWorkerServerToContextConnection *std::unique_ptr<WebKit::WebSharedWorkerServerToContextConnection>::reset[abi:sn180100](WebKit::WebSharedWorkerServerToContextConnection **a1, WebKit::WebSharedWorkerServerToContextConnection *a2)
{
  WebKit::WebSharedWorkerServerToContextConnection *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebSharedWorkerServerToContextConnection::~WebSharedWorkerServerToContextConnection(result);
    return (WebKit::WebSharedWorkerServerToContextConnection *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        a2 = (_QWORD *)*v4;
        *v4 = 0;
        if (a2)
          std::default_delete<WebCore::NetworkLoadInformation>::operator()[abi:sn180100]((uint64_t)v4, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(_DWORD **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          if (v6[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
            v5 = *(WTF::StringImpl **)v4;
          }
          else
          {
            --v6[2];
          }
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unsigned int **WTF::WeakPtrFactory<WebCore::CookieChangeObserver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int **v5;

  if (*result)
  {
    *((_QWORD *)*result + 1) = 0;
    v2 = *result;
    *result = 0;
    if (v2)
    {
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        atomic_store(1u, v2);
        v5 = result;
        WTF::fastFree((WTF *)v2, a2);
        return v5;
      }
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages19NetworkProcessProxy54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

uint64_t std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100]<true,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_OWORD *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = 0;
  v7 = a1 + 40;
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    *(_DWORD *)(a1 + 64) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v7, a3);
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

uint64_t std::make_unique[abi:sn180100]<WebKit::WebSharedWorkerServerConnection,WTF::Ref<WebKit::NetworkProcess,WTF::RawPtrTraits<WebKit::NetworkProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcess>> &,WebKit::WebSharedWorkerServer &,IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned __int8 **a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t result;

  v10 = WTF::fastMalloc((WTF *)0x38);
  result = WebKit::WebSharedWorkerServerConnection::WebSharedWorkerServerConnection(v10, *a2, a3, a4, *a5);
  *a1 = result;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WebCore::ContentExtensions::ContentExtension *v6;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WTF::RefCounted<WebCore::ContentExtensions::ContentExtension>::deref(v6, a2);
          v5 = *v4;
        }
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

WebCore::ContentExtensions::ContentExtension *WTF::RefCounted<WebCore::ContentExtensions::ContentExtension>::deref(WebCore::ContentExtensions::ContentExtension *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::ContentExtensions::ContentExtension::~ContentExtension(result, a2);
    return (WebCore::ContentExtensions::ContentExtension *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebCore::ContentExtensions::ContentExtension::~ContentExtension(WebCore::ContentExtensions::ContentExtension *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v3 = (WTF *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 20);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 14);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
    WTF::RefCounted<WebCore::StyleSheetContents>::deref(v8);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    v12 = v10 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
}

_DWORD *WTF::RefCounted<WebCore::StyleSheetContents>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEB0144]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
        v4 = WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl ****std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100](WTF::StringImpl ****result, WTF::StringImpl ***a2)
{
  WTF::StringImpl ***v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
    return (WTF::StringImpl ****)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchLoad::BackgroundFetchLoad(WebKit::NetworkProcess &,PAL::SessionID,WebCore::BackgroundFetchRecordLoaderClient &,WebCore::BackgroundFetchRequest const&,unsigned long,WebCore::ClientOrigin const&)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34BC728;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = v3 + 30;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchLoad::BackgroundFetchLoad(WebKit::NetworkProcess &,PAL::SessionID,WebCore::BackgroundFetchRecordLoaderClient &,WebCore::BackgroundFetchRequest const&,unsigned long,WebCore::ClientOrigin const&)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_1E34BC728;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 30;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchLoad::BackgroundFetchLoad(WebKit::NetworkProcess &,PAL::SessionID,WebCore::BackgroundFetchRecordLoaderClient &,WebCore::BackgroundFetchRequest const&,unsigned long,WebCore::ClientOrigin const&)::$_0,void,std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;

  v2 = *(_QWORD *)(result + 16);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v5[0] = *(_QWORD *)(result + 8);
    v5[1] = v5[0];
    v5[2] = result + 24;
    v3 = *(unsigned int *)(a2 + 656);
    if ((_DWORD)v3 == -1)
    {
      v4 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit19BackgroundFetchLoadC1ERNSA_14NetworkProcessEN3PAL9SessionIDERN7WebCore33BackgroundFetchRecordLoaderClientERKNSG_22BackgroundFetchRequestEmRKNSG_12ClientOriginEENK3__0clINS_7variantIJNSG_15ResourceRequestENSA_18NetworkLoadChecker18RedirectionTripletENSG_13ResourceErrorEEEEEEDaOT_EUlRSV_E_JZZNSB_C1ESD_SF_SI_SL_mSO_ENKSQ_ISW_EESX_SZ_EUlRSU_E_ZZNSB_C1ESD_SF_SI_SL_mSO_ENKSQ_ISW_EESX_SZ_EUlRSS_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSS_SU_SV_EEEEEEDcSY_DpT0_(v4);
    }
    else
    {
      v6 = v5;
      return ((uint64_t (*)(_QWORD **))off_1E34BC740[v3])(&v6);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit19BackgroundFetchLoadC1ERNSA_14NetworkProcessEN3PAL9SessionIDERN7WebCore33BackgroundFetchRecordLoaderClientERKNSG_22BackgroundFetchRequestEmRKNSG_12ClientOriginEENK3__0clINS_7variantIJNSG_15ResourceRequestENSA_18NetworkLoadChecker18RedirectionTripletENSG_13ResourceErrorEEEEEEDaOT_EUlRSV_E_JZZNSB_C1ESD_SF_SI_SL_mSO_ENKSQ_ISW_EESX_SZ_EUlRSU_E_ZZNSB_C1ESD_SF_SI_SL_mSO_ENKSQ_ISW_EESX_SZ_EUlRSS_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSS_SU_SV_EEEEEEDcSY_DpT0_(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t result;
  WebKit::NetworkSession *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::RefCountedBase *v13;
  WTF::RefCountedBase *v14;
  const void *v15;
  CFTypeRef v16;
  unsigned int *v17;
  unsigned int v18;
  WTF *v19;
  unsigned int *v20;
  unsigned int v21;
  WTF *v22;
  WebKit::NetworkDataTaskCocoa *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  CFTypeRef v27;
  CFTypeRef v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint8_t v31[32];
  WTF *v32;
  WTF *v33;
  _BYTE v34[152];
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::RefCountedBase *v37;
  uint64_t v38;
  char v39;
  CFTypeRef v40;
  BOOL v41;
  char v42;
  _BYTE v43[2584];
  uint64_t v44;
  CFTypeRef cf;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(*(_QWORD *)a1 + 8);
  v4 = **(_QWORD **)(*(_QWORD *)a1 + 16);
  v5 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v31 = 134217984;
    *(_QWORD *)&v31[4] = v3;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - BackgroundFetchLoad::startNetworkLoad", v31, 0xCu);
  }
  *(_QWORD *)v31 = v3[3];
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 208), v31);
  if (result)
  {
    v7 = (WebKit::NetworkSession *)result;
    WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v31);
    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v34, a2);
    v9 = *(WTF::StringImpl **)(a2 + 152);
    *(_QWORD *)(a2 + 152) = 0;
    v10 = v35;
    v35 = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(WTF::StringImpl **)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    v12 = v36;
    v36 = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *(WTF::RefCountedBase **)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    v14 = v37;
    v37 = v13;
    if (v14)
      WTF::RefCounted<WebCore::FormData>::deref(v14);
    v38 = *(_QWORD *)(a2 + 176);
    v39 = *(_BYTE *)(a2 + 184);
    v15 = *(const void **)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    v16 = v40;
    v40 = v15;
    if (v16)
      CFRelease(v16);
    v17 = *(unsigned int **)(v3[503] + 248);
    if (v17)
    {
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
    v19 = v32;
    v32 = (WTF *)v17;
    if (v19)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v19, v8);
    v20 = *(unsigned int **)(v3[503] + 240);
    if (v20)
    {
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    v22 = v33;
    v33 = (WTF *)v20;
    if (v22)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v22, v8);
    v41 = *(_BYTE *)(v3[503] + 18) == 2;
    v42 = 0;
    v23 = (WebKit::NetworkDataTaskCocoa *)WTF::fastMalloc((WTF *)0x318);
    v24 = WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa(v23, v7, (WebKit::NetworkDataTaskClient *)(v3 + 1), (const WebKit::NetworkLoadParameters *)v31);
    v25 = v3[502];
    v3[502] = v24;
    if (v25)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v25 + 8));
      v24 = v3[502];
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
    if (v46)
    {
      v27 = cf;
      cf = 0;
      if (v27)
        CFRelease(v27);
    }
    WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v26);
    if (v43[2560])
      WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v43);
    v28 = v40;
    v40 = 0;
    if (v28)
      CFRelease(v28);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v34);
    v30 = v33;
    v33 = 0;
    if (v30)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v30, v29);
    result = (uint64_t)v32;
    v32 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, v29);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZN6WebKit19BackgroundFetchLoadC1ERNSA_14NetworkProcessEN3PAL9SessionIDERN7WebCore33BackgroundFetchRecordLoaderClientERKNSG_22BackgroundFetchRequestEmRKNSG_12ClientOriginEENK3__0clINS_7variantIJNSG_15ResourceRequestENSA_18NetworkLoadChecker18RedirectionTripletENSG_13ResourceErrorEEEEEEDaOT_EUlRSV_E_JZZNSB_C1ESD_SF_SI_SL_mSO_ENKSQ_ISW_EESX_SZ_EUlRSU_E_ZZNSB_C1ESD_SF_SI_SL_mSO_ENKSQ_ISW_EESX_SZ_EUlRSS_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSS_SU_SV_EEEEEEDcSY_DpT0_(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  CFTypeRef v5;
  _BYTE v6[138];
  char v7;
  CFTypeRef cf;
  char v9;

  v3 = **a1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v6);
  cf = 0;
  v9 = 0;
  v7 = v7 & 0xF1 | 4;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 32) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8), a2);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v6, v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::BackgroundFetchLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34BC768;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::BackgroundFetchLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34BC768;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::BackgroundFetchLoad::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&>::call(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  CFTypeRef v22;
  uint64_t v23;
  CFTypeRef v24;
  WebCore::ResourceRequestBase *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  __int128 v30;
  WTF::StringImpl *v31;
  CFTypeRef v32;
  WTF::StringImpl *v33;
  CFTypeRef v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  CFTypeRef v39;
  CFTypeRef v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  __int128 v43;
  __int128 v44;
  WTF::StringImpl *v45;
  int v46;
  __int16 v47;
  CFTypeRef v48;
  char v49;
  _BYTE v50[40];
  _QWORD v51[6];
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  CFTypeRef v64;
  _QWORD v65[17];
  char v66;
  CFTypeRef v67;
  CFTypeRef cf;
  char v69;

  v4 = *(_DWORD *)(a2 + 656);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        v7 = v6 - 8;
      else
        v7 = 0;
    }
    else
    {
      v7 = 0;
    }
    if (v4 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x1970AAD14);
    }
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v65);
    cf = 0;
    v69 = 0;
    v66 = v66 & 0xF1 | 4;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v7 + 32) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8), a2);
    v22 = cf;
    cf = 0;
    if (v22)
      CFRelease(v22);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v65, v21);
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v65);
    v23 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v23 + 16))(v23, v65);
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v67;
    v67 = 0;
    if (v24)
      CFRelease(v24);
    v25 = (WebCore::ResourceRequestBase *)v65;
    goto LABEL_51;
  }
  WTF::URL::URL((uint64_t)v50, (uint64_t *)(a2 + 200));
  WTF::URL::URL((uint64_t)v51, (uint64_t *)(a2 + 240));
  v8 = *(_QWORD *)(a2 + 280);
  v9 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a2 + 288) = 0u;
  v52 = v9;
  *(_QWORD *)&v9 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  v51[5] = v8;
  v53 = v9;
  v10 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 312) = 0;
  v54 = v10;
  v11 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  v55 = v11;
  v12 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a2 + 328) = 0;
  v56 = v12;
  v13 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = 0;
  v57 = v13;
  LODWORD(v12) = *(_DWORD *)(a2 + 344);
  v59 = *(_BYTE *)(a2 + 348);
  v58 = v12;
  v14 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a2 + 352) = 0u;
  v60 = v14;
  v15 = *(_QWORD *)(a2 + 368);
  v16 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 368) = 0;
  v63 = *(_BYTE *)(a2 + 384);
  v61 = v15;
  v62 = v16;
  v17 = *(const void **)(a2 + 392);
  *(_QWORD *)(a2 + 392) = 0;
  v64 = v17;
  if ((*(_BYTE *)(WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v50) + 8) & 2) == 0)
  {
    v18 = *(_QWORD *)(a1 + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
        v20 = v19 - 8;
      else
        v20 = 0;
    }
    else
    {
      v20 = 0;
    }
    v27 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v50);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v28 = (WTF::StringImpl *)v65[0];
    v41 = 0;
    v29 = *(WTF::StringImpl **)v27;
    if (*(_QWORD *)v27)
      *(_DWORD *)v29 += 2;
    v42 = v29;
    v30 = *(_OWORD *)(v27 + 8);
    v44 = *(_OWORD *)(v27 + 24);
    v43 = v30;
    if (v28)
      *(_DWORD *)v28 += 2;
    v45 = v28;
    v46 = 0;
    v47 = 2;
    v48 = 0;
    v49 = 1;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v65);
    cf = 0;
    v69 = 0;
    v66 = v66 & 0xF1 | 4;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v20 + 32) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 8), &v41);
    v32 = cf;
    cf = 0;
    if (v32)
      CFRelease(v32);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v65, v31);
    v34 = v48;
    v48 = 0;
    if (v34)
      CFRelease(v34);
    v35 = v45;
    v45 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v33);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = v42;
    v42 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v33);
      else
        *(_DWORD *)v36 -= 2;
    }
    v37 = v41;
    v41 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
      {
        WTF::StringImpl::destroy(v37, v33);
        if (!v28)
        {
LABEL_45:
          WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v65);
          v38 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = 0;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v38 + 16))(v38, v65);
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          v39 = v67;
          v67 = 0;
          if (v39)
            CFRelease(v39);
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v65);
          goto LABEL_48;
        }
LABEL_42:
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v33);
        else
          *(_DWORD *)v28 -= 2;
        goto LABEL_45;
      }
      *(_DWORD *)v37 -= 2;
    }
    if (!v28)
      goto LABEL_45;
    goto LABEL_42;
  }
  v26 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v26 + 16))(v26, v50);
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
LABEL_48:
  v40 = v64;
  v64 = 0;
  if (v40)
    CFRelease(v40);
  v25 = (WebCore::ResourceRequestBase *)v50;
LABEL_51:
  WebCore::ResourceRequestBase::~ResourceRequestBase(v25);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DatabaseUtilities::beginTransactionIfNecessary(void)::$_1,void>::call(uint64_t a1)
{
  return WebCore::SQLiteTransaction::commit((WebCore::SQLiteTransaction *)(*(_QWORD *)(a1 + 8) + 80));
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v5 = a1[1];
  v6 = v5 != 0;
  v7 = v5 - 1;
  if (!v6)
    v7 = 0;
  v15 = *a1;
  if (v7 >> 31)
    goto LABEL_8;
  v16 = v7;
  v14 = *a2;
  v8 = a3[1];
  v6 = v8 != 0;
  v9 = v8 - 1;
  if (!v6)
    v9 = 0;
  v12 = *a3;
  if (v9 >> 31)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1970AADC4);
  }
  v13 = v9;
  v11 = *a4;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v15, &v14, (uint64_t)&v12, &v11, a5);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  int v18;

  v5 = *a2;
  if (*a2)
    v6 = *(_DWORD *)(v5 + 4);
  else
    v6 = 0;
  v7 = *(_DWORD *)(a3 + 8);
  v8 = *a4;
  if (*a4)
    v9 = *(_DWORD *)(v8 + 4);
  else
    v9 = 0;
  if (((v9 | v7) & 0x80000000) == 0)
  {
    v10 = __OFADD__(v7, v9);
    v11 = v7 + v9;
    v12 = v10;
    if ((v6 & 0x80000000) == 0 && !v12)
    {
      v13 = *(_DWORD *)(result + 8);
      v10 = __OFADD__(v6, v11);
      v14 = v6 + v11;
      v15 = v10;
      if ((v13 & 0x80000000) == 0 && !v15)
      {
        v10 = __OFADD__(v13, v14);
        v16 = (v13 + v14);
        if (!v10)
        {
          if (v5)
          {
            v17 = *(_DWORD *)(v5 + 16);
            v18 = (v17 >> 2) & 1;
            if (!v8 || (v17 & 4) == 0)
              return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, v18, *(int8x16_t **)result, *(_QWORD *)(result + 8), v5, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v8, a5);
          }
          else if (!v8)
          {
            v18 = 1;
            return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, v18, *(int8x16_t **)result, *(_QWORD *)(result + 8), v5, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v8, a5);
          }
          v18 = (*(unsigned __int8 *)(v8 + 16) >> 2) & 1;
          return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, v18, *(int8x16_t **)result, *(_QWORD *)(result + 8), v5, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v8, a5);
        }
      }
    }
  }
  *a5 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v15;
  _DWORD *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _DWORD *v24;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v17 = v24;
        if (v24)
        {
          v18 = v24 + 5;
          *v24 = 2;
          v17[1] = v15;
          *((_QWORD *)v17 + 1) = v17 + 5;
          v17[4] = 4;
          if (a4)
          {
            if (a4 == 1)
              *v18 = a3->i8[0];
            else
              memcpy(v17 + 5, a3, a4);
          }
          v19 = &v18[a4];
          v23 = a5;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v23, v19);
          v20 = v23;
          if (v23)
            v20 = *(unsigned int *)(v23 + 4);
          v21 = &v19[v20];
          if (a7)
          {
            if (a7 == 1)
              *v21 = a6->i8[0];
            else
              memcpy(&v19[v20], a6, a7);
          }
          v24 = (_DWORD *)a8;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v24, &v21[a7]);
        }
        goto LABEL_14;
      }
LABEL_17:
      v17 = 0;
      goto LABEL_14;
    }
LABEL_18:
    v17 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_14;
  }
  if (!(_DWORD)result)
    goto LABEL_18;
  if (result > 0x7FFFFFEF)
    goto LABEL_17;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v17 = v24;
  if (v24)
  {
    v22 = (char *)(v24 + 5);
    *v24 = 2;
    v17[1] = v15;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v22, a3, a4, a5, a6, a7, a8);
  }
LABEL_14:
  *a9 = v17;
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6, uint64_t a7)
{
  char *v10;
  char *v11;
  __int128 v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int16 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v33;
  uint64_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;

  v10 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v11 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v12 = 0uLL;
    do
    {
      v35.val[0] = *a2;
      v13 = a2[1];
      v37.val[0] = a2[2];
      v14 = a2[3];
      a2 += 4;
      v15 = v14;
      v37.val[1] = 0uLL;
      v39.val[0] = v13;
      v35.val[1] = 0uLL;
      v16 = a1;
      vst2q_s8(v16, v35);
      v16 += 32;
      v39.val[1] = 0uLL;
      vst2q_s8(v16, v39);
      v17 = a1 + 64;
      vst2q_s8(v17, v37);
      v18 = a1 + 96;
      vst2q_s8(v18, *(int8x16x2_t *)(&v12 - 1));
      a1 += 128;
    }
    while (a1 != v11);
    a1 = v11;
  }
  while (a1 != v10)
  {
    v19 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v19;
    a1 += 2;
  }
  v33 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v33, v10);
  v20 = v33;
  if (v33)
    v20 = *(unsigned int *)(v33 + 4);
  v21 = &v10[2 * v20];
  v22 = &v21[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    v23 = &v21[2 * (a6 & 0xFFFFFFC0)];
    v24 = 0uLL;
    do
    {
      v36.val[0] = *a5;
      v25 = a5[1];
      v38.val[0] = a5[2];
      v26 = a5[3];
      a5 += 4;
      v27 = v26;
      v38.val[1] = 0uLL;
      v40.val[0] = v25;
      v36.val[1] = 0uLL;
      v28 = v21;
      vst2q_s8(v28, v36);
      v28 += 32;
      v40.val[1] = 0uLL;
      vst2q_s8(v28, v40);
      v29 = v21 + 64;
      vst2q_s8(v29, v38);
      v30 = v21 + 96;
      vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
      v21 += 128;
    }
    while (v21 != v23);
    v21 = v23;
  }
  while (v21 != v22)
  {
    v31 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)v21 = v31;
    v21 += 2;
  }
  v34 = a7;
  return WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v34, v22);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul,4ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;

  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *(uint64_t **)a2);
  v4 = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 9);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 16));
  return IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, *(uint64_t **)(a2 + 24));
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::expand(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(uint64_t *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 72 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (!v5)
  {
    v12 = 0;
    if (!v4)
      return v12;
    goto LABEL_37;
  }
  v11 = 0;
  v12 = 0;
  v13 = v5;
  do
  {
    v14 = (unsigned int *)(v4 + 72 * v11);
    WebCore::SecurityOriginData::isHashTableDeletedValue((WebCore::SecurityOriginData *)v14);
    if ((v15 & 1) == 0)
    {
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
      {
        v16 = *(_QWORD *)(v4 + 72 * v11 + 64);
        if (v16)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v8);
        v17 = v14[14];
        if ((_DWORD)v17 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v17])(&v42, v14 + 8);
        v14[14] = -1;
        v18 = v14[6];
        if ((_DWORD)v18 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v18])(&v43, v4 + 72 * v11);
        v14[6] = -1;
      }
      else
      {
        v41 = v12;
        v19 = *a1;
        if (*a1)
          v20 = *(_DWORD *)(v19 - 8);
        else
          v20 = 0;
        v21 = WTF::computeHash<WebCore::ClientOrigin>(v4 + 72 * v11);
        v22 = 0;
        do
        {
          v23 = v21 & v20;
          v24 = v19 + 72 * (v21 & v20);
          v26 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>();
          v21 = ++v22 + v23;
        }
        while (!v26);
        v27 = v19 + 72 * v23;
        v30 = *(_QWORD *)(v27 + 64);
        v29 = (_QWORD *)(v27 + 64);
        v28 = v30;
        if (v30)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v28, v25);
        v31 = *(unsigned int *)(v24 + 56);
        if ((_DWORD)v31 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v31])(&v44, v24 + 32);
        *(_DWORD *)(v24 + 56) = -1;
        v32 = *(unsigned int *)(v24 + 24);
        if ((_DWORD)v32 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v32])(&v45, v24);
        *(_BYTE *)v24 = 0;
        *(_DWORD *)(v24 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v24, v4 + 72 * v11);
        *(_BYTE *)(v24 + 32) = 0;
        *(_DWORD *)(v24 + 56) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v24 + 32, (uint64_t)(v14 + 8));
        v33 = v4 + 72 * v11;
        *v29 = 0;
        v34 = *(_QWORD *)(v33 + 64);
        *(_QWORD *)(v33 + 64) = 0;
        *v29 = v34;
        v35 = *(_QWORD *)(v33 + 64);
        if (v35)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v35, v8);
        v36 = v14[14];
        v12 = v41;
        if ((_DWORD)v36 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v36])(&v46, v14 + 8);
        v14[14] = -1;
        v37 = v14[6];
        if ((_DWORD)v37 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v37])(&v47, v4 + 72 * v11);
        v14[6] = -1;
        if (v14 == a3)
          v12 = v24;
      }
    }
    ++v11;
  }
  while (v11 != v13);
  if (v4)
LABEL_37:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  _QWORD *v16;
  WTF *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF *v26;
  _QWORD *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  WTF *v37;
  WTF::StringImpl *v38;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = *((_DWORD *)v13 + 4);
          if (v20 >= 0x100)
            v21 = v20 >> 8;
          else
            v21 = WTF::StringImpl::hashSlowCase(v13);
          v22 = 0;
          do
          {
            v23 = v21 & v19;
            v24 = (WTF::StringImpl **)(v18 + 24 * (v21 & v19));
            v21 = ++v22 + (v21 & v19);
          }
          while (*v24);
          v25 = v18 + 24 * v23;
          v28 = *(WTF **)(v25 + 8);
          v27 = (_QWORD *)(v25 + 8);
          v26 = v28;
          if (v28)
          {
            *v27 = 0;
            *(_DWORD *)(v18 + 24 * v23 + 16) = 0;
            WTF::fastFree(v26, v8);
            v29 = *v24;
            *v24 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v8);
              else
                *(_DWORD *)v29 -= 2;
            }
          }
          else
          {
            *v24 = 0;
          }
          v30 = *v12;
          *v12 = 0;
          *v24 = v30;
          v31 = v4 + 24 * v9;
          *v27 = 0;
          v27[1] = 0;
          v33 = *(_QWORD *)(v31 + 8);
          v32 = v31 + 8;
          *(_QWORD *)v32 = 0;
          *v27 = v33;
          v34 = *(_DWORD *)(v32 + 8);
          *(_DWORD *)(v32 + 8) = 0;
          v35 = v18 + 24 * v23;
          *(_DWORD *)(v35 + 16) = v34;
          v36 = *(_DWORD *)(v32 + 12);
          *(_DWORD *)(v32 + 12) = 0;
          *(_DWORD *)(v35 + 20) = v36;
          v37 = *(WTF **)v32;
          if (*(_QWORD *)v32)
          {
            *(_QWORD *)v32 = 0;
            *(_DWORD *)(v32 + 8) = 0;
            WTF::fastFree(v37, v8);
          }
          v38 = *v12;
          *v12 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v38 -= 2;
          }
          if (v12 == a3)
            v10 = v18 + 24 * v23;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v17 = *(WTF **)(v14 + 8);
          v16 = (_QWORD *)(v14 + 8);
          v15 = v17;
          if (v17)
          {
            *v16 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v15, v8);
            v13 = *v12;
          }
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned int v5;
  WebCore::SecurityOriginData *v6;
  int v7;
  char v8;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::computeHash<WebCore::ClientOrigin>(a2) & v4;
  v6 = (WebCore::SecurityOriginData *)(v2 + 72 * v5);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) != 0)
  {
LABEL_8:
    if (*a1)
      return *a1 + 72 * *(unsigned int *)(*a1 - 4);
    else
      return 0;
  }
  else
  {
    v7 = 1;
    while (1)
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue(v6);
      if ((v8 & 1) == 0 && WebCore::operator==() && (WebCore::operator==() & 1) != 0)
        break;
      v5 = (v5 + v7) & v4;
      v6 = (WebCore::SecurityOriginData *)(v2 + 72 * v5);
      ++v7;
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
        goto LABEL_8;
    }
  }
  return (uint64_t)v6;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  WTF **v9;
  int i;
  int v11;
  WTF *v12;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = i + v11)
  {
    v11 = v8 & v6;
    v9 = (WTF **)(v3 + 24 * (v8 & v6));
    v12 = *v9;
    if (*v9 == (WTF *)-1)
      goto LABEL_10;
    if (!v12)
      break;
    if ((WTF::equal(v12, *a2, a3) & 1) != 0)
      return (uint64_t)v9;
LABEL_10:
    ++i;
  }
  if (*a1)
    return *a1 + 24 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessageWithMessagePorts &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebBroadcastChannelRegistry::PostMessageToRemote,WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)#1},void,WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BC808;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MessageWithMessagePorts &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebBroadcastChannelRegistry::PostMessageToRemote,WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)#1},void,WebKit::NetworkBroadcastChannelRegistry::postMessage(IPC::Connection&,WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BC808;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t *v4;

  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(a1, *(_QWORD *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 8));
  v4 = *(uint64_t **)(a2 + 16);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(a1, v4);
  return IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v4 + 1));
}

uint64_t WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::ClientOrigin>::destruct(*(_QWORD *)a1, *(_QWORD *)a1 + (v3 << 6));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::ClientOrigin>::destruct(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v11 = v2;
    v12 = v3;
    v5 = result + 32;
    do
    {
      v6 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v6 != -1)
        result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v6])(&v9, v5);
      *(_DWORD *)(v5 + 24) = -1;
      v7 = *(unsigned int *)(v5 - 8);
      if ((_DWORD)v7 != -1)
        result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v7])(&v10, v5 - 32);
      *(_DWORD *)(v5 - 8) = -1;
      v8 = v5 + 32;
      v5 += 64;
    }
    while (v8 != a2);
  }
  return result;
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(WebCore::SecurityOriginData *a1)
{
  if (!a1)
    return 0;
  if (!*((_DWORD *)a1 - 3))
    return (WebCore::SecurityOriginData *)((char *)a1 + 72 * *((unsigned int *)a1 - 1));
  return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::makeIterator((uint64_t)a1, a1);
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::makeIterator(uint64_t a1, WebCore::SecurityOriginData *a2)
{
  unsigned int v2;
  WebCore::SecurityOriginData *v4[2];

  if (a1)
    v2 = *(_DWORD *)(a1 - 4);
  else
    v2 = 0;
  v4[0] = a2;
  v4[1] = (WebCore::SecurityOriginData *)(a1 + 72 * v2);
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v4);
  return v4[0];
}

void WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(WebCore::SecurityOriginData **a1)
{
  WebCore::SecurityOriginData *v1;
  int v3;
  WebCore::SecurityOriginData *v4;

  v1 = *a1;
  if (*a1 != a1[1])
  {
    do
    {
      if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) == 0)
      {
        WebCore::SecurityOriginData::isHashTableDeletedValue(v1);
        if (!v3)
          break;
      }
      v4 = a1[1];
      v1 = (WebCore::SecurityOriginData *)((char *)*a1 + 72);
      *a1 = v1;
    }
    while (v1 != v4);
  }
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, uint64_t a2)
{
  void *v4;
  WTF *result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a2, (WTF::StringImpl *)a2);
  result = *(WTF **)(a2 + 8);
  if (result)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    result = (WTF *)WTF::fastFree(result, v4);
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ClientOrigin&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6);
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v4, v3);
  *(_BYTE *)(v4 + 32) = 0;
  v4 += 32;
  *(_DWORD *)(v4 + 24) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v4, v3 + 32);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ClientOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 26)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(a2 << 6));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = v5 << 6;
        v9 = (uint64_t)v4 + 32;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v7, v9 - 32);
          *(_BYTE *)(v7 + 32) = 0;
          v10 = v7 + 32;
          *(_DWORD *)(v10 + 24) = -1;
          result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v10, v9);
          v11 = *(unsigned int *)(v9 + 24);
          if ((_DWORD)v11 != -1)
            result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v11])(&v13, v9);
          *(_DWORD *)(v9 + 24) = -1;
          v12 = *(unsigned int *)(v9 - 8);
          if ((_DWORD)v12 != -1)
            result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v12])(&v14, v9 - 32);
          *(_DWORD *)(v9 - 8) = -1;
          v9 += 64;
          v7 = v10 + 32;
          v8 -= 64;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,int>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  v3 = a1[1];
  v4 = v3 != 0;
  v5 = v3 - 1;
  if (!v4)
    v5 = 0;
  v8 = *a1;
  if (v5 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v9 = v5;
    v7 = *a2;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((uint64_t)&v8, &v7, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>@<X0>(uint64_t result@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;

  v3 = *(_DWORD *)(result + 8);
  v4 = *a2;
  if (*a2 < 0)
  {
    v9 = -v4;
    v5 = 1;
    do
    {
      ++v5;
      v7 = v9 >= 0xA;
      v9 /= 0xAu;
    }
    while (v7);
  }
  else
  {
    v5 = 0;
    v6 = *a2;
    do
    {
      ++v5;
      v7 = v6 >= 9;
      v8 = v6 == 9;
      v6 /= 0xAu;
    }
    while (!v8 && v7);
  }
  if (((v5 | v3) & 0x80000000) == 0)
  {
    v10 = __OFADD__(v3, v5);
    v11 = (v3 + v5);
    if (!v10)
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>(v11, 1, *(_OWORD **)result, *(_QWORD *)(result + 8), v4, a3);
  }
  *a3 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  int v9;
  _DWORD *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  int8x16_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  __int16 v23;
  _DWORD *v24;
  int8x16x2_t v25;
  int8x16x2_t v26;
  int8x16x2_t v27;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v24;
        if (v24)
        {
          v12 = v24 + 5;
          *v24 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          if (a4)
          {
            if (a4 == 1)
              *v12 = *(_BYTE *)a3;
            else
              memcpy(v11 + 5, a3, a4);
          }
          LODWORD(v24) = a5;
          result = (uint64_t)WTF::StringTypeAdapter<int,void>::writeTo<unsigned char>((unsigned int *)&v24, &v12[a4]);
        }
        goto LABEL_21;
      }
LABEL_11:
      v11 = 0;
      goto LABEL_21;
    }
LABEL_12:
    v11 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_21;
  }
  if (!(_DWORD)result)
    goto LABEL_12;
  if (result > 0x7FFFFFEF)
    goto LABEL_11;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v24;
  if (v24)
  {
    v13 = (char *)(v24 + 5);
    *v24 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    v14 = (char *)v11 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v15 = &v13[2 * (a4 & 0xFFFFFFC0)];
      v16 = 0uLL;
      do
      {
        v25.val[0] = (int8x16_t)*a3;
        v17 = *((int8x16_t *)a3 + 1);
        v26.val[0] = (int8x16_t)a3[2];
        v18 = a3[3];
        a3 += 4;
        v19 = v18;
        v26.val[1] = 0uLL;
        v27.val[0] = v17;
        v25.val[1] = 0uLL;
        v20 = v13;
        vst2q_s8(v20, v25);
        v20 += 32;
        v27.val[1] = 0uLL;
        vst2q_s8(v20, v27);
        v21 = v13 + 64;
        vst2q_s8(v21, v26);
        v22 = v13 + 96;
        vst2q_s8(v22, *(int8x16x2_t *)(&v16 - 1));
        v13 += 128;
      }
      while (v13 != v15);
      v13 = v15;
    }
    while (v13 != v14)
    {
      v23 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v13 = v23;
      v13 += 2;
    }
    LODWORD(v24) = a5;
    result = (uint64_t)WTF::StringTypeAdapter<int,void>::writeTo<char16_t>((unsigned int *)&v24, v14);
  }
LABEL_21:
  *a6 = v11;
  return result;
}

unsigned int *WTF::StringTypeAdapter<int,void>::writeTo<unsigned char>(unsigned int *result, void *__dst)
{
  unsigned int v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  size_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE v10[13];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *result;
  if ((*result & 0x80000000) != 0)
  {
    v7 = 0;
    v8 = -v2;
    do
    {
      v10[v7-- + 12] = (v8 % 0xA) | 0x30;
      v4 = v8 > 9;
      v8 /= 0xAu;
    }
    while (v4);
    v9 = v7 + 12;
    v5 = &v10[v7 + 12];
    *v5 = 45;
    if (v7 + 14 <= 14)
    {
      if (v9 <= 12)
        v9 = 12;
      v6 = v9 - v7 - 11;
      return (unsigned int *)memcpy(__dst, v5, v6);
    }
  }
  else
  {
    v3 = 0;
    do
    {
      v10[v3-- + 12] = (v2 % 0xA) | 0x30;
      v4 = v2 > 9;
      v2 /= 0xAu;
    }
    while (v4);
    if (v3 + 14 <= 13)
    {
      v5 = &v10[v3 + 13];
      v6 = -v3;
      return (unsigned int *)memcpy(__dst, v5, v6);
    }
  }
  return result;
}

unsigned int *WTF::StringTypeAdapter<int,void>::writeTo<char16_t>(unsigned int *result, _WORD *a2)
{
  unsigned int v2;
  uint64_t v3;
  BOOL v4;
  unsigned int v6;
  uint64_t v7;
  _BYTE v8[13];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *result;
  if ((*result & 0x80000000) != 0)
  {
    v6 = -v2;
    v7 = 12;
    do
    {
      v8[v7--] = (v6 % 0xA) | 0x30;
      v4 = v6 > 9;
      v6 /= 0xAu;
    }
    while (v4);
    v8[v7] = 45;
    if (v7 + 2 <= 14)
    {
      do
      {
        *a2++ = v8[v7];
        v4 = v7++ < 12;
      }
      while (v4);
    }
  }
  else
  {
    v3 = 0;
    do
    {
      v8[v3-- + 12] = (v2 % 0xA) | 0x30;
      v4 = v2 > 9;
      v2 /= 0xAu;
    }
    while (v4);
    if (v3 + 14 <= 13)
    {
      do
        *a2++ = *((unsigned __int8 *)&v9 + v3);
      while (!__CFADD__(v3++, 1));
    }
  }
  return result;
}

WTF::StringImpl ***WTF::RefCounted<WebKit::NetworkSchemeRegistry>::deref(WTF::StringImpl ***this, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl **v3;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[1];
    if (v3)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    return (WTF::StringImpl ***)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

WTF::StringImpl *WTF::Function<void ()(WebCore::RequestStorageAccessResult)>::operator()(uint64_t *a1, __int16 *a2)
{
  uint64_t v2;
  __int128 v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  __int16 v7;
  char v8;
  WTF::StringImpl *v9[2];

  v2 = *a1;
  v7 = *a2;
  v8 = *((_BYTE *)a2 + 2);
  v3 = *(_OWORD *)(a2 + 4);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_OWORD *)v9 = v3;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v2 + 16))(v2, &v7);
  v5 = v9[1];
  v9[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v9[0];
  v9[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  _BYTE v12[12];
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(v3 + 256);
    *(_DWORD *)v12 = 134218496;
    *(_QWORD *)&v12[4] = v3;
    v13 = 2048;
    v14 = v5;
    v15 = 1024;
    v16 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::hasUploadStateChanged: (hasUpload=%d)", v12, 0x1Cu);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 32);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 344;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  *(_QWORD *)v12 = v7;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, (uint64_t *)(v3 + 256));
  *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a2;
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)v12, 0, 0);
  result = *(IPC::Encoder **)v12;
  *(_QWORD *)v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

unsigned int *WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  const void **v6;
  uint64_t v7;
  const void *v8;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v6 = (const void **)(*(_QWORD *)a1 + 40);
    v7 = 48 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
        CFRelease(v8);
      v6 += 6;
      v7 -= 48;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34BC858;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BC858;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_1,void>::call(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v1 = *(unsigned int **)(a1 + 8);
  if (v1)
  {
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E34BC880;
  v3[1] = v1;
  v5 = v3;
  WTF::ensureOnMainRunLoop();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_1::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34BC880;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_1::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BC880;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::NetworkConnectionToWebProcess(WebKit::NetworkProcess &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,PAL::SessionID,WebKit::NetworkProcessConnectionParameters &&,IPC::Connection::Identifier)::$_1::operator() const(void)::{lambda(void)#1},void>::call(IPC::Encoder *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 32);
      v4 = (uint64_t *)(v2 + 208);
      v5 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v5 = 350;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v9 = (IPC::Encoder *)v5;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v5, v4);
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
      result = v9;
      v9 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v6);
        return (IPC::Encoder *)WTF::fastFree(v7, v8);
      }
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::begin(_QWORD *a1)
{
  if (!a1)
    return 0;
  if (*((_DWORD *)a1 - 3))
    return WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::makeConstIterator((uint64_t)a1, a1);
  return &a1[2 * *((unsigned int *)a1 - 1)];
}

_QWORD *WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::makeConstIterator(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;

  if (a1)
    v3 = *(unsigned int *)(a1 - 4);
  else
    v3 = 0;
  v4 = (_QWORD *)(a1 + 16 * v3);
  if (v4 != a2)
  {
    while (*a2 == -1 || *(_OWORD *)a2 == 0)
    {
      a2 += 2;
      if (a2 == v4)
        return (_QWORD *)(a1 + 16 * v3);
    }
  }
  return a2;
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[2 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v1];
  if ((_DWORD)v1)
  {
    v3 = 16 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v3 -= 16;
      if (!v3)
        return v2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessConnection::ConnectToRTCDataChannelRemoteSource,WTF::CompletionHandler<void ()(std::optional<BOOL>)>>(WTF::CompletionHandler<void ()(std::optional<BOOL>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BC8A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessConnection::ConnectToRTCDataChannelRemoteSource,WTF::CompletionHandler<void ()(std::optional<BOOL>)>>(WTF::CompletionHandler<void ()(std::optional<BOOL>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BC8A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessConnection::ConnectToRTCDataChannelRemoteSource,WTF::CompletionHandler<void ()(std::optional<BOOL>)>>(WTF::CompletionHandler<void ()(std::optional<BOOL>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<std::optional<BOOL>>>(a2), (v3 & 0xFF0000) != 0))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, (unsigned __int16)v3);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::begin(_QWORD *a1)
{
  if (!a1)
    return 0;
  if (*((_DWORD *)a1 - 3))
    return WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::makeConstIterator((uint64_t)a1, a1);
  return &a1[10 * *((unsigned int *)a1 - 1)];
}

_QWORD *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::makeConstIterator(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unsigned int v3;
  _QWORD *v4;

  v2 = a2;
  if (a1)
    v3 = *(_DWORD *)(a1 - 4);
  else
    v3 = 0;
  v4 = (_QWORD *)(a1 + 80 * v3);
  if (v4 != a2)
  {
    while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v2) & 1) != 0
         || *v2 == -1)
    {
      v2 += 10;
      if (v2 == v4)
        return v4;
    }
  }
  return v2;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(uint64_t a1)
{
  const WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  BOOL v4;
  WTF::StringImpl *v5;
  uint64_t v7;
  char v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  WTF::PairHashTraits<WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::optional<WebCore::SecurityOriginData>>>::emptyValue((uint64_t)&v9);
  if (WTF::equal(*(WTF **)a1, v9, v2))
  {
    if (*(_BYTE *)(a1 + 72))
      v4 = v12 == 0;
    else
      v4 = 1;
    if (v4)
      v7 = (*(_BYTE *)(a1 + 72) != 0) == (v12 != 0);
    else
      v7 = WebCore::operator==();
  }
  else
  {
    v7 = 0;
  }
  if (v12)
  {
    if (v11 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v11])(&v8, &v10);
    v11 = -1;
  }
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v7;
}

WTF::StringImpl *WTF::PairHashTraits<WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::optional<WebCore::SecurityOriginData>>>::emptyValue(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4[5];

  v4[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v4);
  WTF::URL::URL(a1, (uint64_t *)v4);
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  result = v4[0];
  v4[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::begin(_QWORD *a1)
{
  if (!a1)
    return 0;
  if (*((_DWORD *)a1 - 3))
    return WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::makeIterator((uint64_t)a1, a1);
  return &a1[11 * *((unsigned int *)a1 - 1)];
}

_QWORD *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::makeIterator(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unsigned int v3;
  _QWORD *v4;

  v2 = a2;
  if (a1)
    v3 = *(_DWORD *)(a1 - 4);
  else
    v3 = 0;
  v4 = (_QWORD *)(a1 + 88 * v3);
  if (v4 != a2)
  {
    while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v2) & 1) != 0
         || *v2 == -1)
    {
      v2 += 11;
      if (v2 == v4)
        return v4;
    }
  }
  return v2;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(WebKit::NetworkResourceLoadParameters &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;

  *a1 = off_1E34BC8D0;
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)(a1 + 4), a2);
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(WebKit::NetworkResourceLoadParameters &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  void *v3;
  _DWORD *v4;

  *a1 = off_1E34BC8D0;
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)(a1 + 4), a2);
  v4 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(WebKit::NetworkResourceLoadParameters &&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(_QWORD *)(v2 + 256);
  if (WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v3 + 128), &v4))
  {
    WebKit::NetworkConnectionToWebProcess::scheduleResourceLoad(v2, (uint64_t)(a1 + 4), a1[476], a1[477]);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::loadPing(WebKit::NetworkResourceLoadParameters &&)::$_0,void,WebCore::ResourceError const&,WebKit::NetworkConnectionToWebProcess::loadPing(WebKit::NetworkResourceLoadParameters &&)::$_0::ResourceResponse const&>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BC908;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::loadPing(WebKit::NetworkResourceLoadParameters &&)::$_0,void,WebCore::ResourceError const&,WebKit::NetworkConnectionToWebProcess::loadPing(WebKit::NetworkResourceLoadParameters &&)::$_0::ResourceResponse const&>::~CallableWrapper(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34BC908;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::loadPing(WebKit::NetworkResourceLoadParameters &&)::$_0,void,WebCore::ResourceError const&,WebKit::NetworkConnectionToWebProcess::loadPing(WebKit::NetworkResourceLoadParameters &&)::$_0::ResourceResponse const&>::call(uint64_t a1, WebCore::ResourceError *a2, WebCore::ResourceResponseBase *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 294;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v13 = (IPC::Encoder *)v7;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v8;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::preconnectTo(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NetworkResourceLoadParameters &&)::$_1,void,WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E34BC958;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::preconnectTo(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NetworkResourceLoadParameters &&)::$_1,void,WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E34BC958;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::preconnectTo(std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebKit::NetworkResourceLoadParameters &&)::$_1,void,WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&>::call(IPC::Encoder *result, WebCore::ResourceError *a2)
{
  if (*((_BYTE *)result + 32))
    return WebKit::NetworkConnectionToWebProcess::didFinishPreconnection(*((IPC::Encoder **)result + 1), *((_QWORD *)result + 3), a2);
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::ResourceRequest const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ResourceRequest const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;

  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, *(WebCore::ResourceRequest **)a2);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, *(uint64_t **)(a2 + 8));
  v4 = **(_QWORD **)(a2 + 16);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (WTF::StringImpl **)WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WTF *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  WTF *result;
  int i;
  uint64_t v10;

  v3 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 >= 0x100)
    v7 = v6 >> 8;
  else
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v7 = i + v10)
  {
    v10 = v7 & v5;
    result = *(WTF **)(v3 + 8 * v10);
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if ((WTF::equal(result, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return (WTF *)(v3 + 8 * v10);
}

void WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::add(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int v22;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash(a2) & v7;
  v9 = (WTF::StringImpl **)(v6 + 80 * v8);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v9) & 1) == 0)
  {
    v11 = 0;
    v12 = 1;
    do
    {
      if (*v9 == (WTF::StringImpl *)-1)
      {
        v11 = (uint64_t)v9;
      }
      else if (WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::equal((uint64_t)v9, (uint64_t)a2, v10))
      {
        v21 = *a1;
        if (*a1)
          v22 = *(_DWORD *)(v21 - 4);
        else
          v22 = 0;
        v20 = 0;
        v19 = v21 + 80 * v22;
        goto LABEL_17;
      }
      v8 = (v8 + v12) & v7;
      v9 = (WTF::StringImpl **)(v6 + 80 * v8);
      ++v12;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v9));
    if (v11)
    {
      WTF::PairHashTraits<WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::optional<WebCore::SecurityOriginData>>>::emptyValue(v11);
      --*(_DWORD *)(*a1 - 16);
      v9 = (WTF::StringImpl **)v11;
    }
  }
  WTF::URL::operator=((uint64_t)v9, (WTF::StringImpl *)a2);
  std::__optional_storage_base<WebCore::SecurityOriginData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SecurityOriginData,false>>((WebCore::SecurityOriginData *)(v9 + 5), (uint64_t)(a2 + 5));
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_16;
LABEL_19:
    v9 = (WTF::StringImpl **)WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::expand(a1, v9);
    v15 = *a1;
    if (*a1)
      LODWORD(v18) = *(_DWORD *)(v15 - 4);
    else
      LODWORD(v18) = 0;
    goto LABEL_16;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_19;
LABEL_16:
  v19 = v15 + 80 * v18;
  v20 = 1;
LABEL_17:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v19;
  *(_BYTE *)(a3 + 16) = v20;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  uint64_t result;
  uint64_t v45;
  char v46;
  char v47;
  char v48;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
  {
    v11 = a2;
    v12 = v7 + 16;
    do
    {
      WTF::PairHashTraits<WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::optional<WebCore::SecurityOriginData>>>::emptyValue(v12);
      v12 += 80;
      --v11;
    }
    while (v11);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    v45 = v5;
    do
    {
      v15 = (WTF::StringImpl **)(v4 + 80 * v13);
      if (*v15 != (WTF::StringImpl *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(v4 + 80 * v13))
        {
          v36 = v4 + 80 * v13;
          if (*(_BYTE *)(v36 + 72))
          {
            v37 = v4 + 80 * v13;
            v40 = *(_DWORD *)(v37 + 64);
            v39 = (_DWORD *)(v37 + 64);
            v38 = v40;
            if (v40 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v38])(&v46, v36 + 40);
            *v39 = -1;
          }
          v41 = *v15;
          *v15 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, v8);
            else
              *(_DWORD *)v41 -= 2;
          }
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash((WTF::StringImpl **)(v4 + 80 * v13));
          v19 = 0;
          do
          {
            v20 = v18 & v17;
            v21 = (WTF::StringImpl **)(v16 + 80 * (v18 & v17));
            v23 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v21);
            v18 = ++v19 + v20;
          }
          while (!v23);
          v24 = v16 + 80 * v20;
          if (*(_BYTE *)(v24 + 72))
          {
            v25 = v16 + 80 * v20;
            v28 = *(_DWORD *)(v25 + 64);
            v27 = (_DWORD *)(v25 + 64);
            v26 = v28;
            if (v28 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v26])(&v47, v24 + 40);
            *v27 = -1;
          }
          v29 = *v21;
          *v21 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v22);
            else
              *(_DWORD *)v29 -= 2;
          }
          std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100](v16 + 80 * v20, v4 + 80 * v13);
          v30 = v4 + 80 * v13;
          if (*(_BYTE *)(v30 + 72))
          {
            v31 = v4 + 80 * v13;
            v34 = *(_DWORD *)(v31 + 64);
            v33 = (_DWORD *)(v31 + 64);
            v32 = v34;
            if (v34 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v32])(&v48, v30 + 40);
            *v33 = -1;
          }
          v35 = *v15;
          *v15 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v8);
            else
              *(_DWORD *)v35 -= 2;
          }
          if (v15 == a3)
            v14 = v16 + 80 * v20;
        }
      }
      ++v13;
    }
    while (v13 != v45);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v14;
}

uint64_t std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  WTF::URL::URL(a1, (uint64_t *)a2);
  *(_BYTE *)(v4 + 40) = 0;
  v5 = v4 + 40;
  *(_BYTE *)(v5 + 32) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    *(_DWORD *)(a1 + 64) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v5, a2 + 40);
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

unint64_t WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash(WTF::StringImpl **a1)
{
  WTF::StringImpl *v2;
  unsigned int v3;
  int v4;
  int v6;
  __int16 v7;
  char v8;

  v2 = *a1;
  v3 = *((_DWORD *)v2 + 4);
  if (v3 >= 0x100)
    v4 = v3 >> 8;
  else
    v4 = WTF::StringImpl::hashSlowCase(v2);
  v6 = -1640531527;
  v7 = 0;
  v8 = 0;
  WTF::add<WebCore::SecurityOriginData>(&v6, (uint64_t)(a1 + 5));
  return (0xD7862706ELL
        * (unint64_t)(277951225 * v4
                           + 95187966 * WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v6))) >> 4;
}

_DWORD *WTF::add<WebCore::SecurityOriginData>(_DWORD *a1, uint64_t a2)
{
  int v2;
  unsigned int v3;

  v2 = *(unsigned __int8 *)(a2 + 32);
  v3 = (*a1 + v2) ^ ((*a1 + v2) << 16);
  *a1 = v3 + (v3 >> 11);
  if (v2)
    return (_DWORD *)WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1, a2);
  return a1;
}

uint64_t WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::equal(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  BOOL v6;

  result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 72))
      v6 = *(_BYTE *)(a2 + 72) == 0;
    else
      v6 = 1;
    if (v6)
      return (*(_BYTE *)(a1 + 72) != 0) == (*(_BYTE *)(a2 + 72) != 0);
    else
      return WebCore::operator==();
  }
  return result;
}

WTF::StringImpl *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF::StringImpl *)WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WTF::StringImpl *WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;
  char v5;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v3])(&v5, a1 + 40);
    *(_DWORD *)(a1 + 64) = -1;
  }
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)a1 = -1;
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::IdentityExtractor,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  const WTF::StringImpl *v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash(a2) & v5;
  v7 = (_QWORD *)(v2 + 80 * v6);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v7) & 1) != 0)
  {
LABEL_7:
    if (*a1)
      return *a1 + 80 * *(unsigned int *)(*a1 - 4);
    else
      return 0;
  }
  else
  {
    v9 = 1;
    while (*v7 == -1
         || (WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::equal((uint64_t)v7, (uint64_t)a2, v8) & 1) == 0)
    {
      v6 = (v6 + v9) & v5;
      v7 = (_QWORD *)(v2 + 80 * v6);
      ++v9;
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v7))
        goto LABEL_7;
    }
  }
  return (uint64_t)v7;
}

void WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash(a2) & v9;
  v11 = v8 + 88 * v10;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(v11) & 1) == 0)
  {
    v25 = a3;
    v21 = 0;
    v22 = 1;
    do
    {
      if (*(_QWORD *)v11 == -1)
      {
        v21 = v11;
      }
      else if (WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::equal(v11, (uint64_t)a2, v12))
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 4);
        else
          v24 = 0;
        v20 = 0;
        v19 = v23 + 88 * v24;
        goto LABEL_11;
      }
      v10 = (v10 + v22) & v9;
      v11 = v8 + 88 * v10;
      ++v22;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(v11));
    a3 = v25;
    if (v21)
    {
      WTF::PairHashTraits<WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::optional<WebCore::SecurityOriginData>>>::emptyValue(v21);
      *(_DWORD *)(v21 + 80) = 0;
      --*(_DWORD *)(*a1 - 16);
      v11 = v21;
    }
  }
  WTF::URL::operator=(v11, (WTF::StringImpl *)a2);
  std::__optional_storage_base<WebCore::SecurityOriginData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SecurityOriginData,false>>((WebCore::SecurityOriginData *)(v11 + 40), (uint64_t)(a2 + 5));
  *(_DWORD *)(v11 + 80) = *a3;
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_10;
LABEL_28:
    v11 = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::expand(a1, (_QWORD *)v11);
    v15 = *a1;
    if (*a1)
      LODWORD(v18) = *(_DWORD *)(v15 - 4);
    else
      LODWORD(v18) = 0;
    goto LABEL_10;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_28;
LABEL_10:
  v19 = v15 + 88 * v18;
  v20 = 1;
LABEL_11:
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v19;
  *(_BYTE *)(a4 + 16) = v20;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v14))
        {
          WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>::~KeyValuePair((uint64_t)v14, v15);
        }
        else
        {
          v16 = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::reinsert(*a1, (uint64_t)v14);
          WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>::~KeyValuePair((uint64_t)v14, v17);
          if (v14 == a3)
            v11 = v16;
        }
      }
      v14 += 11;
      --v13;
    }
    while (v13);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::allocateTable(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;

  LODWORD(v1) = a1;
  v2 = WTF::fastMalloc((WTF *)(88 * a1 + 16));
  v3 = v2 + 16;
  if ((_DWORD)v1)
  {
    v1 = v1;
    v4 = (_DWORD *)(v2 + 96);
    do
    {
      WTF::PairHashTraits<WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::optional<WebCore::SecurityOriginData>>>::emptyValue((uint64_t)(v4 - 20));
      *v4 = 0;
      v4 += 22;
      --v1;
    }
    while (v1);
  }
  return v3;
}

uint64_t WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::reinsert(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t result;
  char v14;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash((WTF::StringImpl **)a2);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v8 = a1 + 88 * (v5 & v4);
    v10 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(v8);
    v5 = ++v6 + v7;
  }
  while (!v10);
  if (*(_BYTE *)(v8 + 72))
  {
    v11 = *(unsigned int *)(v8 + 64);
    if ((_DWORD)v11 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v11])(&v14, v8 + 40);
    *(_DWORD *)(v8 + 64) = -1;
  }
  v12 = *(WTF::StringImpl **)v8;
  *(_QWORD *)v8 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>::pair[abi:sn180100](a1 + 88 * v7, a2);
  *(_DWORD *)(a1 + 88 * v7 + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

uint64_t WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 88 * *(unsigned int *)(*a1 - 4);
  if ((WTF::StringImpl *)v2 == a2)
    return 0;
LABEL_3:
  if ((WTF::StringImpl *)v2 != a2)
    WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::remove(a1, a2);
  return 1;
}

WTF::StringImpl *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::hashTraitsDeleteBucket<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF::StringImpl *)WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(_QWORD **a1, WTF::StringImpl **a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = *a1;
  if (result)
  {
    result = WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)result, a2);
    v4 = *a1;
    if (!result)
    {
      if (v4)
        return &v4[11 * *((unsigned int *)v4 - 1)];
      else
        return 0;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int>>,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>,unsigned int,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>>,std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>(uint64_t a1, WTF::StringImpl **a2)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  const WTF::StringImpl *v7;
  int v8;

  if (!a1)
    return 0;
  v4 = *(_DWORD *)(a1 - 8);
  v5 = WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::hash(a2) & v4;
  v6 = (_QWORD *)(a1 + 88 * v5);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v6) & 1) != 0)
    return 0;
  v8 = 1;
  while (*v6 == -1
       || (WTF::PairHash<WTF::URL,std::optional<WebCore::SecurityOriginData>>::equal((uint64_t)v6, (uint64_t)a2, v7) & 1) == 0)
  {
    v5 = (v5 + v8) & v4;
    v6 = (_QWORD *)(a1 + 88 * v5);
    ++v8;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>,false>::isEmptyValue<std::pair<WTF::URL,std::optional<WebCore::SecurityOriginData>>>((uint64_t)v6))
      return 0;
  }
  return v6;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *a1 = off_1E34BC980;
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  _DWORD *v5;

  *(_QWORD *)a1 = off_1E34BC980;
  v3 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  v5 = (_DWORD *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::writeBlobsToTemporaryFilesForIndexedDB(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)> &&)::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v15;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)(a1 + 24);
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
      v7 -= 8;
    }
    while (v7);
  }
  v9 = *(_QWORD *)(v4 + 72);
  v15 = *(uint64_t **)(v4 + 80);
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 208), &v15);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 800);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v11 + 16));
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, (uint64_t **)(v4 + 64));
    WebKit::NetworkStorageManager::registerTemporaryBlobFilePaths(v11, (uint64_t)v15, a2);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v15);
    if (v11)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 16), v12);
  }
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 16))(v13, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

uint64_t WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> &>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v8 = *a2;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = 1;
  *(_QWORD *)(v8 + 24) = 0x100000010;
  *(_BYTE *)(v8 + 32) = 0;
  result = nw_activity_create();
  *(_QWORD *)(v8 + 40) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  __int128 *v3;
  __int128 *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(__int128 **)a1;
      v4 = (__int128 *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12));
      v5 = 48 * a2;
      v6 = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v6;
      WTF::VectorMover<false,WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker>::move(v3, v4, v6);
      if (v3)
      {
        if (*(__int128 **)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v3, v7);
      }
    }
  }
}

WTF *WTF::Vector<WebKit::NetworkConnectionToWebProcess::ResourceNetworkActivityTracker,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  const void *v6;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    v3 = *((unsigned int *)result + 3);
    if ((_DWORD)v3)
    {
      v4 = (const void **)(*(_QWORD *)result + 40);
      v5 = 48 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
          CFRelease(v6);
        v4 += 6;
        v5 -= 48;
      }
      while (v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::SWServer>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEB5400]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

_DWORD *WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(_DWORD *result, _QWORD *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = *result + (unsigned __int16)*a2;
  v4 = (*a2 >> 5) & 0x7FFF800 ^ (v3 << 16) ^ v3;
  v5 = v4 + (unsigned __int16)WORD2(*a2) + (v4 >> 11);
  v6 = (*a2 >> 37) & 0x7FFF800 ^ (v5 << 16) ^ v5;
  v7 = v6 + (unsigned __int16)*a3 + (v6 >> 11);
  v8 = (*a3 >> 5) & 0x7FFF800 ^ (v7 << 16) ^ v7;
  v9 = v8 + (unsigned __int16)WORD2(*a3) + (v8 >> 11);
  v10 = (*a3 >> 37) & 0x7FFF800 ^ (v9 << 16);
  *result = (v10 ^ v9) + ((v10 ^ v9) >> 11);
  return result;
}

_DWORD *WTF::RefCounted<WebCore::MessagePortChannel>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEAFE20]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)> &&)::$_0,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34BC9D0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)> &&)::$_0,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::CompletionHandler<void ()(void)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34BC9D0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)> &&)::$_0,void,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::CompletionHandler<void ()(void)> &&>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 272);
  ++WebKit::NetworkConnectionToWebProcess::nextMessageBatchIdentifier(WTF::CompletionHandler<void ()(void)> &&)::currentMessageBatchIdentifier;
  v7 = *v6;
  if (*v6
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, 0), (v7 = *v6) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = WebKit::NetworkConnectionToWebProcess::nextMessageBatchIdentifier(WTF::CompletionHandler<void ()(void)> &&)::currentMessageBatchIdentifier;
  v10 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v7 + 16 * v13);
  v15 = *v14;
  if (!*v14)
  {
LABEL_11:
    v18 = *a3;
    *a3 = 0;
    v19 = v14[1];
    *v14 = v9;
    v14[1] = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = *v6;
    if (*v6)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v6;
    if (*v6)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_19;
    }
    else if (3 * v25 > 4 * v24)
    {
      goto LABEL_19;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, v14);
    goto LABEL_19;
  }
  v16 = 0;
  v17 = 1;
  while (v15 != WebKit::NetworkConnectionToWebProcess::nextMessageBatchIdentifier(WTF::CompletionHandler<void ()(void)> &&)::currentMessageBatchIdentifier)
  {
    if (v15 == -1)
      v16 = v14;
    v13 = (v13 + v17) & v8;
    v14 = (uint64_t *)(v7 + 16 * v13);
    v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v14 = v16;
      }
      goto LABEL_11;
    }
  }
LABEL_19:
  v26 = WebKit::NetworkConnectionToWebProcess::nextMessageBatchIdentifier(WTF::CompletionHandler<void ()(void)> &&)::currentMessageBatchIdentifier;
  v27 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, a2, v26);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
}

uint64_t *WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)*a1;
  if (*a1)
    v3 += 2 * *((unsigned int *)v3 - 1);
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = (_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(a1, a2);
  return a1;
}

void IPC::ArgumentCoder<std::tuple<JSC::MessageSource,JSC::MessageLevel,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<JSC::MessageSource,JSC::MessageLevel,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(WTF::URL &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,std::experimental::fundamentals_v3::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::ExceptionData>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E34BC9F8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(WTF::URL &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,std::experimental::fundamentals_v3::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::ExceptionData>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34BC9F8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(WTF::URL &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,std::experimental::fundamentals_v3::ExceptionData> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::ExceptionData>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[10];
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_16;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_16;
  v6 = *(_QWORD *)(v5 + 24);
  v17[0] = *(_QWORD *)(v5 + 32);
  if (!WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 208), v17))goto LABEL_16;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v8 = v7 ? v7 - 48 : 0;
  v9 = *(_QWORD *)(v8 + 72);
  v17[0] = *(_QWORD *)(v8 + 80);
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v9 + 208), v17);
  if (!*(_DWORD *)(a2 + 80) && (v11 = *(_QWORD *)(v10 + 72)) != 0)
  {
    LOBYTE(v17[0]) = 0;
    v18 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, a2);
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v19 = v12;
    v13 = WTF::fastMalloc((WTF *)0x68);
    *(_QWORD *)v13 = &off_1E34BCA30;
    *(_BYTE *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 88) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(v13 + 8, (uint64_t)v17);
    v14 = v19;
    v19 = 0;
    *(_QWORD *)(v13 + 96) = v14;
    v20 = v13;
    WebKit::WebResourceLoadStatisticsStore::setMostRecentWebPushInteractionTime(v11, a1 + 24, &v20);
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    result = v19;
    v19 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (v18 != -1)
      return ((uint64_t (*)(char *, _QWORD *))off_1E34BC6D8[v18])(&v21, v17);
  }
  else
  {
LABEL_16:
    v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PushSubscriptionData,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 80);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34BC6D8[v4])(&v7, result);
  *(_DWORD *)(v3 + 80) = -1;
  v5 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34BCA10[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  double result;

  *(_QWORD *)&result = std::__variant_detail::__alt<0ul,WebCore::PushSubscriptionData>::__alt[abi:sn180100]<WebCore::PushSubscriptionData>(a2, a3).n128_u64[0];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(WTF::URL &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,std::experimental::fundamentals_v3::ExceptionData> &&)> &&)::$_0::operator()(std::experimental::fundamentals_v3::ExceptionData)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = &off_1E34BCA30;
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E34BC6D8[v3])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(WTF::URL &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,std::experimental::fundamentals_v3::ExceptionData> &&)> &&)::$_0::operator()(std::experimental::fundamentals_v3::ExceptionData)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)this = &off_1E34BCA30;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 22);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34BC6D8[v4])(&v6, (char *)this + 8);
  *((_DWORD *)this + 22) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::navigatorSubscribeToPushService(WTF::URL &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,std::experimental::fundamentals_v3::ExceptionData> &&)> &&)::$_0::operator()(std::experimental::fundamentals_v3::ExceptionData)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)::$_0,void,WTF::CompletionHandler::unique_ptr<WebKit::NetworkTransportSession,WTF::CompletionHandler::default_delete<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)::$_0>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34BCA58;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)::$_0,void,WTF::CompletionHandler::unique_ptr<WebKit::NetworkTransportSession,WTF::CompletionHandler::default_delete<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)::$_0>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34BCA58;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)::$_0,void,WTF::CompletionHandler::unique_ptr<WebKit::NetworkTransportSession,WTF::CompletionHandler::default_delete<WebKit::NetworkConnectionToWebProcess::initializeWebTransportSession(WTF::URL &&,WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)> &&)::$_0>> &&>::call(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;

  v3 = *a2;
  if (*a2)
  {
    v4 = a1[2];
    if (v4)
    {
      if (*(_QWORD *)(v4 + 8))
      {
        v5 = *(_QWORD *)(v3 + 24);
        v6 = (uint64_t *)(a1[1] + 320);
        *a2 = 0;
        v7 = *v6;
        if (*v6
          || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, 0), (v7 = *v6) != 0))
        {
          v8 = *(_DWORD *)(v7 - 8);
        }
        else
        {
          v8 = 0;
        }
        v9 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        v13 = (uint64_t *)(v7 + 16 * v12);
        v14 = *v13;
        if (*v13)
        {
          v15 = 0;
          v16 = 1;
          while (v14 != v5)
          {
            if (v14 == -1)
              v15 = v13;
            v12 = (v12 + v16) & v8;
            v13 = (uint64_t *)(v7 + 16 * v12);
            v14 = *v13;
            ++v16;
            if (!*v13)
            {
              if (v15)
              {
                *v15 = 0;
                v15[1] = 0;
                --*(_DWORD *)(*v6 - 16);
                v13 = v15;
              }
              goto LABEL_15;
            }
          }
          v21 = v13[1];
          v13[1] = v3;
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          goto LABEL_29;
        }
LABEL_15:
        v17 = v13[1];
        *v13 = v5;
        v13[1] = v3;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        v18 = *v6;
        if (*v6)
          v19 = *(_DWORD *)(v18 - 12) + 1;
        else
          v19 = 1;
        *(_DWORD *)(v18 - 12) = v19;
        v22 = *v6;
        if (*v6)
          v23 = *(_DWORD *)(v22 - 12);
        else
          v23 = 0;
        v24 = (*(_DWORD *)(v22 - 16) + v23);
        v25 = *(unsigned int *)(v22 - 4);
        if (v25 > 0x400)
        {
          if (v25 > 2 * v24)
            goto LABEL_29;
        }
        else if (3 * v25 > 4 * v24)
        {
LABEL_29:
          v20 = a1[3];
          a1[3] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v5, 1);
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v13);
        goto LABEL_29;
      }
    }
  }
  v20 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  void *v28;
  uint64_t *result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (uint64_t *)(v5 + 24 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = (uint64_t *)(v14 + 24 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (*v22);
          v23 = v14 + 24 * v21;
          WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23 + 8, v9);
          *v22 = *v12;
          v24 = v5 + 24 * v10;
          *(_QWORD *)(v23 + 8) = 0;
          *(_QWORD *)(v23 + 16) = 0;
          v25 = *(_QWORD *)(v24 + 8);
          v24 += 8;
          *(_QWORD *)v24 = 0;
          *(_QWORD *)(v23 + 8) = v25;
          v26 = *(_DWORD *)(v24 + 8);
          *(_DWORD *)(v24 + 8) = 0;
          *(_DWORD *)(v23 + 16) = v26;
          v27 = *(_DWORD *)(v24 + 12);
          *(_DWORD *)(v24 + 12) = 0;
          *(_DWORD *)(v23 + 20) = v27;
          WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v24, v28);
          if (v12 == a3)
            v11 = v22;
        }
        else
        {
          WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 24 * v10 + 8, v9);
        }
      }
      ++v10;
    }
    while (v10 != v6);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int *v10;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 8 * v5;
        v9 = (unsigned int **)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          result = *v9;
          *v9 = 0;
          if (result)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = v15 + 16 * v22;
          std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100]((WTF::StringImpl ****)(v24 + 8), 0);
          *(_QWORD *)v24 = *v13;
          v25 = v6 + 16 * v11;
          v26 = *(_QWORD *)(v25 + 8);
          v25 += 8;
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v24 + 8) = v26;
          std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100]((WTF::StringImpl ****)v25, 0);
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100]((WTF::StringImpl ****)(v6 + 16 * v11 + 8), 0);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl ****WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl ****result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)a2 = -1;
  result = std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>::reset[abi:sn180100]((WTF::StringImpl ****)(a2 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF::StringImpl ****)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::ContentExtensions::ContentExtensionsBackend>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::UserContentControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

void sub_1970AF7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

void sub_1970AF9A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1970AFB80(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1970AFD24(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970AFFD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,WTF::StringImpl **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl **a31)
{
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a22)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a22, a2);
  if (a31)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a31, a2);
  _Unwind_Resume(exception_object);
}

void sub_1970B016C(_Unwind_Exception *a1)
{
  unsigned int *v1;

  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1970B0438(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970B060C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf)
{
  uint64_t v34;
  uint64_t v36;
  CFTypeRef v37;

  v36 = *(_QWORD *)(v34 - 56);
  *(_QWORD *)(v34 - 56) = 0;
  if (v36)
    CFRelease(*(CFTypeRef *)(v36 + 8));
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v37 = cf;
  cf = 0;
  if (v37)
    CFRelease(v37);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a10);
  _Unwind_Resume(a1);
}

void sub_1970B07C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    CFRelease(*(CFTypeRef *)(a14 + 8));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a12)
    CFRelease(*(CFTypeRef *)(a12 + 8));
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1970B08D4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970B097C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B0B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17)
{
  const void *v17;
  uint64_t v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  _Block_release(v17);
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, v20);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v20);
    else
      *(_DWORD *)a11 -= 2;
  }
  v21 = *(WTF::StringImpl **)(v18 - 40);
  *(_QWORD *)(v18 - 40) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, v20);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970B0E28(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  const void *v15;
  const void *v16;
  const void *v17;

  v17 = v16;
  if (v17)
    CFRelease(v17);
  WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  if (v15)
    CFRelease(v15);
  _Unwind_Resume(a1);
}

void sub_1970B0F58(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  const void *v15;
  const void *v16;

  if (v16)
    CFRelease(v16);
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  if (v15)
    CFRelease(v15);
  _Unwind_Resume(a1);
}

void sub_1970B11AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v9;
  void *v11;

  CFRelease(v9);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

NSInteger WebCore::SecurityOriginData::protocol(WebCore::SecurityOriginData *this)
{
  uint64_t v1;
  WKSecurityOrigin *v3;
  SEL v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WKSecurityOrigin *)std::__throw_bad_variant_access[abi:sn180100]();
    return -[WKSecurityOrigin port](v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, this);
  }
}

uint64_t WebCore::SecurityOriginData::port(WebCore::SecurityOriginData *this)
{
  uint64_t v1;
  WKSecurityOrigin *v3;
  SEL v4;
  id v5;
  char v6;
  char *v7;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WKSecurityOrigin *)std::__throw_bad_variant_access[abi:sn180100]();
    return -[WKSecurityOrigin isSameSiteAsOrigin:](v3, v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(char **, WebCore::SecurityOriginData *))off_1E34BCC28[v1])(&v7, this);
  }
}

void sub_1970B1538(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, WTF *a10)
{
  if (a9)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a9, a2);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a10, a2);
  _Unwind_Resume(exception_object);
}

void sub_1970B1614(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v12 = *(_QWORD *)(v10 - 32);
  *(_QWORD *)(v10 - 32) = 0;
  if (v12)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v12, a2);
  v13 = *(_QWORD *)(v10 - 24);
  *(_QWORD *)(v10 - 24) = 0;
  if (v13)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v13, a2);
  _Unwind_Resume(exception_object);
}

void sub_1970B1A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  if (v11)
  {
    CFRelease(v11);
    if (!v10)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else if (!v10)
  {
    goto LABEL_4;
  }
  CFRelease(v10);
  goto LABEL_4;
}

uint64_t getExceptionTypeFromMainRunLoop(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  unsigned int v5;

  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v2 = &off_1E34BCC48;
  v2[1] = v1;
  v2[2] = &v5;
  v4 = v2;
  WTF::callOnMainRunLoopAndWait();
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  return v5;
}

void sub_1970B1B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t raiseExceptionIfNecessary(uint64_t result)
{
  if (result <= 5)
    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], off_1E34BDB30[(int)result]);
  return result;
}

void sub_1970B1C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1970B1D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1970B1DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1970B1E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1970B1F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1970B21DC(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B2340(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1970B2420(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B24B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B258C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B2624(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B26B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B283C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1970B2944(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B2C88(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20)
{
  void *v21;
  void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  WebCore::UserScript::~UserScript((WebCore::UserScript *)&a20, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v22);
  v24 = a14;
  a14 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = a19;
  a19 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970B2E74(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void hardwareKeyboardAvailabilityChangedCallback(__CFNotificationCenter *a1, WebKit::WebPageProxy **cf, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  if (cf)
  {
    CFRetain(cf);
    WebKit::WebPageProxy::hardwareKeyboardAvailabilityChanged(cf[53]);
    CFRelease(cf);
  }
}

void sub_1970B2ED4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1970B34F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a12)
    CFRelease(*(CFTypeRef *)(a12 + 8));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970B37F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  uint64_t v11;
  WTF::StringImpl *v13;

  CFRelease(*(CFTypeRef *)(v11 + 8));
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v13);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v13);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970B397C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf)
{
  const void *v34;
  CFTypeRef v36;

  _Block_release(v34);
  v36 = cf;
  cf = 0;
  if (v36)
    CFRelease(v36);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a10);
  _Unwind_Resume(a1);
}

void sub_1970B3C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,CFTypeRef cf)
{
  const void *v21;

  if (v21)
    CFRelease(v21);
  _Unwind_Resume(exception_object);
}

void sub_1970B3D78(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1970B3DF4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B3F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(a1);
}

void sub_1970B40A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(a1);
}

void sub_1970B41A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(a1);
}

void sub_1970B42A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(a1);
}

void sub_1970B461C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  do
  {
    v12 = __ldaxr(v10);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v10));
  if (!v13)
  {
    atomic_store(1u, v10);
    a10 = v10;
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&a10);
  }
  do
  {
    v14 = __ldaxr(v10);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v10));
  if (!v15)
  {
    atomic_store(1u, v10);
    a10 = v10;
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B47D4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970B4930(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970B4A1C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970B4BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;

  _Block_release(v9);
  _Unwind_Resume(a1);
}

void sub_1970B4D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;

  _Block_release(v9);
  _Unwind_Resume(a1);
}

void sub_1970B51AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock)
{
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  uint64_t v17;

  CFRelease(*(CFTypeRef *)(v17 + 8));
  _Block_release(v16);
  _Block_release(v15);
  CFRelease(v13);
  _Block_release(0);
  CFRelease(v13);
  _Block_release(v14);
  _Unwind_Resume(a1);
}

void sub_1970B55C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1970B57A8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  WTF::StringImpl *v15;

  v15 = a14;
  a14 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(a1);
}

void sub_1970B5984(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25)
{
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v26 = a14;
  a14 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  v28 = a25;
  a25 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v27);
  _Unwind_Resume(a1);
}

void sub_1970B5B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;

  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = a11;
  a11 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1970B5D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;
  const void *v12;

  _Block_release(v12);
  CFRelease(v11);
  _Block_release(v10);
  _Unwind_Resume(a1);
}

void sub_1970B5E64(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  v2 = v1;
  _Block_release(v2);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970B60F8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a9)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, a2);
  _Unwind_Resume(exception_object);
}

void sub_1970B6324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1970B6414(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970B666C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B6818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,CFTypeRef a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef cf;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v68;
  uint64_t v69;
  CFTypeRef v70;
  CFTypeRef v71;

  CFRelease(*(CFTypeRef *)(v65 + 8));
  v69 = *(_QWORD *)(v66 - 72);
  *(_QWORD *)(v66 - 72) = 0;
  if (v69)
    CFRelease(*(CFTypeRef *)(v69 + 8));
  v70 = a39;
  a39 = 0;
  if (v70)
    CFRelease(v70);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a9, v68);
  v71 = cf;
  cf = 0;
  if (v71)
    CFRelease(v71);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a41);
  _Unwind_Resume(a1);
}

void sub_1970B6A00(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970B6C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a12)
    CFRelease(*(CFTypeRef *)(a12 + 8));
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970B6D94(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B7128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970B7360(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void sub_1970B7640(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,char a27)
{
  uint64_t v27;

  WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  if (*(_BYTE *)(v27 - 160))
    MEMORY[0x19AEAEECC](v27 - 224);
  _Unwind_Resume(a1);
}

void sub_1970B7818(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a19 && a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a31)
    MEMORY[0x19AEAEECC](&a23);
  _Unwind_Resume(exception_object);
}

void sub_1970B7A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a33)
    MEMORY[0x19AEAEECC](&a25);
  _Unwind_Resume(exception_object);
}

void sub_1970B7C7C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970B8484(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl **a14)
{
  if (a14)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a14, a2);
  _Unwind_Resume(exception_object);
}

void sub_1970B86EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c66_ZTSKZ52__WKWebView_WKPrivate___didEnableBrowserExtensions__E4__40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

void sub_1970B88F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl **a20)
{
  if (a20)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a20, a2);
  _Unwind_Resume(exception_object);
}

void sub_1970B89E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1970B8AC8(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970B8B7C(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970B8D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  WTF::StringImpl *v13;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v13);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v13);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970B92B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id location, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;
  const void *v31;
  void *v33;

  _Block_release(v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  objc_destroyWeak(&location);
  WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a28, v33);
  _Unwind_Resume(a1);
}

void sub_1970B9720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30)
{
  const void *v30;
  void *v32;
  void *v33;

  _Block_release(v30);
  WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v32);
  WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, v33);
  _Unwind_Resume(a1);
}

WTF::StringImpl *coreTextManipulationItemIdentifierFromString(NSString *a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  const char *v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  WTF::StringImpl *result;
  WTF::StringView *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  __int16 v25;
  char v26;
  WTF::StringImpl *v27;

  MEMORY[0x19AEABCC8](&v27);
  if (v27)
  {
    v2 = *((_QWORD *)v27 + 1);
    v3 = *((unsigned int *)v27 + 1) | ((unint64_t)((*((_DWORD *)v27 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v2 = 0;
    v3 = 0x100000000;
  }
  v23 = v2;
  v24 = v3;
  v25 = 45;
  v26 = 0;
  v19 = (WTF::StringView *)&v23;
  v20 = 0;
  v22 = (_DWORD)v3 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v19);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = v24;
  while (1)
  {
    v12 = v20;
    if (v20 == v11 && v22)
      break;
    v14 = WTF::StringView::substring((const char *)v19, v20, v21);
    if (v10)
    {
      if (v10 == 1)
      {
        v6 = (void *)WTF::parseInteger<unsigned long long>((uint64_t)v14, v12, 0xAu);
        v7 = v17;
      }
      else
      {
        if (v10 != 2)
          goto LABEL_23;
        v4 = (void *)WTF::parseInteger<unsigned long long>((uint64_t)v14, v12, 0xAu);
        v5 = v15;
      }
    }
    else
    {
      v8 = (void *)WTF::parseInteger<unsigned long long>((uint64_t)v14, v12, 0xAu);
      v9 = v16;
    }
    ++v10;
    WTF::StringView::SplitResult::Iterator::operator++();
  }
  if (v9 && v8 && v7 && v6 && v5 && v4)
  {
    *a1 = v6;
    a1[1] = v8;
    a1[2] = v4;
    *((_BYTE *)a1 + 24) = 1;
    goto LABEL_24;
  }
LABEL_23:
  *(_BYTE *)a1 = 0;
  *((_BYTE *)a1 + 24) = 0;
LABEL_24:
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1970B9980(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970B9E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,WTF::StringImpl *a36)
{
  void *v37;

  CFRelease(cf);
  WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a33, v37);
  _Unwind_Resume(a1);
}

uint64_t makeFailureSetForAllTextManipulationItems(_QWORD *a1, void *a2)
{
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  const __CFString *v14;
  uint64_t v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(a2, "count"));
  *a1 = v4;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
  v6 = result;
  if (result)
  {
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(a2);
        v9 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8);
        v14 = CFSTR("item");
        v15 = v9;
        objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("WKTextManipulationItemErrorDomain"), 0, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1)));
        ++v8;
      }
      while (v6 != v8);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_1970BA0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  const void *v10;

  *a10 = 0;
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1970BA228(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970BA378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf)
{
  const void *v34;
  uint64_t v35;
  uint64_t v37;
  CFTypeRef v38;

  _Block_release(v34);
  if (*(_BYTE *)(v35 - 48))
  {
    v37 = *(unsigned int *)(v35 - 56);
    if ((_DWORD)v37 != -1)
      ((void (*)(uint64_t *, uint64_t))off_1E34BCD80[v37])(&a9, v35 - 80);
  }
  v38 = cf;
  cf = 0;
  if (v38)
    CFRelease(v38);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a10);
  _Unwind_Resume(a1);
}

void sub_1970BA550(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_1970BA5F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970BA9B8(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970BAAD0(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970BAD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18)
{
  const void *v18;
  WTF::StringImpl *v20;

  _Block_release(v18);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v20);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v20);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, v20);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, v20);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970BB1BC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  WTF::Vector<WTF::Ref<WebCore::SharedMemory,WTF::RawPtrTraits<WebCore::SharedMemory>,WTF::DefaultRefDerefTraits<WebCore::SharedMemory>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

unsigned int *convertAndAddHighlight(uint64_t a1, void *a2)
{
  unsigned int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;

  result = (unsigned int *)WebCore::SharedMemory::allocate((WebCore::SharedMemory *)objc_msgSend(a2, "length"));
  if (v13)
  {
    objc_msgSend(a2, "getBytes:length:", *(_QWORD *)(v13 + 16), objc_msgSend(a2, "length"));
    v5 = v13;
    v12 = (unsigned int *)v13;
    v13 = 0;
    v6 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v6 == *(_DWORD *)(a1 + 8))
    {
      v7 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v6 + 1, (unint64_t)&v12);
      v8 = *(unsigned int *)(a1 + 12);
      v9 = *(_QWORD *)a1;
      v10 = *v7;
      *v7 = 0;
      *(_QWORD *)(v9 + 8 * v8) = v10;
      v11 = v12;
      *(_DWORD *)(a1 + 12) = v8 + 1;
      v12 = 0;
      if (v11)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v11);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v5;
      *(_DWORD *)(a1 + 12) = v6 + 1;
    }
    result = (unsigned int *)v13;
    v13 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  return result;
}

void sub_1970BB2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, unsigned int *a10)
{
  if (a9)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(a9);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(a10);
  _Unwind_Resume(exception_object);
}

void sub_1970BB37C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebCore::SharedMemory,WTF::RawPtrTraits<WebCore::SharedMemory>,WTF::DefaultRefDerefTraits<WebCore::SharedMemory>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1970BB590(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1970BB6F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1970BB7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970BB9CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  uint64_t v15;
  WTF::StringImpl *v17;
  unsigned int *v18;
  const void *v19;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  v17 = *(WTF::StringImpl **)(v15 - 72);
  *(_QWORD *)(v15 - 72) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(unsigned int **)(v15 - 56);
  *(_QWORD *)(v15 - 56) = 0;
  if (v18)
    WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v18, a2);
  v19 = *(const void **)(v15 - 64);
  *(_QWORD *)(v15 - 64) = 0;
  if (v19)
    CFRelease(v19);
  _Unwind_Resume(exception_object);
}

void sub_1970BBCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  char v13;
  uint64_t v14;
  WTF::StringImpl *v16;

  CFRelease(*(CFTypeRef *)(v14 + 8));
  if ((v13 & 1) != 0)
  {
    if (a10)
      CFRelease(*(CFTypeRef *)(a10 + 8));
    if (cf)
      CFRelease(cf);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v16);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v16);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v16);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970BBF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  CFTypeRef v37;

  CFRelease(*(CFTypeRef *)(v33 + 8));
  v36 = *(_QWORD *)(v34 - 56);
  *(_QWORD *)(v34 - 56) = 0;
  if (v36)
    CFRelease(*(CFTypeRef *)(v36 + 8));
  v37 = cf;
  cf = 0;
  if (v37)
    CFRelease(v37);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1970BC150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *aBlock, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,CFTypeRef cf,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef a70;
  WTF::StringImpl *v70;
  const void **v71;
  void *v73;
  WTF::StringImpl *v74;
  CFTypeRef v75;
  WTF::StringImpl *v76;
  CFTypeRef v77;

  _Block_release(v71[1]);
  WTF::fastFree((WTF *)v71, v73);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v74);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Block_release(aBlock);
  v75 = cf;
  cf = 0;
  if (v75)
    CFRelease(v75);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a16);
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v76);
    else
      *(_DWORD *)v70 -= 2;
  }
  v77 = a70;
  a70 = 0;
  if (v77)
    CFRelease(v77);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a46);
  _Unwind_Resume(a1);
}

void sub_1970BC344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WTF::StringImpl *v11;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Block_release(0);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v11);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970BC644(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970BC718(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970BC7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970BC89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970BC92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1970BCAB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970BCD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(a1);
}

void sub_1970BCE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(a1);
}

void sub_1970BCF1C(_Unwind_Exception *a1)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int *v3;

  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v1);
  _Unwind_Resume(a1);
}

void sub_1970BD000(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970BD104(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970BD200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  CFRelease(*(CFTypeRef *)(v14 + 8));
  v18 = *(_QWORD *)(v15 - 24);
  *(_QWORD *)(v15 - 24) = 0;
  if (v18)
    CFRelease(*(CFTypeRef *)(v18 + 8));
  v19 = a14;
  a14 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v17);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(a1);
}

void sub_1970BD334(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  WTF::StringImpl *v16;

  v16 = a15;
  a15 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

void sub_1970BD4C8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25)
{
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v26 = a14;
  a14 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  v28 = a25;
  a25 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v27);
  _Unwind_Resume(a1);
}

void sub_1970BD6EC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25)
{
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v26 = a14;
  a14 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  v28 = a25;
  a25 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, v27);
  _Unwind_Resume(a1);
}

void sub_1970BD8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  CFRelease(*(CFTypeRef *)(v14 + 8));
  v18 = *(_QWORD *)(v15 - 56);
  *(_QWORD *)(v15 - 56) = 0;
  if (v18)
    CFRelease(*(CFTypeRef *)(v18 + 8));
  v19 = a14;
  a14 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v17);
  _Unwind_Resume(a1);
}

void sub_1970BDA90(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970BDC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  const void *v13;
  WTF::StringImpl *v15;

  _Block_release(v13);
  CFRelease(*(CFTypeRef *)(v12 + 8));
  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v15);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1970BDF88(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970BE314(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970BE4EC(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970BEB3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_1970BEDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, char a13)
{
  WTF::StringImpl *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v14);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v14);
    else
      *(_DWORD *)a12 -= 2;
  }
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, v14);
  _Unwind_Resume(a1);
}

void sub_1970BF2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;
  WTF::StringImpl *v32;

  v31 = a30;
  a30 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  _Block_release(0);
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, v32);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v32);
    else
      *(_DWORD *)a14 -= 2;
  }
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a28, v32);
  _Unwind_Resume(a1);
}

void sub_1970BF4F4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970BF644(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970BF7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

void sub_1970BF8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1970BF9D8(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970BFAA4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970BFB90(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970BFC7C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970C01A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970C0330(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970C0608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970C0774(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CFTypeRef cf)
{
  CFTypeRef v39;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v39 = cf;
  cf = 0;
  if (v39)
    CFRelease(v39);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a14);
  _Unwind_Resume(a1);
}

void sub_1970C0930(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1970C0A24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1970C0B98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

void sub_1970C0FC0(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970C1390(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970C1550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

void sub_1970C1748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;

  _Block_release(v9);
  _Unwind_Resume(a1);
}

void sub_1970C18E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;

  _Block_release(v9);
  _Unwind_Resume(a1);
}

void sub_1970C19E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970C1AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  const void *v11;
  void *v13;

  _Block_release(v11);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v13);
  _Unwind_Resume(a1);
}

uint64_t elementsFromWKElements(uint64_t a1, void *a2)
{
  unint64_t v3;
  unsigned int v4;
  void *v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = objc_msgSend(a2, "count");
  v4 = v3;
  if (v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
LABEL_29:
      JUMPOUT(0x1970C1CB8);
    }
    v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(a1 + 8) = v4;
    *(_QWORD *)a1 = v5;
  }
  else
  {
    v5 = 0;
  }
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  v7 = result;
  if (result)
  {
    v8 = 0;
    v9 = *(_QWORD *)v19;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v19 != v9)
          objc_enumerationMutation(a2);
        v11 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v10);
        if (v8 == v4)
        {
          v12 = ((unint64_t)v4 >> 2) + v4;
          if (v12 >= 0x10)
            v13 = v12 + 1;
          else
            v13 = 16;
          if (v13 <= (unint64_t)v4 + 1)
            v14 = v4 + 1;
          else
            v14 = v13;
          if (v14 >> 29)
          {
            __break(0xC471u);
            goto LABEL_29;
          }
          v15 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
          *(_DWORD *)(a1 + 8) = v14;
          *(_QWORD *)a1 = v15;
          memcpy(v15, v5, 8 * v4);
          if (v5)
          {
            if (v15 == v5)
            {
              LODWORD(v14) = 0;
              *(_QWORD *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree((WTF *)v5, v16);
            v4 = *(_DWORD *)(a1 + 12);
            v15 = *(void **)a1;
          }
          CFRetain(*(CFTypeRef *)(v11 + 24));
          v8 = v4;
          v5 = v15;
          v4 = v14;
        }
        else
        {
          CFRetain(*(CFTypeRef *)(v11 + 24));
        }
        *((_QWORD *)v5 + v8++) = v11 + 16;
        *(_DWORD *)(a1 + 12) = v8;
        ++v10;
      }
      while (v7 != v10);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      v7 = result;
    }
    while (result);
  }
  return result;
}

void sub_1970C1CC4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1970C1D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  _Block_release(0);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v4);
  _Unwind_Resume(a1);
}

void sub_1970C1E40(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970C1EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970C1FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_1970C206C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1970C215C(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970C2354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock)
{
  const void **v13;
  id *v14;
  const void **v15;
  void *v17;

  v15 = v13;
  _Block_release(v15[1]);
  WTF::fastFree((WTF *)v15, v17);
  objc_destroyWeak(v14);
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::protocol(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::protocol(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::protocol(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::protocol(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return MEMORY[0x1E0CBF738];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::port(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::port(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::port(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::port(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<getExceptionTypeFromMainRunLoop(WTF::Function<WebKit::WebURLSchemeTask::ExceptionType ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34BCC48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<getExceptionTypeFromMainRunLoop(WTF::Function<WebKit::WebURLSchemeTask::ExceptionType ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BCC48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<getExceptionTypeFromMainRunLoop(WTF::Function<WebKit::WebURLSchemeTask::ExceptionType ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  **(_DWORD **)(a1 + 16) = result;
  return result;
}

void ScriptMessageHandlerDelegate::~ScriptMessageHandlerDelegate(ScriptMessageHandlerDelegate *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(v4);
}

void ScriptMessageHandlerDelegate::~ScriptMessageHandlerDelegate(ScriptMessageHandlerDelegate *this, void *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;

  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(v5);
  WTF::fastFree(this, a2);
}

void ScriptMessageHandlerDelegate::didPostMessageWithAsyncReply(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, API::SerializedScriptValue *a5, uint64_t *a6)
{
  id WeakRetained;
  const void *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const OpaqueJSValue **v23;
  id v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];
  _QWORD v28[6];
  uint64_t v29[2];
  CFTypeRef *v30;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a2 + 32) + 1984));
  if (WeakRetained)
  {
    v13 = WeakRetained;
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x4012000000;
    v28[3] = __Block_byref_object_copy__5;
    v28[4] = __Block_byref_object_dispose__5;
    v28[5] = 0;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E34BCCD0;
    v15 = *a6;
    *a6 = 0;
    v29[0] = v15;
    v29[1] = (uint64_t)v14;
    v16 = (void *)MEMORY[0x19AEB9C30]();
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v30 = (CFTypeRef *)a2;
    v17 = API::Object::newObject(0x140uLL, 60);
    v18 = API::FrameInfo::FrameInfo(v17, a3, (uint64_t *)&v30);
    v19 = *(const void **)(v18 + 8);
    if (v19)
    {
      CFRetain(*(CFTypeRef *)(v18 + 8));
      v20 = *(const void **)(v17 + 8);
    }
    else
    {
      v20 = 0;
    }
    CFRelease(v20);
    if (v30)
      CFRelease(v30[1]);
    v24 = -[WKScriptMessage _initWithBody:webView:frameInfo:name:world:]([WKScriptMessage alloc], "_initWithBody:webView:frameInfo:name:world:", API::SerializedScriptValue::deserialize(a5, 0, v23), v13, v19, a1[3], *(_QWORD *)(a4 + 8));
    v26 = a1[1];
    v25 = (void *)a1[2];
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = ___ZN28ScriptMessageHandlerDelegate28didPostMessageWithAsyncReplyERN6WebKit12WebPageProxyEONS0_13FrameInfoDataERN3API12ContentWorldERN7WebCore21SerializedScriptValueEON3WTF8FunctionIFvPNS5_21SerializedScriptValueERKNSB_6StringEEEE_block_invoke;
    v27[3] = &unk_1E34BCCA0;
    v27[4] = v28;
    objc_msgSend(v25, "userContentController:didReceiveScriptMessage:replyHandler:", v26, v24, v27);
    if (v24)
      CFRelease(v24);
    if (v19)
      CFRelease(v19);
    objc_autoreleasePoolPop(v16);
    _Block_object_dispose(v28, 8);
    WTF::CompletionHandlerWithFinalizer<void ()(API::SerializedScriptValue *,WTF::String const&)>::~CompletionHandlerWithFinalizer(v29);
    CFRelease(v13);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v30 = (CFTypeRef *)v28[0];
    (*(void (**)(uint64_t, _QWORD, CFTypeRef **))(*(_QWORD *)*a6 + 16))(*a6, 0, &v30);
    v22 = (WTF::StringImpl *)v30;
    v30 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
}

void sub_1970C2734(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  WTF::StringImpl *v16;

  v16 = *(WTF::StringImpl **)(v14 - 72);
  *(_QWORD *)(v14 - 72) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(result + 56) = v3;
  return result;
}

uint64_t *__Block_byref_object_dispose__5(uint64_t a1)
{
  return WTF::CompletionHandlerWithFinalizer<void ()(API::SerializedScriptValue *,WTF::String const&)>::~CompletionHandlerWithFinalizer((uint64_t *)(a1 + 48));
}

void ___ZN28ScriptMessageHandlerDelegate28didPostMessageWithAsyncReplyERN6WebKit12WebPageProxyEONS0_13FrameInfoDataERN3API12ContentWorldERN7WebCore21SerializedScriptValueEON3WTF8FunctionIFvPNS5_21SerializedScriptValueERKNSB_6StringEEEE_block_invoke(uint64_t a1, objc_object *this, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WebKit *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebKit *v16;
  WTF::StringImpl *v17;
  WebKit *v18;
  WTF::StringImpl *v19;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48))
  {
    if (a3)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("replyHandler passed to userContentController:didReceiveScriptMessage:replyHandler: should not be called twice"));
    if (a3)
    {
LABEL_3:
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      MEMORY[0x19AEABCC8](&v19, a3);
      v7 = *(_QWORD *)(v6 + 48);
      *(_QWORD *)(v6 + 48) = 0;
      (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, 0, &v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v9 = v19;
      v19 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      return;
    }
  }
  API::SerializedScriptValue::createFromNSObject((_BOOL8)this, this, &v18);
  v10 = v18;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v18)
  {
    v19 = 0;
    v12 = *(_QWORD *)(v11 + 48);
    *(_QWORD *)(v11 + 48) = 0;
    (*(void (**)(uint64_t, WebKit *, WTF::StringImpl **))(*(_QWORD *)v12 + 16))(v12, v10, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v14 = v19;
    v19 = 0;
    if (!v14)
      goto LABEL_15;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v17 = v19;
    v15 = *(_QWORD *)(v11 + 48);
    *(_QWORD *)(v11 + 48) = 0;
    (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, 0, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v14 = v17;
    v17 = 0;
    if (!v14)
      goto LABEL_15;
  }
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, v13);
  else
    *(_DWORD *)v14 -= 2;
LABEL_15:
  v16 = v18;
  v18 = 0;
  if (v16)
    CFRelease(*((CFTypeRef *)v16 + 1));
}

void sub_1970C29C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
    CFRelease(*(CFTypeRef *)(a11 + 8));
  _Unwind_Resume(a1);
}

uint64_t *WTF::CompletionHandlerWithFinalizer<void ()(API::SerializedScriptValue *,WTF::String const&)>::~CompletionHandlerWithFinalizer(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*a1)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1[1] + 16))(a1[1], a1);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1970C2AE8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  v1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<ScriptMessageHandlerDelegate::didPostMessageWithAsyncReply(WebKit::WebPageProxy &,WebKit::FrameInfoData &&,API::ContentWorld &,WebCore::SerializedScriptValue &,WTF::Function<void ()(WebKit::FrameInfoData &&::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(void (&)(WebKit::FrameInfoData &&::SerializedScriptValue *,WTF::String const&))#1},void,WTF::Function<void ()(WebKit::FrameInfoData &&::SerializedScriptValue *,WTF::String const&)> &>::call(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_QWORD, _QWORD, WTF::StringImpl **))(*(_QWORD *)*a2 + 16))(*a2, 0, &v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1970C2BA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebKit::NavigationState *std::unique_ptr<WebKit::NavigationState>::reset[abi:sn180100](WebKit::NavigationState **a1, WebKit::NavigationState *a2)
{
  WebKit::NavigationState *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NavigationState::~NavigationState(result);
    return (WebKit::NavigationState *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t *std::unique_ptr<WebKit::UIDelegate>::reset[abi:sn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  unsigned int **v4;
  void *v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    objc_destroyWeak((id *)(v2 + 16));
    objc_destroyWeak((id *)(v2 + 8));
    v4 = WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)v2, v3);
    return (uint64_t *)WTF::fastFree((WTF *)v4, v5);
  }
  return result;
}

id **std::unique_ptr<WebKit::IconLoadingDelegate>::reset[abi:sn180100](id **result, id *a2)
{
  id *v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    objc_destroyWeak(v2 + 1);
    return (id **)WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

id **std::unique_ptr<WebKit::ResourceLoadDelegate>::reset[abi:sn180100](id **result, id *a2)
{
  id *v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    objc_destroyWeak(v2 + 1);
    objc_destroyWeak(v2);
    return (id **)WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

WTF *std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(WTF *result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t)result;
  if (*((unsigned __int8 *)result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*((_BYTE *)result + 16))
    {
      v4 = *((unsigned int *)result + 3);
      if ((_DWORD)v4)
        WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)result, (WTF::StringImpl *)(*(_QWORD *)result + 8 * v4));
      return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v3, a2);
    }
  }
  else if (*((_BYTE *)result + 16))
  {
    result = (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, a2);
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *((_DWORD *)result + 2) = v5;
    LODWORD(v5) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *((_DWORD *)result + 3) = v5;
    *((_BYTE *)result + 16) = 1;
  }
  return result;
}

void ___ZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__ENK4__28clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;
  const void *v5;

  if (a2)
  {
    v3 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA638]), "initWithCGImage:scale:orientation:", a2, 0, *(double *)(a1 + 40));
    v4 = 0;
  }
  else
  {
    createNSError(WKErrorUnknown, 0, &v5);
    v3 = 0;
    v4 = v5;
  }
  kdebug_trace();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
}

void sub_1970C2E24(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

double __copy_helper_block_e8_32c96_ZTSKZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__ENK4__28clEvEUlP7CGImageE_(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 32) = _Block_copy(*(const void **)(a2 + 32));
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c96_ZTSKZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__ENK4__28clEvEUlP7CGImageE_(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v5;
  uint64_t v6;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3)
    return v2;
  if (v3 < 0xD20D21)
  {
    v5 = 312 * v3;
    v6 = WTF::fastMalloc((WTF *)(312 * v3));
    *(_DWORD *)(v2 + 8) = v5 / 0x138;
    *(_QWORD *)v2 = v6;
    WTF::VectorCopier<false,WebKit::BackForwardListItemState>::uninitializedCopy<WebKit::BackForwardListItemState>(*(WebKit::FrameState **)a2, (WebKit::FrameState *)(*(_QWORD *)a2 + 312 * *(unsigned int *)(a2 + 12)), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_1970C2F1C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

WebKit::FrameState *WTF::VectorCopier<false,WebKit::BackForwardListItemState>::uninitializedCopy<WebKit::BackForwardListItemState>(WebKit::FrameState *result, WebKit::FrameState *a2, uint64_t a3)
{
  WebKit::FrameState *v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      v6 = (_DWORD *)*((_QWORD *)v5 + 2);
      if (v6)
        *v6 += 2;
      *(_QWORD *)(a3 + 16) = v6;
      result = WebKit::FrameState::FrameState((WebKit::FrameState *)(a3 + 24), (WebKit::FrameState *)((char *)v5 + 24));
      *(_BYTE *)(a3 + 272) = *((_BYTE *)v5 + 272);
      v7 = (unsigned int *)*((_QWORD *)v5 + 35);
      if (v7)
      {
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
      }
      *(_QWORD *)(a3 + 280) = v7;
      *(_BYTE *)(a3 + 288) = *((_BYTE *)v5 + 288);
      *(_BYTE *)(a3 + 296) = *((_BYTE *)v5 + 296);
      v9 = (_DWORD *)*((_QWORD *)v5 + 38);
      if (v9)
        ++*v9;
      *(_QWORD *)(a3 + 304) = v9;
      a3 += 312;
      v5 = (WebKit::FrameState *)((char *)v5 + 312);
    }
    while (v5 != a2);
  }
  return result;
}

void sub_1970C2FFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  v4 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  WTF *v4;
  void *v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v4 = (WTF *)*(unsigned int *)(a2 + 12);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = (_DWORD)v4;
    if ((_DWORD)v4)
    {
      v5 = (void *)WTF::fastMalloc(v4);
      *(_DWORD *)(a1 + 8) = (_DWORD)v4;
      *(_QWORD *)a1 = v5;
      memcpy(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void sub_1970C309C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::construct_at[abi:sn180100]<WebKit::HTTPBody,WebKit::HTTPBody const&,WebKit::HTTPBody*>(_QWORD *result, _DWORD **a2)
{
  _QWORD *v2;
  _DWORD *v3;

  if (result)
  {
    v2 = result;
    v3 = *a2;
    if (*a2)
      *v3 += 2;
    *result = v3;
    WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(result + 1), (uint64_t)(a2 + 1));
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1970C3110(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x4924925)
  {
    v5 = 56 * v3;
    v6 = WTF::fastMalloc((WTF *)(56 * v3));
    *(_DWORD *)(v2 + 8) = v5 / 0x38;
    *(_QWORD *)v2 = v6;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7)
    {
      v8 = v6;
      v9 = *(_QWORD *)a2;
      v10 = 56 * v7;
      do
      {
        *(_BYTE *)v8 = 0;
        *(_DWORD *)(v8 + 48) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1> const&>(v8, v9);
        v8 += 56;
        v9 += 56;
        v10 -= 56;
      }
      while (v10);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_1970C3210(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  WTF *v17;

  v16 = *(unsigned int *)(v14 + 48);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E34BCD18[v16])(&a13, v14);
  *(_DWORD *)(v14 + 48) = -1;
  v17 = *(WTF **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)v13 = 0;
    *(_DWORD *)(v13 + 8) = 0;
    WTF::fastFree(v17, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 48);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34BCD18[v4])(&v7, result);
  *(_DWORD *)(v3 + 48) = -1;
  v5 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34BCD30[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF *v3;
  void *v6;

  v3 = (WTF *)*(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = (_DWORD)v3;
  if ((_DWORD)v3)
  {
    v6 = (void *)WTF::fastMalloc(v3);
    *(_DWORD *)(a2 + 8) = (_DWORD)v3;
    *(_QWORD *)a2 = v6;
    memcpy(v6, *(const void **)a3, *(unsigned int *)(a3 + 12));
  }
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  __n128 result;
  __int128 v5;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 8);
  v5 = *(_OWORD *)(a3 + 24);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a3 + 40);
  *(_OWORD *)(a2 + 24) = v5;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

const char *WTF::StringView::substring(const char *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *((unsigned int *)this + 2);
  if (v3 <= a2)
    return "";
  if (v3 - a2 <= a3)
  {
    a3 = v3 - a2;
    if (!a2)
      return *(const char **)this;
  }
  v4 = v3 - a2;
  if (this[12])
  {
    if (v4 >= a3)
      return (const char *)(*(_QWORD *)this + a2);
  }
  else if (v4 >= a3)
  {
    return (const char *)(*(_QWORD *)this + 2 * a2);
  }
  __break(1u);
  return this;
}

void sub_1970C3700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;
  const void *v11;
  const void *v12;

  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_1970C3874(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    v5 = *(_QWORD *)a1 + 32;
    do
    {
      v5 = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2)
         + 48;
      v4 -= 48;
    }
    while (v4);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v9;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    v6 = (_DWORD *)((char *)v4 + 24);
    do
    {
      v7 = *v6;
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _DWORD *))off_1E34BCD68[v7])(&v9, v6 - 4);
      *v6 = -1;
      v6 += 8;
      v5 -= 32;
    }
    while (v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_1970C3AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

const char *WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(uint64_t *a1, WTF::ASCIILiteralHash *this)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  const char *result;
  const char *v7;
  int v8;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::ASCIILiteralHash::hash(this, this) & v4;
  result = *(const char **)(v2 + 24 * v5);
  if (result)
  {
    v7 = *(const char **)this;
    v8 = 1;
    while (result == (const char *)-1 || !v7 || strcmp(result, v7))
    {
      v5 = ((_DWORD)v5 + v8) & v4;
      result = *(const char **)(v2 + 24 * v5);
      ++v8;
      if (!result)
        return result;
    }
    return *(const char **)(v2 + 24 * v5 + 16);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1970C3E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef a65;
  CFTypeRef v66;
  WTF::StringImpl *v67;
  CFTypeRef v68;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Block_release(0);
  v66 = cf;
  cf = 0;
  if (v66)
    CFRelease(v66);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a10);
  v68 = a65;
  a65 = 0;
  if (v68)
    CFRelease(v68);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a35, v67);
  _Unwind_Resume(a1);
}

void sub_1970C4280(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ResourceErrorBase::ResourceErrorBase(uint64_t a1, char a2)
{
  *(_QWORD *)a1 = 0;
  WTF::URL::URL((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 60) = a2;
  *(_BYTE *)(a1 + 61) = 0;
  return a1;
}

void sub_1970C4348(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970C44E0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970C46CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef a65;
  CFTypeRef v66;
  WTF::StringImpl *v67;
  CFTypeRef v68;

  v66 = cf;
  cf = 0;
  if (v66)
    CFRelease(v66);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a10);
  v68 = a65;
  a65 = 0;
  if (v68)
    CFRelease(v68);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a35, v67);
  _Unwind_Resume(a1);
}

WTF *WTF::RefCounted<WebKit::SafeBrowsingWarning>::deref(WTF *this, WTF::StringImpl *a2)
{
  WTF *v2;
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = (const void *)*((_QWORD *)this + 9);
    *((_QWORD *)v2 + 9) = 0;
    if (v3)
      CFRelease(v3);
    v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 7);
    *((_QWORD *)v2 + 7) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 6);
    *((_QWORD *)v2 + 6) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void({block_pointer})(void),void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void sub_1970C49BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ61__WKWebView_closeAllMediaPresentationsWithCompletionHandler__EN4__14clIN6WebKit29VideoPresentationModelContextEN7WebCore31VideoPresentationInterfaceAVKitEEEDaRT_RT0_EUlvE_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BD010;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ61__WKWebView_closeAllMediaPresentationsWithCompletionHandler__EN4__14clIN6WebKit29VideoPresentationModelContextEN7WebCore31VideoPresentationInterfaceAVKitEEEDaRT_RT0_EUlvE_vJEED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34BD010;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(void)>,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34BDAC8;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(void)>,void>::~CallableWrapper(const void **a1)
{
  void *v2;

  *a1 = off_1E34BDAC8;
  _Block_release(a1[1]);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(void)>,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void sub_1970C4F70(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970C51A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *aBlock)
{
  const void *v28;
  const void *v29;

  _Block_release(v29);
  CFRelease(v28);
  _Unwind_Resume(a1);
}

void ___ZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__29clEv_block_invoke(uint64_t a1)
{
  const void *v1;
  const void *v2;
  CFTypeRef v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD block[4];
  CFTypeRef cf;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void *aBlock;

  block[1] = 3321888768;
  block[2] = ___ZZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__29clEvENUlvE_clEv_block_invoke;
  block[3] = &__block_descriptor_104_e8_32c99_ZTSKZZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__29clEvENUlvE_clEvEUlvE__e5_v8__0l;
  v1 = *(const void **)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 88);
  block[0] = MEMORY[0x1E0C809B0];
  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v4 = *(_OWORD *)(a1 + 40);
  v5 = *(_OWORD *)(a1 + 56);
  v6 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 96) = 0;
  cf = v2;
  if (v2)
    CFRetain(v2);
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  aBlock = _Block_copy(v1);
  dispatch_async(MEMORY[0x1E0C80D38], block);
  _Block_release(v1);
  if (v2)
    CFRelease(v2);
  _Block_release(aBlock);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_1970C530C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  _Block_release(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c87_ZTSKZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__29clEvEUlvE_(uint64_t a1, uint64_t a2)
{
  const void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void *result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  result = _Block_copy(*(const void **)(a2 + 96));
  *(_QWORD *)(a1 + 96) = result;
  return result;
}

void sub_1970C53A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c87_ZTSKZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__29clEvEUlvE_(uint64_t a1)
{
  const void *v2;

  _Block_release(*(const void **)(a1 + 96));
  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void ___ZZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__29clEvENUlvE_clEv_block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[4];
  void *aBlock;
  uint64_t v13;

  v2 = *(void **)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = *(double *)(a1 + 48);
  v5 = *(double *)(a1 + 56);
  v6 = *(double *)(a1 + 64);
  v7 = *(double *)(a1 + 72);
  v8 = *(double *)(a1 + 80);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3321888768;
  v11[2] = ___ZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__ENK4__28clEv_block_invoke;
  v11[3] = &__block_descriptor_48_e8_32c96_ZTSKZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__ENK4__28clEvEUlP7CGImageE__e18_v16__0__CGImage__8l;
  v9 = _Block_copy(*(const void **)(a1 + 96));
  v10 = *(_QWORD *)(a1 + 88);
  aBlock = _Block_copy(v9);
  v13 = v10;
  objc_msgSend(v2, "_snapshotRectAfterScreenUpdates:rectInViewCoordinates:intoImageOfWidth:completionHandler:", v3 != 0, v11, v4, v5, v6, v7, v8);
  _Block_release(v9);
  _Block_release(aBlock);
}

void sub_1970C54D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock)
{
  const void *v13;

  _Block_release(aBlock);
  _Block_release(v13);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c99_ZTSKZZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__29clEvENUlvE_clEvEUlvE_(uint64_t a1, uint64_t a2)
{
  const void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void *result;

  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    CFRetain(v4);
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  result = _Block_copy(*(const void **)(a2 + 96));
  *(_QWORD *)(a1 + 96) = result;
  return result;
}

void sub_1970C5554(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c99_ZTSKZZZ61__WKWebView_takeSnapshotWithConfiguration_completionHandler__EN4__29clEvENUlvE_clEvEUlvE_(uint64_t a1)
{
  const void *v2;

  _Block_release(*(const void **)(a1 + 96));
  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1970C5670(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970C5838(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  const void *v3;

  v3 = v2;
  if (v3)
    CFRelease(v3);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZ56__WKWebView__showSafeBrowsingWarning_completionHandler__EN4__31clINS_7variantIJN6WebKit18ContinueUnsafeLoadENS8_3URLEEEEEEDaOT_EUlSE_E_JZZ56__WKWebView__showSafeBrowsingWarning_completionHandler__ENSB_ISG_EESH_SJ_EUlRKSF_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEEEEEDcSI_DpT0_(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZ56__WKWebView__showSafeBrowsingWarning_completionHandler__EN4__31clINS_7variantIJN6WebKit18ContinueUnsafeLoadENS8_3URLEEEEEEDaOT_EUlSE_E_JZZ56__WKWebView__showSafeBrowsingWarning_completionHandler__ENSB_ISG_EESH_SJ_EUlRKSF_E_EEEEEJRNS0_6__baseILNS0_6_TraitE1EJSE_SF_EEEEEEDcSI_DpT0_()
{
  return 1;
}

void sub_1970C5A80(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_1970C5BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1970C5DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 80 * v3;
    v5 = *(_QWORD *)a1 + 16;
    do
    {
      v5 = MEMORY[0x19AEAEECC](v5) + 80;
      v4 -= 80;
    }
    while (v4);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::WritingTools::Context,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
      JUMPOUT(0x1970C5FB8);
    }
    v3 = *(WTF **)a1;
    v4 = *(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12);
    v5 = 80 * a2;
    v6 = WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::WritingTools::Context>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::WritingTools::Context>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result != a2)
  {
    v4 = a3 + 16;
    v5 = result + 16;
    do
    {
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v5 - 16);
      WebCore::AttributedString::AttributedString();
      *(_OWORD *)(v4 + 40) = *(_OWORD *)(v5 + 40);
      result = MEMORY[0x19AEAEECC](v5);
      v4 += 80;
      v6 = v5 + 64;
      v5 += 80;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::WritingTools::TextSuggestion>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 48 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::WritingTools::TextSuggestion>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = v3[4];
      v3[4] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 6;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::WritingTools::TextSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1970C621CLL);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12));
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::WritingTools::TextSuggestion>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::WritingTools::TextSuggestion>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  __int128 v6;
  uint64_t v7;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *((_OWORD *)v5 + 1);
      *(_OWORD *)a3 = *(_OWORD *)v5;
      *(_OWORD *)(a3 + 16) = v6;
      v7 = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      *(_QWORD *)(a3 + 32) = v7;
      *(_BYTE *)(a3 + 40) = *((_BYTE *)v5 + 40);
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_1970C63B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t API::FrameTreeNode::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = API::Object::newObject(0x150uLL, 62);
  result = API::FrameTreeNode::FrameTreeNode(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1970C6430(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t API::FrameTreeNode::FrameTreeNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D9D60;
  *(_WORD *)(a1 + 16) = *(_WORD *)a2;
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 24, a2 + 8);
  v6 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a1 + 216) = v6;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 224, a2 + 208);
  v7 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 256) = v7;
  v8 = *(_OWORD *)(a2 + 248);
  v9 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 294) = *(_OWORD *)(a2 + 278);
  *(_OWORD *)(a1 + 264) = v8;
  *(_OWORD *)(a1 + 280) = v9;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  v10 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a1 + 312) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a2 + 304) = 0;
  *(_DWORD *)(a1 + 320) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a2 + 308) = 0;
  *(_DWORD *)(a1 + 324) = v10;
  CFRetain(*(CFTypeRef *)(a3 + 8));
  *(_QWORD *)(a1 + 328) = a3;
  return a1;
}

void sub_1970C6534(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  WebCore::ResourceRequestBase *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  const void *v21;

  WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16, a2);
  v19 = *(WTF::StringImpl **)(v14 + 256);
  *(_QWORD *)(v14 + 256) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(unsigned int *)(v14 + 248);
  if ((_DWORD)v20 != -1)
    ((void (*)(char *, uint64_t))off_1E34BCD80[v20])(&a13, v15);
  *(_DWORD *)(v14 + 248) = -1;
  v21 = *(const void **)(v14 + 216);
  *(_QWORD *)(v14 + 216) = 0;
  if (v21)
    CFRelease(v21);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v13);
  _Unwind_Resume(a1);
}

void sub_1970C6728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationControllerExclusionRule>(uint64_t a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;

  v3 = (_BYTE *)WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_BYTE *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
  *v4 = *v3;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v4 + 8), (uint64_t)(v3 + 8));
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextManipulationControllerExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1970C6974);
    }
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::TextManipulationControllerExclusionRule>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::TextManipulationControllerExclusionRule>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v11 = v3;
    v12 = v4;
    v6 = a3 + 8;
    v7 = result + 8;
    do
    {
      v8 = v7 - 8;
      *(_BYTE *)(v6 - 8) = *(_BYTE *)(v7 - 8);
      result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::TextManipulationControllerExclusionRule::ElementRule,WebCore::TextManipulationControllerExclusionRule::AttributeRule,WebCore::TextManipulationControllerExclusionRule::ClassRule>,(std::__variant_detail::_Trait)1>::__move_constructor(v6, v7);
      v9 = *(unsigned int *)(v7 + 16);
      if ((_DWORD)v9 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E34BCD68[v9])(&v10, v7);
      *(_DWORD *)(v7 + 16) = -1;
      v6 += 32;
      v7 += 32;
    }
    while (v8 + 32 != a2);
  }
  return result;
}

void sub_1970C6BD0(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970C71B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  const void *v14;

  if (v14)
    CFRelease(v14);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x2AAAAAB)
  {
    v5 = 96 * v3;
    v6 = WTF::fastMalloc((WTF *)(96 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(_QWORD *)v2 = v6;
    WTF::VectorCopier<false,WebCore::TextManipulationToken>::uninitializedCopy<WebCore::TextManipulationToken>(*(_QWORD *)a2, *(_QWORD *)a2 + 96 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_1970C7364(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::TextManipulationToken>::uninitializedCopy<WebCore::TextManipulationToken>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _DWORD *v7;

  if (result != a2)
  {
    v4 = result + 16;
    v5 = (_BYTE *)(a3 + 80);
    do
    {
      v6 = v4 - 16;
      *((_QWORD *)v5 - 10) = *(_QWORD *)(v4 - 16);
      v7 = *(_DWORD **)(v4 - 8);
      if (v7)
        *v7 += 2;
      *((_QWORD *)v5 - 9) = v7;
      *(v5 - 64) = 0;
      result = (uint64_t)(v5 - 64);
      *v5 = 0;
      if (*(_BYTE *)(v4 + 64))
      {
        result = std::construct_at[abi:sn180100]<WebCore::TextManipulationTokenInfo,WebCore::TextManipulationTokenInfo const&,WebCore::TextManipulationTokenInfo*>(result, v4);
        *v5 = 1;
      }
      v5[8] = *(_BYTE *)(v4 + 72);
      v4 += 96;
      v5 += 96;
    }
    while (v6 + 96 != a2);
  }
  return result;
}

void sub_1970C7424(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  std::__optional_destruct_base<WebCore::TextManipulationTokenInfo,false>::~__optional_destruct_base[abi:sn180100](v2 - 64, a2);
  v5 = *(WTF::StringImpl **)(v2 - 72);
  *(_QWORD *)(v2 - 72) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::TextManipulationTokenInfo,WebCore::TextManipulationTokenInfo const&,WebCore::TextManipulationTokenInfo*>(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  __int128 v5;

  if (result)
  {
    v2 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v2 += 2;
    *(_QWORD *)result = v2;
    v3 = *(_DWORD **)(a2 + 8);
    if (v3)
      *v3 += 2;
    *(_QWORD *)(result + 8) = v3;
    v4 = *(_DWORD **)(a2 + 16);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(result + 16) = v4;
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(result + 24) = v5;
    *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextManipulationItem>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v3 = WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v6 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v4 + 32) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 40);
  *(_DWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v4 + 40) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 44);
  *(_DWORD *)(v3 + 44) = 0;
  *(_DWORD *)(v4 + 44) = v6;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::TextManipulationItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1970C7718);
    }
    v3 = *(WTF **)a1;
    v4 = (void *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12));
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::TextManipulationItem>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebCore::TextManipulationItem>::move(uint64_t result, void *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  if ((void *)result != a2)
  {
    result += 32;
    do
    {
      v5 = *(_OWORD *)(result - 16);
      *(_OWORD *)a3 = *(_OWORD *)(result - 32);
      *(_OWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v6 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)(a3 + 32) = v6;
      LODWORD(v6) = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = 0;
      *(_DWORD *)(a3 + 40) = v6;
      LODWORD(v6) = *(_DWORD *)(result + 12);
      *(_DWORD *)(result + 12) = 0;
      *(_DWORD *)(a3 + 44) = v6;
      v7 = WTF::Vector<WebCore::TextManipulationToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
      v8 = (void *)(v7 + 16);
      result = v7 + 48;
      a3 += 48;
    }
    while (v8 != a2);
  }
  return result;
}

void sub_1970C79B8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1970C7A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::SharedMemory,WTF::RawPtrTraits<WebCore::SharedMemory>,WTF::DefaultRefDerefTraits<WebCore::SharedMemory>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  uint64_t v5;
  unsigned int *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(unsigned int ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1970C7C20(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<-[WKWebView(WKPrivate) _loadAndDecodeImage:constrainedToSize:maximumBytesFromNetwork:completionHandler:]::$_38::operator()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)::{lambda(WebCore::ResourceError&&)#1},-[WKWebView(WKPrivate) _loadAndDecodeImage:constrainedToSize:maximumBytesFromNetwork:completionHandler:]::$_38::operator()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &)::{lambda(WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>&&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&>(uint64_t **a1, WebCore::ResourceError *this)
{
  uint64_t v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  CFTypeRef v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  CFTypeRef cf;

  v2 = **a1;
  if (*((_BYTE *)this + 60))
  {
    WebCore::ResourceError::nsError(this);
    return (WTF::StringImpl *)(*(uint64_t (**)(void))(*(_QWORD *)v2 + 16))();
  }
  else
  {
    WebCore::createInternalError();
    WebCore::ResourceError::nsError((WebCore::ResourceError *)&v8);
    (*(void (**)(void))(*(_QWORD *)v2 + 16))();
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
    v6 = v10;
    v10 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1970C7E5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<-[WKWebView(WKPrivate) _loadAndDecodeImage:constrainedToSize:maximumBytesFromNetwork:completionHandler:]::$_38::operator()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&)::{lambda(WebCore::ResourceError&&)#1},-[WKWebView(WKPrivate) _loadAndDecodeImage:constrainedToSize:maximumBytesFromNetwork:completionHandler:]::$_38::operator()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &)::{lambda(WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>&&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ResourceError,WTF::Ref<WebCore::ShareableBitmap,WTF::RawPtrTraits<WebCore::ShareableBitmap>,WTF::DefaultRefDerefTraits<WebCore::ShareableBitmap>>> &&>(uint64_t a1, WebCore::ShareableBitmap **a2)
{
  uint64_t v3;
  id v4;
  const void *v5;
  CFTypeRef cf;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v4 = objc_alloc(MEMORY[0x1E0CEA638]);
  WebCore::ShareableBitmap::makeCGImageCopy(*a2);
  v5 = (const void *)objc_msgSend(v4, "initWithCGImage:", cf);
  (*(void (**)(void))(*(_QWORD *)v3 + 16))();
  if (v5)
    CFRelease(v5);
  if (cf)
    CFRelease(cf);
}

void sub_1970C7F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;
  const void *v11;

  v11 = v10;
  if (v11)
    CFRelease(v11);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<-[WKWebView(WKPrivate) _showSafeBrowsingWarningWithURL:title:warning:detailsWithLinks:completionHandler:]::$_39::operator() const(std::variant<WebKit::ContinueUnsafeLoad,WTF::URL> &&)::{lambda(WebKit::ContinueUnsafeLoad)#1},-[WKWebView(WKPrivate) _showSafeBrowsingWarningWithURL:title:warning:detailsWithLinks:completionHandler:]::$_39::operator() const(std::variant<WebKit::ContinueUnsafeLoad,WTF::URL> &)::{lambda(WTF::URL)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebKit::ContinueUnsafeLoad,WTF::URL> &>(_QWORD ***a1)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(***a1 + 16))(**a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<-[WKWebView(WKPrivate) _showSafeBrowsingWarningWithURL:title:warning:detailsWithLinks:completionHandler:]::$_39::operator() const(std::variant<WebKit::ContinueUnsafeLoad,WTF::URL> &&)::{lambda(WebKit::ContinueUnsafeLoad)#1},-[WKWebView(WKPrivate) _showSafeBrowsingWarningWithURL:title:warning:detailsWithLinks:completionHandler:]::$_39::operator() const(std::variant<WebKit::ContinueUnsafeLoad,WTF::URL> &)::{lambda(WTF::URL)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebKit::ContinueUnsafeLoad,WTF::URL> &>(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t result;
  WTF::StringImpl *v7;

  v2 = *a1;
  v3 = *a2;
  if (*a2)
    *(_DWORD *)v3 += 2;
  v7 = v3;
  v4 = *(_QWORD *)(v2 + 8);
  WTF::URL::operator NSURL *();
  (*(void (**)(void))(*(_QWORD *)v4 + 16))();
  result = (uint64_t)v7;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      return WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return result;
}

void sub_1970C84A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(*(WTF::StringImpl **)a1, (void *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(WTF::StringImpl *result, void *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 1), a2);
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 3;
    }
    while (v3 != a2);
  }
  return result;
}

void sub_1970C8840(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkupExclusionRule>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = v5;
  v6 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 16);
  *(_DWORD *)(v3 + 16) = 0;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(v3 + 20) = 0;
  *(_DWORD *)(v4 + 20) = v6;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1970C8A4CLL);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::MarkupExclusionRule>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::MarkupExclusionRule>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (result != a2)
  {
    v5 = (uint64_t)result + 8;
    do
    {
      v7 = v5 - 8;
      v6 = *(_QWORD *)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v6;
      v8 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(a3 + 8) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 16) = v8;
      LODWORD(v8) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 20) = v8;
      WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      result = *(WTF::StringImpl **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 += 24;
      a3 += 24;
    }
    while ((WTF::StringImpl *)(v7 + 24) != a2);
  }
  return result;
}

void sub_1970C8D48(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void sub_1970C8EE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970C8FF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970C910C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1970C925C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  if (cf)
    CFRelease(cf);
  if (a10)
    CFRelease(a10);
  _Unwind_Resume(exception_object);
}

void sub_1970C9380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t API::ApplicationManifest::create@<X0>(API::ApplicationManifest *this@<X0>, WebKit **a2@<X8>)
{
  WebKit *v5;
  uint64_t result;

  v5 = (WebKit *)API::Object::newObject(0x118uLL, 40);
  *(_QWORD *)v5 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v5);
  *(_QWORD *)v5 = &off_1E34BDAF0;
  result = WebCore::ApplicationManifest::ApplicationManifest((uint64_t)v5 + 16, (uint64_t)this);
  *a2 = v5;
  return result;
}

void sub_1970C9404(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void API::ApplicationManifest::~ApplicationManifest(API::ApplicationManifest *this, void *a2)
{
  WebCore::ApplicationManifest::~ApplicationManifest((API::ApplicationManifest *)((char *)this + 16), a2);
}

{
  WebCore::ApplicationManifest::~ApplicationManifest((API::ApplicationManifest *)((char *)this + 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)40>::type()
{
  return 40;
}

uint64_t WebCore::ApplicationManifest::ApplicationManifest(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  __int128 v9;
  _DWORD *v10;
  __int128 v11;
  _DWORD *v12;
  __int128 v13;
  _DWORD *v14;
  __int128 v15;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_DWORD **)(a2 + 16);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_DWORD **)(a2 + 24);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_DWORD **)(a2 + 32);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v9;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v10 = *(_DWORD **)(a2 + 80);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(a1 + 80) = v10;
  v11 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v11;
  v12 = *(_DWORD **)(a2 + 120);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(a1 + 120) = v12;
  v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v13;
  v14 = *(_DWORD **)(a2 + 160);
  if (v14)
    *v14 += 2;
  *(_QWORD *)(a1 + 160) = v14;
  v15 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v15;
  WebCore::Color::Color((WebCore::Color *)(a1 + 200), (const Color *)(a2 + 200));
  WebCore::Color::Color((WebCore::Color *)(a1 + 208), (const Color *)(a2 + 208));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 216, a2 + 216);
  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 232, a2 + 232);
  WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 248, a2 + 248);
  return a1;
}

void sub_1970C9600(_Unwind_Exception *a1, void *a2)
{
  WTF::StringImpl **v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v8);
  if ((*v4 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
  }
  if ((*v3 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v9);
    }
  }
  v16 = v2[20];
  v2[20] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v2[15];
  v2[15] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v2[10];
  v2[10] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v2[4];
  v2[4] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v2[3];
  v2[3] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v2[2];
  v2[2] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v2[1];
  v2[1] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *v2;
  *v2 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v9);
    else
      *(_DWORD *)v23 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x38E38E4)
  {
    v5 = 72 * v3;
    v6 = WTF::fastMalloc((WTF *)(72 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)v2 = v6;
    WTF::VectorCopier<false,WebCore::ApplicationManifest::Icon>::uninitializedCopy<WebCore::ApplicationManifest::Icon>(*(_QWORD *)a2, *(_QWORD *)a2 + 72 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_1970C984C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::ApplicationManifest::Icon>::uninitializedCopy<WebCore::ApplicationManifest::Icon>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  __int128 v8;
  _DWORD *v9;

  if (result != a2)
  {
    v4 = a3 + 40;
    v5 = result + 40;
    do
    {
      v7 = v5 - 40;
      v6 = *(_DWORD **)(v5 - 40);
      if (v6)
        *v6 += 2;
      *(_QWORD *)(v4 - 40) = v6;
      v8 = *(_OWORD *)(v5 - 16);
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v5 - 32);
      *(_OWORD *)(v4 - 16) = v8;
      result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4, v5);
      v9 = *(_DWORD **)(v5 + 16);
      if (v9)
        *v9 += 2;
      *(_QWORD *)(v4 + 16) = v9;
      *(_BYTE *)(v4 + 24) = *(_BYTE *)(v5 + 24);
      v4 += 72;
      v5 += 72;
    }
    while (v7 + 72 != a2);
  }
  return result;
}

void sub_1970C9908(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  v4 = *(WTF::StringImpl **)(v2 - 40);
  *(_QWORD *)(v2 - 40) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::ApplicationManifest::Shortcut,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 26))
  {
    v5 = WTF::fastMalloc((WTF *)(v3 << 6));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    WTF::VectorCopier<false,WebCore::ApplicationManifest::Shortcut>::uninitializedCopy<WebCore::ApplicationManifest::Shortcut>(*(_QWORD *)a2, *(_QWORD *)a2 + ((unint64_t)*(unsigned int *)(a2 + 12) << 6), v5);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_1970C99A8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,WebCore::ApplicationManifest::Shortcut>::uninitializedCopy<WebCore::ApplicationManifest::Shortcut>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  __int128 v9;

  if (result != a2)
  {
    v4 = a3 + 48;
    v5 = result + 48;
    do
    {
      v7 = v5 - 48;
      v6 = *(_DWORD **)(v5 - 48);
      if (v6)
        *v6 += 2;
      *(_QWORD *)(v4 - 48) = v6;
      v8 = *(_DWORD **)(v5 - 40);
      if (v8)
        *v8 += 2;
      *(_QWORD *)(v4 - 40) = v8;
      v9 = *(_OWORD *)(v5 - 16);
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v5 - 32);
      *(_OWORD *)(v4 - 16) = v9;
      result = WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4, v5);
      v4 += 64;
      v5 += 64;
    }
    while (v7 + 64 != a2);
  }
  return result;
}

void sub_1970C9A58(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v4 = *(WTF::StringImpl **)(v2 - 40);
  *(_QWORD *)(v2 - 40) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(v2 - 48);
  *(_QWORD *)(v2 - 48) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  const void **v10;
  const void *v11;
  const void *v12;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (_QWORD *)v6;
      v9 = 8 * v5;
      v10 = (const void **)v4;
      do
      {
        v11 = *v10;
        *v10 = 0;
        *v8++ = v11;
        v12 = *v10++;
        _Block_release(v12);
        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void sub_1970CA408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZ72__WKWebView_WKTextExtraction___requestTextExtraction_completionHandler__ENK4__86clIN7WebCore14TextExtraction4ItemEEEDaOT_EUlRS8_E_NS4_9FloatRectEJRKSC_EED1Ev(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[1];
  *a1 = &off_1E34BDAA0;
  a1[1] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ72__WKWebView_WKTextExtraction___requestTextExtraction_completionHandler__ENK4__86clIN7WebCore14TextExtraction4ItemEEEDaOT_EUlRS8_E_NS4_9FloatRectEJRKSC_EED0Ev(WTF *this, void *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34BDAA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

float _ZN3WTF6Detail15CallableWrapperIZZ72__WKWebView_WKTextExtraction___requestTextExtraction_completionHandler__ENK4__86clIN7WebCore14TextExtraction4ItemEEEDaOT_EUlRS8_E_NS4_9FloatRectEJRKSC_EE4callESE_(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  const void *v3;
  void *v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGRect v11;
  __int128 v12;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 && (v3 = *(const void **)(v2 + 616)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v2 + 616));
    v5 = *(void **)(a1 + 8);
    WebCore::FloatRect::operator CGRect();
    objc_msgSend(v5, "convertRect:fromView:", v3);
    v11.origin.x = v6;
    v11.origin.y = v7;
    v11.size.width = v8;
    v11.size.height = v9;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v12, &v11);
    CFRelease(v3);
  }
  else
  {
    v12 = *a2;
  }
  return *(float *)&v12;
}

void sub_1970CA558(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkDataTask::scheduleFailure(uint64_t a1, char a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  *(_BYTE *)(a1 + 545) = 1;
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v4 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 8);
  if (v4)
    v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  else
    v5 = 0;
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = &off_1E34BE020;
  *(_QWORD *)(v6 + 8) = a1;
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = a1;
  *(_BYTE *)(v6 + 32) = a2;
  v8 = v6;
  WTF::RunLoop::dispatch();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

WTF::StringImpl *WebKit::NetworkDataTask::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *this, uint64_t a3, uint64_t a4, WebCore::IPAddress *a5, uint64_t *a6)
{
  uint64_t v12;
  WTF::StringImpl *v13;
  __int128 v14;
  const WebCore::ResourceRequest *v15;
  uint64_t PartyForCookies;
  WTF::StringImpl *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  CFTypeRef v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  uint64_t v26;
  uint64_t v27;
  WebKit::NetworkDataTaskClient *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WebKit::NetworkDataTaskClient *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45[2];
  __int128 v46;
  __int128 v47;
  WTF::StringImpl *v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  char v52;
  WTF::StringImpl *v53;
  __int128 v54;
  __int128 v55;
  CFTypeRef v56[2];
  __int128 v57;
  __int128 v58;
  WTF::StringImpl *v59;
  int v60;
  __int16 v61;
  uint64_t v62;
  char v63;
  CFTypeRef cf;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  __int128 v67;
  __int128 v68;

  v12 = WebCore::ResourceResponseBase::url(this);
  v13 = *(WTF::StringImpl **)v12;
  if (*(_QWORD *)v12)
    *(_DWORD *)v13 += 2;
  v66 = v13;
  v14 = *(_OWORD *)(v12 + 24);
  v67 = *(_OWORD *)(v12 + 8);
  v68 = v14;
  if (WebCore::ResourceResponseBase::isHTTP09(this)
    && (WTF::URL::port((WTF::URL *)&v66) & 0xFF0000) != 0
    && (WTF::URL::protocol((WTF::URL *)&v66), (WTF::isDefaultPortForProtocol() & 1) == 0))
  {
    v26 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v27 = *(_QWORD *)(a1 + 24);
    if (v27)
    {
      v28 = *(WebKit::NetworkDataTaskClient **)(v27 + 8);
      if (v28)
      {
        WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)&v66);
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Cancelled load from '", 22, (uint64_t *)&v65, (uint64_t)"' because it is using HTTP/0.9.", 32, v45);
        v56[0] = 0;
        v29 = v66;
        if (v66)
          *(_DWORD *)v66 += 2;
        v56[1] = v29;
        v57 = v67;
        v58 = v68;
        v30 = v45[0];
        if (v45[0])
          *(_DWORD *)v45[0] += 2;
        v59 = v30;
        v60 = 0;
        v61 = 1;
        v62 = 0;
        v63 = 1;
        WebKit::NetworkDataTaskClient::didCompleteWithError(v28, (const WebCore::ResourceError *)v56);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v56, v31);
        v32 = v45[0];
        v45[0] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v24);
          else
            *(_DWORD *)v32 -= 2;
        }
        v33 = v65;
        v65 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v24);
          else
            *(_DWORD *)v33 -= 2;
        }
      }
    }
  }
  else
  {
    if (WebCore::ResourceRequestBase::isNull((WebCore::ResourceRequestBase *)(a1 + 328)))
      v15 = (const WebCore::ResourceRequest *)(a1 + 128);
    else
      v15 = (const WebCore::ResourceRequest *)(a1 + 328);
    WebCore::ResourceRequest::ResourceRequest(v56, v15);
    PartyForCookies = WebCore::ResourceRequestBase::firstPartyForCookies((WebCore::ResourceRequestBase *)v56);
    v17 = *(WTF::StringImpl **)PartyForCookies;
    if (*(_QWORD *)PartyForCookies)
      *(_DWORD *)v17 += 2;
    v53 = v17;
    v18 = *(_OWORD *)(PartyForCookies + 24);
    v54 = *(_OWORD *)(PartyForCookies + 8);
    v55 = v18;
    if (!*(_BYTE *)(a1 + 544)
      && WTF::URL::protocolIs()
      && (WTF::URL::host((WTF::URL *)&v53), (WebCore::SecurityOrigin::isLocalhostAddress() & 1) == 0)
      && WTF::URL::protocolIs()
      && (WTF::URL::host((WTF::URL *)&v66), WebCore::SecurityOrigin::isLocalhostAddress())
      && *((_BYTE *)a5 + 20)
      && (WebCore::IPAddress::isLoopback(a5) & 1) == 0)
    {
      v34 = *a6;
      *a6 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, 2);
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v35 = *(_QWORD *)(a1 + 24);
      if (v35)
      {
        v36 = *(WebKit::NetworkDataTaskClient **)(v35 + 8);
        if (v36)
        {
          WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)&v66);
          WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Cancelled load from '", 22, (uint64_t *)&v43, (uint64_t)"' because localhost did not resolve to a loopback address.", 59, &v44);
          v45[0] = 0;
          v37 = v66;
          if (v66)
            *(_DWORD *)v66 += 2;
          v45[1] = v37;
          v46 = v67;
          v47 = v68;
          v38 = v44;
          if (v44)
            *(_DWORD *)v44 += 2;
          v48 = v38;
          v49 = 0;
          v50 = 1;
          v51 = 0;
          v52 = 1;
          WebKit::NetworkDataTaskClient::didCompleteWithError(v36, (const WebCore::ResourceError *)v45);
          WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v45, v39);
          v40 = v44;
          v44 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v21);
            else
              *(_DWORD *)v40 -= 2;
          }
          v41 = v43;
          v43 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, v21);
            else
              *(_DWORD *)v41 -= 2;
          }
        }
      }
    }
    else
    {
      *((_WORD *)this + 116) = *((_WORD *)this + 116) & 0xC3FF | 0x400;
      if ((_DWORD)a3)
        *((_BYTE *)this + 138) |= 0x10u;
      if ((_DWORD)a4)
        *((_BYTE *)this + 138) |= 0x20u;
      v19 = *(_QWORD *)(a1 + 24);
      if (v19 && (v20 = *(_QWORD *)(v19 + 8)) != 0)
      {
        (*(void (**)(uint64_t, WebCore::ResourceResponseBase *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v20 + 24))(v20, this, a3, a4, a6);
      }
      else
      {
        v42 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, 2);
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      }
    }
    v22 = v53;
    v53 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = cf;
    cf = 0;
    if (v23)
      CFRelease(v23);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v56);
  }
  result = v66;
  v66 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkDataTaskClient::didCompleteWithError(WebKit::NetworkDataTaskClient *this, const WebCore::ResourceError *a2)
{
  WTF::StringImpl *v4;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v5;
  WTF::StringImpl *result;
  _BYTE v7[88];
  WTF::StringImpl *v8;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v9;

  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v7);
  (*(void (**)(WebKit::NetworkDataTaskClient *, const WebCore::ResourceError *, _BYTE *))(*(_QWORD *)this + 40))(this, a2, v7);
  v5 = v9;
  v9 = 0;
  if (v5)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v5);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::NetworkDataTask::description(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebKit::NetworkDataTask::setH2PingCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::StringImpl *v6[2];
  __int128 v7;
  __int128 v8;
  WTF::StringImpl *v9;
  int v10;
  __int16 v11;
  CFTypeRef cf;
  char v13;
  char v14;
  _OWORD v15[3];
  WTF::StringImpl *v16;
  int v17;
  __int16 v18;
  CFTypeRef v19;
  char v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  WebCore::createInternalError();
  v18 = v11;
  v17 = v10;
  v15[0] = *(_OWORD *)v6;
  v15[1] = v7;
  v15[2] = v8;
  v16 = v9;
  v19 = cf;
  v20 = v13;
  v21 = 1;
  v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 16))(v4, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v21 != -1)
    ((void (*)(char *, _OWORD *))off_1E34BDF68[v21])(&v14, v15);
  return 0;
}

unsigned int *WebKit::NetworkDataTask::setPendingDownload(WebKit::NetworkDataTask *this, WebKit::PendingDownload *a2)
{
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2);
  v5 = (unsigned int *)*((_QWORD *)a2 + 2);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  result = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v5;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

uint64_t WebKit::NetworkDataTaskBlob::NetworkDataTaskBlob(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, uint64_t a5, uint64_t *a6)
{
  _QWORD *v11;
  WebCore::FileStreamClient *v12;
  WebCore::AsyncFileStream *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *BlobDataFromURL;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  NSObject *v28;
  WebCore::SecurityOriginData *PartyForCookies;
  const WTF::URL *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint8_t buf[24];
  int v36;
  _BYTE v37[24];
  int v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v11 = (_QWORD *)WebKit::NetworkDataTask::NetworkDataTask(a1, a2, a3, a4, 0, 0, 0);
  v12 = (WebCore::FileStreamClient *)(v11 + 69);
  *v11 = off_1E34BDBE0;
  v11[69] = &unk_1E34BDC68;
  v11[70] = 0;
  v13 = (WebCore::AsyncFileStream *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)(a1 + 568) = WebCore::AsyncFileStream::AsyncFileStream(v13, v12);
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 608) = 1;
  *(_BYTE *)(a1 + 612) = 0;
  *(_QWORD *)(a1 + 616) = -1;
  *(_QWORD *)(a1 + 624) = -1;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 657) = 0u;
  *(_DWORD *)(a1 + 676) = -1;
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 680, a5);
  *(_QWORD *)(a1 + 696) = 0;
  v14 = *(_QWORD *)(a2 + 32);
  v15 = (unsigned int *)(v14 + 120);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *(_QWORD *)(a1 + 704) = v14;
  v17 = *(unsigned int *)(a1 + 692);
  if ((_DWORD)v17)
  {
    v31 = *(uint64_t **)(a1 + 680);
    v32 = 8 * v17;
    do
    {
      v33 = *v31++;
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
      v32 -= 8;
    }
    while (v32);
  }
  v18 = *a6;
  if (*a6)
  {
    v37[0] = 0;
    v38 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v37, v18 + 8);
    v39 = 1;
  }
  else
  {
    v37[0] = 0;
    v39 = 0;
    v19 = *(_QWORD *)WebCore::ResourceRequestBase::firstPartyForCookies(a4);
    if (v19
      && *(_DWORD *)(v19 + 4)
      && (*(_BYTE *)(WebCore::ResourceRequestBase::firstPartyForCookies(a4) + 8) & 1) != 0)
    {
      v28 = off_1ECE713E8;
      if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_196BCC000, v28, OS_LOG_TYPE_DEFAULT, "Got request for blob without topOrigin but request specifies firstPartyForCookies", buf, 2u);
      }
      PartyForCookies = (WebCore::SecurityOriginData *)WebCore::ResourceRequestBase::firstPartyForCookies(a4);
      WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(PartyForCookies, v30);
      if (v39)
      {
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v37, (uint64_t)buf);
      }
      else
      {
        v37[0] = 0;
        v38 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v37, (uint64_t)buf);
        v39 = 1;
      }
      if (v36 != -1)
        ((void (*)(char *, uint8_t *))off_1E34BDF78[v36])(&v34, buf);
    }
  }
  WebCore::ResourceRequestBase::url(a4);
  BlobDataFromURL = (unsigned int *)WebCore::BlobRegistryImpl::getBlobDataFromURL();
  v22 = BlobDataFromURL;
  if (BlobDataFromURL)
  {
    do
      v23 = __ldaxr(BlobDataFromURL);
    while (__stlxr(v23 + 1, BlobDataFromURL));
  }
  v24 = *(unsigned int **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = v22;
  if (v24)
  {
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t)v24, v21);
    }
  }
  if (v39 && v38 != -1)
    ((void (*)(uint8_t *, _BYTE *))off_1E34BDF78[v38])(buf, v37);
  return a1;
}

void WebKit::NetworkDataTaskBlob::~NetworkDataTaskBlob(WebKit::NetworkDataTaskBlob *this)
{
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  const char ***v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *((unsigned int *)this + 173);
  if ((_DWORD)v2)
  {
    v16 = (uint64_t *)*((_QWORD *)this + 85);
    v17 = 8 * v2;
    do
    {
      v18 = *v16++;
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      v17 -= 8;
    }
    while (v17);
  }
  WebKit::NetworkDataTaskBlob::clearStream(this);
  v4 = (unsigned int *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v4)
  {
    v5 = v4 + 30;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 30);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = (const char ***)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v8)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v8);
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 680, v3);
  v10 = (WTF *)*((_QWORD *)this + 74);
  if (v10)
  {
    *((_QWORD *)this + 74) = 0;
    *((_DWORD *)this + 150) = 0;
    WTF::fastFree(v10, v9);
  }
  v11 = (WTF *)*((_QWORD *)this + 72);
  if (v11)
  {
    *((_QWORD *)this + 72) = 0;
    *((_DWORD *)this + 146) = 0;
    WTF::fastFree(v11, v9);
  }
  std::unique_ptr<WebCore::AsyncFileStream>::reset[abi:sn180100]((WebCore::AsyncFileStream **)this + 71);
  v13 = (unsigned int *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t)v13, v12);
    }
  }
  WebKit::NetworkDataTask::~NetworkDataTask(this, (WTF::StringImpl *)v12);
}

{
  WTF *v1;
  void *v2;

  WebKit::NetworkDataTaskBlob::~NetworkDataTaskBlob(this);
  WTF::fastFree(v1, v2);
}

WebCore::AsyncFileStream *WebKit::NetworkDataTaskBlob::clearStream(WebCore::AsyncFileStream *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 152) != 3)
  {
    v1 = (uint64_t)this;
    *((_DWORD *)this + 152) = 3;
    if (*((_BYTE *)this + 672))
    {
      *((_BYTE *)this + 672) = 0;
      WebCore::AsyncFileStream::close(*((WebCore::AsyncFileStream **)this + 71));
    }
    return std::unique_ptr<WebCore::AsyncFileStream>::reset[abi:sn180100]((WebCore::AsyncFileStream **)(v1 + 568));
  }
  return this;
}

void `non-virtual thunk to'WebKit::NetworkDataTaskBlob::~NetworkDataTaskBlob(WebKit::NetworkDataTaskBlob *this)
{
  WebKit::NetworkDataTaskBlob::~NetworkDataTaskBlob((WebKit::NetworkDataTaskBlob *)((char *)this - 552));
}

{
  WTF *v1;
  void *v2;

  WebKit::NetworkDataTaskBlob::~NetworkDataTaskBlob((WebKit::NetworkDataTaskBlob *)((char *)this - 552));
  WTF::fastFree(v1, v2);
}

unsigned __int8 **WebKit::NetworkDataTaskBlob::resume(unsigned __int8 **this)
{
  unsigned __int8 **v1;
  unsigned __int8 **v2;
  unsigned __int8 **v3;

  if (((_DWORD)this[76] & 0xFFFFFFFE) != 2)
  {
    v1 = this;
    *((_DWORD *)this + 152) = 0;
    WTF::RunLoop::main((WTF::RunLoop *)this);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 1);
    v2 = (unsigned __int8 **)WTF::fastMalloc((WTF *)0x18);
    *v2 = (unsigned __int8 *)&off_1E34BE048;
    v2[1] = (unsigned __int8 *)v1;
    v2[2] = (unsigned __int8 *)v1;
    v3 = v2;
    WTF::RunLoop::dispatch();
    this = v3;
    if (v3)
      return (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **))*v3 + 1))(v3);
  }
  return this;
}

uint64_t WebKit::NetworkDataTaskBlob::cancel(uint64_t this, int *a2)
{
  WebKit::NetworkDataTaskBlob *v2;

  if ((*(_DWORD *)(this + 608) & 0xFFFFFFFE) != 2)
  {
    v2 = (WebKit::NetworkDataTaskBlob *)this;
    *(_DWORD *)(this + 608) = 2;
    if (*(_BYTE *)(this + 672))
    {
      *(_BYTE *)(this + 672) = 0;
      this = WebCore::AsyncFileStream::close(*(WebCore::AsyncFileStream **)(this + 568));
    }
    if (*((_QWORD *)v2 + 5))
      return WebKit::NetworkDataTaskBlob::cleanDownloadFiles(v2, a2);
  }
  return this;
}

uint64_t WebKit::NetworkDataTaskBlob::cleanDownloadFiles(WebKit::NetworkDataTaskBlob *this, int *a2)
{
  if (*((_DWORD *)this + 169) != -1)
  {
    WTF::FileSystemImpl::closeFile((WebKit::NetworkDataTaskBlob *)((char *)this + 676), a2);
    *((_DWORD *)this + 169) = -1;
  }
  return WTF::FileSystemImpl::deleteFile((WebKit::NetworkDataTaskBlob *)((char *)this + 120), (const WTF::String *)a2);
}

WebCore::AsyncFileStream *WebKit::NetworkDataTaskBlob::invalidateAndCancel(WebKit::NetworkDataTaskBlob *this, int *a2)
{
  WebKit::NetworkDataTaskBlob::cancel((uint64_t)this, a2);
  return WebKit::NetworkDataTaskBlob::clearStream(this);
}

void WebKit::NetworkDataTaskBlob::getSizeForNext(WebKit::NetworkDataTaskBlob *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::BlobDataItem *v6;
  uint64_t v7;
  const WTF::URL *v8;
  const WTF::String *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  CFTypeRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38[2];
  char v39;
  WTF::StringImpl *v40;
  _BYTE v41[138];
  char v42;
  CFTypeRef cf;
  char v44;

  v2 = *((_DWORD *)this + 166);
  v3 = *((_QWORD *)this + 70);
  v4 = *(unsigned int *)(v3 + 108);
  if (v4 > v2)
  {
    v5 = *(_QWORD *)(v3 + 96);
    v6 = (WebCore::BlobDataItem *)(v5 + 40 * v2);
    if (*(_DWORD *)v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        v25 = v5 + 40 * v2;
        WebCore::BlobDataFileReference::path(*(WebCore::BlobDataFileReference **)(v25 + 16));
        WebCore::BlobDataFileReference::expectedModificationTime(*(WebCore::BlobDataFileReference **)(v25 + 16));
        WebCore::AsyncFileStream::getSize();
      }
    }
    else
    {
      v7 = WebCore::BlobDataItem::length(v6);
      WebKit::NetworkDataTaskBlob::didGetSize(this, v7);
    }
    return;
  }
  if (!*((_BYTE *)this + 612))
    goto LABEL_5;
  v26 = *((_QWORD *)this + 77);
  v27 = *((_QWORD *)this + 79);
  if (v26 == -1)
  {
    v26 = v27 - *((_QWORD *)this + 78);
    *((_QWORD *)this + 77) = v26;
LABEL_45:
    v28 = v27 - 1;
    *((_QWORD *)this + 78) = v27 - 1;
    goto LABEL_46;
  }
  if (v26 >= v27)
  {
    WebKit::NetworkDataTaskBlob::didFail((uint64_t)this, 3);
    return;
  }
  v28 = *((_QWORD *)this + 78);
  if (v28 == -1 || v28 >= v27)
    goto LABEL_45;
LABEL_46:
  if (!(_DWORD)v4)
  {
    LODWORD(v31) = 0;
    v33 = v26;
LABEL_53:
    *((_DWORD *)this + 167) = v31;
    *((_QWORD *)this + 82) = v33;
    v37 = v28 - v26 + 1;
    if (*((_QWORD *)this + 81) > v37)
      *((_QWORD *)this + 81) = v37;
LABEL_5:
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 1);
    v8 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebKit::NetworkDataTaskBlob *)((char *)this + 128));
    WebCore::extractMIMETypeFromMediaType((WebCore *)(*((_QWORD *)this + 70) + 8), v9);
    v10 = *((_QWORD *)this + 81);
    v40 = 0;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v41, v8, (const WTF::String *)v38, v10, (const WTF::String *)&v40);
    cf = 0;
    v44 = 0;
    v42 = v42 & 0xF1 | 4;
    v12 = v40;
    v40 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v38[0];
    v38[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    WebCore::ResourceResponseBase::setHTTPStatusCode((WebCore::ResourceResponseBase *)v41);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ResourceResponseBase::setHTTPStatusText();
    v15 = v38[0];
    v38[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    WebCore::ResourceResponseBase::setHTTPHeaderField();
    WebCore::extractCharsetFromMediaType();
    if ((v16 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    WebCore::ResourceResponseBase::setTextEncodingName();
    v18 = v38[0];
    v38[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    WTF::String::number(*((WTF::String **)this + 81));
    WebCore::ResourceResponseBase::setHTTPHeaderField();
    v20 = v38[0];
    v38[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    WebCore::addPolicyContainerHeaders();
    if (*((_BYTE *)this + 612))
    {
      WebCore::ParsedContentRange::ParsedContentRange((WebCore::ParsedContentRange *)v38);
      WebCore::ParsedContentRange::headerValue((WebCore::ParsedContentRange *)v38);
      WebCore::ResourceResponseBase::setHTTPHeaderField();
      v30 = v40;
      v40 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
    }
    LOBYTE(v38[0]) = 0;
    v39 = 0;
    v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v21 = &off_1E34BE070;
    *((_QWORD *)v21 + 1) = this;
    *((_QWORD *)v21 + 2) = this;
    v40 = v21;
    WebKit::NetworkDataTask::didReceiveResponse((uint64_t)this, (WebCore::ResourceResponseBase *)v41, 0, 0, (WebCore::IPAddress *)v38, (uint64_t *)&v40);
    v23 = v40;
    v40 = 0;
    if (v23)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 8))(v23);
    v24 = cf;
    cf = 0;
    if (v24)
      CFRelease(v24);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v41, v22);
    return;
  }
  v31 = 0;
  v32 = *((unsigned int *)this + 151);
  v33 = v26;
  while (v32 != v31)
  {
    v34 = *(_QWORD *)(*((_QWORD *)this + 74) + 8 * v31);
    v35 = __OFSUB__(v33, v34);
    v36 = v33 - v34;
    if (v36 < 0 != v35)
      goto LABEL_53;
    ++v31;
    v33 = v36;
    if (v4 == v31)
    {
      LODWORD(v31) = v4;
      v33 = v36;
      goto LABEL_53;
    }
  }
  *((_DWORD *)this + 167) = v32;
  __break(0xC471u);
}

unsigned __int8 *WebKit::NetworkDataTaskBlob::didFail(uint64_t a1, int a2)
{
  unsigned __int8 **v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WebKit::NetworkDataTaskClient *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __int128 v14;
  CFTypeRef v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  WTF::StringImpl *v24;
  int v25;
  __int16 v26;
  CFTypeRef cf;
  char v28;

  v4 = (unsigned __int8 **)(a1 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
  if (*(_QWORD *)(a1 + 40))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v20;
    v6 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 128));
    if (v20)
      *(_DWORD *)v20 += 2;
    v20 = v5;
    v7 = *(WTF::StringImpl **)v6;
    if (*(_QWORD *)v6)
      *(_DWORD *)v7 += 2;
    v21 = v7;
    v8 = *(_OWORD *)(v6 + 24);
    v22 = *(_OWORD *)(v6 + 8);
    v23 = v8;
    v24 = 0;
    v25 = a2;
    v26 = 1;
    cf = 0;
    v28 = 1;
    WebKit::NetworkDataTaskBlob::didFailDownload((WebKit::NetworkDataTaskBlob *)a1, (const WebCore::ResourceError *)&v20);
  }
  else
  {
    WebKit::NetworkDataTaskBlob::clearStream((WebCore::AsyncFileStream *)a1);
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
      v11 = *(WebKit::NetworkDataTaskClient **)(v10 + 8);
    else
      v11 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v20;
    v12 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 128));
    if (v20)
      *(_DWORD *)v20 += 2;
    v20 = v5;
    v13 = *(WTF::StringImpl **)v12;
    if (*(_QWORD *)v12)
      *(_DWORD *)v13 += 2;
    v21 = v13;
    v14 = *(_OWORD *)(v12 + 24);
    v22 = *(_OWORD *)(v12 + 8);
    v23 = v14;
    v24 = 0;
    v25 = a2;
    v26 = 1;
    cf = 0;
    v28 = 1;
    WebKit::NetworkDataTaskClient::didCompleteWithError(v11, (const WebCore::ResourceError *)&v20);
  }
  v15 = cf;
  cf = 0;
  if (v15)
    CFRelease(v15);
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v9);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v21;
  v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v9);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v20;
  v20 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v9);
      if (!v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v4);
      goto LABEL_30;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v5)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v4);
LABEL_30:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v9);
  else
    *(_DWORD *)v5 -= 2;
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v4);
}

unsigned __int8 *WebKit::NetworkDataTaskBlob::didGetSize(unsigned __int8 **this, uint64_t a2)
{
  unsigned __int8 **v4;
  unsigned __int8 *result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = a2;
  v4 = this + 1;
  result = (unsigned __int8 *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  if (((_DWORD)this[76] & 0xFFFFFFFE) == 2 || ((v6 = this[3]) == 0 || !*((_QWORD *)v6 + 1)) && !this[5])
  {
    WebKit::NetworkDataTaskBlob::clearStream((WebCore::AsyncFileStream *)this);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v4);
  }
  if (a2 == -1)
  {
    WebKit::NetworkDataTaskBlob::didFail((uint64_t)this, 1);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v4);
  }
  v7 = this[70];
  v8 = *((_DWORD *)this + 166);
  if (*((_DWORD *)v7 + 27) > v8)
  {
    v9 = WebCore::BlobDataItem::length((WebCore::BlobDataItem *)(*((_QWORD *)v7 + 12) + 40 * v8));
    v12 = v9;
    v10 = *((unsigned int *)this + 151);
    if ((_DWORD)v10 == *((_DWORD *)this + 150))
    {
      v11 = (_QWORD *)WTF::Vector<long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(this + 74), v10 + 1, (unint64_t)&v12);
      v10 = *((unsigned int *)this + 151);
      *(_QWORD *)&this[74][8 * v10] = *v11;
      v9 = v12;
    }
    else
    {
      *(_QWORD *)&this[74][8 * v10] = v9;
    }
    *((_DWORD *)this + 151) = v10 + 1;
    this[79] += v9;
    this[81] += v9;
    ++*((_DWORD *)this + 166);
    WebKit::NetworkDataTaskBlob::getSizeForNext((WebKit::NetworkDataTaskBlob *)this);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v4);
  }
  __break(0xC471u);
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebKit::NetworkDataTaskBlob::didGetSize(unsigned __int8 **this, uint64_t a2)
{
  return WebKit::NetworkDataTaskBlob::didGetSize(this - 69, a2);
}

WTF::StringImpl *WebKit::NetworkDataTaskBlob::read(WTF::StringImpl *this, int *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WebKit::NetworkDataTaskClient *v4;
  WTF::StringImpl *v5;
  CFTypeRef v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::BlobDataFileReference **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::DataSegment *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _QWORD v22[2];
  CFTypeRef cf;
  char v24;

  v2 = this;
  if (!*((_QWORD *)this + 81)
    || (v9 = *((_DWORD *)this + 167), v10 = *((_QWORD *)this + 70), *(_DWORD *)(v10 + 108) <= v9))
  {
    if (*((_DWORD *)this + 169) != -1)
      return (WTF::StringImpl *)WebKit::NetworkDataTaskBlob::didFinishDownload(this, a2);
    WebKit::NetworkDataTaskBlob::clearStream(this);
    v3 = *((_QWORD *)v2 + 3);
    if (v3)
    {
      v4 = *(WebKit::NetworkDataTaskClient **)(v3 + 8);
LABEL_5:
      v20 = 0;
      v21 = 0;
      WTF::URL::invalidate((WTF::URL *)&v21);
      cf = 0;
      v22[0] = 0;
      *(_QWORD *)((char *)v22 + 6) = 0;
      v24 = 1;
      WebKit::NetworkDataTaskClient::didCompleteWithError(v4, (const WebCore::ResourceError *)&v20);
      v6 = cf;
      cf = 0;
      if (v6)
        CFRelease(v6);
      v7 = (WTF::StringImpl *)v22[0];
      v22[0] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v5);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = v21;
      v21 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v5);
        else
          *(_DWORD *)v8 -= 2;
      }
      this = v20;
      v20 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
        else
          *(_DWORD *)this -= 2;
      }
      return this;
    }
LABEL_34:
    v4 = 0;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v10 + 96);
  v12 = (WebCore::BlobDataFileReference **)(v11 + 40 * v9);
  if (!*(_DWORD *)v12)
  {
    v13 = WebCore::BlobDataItem::length((WebCore::BlobDataItem *)(v11 + 40 * v9));
    if (v13 - *((_QWORD *)v2 + 82) > *((_QWORD *)v2 + 81))
      v14 = *((_QWORD *)v2 + 81);
    else
      v14 = v13 - *((_QWORD *)v2 + 82);
    v15 = v11 + 40 * v9;
    v16 = *(WebCore::DataSegment **)(v15 + 8);
    v17 = WebCore::DataSegment::data(v16);
    v18 = WebCore::DataSegment::size(v16);
    v19 = *((_QWORD *)v2 + 82) + *(_QWORD *)(v15 + 24);
    if (v18 >= v19)
    {
      if (v14 == -1)
      {
        v14 = v18 - v19;
        goto LABEL_25;
      }
      if (v18 - v19 >= v14)
      {
LABEL_25:
        *((_QWORD *)v2 + 82) = 0;
        return (WTF::StringImpl *)WebKit::NetworkDataTaskBlob::consumeData(v2, v17 + v19, v14);
      }
    }
    __break(1u);
    goto LABEL_34;
  }
  if (*(_DWORD *)v12 == 1)
    return (WTF::StringImpl *)WebKit::NetworkDataTaskBlob::readFile((uint64_t)this, v12);
  return this;
}

uint64_t WebKit::NetworkDataTaskBlob::readFile(uint64_t this, WebCore::BlobDataFileReference **a2)
{
  uint64_t v2;
  WebCore::AsyncFileStream *v3;
  const WTF::String *v4;

  v2 = this;
  if (*(_BYTE *)(this + 672))
    return WebCore::AsyncFileStream::read(*(WebCore::AsyncFileStream **)(this + 568), *(void **)(this + 576));
  if (*(_DWORD *)(this + 604) <= *(_DWORD *)(this + 668))
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(WebCore::AsyncFileStream **)(this + 568);
    v4 = (const WTF::String *)WebCore::BlobDataFileReference::path(a2[2]);
    this = WebCore::AsyncFileStream::openForRead(v3, v4);
    *(_BYTE *)(v2 + 672) = 1;
    *(_QWORD *)(v2 + 656) = 0;
  }
  return this;
}

uint64_t WebKit::NetworkDataTaskBlob::consumeData(WebKit::NetworkDataTaskBlob *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;

  v9[1] = a2;
  v10 = a3;
  *((_QWORD *)this + 81) -= a3;
  if (!a3)
    goto LABEL_7;
  if (*((_DWORD *)this + 169) == -1)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      v5 = *(_QWORD *)(v4 + 8);
    else
      v5 = 0;
    WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(v9);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, v9[0]);
    v7 = (unsigned int *)v9[0];
    v9[0] = 0;
    if (v7)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v6);
LABEL_7:
    if (*((_BYTE *)this + 672))
    {
      if (v10)
        return WebKit::NetworkDataTaskBlob::read(this);
      *((_BYTE *)this + 672) = 0;
      WebCore::AsyncFileStream::close(*((WebCore::AsyncFileStream **)this + 71));
    }
    ++*((_DWORD *)this + 167);
    return WebKit::NetworkDataTaskBlob::read(this);
  }
  result = WebKit::NetworkDataTaskBlob::writeDownload((uint64_t)this, a2, a3);
  if ((result & 1) != 0)
    goto LABEL_7;
  return result;
}

unsigned __int8 *WebKit::NetworkDataTaskBlob::didOpen(unsigned __int8 **this, char a2)
{
  unsigned __int8 *v4;
  int *v5;

  if (((_DWORD)this[76] & 0xFFFFFFFE) == 2)
    return (unsigned __int8 *)WebKit::NetworkDataTaskBlob::clearStream((WebCore::AsyncFileStream *)this);
  v4 = this[3];
  if ((!v4 || !*((_QWORD *)v4 + 1)) && !this[5])
    return (unsigned __int8 *)WebKit::NetworkDataTaskBlob::clearStream((WebCore::AsyncFileStream *)this);
  if ((a2 & 1) == 0)
    return WebKit::NetworkDataTaskBlob::didFail((uint64_t)this, 4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  WebKit::NetworkDataTaskBlob::read((WTF::StringImpl *)this, v5);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(this[1]);
}

unsigned __int8 *`non-virtual thunk to'WebKit::NetworkDataTaskBlob::didOpen(unsigned __int8 **this, char a2)
{
  return WebKit::NetworkDataTaskBlob::didOpen(this - 69, a2);
}

unsigned __int8 *WebKit::NetworkDataTaskBlob::didRead(WebKit::NetworkDataTaskBlob *this, unsigned int a2)
{
  unsigned __int8 *result;
  uint64_t v5;

  if ((*((_DWORD *)this + 152) & 0xFFFFFFFE) == 2)
    return (unsigned __int8 *)WebKit::NetworkDataTaskBlob::clearStream(this);
  v5 = *((_QWORD *)this + 3);
  if ((!v5 || !*(_QWORD *)(v5 + 8)) && !*((_QWORD *)this + 5))
    return (unsigned __int8 *)WebKit::NetworkDataTaskBlob::clearStream(this);
  if ((a2 & 0x80000000) != 0)
    return WebKit::NetworkDataTaskBlob::didFail((uint64_t)this, 4);
  result = (unsigned __int8 *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 1);
  if (*((_DWORD *)this + 147) < a2)
  {
    __break(1u);
  }
  else
  {
    WebKit::NetworkDataTaskBlob::consumeData(this, *((_QWORD *)this + 72), a2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*((unsigned __int8 **)this + 1));
  }
  return result;
}

unsigned __int8 *`non-virtual thunk to'WebKit::NetworkDataTaskBlob::didRead(WebKit::NetworkDataTaskBlob *this, unsigned int a2)
{
  return WebKit::NetworkDataTaskBlob::didRead((WebKit::NetworkDataTaskBlob *)((char *)this - 552), a2);
}

BOOL WebKit::NetworkDataTaskBlob::writeDownload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  WebKit::Download *v7;
  WTF::StringImpl *v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  CFTypeRef cf;

  v5 = (int)WTF::FileSystemImpl::writeToFile();
  if (v5 == a3)
  {
    *(_QWORD *)(a1 + 640) += a3;
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 704) + 176);
    v14 = *(WTF::StringImpl **)(a1 + 40);
    v7 = (WebKit::Download *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v6, &v14);
    WebKit::Download::didReceiveData(v7, a3, *(_QWORD *)(a1 + 640), *(_QWORD *)(a1 + 632));
  }
  else
  {
    WebKit::cancelledError((WebKit *)(a1 + 128), (uint64_t)&v14);
    WebKit::NetworkDataTaskBlob::didFailDownload((WebKit::NetworkDataTaskBlob *)a1, (const WebCore::ResourceError *)&v14);
    v9 = cf;
    cf = 0;
    if (v9)
      CFRelease(v9);
    v10 = v16;
    v16 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return v5 == a3;
}

unsigned int *WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  unsigned int *result;
  unsigned int *v5;

  WebCore::FragmentedSharedBuffer::create();
  v2 = WTF::fastMalloc((WTF *)0x38);
  *a1 = MEMORY[0x19AEAD8A0](v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v3);
  return result;
}

uint64_t WebKit::NetworkDataTaskBlob::setPendingDownloadLocation(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3, int a4)
{
  WTF::FileSystemImpl *v7;
  const WTF::String *v8;
  uint64_t result;
  uint64_t v10;
  const char ***v11;
  uint64_t v12;
  const WTF::String *v13;
  const char **v14;

  v14 = 0;
  v7 = (WTF::FileSystemImpl *)(a1 + 120);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 120), a2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v14);
  if (*a3)
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)(result + 8) = v10;
    *(_QWORD *)(result + 16) = 0;
  }
  else
  {
    result = 0;
  }
  v11 = *(const char ****)(a1 + 696);
  *(_QWORD *)(a1 + 696) = result;
  if (v11)
  {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v11);
    result = *(_QWORD *)(a1 + 696);
  }
  if (result)
  {
    v12 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 16) = v12 + 1;
    if (!v12)
      result = WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(result + 8));
  }
  if (a4)
  {
    result = WTF::FileSystemImpl::fileExists(v7, v8);
    if ((_DWORD)result)
      return WTF::FileSystemImpl::deleteFile(v7, v13);
  }
  return result;
}

WTF::StringImpl **WebKit::NetworkDataTask::setPendingDownloadLocation(uint64_t a1, WTF::StringImpl *a2)
{
  return WTF::String::operator=((WTF::StringImpl **)(a1 + 120), a2);
}

uint64_t WebKit::NetworkDataTaskBlob::suggestedFilename@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 536);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

WTF::StringImpl *WebKit::NetworkDataTaskBlob::didFailDownload(WebKit::NetworkDataTaskBlob *this, const WebCore::ResourceError *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::NetworkDataTaskClient *v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  WebKit::NetworkDataTaskBlob::clearStream(this);
  WebKit::NetworkDataTaskBlob::cleanDownloadFiles(this, v4);
  v5 = *((_QWORD *)this + 87);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 16) - 1;
    *(_QWORD *)(v5 + 16) = v6;
    if (v6)
    {
      *((_QWORD *)this + 87) = 0;
      goto LABEL_4;
    }
    *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) = 0;
    sandbox_extension_release();
    v5 = *((_QWORD *)this + 87);
    *((_QWORD *)this + 87) = 0;
    if (v5)
LABEL_4:
      WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v5);
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(WebKit::NetworkDataTaskClient **)(v7 + 8);
    if (v8)
      return WebKit::NetworkDataTaskClient::didCompleteWithError(v8, a2);
  }
  v10 = (uint64_t *)(*((_QWORD *)this + 88) + 176);
  v12 = *((_QWORD *)this + 5);
  v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v10, &v12);
  return (WTF::StringImpl *)WebKit::Download::didFail(v11, (uint64_t)a2, 0, 0);
}

BOOL WebKit::NetworkDataTaskBlob::didFinishDownload(WebKit::NetworkDataTaskBlob *this, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  WebKit::Download *v6;
  uint64_t v8;

  WTF::FileSystemImpl::closeFile((WebKit::NetworkDataTaskBlob *)((char *)this + 676), a2);
  *((_DWORD *)this + 169) = -1;
  v3 = *((_QWORD *)this + 87);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 16) - 1;
    *(_QWORD *)(v3 + 16) = v4;
    if (v4)
    {
      *((_QWORD *)this + 87) = 0;
      goto LABEL_4;
    }
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) = 0;
    sandbox_extension_release();
    v3 = *((_QWORD *)this + 87);
    *((_QWORD *)this + 87) = 0;
    if (v3)
LABEL_4:
      WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v3);
  }
  WebKit::NetworkDataTaskBlob::clearStream(this);
  v5 = (uint64_t *)(*((_QWORD *)this + 88) + 176);
  v8 = *((_QWORD *)this + 5);
  v6 = (WebKit::Download *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v5, &v8);
  return WebKit::Download::didFinish(v6);
}

_QWORD *WebKit::NetworkLoad::NetworkLoad(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  *a1 = &off_1E34BDCB0;
  a1[1] = 0;
  a1[2] = a2;
  v6 = *(_QWORD *)(a3 + 32);
  v7 = (unsigned int *)(v6 + 120);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  a1[3] = v6;
  WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)(a1 + 4));
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*a4 + 16))(*a4, a1);
  a1[375] = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 376));
  return a1;
}

void WebKit::NetworkLoad::updateRequestAfterRedirection(WebKit::NetworkLoad *this, WebCore::ResourceRequest *a2)
{
  uint64_t v3;
  CFTypeRef v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::RefCountedBase *v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef v14;
  CFTypeRef v15[19];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  CFTypeRef v21;
  _BYTE v22[192];
  CFTypeRef cf;

  WebCore::ResourceRequest::ResourceRequest(v15, (WebKit::NetworkLoad *)((char *)this + 3008));
  v3 = WebCore::ResourceRequest::nsURLRequest();
  MEMORY[0x19AEAEC20](v22, v3);
  WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties((WebCore::ResourceRequest *)v15, (const WebCore::ResourceRequest *)v22);
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v22);
  WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)a2, (uint64_t)v15);
  v6 = v16;
  v16 = 0;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v17;
  v17 = 0;
  v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v18;
  v18 = 0;
  v11 = (WTF::RefCountedBase *)*((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v10;
  if (v11)
    WTF::RefCounted<WebCore::FormData>::deref(v11);
  *((_QWORD *)a2 + 22) = v19;
  *((_BYTE *)a2 + 184) = v20;
  v12 = v21;
  v21 = 0;
  v13 = (const void *)*((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v12;
  if (v13)
  {
    CFRelease(v13);
    v14 = v21;
    v21 = 0;
    if (v14)
      CFRelease(v14);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v15);
}

WTF::StringImpl *WebKit::NetworkLoad::convertTaskToDownload(uint64_t a1, WebKit::PendingDownload *a2, uint64_t a3, WebCore::ResourceResponseBase *a4, uint64_t *a5)
{
  const void *v10;
  const void *v11;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 2992))
  {
    *(_QWORD *)(a1 + 16) = a2;
    WebCore::ResourceRequestBase::operator=(a1 + 3008, a3);
    v10 = *(const void **)(a3 + 192);
    if (v10)
      CFRetain(v10);
    v11 = *(const void **)(a1 + 3200);
    *(_QWORD *)(a1 + 3200) = v10;
    if (v11)
      CFRelease(v11);
    WebKit::NetworkDataTask::setPendingDownload(*(WebKit::NetworkDataTask **)(a1 + 2992), a2);
    return WebKit::NetworkProcess::findPendingDownloadLocation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 2992), a5, a4);
  }
  else
  {
    v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, 2);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

WTF::StringImpl *WebKit::NetworkProcess::findPendingDownloadLocation(uint64_t a1, uint64_t a2, uint64_t *a3, WebCore::ResourceResponseBase *a4)
{
  uint64_t v8;
  os_unfair_lock_s *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22;
  uint64_t v23[2];
  IPC::Encoder *v24;

  v8 = *(_QWORD *)(a2 + 40);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 56))(&v22, a2);
  v9 = *(os_unfair_lock_s **)(a1 + 32);
  v10 = (unsigned int *)(a1 + 120);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *a3;
  *a3 = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a2 + 8));
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v13 = &off_1E34BEC38;
  v13[1] = a1;
  v13[2] = a1;
  v13[3] = v12;
  v13[4] = a2;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v15 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v15 = 8;
  *(_QWORD *)(v15 + 8) = v8;
  *(_QWORD *)(v15 + 528) = v15 + 16;
  *(_QWORD *)(v15 + 536) = v15 + 16;
  *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v15 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
  v24 = (IPC::Encoder *)v15;
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode((IPC::Encoder *)v15, a4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, (uint64_t *)&v22);
  v23[0] = (uint64_t)v13;
  v23[1] = v14;
  IPC::Connection::sendMessageWithAsyncReply(v9, &v24, v23, 0, 0);
  v17 = v23[0];
  v23[0] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v19, v20);
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::NetworkLoad::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, CFTypeRef *this, uint64_t *a4)
{
  WTF::URL *v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  __int128 v20;
  WTF::StringImpl *v21;
  CFTypeRef v22;
  WTF::StringImpl *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  CFTypeRef v31;
  const void *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  const WTF::String *v37;
  const WTF::String *v38;
  CFTypeRef v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  CFTypeRef v43;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  __int128 v48;
  __int128 v49;
  WTF::StringImpl *v50;
  int v51;
  __int16 v52;
  CFTypeRef v53;
  char v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  CFTypeRef cf;
  const WTF::String *v69[11];
  WTF::StringImpl *v70;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v71;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 24) + 393))
  {
    v8 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)this);
    if (WTF::URL::protocolIsInFTPFamily(v8))
    {
      v10 = *(_QWORD *)(a1 + 2992);
      v11 = *(unsigned int **)(v10 + 24);
      *(_QWORD *)(v10 + 24) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v9);
        }
      }
      v14 = *(_QWORD *)(a1 + 2992);
      *(_QWORD *)(a1 + 2992) = 0;
      if (v14)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v14 + 8));
      WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v69);
      v15 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
      if (v15)
      {
        if (v15 == 1)
        {
          v16 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v16 = v46;
        }
      }
      else
      {
        v16 = 0;
      }
      v17 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 120));
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v18 = v46;
      if (v16)
        *(_DWORD *)v16 += 2;
      v46 = v16;
      v19 = *(WTF::StringImpl **)v17;
      if (*(_QWORD *)v17)
        *(_DWORD *)v19 += 2;
      v47 = v19;
      v20 = *(_OWORD *)(v17 + 8);
      v49 = *(_OWORD *)(v17 + 24);
      v48 = v20;
      if (v18)
        *(_DWORD *)v18 += 2;
      v50 = v18;
      v51 = 0;
      v52 = 2;
      v53 = 0;
      v54 = 1;
      WebKit::NetworkLoad::didCompleteWithError((WebKit::NetworkLoad *)a1, (const WebCore::ResourceError *)&v46, v69);
      v22 = v53;
      v53 = 0;
      if (v22)
        CFRelease(v22);
      v23 = v50;
      v50 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v21);
        else
          *(_DWORD *)v23 -= 2;
      }
      v40 = v47;
      v47 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v21);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v46;
      v46 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
        {
          WTF::StringImpl::destroy(v41, v21);
          if (!v18)
            goto LABEL_48;
LABEL_46:
          if (*(_DWORD *)v18 == 2)
          {
            WTF::StringImpl::destroy(v18, v21);
            if (!v16)
            {
LABEL_54:
              if (*a4)
              {
                WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&v46);
                v42 = *a4;
                *a4 = 0;
                (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v42 + 16))(v42, &v46);
                (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
                v43 = cf;
                cf = 0;
                if (v43)
                  CFRelease(v43);
                WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v46);
              }
              v44 = v71;
              v71 = 0;
              if (v44)
                WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v44);
              v45 = v70;
              v70 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, v21);
                else
                  *(_DWORD *)v45 -= 2;
              }
              return;
            }
LABEL_51:
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v21);
            else
              *(_DWORD *)v16 -= 2;
            goto LABEL_54;
          }
          *(_DWORD *)v18 -= 2;
LABEL_48:
          if (!v16)
            goto LABEL_54;
          goto LABEL_51;
        }
        *(_DWORD *)v41 -= 2;
      }
      if (!v18)
        goto LABEL_48;
      goto LABEL_46;
    }
  }
  *(_WORD *)(a2 + 232) = *(_WORD *)(a2 + 232) & 0xC3FF | 0x400;
  WTF::URL::URL((uint64_t)&v46, (uint64_t *)(a1 + 3008));
  WTF::URL::URL((uint64_t)&v49 + 8, (uint64_t *)(a1 + 3048));
  v55 = *(_QWORD *)(a1 + 3088);
  v24 = *(_OWORD *)(a1 + 3096);
  *(_OWORD *)(a1 + 3096) = 0u;
  v56 = v24;
  *(_QWORD *)&v24 = *(_QWORD *)(a1 + 3112);
  *(_QWORD *)(a1 + 3112) = 0;
  v57 = v24;
  v25 = *(_QWORD *)(a1 + 3120);
  *(_QWORD *)(a1 + 3120) = 0;
  v58 = v25;
  *(_QWORD *)&v24 = *(_QWORD *)(a1 + 3128);
  *(_QWORD *)(a1 + 3128) = 0;
  v59 = v24;
  v26 = *(_QWORD *)(a1 + 3136);
  *(_QWORD *)(a1 + 3136) = 0;
  v60 = v26;
  *(_QWORD *)&v24 = *(_QWORD *)(a1 + 3144);
  *(_QWORD *)(a1 + 3144) = 0;
  v61 = v24;
  LODWORD(v26) = *(_DWORD *)(a1 + 3152);
  v63 = *(_BYTE *)(a1 + 3156);
  v62 = v26;
  v27 = *(_OWORD *)(a1 + 3160);
  *(_OWORD *)(a1 + 3160) = 0u;
  v64 = v27;
  v28 = *(_QWORD *)(a1 + 3176);
  *(_QWORD *)(a1 + 3176) = 0;
  v29 = *(_QWORD *)(a1 + 3184);
  v67 = *(_BYTE *)(a1 + 3192);
  v65 = v28;
  v66 = v29;
  v30 = *(const void **)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = 0;
  cf = v30;
  *((_BYTE *)this + 147) = HIBYTE(v62);
  WebCore::ResourceRequestBase::operator=(a1 + 3008, (uint64_t)this);
  v31 = this[24];
  if (v31)
    CFRetain(this[24]);
  v32 = *(const void **)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = v31;
  if (v32)
    CFRelease(v32);
  v33 = *(_QWORD *)(a1 + 16);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v34 = *(unsigned int **)(a1 + 8);
  if (v34)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  v36 = *a4;
  *a4 = 0;
  v37 = (const WTF::String *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v37 = &off_1E34BE098;
  *((_QWORD *)v37 + 1) = a1;
  *((_QWORD *)v37 + 2) = v34;
  *((_QWORD *)v37 + 3) = v36;
  v69[0] = v37;
  (*(void (**)(uint64_t, WTF::StringImpl **, CFTypeRef *, uint64_t, const WTF::String **))(*(_QWORD *)v33 + 40))(v33, &v46, this, a2, v69);
  v38 = v69[0];
  v69[0] = 0;
  if (v38)
    (*(void (**)(const WTF::String *))(*(_QWORD *)v38 + 8))(v38);
  v39 = cf;
  cf = 0;
  if (v39)
    CFRelease(v39);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v46);
}

uint64_t WebKit::NetworkLoad::didReceiveInformationalResponse(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

WTF::StringImpl *WebKit::NetworkLoad::wasBlocked(WebKit::NetworkLoad *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  CFTypeRef v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef cf;

  v1 = *((_QWORD *)this + 2);
  WebKit::blockedError((WebKit::NetworkLoad *)((char *)this + 3008), (uint64_t)&v7);
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v1 + 80))(v1, &v7);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkLoad::cannotShowURL(WebKit::NetworkLoad *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  CFTypeRef v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef cf;

  v1 = *((_QWORD *)this + 2);
  WebKit::cannotShowURLError((WebKit::NetworkLoad *)((char *)this + 3008), (uint64_t)&v7);
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v1 + 80))(v1, &v7);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkLoad::wasBlockedByRestrictions(WebKit::NetworkLoad *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  CFTypeRef v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef cf;

  v1 = *((_QWORD *)this + 2);
  WebKit::wasBlockedByRestrictionsError((WebKit::NetworkLoad *)((char *)this + 3008), (uint64_t)&v7);
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v1 + 80))(v1, &v7);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkLoad::wasBlockedByDisabledFTP(WebKit::NetworkLoad *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  CFTypeRef v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef cf;

  v1 = *((_QWORD *)this + 2);
  WebKit::ftpDisabledError((WebKit::NetworkLoad *)((char *)this + 3008), (uint64_t)&v7);
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v1 + 80))(v1, &v7);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

IPC::Encoder *WebKit::NetworkLoad::didNegotiateModernTLS(IPC::Encoder *this, const WTF::URL *a2)
{
  uint64_t *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v2 = (uint64_t *)((char *)this + 32);
  if (*((_QWORD *)this + 4))
  {
    v4 = (_QWORD *)*((_QWORD *)this + 3);
    v5 = v4[2];
    v4 += 2;
    v6 = (*(uint64_t (**)(_QWORD *))(v5 + 56))(v4);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 312;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v11 = (IPC::Encoder *)v7;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, v2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*v4 + 32))(v4, &v11, 0);
    this = v11;
    v11 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder(this, v8);
      return (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
  }
  return this;
}

uint64_t WebKit::NetworkLoad::setH2PingCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7[2];
  __int128 v8;
  __int128 v9;
  WTF::StringImpl *v10;
  int v11;
  __int16 v12;
  CFTypeRef cf;
  char v14;
  char v15;
  _OWORD v16[3];
  WTF::StringImpl *v17;
  int v18;
  __int16 v19;
  CFTypeRef v20;
  char v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 2992);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v4 + 72))(v4, a2, a3);
  WebCore::createInternalError();
  v19 = v12;
  v18 = v11;
  v16[0] = *(_OWORD *)v7;
  v16[1] = v8;
  v16[2] = v9;
  v17 = v10;
  v20 = cf;
  v21 = v14;
  v22 = 1;
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v6 + 16))(v6, v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v22 != -1)
    ((void (*)(char *, _OWORD *))off_1E34BDF68[v22])(&v15, v16);
  return 0;
}

_DWORD **WebKit::NetworkLoad::attributedBundleIdentifier@<X0>(_DWORD **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result[374];
  if (v3 && (v4 = *((_QWORD *)v3 + 2)) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v6 = a2;
    return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((_DWORD **)(v5 + 824), &v6, a3);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebKit::NetworkLoadChecker::NetworkLoadChecker(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, char a14, uint64_t *a15, char a16, int a17, __int16 a18, int a19, char a20,char a21)
{
  int v24;
  uint64_t v25;
  __int128 v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unsigned int *v36;
  char isSameOrigin;
  int v38;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;

  *(_QWORD *)a1 = 0;
  v24 = *a5;
  *(_DWORD *)(a1 + 19) = *(int *)((char *)a5 + 3);
  *(_DWORD *)(a1 + 16) = v24;
  v25 = *((_QWORD *)a5 + 1);
  *((_QWORD *)a5 + 1) = 0;
  *(_QWORD *)(a1 + 24) = v25;
  v26 = *((_OWORD *)a5 + 2);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a5 + 1);
  *(_OWORD *)(a1 + 48) = v26;
  *(_BYTE *)(a1 + 65) = a16;
  *(_WORD *)(a1 + 66) = a18;
  *(_QWORD *)(a1 + 72) = a6;
  v27 = (unsigned int *)(a2 + 120);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = a7;
  *(_OWORD *)(a1 + 96) = 0u;
  v29 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 96) = v29;
  LODWORD(v29) = *((_DWORD *)a8 + 2);
  *((_DWORD *)a8 + 2) = 0;
  *(_DWORD *)(a1 + 104) = v29;
  LODWORD(v29) = *((_DWORD *)a8 + 3);
  *((_DWORD *)a8 + 3) = 0;
  *(_DWORD *)(a1 + 108) = v29;
  *(_OWORD *)(a1 + 112) = 0u;
  v30 = a8[2];
  a8[2] = 0;
  *(_QWORD *)(a1 + 112) = v30;
  LODWORD(v30) = *((_DWORD *)a8 + 6);
  *((_DWORD *)a8 + 6) = 0;
  *(_DWORD *)(a1 + 120) = v30;
  LODWORD(v30) = *((_DWORD *)a8 + 7);
  *((_DWORD *)a8 + 7) = 0;
  *(_DWORD *)(a1 + 124) = v30;
  WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)(a1 + 128));
  WTF::URL::URL(a1 + 160, a9);
  WTF::URL::URL(a1 + 200, a10);
  v31 = *a11;
  *a11 = 0;
  *(_QWORD *)(a1 + 240) = v31;
  v32 = *a12;
  *a12 = 0;
  *(_QWORD *)(a1 + 248) = v32;
  v33 = *a13;
  *a13 = 0;
  *(_QWORD *)(a1 + 256) = v33;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_WORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  WTF::URL::invalidate((WTF::URL *)(a1 + 344));
  *(_QWORD *)(a1 + 384) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 384));
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_WORD *)(a1 + 448) = 257;
  *(_QWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  WTF::URL::invalidate((WTF::URL *)(a1 + 472));
  *(_BYTE *)(a1 + 512) = a14;
  v34 = *a15;
  *a15 = 0;
  *(_QWORD *)(a1 + 520) = v34;
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 529) = a20;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 536));
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 736));
  *(_QWORD *)(a1 + 976) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_BYTE *)(a1 + 874) = *(_BYTE *)(a1 + 874) & 0xF1 | 4;
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)(a1 + 992));
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_BYTE *)(a1 + 1136) = a21;
  if (a4)
    ++*a4;
  *(_QWORD *)(a1 + 1144) = a4;
  if (a3)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 56), a3 + 48);
    v36 = *(unsigned int **)(a3 + 56);
    if (v36)
    {
      do
        v43 = __ldaxr(v36);
      while (__stlxr(v43 + 1, v36));
    }
  }
  else
  {
    v36 = 0;
  }
  *(_QWORD *)(a1 + 1152) = v36;
  *(_BYTE *)(a1 + 1160) = 0;
  if (!*(_BYTE *)(a1 + 1136))
  {
    v40 = *(unsigned int **)(a1 + 248);
    if (v40)
    {
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 + 1, v40));
    }
    v42 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v40;
    if (v42)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v42, v35);
  }
  isSameOrigin = WebKit::NetworkLoadChecker::isSameOrigin((WebKit::NetworkLoadChecker *)a1, (const WTF::URL *)(a1 + 160), *(const WebCore::SecurityOrigin **)(a1 + 240));
  *(_BYTE *)(a1 + 448) = isSameOrigin;
  v38 = *((unsigned __int8 *)a5 + 2);
  if (v38 == 2)
  {
    isSameOrigin = 1;
  }
  else if (v38 != 1)
  {
    if (*((_BYTE *)a5 + 2))
      return a1;
    isSameOrigin = 0;
  }
  *(_BYTE *)(a1 + 64) = isSameOrigin;
  return a1;
}

WTF::StringImpl *WebKit::NetworkLoadChecker::checkRedirection(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceResponse *a4, uint64_t a5, WTF::StringImpl **a6)
{
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  CFTypeRef v48;
  CFTypeRef v49;
  CFTypeRef v50;
  const WTF::URL *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  __int128 v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  const void *v82;
  const void *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  CFTypeRef v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  CFTypeRef v107;
  WTF::StringImpl *v108;
  CFTypeRef v109;
  CFTypeRef v110;
  WTF::StringImpl *v111;
  const void *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  unsigned int v121;
  unsigned int v122;
  _QWORD v123[6];
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  CFTypeRef v136;
  _BYTE v137[40];
  _QWORD v138[6];
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  char v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  CFTypeRef v151;
  _QWORD v152[7];
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _BYTE v166[19];
  CFTypeRef cf;
  char v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  uint64_t v173[5];
  uint64_t v174[5];
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  char v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  CFTypeRef v188;
  uint64_t v189[5];
  uint64_t v190;
  _BYTE v191[24];
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  _BYTE v204[19];
  CFTypeRef v205;
  char v206;
  int v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  char v211;
  const void *v212;
  _BYTE v213[9];

  WebKit::NetworkLoadChecker::validateResponse((WebKit::NetworkLoadChecker *)a1, (const WebCore::ResourceRequest *)a2, (WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)a4, (uint64_t)&v208);
  if (v211)
  {
    v12 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a3);
    if (v12)
      *(_DWORD *)v12 += 2;
    v171 = v12;
    MEMORY[0x19AEB7BFC](&v208);
    v13 = v210;
    if (v210)
      *(_DWORD *)v210 += 2;
    v170 = v13;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"Cross-origin redirection to ", 29, (uint64_t *)&v171, (uint64_t)" denied by Cross-Origin Resource Sharing policy: ", 50, (uint64_t *)&v170, &v120);
    WebKit::redirectionError((uint64_t)&v172, a4, (_DWORD **)&v120);
    v14 = *a6;
    *a6 = 0;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v172);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
    if (v207 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34BDF88[v207])(&v119, &v172);
    v207 = -1;
    v16 = v120;
    v120 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v22 = v170;
    v170 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v15);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v171;
    v171 = 0;
    if (!v23)
      goto LABEL_97;
    goto LABEL_27;
  }
  v17 = *(unsigned __int8 *)(a1 + 20);
  if (v17 == 2)
  {
    WTF::URL::URL((uint64_t)&v120, (uint64_t *)a2);
    WTF::URL::URL((uint64_t)v123, (uint64_t *)(a2 + 40));
    v123[5] = *(_QWORD *)(a2 + 80);
    v24 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a2 + 88) = 0u;
    v124 = v24;
    *(_QWORD *)&v24 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 104) = 0;
    v125 = v24;
    v25 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;
    v126 = v25;
    *(_QWORD *)&v24 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    v127 = v24;
    v26 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a2 + 128) = 0;
    v128 = v26;
    *(_QWORD *)&v24 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    v129 = v24;
    LODWORD(v26) = *(_DWORD *)(a2 + 144);
    v131 = *(_BYTE *)(a2 + 148);
    v130 = v26;
    v27 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a2 + 152) = 0u;
    v132 = v27;
    v135 = *(_BYTE *)(a2 + 184);
    v28 = *(_QWORD *)(a2 + 168);
    v29 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 168) = 0;
    v133 = v28;
    v134 = v29;
    v30 = *(const void **)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    v136 = v30;
    WTF::URL::URL((uint64_t)v137, (uint64_t *)a3);
    WTF::URL::URL((uint64_t)v138, (uint64_t *)(a3 + 40));
    v138[5] = *(_QWORD *)(a3 + 80);
    v31 = *(_OWORD *)(a3 + 88);
    *(_OWORD *)(a3 + 88) = 0u;
    v139 = v31;
    *(_QWORD *)&v31 = *(_QWORD *)(a3 + 104);
    *(_QWORD *)(a3 + 104) = 0;
    v140 = v31;
    v32 = *(_QWORD *)(a3 + 112);
    *(_QWORD *)(a3 + 112) = 0;
    v141 = v32;
    *(_QWORD *)&v31 = *(_QWORD *)(a3 + 120);
    *(_QWORD *)(a3 + 120) = 0;
    v142 = v31;
    v33 = *(_QWORD *)(a3 + 128);
    *(_QWORD *)(a3 + 128) = 0;
    v143 = v33;
    *(_QWORD *)&v31 = *(_QWORD *)(a3 + 136);
    *(_QWORD *)(a3 + 136) = 0;
    v144 = v31;
    LODWORD(v33) = *(_DWORD *)(a3 + 144);
    v146 = *(_BYTE *)(a3 + 148);
    v145 = v33;
    v34 = *(_OWORD *)(a3 + 152);
    *(_OWORD *)(a3 + 152) = 0u;
    v147 = v34;
    v150 = *(_BYTE *)(a3 + 184);
    v35 = *(_QWORD *)(a3 + 168);
    v36 = *(_QWORD *)(a3 + 176);
    *(_QWORD *)(a3 + 168) = 0;
    v148 = v35;
    v149 = v36;
    v37 = *(const void **)(a3 + 192);
    *(_QWORD *)(a3 + 192) = 0;
    v151 = v37;
    WTF::URL::URL((uint64_t)v152, (uint64_t *)a4);
    v38 = *(_OWORD *)((char *)a4 + 56);
    *(_OWORD *)((char *)a4 + 56) = 0u;
    v39 = *(_OWORD *)((char *)a4 + 72);
    *(_OWORD *)((char *)a4 + 72) = 0u;
    v40 = *((_QWORD *)a4 + 5);
    v41 = *((_QWORD *)a4 + 6);
    *((_QWORD *)a4 + 5) = 0;
    v152[5] = v40;
    v152[6] = v41;
    v153 = v38;
    v154 = v39;
    *(_QWORD *)&v38 = *((_QWORD *)a4 + 11);
    *((_QWORD *)a4 + 11) = 0;
    v155 = v38;
    v42 = *((_QWORD *)a4 + 12);
    *((_QWORD *)a4 + 12) = 0;
    v156 = v42;
    *(_QWORD *)&v38 = *((_QWORD *)a4 + 13);
    *((_QWORD *)a4 + 13) = 0;
    v157 = v38;
    v43 = *((_QWORD *)a4 + 14);
    *((_QWORD *)a4 + 14) = 0;
    v158 = v43;
    LOBYTE(v159) = 0;
    v160 = 0;
    if (*((_BYTE *)a4 + 128))
    {
      v44 = *((_QWORD *)a4 + 15);
      *((_QWORD *)a4 + 15) = 0;
      v159 = v44;
      v160 = 1;
    }
    v164 = *(_OWORD *)((char *)a4 + 184);
    v165 = *(_OWORD *)((char *)a4 + 200);
    *(_OWORD *)v166 = *(_OWORD *)((char *)a4 + 216);
    *(_DWORD *)&v166[15] = *(_DWORD *)((char *)a4 + 231);
    v161 = *(_OWORD *)((char *)a4 + 136);
    v162 = *(_OWORD *)((char *)a4 + 152);
    v163 = *(_OWORD *)((char *)a4 + 168);
    v45 = (const void *)*((_QWORD *)a4 + 30);
    *((_QWORD *)a4 + 30) = 0;
    cf = v45;
    v168 = *((_BYTE *)a4 + 248);
    WebKit::NetworkLoadChecker::RedirectionTriplet::RedirectionTriplet((uint64_t)&v172, (uint64_t)&v120);
    v207 = 0;
    v46 = *a6;
    *a6 = 0;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v46 + 16))(v46, &v172);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 8))(v46);
    if (v207 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34BDF88[v207])(&v119, &v172);
    v207 = -1;
    v48 = cf;
    cf = 0;
    if (v48)
      CFRelease(v48);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v152, v47);
    v49 = v151;
    v151 = 0;
    if (v49)
      CFRelease(v49);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v137);
    v50 = v136;
    v136 = 0;
    if (v50)
      CFRelease(v50);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v120);
    goto LABEL_97;
  }
  if (v17 != 1)
  {
    if (*(_BYTE *)(a1 + 17) == 3)
    {
      if (!*(_BYTE *)(a1 + 448)
        || (v51 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2),
            (WebKit::NetworkLoadChecker::isSameOrigin((WebKit::NetworkLoadChecker *)a1, v51, *(const WebCore::SecurityOrigin **)(a1 + 240)) & 1) == 0))
      {
        v52 = WebCore::ResourceResponseBase::url(a4);
        WebCore::ResourceResponseBase::httpHeaderField();
        MEMORY[0x19AEABB24](&v120, v52, &v172, 0);
        v54 = v172;
        v172 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v53);
          else
            *(_DWORD *)v54 -= 2;
        }
        v55 = *(_QWORD *)(a1 + 1144);
        if (v55)
        {
          v56 = WTF::URL::protocol((WTF::URL *)&v120);
          if ((WebKit::NetworkSchemeRegistry::shouldTreatURLSchemeAsCORSEnabled(v55, v56, v57) & 1) == 0)
          {
            v63 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a3);
            if (v63)
              *(_DWORD *)v63 += 2;
            v118 = v63;
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Cross-origin redirection to ", 29, (uint64_t *)&v118, (uint64_t)" denied by Cross-Origin Resource Sharing policy: not allowed to follow a cross-origin CORS redirection with non CORS scheme", 124, &v119);
            WebKit::redirectionError((uint64_t)&v172, a4, (_DWORD **)&v119);
            v64 = *a6;
            *a6 = 0;
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v64 + 16))(v64, &v172);
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v64 + 8))(v64);
            if (v207 != -1)
              ((void (*)(_BYTE *, WTF::StringImpl **))off_1E34BDF88[v207])(v213, &v172);
            v207 = -1;
            v65 = v119;
            v119 = 0;
            if (v65)
            {
              if (*(_DWORD *)v65 == 2)
                WTF::StringImpl::destroy(v65, v15);
              else
                *(_DWORD *)v65 -= 2;
            }
            v115 = v118;
            v118 = 0;
            if (!v115)
            {
LABEL_120:
              v23 = v120;
              v120 = 0;
              if (!v23)
                goto LABEL_97;
LABEL_27:
              if (*(_DWORD *)v23 != 2)
              {
                *(_DWORD *)v23 -= 2;
                goto LABEL_97;
              }
LABEL_96:
              WTF::StringImpl::destroy(v23, v15);
              goto LABEL_97;
            }
LABEL_117:
            if (*(_DWORD *)v115 == 2)
              WTF::StringImpl::destroy(v115, v15);
            else
              *(_DWORD *)v115 -= 2;
            goto LABEL_120;
          }
        }
        if (v122 > v121)
        {
          v58 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a3);
          if (v58)
            *(_DWORD *)v58 += 2;
          v117 = v58;
          v59 = v120;
          if (v120)
            *(_DWORD *)v120 += 2;
          v116 = v59;
          WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Cross-origin redirection to ", 29, (uint64_t *)&v117, (uint64_t)" denied by Cross-Origin Resource Sharing policy: redirection URL ", 66, (uint64_t *)&v116, (uint64_t)" has credentials", 17, &v119);
          WebKit::redirectionError((uint64_t)&v172, a4, (_DWORD **)&v119);
          v60 = *a6;
          *a6 = 0;
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v60 + 16))(v60, &v172);
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v60 + 8))(v60);
          if (v207 != -1)
            ((void (*)(_BYTE *, WTF::StringImpl **))off_1E34BDF88[v207])(v213, &v172);
          v207 = -1;
          v61 = v119;
          v119 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2)
              WTF::StringImpl::destroy(v61, v15);
            else
              *(_DWORD *)v61 -= 2;
          }
          v66 = v116;
          v116 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2)
              WTF::StringImpl::destroy(v66, v15);
            else
              *(_DWORD *)v66 -= 2;
          }
          v115 = v117;
          v117 = 0;
          if (!v115)
            goto LABEL_120;
          goto LABEL_117;
        }
        v62 = v120;
        v120 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, v53);
          else
            *(_DWORD *)v62 -= 2;
        }
      }
    }
    v67 = *(_QWORD *)(a1 + 464) + 1;
    *(_QWORD *)(a1 + 464) = v67;
    if (v67 < 0x15)
    {
      WTF::URL::operator=(a1 + 472, (WTF::StringImpl *)(a1 + 160));
      v70 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a3);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 160), (WTF::StringImpl *)v70);
      v71 = *(_OWORD *)(v70 + 24);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(v70 + 8);
      *(_OWORD *)(a1 + 184) = v71;
      v72 = *a6;
      *a6 = 0;
      v172 = v72;
      WTF::URL::URL((uint64_t)v173, (uint64_t *)a2);
      WTF::URL::URL((uint64_t)v174, (uint64_t *)(a2 + 40));
      v73 = *(_QWORD *)(a2 + 80);
      v74 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a2 + 88) = 0u;
      v176 = v74;
      *(_QWORD *)&v74 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 104) = 0;
      v175 = v73;
      v177 = v74;
      v75 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a2 + 112) = 0;
      v178 = v75;
      v76 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a2 + 120) = 0;
      v179 = v76;
      v77 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a2 + 128) = 0;
      v180 = v77;
      v78 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a2 + 136) = 0;
      v181 = v78;
      LODWORD(v77) = *(_DWORD *)(a2 + 144);
      v183 = *(_BYTE *)(a2 + 148);
      v182 = v77;
      v79 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a2 + 152) = 0u;
      v184 = v79;
      v80 = *(_QWORD *)(a2 + 168);
      v81 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a2 + 168) = 0;
      v187 = *(_BYTE *)(a2 + 184);
      v185 = v80;
      v186 = v81;
      v82 = *(const void **)(a2 + 192);
      *(_QWORD *)(a2 + 192) = 0;
      v188 = v82;
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v189, a4);
      v83 = (const void *)*((_QWORD *)a4 + 30);
      v205 = v83;
      if (v83)
        CFRetain(v83);
      v206 = *((_BYTE *)a4 + 248);
      v84 = WTF::fastMalloc((WTF *)0x1D8);
      *(_QWORD *)v84 = off_1E34BE0C0;
      v85 = v172;
      v172 = 0;
      *(_QWORD *)(v84 + 8) = v85;
      WTF::URL::URL(v84 + 16, v173);
      WTF::URL::URL(v84 + 56, v174);
      *(_QWORD *)(v84 + 96) = v175;
      *(_QWORD *)(v84 + 104) = v176;
      v86 = *((_QWORD *)&v176 + 1);
      v176 = 0u;
      *(_QWORD *)(v84 + 112) = v86;
      v87 = v177;
      v177 = 0;
      *(_QWORD *)(v84 + 120) = v87;
      v88 = v178;
      v178 = 0;
      *(_QWORD *)(v84 + 128) = v88;
      v89 = v179;
      v179 = 0;
      *(_QWORD *)(v84 + 136) = v89;
      v90 = v180;
      v180 = 0;
      *(_QWORD *)(v84 + 144) = v90;
      v91 = v181;
      v181 = 0;
      *(_QWORD *)(v84 + 152) = v91;
      LODWORD(v90) = v182;
      *(_BYTE *)(v84 + 164) = v183;
      *(_DWORD *)(v84 + 160) = v90;
      *(_QWORD *)(v84 + 168) = v184;
      v92 = *((_QWORD *)&v184 + 1);
      v184 = 0u;
      *(_QWORD *)(v84 + 176) = v92;
      *(_QWORD *)(v84 + 184) = v185;
      v93 = v186;
      *(_BYTE *)(v84 + 200) = v187;
      *(_QWORD *)(v84 + 192) = v93;
      v94 = v188;
      v185 = 0;
      v188 = 0;
      *(_QWORD *)(v84 + 208) = v94;
      WTF::URL::URL(v84 + 216, v189);
      v95 = v190;
      v190 = 0;
      *(_QWORD *)(v84 + 256) = v95;
      *(_OWORD *)(v84 + 264) = *(_OWORD *)v191;
      *(_QWORD *)(v84 + 280) = *(_QWORD *)&v191[16];
      *(_QWORD *)(v84 + 288) = v192;
      v96 = *((_QWORD *)&v192 + 1);
      *(_OWORD *)&v191[8] = 0u;
      v192 = 0u;
      *(_QWORD *)(v84 + 296) = v96;
      v97 = v193;
      v193 = 0;
      *(_QWORD *)(v84 + 304) = v97;
      v98 = v194;
      v194 = 0;
      *(_QWORD *)(v84 + 312) = v98;
      v99 = v195;
      v195 = 0;
      *(_QWORD *)(v84 + 320) = v99;
      v100 = v196;
      v196 = 0;
      *(_QWORD *)(v84 + 328) = v100;
      *(_BYTE *)(v84 + 336) = 0;
      *(_BYTE *)(v84 + 344) = 0;
      if (v198)
      {
        v101 = v197;
        v197 = 0;
        *(_QWORD *)(v84 + 336) = v101;
        *(_BYTE *)(v84 + 344) = 1;
      }
      v102 = v202;
      v103 = v203;
      v104 = *(_OWORD *)v204;
      *(_DWORD *)(v84 + 447) = *(_DWORD *)&v204[15];
      v105 = v200;
      v106 = v201;
      *(_OWORD *)(v84 + 352) = v199;
      *(_OWORD *)(v84 + 368) = v105;
      *(_OWORD *)(v84 + 416) = v103;
      *(_OWORD *)(v84 + 432) = v104;
      *(_OWORD *)(v84 + 384) = v106;
      *(_OWORD *)(v84 + 400) = v102;
      v107 = v205;
      v205 = 0;
      *(_QWORD *)(v84 + 456) = v107;
      *(_BYTE *)(v84 + 464) = v206;
      v120 = (WTF::StringImpl *)v84;
      WebKit::NetworkLoadChecker::checkRequest(a1, a3, a5, &v120);
      if (v120)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v120 + 8))(v120);
      v109 = v205;
      v205 = 0;
      if (v109)
        CFRelease(v109);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v189, v108);
      v110 = v188;
      v188 = 0;
      if (v110)
        CFRelease(v110);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v173);
      v111 = v172;
      v172 = 0;
      if (v111)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v111 + 8))(v111);
      goto LABEL_97;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v68 = v172;
    v120 = v172;
    WebKit::redirectionError((uint64_t)&v172, a4, (_DWORD **)&v120);
    v69 = *a6;
    *a6 = 0;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v69 + 16))(v69, &v172);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v69 + 8))(v69);
    if (v207 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34BDF88[v207])(&v119, &v172);
    v207 = -1;
    if (v68)
    {
      if (*(_DWORD *)v68 != 2)
      {
        *(_DWORD *)v68 -= 2;
        goto LABEL_97;
      }
      v23 = v68;
      goto LABEL_96;
    }
    goto LABEL_97;
  }
  v18 = *(WTF::StringImpl **)WebCore::ResourceResponseBase::url(a4);
  if (v18)
    *(_DWORD *)v18 += 2;
  v169 = v18;
  v172 = (WTF::StringImpl *)"Not allowed to follow a redirection while loading ";
  v173[0] = 51;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v172, (uint64_t *)&v169, &v120);
  if (!v120)
  {
    __break(0xC471u);
    return result;
  }
  WebKit::redirectionError((uint64_t)&v172, a4, (_DWORD **)&v120);
  v20 = *a6;
  *a6 = 0;
  (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v20 + 16))(v20, &v172);
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
  if (v207 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34BDF88[v207])(&v119, &v172);
  v207 = -1;
  v21 = v120;
  v120 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v15);
    else
      *(_DWORD *)v21 -= 2;
  }
  v23 = v169;
  v169 = 0;
  if (v23)
    goto LABEL_27;
LABEL_97:
  v112 = v212;
  v212 = 0;
  if (v112)
    CFRelease(v112);
  v113 = v210;
  v210 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, v15);
    else
      *(_DWORD *)v113 -= 2;
  }
  v114 = v209;
  v209 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, v15);
    else
      *(_DWORD *)v114 -= 2;
  }
  result = v208;
  v208 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::redirectionError(uint64_t a1, WebCore::ResourceResponseBase *this, _DWORD **a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  __int128 v7;
  __int128 v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  _DWORD *v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  char v20;

  v5 = WebCore::ResourceResponseBase::url(this);
  v6 = *(WTF::StringImpl **)v5;
  if (*(_QWORD *)v5)
    *(_DWORD *)v6 += 2;
  v7 = *(_OWORD *)(v5 + 8);
  v8 = *(_OWORD *)(v5 + 24);
  v9 = *a3;
  if (*a3)
    *v9 += 2;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = 0;
  v18 = 2;
  v19 = 0;
  v20 = 1;
  v13 = v6;
  *(_QWORD *)a1 = 0;
  WTF::URL::URL(a1 + 8, (uint64_t *)&v13);
  v11 = v13;
  *(_QWORD *)(a1 + 48) = v16;
  *(_DWORD *)(a1 + 56) = v17;
  *(_WORD *)(a1 + 60) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  *(_BYTE *)(a1 + 72) = v20;
  *(_DWORD *)(a1 + 656) = 1;
  v19 = 0;
  v16 = 0;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  return 0;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t result;
  uint64_t v11[2];
  uint64_t v12[2];
  uint64_t v13[2];

  v13[0] = a1;
  v13[1] = a2;
  v12[0] = a4;
  v12[1] = a5;
  v11[0] = a7;
  v11[1] = a8;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(v13, a3, v12, a6, v11, a9);
  if (!*a9)
    __break(0xC471u);
  return result;
}

uint64_t WebCore::ResourceError::ResourceError(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  v5 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v5;
  v6 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  return a1;
}

uint64_t WTF::StringView::trim<BOOL ()(char16_t)>(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const char *i;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;

  v4 = *(const char **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 12))
  {
    if ((_DWORD)v5)
    {
      v10 = 0;
      v11 = (v5 - 1);
      for (i = *(const char **)a1; ; i += 2)
      {
        result = a2(*(unsigned __int16 *)i);
        if ((result & 1) == 0)
          break;
        if (v5 == ++v10)
          return (uint64_t)"";
      }
      if ((_DWORD)v5 != 1)
      {
        while (v11 < v5)
        {
          result = a2(*(unsigned __int16 *)&v4[2 * v11]);
          if ((_DWORD)result)
          {
            if ((_DWORD)--v11)
              continue;
          }
          goto LABEL_25;
        }
        goto LABEL_30;
      }
LABEL_25:
      if ((_DWORD)v10 || (_DWORD)v11 != *(_DWORD *)(a1 + 8) - 1)
      {
        if (v5 - v10 >= (v11 - v10 + 1))
          return (uint64_t)i;
        goto LABEL_30;
      }
      return *(_QWORD *)a1;
    }
    return *(_QWORD *)a1;
  }
  if (!(_DWORD)v5)
    return *(_QWORD *)a1;
  v6 = 0;
  v7 = (v5 - 1);
  i = "";
  while (1)
  {
    result = a2(v4[v6]);
    if ((result & 1) == 0)
      break;
    if (v5 == ++v6)
      return (uint64_t)i;
  }
  if ((_DWORD)v5 != 1)
  {
    while (v7 < v5)
    {
      result = a2(v4[v7]);
      if ((_DWORD)result)
      {
        if ((_DWORD)--v7)
          continue;
      }
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_17:
  if (!(_DWORD)v6 && (_DWORD)v7 == *(_DWORD *)(a1 + 8) - 1)
    return *(_QWORD *)a1;
  if (v5 - v6 >= (v7 - v6 + 1))
    return (uint64_t)&v4[v6];
LABEL_30:
  __break(1u);
  return result;
}

uint64_t WTF::isASCIIWhitespaceWithoutFF<char16_t>(unsigned int a1)
{
  return (a1 < 0x21) & (0x100002600uLL >> a1);
}

uint64_t WebKit::NetworkLoadChecker::accessControlErrorForValidationHandler(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  WTF::StringImpl *v4;
  __int128 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  __int128 v10;
  __int128 v11;
  _DWORD *v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  char v16;

  v4 = *(WTF::StringImpl **)(a2 + 160);
  if (v4)
    *(_DWORD *)v4 += 2;
  v9 = v4;
  v5 = *(_OWORD *)(a2 + 184);
  v10 = *(_OWORD *)(a2 + 168);
  v11 = v5;
  if (a3)
    *a3 += 2;
  v13 = 0;
  v14 = 2;
  v15 = 0;
  v16 = 1;
  v12 = a3;
  *(_QWORD *)a1 = 0;
  WTF::URL::URL(a1 + 8, (uint64_t *)&v9);
  v7 = v9;
  *(_QWORD *)(a1 + 48) = v12;
  *(_DWORD *)(a1 + 56) = v13;
  *(_WORD *)(a1 + 60) = v14;
  *(_QWORD *)(a1 + 64) = v15;
  *(_BYTE *)(a1 + 72) = v16;
  *(_DWORD *)(a1 + 656) = 2;
  v15 = 0;
  v12 = 0;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  return 0;
}

uint64_t *WTF::CompletionHandler<void ()(WebCore::ContentExtensions::ContentExtensionsBackend &)>::CompletionHandler<WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = WTF::fastMalloc((WTF *)0xE8);
  v5 = *a2;
  *(_QWORD *)v4 = off_1E34BE128;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  WTF::URL::URL(v4 + 24, a2 + 2);
  WTF::URL::URL(v4 + 64, a2 + 7);
  *(_QWORD *)(v4 + 104) = a2[12];
  v7 = a2[13];
  a2[13] = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 112) = v7;
  v8 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(v4 + 120) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = 0;
  *(_DWORD *)(v4 + 128) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = 0;
  *(_DWORD *)(v4 + 132) = v8;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  v9 = a2[16];
  a2[16] = 0;
  *(_QWORD *)(v4 + 136) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = 0;
  *(_DWORD *)(v4 + 144) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = 0;
  *(_DWORD *)(v4 + 148) = v9;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v10 = a2[18];
  a2[18] = 0;
  *(_QWORD *)(v4 + 152) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = 0;
  *(_DWORD *)(v4 + 160) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = 0;
  *(_DWORD *)(v4 + 164) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 40);
  *(_BYTE *)(v4 + 172) = *((_BYTE *)a2 + 164);
  *(_DWORD *)(v4 + 168) = v10;
  v11 = a2[21];
  a2[21] = 0;
  *(_QWORD *)(v4 + 176) = v11;
  v12 = a2[22];
  a2[22] = 0;
  *(_QWORD *)(v4 + 184) = v12;
  v13 = a2[23];
  a2[23] = 0;
  *(_QWORD *)(v4 + 192) = v13;
  v14 = a2[24];
  *(_BYTE *)(v4 + 208) = *((_BYTE *)a2 + 200);
  *(_QWORD *)(v4 + 200) = v14;
  v15 = a2[26];
  a2[26] = 0;
  *(_QWORD *)(v4 + 216) = v15;
  v16 = a2[27];
  a2[27] = 0;
  *(_QWORD *)(v4 + 224) = v16;
  *a1 = v4;
  return a1;
}

_QWORD *WebKit::NetworkLoadChecker::processContentRuleListsForLoad(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebKit::NetworkLoadChecker::ContentExtensionResult,WebCore::ResourceError> &&)> &&)::$_0::~$_0(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = a1[27];
  a1[27] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[26];
  a1[26] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  v5 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return a1;
}

void WebKit::NetworkLoadChecker::storeRedirectionIfNeeded(WebKit::NetworkLoadChecker *this, const WebCore::ResourceRequest *a2, const WebCore::ResourceResponse *a3)
{
  const void *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  _BYTE v12[8];
  CFTypeRef v13[24];
  CFTypeRef v14;
  _BYTE v15[240];
  CFTypeRef cf;
  char v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v20;

  if (*((_BYTE *)this + 529))
  {
    v12[0] = 0;
    WebCore::ResourceRequest::ResourceRequest(v13, a2);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v15, a3);
    v5 = (const void *)*((_QWORD *)a3 + 30);
    cf = v5;
    if (v5)
      CFRetain(v5);
    v17 = *((_BYTE *)a3 + 248);
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v18);
    v6 = *((_DWORD *)this + 283);
    if (v6 == *((_DWORD *)this + 282))
    {
      WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NetworkTransactionInformation>((uint64_t)this + 1120, (unint64_t)v12);
    }
    else
    {
      WebCore::NetworkTransactionInformation::NetworkTransactionInformation(*((_QWORD *)this + 140) + 592 * v6, (uint64_t)v12);
      ++*((_DWORD *)this + 283);
    }
    v8 = v20;
    v20 = 0;
    if (v8)
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v8);
    v9 = v19;
    v19 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = cf;
    cf = 0;
    if (v10)
      CFRelease(v10);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v15, v7);
    v11 = v14;
    v14 = 0;
    if (v11)
      CFRelease(v11);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v13);
  }
}

unsigned int *WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::NetworkLoad>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int *result;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v17;

  v6 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v7;
  if (v7 > v6)
    WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v8 = *(unsigned int **)(a2 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  do
    v10 = __ldaxr(v8);
  while (__stlxr(v10 + 1, v8));
  v17 = (WTF *)v8;
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, (uint64_t *)&v17, a3);
  result = (unsigned int *)v17;
  v17 = 0;
  if (result)
  {
    do
    {
      v15 = __ldaxr(result);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, result));
    if (!v16)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
  }
  if (v8)
  {
    do
    {
      v13 = __ldaxr(v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v8));
    if (!v14)
    {
      atomic_store(1u, v8);
      return (unsigned int *)WTF::fastFree((WTF *)v8, v11);
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::NetworkLoad>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int *result;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int **v21;
  unsigned int v23;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  WTF *v29;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_2;
  v17 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v18 = *(_DWORD *)(v17 - 4);
    if (!v18)
      goto LABEL_28;
    v19 = 0;
    v20 = v18 - 1;
    do
    {
      v21 = (unsigned int **)(v17 + 8 * v20);
      if ((unint64_t)*v21 + 1 >= 2 && !*((_QWORD *)*v21 + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v21, a2);
        ++v19;
      }
    }
    while ((unint64_t)v20--);
    v17 = *(_QWORD *)a1;
    if (v19)
    {
      *(_DWORD *)(v17 - 16) += v19;
      v27 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v28 = *(_DWORD *)(v27 - 12);
      else
        v28 = 0;
      *(_DWORD *)(v27 - 12) = v28 - v19;
      v17 = *(_QWORD *)a1;
    }
    if (v17)
    {
      v23 = *(_DWORD *)(v17 - 4);
      if (v23 >= 9 && 6 * *(_DWORD *)(v17 - 12) < v23)
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
        v17 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v17)
        {
          v25 = 0;
          goto LABEL_32;
        }
LABEL_29:
        v25 = *(_DWORD *)(v17 - 12);
        v26 = 0x7FFFFFFF;
        if (v25 >= 0x7FFFFFFF)
          goto LABEL_33;
        goto LABEL_32;
      }
LABEL_28:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_29;
    }
  }
  v25 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_32:
  v26 = v25;
LABEL_33:
  *(_DWORD *)(a1 + 12) = 2 * v26;
LABEL_2:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  v8 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  do
    v10 = __ldaxr(v8);
  while (__stlxr(v10 + 1, v8));
  v29 = (WTF *)v8;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v29, a3);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v15 = __ldaxr(result);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, result));
    if (!v16)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v11);
    }
  }
  if (v8)
  {
    do
    {
      v13 = __ldaxr(v8);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v8));
    if (!v14)
    {
      atomic_store(1u, v8);
      return (unsigned int *)WTF::fastFree((WTF *)v8, v11);
    }
  }
  return result;
}

_QWORD *WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakListHashSet(_QWORD *a1, void *a2)
{
  void *v3;

  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)a1, a2);
  if (*a1)
    WTF::fastFree((WTF *)(*a1 - 16), v3);
  return a1;
}

void WebKit::NetworkLoadScheduler::~NetworkLoadScheduler(WebKit::NetworkLoadScheduler *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 3);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
    WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

WTF::StringImpl *WebKit::NetworkLoadScheduler::scheduleMainResourceLoad(WebKit::NetworkLoadScheduler *this, WebKit::NetworkLoad *a2)
{
  WebCore::ResourceRequestBase *v4;
  WTF::URL *v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF ***v13;
  WTF::StringImpl *v14;
  WTF **v15;
  WTF::StringImpl *v16;
  WTF **v17;
  int v18;
  NSObject *v19;
  int v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _BYTE buf[22];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (WebKit::NetworkLoad *)((char *)a2 + 120);
  v5 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebKit::NetworkLoad *)((char *)a2 + 120));
  WTF::URL::protocolHostAndPort(v5);
  if (!*((_QWORD *)this + 3)
    || !WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 3, &v23, v7))
  {
    goto LABEL_2;
  }
  WebCore::ResourceRequestBase::httpUserAgent(v4);
  v10 = v23;
  v11 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v12 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (!v23)
    v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (v10)
  {
    *(_DWORD *)v10 += 2;
    v12 = *v11;
  }
  v13 = (WTF ***)((char *)this + 16);
  *(_QWORD *)buf = v10;
  if (v22)
    v14 = v22;
  else
    v14 = v12;
  if (v14)
    *(_DWORD *)v14 += 2;
  *(_QWORD *)&buf[8] = v14;
  v15 = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>((WTF ***)this + 2, (WTF::StringImpl **)buf);
  WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair((WTF::StringImpl **)buf, v16);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v6);
    else
      *(_DWORD *)v22 -= 2;
  }
  v17 = *v13;
  if (*v13)
    v17 += 7 * *((unsigned int *)v17 - 1);
  if (v17 != v15 && (v18 = *((_DWORD *)v15 + 4)) != 0)
  {
    *((_DWORD *)v15 + 4) = v18 - 1;
    WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::NetworkLoad>((uint64_t)(v15 + 3), (uint64_t)a2, (uint64_t)buf);
    v19 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *((_DWORD *)v15 + 4);
      WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)(v15 + 3));
      v21 = v15[3];
      if (v21)
        LODWORD(v21) = *((_DWORD *)v21 - 3);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a2;
      v25 = 1024;
      v26 = v20;
      v27 = 1024;
      v28 = (int)v21;
      _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_DEFAULT, "%p - NetworkLoadScheduler::scheduleMainResourceLoad deferring load %p; %u pending preconnects; %u pending loads",
        buf,
        0x22u);
    }
  }
  else
  {
LABEL_2:
    v8 = *((_QWORD *)a2 + 374);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo::~PendingMainResourcePreconnectInfo(WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo *this, void *a2)
{
  void *v3;
  uint64_t v4;

  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)this + 8, a2);
  v4 = *((_QWORD *)this + 1);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v3);
}

uint64_t WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::takeFirst(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    v2 = 0;
    while (!*(_QWORD *)(*v1 + 8))
    {
      v1 = (uint64_t *)v1[2];
      if (!v1)
        goto LABEL_3;
    }
    v2 = v1;
  }
  else
  {
    v2 = 0;
  }
LABEL_3:
  v3 = *(_QWORD *)(*v2 + 8);
  WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove(a1, a1, v2);
  return v3;
}

uint64_t WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  if ((WTF::StringImpl **)v2 == a2)
    return 0;
LABEL_3:
  if ((WTF::StringImpl **)v2 != a2)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(a1, a2);
  return 1;
}

uint64_t WebKit::NetworkLoadScheduler::setResourceLoadSchedulingMode(uint64_t result, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  if (a3)
  {
    if (a3 == 1)
      return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkLoadScheduler::setResourceLoadSchedulingMode(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::LoadSchedulingMode)::$_0>((uint64_t)&v5, (uint64_t *)(result + 8), &v6);
  }
  else
  {
    v3 = (uint64_t *)(result + 8);
    v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(result + 8), &v6);
    return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::remove(v3, v4);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkLoadScheduler::setResourceLoadSchedulingMode(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::LoadSchedulingMode)::$_0>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = *a3 + ~(*a3 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = v6 + 16 * v13;
  v15 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v6 - 4);
        v22 = 0;
        v23 = v6 + 16 * v21;
        goto LABEL_27;
      }
      if (v15 == -1)
        v16 = (_QWORD *)v14;
      v13 = (v13 + v17) & v8;
      v14 = v6 + 16 * v13;
      v15 = *(_QWORD *)v14;
      ++v17;
    }
    while (*(_QWORD *)v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = (uint64_t)v16;
    }
  }
  *(_QWORD *)v14 = v9;
  v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v18 = 0;
  v28 = 0;
  std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::reset[abi:sn180100]((uint64_t **)(v14 + 8), v18);
  result = (uint64_t)std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::reset[abi:sn180100](&v28, 0);
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_23:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v14);
      v14 = result;
      v24 = *a2;
      if (*a2)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_23;
  }
  v23 = v24 + 16 * v27;
  v22 = 1;
LABEL_27:
  *(_QWORD *)v5 = v14;
  *(_QWORD *)(v5 + 8) = v23;
  *(_BYTE *)(v5 + 16) = v22;
  return result;
}

uint64_t WebKit::NetworkOriginAccessPatterns::allowAccessTo(WebKit::NetworkOriginAccessPatterns *this, const WebCore::UserContentURLPattern *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3 == *((_DWORD *)this + 4))
    return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::UserContentURLPattern const&>((uint64_t)this + 8, (unint64_t)a2);
  result = WebCore::UserContentURLPattern::UserContentURLPattern(*((_QWORD *)this + 1) + 32 * v3, (uint64_t)a2);
  ++*((_DWORD *)this + 5);
  return result;
}

void WebKit::NetworkProcess::~NetworkProcess(WebKit::NetworkProcess *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD **v50;
  _DWORD *v51;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 48);
  if (v3)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 47);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)*((_QWORD *)this + 47);
      do
      {
        v7 = *v6;
        if (*v6 != -1)
        {
          *v6 = 0;
          if (v7)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v7 + 16), a2);
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v8 = *((_QWORD *)this + 46);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = v8 + 8;
      do
      {
        if (*(_QWORD *)(v10 - 8) != -1)
          v10 = WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, a2);
        v10 += 24;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  WebCore::MessagePortChannelRegistry::~MessagePortChannelRegistry((WebKit::NetworkProcess *)((char *)this + 336));
  v12 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 16), v11);
  v13 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v13 + 8), v11);
  WebKit::WebSQLiteDatabaseTracker::~WebSQLiteDatabaseTracker((WebKit::NetworkProcess *)((char *)this + 264), (WebCore::SQLiteDatabaseTrackerClient *)v11);
  WebKit::NetworkContentRuleListManager::~NetworkContentRuleListManager((WebKit::NetworkProcess *)((char *)this + 240), v14);
  v16 = (void *)*((_QWORD *)this + 29);
  if (v16)
    os_release(v16);
  v17 = *((_QWORD *)this + 28);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v18)
    {
      v19 = (WTF::StringImpl ***)(v17 + 16);
      do
      {
        if (*(v19 - 2) != (WTF::StringImpl **)-1 && *v19)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v19, v15);
        v19 += 3;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)(v17 - 16), v15);
  }
  v20 = *((_QWORD *)this + 27);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      v22 = (uint64_t *)(v20 + 8);
      do
      {
        if (*(v22 - 1) != -1)
        {
          v23 = *v22;
          *v22 = 0;
          if (v23)
            WebCore::NetworkStorageSession::operator delete(v23, 0x128uLL);
        }
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v20 - 16), v15);
  }
  v24 = *((_QWORD *)this + 26);
  if (v24)
  {
    v25 = *(unsigned int *)(v24 - 4);
    if ((_DWORD)v25)
    {
      v26 = (uint64_t *)(v24 + 8);
      do
      {
        if (*(v26 - 1) != -1)
        {
          v27 = *v26;
          *v26 = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v24 - 16), v15);
  }
  v28 = *((_QWORD *)this + 25);
  if (v28)
    WTF::fastFree((WTF *)(v28 - 16), v15);
  v29 = *((_QWORD *)this + 24);
  if (v29)
  {
    v30 = *(unsigned int *)(v29 - 4);
    if ((_DWORD)v30)
    {
      v31 = (uint64_t *)(v29 + 16);
      do
      {
        if (*(v31 - 2) != -1)
        {
          v32 = *v31;
          *v31 = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        }
        v31 += 3;
        --v30;
      }
      while (v30);
    }
    WTF::fastFree((WTF *)(v29 - 16), v15);
  }
  v33 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v33)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v33 + 8), v15);
  v34 = *((_QWORD *)this + 22);
  if (v34)
  {
    v35 = *(unsigned int *)(v34 - 4);
    if ((_DWORD)v35)
    {
      v36 = (uint64_t *)(v34 + 8);
      do
      {
        if (*(v36 - 1) != -1)
        {
          v37 = *v36;
          *v36 = 0;
          if (v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        }
        v36 += 2;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree((WTF *)(v34 - 16), v15);
  }
  v38 = *((_QWORD *)this + 21);
  if (v38)
  {
    v39 = *(unsigned int *)(v38 - 4);
    if ((_DWORD)v39)
    {
      v40 = (uint64_t *)(v38 + 8);
      do
      {
        if (*(v40 - 1) != -1)
        {
          v41 = *v40;
          *v40 = 0;
          if (v41)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v41 + 8));
        }
        v40 += 2;
        --v39;
      }
      while (v39);
    }
    WTF::fastFree((WTF *)(v38 - 16), v15);
  }
  v42 = *((_QWORD *)this + 20);
  if (v42)
  {
    v43 = *(unsigned int *)(v42 - 4);
    if ((_DWORD)v43)
    {
      v44 = (uint64_t *)(v42 + 8);
      do
      {
        if (*(v44 - 1) != -1)
        {
          v45 = *v44;
          *v44 = 0;
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        }
        v44 += 2;
        --v43;
      }
      while (v43);
    }
    WTF::fastFree((WTF *)(v42 - 16), v15);
  }
  v46 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
  v47 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v15);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = *((_QWORD *)this + 16);
  if (v48)
  {
    v49 = *(unsigned int *)(v48 - 4);
    if ((_DWORD)v49)
    {
      v50 = (_DWORD **)(v48 + 8);
      do
      {
        if (*(v50 - 1) != (_DWORD *)-1)
        {
          v51 = *v50;
          *v50 = 0;
          if (v51)
          {
            if (v51[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
            else
              --v51[2];
          }
        }
        v50 += 2;
        --v49;
      }
      while (v49);
    }
    WTF::fastFree((WTF *)(v48 - 16), v15);
  }
  WebKit::AuxiliaryProcess::~AuxiliaryProcess(this);
}

void `non-virtual thunk to'WebKit::NetworkProcess::~NetworkProcess(WebKit::NetworkProcess *this, WTF::StringImpl *a2)
{
  WebKit::NetworkProcess::~NetworkProcess((WebKit::NetworkProcess *)((char *)this - 16), a2);
}

{
  WebKit::NetworkProcess::~NetworkProcess((WebKit::NetworkProcess *)((char *)this - 112), a2);
}

{
  WebKit::NetworkProcess::operator delete((WebKit::NetworkProcess *)((char *)this - 16), a2);
}

{
  WebKit::NetworkProcess::operator delete((WebKit::NetworkProcess *)((char *)this - 112), a2);
}

double WebKit::NetworkProcess::operator delete(WebKit::NetworkProcess *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  void *v3;
  double result;

  WebKit::NetworkProcess::~NetworkProcess(a1, a2);
  if (*(_DWORD *)(v2 + 124))
  {
    *(_QWORD *)(v2 + 400) = 0;
    result = 0.0;
    *(_OWORD *)(v2 + 368) = 0u;
    *(_OWORD *)(v2 + 384) = 0u;
    *(_OWORD *)(v2 + 336) = 0u;
    *(_OWORD *)(v2 + 352) = 0u;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 288) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

uint64_t *WebKit::NetworkProcess::removeNetworkConnectionToWebProcess(WebKit::NetworkProcess *this, WebKit::NetworkConnectionToWebProcess *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v8;

  v3 = (uint64_t *)this;
  v4 = (uint64_t *)((char *)this + 128);
  v8 = *((_QWORD *)a2 + 32);
  v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 16, &v8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::remove(v4, v5);
  v3 += 28;
  v8 = *((_QWORD *)a2 + 32);
  v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3, &v8);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::remove(v3, (WTF::StringImpl *)v6);
}

uint64_t WebKit::NetworkProcess::shouldTerminate(WebKit::NetworkProcess *this)
{
  return 0;
}

uint64_t WebKit::NetworkProcess::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  if (*(unsigned __int8 ***)(a1 + 32) == a2)
  {
    if ((IPC::MessageReceiverMap::dispatchSyncMessage((unsigned int **)(a1 + 40), (uint64_t)a2, a3, (uint64_t)a4) & 1) != 0)
      return 1;
    else
      return WebKit::NetworkProcess::didReceiveSyncNetworkProcessMessage((unsigned int *)a1, a2, a3, a4);
  }
  else
  {
    WTFLogAlways();
    return 0;
  }
}

uint64_t WebKit::NetworkProcess::stopRunLoopIfNecessary(uint64_t this)
{
  uint64_t v1;

  if (*(_BYTE *)(this + 396))
  {
    v1 = *(_QWORD *)(this + 376);
    if (!v1 || !*(_DWORD *)(v1 - 12))
      return WebKit::AuxiliaryProcess::stopRunLoop((WebKit::AuxiliaryProcess *)this);
  }
  return this;
}

uint64_t WebKit::NetworkProcess::didClose(WebKit::NetworkProcess *this, IPC::Connection *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34BE1E8;
  v3[1] = this;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = v3;
  v10 = (unsigned int *)v4;
  v5 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = off_1E34BE210;
  *((_QWORD *)v5 + 1) = this;
  *((_QWORD *)v5 + 2) = &v10;
  v11 = v5;
  WebKit::NetworkProcess::forEachNetworkSession((uint64_t)this, &v11);
  (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  result = *((unsigned int *)this + 100);
  if ((_DWORD)result != -1)
    result = notify_cancel(result);
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v11 = v7;
      return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v11);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::didCreateDownload(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t `non-virtual thunk to'WebKit::NetworkProcess::didCreateDownload(uint64_t this)
{
  ++*(_DWORD *)(this - 88);
  return this;
}

uint64_t `non-virtual thunk to'WebKit::NetworkProcess::didDestroyDownload(WebKit::NetworkProcess *this)
{
  return WebKit::AuxiliaryProcess::enableTermination((uint64_t)this - 112);
}

uint64_t WebKit::NetworkProcess::downloadProxyConnection(WebKit::NetworkProcess *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t `non-virtual thunk to'WebKit::NetworkProcess::downloadProxyConnection(WebKit::NetworkProcess *this)
{
  return *((_QWORD *)this - 10);
}

const char *WebKit::NetworkProcess::downloadsAuthenticationManager(WebKit::NetworkProcess *this)
{
  _QWORD v2[2];

  v2[0] = "AuthenticationManager";
  v2[1] = 22;
  return WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)this + 24, (WTF::ASCIILiteralHash *)v2);
}

const char *`non-virtual thunk to'WebKit::NetworkProcess::downloadsAuthenticationManager(WebKit::NetworkProcess *this)
{
  _QWORD v2[2];

  v2[0] = "AuthenticationManager";
  v2[1] = 22;
  return WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)this + 10, (WTF::ASCIILiteralHash *)v2);
}

uint64_t WebKit::NetworkProcess::addAllowedFirstPartyForCookies(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3, int a4, uint64_t *a5)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  WTF::StringImpl *v25[2];
  char v26;
  uint64_t v27;
  WTF::StringImpl *v28[2];

  v28[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v27 = a2;
  if (*a3 == (WTF::ASCIICaseInsensitiveHash *)-1 || WTF::equal(*a3, 0, (const WTF::StringImpl *)a3))
  {
    v20 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  else
  {
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkProcess::addAllowedFirstPartyForCookies(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain&&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)::$_0>(v25, (WTF::StringImpl **)(a1 + 224), &v27);
    v9 = v25[0];
    WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v25[0] + 2, a3, (uint64_t)v25);
    if (v26)
    {
      v10 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 128), &v27);
      v11 = *(_QWORD *)(a1 + 128);
      if (v11)
        v11 += 16 * *(unsigned int *)(v11 - 4);
      if (v11 != v10)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 64) + 24);
        v12 = *(WTF::StringImpl **)v25[0];
        if (*(_QWORD *)v25[0])
          *(_DWORD *)v12 += 2;
        v28[0] = v12;
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(&v22, (_DWORD **)v28, 1uLL);
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v13 = off_1E34BE300;
        v13[1] = v21;
        v13[2] = v22;
        v14 = v23;
        v22 = 0;
        v23 = 0;
        v13[3] = v14;
        v24 = v13;
        WebKit::NetworkProcess::forEachNetworkSession(a1, &v24);
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v15);
        v17 = v28[0];
        v28[0] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v16);
          else
            *(_DWORD *)v17 -= 2;
        }
      }
    }
    if (a4)
      *((_BYTE *)v9 + 8) = 1;
    v18 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

uint64_t WebKit::NetworkProcess::registerURLSchemeAsSecure(WebKit::NetworkProcess *this, const WTF::String *a2)
{
  return WebCore::LegacySchemeRegistry::registerURLSchemeAsSecure(a2, a2);
}

uint64_t WebKit::NetworkProcess::registerURLSchemeAsBypassingContentSecurityPolicy(WebKit::NetworkProcess *this, const WTF::String *a2)
{
  return WebCore::LegacySchemeRegistry::registerURLSchemeAsBypassingContentSecurityPolicy(a2, a2);
}

uint64_t WebKit::callExitSoon(WebKit *this, IPC::Connection *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;

  WTF::WorkQueue::create();
  v2 = v7;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E34BDFF8;
  v6 = v3;
  (*(void (**)(uint64_t, _QWORD **, double))(*(_QWORD *)v2 + 16))(v2, &v6, 10.0);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t WebKit::NetworkProcess::createNetworkConnectionToWebProcess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t result;
  WebCore::NetworkStorageSession *v12;
  uint64_t v13;
  WebCore::NetworkStateNotifier *v14;
  WebCore::NetworkStateNotifier *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  const WTF::StringImpl *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t *v38[2];
  uint64_t v39;
  uint64_t v40;
  int v41;
  void *v42;
  _DWORD *v43;
  int v44;
  void *object;
  char v46;
  uint64_t v47;

  v47 = a2;
  IPC::Connection::createConnectionIdentifierPair((uint64_t)&v44);
  if (!v46)
  {
    LOBYTE(v39) = 0;
    BYTE4(v39) = 0;
    v28 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v28 + 16))(v28, &v39, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    if (BYTE4(v39))
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v39);
    return std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44);
  }
  v41 = v44;
  v42 = object;
  if (object)
    os_retain(object);
  WebKit::NetworkConnectionToWebProcess::create((uint64_t)a1, a2, a3, a4, (uint64_t)&v41, (uint64_t *)&v43);
  if (v42)
    os_release(v42);
  v10 = (uint64_t)v43;
  ++v43[2];
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>((uint64_t)&v39, a1 + 16, &v47, (uint64_t *)&v43);
  v39 = a3;
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 27, &v39);
  if (v46)
  {
    v12 = (WebCore::NetworkStorageSession *)result;
    WTF::MachSendRight::MachSendRight();
    BYTE4(v39) = 1;
    if (v12)
      WebCore::NetworkStorageSession::cookieAcceptPolicy(v12);
    v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 16))(v13, &v39);
    v14 = (WebCore::NetworkStateNotifier *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (BYTE4(v39))
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v39);
    v15 = (WebCore::NetworkStateNotifier *)WebCore::NetworkStateNotifier::singleton(v14);
    v16 = WebCore::NetworkStateNotifier::onLine(v15);
    v17 = *(_QWORD *)(v10 + 64);
    LOBYTE(v39) = v16;
    IPC::Connection::send<Messages::NetworkProcessConnection::SetOnLineState>(v17, &v39, 0, 0, 0);
    v39 = a3;
    v18 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 26, &v39);
    if (!v18)
      goto LABEL_18;
    v19 = v18;
    v39 = 0;
    v40 = 0;
    v20 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1 + 28, &v47);
    v23 = v20;
    v24 = (uint64_t *)a1[28];
    if (v24)
      v24 += 3 * *((unsigned int *)v24 - 1);
    if (v24 != v20)
    {
      v29 = (uint64_t *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(v20 + 2, v21, v22);
      v32 = v29;
      v38[0] = v29;
      v38[1] = v30;
      v33 = v23[2];
      v34 = v33 ? (uint64_t *)(v33 + 8 * *(unsigned int *)(v33 - 4)) : 0;
      if (v34 != v29)
      {
        do
        {
          v35 = HIDWORD(v40);
          if (HIDWORD(v40) == (_DWORD)v40)
          {
            WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v39, (unint64_t)v32);
            v32 = v38[0];
          }
          else
          {
            v36 = v39;
            v37 = (_DWORD *)*v32;
            if (*v32)
              *v37 += 2;
            *(_QWORD *)(v36 + 8 * v35) = v37;
            HIDWORD(v40) = v35 + 1;
          }
          v38[0] = v32 + 1;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v38, (uint64_t)v30, v31);
          v32 = v38[0];
        }
        while (v38[0] != v34);
      }
    }
    v25 = *(_QWORD *)(v19 + 800);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v25 + 16));
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v38, (uint64_t **)(v10 + 64));
    WebKit::NetworkStorageManager::startReceivingMessageFromConnection(v25, (uint64_t)v38[0], (uint64_t)&v39);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v38);
    if (v25)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v25 + 16), v26);
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v26);
    if (v10)
    {
LABEL_18:
      if (*(_DWORD *)(v10 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      else
        --*(_DWORD *)(v10 + 8);
    }
    v27 = v43;
    v43 = 0;
    if (v27)
    {
      if (v27[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
      else
        --v27[2];
    }
    return std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44);
  }
  __break(1u);
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::add<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 16 * (result & v9));
  v13 = *v12;
  v14 = *a3;
  if (*v12)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v13 == v14)
      {
        v26 = *a2;
        if (*a2)
          v27 = *(unsigned int *)(v26 - 4);
        else
          v27 = 0;
        v23 = 0;
        v22 = v26 + 16 * v27;
        goto LABEL_15;
      }
      if (v13 == -1)
        v24 = v12;
      v11 = (v11 + v25) & v9;
      v12 = (_QWORD *)(v8 + 16 * v11);
      v13 = *v12;
      ++v25;
    }
    while (*v12);
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v12 = v24;
    }
  }
  *v12 = v14;
  v15 = *a4;
  *a4 = 0;
  result = v12[1];
  v12[1] = v15;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_14;
LABEL_28:
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkConnectionToWebProcess,WTF::RawPtrTraits<WebKit::NetworkConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkConnectionToWebProcess>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v12);
    v12 = (_QWORD *)result;
    v18 = *a2;
    if (*a2)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_14;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_28;
LABEL_14:
  v22 = v18 + 16 * v21;
  v23 = 1;
LABEL_15:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v22;
  *(_BYTE *)(a1 + 16) = v23;
  return result;
}

uint64_t WebKit::NetworkProcess::storageSession(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), &v3);
}

uint64_t WebKit::NetworkProcess::networkSession(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v3);
}

WTF::StringImpl **WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkProcess::addAllowedFirstPartyForCookies(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain&&,WebKit::LoadedWebArchive,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WTF::StringImpl **result, WTF::StringImpl **a2, _QWORD *a3)
{
  uint64_t *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  char v7;
  int v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;

  v4 = (uint64_t *)a2;
  v5 = result;
  v6 = (uint64_t)*a2;
  if (*a2
    || (result = (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)a2, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = (WTF::StringImpl *)*a3;
  v10 = *a3 + ~(*a3 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = v6 + 24 * v13;
  v15 = *(WTF::StringImpl **)v14;
  if (*(_QWORD *)v14)
  {
    a2 = 0;
    v16 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v19 = 0;
        else
          v19 = *(_DWORD *)(v6 - 4);
        v20 = 0;
        v21 = v6 + 24 * v19;
        goto LABEL_29;
      }
      if (v15 == (WTF::StringImpl *)-1)
        a2 = (WTF::StringImpl **)v14;
      v13 = (v13 + v16) & v8;
      v14 = v6 + 24 * v13;
      v15 = *(WTF::StringImpl **)v14;
      ++v16;
    }
    while (*(_QWORD *)v14);
    if (!a2)
      goto LABEL_12;
    *a2 = 0;
    *((_BYTE *)a2 + 8) = 0;
    a2[2] = 0;
    --*(_DWORD *)(*v4 - 16);
    *a2 = (WTF::StringImpl *)*a3;
    *((_BYTE *)a2 + 8) = 0;
    a2[2] = 0;
  }
  else
  {
LABEL_12:
    result = *(WTF::StringImpl ***)(v14 + 16);
    *(_QWORD *)v14 = v9;
    *(_BYTE *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    if (result)
      result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, (WTF::StringImpl *)a2);
    a2 = (WTF::StringImpl **)v14;
  }
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v22 = *v4;
  if (*v4)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_26:
      result = (WTF::StringImpl **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v4, a2);
      a2 = result;
      v22 = *v4;
      if (*v4)
        LODWORD(v25) = *(_DWORD *)(v22 - 4);
      else
        LODWORD(v25) = 0;
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_26;
  }
  v21 = v22 + 24 * v25;
  v20 = 1;
  v14 = (uint64_t)a2;
LABEL_29:
  *v5 = (WTF::StringImpl *)v14;
  v5[1] = (WTF::StringImpl *)v21;
  *((_BYTE *)v5 + 16) = v20;
  return result;
}

uint64_t WebKit::NetworkProcess::webProcessWillLoadWebArchive(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;

  v2 = a2;
  v4 = (uint64_t *)(result + 224);
  v3 = *(_QWORD *)(result + 224);
  if (v3
    || (result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(result + 224), 0), (v3 = *v4) != 0))
  {
    v5 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = v3 + 24 * v9;
  v11 = *(_QWORD *)v10;
  if (!*(_QWORD *)v10)
  {
LABEL_12:
    result = *(_QWORD *)(v10 + 16);
    *(_QWORD *)v10 = v2;
    *(_BYTE *)(v10 + 8) = 1;
    *(_QWORD *)(v10 + 16) = 0;
    if (result)
      result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, (WTF::StringImpl *)a2);
    a2 = v10;
LABEL_15:
    v13 = *v4;
    if (*v4)
      v14 = *(_DWORD *)(v13 - 12) + 1;
    else
      v14 = 1;
    *(_DWORD *)(v13 - 12) = v14;
    v15 = *v4;
    if (*v4)
      v16 = *(_DWORD *)(v15 - 12);
    else
      v16 = 0;
    v17 = (*(_DWORD *)(v15 - 16) + v16);
    v18 = *(unsigned int *)(v15 - 4);
    if (v18 > 0x400)
    {
      if (v18 > 2 * v17)
        goto LABEL_23;
    }
    else if (3 * v18 > 4 * v17)
    {
LABEL_23:
      v10 = a2;
      goto LABEL_26;
    }
    result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v4, (_QWORD *)a2);
    v10 = result;
    goto LABEL_26;
  }
  a2 = 0;
  v12 = 1;
  while (v11 != v2)
  {
    if (v11 == -1)
      a2 = v10;
    v9 = (v9 + v12) & v5;
    v10 = v3 + 24 * v9;
    v11 = *(_QWORD *)v10;
    ++v12;
    if (!*(_QWORD *)v10)
    {
      if (!a2)
        goto LABEL_12;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      --*(_DWORD *)(*v4 - 16);
      *(_QWORD *)a2 = v2;
      *(_BYTE *)(a2 + 8) = 1;
      *(_QWORD *)(a2 + 16) = 0;
      goto LABEL_15;
    }
  }
LABEL_26:
  *(_BYTE *)(v10 + 8) = 1;
  return result;
}

uint64_t WebKit::NetworkProcess::allowsFirstPartyForCookies(uint64_t a1, uint64_t a2, WTF::URL *this)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  v6 = 1;
  if ((WTF::URL::isAboutBlank(this) & 1) == 0)
  {
    if (*(_QWORD *)this)
    {
      WebCore::RegistrableDomain::RegistrableDomain(&v10, this);
      v6 = WebKit::NetworkProcess::allowsFirstPartyForCookies(a1, a2, &v10);
      v8 = v10;
      v10 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  return v6;
}

uint64_t WebKit::NetworkProcess::allowsFirstPartyForCookies(uint64_t a1, uint64_t a2, WTF **a3)
{
  uint64_t *v6;
  const WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v11;

  v11 = a2;
  if (!*a3 || !*((_DWORD *)*a3 + 1) || (MEMORY[0x19AEABBCC]() & 1) != 0)
    return 1;
  if ((unint64_t)(a2 - 1) > 0xFFFFFFFFFFFFFFFDLL)
    return 0;
  v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 224), &v11);
  v8 = v6;
  v9 = *(uint64_t **)(a1 + 224);
  if (v9)
    v9 += 3 * *((unsigned int *)v9 - 1);
  if (v9 == v6)
    return 0;
  if (*((_BYTE *)v6 + 8))
    return 1;
  if (*a3 == (WTF *)-1 || (WTF::equal(*a3, 0, v7) & 1) != 0)
    return 0;
  return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v8 + 2, a3);
}

void WebKit::NetworkProcess::newTestingSession(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  CFTypeRef v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  CFTypeRef cf;
  CFTypeRef v12[2];

  v12[0] = "WebKit Test-";
  v12[1] = (CFTypeRef)13;
  LODWORD(cf) = getpid();
  WTF::tryMakeString<WTF::ASCIILiteral,int>((uint64_t *)v12, (int *)&cf, &v10);
  if (v10)
  {
    WTF::String::createCFString((WTF::String *)&v10);
    WebCore::createPrivateStorageSession();
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
    v6 = v10;
    v10 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        v6 = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    cf = 0;
    if (WebCore::NetworkStorageSession::processMayUseCookieAPI(v6) && v12[0])
      cf = (CFTypeRef)_CFURLStorageSessionCopyCookieStorage();
    v7 = WTF::fastMalloc((WTF *)0x128);
    *a1 = MEMORY[0x19AEB13A4](v7, a2, v12, &cf, 0);
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
    v9 = v12[0];
    v12[0] = 0;
    if (v9)
      CFRelease(v9);
  }
  else
  {
    __break(0xC471u);
  }
}

_QWORD *WebKit::NetworkProcess::cookieAcceptPolicyChanged(uint64_t a1, char a2)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 128));
  v5 = result;
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 128);
  if (v8)
    v9 = (_QWORD *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 != result)
  {
    do
    {
      result = WebKit::NetworkConnectionToWebProcess::cookieAcceptPolicyChanged(v5[1], a2);
      while (1)
      {
        v5 += 2;
        if (v5 == v7)
          break;
        if ((unint64_t)(*v5 + 1) > 1)
          goto LABEL_10;
      }
      v5 = v7;
LABEL_10:
      ;
    }
    while (v5 != v9);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::NetworkProcess::networkSession(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 96), &v3);
}

_QWORD *WebKit::NetworkProcess::destroySession(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  unsigned __int8 **v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *result;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;

  v4 = a2;
  v65 = a2;
  v7 = a1 + 26;
  v6 = a1[26];
  if (v6)
  {
    v8 = *(_DWORD *)(v6 - 8);
    v9 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2) & v8;
    v10 = *(_QWORD *)(v6 + 16 * v9);
    if (v10 != v4)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v8;
        v10 = *(_QWORD *)(v6 + 16 * v9);
        ++v11;
        if (v10 == v4)
          goto LABEL_8;
      }
      v9 = *(unsigned int *)(v6 - 4);
    }
LABEL_8:
    if (v9 != *(_DWORD *)(v6 - 4))
    {
      v12 = 0;
      v13 = (_QWORD *)(v6 + 16 * v9);
      v14 = (_QWORD *)v13[1];
      v13[1] = 0;
      if (!*v7 || (v12 = *v7 + 16 * *(unsigned int *)(*v7 - 4), (_QWORD *)v12 != v13))
      {
        if ((_QWORD *)v12 != v13)
        {
          *v13 = -1;
          v13[1] = 0;
          ++*(_DWORD *)(*v7 - 16);
          v15 = *v7;
          v16 = *v7 ? *(_DWORD *)(v15 - 12) - 1 : -1;
          *(_DWORD *)(v15 - 12) = v16;
          v17 = *v7;
          if (*v7)
          {
            v18 = 6 * *(_DWORD *)(v17 - 12);
            v19 = *(_DWORD *)(v17 - 4);
            if (v18 < v19 && v19 >= 9)
              WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(v7, v19 >> 1, 0);
          }
        }
      }
      if (v14)
      {
        (*(void (**)(_QWORD *))(*v14 + 80))(v14);
        v21 = v14[100];
        v22 = (unsigned __int8 **)(v21 + 16);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v21 + 16));
        v23 = a1 + 47;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v21 + 16));
        v24 = a1[47];
        if (v24
          || (WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::expand(a1 + 47),
              (v24 = *v23) != 0))
        {
          v25 = *(_DWORD *)(v24 - 8);
        }
        else
        {
          v25 = 0;
        }
        v26 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
        v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
        v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
        v29 = v25 & ((v28 >> 31) ^ v28);
        v30 = (uint64_t *)(v24 + 8 * v29);
        v31 = *v30;
        if (*v30)
        {
          v32 = 0;
          v33 = 1;
          while (v31 != v21)
          {
            if (v31 == -1)
              v32 = v30;
            v29 = (v29 + v33) & v25;
            v30 = (uint64_t *)(v24 + 8 * v29);
            v31 = *v30;
            ++v33;
            if (!*v30)
            {
              if (v32)
              {
                *v32 = 0;
                --*(_DWORD *)(*v23 - 16);
                v30 = v32;
              }
              goto LABEL_34;
            }
          }
          if (v21)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v22, v30);
          goto LABEL_43;
        }
LABEL_34:
        *v30 = v21;
        v34 = *v23;
        if (*v23)
          v35 = *(_DWORD *)(v34 - 12) + 1;
        else
          v35 = 1;
        *(_DWORD *)(v34 - 12) = v35;
        v36 = *v23;
        if (*v23)
          v37 = *(_DWORD *)(v36 - 12);
        else
          v37 = 0;
        v38 = (*(_DWORD *)(v36 - 16) + v37);
        v39 = *(unsigned int *)(v36 - 4);
        if (v39 > 0x400)
        {
          if (v39 > 2 * v38)
          {
LABEL_43:
            v40 = (unsigned int *)(a1 + 15);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 + 1, v40));
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v21 + 16));
            v42 = *a3;
            *a3 = 0;
            v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
            *v43 = &off_1E34BE350;
            v43[1] = a1;
            v43[2] = a1;
            v43[3] = v21;
            v43[4] = v42;
            v64 = v43;
            WebKit::NetworkStorageManager::close(v21, &v64);
            if (v64)
              (*(void (**)(_QWORD *))(*v64 + 8))(v64);
            if (v21)
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v22, v44);
            (*(void (**)(_QWORD *))(*v14 + 8))(v14);
            v4 = v65;
            goto LABEL_50;
          }
        }
        else if (3 * v39 > 4 * v38)
        {
          goto LABEL_43;
        }
        WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::expand(a1 + 47);
        goto LABEL_43;
      }
    }
  }
LABEL_50:
  v45 = a1 + 27;
  v46 = a1[27];
  if (v46)
  {
    v47 = *(_DWORD *)(v46 - 8);
    v48 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4) & v47;
    v49 = *(_QWORD *)(v46 + 16 * v48);
    if (v49 != v4)
    {
      v50 = 1;
      while (v49)
      {
        v48 = ((_DWORD)v48 + v50) & v47;
        v49 = *(_QWORD *)(v46 + 16 * v48);
        ++v50;
        if (v49 == v4)
          goto LABEL_57;
      }
      v48 = *(unsigned int *)(v46 - 4);
    }
LABEL_57:
    if (v48 != *(_DWORD *)(v46 - 4))
    {
      v51 = (_QWORD *)(v46 + 16 * v48);
      v52 = v51[1];
      *v51 = -1;
      v51[1] = 0;
      if (v52)
        WebCore::NetworkStorageSession::operator delete(v52, 0x128uLL);
      ++*(_DWORD *)(*v45 - 16);
      v53 = *v45;
      if (*v45)
        v54 = *(_DWORD *)(v53 - 12) - 1;
      else
        v54 = -1;
      *(_DWORD *)(v53 - 12) = v54;
      v55 = *v45;
      if (*v45)
      {
        v56 = 6 * *(_DWORD *)(v55 - 12);
        v57 = *(_DWORD *)(v55 - 4);
        if (v56 < v57 && v57 >= 9)
          WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1 + 27, v57 >> 1, 0);
      }
    }
  }
  result = (_QWORD *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 25, &v65);
  v60 = result;
  v61 = a1[25];
  if (v61)
  {
    v62 = (_QWORD *)(v61 + 8 * *(unsigned int *)(v61 - 4));
    if (v62 == result)
      goto LABEL_77;
  }
  else
  {
    if (!result)
      goto LABEL_77;
    v62 = 0;
  }
  if (v62 != result)
    result = WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::remove(a1 + 25, result);
LABEL_77:
  v63 = *a3;
  if (*a3)
  {
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v63 + 16))(v63, v60);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  }
  return result;
}

WTF::StringImpl **WebKit::NetworkProcess::registrableDomainsWithLastAccessedTime(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **result;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  char v9;
  uint64_t v10;

  v10 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 72);
    if (v5)
      return (WTF::StringImpl **)WebKit::WebResourceLoadStatisticsStore::registrableDomainsWithLastAccessedTime(v5, a3);
  }
  LOBYTE(v8) = 0;
  v9 = 0;
  result = (WTF::StringImpl **)WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)>::operator()(a3, (uint64_t)&v8);
  if (v9)
  {
    result = v8;
    if (v8)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v7);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)>::operator()(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl **v5;
  char v6;
  uint64_t v7;

  v7 = *a1;
  *a1 = 0;
  LOBYTE(v5) = 0;
  v6 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v2 = *(WTF::StringImpl ***)a2;
    *(_QWORD *)a2 = 0;
    v5 = v2;
    v6 = 1;
  }
  WTF::Function<void ()(std::optional<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>>)>::operator()(&v7, (uint64_t)&v5);
  if (v6 && v5)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v3);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl **WebKit::NetworkProcess::registrableDomainsExemptFromWebsiteDataDeletion(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl **result;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;

  v11 = (WTF::StringImpl **)a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v11);
  if (v4 && (v5 = *(_QWORD *)(v4 + 72)) != 0)
  {
    v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x10);
    *v6 = (WTF::StringImpl *)&off_1E34BE378;
    v7 = *a3;
    *a3 = 0;
    v6[1] = (WTF::StringImpl *)v7;
    v11 = v6;
    WebKit::WebResourceLoadStatisticsStore::registrableDomainsExemptFromWebsiteDataDeletion(v5, (uint64_t *)&v11);
    result = v11;
    if (v11)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*v11 + 1))(v11);
  }
  else
  {
    v10 = 0;
    WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>::operator()(a3, &v10);
    result = v10;
    if (v10)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v10, v9);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)>::operator()(uint64_t *a1, WTF::StringImpl ***a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v6;

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v6 = v3;
  (*(void (**)(uint64_t, WTF::StringImpl ***))(*(_QWORD *)v2 + 16))(v2, &v6);
  if (v6)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

WTF::StringImpl *WebKit::NetworkProcess::dumpResourceLoadStatistics(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v12 = (WTF::StringImpl *)a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 72);
    if (v5)
    {
      v6 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v6 = &off_1E34BEFD8;
      v7 = *a3;
      *a3 = 0;
      *((_QWORD *)v6 + 1) = v7;
      v12 = v6;
      WebKit::WebResourceLoadStatisticsStore::dumpResourceLoadStatistics(v5, (uint64_t *)&v12);
      result = v12;
      if (v12)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 8))(v12);
      return result;
    }
    v11 = 0;
    WTF::CompletionHandler<void ()(WTF::String)>::operator()(a3, &v11);
    result = v11;
    v11 = 0;
    if (!result)
      return result;
  }
  else
  {
    v10 = 0;
    WTF::CompletionHandler<void ()(WTF::String)>::operator()(a3, &v10);
    result = v10;
    v10 = 0;
    if (!result)
      return result;
  }
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  *(_DWORD *)result -= 2;
  return result;
}

uint64_t WebKit::NetworkProcess::updatePrevalentDomainsToBlockCookiesFor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), &v7))
  {
    WebCore::NetworkStorageSession::setPrevalentDomainsToBlockAndDeleteCookiesFor();
  }
  v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebKit::NetworkProcess::isGrandfathered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::isGrandfathered(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::isPrevalentResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::isPrevalentResource(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::isVeryPrevalentResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::isVeryPrevalentResource(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setGrandfathered(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
      return WebKit::WebResourceLoadStatisticsStore::setGrandfathered(v9, a3, a4, a5);
  }
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setPrevalentResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setPrevalentResource(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setPrevalentResourceForDebugMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setVeryPrevalentResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setVeryPrevalentResource(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::clearPrevalentResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::clearPrevalentResource(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::scheduleCookieBlockingUpdate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 72);
    if (v5)
      return WebKit::WebResourceLoadStatisticsStore::scheduleCookieBlockingUpdate(v5, a3);
  }
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkProcess::scheduleClearInMemoryAndPersistent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, WTF::StringImpl *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v13);
  if (v8)
  {
    v9 = v8;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 160))(v8);
    v10 = *(_QWORD *)(v9 + 72);
    if (v10)
      return WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(v10, a5, a6);
  }
  v12 = *(_QWORD *)a6;
  *(_QWORD *)a6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

uint64_t WebKit::NetworkProcess::resetParametersToDefaultValues(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::NetworkSession *v4;
  WTF::StringImpl *v5;
  WebKit::NetworkSession *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v4 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v4)
  {
    v6 = v4;
    WebKit::NetworkSession::resetFirstPartyDNSData(v4, v5);
    v7 = *((_QWORD *)v6 + 9);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::resetParametersToDefaultValues(v7, a3);
  }
  v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::scheduleStatisticsAndDataRecordsProcessing(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 72);
    if (v5)
      return WebKit::WebResourceLoadStatisticsStore::scheduleStatisticsAndDataRecordsProcessing(v5, a3);
  }
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkProcess::statisticsDatabaseHasAllTables(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 72);
    if (v5)
      return WebKit::WebResourceLoadStatisticsStore::statisticsDatabaseHasAllTables(v5, a3);
  }
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkProcess::setNotifyPagesWhenDataRecordsWereScanned(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setNotifyPagesWhenDataRecordsWereScanned(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setResourceLoadStatisticsTimeAdvanceForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setTimeAdvanceForTesting(v7, a3, a4);
  }
  v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setIsRunningResourceLoadStatisticsTest(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setIsRunningTest(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setSubframeUnderTopFrameDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
      return WebKit::WebResourceLoadStatisticsStore::setSubframeUnderTopFrameDomain(v9, a3, a4, a5);
  }
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::isRegisteredAsRedirectingTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
      return WebKit::WebResourceLoadStatisticsStore::isRegisteredAsRedirectingTo(v9, a3, a4, a5);
  }
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::isRegisteredAsSubFrameUnder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
      return WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubFrameUnder(v9, a3, a4, a5);
  }
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setSubresourceUnderTopFrameDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
      return WebKit::WebResourceLoadStatisticsStore::setSubresourceUnderTopFrameDomain(v9, a3, a4, a5);
  }
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setSubresourceUniqueRedirectTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
      return WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectTo(v9, a3, a4, a5);
  }
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setSubresourceUniqueRedirectFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
      return WebKit::WebResourceLoadStatisticsStore::setSubresourceUniqueRedirectFrom(v9, a3, a4, a5);
  }
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::isRegisteredAsSubresourceUnder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
      return WebKit::WebResourceLoadStatisticsStore::isRegisteredAsSubresourceUnder(v9, a3, a4, a5);
  }
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setTopFrameUniqueRedirectTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
      return WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectTo(v9, a3, a4, a5);
  }
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setTopFrameUniqueRedirectFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
      return WebKit::WebResourceLoadStatisticsStore::setTopFrameUniqueRedirectFrom(v9, a3, a4, a5);
  }
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::setLastSeen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
      return WebKit::WebResourceLoadStatisticsStore::setLastSeen(v9, a5, a3, a4);
  }
  v11 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::domainIDExistsInDatabase(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::domainIDExistsInDatabase(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::mergeStatisticForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, double a9, double a10, char a11, int a12, int a13, uint64_t *a14)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v22 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v26);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 72);
    if (v23)
      return WebKit::WebResourceLoadStatisticsStore::mergeStatisticForTesting(v23, a9, a10, a3, a4, a5, a6, a7, a8, a11, a13, a14);
  }
  v25 = *a14;
  *a14 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
}

uint64_t WebKit::NetworkProcess::insertExpiredStatisticForTesting(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, char a6, char a7, uint64_t *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a2;
  v14 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v18);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 72);
    if (v15)
      return WebKit::WebResourceLoadStatisticsStore::insertExpiredStatisticForTesting(v15, a3, a4, a5, a6, a7, a8);
  }
  v17 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
}

uint64_t WebKit::NetworkProcess::getAllStorageAccessEntries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::NetworkStorageSession *v4;
  uint64_t *v5;
  void *v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = a2;
  v4 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), &v10);
  if (v4)
  {
    v5 = (uint64_t *)&v9;
    WebCore::NetworkStorageSession::getAllStorageAccessEntries(v4);
  }
  else
  {
    v8[0] = 0;
    v8[1] = 0;
    v5 = v8;
  }
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a3, v5);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v6);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v8[2];
  _QWORD v9[2];

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v8[0] = 0;
  v9[0] = v3;
  v8[1] = 0;
  v4 = a2[1];
  a2[1] = 0;
  v9[1] = v4;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebKit::NetworkProcess::logUserInteraction(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::logUserInteraction(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::hadUserInteraction(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::hasHadUserInteraction(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::isRelationshipOnlyInDatabaseOnce(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
      return WebKit::WebResourceLoadStatisticsStore::isRelationshipOnlyInDatabaseOnce(v9, a3, a4, a5);
  }
  v11 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebKit::NetworkProcess::clearUserInteraction(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::clearUserInteraction(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

unsigned __int8 *WebKit::NetworkProcess::hasLocalStorage(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  WTF::StringImpl *v11;
  unsigned __int8 *result;
  uint64_t v13;
  unsigned __int8 *v14;

  v14 = (unsigned __int8 *)a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v14);
  if (!v6)
  {
    v13 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v7 = *(_QWORD *)(v6 + 800);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v7 + 16));
  v8 = *a3;
  if (v8)
    *(_DWORD *)v8 += 2;
  v9 = *a4;
  *a4 = 0;
  v10 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v10 = &off_1E34BE3A0;
  if (v8)
    *(_DWORD *)v8 += 2;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  v14 = v10;
  WebKit::NetworkStorageManager::fetchData(v7, 32, 0, (uint64_t *)&v14);
  result = v14;
  if (v14)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v14 + 8))(v14);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      result = (unsigned __int8 *)WTF::StringImpl::destroy(v8, v11);
      if (!v7)
        return result;
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v7 + 16), v11);
    }
    *(_DWORD *)v8 -= 2;
  }
  if (v7)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v7 + 16), v11);
  return result;
}

uint64_t WebKit::NetworkProcess::setCacheMaxAgeCapForPrevalentResources(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;

  v6 = a2;
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), &v6))
  {
    WebCore::NetworkStorageSession::setCacheMaxAgeCapForPrevalentResources();
  }
  v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::NetworkProcess::setGrandfatheringTime(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setGrandfatheringTime(v7, a3, a4);
  }
  v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setMaxStatisticsEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setMaxStatisticsEntries(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setMinimumTimeBetweenDataRecordsRemoval(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setMinimumTimeBetweenDataRecordsRemoval(v7, a3, a4);
  }
  v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setPruneEntriesDownTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setPruneEntriesDownTo(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setTimeToLiveUserInteraction(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setTimeToLiveUserInteraction(v7, a3, a4);
  }
  v9 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setShouldClassifyResourcesBeforeDataRecordsRemoval(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setResourceLoadStatisticsLogTestingEvent(WebKit::NetworkProcess *this, char a2)
{
  _BYTE *v4;
  _BYTE *v6;

  v4 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E34BE3C8;
  v4[8] = a2;
  v6 = v4;
  WebKit::NetworkProcess::forEachNetworkSession((uint64_t)this, &v6);
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::NetworkProcess::setResourceLoadStatisticsDebugMode(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setResourceLoadStatisticsDebugMode(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::isResourceLoadStatisticsEphemeral(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v9);
  if (v4 && (v5 = *(_QWORD *)(v4 + 72)) != 0)
  {
    v6 = *(unsigned __int8 *)(v5 + 64);
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v6);
  }
  else
  {
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkProcess::resetCacheMaxAgeCapForPrevalentResources(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::NetworkStorageSession *v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  v4 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), &v7);
  if (v4)
    WebCore::NetworkStorageSession::resetCacheMaxAgeCapForPrevalentResources(v4);
  v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

IPC::Encoder *WebKit::NetworkProcess::didCommitCrossSiteLoadWithDataTransfer(_QWORD *a1, IPC::Encoder *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  IPC::Encoder *result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;
  uint64_t v23;
  IPC::Encoder *v24;

  v23 = a6;
  v24 = a2;
  result = (IPC::Encoder *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 27, &v24);
  if (result)
  {
    result = (IPC::Encoder *)WebCore::NetworkStorageSession::shouldBlockThirdPartyCookies();
    if (!(_DWORD)result)
      return result;
    v15 = a5 & 2;
    if ((a5 & 2) != 0)
      result = (IPC::Encoder *)WebCore::NetworkStorageSession::didCommitCrossSiteLoadWithDataTransferFromPrevalentResource();
    if ((a5 & 4) != 0)
    {
      v16 = a1[4];
      v17 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v17 = 311;
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 528) = v17 + 16;
      *(_QWORD *)(v17 + 536) = v17 + 16;
      *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v17 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
      v24 = (IPC::Encoder *)v17;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v17, &v23);
      IPC::Connection::sendMessageImpl(v16, (uint64_t *)&v24, 0, 0);
      result = v24;
      v24 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v18);
        result = (IPC::Encoder *)WTF::fastFree(v19, v20);
      }
    }
  }
  else
  {
    v15 = a5 & 2;
  }
  if (v15)
  {
    v24 = a2;
    result = (IPC::Encoder *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 26, &v24);
    if (result)
    {
      v21 = *((_QWORD *)result + 9);
      if (v21)
      {
        v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v22 = off_1E34BE3F0;
        v24 = v22;
        WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration(v21, a3, a4, a8, (uint64_t *)&v24);
        result = v24;
        if (v24)
          return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(_QWORD *)v24 + 8))(v24);
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::setCrossSiteLoadWithLinkDecorationForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v14 = a2;
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v14);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 72);
    if (v11)
      return WebKit::WebResourceLoadStatisticsStore::logCrossSiteLoadWithLinkDecoration(v11, a3, a4, a5, a6);
  }
  v13 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

uint64_t WebKit::NetworkProcess::resetCrossSiteLoadsWithLinkDecorationForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::NetworkStorageSession *v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  v4 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), &v7);
  if (v4)
    WebCore::NetworkStorageSession::resetCrossSiteLoadsWithLinkDecorationForTesting(v4);
  v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

WTF::StringImpl **WebKit::NetworkProcess::grantStorageAccessForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::StringImpl **a4, uint64_t *a5)
{
  const WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t i;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **result;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int j;
  int v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  _QWORD v29[3];
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v30[1] = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v30[2] = v29[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = 0;
  v30[3] = v29[0];
  v28 = 0;
  do
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v28, (WTF::StringImpl **)&v30[v11++], v10, (uint64_t)v29);
  while (v11 != 4);
  for (i = 3; i != -1; --i)
  {
    v14 = (WTF::StringImpl *)v30[i];
    v30[i] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  v15 = v28;
  if (v28)
  {
    v19 = *((_DWORD *)v28 - 2);
    v20 = *((_DWORD *)*a4 + 4);
    if (v20 >= 0x100)
      v21 = v20 >> 8;
    else
      v21 = WTF::StringImpl::hashSlowCase(*a4);
    for (j = 0; ; v21 = j + v23)
    {
      v23 = v21 & v19;
      v24 = v15[v21 & v19];
      if (v24 != (WTF *)-1)
      {
        if (!v24)
          goto LABEL_10;
        if ((WTF::equal(v24, *a4, v10) & 1) != 0)
          break;
      }
      ++j;
    }
    v30[0] = a2;
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), v30))
    {
      v25 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v25)
      {
        v26 = *a3;
        v27 = 8 * v25;
        do
        {
          WebCore::NetworkStorageSession::grantCrossPageStorageAccess();
          v26 += 8;
          v27 -= 8;
        }
        while (v27);
      }
    }
  }
LABEL_10:
  v16 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  result = v28;
  if (v28)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v28, v17);
  return result;
}

uint64_t WebKit::NetworkProcess::hasIsolatedSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 152))(v6, a3);
  else
    v7 = 0;
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t WebKit::NetworkProcess::setAppBoundDomainsForResourceLoadStatistics(uint64_t a1, uint64_t a2, uint64_t *a3, const WTF::StringImpl *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setAppBoundDomains(v7, a3, a4);
  }
  v9 = *(_QWORD *)a4;
  *(_QWORD *)a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setManagedDomainsForResourceLoadStatistics(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18[2];

  v18[0] = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), v18);
  if (v8)
  {
    v9 = v8;
    v18[0] = (uint64_t)"WebCookieManager";
    v18[1] = 17;
    v10 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(a1 + 192), (WTF::ASCIILiteralHash *)v18);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v9 + 8), v9);
    v11 = *(unsigned int **)(v9 + 8);
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    v13 = *a3;
    *a3 = 0;
    v14 = *a4;
    *a4 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v15 = &off_1E34BE418;
    v15[1] = v11;
    v15[2] = v13;
    v15[3] = v14;
    v18[0] = (uint64_t)v15;
    WebKit::WebCookieManager::setHTTPCookieAcceptPolicy((uint64_t)v10, a2, 0, v18);
    result = v18[0];
    v18[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v17 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::setShouldDowngradeReferrerForTesting(uint64_t a1, char a2, uint64_t *a3)
{
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v9;

  v6 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E34BE440;
  v6[8] = a2;
  v9 = v6;
  WebKit::NetworkProcess::forEachNetworkSession(a1, &v9);
  (*(void (**)(_BYTE *))(*(_QWORD *)v6 + 8))(v6);
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkProcess::setThirdPartyCookieBlockingMode(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    *(_BYTE *)(v6 + 98) = a3;
    v7 = *(_QWORD **)(v6 + 72);
    if (v7)
      WebKit::WebResourceLoadStatisticsStore::setThirdPartyCookieBlockingMode(v7, a3);
  }
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t WebKit::NetworkProcess::setShouldEnbleSameSiteStrictEnforcementForTesting(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    *(_BYTE *)(v6 + 99) = a3;
    v7 = *(_BYTE **)(v6 + 72);
    if (v7)
      WebKit::WebResourceLoadStatisticsStore::setSameSiteStrictEnforcementEnabled(v7, a3);
  }
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

uint64_t WebKit::NetworkProcess::setFirstPartyWebsiteDataRemovalModeForTesting(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 72);
    if (v7)
      return WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(v7, a3, a4);
  }
  v9 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setToSameSiteStrictCookiesForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), &v7))
  {
    return WebCore::NetworkStorageSession::setAllCookiesToSameSiteStrict();
  }
  v6 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t WebKit::NetworkProcess::setFirstPartyHostCNAMEDomainForTesting(uint64_t a1, uint64_t a2, WTF **a3, const WTF::StringImpl **a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v11);
  if (v8)
    WebKit::NetworkSession::setFirstPartyHostCNAMEDomain(v8, a3, a4);
  v9 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t WebKit::NetworkProcess::setThirdPartyCNAMEDomainForTesting(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    if (*(_BYTE *)(v6 + 136))
    {
      WTF::String::operator=((WTF::StringImpl **)(v6 + 128), a3);
    }
    else
    {
      v7 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(v6 + 128) = v7;
      *(_BYTE *)(v6 + 136) = 1;
    }
  }
  v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void WebKit::NetworkProcess::notifyMediaStreamingActivity(WebKit::NetworkProcess *this, uint64_t state64)
{
  unsigned int v2;
  int v4;
  uint32_t v5;
  uint32_t v6;
  NSObject *v7;
  const char *v8;
  int *v9;
  uint32_t v10;
  NSObject *v11;
  uint32_t v12;
  uint32_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  uint32_t v17;
  __int16 v18;
  uint32_t v19;
  uint64_t v20;

  v2 = state64;
  v20 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 100);
  if (v4 != -1
    || (v9 = (int *)((char *)this + 400),
        (v10 = notify_register_check("com.apple.WebKit.mediaStreamingActivity", (int *)this + 100)) == 0)
    && (v4 = *v9, *v9 != -1))
  {
    v5 = notify_set_state(v4, v2);
    if (v5)
    {
      v6 = v5;
      v7 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
        return;
      v14 = 136315650;
      v15 = "com.apple.WebKit.mediaStreamingActivity";
      v16 = 1024;
      v17 = v6;
      v18 = 1024;
      v19 = v6;
      v8 = "notify_set_state() for %s failed with status (%d) 0x%X";
    }
    else
    {
      v12 = notify_post("com.apple.WebKit.mediaStreamingActivity");
      if (!v12)
        return;
      v13 = v12;
      v7 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
        return;
      v14 = 136315650;
      v15 = "com.apple.WebKit.mediaStreamingActivity";
      v16 = 1024;
      v17 = v13;
      v18 = 1024;
      v19 = v13;
      v8 = "notify_post() for %s failed with status (%d) 0x%X";
    }
    _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v14, 0x18u);
    return;
  }
  v11 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
  {
    v14 = 136315650;
    v15 = "com.apple.WebKit.mediaStreamingActivity";
    v16 = 1024;
    v17 = v10;
    v18 = 1024;
    v19 = v10;
    _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, "notify_register_check() for %s failed with status (%d) 0x%X", (uint8_t *)&v14, 0x18u);
  }
  *v9 = -1;
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementDebugMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = a2;
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v5);
  if (result)
  {
    if (*(unsigned __int8 *)(result + 160) != (_DWORD)a3)
    {
      *(_BYTE *)(result + 160) = a3;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 152) + 56))(*(_QWORD *)(result + 152), a3);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkProcess::preconnectTo()
{
  uint64_t v0;
  __int16 v1;
  __int16 v2;
  char v3;
  char v4;
  WebCore::ResourceRequestBase *v5;
  WebCore::ResourceRequestBase *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  __int128 v16;
  WebKit::LegacyCustomProtocolManager *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unsigned int *v23;
  WTF ***Scheduler;
  Seconds *v25;
  unsigned int *v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  void *v30;
  uint64_t v31;
  Seconds v32;
  void *v33;
  void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *result;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  const char *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  _BYTE v48[2960];
  WTF::StringImpl *v49[11];
  _BYTE v50[2856];
  __int16 v51;
  uint64_t v52;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v0;
  v52 = *MEMORY[0x1E0C80C00];
  v14 = WebCore::ResourceRequestBase::url(v5);
  v15 = *(WTF::StringImpl **)v14;
  if (*(_QWORD *)v14)
    *(_DWORD *)v15 += 2;
  v39 = v15;
  v16 = *(_OWORD *)(v14 + 24);
  v40 = *(_OWORD *)(v14 + 8);
  v41 = v16;
  WebCore::ResourceRequestBase::httpUserAgent(v6);
  v42 = "LegacyCustomProtocolManager";
  v43 = 28;
  v17 = (WebKit::LegacyCustomProtocolManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v13 + 192), (WTF::ASCIILiteralHash *)&v42);
  v42 = (const char *)WTF::URL::protocol((WTF::URL *)&v39);
  v43 = v18;
  WTF::StringView::toString((uint64_t *)v49, (WTF::StringView *)&v42);
  v20 = WebKit::LegacyCustomProtocolManager::supportsScheme(v17, v49);
  v21 = v49[0];
  v49[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  if ((v20 & 1) == 0)
  {
    v42 = v12;
    v22 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v13 + 208), &v42);
    if (v22)
    {
      v23 = (unsigned int *)v22;
      WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v49);
      WebCore::ResourceRequest::operator=((uint64_t)v50, (uint64_t)v6);
      v49[0] = v10;
      v49[1] = v8;
      v51 = v2;
      v50[202] = v4;
      v50[2816] = 1;
      WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)v48, (const WebKit::NetworkLoadParameters *)v49);
      Scheduler = (WTF ***)WebKit::NetworkSession::networkLoadScheduler((WebKit::NetworkSession *)v23);
      WebKit::NetworkLoadScheduler::startedPreconnectForMainResource(Scheduler, (const WTF::URL *)&v39, &v38);
      v25 = (Seconds *)operator new();
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v23 + 2, (uint64_t)v23);
      v26 = (unsigned int *)*((_QWORD *)v23 + 1);
      if (v26)
      {
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 + 1, v26));
      }
      v42 = (const char *)v26;
      v28 = v39;
      if (v39)
        *(_DWORD *)v39 += 2;
      v43 = (uint64_t)v28;
      v44 = v40;
      v45 = v41;
      v29 = v38;
      if (v38)
        *(_DWORD *)v38 += 2;
      v46 = v29;
      WebKit::NetworkLoadParameters::NetworkLoadParameters((uint64_t)&v47, (uint64_t)v48);
      WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&)>::CompletionHandler<WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0,void>(&v37, (uint64_t *)&v42);
      WebKit::PreconnectTask::PreconnectTask(v25, v23, v49, &v37);
      v31 = v37;
      v37 = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0::~$_0((uint64_t)&v42, v30);
      v32.m_value = 10.0;
      WebKit::PreconnectTask::setTimeout(v25, v32);
      WebKit::PreconnectTask::start((WebKit::NetworkLoad **)v25);
      WebKit::NetworkLoadParameters::~NetworkLoadParameters((WebKit::NetworkLoadParameters *)v48, v33);
      WebKit::NetworkLoadParameters::~NetworkLoadParameters((WebKit::NetworkLoadParameters *)v49, v34);
    }
  }
  v35 = v38;
  v38 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v19);
    else
      *(_DWORD *)v35 -= 2;
  }
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WebCore::NetworkLoadMetrics const&)>::CompletionHandler<WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0xBE0);
  *v4 = off_1E34BE468;
  v5 = *a2;
  *a2 = 0;
  v4[2] = v5;
  WTF::URL::URL((uint64_t)(v4 + 3), a2 + 1);
  v6 = a2[6];
  a2[6] = 0;
  v4[8] = v6;
  WebKit::NetworkLoadParameters::NetworkLoadParameters((uint64_t)(v4 + 10), (uint64_t)(a2 + 8));
  *a1 = v4;
  return a1;
}

uint64_t WebKit::NetworkProcess::preconnectTo(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceRequest &&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain>)::$_0::~$_0(uint64_t a1, void *a2)
{
  const void *v3;
  const void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (*(_BYTE *)(a1 + 3000))
  {
    v3 = *(const void **)(a1 + 2992);
    *(_QWORD *)(a1 + 2992) = 0;
    if (v3)
      CFRelease(v3);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 2952, a2);
  if (*(_BYTE *)(a1 + 2928))
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)(a1 + 368));
  v4 = *(const void **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 152));
  v6 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v5);
  v7 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v7, v5);
  v8 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v5);
    }
  }
  return a1;
}

uint64_t *WebKit::NetworkProcess::setSessionIsControlledByAutomation(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 200);
  if (a3)
    return WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::add((uint64_t *)(a1 + 200), &v7, (uint64_t)&v6);
  result = (uint64_t *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 200), &v7);
  if (*v3)
  {
    v5 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
    if ((uint64_t *)v5 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v5 = 0;
  }
  if ((uint64_t *)v5 != result)
    return WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::remove(v3, result);
  return result;
}

WTF::RunLoop *WebKit::NetworkProcess::fetchWebsiteData(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::NetworkSession *v14;
  uint64_t v15;
  void *v16;
  WebCore::SecurityOriginData *v17;
  WebCore::SecurityOriginData *v18;
  WebCore::SecurityOriginData *v19;
  unsigned int v20;
  uint64_t v21;
  WebCore::SecurityOriginData *v22;
  WebCore::SecurityOriginData *v23;
  WebCore::SecurityOriginData *v24;
  WebCore::SecurityOriginData *v25;
  unsigned int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  _DWORD *v36;
  unsigned int *v37;
  unsigned int v38;
  _QWORD *v39;
  void *v40;
  WebCore::SecurityOriginData *v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  _QWORD *v54;
  void *v55;
  WTF::StringImpl *v57;
  char v58;
  WebCore::SecurityOriginData *v59[2];
  WebCore::SecurityOriginData *v60;
  unsigned int *v61;
  char v62;
  _BYTE v63[24];
  int v64;
  _BYTE v65[24];
  int v66;
  WebCore::SecurityOriginData *v67;
  void *v68;
  int v69;
  _BYTE v70[24];
  int v71;
  _BYTE buf[24];
  int v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v10 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "NetworkProcess::fetchWebsiteData started to fetch data for session %llu", buf, 0xCu);
  }
  v11 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v11 = 1;
  v12 = *a5;
  *a5 = 0;
  *(_OWORD *)(v11 + 16) = 0u;
  v13 = v11 + 16;
  *(_QWORD *)(v11 + 8) = v12;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_QWORD *)(v11 + 48) = 0;
  v61 = (unsigned int *)v11;
  *(_QWORD *)buf = a2;
  v14 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), buf);
  if ((a3 & 1) != 0)
  {
    *(_QWORD *)buf = a2;
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), buf))
    {
      WebCore::NetworkStorageSession::getHostnamesWithCookies();
    }
  }
  if ((a3 & 0x2000) != 0)
  {
    *(_QWORD *)buf = a2;
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), buf))
    {
      *(_QWORD *)buf = a2;
      v15 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), buf);
      WebCore::CredentialStorage::originsWithCredentials((WebCore::CredentialStorage *)(v15 + 96));
      v17 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)v59);
      v67 = v17;
      v68 = v16;
      v18 = v59[0];
      if (v59[0])
        v19 = (WebCore::SecurityOriginData *)((char *)v59[0] + 32 * *((unsigned int *)v59[0] - 1));
      else
        v19 = 0;
      if (v19 != v17)
      {
        do
        {
          v70[0] = 0;
          v71 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v70, (uint64_t)v17);
          buf[0] = 0;
          v73 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, (uint64_t)v70);
          LODWORD(v74) = 0x2000;
          *((_QWORD *)&v74 + 1) = 0;
          v20 = *(_DWORD *)(v11 + 28);
          if (v20 == *(_DWORD *)(v11 + 24))
          {
            WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>(v13, (unint64_t)buf);
          }
          else
          {
            v21 = *(_QWORD *)(v11 + 16) + 48 * v20;
            *(_BYTE *)v21 = 0;
            *(_DWORD *)(v21 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v21, (uint64_t)buf);
            *(_OWORD *)(v21 + 32) = v74;
            ++*(_DWORD *)(v11 + 28);
          }
          if (v73 != -1)
            ((void (*)(WebCore::SecurityOriginData **, _BYTE *))off_1E34BDF78[v73])(&v60, buf);
          v73 = -1;
          if (v71 != -1)
            ((void (*)(WebCore::SecurityOriginData **, _BYTE *))off_1E34BDF78[v71])(&v60, v70);
          v71 = -1;
          v67 = (WebCore::SecurityOriginData *)((char *)v67 + 32);
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(&v67);
          v17 = v67;
        }
        while (v67 != v19);
        v18 = v59[0];
      }
      if (v18)
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v18, v16);
    }
    if (v14)
    {
      (*(void (**)(WebCore::SecurityOriginData **__return_ptr, WebKit::NetworkSession *))(*(_QWORD *)v14 + 120))(&v60, v14);
      v23 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)&v60);
      v59[0] = v23;
      v59[1] = v22;
      v24 = v60;
      if (v60)
        v25 = (WebCore::SecurityOriginData *)((char *)v60 + 32 * *((unsigned int *)v60 - 1));
      else
        v25 = 0;
      if (v25 != v23)
      {
        do
        {
          LOBYTE(v67) = 0;
          v69 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v67, (uint64_t)v23);
          v65[0] = 0;
          v66 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v65, (uint64_t)&v67);
          buf[0] = 0;
          v73 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, (uint64_t)v65);
          LODWORD(v74) = 0x2000;
          *((_QWORD *)&v74 + 1) = 0;
          v26 = *(_DWORD *)(v11 + 28);
          if (v26 == *(_DWORD *)(v11 + 24))
          {
            WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>(v13, (unint64_t)buf);
          }
          else
          {
            v27 = *(_QWORD *)(v11 + 16) + 48 * v26;
            *(_BYTE *)v27 = 0;
            *(_DWORD *)(v27 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v27, (uint64_t)buf);
            *(_OWORD *)(v27 + 32) = v74;
            ++*(_DWORD *)(v11 + 28);
          }
          if (v73 != -1)
            ((void (*)(char *, _BYTE *))off_1E34BDF78[v73])(&v62, buf);
          v73 = -1;
          if (v66 != -1)
            ((void (*)(char *, _BYTE *))off_1E34BDF78[v66])(&v62, v65);
          v66 = -1;
          if (v69 != -1)
            ((void (*)(_BYTE *, WebCore::SecurityOriginData **))off_1E34BDF78[v69])(buf, &v67);
          v59[0] = (WebCore::SecurityOriginData *)((char *)v59[0] + 32);
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v59);
          v23 = v59[0];
        }
        while (v59[0] != v25);
        v24 = v60;
      }
      if (v24)
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v24, v22);
    }
  }
  if ((a3 & 0x200) != 0)
  {
    WebKit::NetworkProcess::hostNamesWithHSTSCache(a1, a2, (uint64_t *)buf);
    v29 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    v30 = *(WTF::StringImpl ***)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v29;
    if (v30)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v28);
      if (*(_QWORD *)buf)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v57);
    }
  }
  if ((a3 & 0x4000) != 0)
  {
    if (v14)
    {
      if (*((_BYTE *)v14 + 760))
      {
        v31 = *((_QWORD *)v14 + 93);
        if (v31)
        {
          if (*(_DWORD *)(v31 + 4))
          {
            WebKit::NetworkSession::ensureSWServer(v14);
            do
              v32 = __ldaxr((unsigned int *)v11);
            while (__stlxr(v32 + 1, (unsigned int *)v11));
            v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v33 = off_1E34BE4B8;
            v33[1] = v11;
            v67 = 0;
            *(_QWORD *)buf = v33;
            WebCore::SWServer::getOriginsWithRegistrations();
            v34 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v34)
              (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
            WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)&v67);
          }
        }
      }
    }
  }
  v35 = a4;
  if ((a3 & 2) != 0)
  {
    if (v14)
    {
      v36 = (_DWORD *)*((_QWORD *)v14 + 76);
      if (v36)
      {
        v37 = v61;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 + 1, v37));
        v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v39 = off_1E34BE4E0;
        v39[1] = v37;
        v67 = 0;
        *(_QWORD *)buf = v39;
        WebKit::NetworkCache::Cache::fetchData(v36, v35 & 1, (uint64_t *)buf);
        if (*(_QWORD *)buf)
          (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
        WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)&v67);
      }
    }
  }
  if ((a3 & 0x40000) != 0 && v14)
  {
    v58 = v35;
    (*(void (**)(WebCore::SecurityOriginData **__return_ptr, WebKit::NetworkSession *))(*(_QWORD *)v14 + 96))(&v67, v14);
    if (HIDWORD(v68))
    {
      v41 = v67;
      v42 = v61;
      v43 = (uint64_t)(v61 + 4);
      v44 = 32 * HIDWORD(v68);
      do
      {
        v63[0] = 0;
        v64 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v63, (uint64_t)v41);
        buf[0] = 0;
        v73 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, (uint64_t)v63);
        LODWORD(v74) = 0x40000;
        *((_QWORD *)&v74 + 1) = 0;
        v45 = v42[7];
        if (v45 == v42[6])
        {
          WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>(v43, (unint64_t)buf);
        }
        else
        {
          v46 = *((_QWORD *)v42 + 2) + 48 * v45;
          *(_BYTE *)v46 = 0;
          *(_DWORD *)(v46 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v46, (uint64_t)buf);
          *(_OWORD *)(v46 + 32) = v74;
          ++v42[7];
        }
        if (v73 != -1)
          ((void (*)(WebCore::SecurityOriginData **, _BYTE *))off_1E34BDF78[v73])(v59, buf);
        v73 = -1;
        if (v64 != -1)
          ((void (*)(WebCore::SecurityOriginData **, _BYTE *))off_1E34BDF78[v64])(v59, v63);
        v64 = -1;
        v41 = (WebCore::SecurityOriginData *)((char *)v41 + 32);
        v44 -= 32;
      }
      while (v44);
    }
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v40);
    v35 = v58;
  }
  if ((a3 & 0x1000) != 0)
  {
    if (v14)
    {
      v47 = *((_QWORD *)v14 + 9);
      if (v47)
      {
        v48 = v61;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 + 1, v48));
        v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v50 = off_1E34BE508;
        v50[1] = v48;
        v67 = 0;
        *(_QWORD *)buf = v50;
        WebKit::WebResourceLoadStatisticsStore::registrableDomains(v47, (uint64_t *)buf);
        if (*(_QWORD *)buf)
          (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
        WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)&v67);
      }
    }
  }
  if ((*(_QWORD *)&a3 & 0x8C0B0) != 0 && v14)
  {
    v51 = *((_QWORD *)v14 + 100);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v51 + 16));
    v52 = v61;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
    v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v54 = off_1E34BE530;
    v54[1] = v52;
    v67 = 0;
    *(_QWORD *)buf = v54;
    WebKit::NetworkStorageManager::fetchData(v51, a3, v35 & 1, (uint64_t *)buf);
    if (*(_QWORD *)buf)
      (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
    WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)&v67);
    if (v51)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v51 + 16), v55);
  }
  return WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref((WTF::RunLoop *)&v61);
}

WTF::RunLoop *WTF::Ref<WebKit::NetworkProcess::fetchWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WebKit::WebsiteData &&)> &>>::~Ref(WTF::RunLoop *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)v2);
      WTF::RunLoop::main(this);
      v6 = *(_QWORD *)(v2 + 48);
      *(_QWORD *)(v2 + 48) = 0;
      v7 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      v8 = *(_OWORD *)(v2 + 8);
      *(_OWORD *)(v2 + 8) = 0u;
      v18 = v8;
      v19 = *(_OWORD *)(v2 + 32);
      *(_OWORD *)(v2 + 32) = 0u;
      v9 = WTF::fastMalloc((WTF *)0x38);
      *(_QWORD *)v9 = off_1E34BE490;
      *(_OWORD *)(v9 + 8) = v18;
      v20 = 0u;
      v21 = 0;
      *(_QWORD *)(v9 + 24) = v7;
      *(_OWORD *)(v9 + 32) = v19;
      v22 = 0u;
      v23 = 0;
      *(_QWORD *)(v9 + 48) = v6;
      v24 = v9;
      WTF::RunLoop::dispatch();
      v11 = v24;
      v24 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20 + 8, v10);
      if ((_QWORD)v20)
        (*(void (**)(_QWORD))(*(_QWORD *)v20 + 8))(v20);
      v13 = *(WTF::StringImpl ***)(v2 + 48);
      if (v13)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v12);
      v14 = *(WTF::StringImpl ***)(v2 + 40);
      if (v14)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v12);
      v15 = *(WTF::StringImpl ***)(v2 + 32);
      if (v15)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v15, v12);
      WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 16, v12);
      v17 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      WTF::fastFree((WTF *)v2, v16);
    }
  }
  return this;
}

WebCore::CrossOriginPreflightResultCache *WebKit::NetworkProcess::deleteWebsiteData(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, double a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  WebCore::CrossOriginPreflightResultCache *result;
  WebKit::NetworkSession *v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  char v25;
  _QWORD *v26;
  unsigned int v27;
  WebCore::CrossOriginPreflightResultCache *v28;
  WTF::StringImpl *v29;
  char v30;
  WebCore::CrossOriginPreflightResultCache *v31;
  char v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  char v36;
  unsigned int v37;
  _QWORD *v38;
  char v39;
  char v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  WebCore::CrossOriginPreflightResultCache *v47;
  _BYTE buf[12];
  __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v9 = *a4;
  *a4 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34BE558;
  v10[1] = v9;
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = v10;
  v12 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(double *)&buf[4] = a5;
    v49 = 2048;
    v50 = a2;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteWebsiteData started to delete data modified since %f for session %llu", buf, 0x16u);
  }
  *(_QWORD *)buf = a2;
  result = (WebCore::CrossOriginPreflightResultCache *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), buf);
  v14 = result;
  if ((a3 & 0x200) != 0)
    result = (WebCore::CrossOriginPreflightResultCache *)WebKit::NetworkProcess::clearHSTSCache(a1, a2);
  if ((a3 & 1) != 0)
  {
    *(_QWORD *)buf = a2;
    result = (WebCore::CrossOriginPreflightResultCache *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), buf);
    if (result)
    {
      do
        v15 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v15 + 1, (unsigned int *)v11));
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E34BE580;
      v16[1] = v11;
      *(_QWORD *)buf = v16;
      WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince();
      result = *(WebCore::CrossOriginPreflightResultCache **)buf;
      *(_QWORD *)buf = 0;
      if (result)
        result = (WebCore::CrossOriginPreflightResultCache *)(*(uint64_t (**)(WebCore::CrossOriginPreflightResultCache *))(*(_QWORD *)result + 8))(result);
    }
  }
  if ((a3 & 0x2000) != 0)
  {
    *(_QWORD *)buf = a2;
    result = (WebCore::CrossOriginPreflightResultCache *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), buf);
    if (result)
      result = (WebCore::CrossOriginPreflightResultCache *)WebCore::CredentialStorage::clearCredentials((WebCore::CrossOriginPreflightResultCache *)((char *)result + 96));
    if (v14)
      result = (WebCore::CrossOriginPreflightResultCache *)(*(uint64_t (**)(WebKit::NetworkSession *, double))(*(_QWORD *)v14 + 136))(v14, a5);
  }
  if ((a3 & 0xC000) != 0 && ((a2 & 0x8000000000000000) == 0 || a2 == -1) && v14)
  {
    WebKit::NetworkSession::ensureSWServer(v14);
    do
      v17 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v17 + 1, (unsigned int *)v11));
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E34BE5A8;
    v18[1] = v11;
    *(_QWORD *)buf = v18;
    WebCore::SWServer::clearAll();
    v19 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    do
      v20 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v20 + 1, (unsigned int *)v11));
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E34BE5D0;
    v21[1] = v11;
    *(_QWORD *)buf = v21;
    WebKit::NetworkNotificationManager::removeAllPushSubscriptions((uint64_t)v14 + 832, (uint64_t *)buf);
    result = *(WebCore::CrossOriginPreflightResultCache **)buf;
    if (*(_QWORD *)buf)
      result = (WebCore::CrossOriginPreflightResultCache *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  }
  if ((a3 & 0x1000) != 0)
  {
    if (!v14)
      goto LABEL_78;
    v22 = *((_QWORD *)v14 + 9);
    if (v22)
    {
      {
        v23 = WebKit::WebResourceLoadStatisticsStore::monitoredDataTypes(void)::dataTypes;
      }
      else
      {
        v23 = 574905;
        WebKit::WebResourceLoadStatisticsStore::monitoredDataTypes(void)::dataTypes = 574905;
      }
      do
        v24 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v24 + 1, (unsigned int *)v11));
      v25 = (v23 & a3) != v23;
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v26 = off_1E34BE5F8;
      v26[1] = v11;
      *(_QWORD *)buf = v26;
      WebKit::WebResourceLoadStatisticsStore::scheduleClearInMemoryAndPersistent(v22, v25, (WTF::StringImpl *)buf);
      if (*(_QWORD *)buf)
        (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
    }
  }
  else if (!v14)
  {
LABEL_78:
    v30 = 0;
    if ((a3 & 4) == 0)
      goto LABEL_44;
LABEL_43:
    v31 = (WebCore::CrossOriginPreflightResultCache *)WebCore::CrossOriginPreflightResultCache::singleton(result);
    result = (WebCore::CrossOriginPreflightResultCache *)WebCore::CrossOriginPreflightResultCache::clear(v31);
    goto LABEL_44;
  }
  buf[0] = 0;
  buf[8] = 0;
  do
    v27 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v27 + 1, (unsigned int *)v11));
  v28 = (WebCore::CrossOriginPreflightResultCache *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = off_1E34BE620;
  *((_QWORD *)v28 + 1) = v11;
  v47 = v28;
  (*(void (**)(WebKit::NetworkSession *, _QWORD, uint64_t, _BYTE *, WebCore::CrossOriginPreflightResultCache **))(*(_QWORD *)v14 + 216))(v14, *(_QWORD *)&a5, 1, buf, &v47);
  result = v47;
  v47 = 0;
  if (result)
    result = (WebCore::CrossOriginPreflightResultCache *)(*(uint64_t (**)(WebCore::CrossOriginPreflightResultCache *))(*(_QWORD *)result + 8))(result);
  if (buf[8])
  {
    result = *(WebCore::CrossOriginPreflightResultCache **)buf;
    if (*(_QWORD *)buf)
      result = (WebCore::CrossOriginPreflightResultCache *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v29);
  }
  v30 = 1;
  if ((a3 & 4) != 0)
    goto LABEL_43;
LABEL_44:
  if ((a3 & 2) != 0)
    v32 = v30 ^ 1;
  else
    v32 = 1;
  if ((v32 & 1) == 0)
  {
    v33 = *((_QWORD *)v14 + 76);
    if (v33)
    {
      do
        v34 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v34 + 1, (unsigned int *)v11));
      v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v35 = off_1E34BE648;
      v35[1] = v11;
      *(_QWORD *)buf = v35;
      WebKit::NetworkCache::Cache::clear(v33, (uint64_t *)buf, a5);
      result = *(WebCore::CrossOriginPreflightResultCache **)buf;
      if (*(_QWORD *)buf)
        result = (WebCore::CrossOriginPreflightResultCache *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
    }
  }
  if ((a3 & 0x20000) != 0)
    v36 = v30 ^ 1;
  else
    v36 = 1;
  if ((v36 & 1) == 0)
  {
    do
      v37 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v37 + 1, (unsigned int *)v11));
    v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v38 = off_1E34BE670;
    v38[1] = v11;
    *(_QWORD *)buf = v38;
    WebKit::NetworkSession::clearPrivateClickMeasurement((uint64_t)v14);
    result = *(WebCore::CrossOriginPreflightResultCache **)buf;
    *(_QWORD *)buf = 0;
    if (result)
      result = (WebCore::CrossOriginPreflightResultCache *)(*(uint64_t (**)(WebCore::CrossOriginPreflightResultCache *))(*(_QWORD *)result + 8))(result);
  }
  if ((a3 & 0x40000) != 0)
    v39 = v30 ^ 1;
  else
    v39 = 1;
  if ((v39 & 1) == 0)
    result = (WebCore::CrossOriginPreflightResultCache *)(*(uint64_t (**)(WebKit::NetworkSession *, double))(*(_QWORD *)v14 + 112))(v14, a5);
  if ((*(_QWORD *)&a3 & 0x8C0B0) != 0)
    v40 = v30 ^ 1;
  else
    v40 = 1;
  if ((v40 & 1) == 0)
  {
    v41 = *((_QWORD *)v14 + 100);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v41 + 16));
    do
      v42 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v42 + 1, (unsigned int *)v11));
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v43 = off_1E34BE698;
    v43[1] = v11;
    *(_QWORD *)buf = v43;
    WebKit::NetworkStorageManager::deleteDataModifiedSince(v41, a3, (uint64_t *)buf, a5);
    result = *(WebCore::CrossOriginPreflightResultCache **)buf;
    if (*(_QWORD *)buf)
      result = (WebCore::CrossOriginPreflightResultCache *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
    if (v41)
      result = (WebCore::CrossOriginPreflightResultCache *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v41 + 16), v44);
  }
  do
  {
    v45 = __ldaxr((unsigned int *)v11);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, (unsigned int *)v11));
  if (!v46)
  {
    atomic_store(1u, (unsigned int *)v11);
    *(_QWORD *)buf = v11;
    return (WebCore::CrossOriginPreflightResultCache *)WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)buf);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::deleteWebsiteDataForOrigin(uint64_t a1, uint64_t a2, int a3, WebCore::SecurityOriginData *a4, uint64_t *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t result;
  WebKit::NetworkSession *v14;
  unsigned int v15;
  _QWORD *v16;
  WebKit::NetworkCache::Cache *v17;
  WTF::StringImpl *v18;
  WebCore::ResourceRequestBase *v19;
  const WTF::String *v20;
  char v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WebKit::NetworkCache::Cache *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  void *v43;
  unsigned int v44;
  _QWORD *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unsigned int *v52;
  uint8_t buf[16];
  char v54;
  _BYTE v55[24];
  int v56;
  WTF::StringImpl *v57[2];
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v9 = *a5;
  *a5 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34BE6C0;
  v10[1] = v9;
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = v10;
  v12 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteWebsiteDataForOrigin started to delete data for session %llu", buf, 0xCu);
  }
  *(_QWORD *)buf = a2;
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), buf);
  v14 = (WebKit::NetworkSession *)result;
  if ((a3 & 1) != 0)
  {
    *(_QWORD *)buf = a2;
    result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), buf);
    if (result)
    {
      do
        v15 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v15 + 1, (unsigned int *)v11));
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E34BE6E8;
      v16[1] = v11;
      *(_QWORD *)buf = v16;
      WebCore::NetworkStorageSession::deleteCookies();
      result = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  if ((a3 & 2) != 0 && ((a2 & 0x8000000000000000) == 0 || a2 == -1))
  {
    v17 = (WebKit::NetworkCache::Cache *)*((_QWORD *)v14 + 76);
    if (v17)
    {
      ++*(_DWORD *)v17;
      v50 = 0;
      v51 = 0;
      if (WebCore::operator==())
      {
        v18 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v18 += 2;
        v49 = v18;
      }
      else
      {
        v19 = (WebCore::ResourceRequestBase *)WebCore::SecurityOriginData::host(a4);
        WebCore::ResourceRequestBase::partitionName(v19, v20);
      }
      v21 = WebCore::operator==();
      ++*(_DWORD *)v17;
      *(_QWORD *)buf = v17;
      do
        v22 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v22 + 1, (unsigned int *)v11));
      *(_QWORD *)&buf[8] = v11;
      v54 = v21;
      v55[0] = 0;
      v56 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v55, (uint64_t)a4 + 32);
      v23 = v49;
      if (v49)
        *(_DWORD *)v49 += 2;
      v24 = v50;
      v50 = 0;
      v57[0] = v23;
      v57[1] = v24;
      v25 = v51;
      v51 = 0;
      v58 = v25;
      v26 = WTF::fastMalloc((WTF *)0x58);
      *(_QWORD *)v26 = off_1E34BE710;
      *(_QWORD *)(v26 + 8) = *(_QWORD *)buf;
      v27 = *(_QWORD *)&buf[8];
      *(_OWORD *)buf = 0u;
      *(_QWORD *)(v26 + 16) = v27;
      *(_BYTE *)(v26 + 24) = v54;
      *(_BYTE *)(v26 + 32) = 0;
      *(_DWORD *)(v26 + 56) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v26 + 32, (uint64_t)v55);
      *(WTF::StringImpl **)(v26 + 64) = v57[0];
      v28 = v57[1];
      *(_OWORD *)v57 = 0u;
      *(_QWORD *)(v26 + 72) = v28;
      v29 = v58;
      v58 = 0;
      *(_QWORD *)(v26 + 80) = v29;
      v48 = v26;
      WebKit::NetworkCache::Cache::traverse((uint64_t)v17, (WTF::SHA1 *)&v49, &v48);
      v31 = v48;
      v48 = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57[1], v30);
      v33 = v57[0];
      v57[0] = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v32);
        else
          *(_DWORD *)v33 -= 2;
      }
      if (v56 != -1)
        ((void (*)(unsigned int **, _BYTE *))off_1E34BDF78[v56])(&v52, v55);
      v56 = -1;
      v34 = *(unsigned int **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (v34)
      {
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          atomic_store(1u, v34);
          v52 = v34;
          WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v52);
        }
      }
      v37 = *(WebKit::NetworkCache::Cache **)buf;
      *(_QWORD *)buf = 0;
      if (v37)
        WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v37, v32);
      v38 = v49;
      v49 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v32);
        else
          *(_DWORD *)v38 -= 2;
      }
      WTF::Vector<WebKit::NetworkCache::Key,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v50, v32);
      result = (uint64_t)WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v17, v39);
    }
  }
  if ((*(_QWORD *)&a3 & 0x8C0B0) != 0 && v14)
  {
    v40 = *((_QWORD *)v14 + 100);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v40 + 16));
    do
      v41 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v41 + 1, (unsigned int *)v11));
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v42 = off_1E34BE760;
    v42[1] = v11;
    *(_QWORD *)buf = v42;
    WebKit::NetworkStorageManager::deleteData(v40, a3, (uint64_t)a4, (unsigned __int8 **)buf);
    result = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (v40)
      result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v40 + 16), v43);
  }
  if ((a3 & 0xC000) != 0 && ((a2 & 0x8000000000000000) == 0 || a2 == -1))
  {
    if (v14)
    {
      WebKit::NetworkSession::ensureSWServer(v14);
      do
        v44 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v44 + 1, (unsigned int *)v11));
      v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v45 = off_1E34BE788;
      v45[1] = v11;
      *(_QWORD *)buf = v45;
      WebCore::SWServer::clear();
      result = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  do
  {
    v46 = __ldaxr((unsigned int *)v11);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, (unsigned int *)v11));
  if (!v47)
  {
    atomic_store(1u, (unsigned int *)v11);
    *(_QWORD *)buf = v11;
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)buf);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkProcess::deleteWebsiteDataForOrigins(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  WTF::StringImpl *result;
  WTF::StringImpl *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  WebCore::SecurityOriginData *v32;
  uint64_t v33;
  WebCore::RegistrableDomain *v34;
  unsigned int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  WebCore::CrossOriginPreflightResultCache *v47;
  _DWORD *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  const WebCore::SecurityOriginData *v52;
  WebCore::CredentialStorage *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unsigned int v60;
  _QWORD *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  unsigned int v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  WebCore::SecurityOriginData *v68;
  uint64_t v69;
  WebCore::RegistrableDomain *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  WebCore::RegistrableDomain *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WebCore::RegistrableDomain *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::ASCIICaseInsensitiveHash **v84;
  uint64_t v85;
  WTF::StringImpl **v86;
  unsigned int v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl **v97;
  uint8_t buf[24];
  int v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v15 = *a8;
  *a8 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E34BE7B0;
  v16[1] = v15;
  v17 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = v16;
  v18 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteWebsiteDataForOrigins started to delete data for session %llu", buf, 0xCu);
  }
  *(_QWORD *)buf = a2;
  result = (WTF::StringImpl *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), buf);
  v20 = result;
  if ((a3 & 1) != 0)
  {
    *(_QWORD *)buf = a2;
    result = (WTF::StringImpl *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), buf);
    if (result)
    {
      do
        v21 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v21 + 1, (unsigned int *)v17));
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v22 = off_1E34BE7D8;
      v22[1] = v17;
      *(_QWORD *)buf = v22;
      WebCore::NetworkStorageSession::deleteCookiesForHostnames();
      result = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (result)
        result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    }
  }
  if ((a3 & 0x200) != 0)
    result = (WTF::StringImpl *)WebKit::NetworkProcess::deleteHSTSCacheForHostNames(a1, a2, a6);
  v93 = a6;
  v94 = a2;
  if ((a3 & 0x40000) != 0 && v20)
  {
    *(_OWORD *)buf = 0uLL;
    v23 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v23)
    {
      if (v23 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v24 = WTF::fastMalloc((WTF *)(8 * v23));
      *(_DWORD *)&buf[8] = v23;
      *(_QWORD *)buf = v24;
      if (*(_DWORD *)(a4 + 12))
      {
        v25 = v24;
        v26 = 0;
        v27 = 0;
        do
        {
          v28 = *(_DWORD **)WebCore::SecurityOriginData::host((WebCore::SecurityOriginData *)(*(_QWORD *)a4 + v26));
          if (v28)
            *v28 += 2;
          v29 = v27 + 1;
          *(_QWORD *)(v25 + 8 * v27) = v28;
          v26 += 32;
          v27 = v29;
        }
        while (v29 < *(unsigned int *)(a4 + 12));
        *(_DWORD *)&buf[12] = v29;
      }
    }
    (*(void (**)(WTF::StringImpl *, uint8_t *))(*(_QWORD *)v20 + 104))(v20, buf);
    result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v30);
  }
  if ((a3 & 0x20000) != 0)
  {
    if (v20)
    {
      v31 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v31)
      {
        v32 = *(WebCore::SecurityOriginData **)a4;
        v33 = *(_QWORD *)a4 + 32 * v31;
        do
        {
          v34 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host(v32);
          WebCore::RegistrableDomain::uncheckedCreateFromHost(v34, (WTF::StringImpl **)buf);
          do
            v35 = __ldaxr((unsigned int *)v17);
          while (__stlxr(v35 + 1, (unsigned int *)v17));
          v36 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v36 = off_1E34BE800;
          *(_QWORD *)(v36 + 8) = v17;
          v97 = (WTF::StringImpl **)v36;
          (*(void (**)(_QWORD *, uint8_t *, WTF::StringImpl ***))(**((_QWORD **)v20 + 19) + 40))(*((_QWORD **)v20 + 19), buf, &v97);
          v38 = v97;
          v97 = 0;
          if (v38)
            (*((void (**)(WTF::StringImpl **))*v38 + 1))(v38);
          result = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
            else
              *(_DWORD *)result -= 2;
          }
          v32 = (WebCore::SecurityOriginData *)((char *)v32 + 32);
        }
        while (v32 != (WebCore::SecurityOriginData *)v33);
      }
    }
  }
  if ((a3 & 0xC000) != 0 && ((v94 & 0x8000000000000000) == 0 || v94 == -1))
  {
    if (v20)
    {
      result = (WTF::StringImpl *)WebKit::NetworkSession::ensureSWServer(v20);
      v39 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v39)
      {
        v40 = *(_QWORD *)a4;
        v41 = *(_QWORD *)a4 + 32 * v39;
        do
        {
          do
            v42 = __ldaxr((unsigned int *)v17);
          while (__stlxr(v42 + 1, (unsigned int *)v17));
          v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v43 = off_1E34BE828;
          v43[1] = v17;
          *(_QWORD *)buf = v43;
          WebCore::SWServer::clear();
          v44 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v44)
            (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
          buf[0] = 0;
          v99 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)buf, v40);
          do
            v45 = __ldaxr((unsigned int *)v17);
          while (__stlxr(v45 + 1, (unsigned int *)v17));
          v46 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v46 = off_1E34BE850;
          *(_QWORD *)(v46 + 8) = v17;
          v97 = (WTF::StringImpl **)v46;
          WebKit::NetworkNotificationManager::removePushSubscriptionsForOrigin((uint64_t)v20 + 832, (uint64_t)buf, (uint64_t *)&v97);
          result = (WTF::StringImpl *)v97;
          v97 = 0;
          if (result)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
          if (v99 != -1)
            result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl ***, uint8_t *))off_1E34BDF78[v99])(&v97, buf);
          v40 += 32;
        }
        while (v40 != v41);
      }
    }
  }
  if ((a3 & 4) != 0)
  {
    v47 = (WebCore::CrossOriginPreflightResultCache *)WebCore::CrossOriginPreflightResultCache::singleton(result);
    result = (WTF::StringImpl *)WebCore::CrossOriginPreflightResultCache::clear(v47);
  }
  if ((a3 & 2) != 0)
  {
    if (v20)
    {
      v48 = (_DWORD *)*((_QWORD *)v20 + 76);
      if (v48)
      {
        do
          v49 = __ldaxr((unsigned int *)v17);
        while (__stlxr(v49 + 1, (unsigned int *)v17));
        v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v50 = off_1E34BE878;
        v50[1] = v17;
        *(_QWORD *)buf = v50;
        WebKit::NetworkCache::Cache::deleteData(v48, a4, (uint64_t *)buf);
        result = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (result)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  if ((a3 & 0x2000) != 0)
  {
    *(_QWORD *)buf = v94;
    result = (WTF::StringImpl *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), buf);
    if (result)
    {
      v51 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v51)
      {
        v52 = *(const WebCore::SecurityOriginData **)a4;
        v53 = (WTF::StringImpl *)((char *)result + 96);
        v54 = 32 * v51;
        do
        {
          result = (WTF::StringImpl *)WebCore::CredentialStorage::removeCredentialsWithOrigin(v53, v52);
          v52 = (const WebCore::SecurityOriginData *)((char *)v52 + 32);
          v54 -= 32;
        }
        while (v54);
      }
    }
    if (!v20)
      goto LABEL_122;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v20 + 128))(v20, a4);
  }
  if ((a3 & 0x1000) != 0)
  {
    if (v20)
    {
      v55 = *(unsigned int *)(a7 + 12);
      if ((_DWORD)v55)
      {
        v56 = *(WTF::StringImpl ***)a7;
        v57 = *(_QWORD *)a7 + 8 * v55;
        do
        {
          v58 = *((_QWORD *)v20 + 9);
          if (v58)
          {
            v59 = *v56;
            if (*v56)
              *(_DWORD *)v59 += 2;
            v96 = v59;
            do
              v60 = __ldaxr((unsigned int *)v17);
            while (__stlxr(v60 + 1, (unsigned int *)v17));
            v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v61 = off_1E34BE8A0;
            v61[1] = v17;
            *(_QWORD *)buf = v61;
            WebKit::WebResourceLoadStatisticsStore::removeDataForDomain(v58, (uint64_t *)&v96, (uint64_t *)buf);
            if (*(_QWORD *)buf)
              (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
            result = v96;
            v96 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v62);
              else
                *(_DWORD *)result -= 2;
            }
          }
          ++v56;
        }
        while (v56 != (WTF::StringImpl **)v57);
      }
    }
  }
  if ((a3 & 0x8C0B0) != 0 && v20)
  {
    v63 = *((_QWORD *)v20 + 100);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v63 + 16));
    do
      v64 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v64 + 1, (unsigned int *)v17));
    v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v65 = off_1E34BE8C8;
    v65[1] = v17;
    *(_QWORD *)buf = v65;
    WebKit::NetworkStorageManager::deleteData(v63, a3, (uint64_t *)a4, (uint64_t *)buf);
    if (*(_QWORD *)buf)
      (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
    if (v63)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v63 + 16), v66);
    goto LABEL_89;
  }
  if (v20)
  {
LABEL_89:
    v97 = 0;
    v67 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v67)
    {
      v68 = *(WebCore::SecurityOriginData **)a4;
      v69 = 32 * v67;
      do
      {
        v70 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host(v68);
        WebCore::RegistrableDomain::uncheckedCreateFromHost(v70, &v95);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v97, &v95, (uint64_t)buf);
        v72 = v95;
        v95 = 0;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
            WTF::StringImpl::destroy(v72, v71);
          else
            *(_DWORD *)v72 -= 2;
        }
        v68 = (WebCore::SecurityOriginData *)((char *)v68 + 32);
        v69 -= 32;
      }
      while (v69);
    }
    v73 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v73)
    {
      v74 = *(WebCore::RegistrableDomain **)a5;
      v75 = 8 * v73;
      do
      {
        WebCore::RegistrableDomain::uncheckedCreateFromHost(v74, &v95);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v97, &v95, (uint64_t)buf);
        v77 = v95;
        v95 = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 == 2)
            WTF::StringImpl::destroy(v77, v76);
          else
            *(_DWORD *)v77 -= 2;
        }
        v74 = (WebCore::RegistrableDomain *)((char *)v74 + 8);
        v75 -= 8;
      }
      while (v75);
    }
    v78 = *(unsigned int *)(v93 + 12);
    if ((_DWORD)v78)
    {
      v79 = *(WebCore::RegistrableDomain **)v93;
      v80 = 8 * v78;
      do
      {
        WebCore::RegistrableDomain::uncheckedCreateFromHost(v79, &v95);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v97, &v95, (uint64_t)buf);
        v82 = v95;
        v95 = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 2)
            WTF::StringImpl::destroy(v82, v81);
          else
            *(_DWORD *)v82 -= 2;
        }
        v79 = (WebCore::RegistrableDomain *)((char *)v79 + 8);
        v80 -= 8;
      }
      while (v80);
    }
    v83 = *(unsigned int *)(a7 + 12);
    if ((_DWORD)v83)
    {
      v84 = *(WTF::ASCIICaseInsensitiveHash ***)a7;
      v85 = 8 * v83;
      do
      {
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v97, v84++, (uint64_t)buf);
        v85 -= 8;
      }
      while (v85);
    }
    v86 = v97;
    v97 = 0;
    *(_QWORD *)buf = v86;
    buf[8] = 1;
    do
      v87 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v87 + 1, (unsigned int *)v17));
    v88 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v88 = off_1E34BE8F0;
    *((_QWORD *)v88 + 1) = v17;
    v95 = v88;
    (*(void (**)(WTF::StringImpl *, _QWORD, _QWORD, uint8_t *, WTF::StringImpl **))(*(_QWORD *)v20 + 216))(v20, 0, 0, buf, &v95);
    v90 = v95;
    v95 = 0;
    if (v90)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v90 + 8))(v90);
    if (buf[8] && *(_QWORD *)buf)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v89);
    result = (WTF::StringImpl *)v97;
    if (v97)
      result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v97, v89);
    goto LABEL_122;
  }
  do
  {
LABEL_122:
    v91 = __ldaxr((unsigned int *)v17);
    v92 = v91 - 1;
  }
  while (__stlxr(v92, (unsigned int *)v17));
  if (!v92)
  {
    atomic_store(1u, (unsigned int *)v17);
    *(_QWORD *)buf = v17;
    return (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)buf);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(_QWORD *a1, uint64_t a2, int a3, unsigned int *a4, char a5, uint64_t *a6)
{
  NSObject *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *result;
  void *v21;
  WTF *v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  void *v28;
  WTF *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  void *v41;
  WTF *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  _QWORD *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl **v54;
  WTF::StringImpl **v55;
  void *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unsigned int v64;
  _QWORD *v65;
  unsigned int v66;
  _DWORD **v67;
  uint64_t v68;
  _DWORD *v69;
  void *v70;
  uint64_t v71;
  WebCore::CredentialStorage *v72;
  void *v73;
  const WebCore::SecurityOriginData *v74;
  uint64_t v75;
  void *v76;
  double v77;
  void *v78;
  void *v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF *v87;
  void *v88;
  WTF::StringImpl *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  void *v93;
  _DWORD *v94;
  unsigned int *v95;
  unsigned int v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  _QWORD *v103;
  void *v104;
  int v105;
  void *v106;
  int v107;
  unsigned int *v108;
  unsigned int v109;
  _QWORD *v110;
  os_unfair_lock_s *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  IPC::Encoder *v116;
  WTF *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  _DWORD **v126;
  unsigned int v127;
  WTF *v128;
  uint64_t v129;
  WTF *v130;
  uint64_t v131;
  WTF::StringImpl **v132;
  WTF::StringImpl **v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  _BYTE buf[24];
  WTF *v137;
  __int16 v138;
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v12 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = a4[3];
    v14 = (WTF *)a4[7];
    v15 = a4[11];
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 2048;
    v137 = v14;
    v138 = 2048;
    v139 = v15;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains started to delete and restrict data for session %llu - %zu domainsToDeleteAllCookiesFor, %zu domainsToDeleteAllButHttpOnlyCookiesFor, %zu domainsToDeleteAllScriptWrittenStorageFor", buf, 0x2Au);
  }
  *(_QWORD *)buf = a2;
  v16 = (unsigned int *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 26, buf);
  v17 = WTF::fastMalloc((WTF *)0x18);
  v18 = *a6;
  *a6 = 0;
  v19 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v19 = &off_1E34BE918;
  *(_QWORD *)(v19 + 8) = a1;
  *(_QWORD *)(v19 + 16) = v18;
  *(_BYTE *)(v19 + 24) = a5;
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = 0;
  v133 = 0;
  v134 = v17;
  v131 = 0;
  v132 = 0;
  v129 = 0;
  v130 = 0;
  v128 = 0;
  result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v126, (uint64_t)(a4 + 8));
  if ((a3 & 1) != 0)
  {
    *(_QWORD *)buf = a2;
    result = (WTF::StringImpl *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 27, buf);
    if (result)
    {
      WebCore::NetworkStorageSession::getHostnamesWithCookies();
      WebKit::filterForRegistrableDomains((uint64_t)buf, (uint64_t)a4, &v133);
      if (HIDWORD(v131))
        WTF::VectorDestructor<true,WTF::String>::destruct(v130, (WTF *)((char *)v130 + 8 * HIDWORD(v131)));
      v22 = v130;
      if (v130)
      {
        v130 = 0;
        LODWORD(v131) = 0;
        WTF::fastFree(v22, v21);
      }
      v130 = *(WTF **)buf;
      v23 = *(_QWORD *)&buf[8];
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v131 = v23;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v21);
      do
        v24 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v24 + 1, (unsigned int *)v17));
      v124 = (WTF::StringImpl *)v17;
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v25 = off_1E34BE990;
      v26 = v124;
      v124 = 0;
      v25[1] = v26;
      *(_QWORD *)buf = v25;
      WebCore::NetworkStorageSession::deleteCookiesForHostnames();
      v27 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v124);
      WebKit::filterForRegistrableDomains((uint64_t)buf, (uint64_t)(a4 + 8), &v133);
      if (HIDWORD(v129))
        WTF::VectorDestructor<true,WTF::String>::destruct(v128, (WTF *)((char *)v128 + 8 * HIDWORD(v129)));
      v29 = v128;
      if (v128)
      {
        v128 = 0;
        LODWORD(v129) = 0;
        WTF::fastFree(v29, v28);
      }
      v128 = *(WTF **)buf;
      v30 = *(_QWORD *)&buf[8];
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v129 = v30;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v28);
      v31 = (unsigned int *)v134;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
      v124 = (WTF::StringImpl *)v31;
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v33 = off_1E34BE9B8;
      v34 = v124;
      v124 = 0;
      v33[1] = v34;
      *(_QWORD *)buf = v33;
      WebCore::NetworkStorageSession::deleteCookiesForHostnames();
      v35 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v124);
      if (HIDWORD(v131))
      {
        v36 = v130;
        v37 = (uint64_t *)(v134 + 16);
        v38 = 8 * HIDWORD(v131);
        do
        {
          WebCore::RegistrableDomain::uncheckedCreateFromHost(v36, &v124);
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v37, &v124, (uint64_t)buf);
          v40 = v124;
          v124 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v39);
            else
              *(_DWORD *)v40 -= 2;
          }
          v36 = (WTF *)((char *)v36 + 8);
          v38 -= 8;
        }
        while (v38);
      }
      WebKit::filterForRegistrableDomains((uint64_t)buf, (uint64_t)(a4 + 4), &v133);
      if (HIDWORD(v131))
        WTF::VectorDestructor<true,WTF::String>::destruct(v130, (WTF *)((char *)v130 + 8 * HIDWORD(v131)));
      v42 = v130;
      if (v130)
      {
        v130 = 0;
        LODWORD(v131) = 0;
        WTF::fastFree(v42, v41);
      }
      v130 = *(WTF **)buf;
      v43 = *(_QWORD *)&buf[8];
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v131 = v43;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v41);
      v44 = (unsigned int *)v134;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 + 1, v44));
      v124 = (WTF::StringImpl *)v44;
      v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v46 = off_1E34BE9E0;
      v47 = v124;
      v124 = 0;
      v46[1] = v47;
      *(_QWORD *)buf = v46;
      WebCore::NetworkStorageSession::deleteCookiesForHostnames();
      v48 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      result = WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v124);
      if (HIDWORD(v131))
      {
        v49 = v130;
        v50 = (uint64_t *)(v134 + 16);
        v51 = 8 * HIDWORD(v131);
        do
        {
          WebCore::RegistrableDomain::uncheckedCreateFromHost(v49, &v124);
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v50, &v124, (uint64_t)buf);
          result = v124;
          v124 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v52);
            else
              *(_DWORD *)result -= 2;
          }
          v49 = (WTF *)((char *)v49 + 8);
          v51 -= 8;
        }
        while (v51);
      }
    }
  }
  v124 = 0;
  v125 = 0;
  if ((a3 & 0x200) != 0)
  {
    WebKit::NetworkProcess::hostNamesWithHSTSCache((uint64_t)a1, a2, (uint64_t *)buf);
    v54 = *(WTF::StringImpl ***)buf;
    *(_QWORD *)buf = 0;
    v55 = v132;
    v132 = v54;
    if (v55)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v55, v53);
      if (*(_QWORD *)buf)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)buf, v123);
    }
    WebKit::filterForRegistrableDomains((uint64_t)buf, (uint64_t)&v126, &v132);
    if (HIDWORD(v125))
      WTF::VectorDestructor<true,WTF::String>::destruct(v124, (WTF::StringImpl *)((char *)v124 + 8 * HIDWORD(v125)));
    v57 = v124;
    if (v124)
    {
      v124 = 0;
      LODWORD(v125) = 0;
      WTF::fastFree(v57, v56);
    }
    v124 = *(WTF::StringImpl **)buf;
    v58 = *(_QWORD *)&buf[8];
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v125 = v58;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v56);
    if (HIDWORD(v125))
    {
      v59 = v124;
      v60 = (uint64_t *)(v134 + 16);
      v61 = 8 * HIDWORD(v125);
      do
      {
        WebCore::RegistrableDomain::uncheckedCreateFromHost(v59, &v135);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(v60, &v135, (uint64_t)buf);
        v63 = v135;
        v135 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, v62);
          else
            *(_DWORD *)v63 -= 2;
        }
        v59 = (WTF::StringImpl *)((char *)v59 + 8);
        v61 -= 8;
      }
      while (v61);
    }
    result = (WTF::StringImpl *)WebKit::NetworkProcess::deleteHSTSCacheForHostNames((uint64_t)a1, a2, (uint64_t)&v124);
  }
  if ((a3 & 0x40000) != 0 && v16)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v64 = v127;
    if (v127)
    {
      if (v127 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v65 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v127));
      *(_DWORD *)&buf[8] = v64;
      *(_QWORD *)buf = v65;
      v66 = v127;
      if (v127)
      {
        v67 = v126;
        v68 = v127;
        do
        {
          v69 = *v67;
          if (*v67)
            *v69 += 2;
          *v65++ = v69;
          ++v67;
          --v68;
        }
        while (v68);
        *(_DWORD *)&buf[12] = v66;
      }
    }
    (*(void (**)(unsigned int *, _BYTE *))(*(_QWORD *)v16 + 104))(v16, buf);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v70);
  }
  if ((a3 & 0x2000) != 0)
  {
    *(_QWORD *)buf = a2;
    v71 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(a1 + 27, buf);
    if (v71)
    {
      v72 = (WebCore::CredentialStorage *)(v71 + 96);
      WebCore::CredentialStorage::originsWithCredentials((WebCore::CredentialStorage *)(v71 + 96));
      WebKit::filterForRegistrableDomains((uint64_t)buf, (uint64_t *)&v135, (uint64_t)&v126, (uint64_t *)(v134 + 16));
      if (*(_DWORD *)&buf[12])
      {
        v74 = *(const WebCore::SecurityOriginData **)buf;
        v75 = 32 * *(unsigned int *)&buf[12];
        do
        {
          WebCore::CredentialStorage::removeCredentialsWithOrigin(v72, v74);
          v74 = (const WebCore::SecurityOriginData *)((char *)v74 + 32);
          v75 -= 32;
        }
        while (v75);
      }
      WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v73);
      if (v135)
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v135, v76);
    }
    if (!v16)
      goto LABEL_114;
    (*(void (**)(WTF::StringImpl **__return_ptr, unsigned int *))(*(_QWORD *)v16 + 120))(&v135, v16);
    v77 = WebKit::filterForRegistrableDomains((uint64_t)buf, (uint64_t *)&v135, (uint64_t)&v126, (uint64_t *)(v134 + 16));
    (*(void (**)(unsigned int *, _BYTE *, double))(*(_QWORD *)v16 + 128))(v16, buf, v77);
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v78);
    if (v135)
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v135, v79);
    if ((a3 & 0x8000) != 0)
      goto LABEL_84;
    goto LABEL_82;
  }
  if ((a3 & 0x8000) == 0)
  {
LABEL_82:
    if ((a3 & 0x4000) == 0 || !v16)
    {
LABEL_98:
      if ((a3 & 2) != 0)
      {
        if (v16)
        {
          v94 = (_DWORD *)*((_QWORD *)v16 + 76);
          if (v94)
          {
            v95 = (unsigned int *)v134;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 + 1, v95));
            v97 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v97 = off_1E34BEA80;
            v97[1] = v95;
            v135 = 0;
            *(_QWORD *)buf = v97;
            WebKit::NetworkCache::Cache::deleteDataForRegistrableDomains(v94, (uint64_t)&v126, (uint64_t *)buf);
            v98 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v98)
              (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
            WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v135);
          }
        }
      }
      v99 = a3;
      if ((*(_QWORD *)&a3 & 0x8C0B0) != 0 && v16)
      {
        v100 = *((_QWORD *)v16 + 100);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v100 + 16));
        v101 = (unsigned int *)v134;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 + 1, v101));
        v103 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v103 = off_1E34BEAA8;
        v103[1] = v101;
        v135 = 0;
        *(_QWORD *)buf = v103;
        WebKit::NetworkStorageManager::deleteDataForRegistrableDomains(v100, v99, (uint64_t *)&v126, (uint64_t *)buf);
        if (*(_QWORD *)buf)
          (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
        WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v135);
        if (v100)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v100 + 16), v104);
      }
      goto LABEL_115;
    }
LABEL_84:
    if (*((_BYTE *)v16 + 760))
    {
      v80 = *((_QWORD *)v16 + 93);
      if (v80)
      {
        if (*(_DWORD *)(v80 + 4))
        {
          WebKit::NetworkSession::ensureSWServer((WebKit::NetworkSession *)v16);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)buf, (uint64_t)&v126);
          v81 = (unsigned int *)v134;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 + 1, v81));
          *(_QWORD *)&buf[16] = v81;
          WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v16 + 2, (uint64_t)v16);
          v83 = (unsigned int *)*((_QWORD *)v16 + 1);
          if (v83)
          {
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 + 1, v83));
          }
          v137 = (WTF *)v83;
          v85 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v85 = off_1E34BEA08;
          *((_QWORD *)v85 + 1) = *(_QWORD *)buf;
          v86 = *(_QWORD *)&buf[8];
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          *((_QWORD *)v85 + 2) = v86;
          *((_QWORD *)v85 + 3) = *(_QWORD *)&buf[16];
          v87 = v137;
          *(_QWORD *)&buf[16] = 0;
          v137 = 0;
          *((_QWORD *)v85 + 4) = v87;
          v135 = v85;
          WebCore::SWServer::getOriginsWithRegistrations();
          v89 = v135;
          v135 = 0;
          if (v89)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v89 + 8))(v89);
          v90 = (unsigned int *)v137;
          v137 = 0;
          if (v90)
          {
            do
            {
              v91 = __ldaxr(v90);
              v92 = v91 - 1;
            }
            while (__stlxr(v92, v90));
            if (!v92)
            {
              atomic_store(1u, v90);
              WTF::fastFree((WTF *)v90, v88);
            }
          }
          WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&buf[16]);
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v93);
        }
      }
    }
    goto LABEL_98;
  }
  if (v16)
    goto LABEL_84;
LABEL_114:
  v99 = a3;
LABEL_115:
  v105 = WebKit::WebsiteData::filter(v99, 1);
  if (v105 && v127)
  {
    v107 = v105;
    v108 = (unsigned int *)v134;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 + 1, v108));
    v110 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v110 = off_1E34BEAD0;
    v110[1] = v108;
    *(_QWORD *)buf = 0;
    WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)buf);
    v111 = (os_unfair_lock_s *)a1[4];
    v112 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v112 = &off_1E34BEAF8;
    v112[1] = v110;
    v113 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v114 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v114 = 307;
    *(_QWORD *)(v114 + 8) = 0;
    *(_QWORD *)(v114 + 528) = v114 + 16;
    *(_QWORD *)(v114 + 536) = v114 + 16;
    *(_OWORD *)(v114 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v114 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v114);
    v135 = (WTF::StringImpl *)v114;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v114, 8uLL, 8) = a2;
    *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v114, 4uLL, 4) = v107;
    *IPC::Encoder::grow((IPC::Encoder *)v114, 1uLL, 1) = 2;
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v114, (uint64_t)&v126);
    *(_QWORD *)buf = v112;
    *(_QWORD *)&buf[8] = v113;
    IPC::Connection::sendMessageWithAsyncReply(v111, &v135, (uint64_t *)buf, 0, 0);
    v115 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v115)
      (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
    v116 = v135;
    v135 = 0;
    if (v116)
    {
      IPC::Encoder::~Encoder(v116, v106);
      WTF::fastFree(v117, v118);
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v124, v106);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v126, v119);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v128, v120);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v130, v121);
  if (v132)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v132, v122);
  if (v133)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v133, v122);
  return WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref((WTF::RunLoop *)&v134);
}

WTF::StringImpl *WebKit::filterForRegistrableDomains(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  WTF::StringImpl *result;
  WebCore::RegistrableDomain *v7;
  WebCore::RegistrableDomain *v8;
  WebCore::RegistrableDomain *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl **v18;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a3);
  v7 = result;
  v9 = v8;
  if (*a3)
    v10 = (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)];
  else
    v10 = 0;
  if ((WTF::StringImpl *)v10 != result)
  {
    do
    {
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v7, &v17);
      v18 = &v17;
      v13 = WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::RegistrableDomain>(WebCore::RegistrableDomain const&)::{lambda(WebCore::RegistrableDomain&)#1}>(a2, &v18, v11);
      result = v17;
      v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
      if (v13 != -1)
      {
        v14 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
        {
          result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(a1, (unint64_t)v7);
        }
        else
        {
          v15 = *(_QWORD *)a1;
          v16 = *(_DWORD **)v7;
          if (*(_QWORD *)v7)
            *v16 += 2;
          *(_QWORD *)(v15 + 8 * v14) = v16;
          *(_DWORD *)(a1 + 12) = v14 + 1;
        }
      }
      while (1)
      {
        v7 = (WebCore::RegistrableDomain *)((char *)v7 + 8);
        if (v7 == v9)
          break;
        if ((unint64_t)(*(_QWORD *)v7 + 1) > 1)
          goto LABEL_18;
      }
      v7 = v9;
LABEL_18:
      ;
    }
    while (v7 != (WebCore::RegistrableDomain *)v10);
  }
  return result;
}

double WebKit::filterForRegistrableDomains(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  WebCore::SecurityOriginData *v8;
  double result;
  WebCore::SecurityOriginData *v10;
  WebCore::SecurityOriginData *v11;
  WebCore::SecurityOriginData *v12;
  WebCore::RegistrableDomain *v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl **v19[3];
  WTF::StringImpl *v20;
  WebCore::SecurityOriginData *v21[2];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(a2);
  v10 = v8;
  v21[0] = v8;
  v21[1] = v11;
  if (*a2)
    v12 = (WebCore::SecurityOriginData *)(*a2 + 32 * *(unsigned int *)(*a2 - 4));
  else
    v12 = 0;
  if (v12 != v8)
  {
    do
    {
      v13 = (WebCore::RegistrableDomain *)WebCore::SecurityOriginData::host(v10);
      WebCore::RegistrableDomain::uncheckedCreateFromHost(v13, &v20);
      v19[0] = &v20;
      if (WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::RegistrableDomain>(WebCore::RegistrableDomain const&)::{lambda(WebCore::RegistrableDomain&)#1}>(a3, v19, v14) != -1)
      {
        v16 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
        {
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData const&>(a1, (unint64_t)v10);
        }
        else
        {
          v17 = *(_QWORD *)a1 + 32 * v16;
          *(_BYTE *)v17 = 0;
          *(_DWORD *)(v17 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v17, (uint64_t)v10);
          ++*(_DWORD *)(a1 + 12);
        }
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add(a4, &v20, (uint64_t)v19);
      }
      v18 = v20;
      v20 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v15);
        else
          *(_DWORD *)v18 -= 2;
      }
      v21[0] = (WebCore::SecurityOriginData *)((char *)v21[0] + 32);
      result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v21);
      v10 = v21[0];
    }
    while (v21[0] != v12);
  }
  return result;
}

WTF::RunLoop *WTF::Ref<WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor &&,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore>,WTF::HashTraits<WebCore>,WTF::HashTableTraits> &&)>>>::~Ref(WTF::RunLoop *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)v2);
      WTF::RunLoop::main(this);
      v10 = *(_OWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      v6 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v6 = &off_1E34BE968;
      *(_OWORD *)(v6 + 8) = v10;
      v11 = v6;
      WTF::RunLoop::dispatch();
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v8 = *(WTF::StringImpl ***)(v2 + 16);
      if (v8)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v7);
      v9 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::fastFree((WTF *)v2, v7);
    }
  }
  return this;
}

uint64_t WebKit::NetworkProcess::deleteCookiesForTesting(_QWORD *a1, uint64_t a2, unint64_t a3, int a4, uint64_t *a5)
{
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  if (a4)
    v8 = &v17;
  else
    v8 = &v18;
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)v8, a3);
  v9 = *a5;
  *a5 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34BEB20;
  v10[1] = v9;
  v16 = v10;
  WebKit::NetworkProcess::deleteAndRestrictWebsiteDataForRegistrableDomains(a1, a2, 1, (unsigned int *)&v17, 1, (uint64_t *)&v16);
  if (v16)
    (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v11);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v12);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v13);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v14);
}

WTF::RunLoop *WebKit::NetworkProcess::registrableDomainsWithWebsiteData(uint64_t a1, WTF::StringImpl **a2, int a3, char a4, uint64_t *a5)
{
  WebKit::NetworkSession *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WebCore::SecurityOriginData *v18;
  WebCore::SecurityOriginData *v19;
  WebCore::SecurityOriginData *v20;
  WebCore::SecurityOriginData *v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::SecurityOriginData *v24;
  WebCore::SecurityOriginData *v25;
  WebCore::SecurityOriginData *v26;
  WebCore::SecurityOriginData *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  _DWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  void *v42;
  WTF::StringImpl *v44;
  WebCore::SecurityOriginData *v45[2];
  WebCore::SecurityOriginData *v46;
  unsigned int *v47;
  char v48;
  _BYTE v49[24];
  int v50;
  WebCore::SecurityOriginData *v51[3];
  int v52;
  _BYTE v53[24];
  int v54;
  WTF::StringImpl **v55[3];
  int v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v55[0] = a2;
  v10 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), v55);
  v11 = WTF::fastMalloc((WTF *)0x38);
  v12 = *a5;
  *a5 = 0;
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v13 = &off_1E34BEB48;
  *(_QWORD *)(v13 + 8) = a1;
  *(_QWORD *)(v13 + 16) = v12;
  *(_BYTE *)(v13 + 24) = a4;
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = v13;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_QWORD *)(v11 + 48) = 0;
  v47 = (unsigned int *)v11;
  if ((a3 & 1) != 0)
  {
    v55[0] = a2;
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), v55))
    {
      WebCore::NetworkStorageSession::getHostnamesWithCookies();
    }
  }
  if ((a3 & 0x200) != 0)
  {
    WebKit::NetworkProcess::hostNamesWithHSTSCache(a1, (uint64_t)a2, (uint64_t *)v55);
    v15 = v55[0];
    v55[0] = 0;
    v16 = *(WTF::StringImpl ***)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v15;
    if (v16)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v14);
      if (v55[0])
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v55[0], v44);
    }
  }
  if ((a3 & 0x2000) != 0)
  {
    v55[0] = a2;
    v17 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), v55);
    if (v17)
    {
      WebCore::CredentialStorage::originsWithCredentials((WebCore::CredentialStorage *)(v17 + 96));
      v19 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)v45);
      v51[0] = v19;
      v51[1] = v18;
      v20 = v45[0];
      if (v45[0])
        v21 = (WebCore::SecurityOriginData *)((char *)v45[0] + 32 * *((unsigned int *)v45[0] - 1));
      else
        v21 = 0;
      if (v21 != v19)
      {
        do
        {
          v53[0] = 0;
          v54 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v53, (uint64_t)v19);
          LOBYTE(v55[0]) = 0;
          v56 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v55, (uint64_t)v53);
          LODWORD(v57) = 0x2000;
          *((_QWORD *)&v57 + 1) = 0;
          v22 = *(_DWORD *)(v11 + 28);
          if (v22 == *(_DWORD *)(v11 + 24))
          {
            WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>(v11 + 16, (unint64_t)v55);
          }
          else
          {
            v23 = *(_QWORD *)(v11 + 16) + 48 * v22;
            *(_BYTE *)v23 = 0;
            *(_DWORD *)(v23 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v23, (uint64_t)v55);
            *(_OWORD *)(v23 + 32) = v57;
            ++*(_DWORD *)(v11 + 28);
          }
          if (v56 != -1)
            ((void (*)(WebCore::SecurityOriginData **, WTF::StringImpl ***))off_1E34BDF78[v56])(&v46, v55);
          v56 = -1;
          if (v54 != -1)
            ((void (*)(WebCore::SecurityOriginData **, _BYTE *))off_1E34BDF78[v54])(&v46, v53);
          v54 = -1;
          v51[0] = (WebCore::SecurityOriginData *)((char *)v51[0] + 32);
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v51);
          v19 = v51[0];
        }
        while (v51[0] != v21);
        v20 = v45[0];
      }
      if (v20)
        WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v20, v18);
    }
    if (!v10)
      return WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)&v47);
    (*(void (**)(WebCore::SecurityOriginData **__return_ptr, WebKit::NetworkSession *))(*(_QWORD *)v10 + 120))(&v46, v10);
    v25 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)&v46);
    v45[0] = v25;
    v45[1] = v24;
    v26 = v46;
    if (v46)
      v27 = (WebCore::SecurityOriginData *)((char *)v46 + 32 * *((unsigned int *)v46 - 1));
    else
      v27 = 0;
    if (v27 != v25)
    {
      do
      {
        LOBYTE(v51[0]) = 0;
        v52 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v51, (uint64_t)v25);
        v49[0] = 0;
        v50 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v49, (uint64_t)v51);
        LOBYTE(v55[0]) = 0;
        v56 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v55, (uint64_t)v49);
        LODWORD(v57) = 0x2000;
        *((_QWORD *)&v57 + 1) = 0;
        v28 = *(_DWORD *)(v11 + 28);
        if (v28 == *(_DWORD *)(v11 + 24))
        {
          WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebsiteData::Entry>(v11 + 16, (unint64_t)v55);
        }
        else
        {
          v29 = *(_QWORD *)(v11 + 16) + 48 * v28;
          *(_BYTE *)v29 = 0;
          *(_DWORD *)(v29 + 24) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v29, (uint64_t)v55);
          *(_OWORD *)(v29 + 32) = v57;
          ++*(_DWORD *)(v11 + 28);
        }
        if (v56 != -1)
          ((void (*)(char *, WTF::StringImpl ***))off_1E34BDF78[v56])(&v48, v55);
        v56 = -1;
        if (v50 != -1)
          ((void (*)(char *, _BYTE *))off_1E34BDF78[v50])(&v48, v49);
        v50 = -1;
        if (v52 != -1)
          ((void (*)(WTF::StringImpl ***, WebCore::SecurityOriginData **))off_1E34BDF78[v52])(v55, v51);
        v45[0] = (WebCore::SecurityOriginData *)((char *)v45[0] + 32);
        WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v45);
        v25 = v45[0];
      }
      while (v45[0] != v27);
      v26 = v46;
    }
    if (v26)
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v26, v24);
  }
  if ((a3 & 0x4000) != 0)
  {
    if (v10)
    {
      if (*((_BYTE *)v10 + 760))
      {
        v30 = *((_QWORD *)v10 + 93);
        if (v30)
        {
          if (*(_DWORD *)(v30 + 4))
          {
            WebKit::NetworkSession::ensureSWServer(v10);
            do
              v31 = __ldaxr((unsigned int *)v11);
            while (__stlxr(v31 + 1, (unsigned int *)v11));
            v32 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v32 = off_1E34BEBC0;
            *(_QWORD *)(v32 + 8) = v11;
            v51[0] = 0;
            v55[0] = (WTF::StringImpl **)v32;
            WebCore::SWServer::getOriginsWithRegistrations();
            v33 = v55[0];
            v55[0] = 0;
            if (v33)
              (*((void (**)(WTF::StringImpl **))*v33 + 1))(v33);
            WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)v51);
          }
        }
      }
    }
  }
  if ((a3 & 2) != 0 && v10)
  {
    v34 = (_DWORD *)*((_QWORD *)v10 + 76);
    if (v34)
    {
      v35 = v47;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 + 1, v35));
      v37 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v37 = off_1E34BEBE8;
      *(_QWORD *)(v37 + 8) = v35;
      v51[0] = 0;
      v55[0] = (WTF::StringImpl **)v37;
      WebKit::NetworkCache::Cache::fetchData(v34, 0, (uint64_t *)v55);
      if (v55[0])
        (*((void (**)(WTF::StringImpl **))*v55[0] + 1))(v55[0]);
      WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)v51);
    }
  }
  else if (!v10)
  {
    return WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)&v47);
  }
  v38 = *((_QWORD *)v10 + 100);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v38 + 16));
  v39 = v47;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 + 1, v39));
  v41 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v41 = off_1E34BEC10;
  *(_QWORD *)(v41 + 8) = v39;
  v51[0] = 0;
  v55[0] = (WTF::StringImpl **)v41;
  WebKit::NetworkStorageManager::fetchData(v38, a3, 0, (uint64_t *)v55);
  if (v55[0])
    (*((void (**)(WTF::StringImpl **))*v55[0] + 1))(v55[0]);
  WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)v51);
  if (v38)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v38 + 16), v42);
  return WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref((WTF::RunLoop *)&v47);
}

WTF::RunLoop *WTF::Ref<WebKit::NetworkProcess::registrableDomainsWithWebsiteData(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,BOOL,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::CallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &>>::~Ref(WTF::RunLoop *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      atomic_store(1u, (unsigned int *)v2);
      WTF::RunLoop::main(this);
      v6 = *(_QWORD *)(v2 + 48);
      *(_QWORD *)(v2 + 48) = 0;
      v7 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      v8 = *(_OWORD *)(v2 + 8);
      *(_OWORD *)(v2 + 8) = 0u;
      v18 = v8;
      v19 = *(_OWORD *)(v2 + 32);
      *(_OWORD *)(v2 + 32) = 0u;
      v9 = WTF::fastMalloc((WTF *)0x38);
      *(_QWORD *)v9 = off_1E34BEB98;
      *(_OWORD *)(v9 + 8) = v18;
      v20 = 0u;
      v21 = 0;
      *(_QWORD *)(v9 + 24) = v7;
      *(_OWORD *)(v9 + 32) = v19;
      v22 = 0u;
      v23 = 0;
      *(_QWORD *)(v9 + 48) = v6;
      v24 = v9;
      WTF::RunLoop::dispatch();
      v11 = v24;
      v24 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20 + 8, v10);
      if ((_QWORD)v20)
        (*(void (**)(_QWORD))(*(_QWORD *)v20 + 8))(v20);
      v13 = *(WTF::StringImpl ***)(v2 + 48);
      if (v13)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v13, v12);
      v14 = *(WTF::StringImpl ***)(v2 + 40);
      if (v14)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v12);
      v15 = *(WTF::StringImpl ***)(v2 + 32);
      if (v15)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v15, v12);
      WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 16, v12);
      v17 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      WTF::fastFree((WTF *)v2, v16);
    }
  }
  return this;
}

unsigned __int8 *WebKit::NetworkProcess::closeITPDatabase(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v7);
  if (v4)
    return WebKit::NetworkSession::destroyResourceLoadStatistics(v4, a3);
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t WebKit::NetworkProcess::resumeDownload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t *a7, int a8)
{
  return WebKit::DownloadManager::resumeDownload((uint64_t *)(a1 + 152), a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *WebKit::NetworkProcess::cancelDownload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WebKit::DownloadManager::cancelDownload(a1 + 152, a2, a3);
}

uint64_t WebKit::NetworkProcess::dataTaskWithRequest(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3, uint64_t a4, uint64_t a5, WTF::RefCountedBase **a6, uint64_t a7)
{
  WTF::RefCountedBase *v13;
  WTF::RefCountedBase *v14;
  uint64_t v15;
  WTF::RefCountedBase *v17;

  v13 = *a6;
  *a6 = 0;
  v17 = v13;
  WebCore::ResourceRequestBase::setHTTPBody();
  v14 = v17;
  v17 = 0;
  if (v14)
    WTF::RefCounted<WebCore::FormData>::deref(v14);
  v17 = a3;
  v15 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 224))(v15, a2, a4, a5, a7);
}

uint64_t WebKit::NetworkProcess::cancelDataTask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v9);
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 232))(v6, a2);
  v7 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t WebKit::NetworkProcess::setCacheModelSynchronouslyForTesting(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v4;

  WebKit::NetworkProcess::setCacheModel(a1, a2);
  v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebKit::NetworkProcess::logDiagnosticMessage(WTF *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t result;
  double v9;
  uint64_t v10;
  uint64_t *v11[3];
  char v12;
  uint64_t v13;

  v13 = a2;
  if (!a5 || (result = WTF::cryptographicallyRandomUnitInterval(a1), v9 <= 0.05))
  {
    v10 = *((_QWORD *)a1 + 4);
    v11[0] = &v13;
    v11[1] = a3;
    v11[2] = a4;
    v12 = 0;
    return IPC::Connection::send<Messages::NetworkProcessProxy::LogDiagnosticMessage>(v10, v11, 0, 0, 0);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkProcessProxy::LogDiagnosticMessage>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 319;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,WTF::String const&,WebCore::ShouldSample>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,WTF::String const&,WebCore::ShouldSample>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t WebKit::NetworkProcess::terminate(WebKit::NetworkProcess *this)
{
  IPC::Connection::invalidate(*((_QWORD *)this + 4));
  return (*(uint64_t (**)(WebKit::NetworkProcess *))(*(_QWORD *)this + 120))(this);
}

uint64_t *WebKit::NetworkProcess::processWillSuspendImminentlyForTestingSync(WTF::MonotonicTime *a1, uint64_t *a2)
{
  double v4;

  WTF::MonotonicTime::now(a1);
  return WebKit::NetworkProcess::prepareToSuspend((uint64_t)a1, 1, a2, v4);
}

void WebKit::NetworkProcess::terminateRemoteWorkerContextConnectionWhenPossible(uint64_t a1, int a2, uint64_t a3, WTF::ASCIICaseInsensitiveHash **a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v8)
  {
    if (a2 == 2)
    {
      v9 = *(_QWORD *)(v8 + 792);
      if (v9)
        WebKit::WebSharedWorkerServer::terminateContextConnectionWhenPossible(v9, a4, a5);
    }
    else if (a2 == 1)
    {
      if (*(_QWORD *)(v8 + 768))
        WebCore::SWServer::terminateContextConnectionWhenPossible();
    }
  }
}

uint64_t WebKit::NetworkProcess::syncLocalStorage(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(v4 + 8) = v5;
  v11 = (unsigned int *)v4;
  v6 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E34BEDC8;
  *((_QWORD *)v6 + 1) = &v11;
  v12 = v6;
  WebKit::NetworkProcess::forEachNetworkSession(a1, &v12);
  result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v12 = v8;
      return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v12);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::storeServiceWorkerRegistrations(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v7);
  if (v4 && *(_QWORD *)(v4 + 768))
    return WebCore::SWServer::storeRegistrationsOnDisk();
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

unsigned __int8 *WebKit::NetworkProcess::resetQuota(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *result;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v9);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 800);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 16));
    result = (unsigned __int8 *)WebKit::NetworkStorageManager::resetQuotaForTesting(v5, a3);
    if (v5)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v7);
  }
  else
  {
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

unsigned __int8 *WebKit::NetworkProcess::setOriginQuotaRatioEnabledForTesting(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *result;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v11);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 800);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v7 + 16));
    result = (unsigned __int8 *)WebKit::NetworkStorageManager::setOriginQuotaRatioEnabledForTesting(v7, a3, a4);
    if (v7)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v7 + 16), v9);
  }
  else
  {
    v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

unsigned __int8 *WebKit::NetworkProcess::resetStoragePersistedState(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *result;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v9);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 800);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v5 + 16));
    result = (unsigned __int8 *)WebKit::NetworkStorageManager::resetStoragePersistedState(v5, a3);
    if (v5)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v7);
  }
  else
  {
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

unsigned __int8 *WebKit::NetworkProcess::cloneSessionStorageForWebPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *result;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v9 = a2;
  result = (unsigned __int8 *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v9);
  if (result)
  {
    v7 = *((_QWORD *)result + 100);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v7 + 16));
    result = (unsigned __int8 *)WebKit::NetworkStorageManager::cloneSessionStorageForWebPage(v7, a3, a4);
    if (v7)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v7 + 16), v8);
  }
  return result;
}

unsigned __int8 *WebKit::NetworkProcess::didIncreaseQuota(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  unsigned __int8 *result;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v13 = a2;
  result = (unsigned __int8 *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v13);
  if (result)
  {
    v11 = *((_QWORD *)result + 100);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v11 + 16));
    result = WebKit::NetworkStorageManager::didIncreaseQuota(v11, a3, a4, a5, a6);
    if (v11)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 16), v12);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::renameOriginInWebsiteData(uint64_t a1, unsigned __int8 *a2, WebCore::SecurityOriginData *a3, WebCore::SecurityOriginData *a4, int a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;

  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  v13 = *a6;
  *a6 = 0;
  *(_QWORD *)(v12 + 8) = v13;
  result = WebCore::SecurityOriginData::isNull(a3);
  if ((result & 1) == 0)
  {
    result = WebCore::SecurityOriginData::isNull(a4);
    if ((result & 1) == 0)
    {
      v21 = a2;
      result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v21);
      if (result)
      {
        v15 = *(_QWORD *)(result + 800);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v15 + 16));
        do
          v16 = __ldaxr((unsigned int *)v12);
        while (__stlxr(v16 + 1, (unsigned int *)v12));
        v17 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v17 = off_1E34BEE18;
        *(_QWORD *)(v17 + 8) = v12;
        v21 = (unsigned __int8 *)v17;
        WebKit::NetworkStorageManager::moveData(v15, a5, (uint64_t)a3, (uint64_t)a4, &v21);
        result = (uint64_t)v21;
        v21 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        if (v15)
          result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v15 + 16), v18);
      }
    }
  }
  do
  {
    v19 = __ldaxr((unsigned int *)v12);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)v12));
  if (!v20)
  {
    atomic_store(1u, (unsigned int *)v12);
    v21 = (unsigned __int8 *)v12;
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v21);
  }
  return result;
}

unsigned __int8 *WebKit::NetworkProcess::websiteDataOriginDirectoryForTesting(unsigned __int8 *result, WTF::StringImpl *a2, uint64_t a3, unsigned int a4, unsigned __int8 **a5)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint8x8_t v7;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned __int8 *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16[9];

  v7 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.i32[0] == 1)
  {
    v16[7] = v5;
    v16[8] = v6;
    v16[0] = a2;
    v11 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)result + 26, v16);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 800);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v12 + 16));
      result = WebKit::NetworkStorageManager::getOriginDirectory(v12, a3, a4, a5);
      if (v12)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v12 + 16), v13);
    }
    else
    {
      v16[0] = 0;
      v14 = *a5;
      *a5 = 0;
      (*(void (**)(unsigned __int8 *, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, v16);
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v14 + 8))(v14);
      result = (unsigned __int8 *)v16[0];
      v16[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v15);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::processNotificationEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::NetworkSession *v5;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(a2 + 192);
  v5 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v8);
  if (v5)
  {
    WebKit::NetworkSession::ensureSWServer(v5);
    return WebCore::SWServer::processNotificationEvent();
  }
  else
  {
    v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::NetworkProcess::getAllBackgroundFetchIdentifiers(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebKit::NetworkSession *v4;
  uint64_t Store;
  uint64_t v7;
  void *v8;
  _QWORD v9[2];

  v9[0] = a2;
  v4 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), v9);
  if (v4)
  {
    Store = WebKit::NetworkSession::ensureBackgroundFetchStore(v4);
    return WebKit::BackgroundFetchStoreImpl::getAllBackgroundFetchIdentifiers(Store, a3);
  }
  else
  {
    v9[0] = 0;
    v9[1] = 0;
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v8);
  }
}

uint64_t WebKit::NetworkProcess::getBackgroundFetchState(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  WebKit::NetworkSession *v6;
  uint64_t Store;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD v11[19];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11[0] = a2;
  v6 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), v11);
  if (v6)
  {
    Store = WebKit::NetworkSession::ensureBackgroundFetchStore(v6);
    return WebKit::BackgroundFetchStoreImpl::getBackgroundFetchState(Store, a3, a4);
  }
  else
  {
    LOBYTE(v11[0]) = 0;
    v12 = 0;
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 16))(v9, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v10);
  }
}

uint64_t WebKit::NetworkProcess::abortBackgroundFetch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  WebKit::NetworkSession *v6;
  uint64_t Store;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    Store = WebKit::NetworkSession::ensureBackgroundFetchStore(v6);
    return WebKit::BackgroundFetchStoreImpl::abortBackgroundFetch(Store, a3, a4);
  }
  else
  {
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

uint64_t WebKit::NetworkProcess::pauseBackgroundFetch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  WebKit::NetworkSession *v6;
  uint64_t Store;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    Store = WebKit::NetworkSession::ensureBackgroundFetchStore(v6);
    return WebKit::BackgroundFetchStoreImpl::pauseBackgroundFetch(Store, a3, a4);
  }
  else
  {
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

uint64_t WebKit::NetworkProcess::resumeBackgroundFetch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  WebKit::NetworkSession *v6;
  uint64_t Store;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    Store = WebKit::NetworkSession::ensureBackgroundFetchStore(v6);
    return WebKit::BackgroundFetchStoreImpl::resumeBackgroundFetch(Store, a3, a4);
  }
  else
  {
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

uint64_t WebKit::NetworkProcess::clickBackgroundFetch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  WebKit::NetworkSession *v6;
  uint64_t Store;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v6 = (WebKit::NetworkSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v6)
  {
    Store = WebKit::NetworkSession::ensureBackgroundFetchStore(v6);
    return WebKit::BackgroundFetchStoreImpl::clickBackgroundFetch(Store, a3, a4);
  }
  else
  {
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

IPC::Encoder *WebKit::NetworkProcess::getPendingPushMessages(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  IPC::Encoder *result;
  uint64_t v5;

  v5 = a2;
  result = (IPC::Encoder *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v5);
  if (result)
    return WebKit::NetworkNotificationManager::getPendingPushMessages((uint64_t)result + 832, a3);
  return result;
}

unsigned int *WebKit::NetworkProcess::processPushMessage(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v10;
  NSObject *v11;
  WebKit::NetworkSession *v12;
  const WTF::URL *v13;
  WTF::StringImpl **v14;
  NSObject *v15;
  char *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *result;
  NSObject *v22;
  char *v23;
  void *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  char v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF *v48;
  __int128 buf;
  uint64_t v50;
  _DWORD v51[6];
  int v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  char v55;
  char v56;
  _BYTE v57[24];
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&buf = a2;
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &buf);
  v11 = qword_1ECE716B8;
  if (v10)
  {
    v12 = (WebKit::NetworkSession *)v10;
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = a2;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "Networking process handling a push message from UI process in session %llu", (uint8_t *)&buf, 0xCu);
    }
    v14 = (WTF::StringImpl **)(a3 + 32);
    WebCore::SecurityOriginData::fromURL((WebCore::SecurityOriginData *)(a3 + 32), v13);
    if (!a4)
    {
      v22 = qword_1ECE716B8;
      if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)v57);
        WTF::String::utf8();
        if (v48)
          v23 = (char *)v48 + 16;
        else
          v23 = 0;
        LODWORD(buf) = 136642819;
        *(_QWORD *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_196BCC000, v22, OS_LOG_TYPE_DEFAULT, "Push message from %{sensitive}s won't be processed since permission is in the denied state", (uint8_t *)&buf, 0xCu);
        v25 = v48;
        v48 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1)
            WTF::fastFree(v25, v24);
          else
            --*(_DWORD *)v25;
        }
        v41 = v47;
        v47 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v24);
          else
            *(_DWORD *)v41 -= 2;
        }
      }
      LOBYTE(buf) = 0;
      v56 = 0;
      v45 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, _QWORD, __int128 *))(*(_QWORD *)v45 + 16))(v45, 0, &buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      result = (unsigned int *)std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&buf, v46);
      goto LABEL_59;
    }
    if (a4 == 2)
    {
      v15 = qword_1ECE716B8;
      if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)v57);
        WTF::String::utf8();
        if (v48)
          v16 = (char *)v48 + 16;
        else
          v16 = 0;
        LODWORD(buf) = 136642819;
        *(_QWORD *)((char *)&buf + 4) = v16;
        _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "Push message from %{sensitive}s won't be processed since permission is in the prompt state; removing push subscription",
          (uint8_t *)&buf,
          0xCu);
        v18 = v48;
        v48 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1)
            WTF::fastFree(v18, v17);
          else
            --*(_DWORD *)v18;
        }
        v40 = v47;
        v47 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v17);
          else
            *(_DWORD *)v40 -= 2;
        }
      }
      v42 = (uint64_t)v12 + 832;
      LOBYTE(buf) = 0;
      v51[0] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&buf, (uint64_t)v57);
      v43 = *a5;
      *a5 = 0;
      v44 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v44 = &off_1E34BEE40;
      *((_QWORD *)v44 + 1) = v43;
      v48 = v44;
      WebKit::NetworkNotificationManager::removePushSubscriptionsForOrigin(v42, (uint64_t)&buf, (uint64_t *)&v48);
      result = (unsigned int *)v48;
      v48 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      if (v51[0] != -1)
        result = (unsigned int *)((uint64_t (*)(WTF **, __int128 *))off_1E34BDF78[v51[0]])(&v48, &buf);
LABEL_59:
      if (v58 != -1)
        return (unsigned int *)((uint64_t (*)(__int128 *, _BYTE *))off_1E34BDF78[v58])(&buf, v57);
      return result;
    }
    v26 = *v14;
    if (*v14)
      *(_DWORD *)v26 += 2;
    v27 = *(_BYTE *)(a3 + 208);
    WebKit::NetworkSession::ensureSWServer(v12);
    *(_QWORD *)&buf = a1;
    v28 = (unsigned int *)(a1 + 120);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
    *((_QWORD *)&buf + 1) = a1;
    v50 = a2;
    LOBYTE(v51[0]) = 0;
    v52 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v51, (uint64_t)v57);
    v30 = *a5;
    *a5 = 0;
    v53 = v26;
    v54 = v30;
    v55 = v27;
    v31 = WTF::fastMalloc((WTF *)0x58);
    *(_QWORD *)v31 = &off_1E34BEE68;
    *(_QWORD *)(v31 + 8) = buf;
    v32 = *((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    *(_QWORD *)(v31 + 16) = v32;
    *(_QWORD *)(v31 + 24) = v50;
    *(_BYTE *)(v31 + 32) = 0;
    *(_DWORD *)(v31 + 56) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v31 + 32, (uint64_t)v51);
    *(_QWORD *)(v31 + 64) = v53;
    v33 = v54;
    v53 = 0;
    v54 = 0;
    *(_QWORD *)(v31 + 72) = v33;
    *(_BYTE *)(v31 + 80) = v55;
    WebCore::SWServer::processPushMessage();
    v48 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v35 = v54;
    v54 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = v53;
    v53 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v34);
      else
        *(_DWORD *)v36 -= 2;
    }
    if (v52 != -1)
      ((void (*)(WTF::StringImpl **, _DWORD *))off_1E34BDF78[v52])(&v47, v51);
    v52 = -1;
    result = (unsigned int *)*((_QWORD *)&buf + 1);
    *((_QWORD *)&buf + 1) = 0;
    if (result)
    {
      v37 = result + 30;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        atomic_store(1u, result + 30);
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
    if (v58 != -1)
      return (unsigned int *)((uint64_t (*)(__int128 *, _BYTE *))off_1E34BDF78[v58])(&buf, v57);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = a2;
      _os_log_error_impl(&dword_196BCC000, v11, OS_LOG_TYPE_ERROR, "Networking process asked to handle a push message from UI process in session %llu, but that session doesn't exist", (uint8_t *)&buf, 0xCu);
    }
    v19 = a3 + 72;
    v20 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 16))(v20, 0, v19);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkProcess::setPushAndNotificationsEnabledForOrigin(uint64_t a1, uint64_t a2, WebCore::SecurityOriginData *a3, char a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v11 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v11);
  if (v8)
    return WebKit::NetworkNotificationManager::setPushAndNotificationsEnabledForOrigin(v8 + 832, a3, a4, a5);
  v10 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

uint64_t WebKit::NetworkProcess::removePushSubscriptionsForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  _QWORD v11[3];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11[0] = a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), v11);
  if (v6)
  {
    v7 = v6 + 832;
    LOBYTE(v11[0]) = 0;
    v12 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v11, a3);
    result = WebKit::NetworkNotificationManager::removePushSubscriptionsForOrigin(v7, (uint64_t)v11, a4);
    if (v12 != -1)
      return ((uint64_t (*)(char *, _QWORD *))off_1E34BDF78[v12])(&v10, v11);
  }
  else
  {
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::hasPushSubscriptionForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;

  v12 = (_QWORD *)a2;
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
  if (v6)
  {
    v7 = v6 + 832;
    v8 = *a4;
    *a4 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E34BEEB8;
    v9[1] = v8;
    v12 = v9;
    WebKit::NetworkNotificationManager::getPushSubscription(v7, a3, (uint64_t *)&v12);
    result = (uint64_t)v12;
    v12 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::storePrivateClickMeasurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = a2;
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v5);
  if (result)
    return WebKit::NetworkSession::storePrivateClickMeasurement(result, a3);
  return result;
}

WTF::StringImpl *WebKit::NetworkProcess::dumpPrivateClickMeasurement(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  v8 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v8);
  if (v4)
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v4 + 152) + 64))(*(_QWORD *)(v4 + 152), a3);
  v7 = 0;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a3, &v7);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::NetworkProcess::clearPrivateClickMeasurement(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v6);
  if (v4)
  {
    WebKit::NetworkSession::clearPrivateClickMeasurement(v4);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(uint64_t this)
{
  if (this)
  {
    this = *(_QWORD *)(this + 352);
    if (this)
    {
      xpc_connection_get_audit_token();
      return WTF::hasEntitlement();
    }
  }
  return this;
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementOverrideTimerForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v12 = a2;
    v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
    if (v8)
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 152) + 72))(*(_QWORD *)(v8 + 152), a3);
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

uint64_t WebKit::NetworkProcess::closePCMDatabase(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v7);
  if (v4)
    return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v4 + 152) + 144))(*(_QWORD *)(v4 + 152), a3);
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t WebKit::NetworkProcess::simulatePrivateClickMeasurementSessionRestart(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if ((WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v15 = a2;
    v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v15);
    if (v6)
    {
      v7 = v6;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
      v8 = *(unsigned int **)(v7 + 8);
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
      v10 = *a3;
      *a3 = 0;
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v11 = &off_1E34BEEE0;
      v11[1] = v8;
      v11[2] = v10;
      v15 = v11;
      (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v7 + 152) + 144))(*(_QWORD *)(v7 + 152), &v15);
      result = (uint64_t)v15;
      v15 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      v14 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  else
  {
    v13 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::markAttributedPrivateClickMeasurementsAsExpiredForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v10 = a2;
    v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
    if (v6)
    {
      return (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v6 + 152) + 112))(*(_QWORD *)(v6 + 152), a3);
    }
    else
    {
      v9 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementEphemeralMeasurementForTesting(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v12 = a2;
    v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
    if (v8)
      *(_BYTE *)(v8 + 488) = a3;
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementTokenPublicKeyURLForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v12 = a2;
    v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
    if (v8)
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 152) + 80))(*(_QWORD *)(v8 + 152), a3);
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementTokenSignatureURLForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v12 = a2;
    v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
    if (v8)
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 152) + 88))(*(_QWORD *)(v8 + 152), a3);
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementAttributionReportURLsForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v14 = a2;
    v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v14);
    if (v10)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v10 + 152) + 96))(*(_QWORD *)(v10 + 152), a3, a4);
    v11 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

uint64_t WebKit::NetworkProcess::markPrivateClickMeasurementsAsExpiredForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if ((WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v10 = a2;
    v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
    if (v6)
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 152) + 104))(*(_QWORD *)(v6 + 152));
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    v9 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

uint64_t WebKit::NetworkProcess::setPCMFraudPreventionValuesForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if ((WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v18 = a2;
    v14 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v18);
    if (v14)
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v14 + 152) + 120))(*(_QWORD *)(v14 + 152), a3, a4, a5, a6);
    v15 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    v17 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

uint64_t WebKit::NetworkProcess::setPrivateClickMeasurementAppBundleIDForTesting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if ((WebKit::NetworkProcess::allowsPrivateClickMeasurementTestFunctionality(*(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v12 = a2;
    v8 = (WebCore *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v12);
    if (v8)
      WebKit::NetworkSession::setPrivateClickMeasurementAppBundleIDForTesting(v8, a3);
    v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

uint64_t *WebKit::NetworkProcess::addKeptAliveLoad(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *result;
  _QWORD v4[3];

  v4[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 3856) + 80);
  result = (uint64_t *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), v4);
  if (result)
    return WTF::HashTable<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>,WTF::HashTraits<WTF::Ref<WebKit::NetworkResourceLoader,WTF::RawPtrTraits<WebKit::NetworkResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::NetworkResourceLoader>>>>::add(result + 62, a2, (uint64_t)v4);
  return result;
}

uint64_t *WebKit::NetworkProcess::removeKeptAliveLoad(WebKit::NetworkProcess *this, WebKit::NetworkResourceLoader *a2)
{
  uint64_t *result;
  uint64_t v4;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 482) + 80);
  result = (uint64_t *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 26, &v4);
  if (result)
    return WebKit::NetworkSession::removeKeptAliveLoad((WebKit::NetworkSession *)result, a2);
  return result;
}

unsigned __int8 *WebKit::NetworkProcess::connectionToWebProcessClosed(uint64_t a1, IPC::Connection *a2, uint64_t a3)
{
  unsigned __int8 *result;
  unsigned __int8 **v5;
  void *v6;
  uint64_t v7;

  v7 = a3;
  result = (unsigned __int8 *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v7);
  if (result)
  {
    v5 = (unsigned __int8 **)*((_QWORD *)result + 100);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5 + 2);
    result = (unsigned __int8 *)WebKit::NetworkStorageManager::stopReceivingMessageFromConnection((WebKit::NetworkStorageManager *)v5, a2);
    if (v5)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(v5[2], v6);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::webProcessIdentifierForConnection(WebKit::NetworkProcess *this, IPC::Connection *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 16);
  v6 = (_QWORD *)*((_QWORD *)this + 16);
  if (v6)
    v6 += 2 * *((unsigned int *)v6 - 1);
  if (v6 == v4)
    return 0;
  while (*(IPC::Connection **)(v4[1] + 64) != a2)
  {
    while (1)
    {
      v4 += 2;
      if (v4 == v5)
        break;
      if ((unint64_t)(*v4 + 1) > 1)
        goto LABEL_9;
    }
    v4 = v5;
LABEL_9:
    if (v4 == v6)
      return 0;
  }
  return *v4;
}

uint64_t WebKit::NetworkProcess::setServiceWorkerFetchTimeoutForTesting(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v3;

  *(double *)(a1 + 360) = a3;
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::NetworkProcess::resetServiceWorkerFetchTimeoutForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 360) = 0x4051800000000000;
  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebKit::NetworkProcess::hasAppBoundSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v8);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 168))(v4);
  else
    v5 = 0;
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t WebKit::NetworkProcess::clearAppBoundSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v7);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *WebKit::NetworkProcess::broadcastConsoleMessage(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  _QWORD *result;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 128));
  v11 = result;
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 128);
  if (v14)
    v15 = (_QWORD *)(v14 + 16 * *(unsigned int *)(v14 - 4));
  else
    v15 = 0;
  if (v15 != result)
  {
    do
    {
      result = (_QWORD *)v11[1];
      if (result[10] == a2)
        result = WebKit::NetworkConnectionToWebProcess::broadcastConsoleMessage((uint64_t)result, a3, a4, a5);
      while (1)
      {
        v11 += 2;
        if (v11 == v13)
          break;
        if ((unint64_t)(*v11 + 1) > 1)
          goto LABEL_11;
      }
      v11 = v13;
LABEL_11:
      ;
    }
    while (v11 != v15);
  }
  return result;
}

uint64_t WebKit::NetworkProcess::updateBundleIdentifier(WebCore *a1, WebCore *a2, uint64_t *a3)
{
  const WTF::String *v5;
  uint64_t v6;

  WebCore::clearApplicationBundleIdentifierTestingOverride(a1);
  WebCore::setApplicationBundleIdentifierOverride(a2, v5);
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t WebKit::NetworkProcess::clearBundleIdentifier(WebCore *a1, uint64_t *a2)
{
  uint64_t v3;

  WebCore::clearApplicationBundleIdentifierTestingOverride(a1);
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::NetworkProcess::shouldDisableCORSForRequestTo(uint64_t result, void *a2, const WTF::URL *a3)
{
  uint64_t v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::UserContentURLPattern *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::UserContentURLPattern *v19;
  uint64_t v20;
  _QWORD v21[2];

  v3 = *(_QWORD *)(result + 368);
  if (!v3)
  {
LABEL_12:
    v21[0] = 0;
    v19 = 0;
    v21[1] = 0;
    v20 = 0;
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, a2);
    goto LABEL_13;
  }
  v5 = *(_DWORD *)(v3 - 8);
  v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = *(void **)(v3 + 24 * v9);
  if (v10 != a2)
  {
    v11 = 1;
    while (v10)
    {
      v9 = (v9 + v11) & v5;
      v10 = *(void **)(v3 + 24 * v9);
      ++v11;
      if (v10 == a2)
        goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_6:
  v12 = v3 + 24 * v9;
  v13 = *(unsigned int *)(v12 + 20);
  v19 = 0;
  LODWORD(v20) = 0;
  HIDWORD(v20) = v13;
  if (!(_DWORD)v13)
  {
LABEL_13:
    v17 = 0;
LABEL_14:
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, a2);
    return v17;
  }
  if (!(v13 >> 27))
  {
    v14 = v12 + 8;
    v15 = (WebCore::UserContentURLPattern *)WTF::fastMalloc((WTF *)(32 * v13));
    LODWORD(v20) = v13;
    v19 = v15;
    WTF::VectorCopier<false,WebCore::UserContentURLPattern>::uninitializedCopy<WebCore::UserContentURLPattern>(*(_QWORD *)v14, *(_QWORD *)v14 + 32 * *(unsigned int *)(v14 + 12), (uint64_t)v15);
    v16 = 32 * v13 - 32;
    do
    {
      v17 = WebCore::UserContentURLPattern::matches<WTF::URL>(v15, a3);
      if ((v17 & 1) != 0)
        break;
      v15 = (WebCore::UserContentURLPattern *)((char *)v15 + 32);
      v18 = v16;
      v16 -= 32;
    }
    while (v18);
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::NetworkProcess::setCORSDisablingPatterns(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  void *v6;
  _QWORD v8[3];
  uint64_t v9;
  unsigned int v10;
  void *v11;

  v11 = a3;
  v8[0] = a2;
  WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebKit::NetworkProcess::setCORSDisablingPatterns(WebKit::NetworkConnectionToWebProcess &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v9, a4, (uint64_t)v8);
  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v9, v10);
  if (v10)
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v8, (uint64_t *)(a1 + 368), (uint64_t *)&v11, &v9);
  else
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 368), a3);
  return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v6);
}

_QWORD *WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebKit::NetworkProcess::setCORSDisablingPatterns(WebKit::NetworkConnectionToWebProcess &,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  __int16 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  WTF::StringImpl *v23;
  __int16 v24;
  char v25;
  WTF::StringImpl *v26[2];
  WTF::StringImpl *v27;
  __int16 v28;

  v3 = (uint64_t)result;
  *result = 0;
  result[1] = 0;
  v4 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v4)
    return (_QWORD *)WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3, v4);
  if (!(v4 >> 27))
  {
    v7 = WTF::fastMalloc((WTF *)(32 * v4));
    *(_DWORD *)(v3 + 8) = v4;
    *(_QWORD *)v3 = v7;
    v8 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v8)
    {
      v9 = v7;
      LODWORD(v4) = 0;
      v10 = *a2;
      v11 = 8 * v8;
      do
      {
        v26[0] = 0;
        v26[1] = 0;
        v27 = 0;
        v28 = 1;
        v12 = WebCore::UserContentURLPattern::parse();
        LOBYTE(v28) = v12;
        if (v12)
        {
          LOBYTE(v22) = 0;
          v14 = v27;
          v25 = 0;
          v27 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v13);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        else
        {
          WebKit::NetworkOriginAccessPatterns::allowAccessTo(*(WebKit::NetworkOriginAccessPatterns **)(*(_QWORD *)a3 + 288), (const WebCore::UserContentURLPattern *)v26);
          v15 = *(_OWORD *)v26;
          v26[0] = 0;
          v26[1] = 0;
          v22 = v15;
          v23 = v27;
          v24 = v28;
          v25 = 1;
          v27 = 0;
        }
        v16 = v26[1];
        v26[1] = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v13);
          else
            *(_DWORD *)v16 -= 2;
        }
        v17 = v26[0];
        v26[0] = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v13);
          else
            *(_DWORD *)v17 -= 2;
        }
        if (v25)
        {
          v18 = v23;
          v19 = v24;
          v20 = v22;
          v21 = v9 + 32 * v4;
          v22 = 0uLL;
          v23 = 0;
          *(_OWORD *)v21 = v20;
          *(_QWORD *)(v21 + 16) = v18;
          *(_WORD *)(v21 + 24) = v19;
          LODWORD(v4) = v4 + 1;
          *(_DWORD *)(v3 + 12) = v4;
        }
        std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v13);
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      LODWORD(v4) = 0;
    }
    return (_QWORD *)WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3, v4);
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *result;
  if (*result)
  {
    v3 = result;
    v4 = *(_DWORD *)(v2 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    result = (uint64_t *)(v2 + 24 * v8);
    v9 = *result;
    if ((void *)*result != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = (v8 + v10) & v4;
        result = (uint64_t *)(v2 + 24 * v8);
        v9 = *result;
        ++v10;
        if ((void *)*result == a2)
          goto LABEL_8;
      }
      result = (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
    }
LABEL_8:
    if ((uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4)) != result)
    {
      *result = -1;
      result = (uint64_t *)WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(result + 1), a2);
      ++*(_DWORD *)(*v3 - 16);
      v11 = *v3;
      v12 = *v3 ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *v3;
      if (*v3)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, v15 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::appPrivacyReportTestingData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v7;
  char v8;
  uint64_t v9;

  v9 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v9);
  if (v4)
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4 + 816);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v5 + 16))(v5, &v7);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebKit::NetworkProcess::clearAppPrivacyReportTestingData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v7);
  if (v4)
  {
    *(_WORD *)(v4 + 816) = 0;
    *(_BYTE *)(v4 + 818) = 0;
  }
  v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

WebKit::RTCDataChannelRemoteManagerProxy *WebKit::NetworkProcess::rtcDataChannelProxy(WebKit::NetworkProcess *this)
{
  WebKit::RTCDataChannelRemoteManagerProxy *result;
  WebKit::RTCDataChannelRemoteManagerProxy *v3;
  void *v4;
  uint64_t v5;

  result = (WebKit::RTCDataChannelRemoteManagerProxy *)*((_QWORD *)this + 40);
  if (!result)
  {
    v3 = (WebKit::RTCDataChannelRemoteManagerProxy *)WTF::fastMalloc((WTF *)0x28);
    result = WebKit::RTCDataChannelRemoteManagerProxy::RTCDataChannelRemoteManagerProxy(v3);
    v5 = *((_QWORD *)this + 40);
    *((_QWORD *)this + 40) = result;
    if (v5)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), v4);
      return (WebKit::RTCDataChannelRemoteManagerProxy *)*((_QWORD *)this + 40);
    }
  }
  return result;
}

void WebKit::NetworkProcess::removeWebPageNetworkParameters(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v10);
  if (v4)
  {
    v5 = v4;
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v4 + 248))(v4, a3);
    v6 = *(_QWORD *)(v5 + 800);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v6 + 16));
    WebKit::NetworkStorageManager::clearStorageForWebPage(v6, (uint64_t)a3);
    if (v6)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v7);
    v9 = *(_QWORD *)(v5 + 72);
    if (v9)
      WebKit::WebResourceLoadStatisticsStore::clearFrameLoadRecordsForStorageAccess(v9, a3, v8);
  }
}

uint64_t WebKit::NetworkProcess::countNonDefaultSessionSets(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = a2;
  v4 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v8);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 256))(v4);
  else
    v5 = 0;
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::RequestBackgroundFetchPermission,WTF::CompletionHandler<void ()(BOOL)>>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  uint64_t v21[2];
  IPC::Encoder *v22;

  v9 = *a3;
  *a3 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E34BEF08;
  v10[1] = v9;
  v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 335;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v22 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v12, (uint64_t)a2[1]);
  v21[0] = (uint64_t)v10;
  v21[1] = v11;
  v15 = IPC::Connection::sendMessageWithAsyncReply(a1, &v22, v21, a5, 0);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v18, v19);
  }
  if (v15)
    return 0;
  else
    return v11;
}

unsigned __int8 *WebKit::NetworkProcess::setStorageSiteValidationEnabled(uint64_t a1, uint64_t a2, char a3)
{
  unsigned __int8 *result;
  unsigned __int8 **v5;
  void *v6;
  uint64_t v7;

  v7 = a2;
  result = (unsigned __int8 *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v7);
  if (result)
  {
    v5 = (unsigned __int8 **)*((_QWORD *)result + 100);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5 + 2);
    result = (unsigned __int8 *)WebKit::NetworkStorageManager::setStorageSiteValidationEnabled((WebKit::NetworkStorageManager *)v5, a3);
    if (v5)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(v5[2], v6);
  }
  return result;
}

uint64_t WebKit::NetworkProcessPlatformStrategies::createLoaderStrategy(WebKit::NetworkProcessPlatformStrategies *this)
{
  return 0;
}

uint64_t WebKit::NetworkProcessPlatformStrategies::createPasteboardStrategy(WebKit::NetworkProcessPlatformStrategies *this)
{
  return 0;
}

uint64_t WebKit::NetworkProcessPlatformStrategies::createMediaStrategy(WebKit::NetworkProcessPlatformStrategies *this)
{
  return 0;
}

_QWORD *WebKit::NetworkProcessPlatformStrategies::createBlobRegistry(WebKit::NetworkProcessPlatformStrategies *this)
{
  if ((byte_1ECE728E9 & 1) == 0)
  {
    qword_1ECE728F0 = off_1E34BEF30;
    byte_1ECE728E9 = 1;
  }
  return &qword_1ECE728F0;
}

uint64_t WebKit::NetworkProcessPlatformStrategies::createPushStrategy(WebKit::NetworkProcessPlatformStrategies *this)
{
  return 0;
}

void WebKit::NetworkDataTask::suggestedFilename(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::NetworkDataTaskBlob::state(WebKit::NetworkDataTaskBlob *this)
{
  return *((unsigned int *)this + 152);
}

void WebKit::NetworkOriginAccessPatterns::~NetworkOriginAccessPatterns(WebKit::NetworkOriginAccessPatterns *this, void *a2)
{
  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, a2);
}

{
  void *v3;

  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, a2);
  WTF::fastFree(this, v3);
}

uint64_t WebKit::NetworkProcess::ptrCount(WebKit::NetworkProcess *this)
{
  return *((unsigned int *)this + 31);
}

uint64_t WebKit::NetworkProcess::ptrCountWithoutThreadCheck(WebKit::NetworkProcess *this)
{
  return *((unsigned int *)this + 31);
}

uint64_t WebKit::NetworkProcess::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 124);
  return this;
}

uint64_t WebKit::NetworkProcess::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 124);
  if (v1)
  {
    *(_DWORD *)(this + 124) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebKit::NetworkProcess::parentProcessConnectionForDownloads(WebKit::NetworkProcess *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t `non-virtual thunk to'WebKit::NetworkProcess::ptrCount(WebKit::NetworkProcess *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t `non-virtual thunk to'WebKit::NetworkProcess::ptrCountWithoutThreadCheck(WebKit::NetworkProcess *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t `non-virtual thunk to'WebKit::NetworkProcess::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 12);
  return this;
}

uint64_t `non-virtual thunk to'WebKit::NetworkProcess::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 12);
  if (v1)
  {
    *(_DWORD *)(this + 12) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebKit::NetworkProcess::parentProcessConnectionForDownloads(WebKit::NetworkProcess *this)
{
  return *((_QWORD *)this - 10);
}

uint64_t `non-virtual thunk to'WebKit::NetworkProcess::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t `non-virtual thunk to'WebKit::NetworkProcess::deref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(this + 8);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, (unsigned int *)(this + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 112) + 8))(this - 112);
  }
  return this;
}

void WebKit::NetworkProcessPlatformStrategies::~NetworkProcessPlatformStrategies(WebKit::NetworkProcessPlatformStrategies *this)
{
  JUMPOUT(0x19AEB936CLL);
}

WebCore::AsyncFileStream *std::unique_ptr<WebCore::AsyncFileStream>::reset[abi:sn180100](WebCore::AsyncFileStream **a1)
{
  WebCore::AsyncFileStream *result;
  WTF *v3;
  void *v4;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    WebCore::AsyncFileStream::~AsyncFileStream(result);
    return (WebCore::AsyncFileStream *)WTF::fastFree(v3, v4);
  }
  return result;
}

void WebCore::ContentSecurityPolicy::operator delete(uint64_t a1, size_t a2)
{
  void *v3;
  void *v4;

  v3 = (void *)MEMORY[0x19AEB0E64]();
  if (atomic_load((unsigned int *)v3))
    bzero(v3, a2);
  else
    WTF::fastFree((WTF *)v3, v4);
}

WebKit::NetworkCORSPreflightChecker *std::unique_ptr<WebKit::NetworkCORSPreflightChecker>::reset[abi:sn180100](WebKit::NetworkCORSPreflightChecker **a1, WebKit::NetworkCORSPreflightChecker *a2)
{
  WebKit::NetworkCORSPreflightChecker *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkCORSPreflightChecker::~NetworkCORSPreflightChecker(result, a2);
    return (WebKit::NetworkCORSPreflightChecker *)WTF::fastFree(v4, v5);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit18NetworkLoadChecker18RedirectionTripletEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, _QWORD *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v3 = (WebCore::ResourceResponseBase *)(a2 + 50);
  v4 = (const void *)a2[80];
  a2[80] = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, (WTF::StringImpl *)a2);
  v5 = (const void *)a2[49];
  a2[49] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a2 + 25));
  v6 = (const void *)a2[24];
  a2[24] = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit18NetworkLoadChecker18RedirectionTripletEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkLoadChecker::RedirectionTriplet::RedirectionTriplet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(a1 + 108) = v6;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 128) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_DWORD *)(a1 + 140) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v8;
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 152) = v9;
  v10 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 160) = v10;
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 168) = v11;
  v12 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v12;
  v13 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 192) = v13;
  WTF::URL::URL(a1 + 200, (uint64_t *)(a2 + 200));
  WTF::URL::URL(a1 + 240, (uint64_t *)(a2 + 240));
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  v14 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = v14;
  v15 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a1 + 296) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a2 + 304) = 0;
  *(_DWORD *)(a1 + 304) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a2 + 308) = 0;
  *(_DWORD *)(a1 + 308) = v15;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  v16 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a1 + 312) = v16;
  LODWORD(v16) = *(_DWORD *)(a2 + 320);
  *(_DWORD *)(a2 + 320) = 0;
  *(_DWORD *)(a1 + 320) = v16;
  LODWORD(v16) = *(_DWORD *)(a2 + 324);
  *(_DWORD *)(a2 + 324) = 0;
  *(_DWORD *)(a1 + 324) = v16;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v17 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a1 + 328) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 336);
  *(_DWORD *)(a2 + 336) = 0;
  *(_DWORD *)(a1 + 336) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a2 + 340) = 0;
  *(_DWORD *)(a1 + 340) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 348) = *(_BYTE *)(a2 + 348);
  *(_DWORD *)(a1 + 344) = v17;
  v18 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a1 + 352) = v18;
  v19 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a1 + 360) = v19;
  v20 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 368) = 0;
  *(_QWORD *)(a1 + 368) = v20;
  v21 = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = v21;
  v22 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 392) = 0;
  *(_QWORD *)(a1 + 392) = v22;
  WTF::URL::URL(a1 + 400, (uint64_t *)(a2 + 400));
  v24 = *(_QWORD *)(a2 + 440);
  v25 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a2 + 440) = 0;
  *(_QWORD *)(a1 + 440) = v24;
  *(_QWORD *)(a1 + 448) = v25;
  v26 = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a2 + 456) = 0;
  *(_QWORD *)(a1 + 456) = v26;
  v27 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a2 + 464) = 0;
  *(_QWORD *)(a1 + 464) = v27;
  v28 = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a2 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 472) = v28;
  v29 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a2 + 480) = 0;
  *(_QWORD *)(a1 + 480) = v29;
  LODWORD(v29) = *(_DWORD *)(a2 + 488);
  *(_DWORD *)(a2 + 488) = 0;
  *(_DWORD *)(a1 + 488) = v29;
  LODWORD(v29) = *(_DWORD *)(a2 + 492);
  *(_DWORD *)(a2 + 492) = 0;
  *(_DWORD *)(a1 + 492) = v29;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  v30 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a2 + 496) = 0;
  *(_QWORD *)(a1 + 496) = v30;
  LODWORD(v30) = *(_DWORD *)(a2 + 504);
  *(_DWORD *)(a2 + 504) = 0;
  *(_DWORD *)(a1 + 504) = v30;
  LODWORD(v30) = *(_DWORD *)(a2 + 508);
  *(_DWORD *)(a2 + 508) = 0;
  *(_DWORD *)(a1 + 508) = v30;
  v31 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a2 + 512) = 0;
  *(_QWORD *)(a1 + 512) = v31;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  if (*(_BYTE *)(a2 + 528))
  {
    v32 = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a2 + 520) = 0;
    *(_QWORD *)(a1 + 520) = v32;
    *(_BYTE *)(a1 + 528) = 1;
  }
  v33 = *(_OWORD *)(a2 + 536);
  v34 = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(v23 + 168) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(v23 + 152) = v34;
  *(_OWORD *)(v23 + 136) = v33;
  v35 = *(_OWORD *)(a2 + 584);
  v36 = *(_OWORD *)(a2 + 600);
  v37 = *(_OWORD *)(a2 + 616);
  *(_DWORD *)(v23 + 231) = *(_DWORD *)(a2 + 631);
  *(_OWORD *)(v23 + 216) = v37;
  *(_OWORD *)(v23 + 200) = v36;
  *(_OWORD *)(v23 + 184) = v35;
  v38 = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a2 + 640) = 0;
  *(_QWORD *)(a1 + 640) = v38;
  *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
  return a1;
}

__n128 WebKit::contextURLforCORPViolation(WebKit *this, WebKit::NetworkResourceLoader *a2)
{
  char *v3;
  _DWORD *v4;
  __n128 result;

  if (*((_BYTE *)a2 + 315) == 1)
    v3 = (char *)a2 + 3152;
  else
    v3 = (char *)a2 + 3192;
  if ((v3[8] & 1) == 0)
    v3 = (char *)WTF::aboutBlankURL((WTF *)v3);
  v4 = *(_DWORD **)v3;
  if (*(_QWORD *)v3)
    *v4 += 2;
  *(_QWORD *)this = v4;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)(v3 + 8);
  result = *(__n128 *)(v3 + 24);
  *(__n128 *)((char *)this + 24) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15ResourceRequestEN6WebKit18NetworkLoadChecker18RedirectionTripletENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SC_SD_EEEEEEDcSH_DpT0_(int a1, WebCore::ResourceRequestBase *this)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15ResourceRequestEN6WebKit18NetworkLoadChecker18RedirectionTripletENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _QWORD *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v3 = (WebCore::ResourceResponseBase *)(a2 + 50);
  v4 = (const void *)a2[80];
  a2[80] = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, (WTF::StringImpl *)a2);
  v5 = (const void *)a2[49];
  a2[49] = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a2 + 25));
  v6 = (const void *)a2[24];
  a2[24] = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore15ResourceRequestEN6WebKit18NetworkLoadChecker18RedirectionTripletENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkCORSRequestWithPreflight(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,WebKit::NetworkLoadChecker::RedirectionTriplet&&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;

  *a1 = off_1E34BDFC0;
  v2 = a1[27];
  a1[27] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[26];
  a1[26] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkCORSRequestWithPreflight(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,WebKit::NetworkLoadChecker::RedirectionTriplet&&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;

  *a1 = off_1E34BDFC0;
  v2 = a1[27];
  a1[27] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[26];
  a1[26] = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 2));
  return WTF::fastFree((WTF *)a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkLoadChecker::checkCORSRequestWithPreflight(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceRequest,WebKit::NetworkLoadChecker::RedirectionTriplet,WebCore::ResourceError> &&)> &&)::$_0,void,WebKit::NetworkLoadChecker::RedirectionTriplet&&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v14;
  WTF::StringImpl *v15;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v16;
  WTF::StringImpl *v17;
  const void *v18;
  const void *v19;
  WebKit::NetworkCORSPreflightChecker *v20;
  unsigned int *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  void *v27;
  char v28;
  _BYTE buf[12];
  __int16 v30;
  _BOOL4 v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  char v38;
  const void *v39;
  uint64_t v40;
  const void *v41;
  WTF::StringImpl *v42;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v43;
  unsigned int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((_BYTE *)a2 + 60) == 0;
    v7 = *(unsigned __int8 *)(a1 + 224);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v4;
    v30 = 1024;
    v31 = v6;
    v32 = 1024;
    v33 = v7;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - NetworkLoadChecker::checkCORSRequestWithPreflight - makeCrossOriginAccessRequestWithPreflight preflight complete, success=%d forRedirect=%d", buf, 0x18u);
  }
  if (*((_BYTE *)a2 + 60))
  {
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)buf = v8;
    v9 = WTF::URL::URL((uint64_t)&buf[8], a2 + 1);
    v10 = a2[6];
    a2[6] = 0;
    v34 = v10;
    v36 = *((_WORD *)a2 + 30);
    v35 = *((_DWORD *)a2 + 14);
    v11 = a2[8];
    a2[8] = 0;
    v37 = v11;
    v38 = *((_BYTE *)a2 + 72);
    v44 = 2;
    v12 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    (*(void (**)(uint64_t, _BYTE *, double))(*(_QWORD *)v12 + 16))(v12, buf, v9);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v44 != -1)
      return (*(&off_1E34BDF98 + v44))((int)&v28, (WebCore::ResourceRequestBase *)buf);
  }
  else
  {
    if (*(_BYTE *)(v4 + 529))
    {
      WebCore::NetworkTransactionInformation::NetworkTransactionInformation((uint64_t)buf, *(_QWORD *)(v4 + 440) + 560);
      v14 = *(_DWORD *)(v4 + 1132);
      if (v14 == *(_DWORD *)(v4 + 1128))
      {
        WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NetworkTransactionInformation>(v4 + 1120, (unint64_t)buf);
      }
      else
      {
        WebCore::NetworkTransactionInformation::NetworkTransactionInformation(*(_QWORD *)(v4 + 1120) + 592 * v14, (uint64_t)buf);
        ++*(_DWORD *)(v4 + 1132);
      }
      v16 = v43;
      v43 = 0;
      if (v16)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v16);
      v17 = v42;
      v42 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v15);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v41;
      v41 = 0;
      if (v18)
        CFRelease(v18);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v40, v15);
      v19 = v39;
      v39 = 0;
      if (v19)
        CFRelease(v19);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
    }
    v20 = *(WebKit::NetworkCORSPreflightChecker **)(v4 + 440);
    *(_QWORD *)(v4 + 440) = 0;
    v21 = *(unsigned int **)(v4 + 240);
    if (v21)
    {
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    WebCore::updateRequestForAccessControl();
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v21, v23);
    std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)buf, a1 + 16);
    v44 = 0;
    v24 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v24 + 16))(v24, buf);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (v44 != -1)
      result = (*(&off_1E34BDF98 + v44))((int)&v28, (WebCore::ResourceRequestBase *)buf);
    if (v20)
    {
      WebKit::NetworkCORSPreflightChecker::~NetworkCORSPreflightChecker(v20, v25);
      return WTF::fastFree(v26, v27);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__alt<0ul,WebKit::NetworkLoadChecker::ContentExtensionResult>::__alt[abi:sn180100]<WebKit::NetworkLoadChecker::ContentExtensionResult>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(a1 + 108) = v6;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 128) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_DWORD *)(a1 + 140) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v8;
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 152) = v9;
  v10 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 160) = v10;
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 168) = v11;
  v12 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v12;
  v13 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_OWORD *)(a1 + 192) = v13;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit18NetworkLoadChecker22ContentExtensionResultEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(int a1, WebCore::ResourceRequestBase *this)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit18NetworkLoadChecker22ContentExtensionResultEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int **_ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN6WebKit11NetworkLoadES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(unsigned int **result, void *a2)
{
  unsigned int *v2;
  int v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  int v13;

  v2 = *result;
  if (*result)
  {
    v3 = *(v2 - 1);
    if (v3)
    {
      v4 = (uint64_t *)result;
      v5 = 0;
      v6 = v3 - 1;
      do
      {
        result = (unsigned int **)&v2[2 * v6];
        if ((unint64_t)*result + 1 >= 2 && !*((_QWORD *)*result + 1))
        {
          result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(result, a2);
          ++v5;
        }
      }
      while ((unint64_t)v6--);
      v8 = *v4;
      if (v5)
      {
        *(_DWORD *)(v8 - 16) += v5;
        v12 = *v4;
        if (*v4)
          v13 = *(_DWORD *)(v12 - 12);
        else
          v13 = 0;
        *(_DWORD *)(v12 - 12) = v13 - v5;
        v8 = *v4;
      }
      if (v8)
      {
        v9 = *(_DWORD *)(v8 - 4);
        v10 = 6 * *(_DWORD *)(v8 - 12);
        if (v9 >= 9 && v10 < v9)
          return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
      }
    }
  }
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(unsigned int **result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int **v5;

  v2 = *result;
  *result = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = result;
      WTF::fastFree((WTF *)v2, a2);
      result = v5;
    }
  }
  *result = (unsigned int *)-1;
  return result;
}

uint64_t WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = ~(*a1 << 32) + *a1;
  v2 = 9 * (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) ^ (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) >> 8));
  v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return (v3 >> 31) ^ v3;
}

uint64_t WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes(uint64_t result, void *a2)
{
  WTF *i;
  WTF *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;

  for (i = *(WTF **)(result + 8); i; result = WTF::fastFree(v3, a2))
  {
    v3 = i;
    i = (WTF *)*((_QWORD *)i + 2);
    v4 = *(unsigned int **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        v7 = v3;
        WTF::fastFree((WTF *)v4, a2);
        v3 = v7;
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)(a1 + 24);
    do
    {
      if (*(v4 - 3) != -1)
      {
        WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)v4, a2);
        if (*v4)
          WTF::fastFree((WTF *)(*v4 - 16), a2);
        v5 = (WTF::StringImpl *)*(v4 - 2);
        *(v4 - 2) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
        v6 = (WTF::StringImpl *)*(v4 - 3);
        *(v4 - 3) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
      v4 += 7;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>::~KeyValuePair(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes(a1 + 24, a2);
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v3);
  v5 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t **v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (uint64_t *)-1)
        std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::reset[abi:sn180100](v4, 0);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t **std::unique_ptr<WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>>::reset[abi:sn180100](uint64_t **result, WTF::StringImpl *a2)
{
  uint64_t *v2;

  v2 = *result;
  *result = (uint64_t *)a2;
  if (v2)
  {
    if (*v2)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
    return (uint64_t **)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

WTF::StringImpl **WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>>::~KeyValuePair(WTF::StringImpl **a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>::reset[abi:sn180100](a1 + 1, 0);
  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

WebKit::NetworkLoadScheduler::HostContext *std::unique_ptr<WebKit::NetworkLoadScheduler::HostContext>::reset[abi:sn180100](WebKit::NetworkLoadScheduler::HostContext **a1, WebKit::NetworkLoad *a2)
{
  WebKit::NetworkLoadScheduler::HostContext *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::NetworkLoadScheduler::HostContext::~HostContext(result, a2);
    return (WebKit::NetworkLoadScheduler::HostContext *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::callExitSoon(IPC::Connection *)::$_0,void>::call()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v3[16];

  v0 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v3 = 0;
    _os_log_error_impl(&dword_196BCC000, v0, OS_LOG_TYPE_ERROR, "Exiting process early due to unacknowledged closed-connection", v3, 2u);
  }
  v1 = WTF::terminateProcess((WTF *)1);
  return std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100](v1);
}

uint64_t std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 24))
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 16));
    v2 = *(void **)(a1 + 8);
    if (v2)
      os_release(v2);
  }
  return a1;
}

void WebCore::NetworkStorageSession::operator delete(uint64_t a1, size_t a2)
{
  _DWORD *v3;
  void *v4;

  v3 = (_DWORD *)MEMORY[0x19AEB13B0]();
  if (v3[2])
    bzero(v3, a2);
  else
    WTF::fastFree((WTF *)v3, v4);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::PCM::AttributionTriggerData,WebCore::PCM::AttributionTriggerData const&,WebCore::PCM::AttributionTriggerData*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *v8;

  if (result)
  {
    v3 = result;
    v4 = *(_BYTE *)(a2 + 2);
    *(_WORD *)result = *(_WORD *)a2;
    *(_BYTE *)(result + 2) = v4;
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    if (*(_BYTE *)(a2 + 16))
    {
      v5 = *(_DWORD **)(a2 + 8);
      if (v5)
        *v5 += 2;
      *(_QWORD *)(result + 8) = v5;
      *(_BYTE *)(result + 16) = 1;
    }
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    if (*(_BYTE *)(a2 + 32))
    {
      v6 = *(_DWORD **)(a2 + 24);
      if (v6)
        *v6 += 2;
      *(_QWORD *)(result + 24) = v6;
      *(_BYTE *)(result + 32) = 1;
    }
    *(_BYTE *)(result + 40) = 0;
    *(_BYTE *)(result + 48) = 0;
    if (*(_BYTE *)(a2 + 48))
    {
      v7 = *(_DWORD **)(a2 + 40);
      if (v7)
        *v7 += 2;
      *(_QWORD *)(result + 40) = v7;
      *(_BYTE *)(result + 48) = 1;
    }
    *(_BYTE *)(result + 56) = 0;
    v8 = (_QWORD *)(result + 56);
    *(_BYTE *)(v3 + 88) = 0;
    if (*(_BYTE *)(a2 + 88))
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::DestinationUnlinkableToken,WebCore::PCM::DestinationUnlinkableToken const&,WebCore::PCM::DestinationUnlinkableToken*>(v8, a2 + 56);
      *(_BYTE *)(v3 + 88) = 1;
    }
    *(_BYTE *)(v3 + 96) = 0;
    *(_BYTE *)(v3 + 120) = 0;
    if (*(_BYTE *)(a2 + 120))
    {
      std::construct_at[abi:sn180100]<WebCore::PCM::DestinationSecretToken,WebCore::PCM::DestinationSecretToken const&,WebCore::PCM::DestinationSecretToken*>((_QWORD *)(v3 + 96), a2 + 96);
      *(_BYTE *)(v3 + 120) = 1;
    }
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebKit::FrameInfoData,WebKit::FrameInfoData const&,WebKit::FrameInfoData*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  __int128 v5;
  __int128 v6;

  if (result)
  {
    v3 = result;
    *(_WORD *)result = *(_WORD *)a2;
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(result + 8), (const WebCore::ResourceRequest *)(a2 + 8));
    *(_BYTE *)(v3 + 208) = 0;
    *(_DWORD *)(v3 + 232) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v3 + 208, a2 + 208);
    v4 = *(_DWORD **)(a2 + 240);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(v3 + 240) = v4;
    v5 = *(_OWORD *)(a2 + 248);
    v6 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v3 + 278) = *(_OWORD *)(a2 + 278);
    *(_OWORD *)(v3 + 264) = v6;
    *(_OWORD *)(v3 + 248) = v5;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_move_base<WebKit::NetworkActivityTracker,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const void *v4;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v3 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = v3;
    v4 = (const void *)a2[2];
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
      CFRetain(v4);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::RegistrableDomain>(WebCore::RegistrableDomain const&)::{lambda(WebCore::RegistrableDomain&)#1}>(uint64_t a1, const WTF::StringImpl ***a2, const WTF::StringImpl *a3)
{
  uint64_t v5;

  if (!*(_DWORD *)(a1 + 12))
    return -1;
  v5 = 0;
  while ((WTF::equal(*(WTF **)(*(_QWORD *)a1 + 8 * v5), **a2, a3) & 1) == 0)
  {
    if (++v5 >= (unint64_t)*(unsigned int *)(a1 + 12))
      return -1;
  }
  return v5;
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v4, v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  char v9;

  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(WTF::StringImpl **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 80, a2);
    v5 = *(WTF::StringImpl **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, uint64_t))off_1E34BDF78[v7])(&v9, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkDataTask::scheduleFailure(WebKit::NetworkDataTask::FailureType)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned __int8 *v3;

  *a1 = &off_1E34BE020;
  v3 = (unsigned __int8 *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTask::scheduleFailure(WebKit::NetworkDataTask::FailureType)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 *v3;

  *(_QWORD *)this = &off_1E34BE020;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::NetworkDataTask::scheduleFailure(WebKit::NetworkDataTask::FailureType)::$_0,void>::call(uint64_t a1)
{
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;

  result = *(unsigned __int8 **)(a1 + 16);
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 8);
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 24), &v8);
    v4 = v8;
    if (v8)
    {
      v5 = *(_QWORD *)(v3 + 24);
      if (v5 && (v6 = *(_QWORD **)(v5 + 8)) != 0 && (v7 = *(unsigned __int8 *)(a1 + 32), v7 < 4))
      {
        result = (unsigned __int8 *)(*(uint64_t (**)(void))(*v6 + 8 * v7 + 56))();
        v4 = v8;
        v8 = 0;
        if (!v4)
          return result;
      }
      else
      {
        v8 = 0;
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 8));
    }
  }
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, char *a2, unsigned int a3, uint64_t a4, _BYTE *a5, unsigned int a6)
{
  char *v11;
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;

  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      memcpy(__dst, a2, a3);
  }
  v11 = &__dst[a3];
  v14 = a4;
  result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v14, v11);
  v13 = v14;
  if (v14)
    v13 = *(unsigned int *)(v14 + 4);
  if (a6)
  {
    result = (uint64_t *)&v11[v13];
    if (a6 == 1)
      *(_BYTE *)result = *a5;
    else
      return (uint64_t *)memcpy(result, a5, a6);
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::BlobData,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  unsigned int *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  if (result)
  {
    v2 = result;
    v3 = *(unsigned int *)(result + 108);
    if ((_DWORD)v3)
    {
      v4 = 40 * v3;
      v5 = (_DWORD **)(*(_QWORD *)(result + 96) + 16);
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          if (v6[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          else
            --v6[2];
        }
        v7 = *(v5 - 1);
        *(v5 - 1) = 0;
        if (v7)
          WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v7, a2);
        v5 += 5;
        v4 -= 40;
      }
      while (v4);
    }
    v8 = *(WTF **)(v2 + 96);
    if (v8)
    {
      *(_QWORD *)(v2 + 96) = 0;
      *(_DWORD *)(v2 + 104) = 0;
      WTF::fastFree(v8, a2);
    }
    v9 = *(WTF::StringImpl **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *(WTF::StringImpl **)(v2 + 72);
    *(_QWORD *)(v2 + 72) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(WTF::StringImpl **)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = *(WTF::StringImpl **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v12 -= 2;
    }
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 16, a2);
    v14 = *(WTF::StringImpl **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    return WTF::fastFree((WTF *)v2, v13);
  }
  return result;
}

