uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, (uint64_t)v14);
          v16 = v15;
          WebCore::RegistrableDomain::~RegistrableDomain(v14, v17);
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          WebCore::RegistrableDomain::~RegistrableDomain(v14, v10);
        }
      }
      v14 += 4;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::IPAddress>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::IPAddress>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::IPAddress,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::IPAddress>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _DWORD *v5;

  v2 = a1;
  v3 = WTF::fastMalloc((WTF *)((32 * a1) | 0x10));
  result = v3 + 16;
  if (a1)
  {
    v5 = (_DWORD *)(v3 + 24);
    do
    {
      *((_QWORD *)v5 - 1) = 0;
      *v5 = 0;
      v5[4] = 0;
      v5 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl **v12;
  int i;
  unsigned int v14;
  WTF::StringImpl **v15;
  WTF *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (*v15 != (WTF::StringImpl *)-1)
      break;
    v12 = (WTF::StringImpl **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    WTF::String::operator=(v15, (WTF::StringImpl *)a2);
    result = (uint64_t)WTF::String::operator=(v15 + 1, a3);
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
      {
LABEL_27:
        result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = (WTF::StringImpl **)result;
        v24 = *a1;
        if (*a1)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
      }
    }
    else if (3 * v27 <= 4 * v26)
    {
      goto LABEL_27;
    }
    v23 = v24 + 16 * v27;
    v22 = 1;
    goto LABEL_30;
  }
  result = WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  v22 = 0;
  v23 = v20 + 16 * v21;
LABEL_30:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v22;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl **result;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
    goto LABEL_3;
  v7 = v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = (WTF::StringImpl **)(v4 + 16 * v10);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = *((_DWORD *)v13 + 4);
          if (v18 >= 0x100)
            v19 = v18 >> 8;
          else
            v19 = WTF::StringImpl::hashSlowCase(v13);
          v20 = 0;
          do
          {
            v21 = v19 & v17;
            v19 = ++v20 + v21;
          }
          while (*(_QWORD *)(v16 + 16 * v21));
          v22 = (WTF::StringImpl **)(v16 + 16 * v21);
          v23 = v22[1];
          v22[1] = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 != 2)
            {
              *(_DWORD *)v23 -= 2;
              goto LABEL_22;
            }
            WTF::StringImpl::destroy(v23, v9);
            v24 = *v22;
            *v22 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v9);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
          else
          {
LABEL_22:
            *v22 = 0;
          }
          v25 = *v12;
          *v12 = 0;
          *v22 = v25;
          v26 = v4 + 16 * v10;
          v27 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v22[1] = v27;
          v28 = *(WTF::StringImpl **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v9);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = *v12;
          *v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v9);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v12 == a2)
            v11 = v22;
          goto LABEL_42;
        }
        v14 = v4 + 16 * v10;
        v15 = *(WTF::StringImpl **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
          {
            WTF::StringImpl::destroy(v15, v9);
            v13 = *v12;
          }
          else
          {
            *(_DWORD *)v15 -= 2;
          }
        }
        *v12 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v9);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
LABEL_42:
      if (++v10 == v5)
        goto LABEL_45;
    }
  }
  v11 = 0;
  result = 0;
  if (v4)
  {
LABEL_45:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v11;
  }
  return result;
}

WTF::RefCountedBase *WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::RefCountedBase *result;
  uint64_t v4[8];
  _QWORD v5[4];
  WTF::RefCountedBase *v6;

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  v4[4] = (uint64_t)v4;
  v4[3] = (uint64_t)a2;
  v4[7] = (uint64_t)v4;
  v4[6] = (uint64_t)a2;
  v4[0] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  v4[5] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  v5[3] = v4;
  v5[2] = v5;
  result = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  v6 = result;
  if (result)
    return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(v6);
  return result;
}

uint64_t *WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(uint64_t *a1, uint64_t *a2)
{
  return std::swap[abi:sn180100]<JSC::ArrayBufferView *>(a1, a2);
}

__int128 *WTF::HashMapTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>::translate<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,std::tuple<WTF::String,WTF::String> const&,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *result;

  WTF::String::operator=((WTF::StringImpl **)a1, (WTF::StringImpl *)a2);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(a2 + 8));
  *(_DWORD *)(a1 + 16) = *(_DWORD *)a3;
  result = WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::operator=((__int128 *)(a1 + 24), (_QWORD *)(a3 + 8));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 32);
  return result;
}

uint64_t *WebKit::NetworkLoadScheduler::prioritizeLoads(uint64_t *this, uint64_t a2)
{
  uint64_t v2;
  WebKit::NetworkLoadScheduler *v3;
  const WebKit::NetworkLoad **v4;
  uint64_t v5;
  WebKit::NetworkLoad *v6;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = (WebKit::NetworkLoadScheduler *)this;
    v4 = *(const WebKit::NetworkLoad ***)a2;
    v5 = 8 * v2;
    do
    {
      v6 = *v4;
      this = WebKit::NetworkLoadScheduler::contextForLoad(v3, *v4);
      if (this)
        this = (uint64_t *)WebKit::NetworkLoadScheduler::HostContext::prioritize((WebKit::NetworkLoadScheduler::HostContext *)this, v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

WebKit::NetworkLoadScheduler *WebKit::NetworkSession::networkLoadScheduler(WebKit::NetworkSession *this)
{
  WebKit::NetworkLoadScheduler *result;
  WebKit::NetworkLoadScheduler **v3;
  WebKit::NetworkLoadScheduler *v4;

  result = (WebKit::NetworkLoadScheduler *)*((_QWORD *)this + 77);
  if (!result)
  {
    v3 = (WebKit::NetworkLoadScheduler **)((char *)this + 616);
    v4 = (WebKit::NetworkLoadScheduler *)WTF::fastMalloc((WTF *)0x20);
    WebKit::NetworkLoadScheduler::NetworkLoadScheduler(v4);
    std::unique_ptr<WebKit::NetworkLoadScheduler>::reset[abi:sn180100](v3, v4);
    return *v3;
  }
  return result;
}

double WebKit::NetworkLoadScheduler::NetworkLoadScheduler(WebKit::NetworkLoadScheduler *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

uint64_t WebKit::NetworkLoadScheduler::HostContext::prioritize(WebKit::NetworkLoadScheduler::HostContext *this, WebKit::NetworkLoad *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = (WebCore::ResourceRequestBase::priority((WebKit::NetworkLoad *)((char *)a2 + 120)) + 1);
  WebCore::ResourceRequestBase::setPriority();
  v5 = *((_QWORD *)a2 + 374);
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v4);
  result = WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::NetworkLoad>((uint64_t)this + 16, (uint64_t)a2);
  if ((_DWORD)result)
    return WebKit::NetworkLoadScheduler::HostContext::start(this, a2);
  return result;
}

uint64_t WebKit::NetworkDataTaskCocoa::setPriority(uint64_t a1, unsigned int a2, double a3)
{
  _DWORD *v3;

  v3 = (_DWORD *)((char *)&unk_1978CF0DC + 4 * (char)a2);
  if (a2 >= 5)
    v3 = (_DWORD *)MEMORY[0x1E0C92BC8];
  LODWORD(a3) = *v3;
  return objc_msgSend(*(id *)(a1 + 608), "setPriority:", a3);
}

unint64_t WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 > a3 || (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  else
  {
    v6 = a3 - (_QWORD)v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void **WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  int v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *result;
      v5 = *((unsigned int *)result + 3);
      v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *v3 = v6;
      result = (void **)memcpy(v6, v4, 8 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

_DWORD *WebKit::VisitedLinkTableController::addVisitedLink(WebKit::VisitedLinkTableController *this, WebCore::Page *a2, unsigned int a3)
{
  _DWORD *result;
  WebKit::WebProcess *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  _DWORD *v18;
  unsigned int *v19;
  void *v20;
  WTF *v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  void *v25;
  WebKit::WebProcess *v26;
  uint64_t v27;
  IPC::Encoder *v28;

  result = (_DWORD *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::VisitedLinkTableController *)((char *)this + 56), a3);
  if (!result || !*result)
  {
    {
      v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v7 = WebKit::WebProcess::WebProcess(v26);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
    }
    v8 = *((_QWORD *)v7 + 4);
    v9 = *(_QWORD **)(*((_QWORD *)a2 + 6) + 16);
    (*(void (**)(_QWORD *))(*v9 + 1368))(v9);
    v10 = *(_QWORD *)(v9[2] + 8);
    if (v10)
      v11 = v10 - 16;
    else
      v11 = 0;
    v27 = *(_QWORD *)(v11 + 2120);
    v12 = *((_QWORD *)this + 6);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 1518;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v28 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v27);
    v14 = *(_QWORD *)(v13 + 544);
    v15 = (v14 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v16 = v15 + 4;
    v17 = *(_QWORD *)(v13 + 552);
    if (v17 < v15 + 4)
    {
      v23 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v24 = v23;
        v23 *= 2;
      }
      while (v24 < v16);
      result = mmap(0, v24, 3, 4098, -1, 0);
      if (result == (_DWORD *)-1)
      {
        __break(0xC471u);
        return result;
      }
      v18 = result;
      memcpy(result, *(const void **)(v13 + 528), *(_QWORD *)(v13 + 544));
      v25 = *(void **)(v13 + 528);
      if (v25 != (void *)(v13 + 16))
        munmap(v25, *(_QWORD *)(v13 + 552));
      *(_QWORD *)(v13 + 528) = v18;
      *(_QWORD *)(v13 + 552) = v24;
      v14 = *(_QWORD *)(v13 + 544);
    }
    else
    {
      v18 = *(_DWORD **)(v13 + 528);
    }
    bzero((char *)v18 + v14, v15 - v14);
    *(_QWORD *)(v13 + 544) = v16;
    v19 = (unsigned int *)(*(_QWORD *)(v13 + 528) + v15);
    *(_QWORD *)(v13 + 536) = v19 + 1;
    *v19 = a3;
    IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v28, 0, 0);
    result = v28;
    v28 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v20);
      return (_DWORD *)WTF::fastFree(v21, v22);
    }
  }
  return result;
}

_DWORD *WebKit::VisitedLinkTableController::isLinkVisited(WebKit::VisitedLinkTableController *this, WebCore::Page *a2, unsigned int a3, const WTF::URL *a4, const WTF::AtomString *a5)
{
  _DWORD *result;

  result = (_DWORD *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::VisitedLinkTableController *)((char *)this + 56), a3);
  if (result)
    return (_DWORD *)(*result != 0);
  return result;
}

uint64_t WebKit::SharedStringHashTableReadOnly::findSlot(WebKit::SharedStringHashTableReadOnly *this, unsigned int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *((_QWORD *)this + 2);
  v3 = *((_DWORD *)this + 3);
  v4 = v3 & a2;
  v5 = *(_DWORD *)(v2 + 4 * (int)(v3 & a2));
  if (v5)
    v6 = v5 == a2;
  else
    v6 = 1;
  if (v6)
  {
    v7 = v4;
  }
  else
  {
    v9 = 0;
    v10 = (~a2 + (a2 >> 23)) ^ ((~a2 + (a2 >> 23)) << 12);
    v11 = v10 ^ (v10 >> 7) ^ (4 * (v10 ^ (v10 >> 7)));
    v12 = v11 ^ (v11 >> 20) | 1;
    do
    {
      if (!v9)
        v9 = v12;
      v4 = (v9 + v4) & v3;
      v7 = v4;
      v13 = *(_DWORD *)(v2 + 4 * v4);
      if (v13)
        v14 = v13 == a2;
      else
        v14 = 1;
    }
    while (!v14);
  }
  return v2 + 4 * v7;
}

void WebKit::WebChromeClient::sampledPageTopColorChanged(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  *(_BYTE *)(v2 + 939) = 1;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

unint64_t WebKit::PlatformCALayerRemote::setBackgroundColor(int8x16_t *this, const WebCore::Color *a2, const Color *a3)
{
  unint64_t result;
  unint64_t v5;

  result = *(_QWORD *)a2;
  v5 = this[39].u64[1];
  if (((result | v5) & 0x8000000000000) != 0)
  {
    result = WebCore::outOfLineComponentsEqual(result, v5, a3);
    if ((result & 1) != 0)
      return result;
  }
  else if (result == v5)
  {
    return result;
  }
  result = WebCore::Color::operator=();
  this[4] = vorrq_s8(this[4], (int8x16_t)vdupq_n_s64(0x200000uLL));
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::NetworkProcessConnectionParameters>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::NetworkProcessConnectionParameters,void>::decode(a1);
  if (!BYTE3(result))
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::NetworkProcessConnectionParameters,void>::decode(uint64_t *a1)
{
  unsigned __int16 v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = IPC::Decoder::decode<BOOL>(a1);
  v3 = IPC::Decoder::decode<WebKit::NetworkProcessPreferencesForWebProcess>(a1);
  v4 = *a1;
  if (!*a1)
    goto LABEL_7;
  LOBYTE(v4) = v2;
  if (v2 <= 0xFFu || (v3 & 0xFF0000) == 0)
  {
    __break(1u);
LABEL_7:
    v5 = 0;
    return v5 | v4 | ((unsigned __int16)v3 << 8);
  }
  v5 = 0x1000000;
  return v5 | v4 | ((unsigned __int16)v3 << 8);
}

unsigned int *IPC::StreamClientConnection::create@<X0>(IPC::StreamClientConnection *this@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *result;
  unsigned __int8 **v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;
  unsigned __int8 **v11;
  int v12;
  void *object;
  unsigned __int8 **v14;
  uint64_t v15[6];
  char v16;
  int v17;
  void *v18;
  uint64_t v19;
  char v20;

  IPC::Connection::createConnectionIdentifierPair((uint64_t)&v17);
  if (!v20)
  {
    *a2 = 0;
    a2[32] = 0;
    return (unsigned int *)std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17);
  }
  result = (unsigned int *)IPC::StreamClientConnectionBuffer::create((uint64_t)this, (uint64_t)v15);
  if (!v16)
  {
    *a2 = 0;
    a2[32] = 0;
    goto LABEL_11;
  }
  if (v20)
  {
    v12 = v17;
    object = v18;
    if (v18)
      os_retain(v18);
    IPC::Connection::createServerConnection((uint64_t)&v12, (mach_port_context_t *)&v14);
    if (object)
      os_release(object);
    result = (unsigned int *)WTF::fastMalloc((WTF *)0x70);
    v5 = v14;
    v14 = 0;
    v11 = v5;
    if (v16)
    {
      v6 = result;
      IPC::StreamClientConnection::StreamClientConnection((uint64_t)result, (uint64_t *)&v11, v15);
      result = (unsigned int *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      if (v20)
      {
        IPC::StreamConnectionBuffer::createHandle((IPC::StreamConnectionBuffer *)(v6 + 14), (uint64_t)&v7);
        IPC::StreamServerConnectionHandle::StreamServerConnectionHandle((uint64_t)v9, (uint64_t)&v19, (uint64_t)&v7);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v7);
        v7 = v6;
        IPC::StreamServerConnectionHandle::StreamServerConnectionHandle((uint64_t)&v8, (uint64_t)v9);
        std::optional<IPC::StreamClientConnection::StreamConnectionPair>::optional[abi:sn180100]<IPC::StreamClientConnection::StreamConnectionPair,0>((uint64_t)a2, (uint64_t *)&v7);
        IPC::StreamClientConnection::StreamConnectionPair::~StreamConnectionPair(&v7);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v10);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v14);
LABEL_11:
        std::__optional_destruct_base<IPC::StreamClientConnectionBuffer,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15);
        return (unsigned int *)std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17);
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t IPC::StreamServerConnectionHandle::StreamServerConnectionHandle(uint64_t a1, uint64_t a2)
{
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

{
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

void IPC::StreamClientConnection::StreamConnectionPair::~StreamConnectionPair(unsigned int **this)
{
  WTF::MachSendRight *v2;

  v2 = (WTF::MachSendRight *)(this + 1);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(this + 2));
  WTF::MachSendRight::~MachSendRight(v2);
  WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(this);
}

void IPC::Connection::createConnectionIdentifierPair(uint64_t a1@<X8>)
{
  kern_return_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  _BYTE v9[4];
  mach_port_name_t name;
  uint8_t buf[4];
  kern_return_t v12;
  id v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  name = 0;
  v3 = mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, &name);
  if (v3)
  {
    v5 = qword_1ECE71C68;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    *(_DWORD *)buf = 67109120;
    v12 = v3;
    v6 = "Connection::createConnectionIdentifierPair: Could not allocate mach port, error %x";
    v7 = v5;
    v8 = 8;
    goto LABEL_12;
  }
  if (name - 1 >= 0xFFFFFFFE)
  {
    v4 = qword_1ECE71C68;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      return;
    }
    *(_WORD *)buf = 0;
    v6 = "Connection::createConnectionIdentifierPair: Could not allocate mach port, returned port was invalid";
    v7 = v4;
    v8 = 2;
LABEL_12:
    _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, v6, buf, v8);
    goto LABEL_8;
  }
  *(_DWORD *)buf = name;
  v13 = 0;
  WTF::MachSendRight::createFromReceiveRight((WTF::MachSendRight *)name);
  WTF::MachSendRight::MachSendRight();
  *(_DWORD *)a1 = *(_DWORD *)buf;
  *(_QWORD *)(a1 + 8) = v13;
  v13 = 0;
  WTF::MachSendRight::MachSendRight();
  *(_BYTE *)(a1 + 24) = 1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v14);
  if (v13)

  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
}

void sub_196D11C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v4 = *(void **)(v2 + 8);
  if (v4)

  IPC::Connection::ConnectionIdentifierPair::~ConnectionIdentifierPair((IPC::Connection::ConnectionIdentifierPair *)va1);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)va);
  _Unwind_Resume(a1);
}

void IPC::Connection::ConnectionIdentifierPair::~ConnectionIdentifierPair(IPC::Connection::ConnectionIdentifierPair *this)
{
  void *v2;

  WTF::MachSendRight::~MachSendRight((IPC::Connection::ConnectionIdentifierPair *)((char *)this + 16));
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)

}

uint64_t IPC::Connection::send<Messages::NetworkProcessConnection::SetOnLineState>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 298;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = a3;
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

uint64_t IPC::Connection::setOnlySendMessagesAsDispatchWhenWaitingForSyncReplyWhenProcessingSuchAMessage(uint64_t this, char a2)
{
  *(_BYTE *)(this + 34) = a2;
  return this;
}

_QWORD *WebKit::NetworkConnectionToWebProcess::establishSharedWorkerServerConnection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  WebKit::NetworkSession *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _BYTE v15[12];
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v1 = this;
  v18 = *MEMORY[0x1E0C80C00];
  v2 = this[28];
  if (!v2 || !*(_QWORD *)(v2 + 8))
  {
    v3 = this[9];
    *(_QWORD *)v15 = this[10];
    this = (_QWORD *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 208), v15);
    if (this)
    {
      v4 = (WebKit::NetworkSession *)this;
      v5 = qword_1ECE718C0;
      if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
      {
        v6 = v1[32];
        *(_DWORD *)v15 = 134218240;
        *(_QWORD *)&v15[4] = v1;
        v16 = 2048;
        v17 = v6;
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] NetworkConnectionToWebProcess::establishSharedWorkerServerConnection:", v15, 0x16u);
      }
      v7 = WebKit::NetworkSession::ensureSharedWorkerServer(v4);
      std::make_unique[abi:sn180100]<WebKit::WebSharedWorkerServerConnection,WTF::Ref<WebKit::NetworkProcess,WTF::RawPtrTraits<WebKit::NetworkProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcess>> &,WebKit::WebSharedWorkerServer &,IPC::Connection &,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>((uint64_t *)v15, v1 + 9, v7, (unsigned __int8 **)v1[8], v1 + 32);
      v8 = *(_QWORD *)v15;
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(*(_QWORD *)v15 + 16), *(_QWORD *)v15 + 8);
      v10 = *(unsigned int **)(v8 + 16);
      if (v10)
      {
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
      v12 = (unsigned int *)v1[28];
      v1[28] = v10;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v9);
        }
      }
      WebKit::WebSharedWorkerServer::addConnection(v7, (uint64_t *)v15);
      this = *(_QWORD **)v15;
      *(_QWORD *)v15 = 0;
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  return this;
}

_QWORD *WebKit::NetworkConnectionToWebProcess::establishSWServerConnection(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;

  v1 = this;
  v2 = this[26];
  if (!v2 || !*(_QWORD *)(v2 + 8))
  {
    v3 = this[9];
    v14 = (_QWORD *)this[10];
    this = (_QWORD *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v3 + 208), &v14);
    if (this)
    {
      v4 = WebKit::NetworkSession::ensureSWServer((WebKit::NetworkSession *)this);
      v5 = v1[8];
      v6 = WTF::fastMalloc((WTF *)0x78);
      v7 = WebKit::WebSWServerConnection::WebSWServerConnection(v6, v1, v4, v5, v1[32]);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 8), v6);
      v9 = *(unsigned int **)(v6 + 8);
      if (v9)
      {
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
      }
      v11 = (unsigned int *)v1[26];
      v1[26] = v9;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v8);
        }
      }
      v14 = (_QWORD *)v6;
      WebCore::SWServer::addConnection();
      this = v14;
      v14 = 0;
      if (this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
  }
  return this;
}

uint64_t WebKit::NetworkResourceLoadMap::NetworkResourceLoadMap(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_QWORD *)result = 0;
  *(_BYTE *)(result + 8) = 0;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v2;
  return result;
}

uint64_t WebKit::WebSharedWorkerServer::addConnection(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 48);
  v8 = v5;
  v6 = qword_1ECE718C0;
  if (os_log_type_enabled((os_log_t)qword_1ECE718C0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v10 = v4;
    v11 = 2048;
    v12 = v5;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerServer::addConnection(%p): processIdentifier=%llu", buf, 0x16u);
  }
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::WebSharedWorkerServerConnection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::WebSharedWorkerServerConnection>>((uint64_t)buf, (uint64_t *)(a1 + 16), &v8, a2);
}

unsigned int **WebKit::NetworkMDNSRegister::NetworkMDNSRegister(unsigned int **a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 56), a2 + 48);
  v4 = *(unsigned int **)(a2 + 56);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *a1 = v4;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

void WebKit::WebSWOriginStore::registerSWServerConnection(WebKit::WebSWOriginStore **this, WebKit::WebSWServerConnection *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  WTF::WeakHashSet<WebKit::WebSWServerConnection,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebSWServerConnection>((uint64_t)v7, (uint64_t)(this + 15), (uint64_t)a2);
  if (*((_DWORD *)this + 8))
    WebKit::WebSWOriginStore::sendStoreHandle(this[5], a2);
  if (*((_BYTE *)this + 112))
  {
    v5 = *((_QWORD *)a2 + 7);
    v4 = (char *)a2 + 56;
    v6 = (*(uint64_t (**)(char *))(v5 + 56))(v4);
    IPC::MessageSender::send<Messages::WebSWClientConnection::SetSWOriginTableIsImported>((uint64_t)v4, v6);
  }
}

void WebKit::NetworkSession::registerSWServerConnection(WebKit::NetworkSession *this, WebKit::WebSWServerConnection *a2)
{
  uint64_t v2;
  WebKit::WebSWOriginStore **v3;

  v2 = *((_QWORD *)this + 96);
  if (v2)
  {
    v3 = *(WebKit::WebSWOriginStore ***)(v2 + 136);
    if (v3)
      WebKit::WebSWOriginStore::registerSWServerConnection(v3, a2);
  }
}

uint64_t WebKit::NetworkSession::ensureSharedWorkerServer(WebKit::NetworkSession *this)
{
  uint64_t result;
  WTF::StringImpl *v3;

  result = *((_QWORD *)this + 99);
  if (!result)
  {
    v3 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
    WebKit::WebSharedWorkerServer::WebSharedWorkerServer((uint64_t)v3, (uint64_t)this);
    std::unique_ptr<WebKit::WebSharedWorkerServer>::reset[abi:sn180100]((WebKit::WebSharedWorkerServer **)this + 99, v3);
    return *((_QWORD *)this + 99);
  }
  return result;
}

double WebKit::WebSharedWorkerServer::WebSharedWorkerServer(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t WTF::ThreadSafeWeakHashSet<IPC::Connection>::add<IPC::Connection,(void *)0>(uint64_t *a1, WTF::ThreadSafeWeakPtrControlBlock **a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  int v11;
  _BYTE v12[24];
  WTF::ThreadSafeWeakPtrControlBlock **v13;
  WTF::ThreadSafeWeakPtrControlBlock *v14;

  if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(*a2))
  {
    result = 98;
    __break(0xC471u);
    return result;
  }
  v4 = (unsigned __int8 *)(a1 + 2);
  if (__ldaxr((unsigned __int8 *)a1 + 16))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](a1 + 2);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakRef(*a2);
  v14 = (WTF::ThreadSafeWeakPtrControlBlock *)result;
  if (result)
  {
    v7 = *((_DWORD *)a1 + 3);
    v8 = *((_DWORD *)a1 + 2) + 1;
    *((_DWORD *)a1 + 2) = v8;
    if (v8 > v7)
    {
      _ZN3WTF9HashTableIPKN3IPC10ConnectionENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_((unsigned __int8 *)a1);
      *((_DWORD *)a1 + 2) = 0;
      v9 = *a1;
      if (*a1)
      {
        LODWORD(v9) = *(_DWORD *)(v9 - 12);
        if (v9 > 0x7FFFFFFE)
          LODWORD(v9) = 0x7FFFFFFF;
      }
      *((_DWORD *)a1 + 3) = 2 * v9;
    }
    v13 = a2;
    WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::add<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>((uint64_t)v12, a1, (WTF **)&v13, &v14);
    result = (uint64_t)v14;
    if (v14)
      result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)v14, v10);
  }
  v11 = __ldxr(v4);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 2));
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 2));
  return result;
}

unsigned __int8 *_ZN3WTF9HashTableIPKN3IPC10ConnectionENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKSS_(unsigned __int8 *result)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 **v9;
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  int v16;

  v1 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v2 = *(_DWORD *)(v1 - 4);
    if (v2)
    {
      v3 = (uint64_t *)result;
      v4 = 0;
      v5 = v2 - 1;
      do
      {
        v6 = v5;
        v7 = (_QWORD *)(v1 + 16 * v5);
        if ((unint64_t)(*v7 + 1) >= 2)
        {
          v8 = v1 + 16 * v5;
          v10 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v8 + 8);
          v9 = (unsigned __int8 **)(v8 + 8);
          result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v10);
          if ((_DWORD)result)
          {
            *v7 = -1;
            result = *v9;
            *v9 = 0;
            if (result)
              result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v11);
            ++v4;
          }
        }
        --v5;
      }
      while (v6);
      v12 = *v3;
      if (v4)
      {
        *(_DWORD *)(v12 - 16) += v4;
        v15 = *v3;
        if (*v3)
          v16 = *(_DWORD *)(v15 - 12);
        else
          v16 = 0;
        *(_DWORD *)(v15 - 12) = v16 - v4;
        v12 = *v3;
      }
      if (v12)
      {
        v13 = *(_DWORD *)(v12 - 4);
        if (6 * *(_DWORD *)(v12 - 12) < v13 && v13 >= 9)
          return (unsigned __int8 *)WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::shrinkToBestSize(v3);
      }
    }
  }
  return result;
}

unint64_t WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::add<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>(uint64_t a1, uint64_t *a2, WTF **a3, WTF **a4)
{
  uint64_t v8;
  int v9;
  unint64_t result;
  void *v11;
  unsigned int v12;
  WTF **v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  WTF **v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::IntHash<unsigned long>::hash(*a3);
  v12 = result & v9;
  v13 = (WTF **)(v8 + 16 * (result & v9));
  v14 = *v13;
  v15 = *a3;
  if (*v13)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v14 == v15)
      {
        v27 = *a2;
        if (*a2)
          v28 = *(unsigned int *)(v27 - 4);
        else
          v28 = 0;
        v24 = 0;
        v23 = v27 + 16 * v28;
        goto LABEL_14;
      }
      if (v14 == (WTF *)-1)
        v25 = v13;
      v12 = (v12 + v26) & v9;
      v13 = (WTF **)(v8 + 16 * v12);
      v14 = *v13;
      ++v26;
    }
    while (*v13);
    if (v25)
    {
      *v25 = 0;
      v25[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v13 = v25;
    }
  }
  *v13 = v15;
  v16 = *a4;
  *a4 = 0;
  result = (unint64_t)v13[1];
  v13[1] = v16;
  if (result)
    result = (unint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)result, v11);
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_13;
LABEL_26:
    result = (unint64_t)WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::expand(a2, v13);
    v13 = (WTF **)result;
    v19 = *a2;
    if (*a2)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
    goto LABEL_13;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_26;
LABEL_13:
  v23 = v19 + 16 * v22;
  v24 = 1;
LABEL_14:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

unint64_t WTF::IntHash<unsigned long>::hash(WTF *a1)
{
  return WTF::intHash(a1);
}

unint64_t WTF::intHash(WTF *this)
{
  unint64_t v1;
  unint64_t v3;

  v1 = ~(((9
         * (((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22))
           + ~((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) << 13)) ^ (((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) + ~((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) << 13)) >> 8))) ^ ((9 * (((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) + ~((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) << 13)) ^ (((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) + ~((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) << 13)) >> 8))) >> 15)) << 27);
  v3 = ((9
       * (((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22))
         + ~((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) << 13)) ^ (((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) + ~((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) << 13)) >> 8))) ^ ((9 * (((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) + ~((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) << 13)) ^ (((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) + ~((((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22)) << 13)) >> 8))) >> 15))
     + v1;
  return v3 ^ (v3 >> 31);
}

_QWORD *WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  unsigned __int8 *v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v16 = WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::reinsert(*a1, v14);
          v17 = (unsigned __int8 *)v14[1];
          v14[1] = 0;
          if (v17)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v17, v10);
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          v15 = (unsigned __int8 *)v14[1];
          v14[1] = 0;
          if (v15)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v15, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<IPC::Connection const*,WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashMap<IPC::Connection const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<IPC::Connection const*>,WTF::HashTraits<IPC::Connection const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::Connection const*>>::rehash(a1, v5, a2);
}

uint64_t IPC::Connection::setOutgoingMessageQueueIsGrowingLargeCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL WebKit::WebProcess::shouldUseRemoteRenderingFor(unsigned __int8 *a1, int a2)
{
  int v2;

  if ((a2 - 2) < 5)
  {
    v2 = a1[761];
    return v2 != 0;
  }
  if (a2 == 1)
  {
    v2 = a1[760];
    return v2 != 0;
  }
  if (a2 == 8)
  {
    v2 = a1[762];
    return v2 != 0;
  }
  return 0;
}

uint64_t IPC::StreamClientConnectionBuffer::create@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;

  if (this < 0x1F
    && this > 5
    && (this = WebCore::SharedMemory::allocate((WebCore::SharedMemory *)((1 << this) + 256)), v7))
  {
    v3 = v7;
    v7 = 0;
    IPC::StreamClientConnectionBuffer::StreamClientConnectionBuffer((uint64_t)&v4, (uint64_t *)&v3);
    *(_OWORD *)a2 = v4;
    *((_QWORD *)&v4 + 1) = 0;
    *(_QWORD *)(a2 + 16) = v5;
    std::__optional_copy_assign_base<IPC::StreamClientConnectionBuffer::Semaphores,false>::__optional_copy_assign_base[abi:sn180100](a2 + 24, (uint64_t)&v6);
    *(_BYTE *)(a2 + 48) = 1;
    IPC::StreamClientConnectionBuffer::~StreamClientConnectionBuffer((IPC::StreamClientConnectionBuffer *)&v4);
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    this = (uint64_t)v7;
    v7 = 0;
    if (this)
      return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)this);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
  }
  return this;
}

void IPC::StreamClientConnectionBuffer::~StreamClientConnectionBuffer(IPC::StreamClientConnectionBuffer *this)
{
  unsigned int *v2;

  std::__optional_destruct_base<std::tuple<IPC::Semaphore,IPC::Semaphore>,false>::~__optional_destruct_base[abi:sn180100]((_BYTE *)this + 24);
  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
}

void IPC::StreamConnectionBuffer::createHandle(IPC::StreamConnectionBuffer *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  _BYTE v5[8];
  uint64_t v6;
  char v7;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  WebCore::SharedMemory::createHandle();
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  if (v7)
  {
    WTF::MachSendRight::MachSendRight();
    *(_QWORD *)(a2 + 8) = v6;
    if (v7)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateRenderingBackend>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  IPC::Encoder *v17;

  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 39;
  *(_QWORD *)(v10 + 8) = a3;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v17 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,IPC::StreamServerConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::StreamServerConnectionHandle &&,0ul,1ul>((IPC::Encoder *)v10, a2);
  v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
  }
  return v12;
}

_QWORD *WebKit::PlatformCALayerRemote::setContents(_QWORD *this, const void *a2)
{
  if (!a2)
  {
    this = (_QWORD *)this[59];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 96))(this);
  }
  return this;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t result;
  _QWORD v5[2];
  char v6;
  uint64_t v7;

  v7 = *a1;
  *a1 = 0;
  LOBYTE(v5[0]) = 0;
  v6 = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v5[0] = *(_QWORD *)a2;
    v2 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v5[1] = v2;
    v6 = 1;
  }
  WTF::Function<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(&v7, (uint64_t)v5);
  if (v6)
    WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Function<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  WTF::StringImpl *v5;
  _QWORD v6[2];
  char v7;

  v2 = *a1;
  LOBYTE(v6[0]) = 0;
  v7 = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v6[0] = *(_QWORD *)a2;
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6[1] = v3;
    v7 = 1;
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v6);
  if (v7)
    return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v5);
  return result;
}

void WebKit::OriginStorageManager::StorageBucket::~StorageBucket(WebKit::OriginStorageManager::StorageBucket *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v4 = (uint64_t *)*((_QWORD *)this + 16);
  v2 = (_QWORD *)((char *)this + 128);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebKit::ServiceWorkerStorageManager>::operator()[abi:sn180100]((uint64_t)v2, v3);
  std::unique_ptr<WebKit::BackgroundFetchStoreManager>::reset[abi:sn180100]((WebKit::BackgroundFetchStoreManager **)this + 15, 0);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  std::unique_ptr<WebKit::CacheStorageManager>::reset[abi:sn180100]((WebKit::CacheStorageManager **)this + 11, 0);
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  std::unique_ptr<WebKit::IDBStorageManager>::reset[abi:sn180100]((WebKit::IDBStorageManager **)this + 8, 0);
  v11 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v11)
    std::default_delete<WebKit::SessionStorageManager>::operator()[abi:sn180100]((_DWORD)this + 56, v11);
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
    std::default_delete<WebKit::LocalStorageManager>::operator()[abi:sn180100]((_DWORD)this + 32, v14);
  std::unique_ptr<WebKit::FileSystemStorageManager>::reset[abi:sn180100]((WebKit::FileSystemStorageManager **)this + 3, 0);
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
}

void WebKit::NetworkStorageManager::migrateServiceWorkerRegistrationsToOrigins(WebKit::NetworkStorageManager *this)
{
  WebKit::ServiceWorkerStorageManager *v2;
  WebKit::ServiceWorkerStorageManager *v3;
  _DWORD *v4;
  void *v5;
  void *v6;
  WTF::StringImpl *v7;
  _QWORD v8[2];
  _BYTE v9[16];
  __int128 *v10;
  unsigned int v11;
  char v12;

  v2 = (WebKit::ServiceWorkerStorageManager *)WTF::fastMalloc((WTF *)0x10);
  v3 = v2;
  v4 = (_DWORD *)*((_QWORD *)this + 21);
  if (v4)
    *v4 += 2;
  *(_QWORD *)v2 = v4;
  *((_QWORD *)v2 + 1) = 0;
  WebKit::ServiceWorkerStorageManager::importRegistrations(v2, &v10);
  if (v12)
  {
    v8[0] = 0;
    v8[1] = 0;
    WebKit::NetworkStorageManager::updateServiceWorkerRegistrationsByOrigin((uint64_t)v9, (uint64_t)this, v10, v11, (uint64_t)v8);
    WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
    WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
    WebKit::ServiceWorkerStorageManager::clearAllRegistrations(v3);
    if (v12)
      WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v7);
  }
  v10 = 0;
  std::default_delete<WebKit::ServiceWorkerStorageManager>::operator()[abi:sn180100]((uint64_t)&v10, (uint64_t *)v3);
}

WebCore::SWRegistrationDatabase *WebKit::ServiceWorkerStorageManager::importRegistrations@<X0>(WebKit::ServiceWorkerStorageManager *this@<X0>, _BYTE *a2@<X8>)
{
  WebCore::SWRegistrationDatabase *result;

  result = (WebCore::SWRegistrationDatabase *)WebKit::ServiceWorkerStorageManager::ensureDatabase(this);
  if (result)
    return (WebCore::SWRegistrationDatabase *)WebCore::SWRegistrationDatabase::importRegistrations(result);
  *a2 = 0;
  a2[16] = 0;
  return result;
}

uint64_t WebKit::ServiceWorkerStorageManager::ensureDatabase(WebKit::ServiceWorkerStorageManager *this)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)((char *)this + 8);
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
    {
      v4 = WTF::fastMalloc((WTF *)0x28);
      MEMORY[0x19AEB252C](v4, this);
      std::unique_ptr<WebCore::SWRegistrationDatabase>::reset[abi:sn180100](v3, v4);
      return *((_QWORD *)this + 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WebCore::SWRegistrationDatabase *WebKit::ServiceWorkerStorageManager::clearAllRegistrations(WebKit::ServiceWorkerStorageManager *this)
{
  WebCore::SWRegistrationDatabase *result;

  result = (WebCore::SWRegistrationDatabase *)WebKit::ServiceWorkerStorageManager::ensureDatabase(this);
  if (result)
    return (WebCore::SWRegistrationDatabase *)WebCore::SWRegistrationDatabase::clearAllRegistrations(result);
  return result;
}

void WebKit::NetworkStorageManager::updateServiceWorkerRegistrationsByOrigin(uint64_t a1, uint64_t a2, __int128 *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v8;
  WebCore::SecurityOriginData *v9;
  WebCore::SecurityOriginData *v10;
  WebCore::SecurityOriginData *v11;
  const WebCore::ClientOrigin *v12;
  WebCore::SecurityOriginData *v13;
  WebKit::OriginStorageManager *v14;
  WebKit::OriginStorageManager::StorageBucket *v15;
  WebKit::ServiceWorkerStorageManager *v16;
  void *v17;
  uint64_t v19;
  WebCore::SecurityOriginData *v20;
  unsigned int v21;
  WebCore::ServiceWorkerRegistrationKey *v22;
  uint64_t v23;
  WebCore::SecurityOriginData *v24;
  unsigned int v25;
  WebCore::SecurityOriginData *v26[3];
  WebCore::SecurityOriginData *v27;
  uint64_t v28[2];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  if (a4)
  {
    v19 = 592 * a4;
    do
    {
      WebCore::ServiceWorkerRegistrationKey::clientOrigin((WebCore::ServiceWorkerRegistrationKey *)((char *)a3 + 24));
      WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkStorageManager::updateServiceWorkerRegistrationsByOrigin(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)::$_0>((uint64_t)v26, (uint64_t *)&v27, (uint64_t)v28);
      v20 = v26[0];
      v21 = *((_DWORD *)v26[0] + 19);
      if (v21 == *((_DWORD *)v26[0] + 18))
      {
        WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerContextData>((uint64_t)v26[0] + 64, (unint64_t)a3);
      }
      else
      {
        WebCore::ServiceWorkerContextData::ServiceWorkerContextData(*((_QWORD *)v26[0] + 8) + 592 * v21, a3);
        ++*((_DWORD *)v20 + 19);
      }
      WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)v28);
      a3 += 37;
      v19 -= 592;
    }
    while (v19);
  }
  v8 = *(unsigned int *)(a5 + 12);
  if ((_DWORD)v8)
  {
    v22 = *(WebCore::ServiceWorkerRegistrationKey **)a5;
    v23 = 72 * v8;
    do
    {
      WebCore::ServiceWorkerRegistrationKey::clientOrigin(v22);
      WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::ensure<WebKit::NetworkStorageManager::updateServiceWorkerRegistrationsByOrigin(WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&&)::$_0>((uint64_t)v26, (uint64_t *)&v27, (uint64_t)v28);
      v24 = v26[0];
      v25 = *((_DWORD *)v26[0] + 23);
      if (v25 == *((_DWORD *)v26[0] + 22))
      {
        WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerRegistrationKey>((uint64_t)v26[0] + 80, (unint64_t)v22);
      }
      else
      {
        WebCore::ServiceWorkerRegistrationKey::ServiceWorkerRegistrationKey(*((_QWORD *)v26[0] + 10) + 72 * v25, (uint64_t)v22);
        ++*((_DWORD *)v24 + 23);
      }
      WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)v28);
      v22 = (WebCore::ServiceWorkerRegistrationKey *)((char *)v22 + 72);
      v23 -= 72;
    }
    while (v23);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = v27;
  v10 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(v27);
  v12 = v10;
  v13 = 0;
  v26[0] = v10;
  v26[1] = v11;
  if (v9)
    v13 = (WebCore::SecurityOriginData *)((char *)v9 + 96 * *((unsigned int *)v9 - 1));
  if (v13 != v10)
  {
    do
    {
      v14 = (WebKit::OriginStorageManager *)WebKit::NetworkStorageManager::originStorageManager(a2, v12);
      v15 = WebKit::OriginStorageManager::defaultBucket(v14);
      v16 = (WebKit::ServiceWorkerStorageManager *)WebKit::OriginStorageManager::StorageBucket::serviceWorkerStorageManager(v15);
      WebKit::ServiceWorkerStorageManager::updateRegistrations(v16, v28);
      if (v29)
      {
        WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((unsigned int *)a1, v28);
        if (v29)
          WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v17);
      }
      v26[0] = (WebCore::SecurityOriginData *)((char *)v26[0] + 96);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v26);
      v12 = v26[0];
    }
    while (v26[0] != v13);
    v9 = v27;
  }
  if (v9)
    WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v9, v11);
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(WebCore::SecurityOriginData *a1)
{
  if (!a1)
    return 0;
  if (!*((_DWORD *)a1 - 3))
    return (WebCore::SecurityOriginData *)((char *)a1 + 96 * *((unsigned int *)a1 - 1));
  return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::pair<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::makeIterator((uint64_t)a1, a1);
}

uint64_t WTF::Vector<WebCore::ServiceWorkerRegistrationKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ServiceWorkerRegistrationKey>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 72 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerScripts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  unsigned int *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::ServiceWorkerScripts>::destruct(*(unsigned int **)a1, (unsigned int *)(*(_QWORD *)a1 + 40 * v3));
  v4 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  WTF *v4;
  WebCore::ServiceWorkerContextData *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v6 = *(WebCore::ServiceWorkerContextData **)a1;
    v7 = 592 * v3;
    do
    {
      WebCore::ServiceWorkerContextData::~ServiceWorkerContextData(v6, a2);
      v6 = (WebCore::ServiceWorkerContextData *)(v8 + 592);
      v7 -= 592;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebKit::NetworkStorageManager::getAllOrigins(WebKit::NetworkStorageManager *this, WebCore::SecurityOriginData **a2)
{
  WebCore::SecurityOriginData *v4;
  void *v5;
  WebCore::SecurityOriginData *v6;
  WebCore::SecurityOriginData *v7;
  WebCore::SecurityOriginData *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  WebCore::SecurityOriginData *v12;
  uint64_t v13;
  WebCore::SecurityOriginData *v14;
  void *v15;
  WebCore::SecurityOriginData *v16;
  uint64_t result;
  WebCore::SecurityOriginData *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::SecurityOriginData *v21;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD v25[3];
  int v26;
  char v27[24];
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  v4 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(a2[10]);
  v6 = v4;
  v7 = 0;
  v8 = a2[10];
  if (v8)
    v7 = (WebCore::SecurityOriginData *)((char *)v8 + 72 * *((unsigned int *)v8 - 1));
  v22 = v5;
  if (v7 != v4)
  {
    do
    {
      WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add((uint64_t *)this, (uint64_t)v6, (uint64_t)v25);
      v21 = (WebCore::SecurityOriginData *)((char *)v6 + 72);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(&v21);
      v6 = v21;
    }
    while (v21 != v7);
  }
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E34C6CE0;
  v9[1] = this;
  v25[0] = v9;
  WebKit::NetworkStorageManager::forEachOriginDirectory((uint64_t)a2, (const WTF::String *)v25);
  (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  WebKit::LocalStorageManager::originsOfLocalStorageData(&v23, (const WTF::String *)(a2 + 18));
  if (v24)
  {
    v19 = v23;
    v20 = 32 * v24;
    do
    {
      LOBYTE(v25[0]) = 0;
      v26 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v25, v19);
      v27[0] = 0;
      v28 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v27, v19);
      WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add((uint64_t)&v21, (uint64_t *)this, (uint64_t)v25);
      WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)v25);
      v19 += 32;
      v20 -= 32;
    }
    while (v20);
  }
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v10);
  WebKit::IDBStorageManager::originsOfIDBStorageData((WTF::StringImpl *)&v23, (const WTF::String *)(a2 + 19));
  v12 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(&v23);
  v21 = v12;
  v22 = v11;
  v13 = v23;
  if (v23)
    v14 = (WebCore::SecurityOriginData *)(v23 + ((unint64_t)*(unsigned int *)(v23 - 4) << 6));
  else
    v14 = 0;
  if (v14 != v12)
  {
    do
    {
      WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add((uint64_t *)this, (uint64_t)v12, (uint64_t)v25);
      v21 = (WebCore::SecurityOriginData *)((char *)v21 + 64);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(&v21);
      v12 = v21;
    }
    while (v21 != v14);
    v13 = v23;
  }
  if (v13)
    WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(v13, v11);
  WebKit::CacheStorageManager::originsOfCacheStorageData((WebKit::CacheStorageManager *)(a2 + 20), (const WTF::String *)v11, &v23);
  v16 = WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(&v23);
  v21 = v16;
  v22 = v15;
  result = v23;
  if (v23)
    v18 = (WebCore::SecurityOriginData *)(v23 + ((unint64_t)*(unsigned int *)(v23 - 4) << 6));
  else
    v18 = 0;
  if (v18 != v16)
  {
    do
    {
      WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add((uint64_t *)this, (uint64_t)v16, (uint64_t)v25);
      v21 = (WebCore::SecurityOriginData *)((char *)v21 + 64);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(&v21);
      v16 = v21;
    }
    while (v21 != v18);
    result = v23;
  }
  if (result)
    return WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::deallocateTable(result, v15);
  return result;
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::begin(uint64_t *a1)
{
  WebCore::SecurityOriginData *v1;

  v1 = (WebCore::SecurityOriginData *)*a1;
  if (!*a1)
    return 0;
  if (*((_DWORD *)v1 - 3))
    return WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::makeConstIterator(a1, v1);
  return (WebCore::SecurityOriginData *)((char *)v1 + 64 * (unint64_t)*((unsigned int *)v1 - 1));
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::begin(WebCore::SecurityOriginData *a1)
{
  if (!a1)
    return 0;
  if (*((_DWORD *)a1 - 3))
    return WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::makeIterator((uint64_t)a1, a1);
  return (WebCore::SecurityOriginData *)((char *)a1 + 72 * *((unsigned int *)a1 - 1));
}

uint64_t WebKit::CacheStorageManager::originsOfCacheStorageData@<X0>(WebKit::CacheStorageManager *this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  unsigned int v19;
  __int128 v20;
  const char *v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  WTF::FileSystemImpl::listDirectory(this, a2);
  if (v19)
  {
    v6 = v18;
    v7 = 8 * v19;
    do
    {
      *(_QWORD *)&v20 = 0;
      DWORD2(v20) = 0;
      LOBYTE(v8) = 1;
      BYTE12(v20) = 1;
      v9 = *v6;
      if (*v6)
      {
        v10 = *(unsigned __int8 *)(v9 + 16);
        v11 = *(_QWORD *)(v9 + 8);
        LODWORD(v9) = *(_DWORD *)(v9 + 4);
        *(_QWORD *)&v20 = v11;
        v8 = (v10 >> 2) & 1;
      }
      DWORD2(v20) = v9;
      BYTE12(v20) = v8;
      v21 = "origin";
      v22 = 6;
      v23 = 1;
      WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v15, &v20, 2uLL);
      WTF::FileSystemImpl::pathByAppendingComponents();
      v13 = v15;
      if (v15)
      {
        v15 = 0;
        v16 = 0;
        WTF::fastFree(v13, v12);
      }
      WebCore::StorageUtilities::readOriginFromFile((WebCore::StorageUtilities *)&v17, (const WTF::String *)v12);
      if (v24)
        WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add(a3, (uint64_t)&v20, (uint64_t)&v15);
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20);
      v14 = v17;
      v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v4);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v4);
}

uint64_t WebKit::NetworkStorageManager::forEachOriginDirectory(uint64_t a1, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  uint64_t v5;
  uint64_t v6;
  const WTF::String *v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;

  WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)(a1 + 56), a2);
  if (v19)
  {
    v5 = v18;
    v6 = v18 + 8 * v19;
    do
    {
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v17, v7);
      if (v16)
      {
        v11 = v15;
        v12 = 8 * v16;
        do
        {
          if (!*v11 || (WTF::StringImpl::startsWith() & 1) == 0)
          {
            WTF::FileSystemImpl::pathByAppendingComponent();
            (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)a2 + 16))(*(_QWORD *)a2, &v14);
            v13 = v14;
            v14 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v9);
              else
                *(_DWORD *)v13 -= 2;
            }
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      else
      {
        WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v17, v8);
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v9);
      v10 = v17;
      v17 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v3);
        else
          *(_DWORD *)v10 -= 2;
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v3);
}

_QWORD *WebKit::LocalStorageManager::originsOfLocalStorageData(_QWORD *this, const WTF::String *a2)
{
  uint64_t v2;
  void *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::String *v8;
  unsigned int v9;
  char v10;
  _BYTE v11[24];
  int v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *this = 0;
  this[1] = 0;
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v2 = (uint64_t)this;
    WTF::FileSystemImpl::listDirectory(a2, a2);
    if (v9)
    {
      v4 = (WTF::StringImpl **)v8;
      v5 = 8 * v9;
      do
      {
        WebKit::fileNameToOrigin((WebKit *)v11, v4);
        if (v13)
        {
          v6 = *(unsigned int *)(v2 + 12);
          if ((_DWORD)v6 == *(_DWORD *)(v2 + 8))
          {
            WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData&>(v2, (unint64_t)v11);
          }
          else
          {
            v7 = *(_QWORD *)v2 + 32 * v6;
            *(_BYTE *)v7 = 0;
            *(_DWORD *)(v7 + 24) = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v7, (uint64_t)v11);
            ++*(_DWORD *)(v2 + 12);
          }
          if (v13)
          {
            if (v12 != -1)
              ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v12])(&v10, v11);
          }
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    return (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v3);
  }
  return this;
}

WTF::StringImpl *WebKit::IDBStorageManager::originsOfIDBStorageData(WTF::StringImpl *this, const WTF::String *a2)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = 0;
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v2 = this;
    WTF::FileSystemImpl::pathByAppendingComponent();
    WebKit::getOriginsForVersion((WTF::FileSystemImpl *)&v6, v2);
    v4 = v6;
    v6 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    WTF::FileSystemImpl::pathByAppendingComponent();
    WebKit::getOriginsForVersion((WTF::FileSystemImpl *)&v6, v2);
    this = v6;
    v6 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

uint64_t WebKit::getOriginsForVersion(WTF::FileSystemImpl *a1, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  uint64_t v5;
  uint64_t v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t i;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  _BYTE *v13;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  _BYTE v16[24];
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unsigned int v22;
  _BYTE v23[24];
  int v24;
  _BYTE v25[24];
  int v26;
  _BYTE v27[24];
  int v28;
  char v29;
  _BYTE v30[24];
  int v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  WTF::FileSystemImpl::listDirectory(a1, a2);
  if (v22)
  {
    v5 = v21;
    v6 = v21 + 8 * v22;
    do
    {
      WebCore::SecurityOriginData::fromDatabaseIdentifier();
      if (!v32)
        goto LABEL_30;
LABEL_5:
      WTF::FileSystemImpl::pathByAppendingComponent();
      WTF::FileSystemImpl::listDirectory((WTF::FileSystemImpl *)&v20, v7);
      if (v19)
      {
        v9 = v18;
        for (i = 8 * v19; i; i -= 8)
        {
          WTF::FileSystemImpl::pathByAppendingComponent();
          if ((WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v17, v11) & 1) == 0)
          {
            WebCore::SecurityOriginData::fromDatabaseIdentifier();
            if (v29)
            {
              if (!v32)
                goto LABEL_33;
              v23[0] = 0;
              v24 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v23, (uint64_t)v30);
              if (!v29)
                goto LABEL_33;
              v25[0] = 0;
              v26 = -1;
              v13 = v27;
            }
            else
            {
              if (!v32
                || (v23[0] = 0,
                    v24 = -1,
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v23, (uint64_t)v30), !v32))
              {
LABEL_33:
                __break(1u);
                goto LABEL_5;
              }
              v25[0] = 0;
              v26 = -1;
              v13 = v30;
            }
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v25, (uint64_t)v13);
            WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::add((uint64_t)v16, (uint64_t *)a2, (uint64_t)v23);
            WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)v23);
            if (v29 && v28 != -1)
              ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v28])(v23, v27);
          }
          v12 = v17;
          v17 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v8);
            else
              *(_DWORD *)v12 -= 2;
          }
          v9 += 8;
        }
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v8);
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v20, v14);
      v15 = v20;
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v3);
        else
          *(_DWORD *)v15 -= 2;
      }
      if (v32 && v31 != -1)
        ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_5[v31])(v23, v30);
LABEL_30:
      v5 += 8;
    }
    while (v5 != v6);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v3);
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(unsigned int **)a1;
  if ((_DWORD)v3)
  {
    v6 = 32 * v3;
    do
    {
      v7 = v4[6];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))off_1E34B0E40[v7])(&v8, v4);
      v4[6] = -1;
      v4 += 8;
      v6 -= 32;
    }
    while (v6);
    v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

_BYTE *WTF::CrossThreadCopierBase<false,false,std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::copy<std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(_BYTE *result, uint64_t a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v3 = *(_BYTE *)(a2 + 16);
  if (v3)
  {
    WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v6, (uint64_t *)a2);
    *(_QWORD *)v2 = v6;
    v4 = v7;
    v6 = 0;
    v7 = 0;
    *((_QWORD *)v2 + 1) = v4;
    result = (_BYTE *)WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v5);
    v3 = 1;
  }
  else
  {
    *result = 0;
  }
  v2[16] = v3;
  return result;
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::makeConstIterator(uint64_t *a1, WebCore::SecurityOriginData *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::SecurityOriginData *v5[2];

  v2 = *a1;
  if (*a1)
    v3 = *(unsigned int *)(v2 - 4);
  else
    v3 = 0;
  v5[0] = a2;
  v5[1] = (WebCore::SecurityOriginData *)(v2 + (v3 << 6));
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>,WebCore::ClientOrigin,WebCore::ClientOrigin,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>>::skipEmptyBuckets(v5);
  return v5[0];
}

uint64_t WebKit::NetworkStorageManager::originStorageManager(uint64_t a1, const WebCore::ClientOrigin *a2)
{
  uint64_t v4;
  uint64_t v6[2];
  _QWORD v7[3];

  v6[0] = a1;
  v6[1] = (uint64_t)a2;
  WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::ensure<WebKit::NetworkStorageManager::originStorageManager(WebCore::ClientOrigin const&,WebKit::NetworkStorageManager::ShouldWriteOriginFile)::$_0>((uint64_t)v7, (uint64_t *)(a1 + 80), (uint64_t)a2, v6);
  v4 = *(_QWORD *)(v7[0] + 64);
  WebKit::NetworkStorageManager::writeOriginToFileIfNecessary((WebCore::SecurityOriginData **)a1, a2, 0);
  return v4;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::serviceWorkerStorageManager(WebKit::OriginStorageManager::StorageBucket *this)
{
  uint64_t v1;
  char *v2;
  _QWORD *v3;
  WTF::StringImpl *v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;

  if (*((unsigned __int8 *)this + 112) <= 1u)
  {
    result = 264;
    __break(0xC471u);
  }
  else
  {
    v2 = (char *)this + 128;
    v1 = *((_QWORD *)this + 16);
    if (!v1)
    {
      WebKit::OriginStorageManager::StorageBucket::resolvedPath(this, 0x4000, &v8);
      v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v4 = v8;
      if (v8)
        *(_DWORD *)v8 += 2;
      *v3 = v4;
      v3[1] = 0;
      v5 = *(uint64_t **)v2;
      *(_QWORD *)v2 = v3;
      if (v5)
        std::default_delete<WebKit::ServiceWorkerStorageManager>::operator()[abi:sn180100]((uint64_t)v2, v5);
      v6 = v8;
      v8 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)v6 -= 2;
      }
      return *(_QWORD *)v2;
    }
    return v1;
  }
  return result;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::resolvedPath@<X0>(WTF::StringImpl *a1@<X0>, int a2@<W1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t result;

  result = WebKit::OriginStorageManager::StorageBucket::toStorageType((uint64_t)a1, a2);
  if ((unsigned __int16)result > 0xFFu)
  {
    switch((char)result)
    {
      case 0:
      case 2:
      case 6:
        result = WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)a1, (WTF::StringImpl *)result, a3);
        break;
      case 1:
        result = (uint64_t)WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath(a1, a3);
        break;
      case 3:
        result = WebKit::OriginStorageManager::StorageBucket::resolvedIDBStoragePath((uint64_t)a1, a3);
        break;
      case 4:
        result = (uint64_t)WebKit::OriginStorageManager::StorageBucket::resolvedCacheStoragePath((unsigned __int8 *)a1, a3);
        break;
      case 5:
        result = (uint64_t)WebKit::OriginStorageManager::StorageBucket::resolvedBackgroundFetchStoragePath(a1, a3);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x196D14214);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::toStorageType(uint64_t a1, int a2)
{
  int v2;
  int v3;

  if (a2 < 0x4000)
  {
    if (a2 == 16)
    {
      v2 = 1;
      v3 = 2;
      return v3 | (v2 << 8);
    }
    if (a2 != 32)
    {
      if (a2 == 128)
      {
        v2 = 1;
        v3 = 3;
        return v3 | (v2 << 8);
      }
LABEL_16:
      v3 = 0;
      v2 = 0;
      return v3 | (v2 << 8);
    }
    v3 = 1;
LABEL_18:
    v2 = 1;
    return v3 | (v2 << 8);
  }
  if (a2 >= 0x80000)
  {
    if (a2 != 0x80000)
    {
      if (a2 == 0x100000)
      {
        v2 = 1;
        v3 = 5;
        return v3 | (v2 << 8);
      }
      goto LABEL_16;
    }
    v3 = 0;
    goto LABEL_18;
  }
  if (a2 == 0x4000)
  {
    v2 = 1;
    v3 = 6;
    return v3 | (v2 << 8);
  }
  if (a2 != 0x8000)
    goto LABEL_16;
  v2 = 1;
  v3 = 4;
  return v3 | (v2 << 8);
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(uint64_t result, uint64_t *a2)
{
  unint64_t v2;
  unsigned int v3;
  __int128 v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  char v21;
  WTF *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  _QWORD v36[6];
  _BYTE v37[56];
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[10];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  char v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD v52[12];
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  __int128 v57;
  __int128 v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *((_DWORD *)a2 + 3);
  if (v3)
  {
    v30 = a2;
    v31 = result;
    v32 = v2 + 592 * v3;
    do
    {
      WebCore::ServiceWorkerContextData::isolatedCopy();
      v4 = v33;
      *(_BYTE *)(v2 + 16) = v34;
      *(_OWORD *)v2 = v4;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v2 + 24, (uint64_t)&v35);
      WTF::URL::operator=(v2 + 56, (WTF::StringImpl *)v36);
      *(_QWORD *)(v2 + 96) = v36[5];
      WTF::URL::operator=(v2 + 104, (WTF::StringImpl *)v37);
      *(_OWORD *)(v2 + 144) = *(_OWORD *)&v37[40];
      std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerData,false>>(v2 + 160, (uint64_t)&v38);
      std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerData,false>>(v2 + 232, (uint64_t)&v39);
      std::__optional_storage_base<WebCore::ServiceWorkerData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ServiceWorkerData,false>>(v2 + 304, (uint64_t)v40);
      *(_QWORD *)(v2 + 376) = v40[9];
      v6 = v41;
      v41 = 0;
      v7 = *(unsigned int **)(v2 + 384);
      *(_QWORD *)(v2 + 384) = v6;
      if (v7)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v5);
      v8 = v42;
      v42 = 0;
      v9 = *(const void **)(v2 + 392);
      *(_QWORD *)(v2 + 392) = v8;
      if (v9)
        CFRelease(v9);
      v10 = *(unsigned int *)(v2 + 412);
      if ((_DWORD)v10)
        WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)(v2 + 400), (WTF::StringImpl *)(*(_QWORD *)(v2 + 400) + 16 * v10));
      v11 = *(WTF **)(v2 + 400);
      if (v11)
      {
        *(_QWORD *)(v2 + 400) = 0;
        *(_DWORD *)(v2 + 408) = 0;
        WTF::fastFree(v11, v5);
      }
      v12 = v43;
      v43 = 0;
      *(_QWORD *)(v2 + 400) = v12;
      LODWORD(v12) = v44;
      v44 = 0;
      *(_DWORD *)(v2 + 408) = v12;
      LODWORD(v12) = v45;
      v45 = 0;
      *(_DWORD *)(v2 + 412) = v12;
      LODWORD(v12) = v46;
      *(_BYTE *)(v2 + 420) = v47;
      *(_DWORD *)(v2 + 416) = v12;
      *(_WORD *)(v2 + 424) = v48;
      v13 = v49;
      v49 = 0;
      v14 = *(WTF::StringImpl **)(v2 + 432);
      *(_QWORD *)(v2 + 432) = v13;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v50;
      v50 = 0;
      v16 = *(WTF::StringImpl **)(v2 + 440);
      *(_QWORD *)(v2 + 440) = v15;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = v51;
      v51 = 0;
      v18 = *(WTF::StringImpl **)(v2 + 448);
      *(_QWORD *)(v2 + 448) = v17;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v5);
        else
          *(_DWORD *)v18 -= 2;
      }
      WTF::URL::operator=(v2 + 456, (WTF::StringImpl *)v52);
      *(_DWORD *)(v2 + 496) = v52[10];
      v19 = v53;
      v53 = 0;
      v20 = v55;
      v55 = 0;
      v21 = v56;
      v56 = 0;
      v22 = *(WTF **)(v2 + 504);
      *(_QWORD *)(v2 + 504) = v19;
      v23 = v54;
      v54 = 0;
      v24 = (WTF::StringImpl *)*(unsigned int *)(v2 + 512);
      *(_QWORD *)(v2 + 512) = v23;
      *(_DWORD *)(v2 + 520) = v20;
      *(_BYTE *)(v2 + 524) = v21;
      if (v22)
        WTF::RobinHoodHashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,WebCore::ServiceWorkerImportedScript>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,WebCore::ServiceWorkerImportedScript,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WebCore::ServiceWorkerImportedScript>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v22, v24);
      v25 = v57;
      v26 = v58;
      *(_BYTE *)(v2 + 560) = v59;
      *(_OWORD *)(v2 + 528) = v25;
      *(_OWORD *)(v2 + 544) = v26;
      *(_BYTE *)(v2 + 576) = v60;
      v27 = v61;
      v61 = 0;
      v28 = *(WTF::StringImpl **)(v2 + 584);
      *(_QWORD *)(v2 + 584) = v27;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v24);
        else
          *(_DWORD *)v28 -= 2;
      }
      WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)&v33, v24);
      v2 += 592;
    }
    while (v2 < v32);
    a2 = v30;
    result = v31;
    v2 = *v30;
    v3 = *((_DWORD *)v30 + 3);
  }
  *(_QWORD *)result = v2;
  v29 = *((_DWORD *)a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  *(_DWORD *)(result + 8) = v29;
  *(_DWORD *)(result + 12) = v3;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::StorageType>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::StorageType,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ClientOrigin>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ClientOrigin,void>::decode(a1, a2);
  if (!a2[64])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196D14694(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::ClientOrigin,void>::decode@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;
  _BYTE v6[24];
  int v7;
  _BYTE v8[24];
  int v9;
  _BYTE v10[24];
  int v11;
  char v12;
  _BYTE v13[24];
  int v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v13);
  if (!*a1)
    goto LABEL_23;
  if (!v15)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v13);
  if ((_DWORD)result)
  {
LABEL_23:
    *a2 = 0;
    a2[64] = 0;
    goto LABEL_17;
  }
  result = IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v10);
  if (*a1)
  {
    if (v12)
    {
      result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v10);
      if ((_DWORD)result || !*a1)
        goto LABEL_22;
      if (v15)
      {
        result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, (uint64_t)v13);
        if (v12)
        {
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, (uint64_t)v10);
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)v6);
          result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 32), (uint64_t)v8);
          a2[64] = 1;
          if (v9 != -1)
            result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v9])(&v5, v8);
          v9 = -1;
          if (v7 != -1)
            result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v7])(&v5, v6);
          goto LABEL_14;
        }
      }
    }
    goto LABEL_21;
  }
LABEL_22:
  *a2 = 0;
  a2[64] = 0;
LABEL_14:
  if (v12 && v11 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v11])(v6, v10);
LABEL_17:
  if (v15)
  {
    if (v14 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v14])(v6, v13);
  }
  return result;
}

void sub_196D14870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,int a24,int a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v30 = *(unsigned int *)(v26 + 24);
  if ((_DWORD)v30 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v30])(&a12, v26);
  *(_DWORD *)(v26 + 24) = -1;
  WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)&a13);
  if (a26 && a24 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[a24])(&a13, &a21);
  if (*(_BYTE *)(v28 - 48))
  {
    v31 = *(unsigned int *)(v27 + 24);
    if ((_DWORD)v31 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v31])(&a13, v28 - 80);
  }
  _Unwind_Resume(a1);
}

void sub_196D14954()
{
  JUMPOUT(0x196D1494CLL);
}

uint64_t WebCore::SecurityOriginData::isNull(WebCore::SecurityOriginData *this)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<WebCore::StorageType,void>::decode<IPC::Decoder>(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

uint64_t IPC::ArgumentCoder<WebCore::StorageType,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  int v1;
  uint64_t result;
  int v3;
  __int16 v4;

  v4 = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v4);
  v1 = HIBYTE(v4);
  if (!HIBYTE(v4))
    goto LABEL_7;
  result = WTF::isValidEnum<WebCore::StorageType,void>(v4);
  if (!(_DWORD)result)
  {
    v1 = 0;
LABEL_7:
    v3 = 0;
    return v1 | (v3 << 8);
  }
  if (HIBYTE(v4))
  {
    v3 = 1;
    v1 = v4;
    return v1 | (v3 << 8);
  }
  __break(1u);
  return result;
}

BOOL WTF::isValidEnum<WebCore::StorageType,void>(unsigned int a1)
{
  return a1 < 3;
}

uint64_t WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::RemoteCDMFactory *>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = *a2;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  return 1;
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = (uint64_t)WTF::VectorDestructor<true,WebCore::UserContentURLPattern>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 32 * a2), (WTF::StringImpl *)(*(_QWORD *)result + 32 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(_QWORD *)v3 = result;
      if ((WTF::StringImpl *)result != v5)
        result = (uint64_t)WTF::VectorMover<false,WebCore::UserContentURLPattern>::move(v5, (WTF::StringImpl *)((char *)v5 + 32 * v4), result);
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t *WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(BOOL)>>(unsigned int *a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = a1[3];
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  a1[3] = v4 + 1;
  return result;
}

unint64_t WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)a1[3] > a3)
  {
    v9 = a3 - v5;
    v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int *v10;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 8 * v5;
        v9 = (unsigned int **)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          result = *v9;
          *v9 = 0;
          if (result)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

void WebKit::WebChromeClient::addMessageToConsole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;

  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v13)
    v14 = v13 - 16;
  else
    v14 = 0;
  CFRetain(*(CFTypeRef *)(v14 + 8));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v14 + 376)
                                                                                                + 16))(*(_QWORD *)(v14 + 376), v14, a2, a3, a4, a5, a6, a7);
  if (v13)
    CFRelease(*(CFTypeRef *)(v13 - 8));
}

void sub_196D14E84(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (a14)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>>(WTF::Function<void ()(NSObject  {objcproto13OS_xpc_object}*)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebKit::WebPage::createDocumentLoader(WebKit::WebPage *this@<X0>, WebCore::LocalFrame *a2@<X1>, const WebCore::ResourceRequest *a3@<X2>, const WebCore::SubstituteData *a4@<X3>, uint64_t *a5@<X8>)
{
  WebCore::DocumentLoader *v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v10 = (WebCore::DocumentLoader *)WTF::fastMalloc((WTF *)0xDF0);
  v11 = MEMORY[0x19AEADFD8](v10, a3, a4);
  *a5 = v11;
  *(_BYTE *)(v11 + 3533) = *((_BYTE *)this + 2251);
  if (*(WebCore::LocalFrame **)(*((_QWORD *)a2 + 16) + 8) == a2
    || (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 112) + 696) & 0x2000000000) != 0)
  {
    if (*((_QWORD *)this + 237))
    {
      WebCore::DocumentLoader::setNavigationID(v10);
      *((_QWORD *)this + 237) = 0;
    }
    if (*((_BYTE *)this + 2016) && *(WebCore::LocalFrame **)(*((_QWORD *)a2 + 16) + 8) == a2)
    {
      *((_BYTE *)this + 2248) = *((_BYTE *)this + 2006);
      WebKit::WebsitePoliciesData::applyToDocumentLoader((uint64_t)this + 1904, (uint64_t)v10);
      if (*((_BYTE *)this + 2016))
      {
        WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebPage *)((char *)this + 1904), v12);
        *((_BYTE *)this + 2016) = 0;
      }
    }
  }
}

WebKit::WebStorageNamespaceProvider *WebKit::WebStorageNamespaceProvider::getOrCreate@<X0>(WebKit::WebStorageNamespaceProvider **a1@<X8>)
{
  WebKit::WebStorageNamespaceProvider *result;
  WebKit::WebStorageNamespaceProvider *v4;

  {
    if (WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider)
    {
      result = *(WebKit::WebStorageNamespaceProvider **)(WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider
                                                       + 8);
      if (result)
      {
        ++*((_DWORD *)result + 2);
        goto LABEL_5;
      }
    }
  }
  else
  {
    WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider = 0;
  }
  v4 = (WebKit::WebStorageNamespaceProvider *)WTF::fastMalloc((WTF *)0x38);
  result = WebKit::WebStorageNamespaceProvider::WebStorageNamespaceProvider(v4);
LABEL_5:
  *a1 = result;
  return result;
}

WebKit::WebStorageNamespaceProvider *WebKit::WebStorageNamespaceProvider::WebStorageNamespaceProvider(WebKit::WebStorageNamespaceProvider *this)
{
  uint64_t v2;
  unsigned int **v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = WebCore::StorageNamespaceProvider::StorageNamespaceProvider(this);
  *(_QWORD *)v2 = off_1E34F23B0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  v3 = (unsigned int **)(v2 + 40);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v2 + 40), (uint64_t)this);
  v5 = *v3;
  if (*v3)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  {
    v7 = (unsigned int *)WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider;
    WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider = (uint64_t)v5;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v4);
      }
    }
  }
  else
  {
    WebKit::existingStorageNameSpaceProvider(void)::storageNameSpaceProvider = (uint64_t)v5;
  }
  return this;
}

uint64_t WebKit::WebPage::updateSettingsGenerated(WebKit::WebPage *this, const WebKit::WebPreferencesStore *a2, WebCore::Settings *a3)
{
  uint64_t *v5;
  const WTF::StringImpl *v6;
  WebKit::WebPreferencesKey *BoolValueForKey;
  unint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const WTF::StringImpl *v11;
  WebKit::WebPreferencesKey *v12;
  uint64_t *v13;
  const WTF::StringImpl *v14;
  WebKit::WebPreferencesKey *v15;
  uint64_t v16;
  uint64_t *v17;
  const WTF::StringImpl *v18;
  WebKit::WebPreferencesKey *v19;
  uint64_t v20;
  uint64_t *matched;
  const WTF::StringImpl *v22;
  WebKit::WebPreferencesKey *v23;
  uint64_t v24;
  uint64_t *v25;
  const WTF::StringImpl *v26;
  WebKit::WebPreferencesKey *v27;
  uint64_t v28;
  uint64_t *v29;
  const WTF::StringImpl *v30;
  WebKit::WebPreferencesKey *v31;
  uint64_t v32;
  uint64_t *v33;
  const WTF::StringImpl *v34;
  WebKit::WebPreferencesKey *v35;
  uint64_t v36;
  uint64_t *v37;
  const WTF::StringImpl *v38;
  WebKit::WebPreferencesKey *v39;
  uint64_t v40;
  uint64_t *v41;
  const WTF::StringImpl *v42;
  WebKit::WebPreferencesKey *v43;
  uint64_t v44;
  uint64_t *v45;
  const WTF::StringImpl *v46;
  WebKit::WebPreferencesKey *v47;
  unsigned int *v48;
  int v49;
  unint64_t v50;
  uint64_t *v51;
  const WTF::StringImpl *v52;
  WebKit::WebPreferencesKey *v53;
  uint64_t v54;
  uint64_t *v55;
  const WTF::StringImpl *v56;
  WebKit::WebPreferencesKey *v57;
  uint64_t v58;
  uint64_t *v59;
  const WTF::StringImpl *v60;
  WebKit::WebPreferencesKey *v61;
  uint64_t v62;
  uint64_t *v63;
  const WTF::StringImpl *v64;
  WebKit::WebPreferencesKey *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  const WTF::StringImpl *v69;
  WebKit::WebPreferencesKey *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  const WTF::StringImpl *v74;
  WebKit::WebPreferencesKey *v75;
  uint64_t v76;
  uint64_t *v77;
  const WTF::StringImpl *v78;
  WebKit::WebPreferencesKey *v79;
  uint64_t v80;
  uint64_t *v81;
  const WTF::StringImpl *v82;
  WebKit::WebPreferencesKey *v83;
  uint64_t v84;
  uint64_t *v85;
  const WTF::StringImpl *v86;
  WebKit::WebPreferencesKey *v87;
  uint64_t v88;
  uint64_t *v89;
  const WTF::StringImpl *v90;
  WebKit::WebPreferencesKey *v91;
  uint64_t v92;
  uint64_t *v93;
  const WTF::StringImpl *v94;
  WebKit::WebPreferencesKey *v95;
  uint64_t v96;
  uint64_t *v97;
  const WTF::StringImpl *v98;
  WebKit::WebPreferencesKey *v99;
  uint64_t *v100;
  const WTF::StringImpl *v101;
  WebKit::WebPreferencesKey *v102;
  uint64_t v103;
  uint64_t *v104;
  const WTF::StringImpl *v105;
  WebKit::WebPreferencesKey *v106;
  uint64_t v107;
  uint64_t *v108;
  const WTF::StringImpl *v109;
  WebKit::WebPreferencesKey *v110;
  uint64_t *v111;
  const WTF::StringImpl *v112;
  WebKit::WebPreferencesKey *v113;
  uint64_t v114;
  uint64_t *v115;
  const WTF::StringImpl *v116;
  WebKit::WebPreferencesKey *v117;
  uint64_t v118;
  uint64_t *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  uint64_t *v122;
  const WTF::StringImpl *v123;
  WebKit::WebPreferencesKey *v124;
  uint64_t *v125;
  const WTF::StringImpl *v126;
  WebKit::WebPreferencesKey *v127;
  uint64_t v128;
  uint64_t *v129;
  WebKit::WebPreferencesKey *UInt32ValueForKey;
  uint64_t *v131;
  double DoubleValueForKey;
  WebKit::WebPreferencesKey *v133;
  uint64_t *v134;
  double v135;
  WebKit::WebPreferencesKey *v136;
  uint64_t *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  uint64_t *v140;
  const WTF::StringImpl *v141;
  WebKit::WebPreferencesKey *v142;
  uint64_t v143;
  uint64_t *v144;
  WebKit::WebPreferencesKey *v145;
  uint64_t *v146;
  const WTF::StringImpl *v147;
  WebKit::WebPreferencesKey *v148;
  uint64_t v149;
  uint64_t *v150;
  const WTF::StringImpl *v151;
  WebKit::WebPreferencesKey *v152;
  uint64_t v153;
  uint64_t *v154;
  WebKit::WebPreferencesKey *v155;
  uint64_t *v156;
  const WTF::StringImpl *v157;
  WebKit::WebPreferencesKey *v158;
  uint64_t v159;
  uint64_t *v160;
  const WTF::StringImpl *v161;
  WebKit::WebPreferencesKey *v162;
  uint64_t v163;
  uint64_t *v164;
  WebKit::WebPreferencesKey *v165;
  uint64_t *v166;
  const WTF::StringImpl *v167;
  WebKit::WebPreferencesKey *v168;
  uint64_t v169;
  uint64_t *v170;
  const WTF::StringImpl *v171;
  WebKit::WebPreferencesKey *v172;
  uint64_t v173;
  uint64_t *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  uint64_t *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  uint64_t *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  uint64_t *v183;
  const WTF::StringImpl *v184;
  WebKit::WebPreferencesKey *v185;
  uint64_t v186;
  uint64_t *v187;
  const WTF::StringImpl *v188;
  WebKit::WebPreferencesKey *v189;
  uint64_t v190;
  uint64_t *v191;
  const WTF::StringImpl *v192;
  WebKit::WebPreferencesKey *v193;
  uint64_t *v194;
  const WTF::StringImpl *v195;
  WebKit::WebPreferencesKey *v196;
  uint64_t v197;
  uint64_t *v198;
  WebKit::WebPreferencesKey *v199;
  uint64_t *v200;
  const WTF::StringImpl *v201;
  WebKit::WebPreferencesKey *v202;
  uint64_t v203;
  uint64_t *v204;
  WebKit::WebPreferencesKey *v205;
  uint64_t *v206;
  WebKit::WebPreferencesKey *v207;
  uint64_t *v208;
  const WTF::StringImpl *v209;
  WebKit::WebPreferencesKey *v210;
  uint64_t v211;
  uint64_t *v212;
  const WTF::StringImpl *v213;
  WebKit::WebPreferencesKey *v214;
  uint64_t v215;
  uint64_t *v216;
  const WTF::StringImpl *v217;
  WebKit::WebPreferencesKey *v218;
  uint64_t v219;
  uint64_t *v220;
  const WTF::StringImpl *v221;
  WebKit::WebPreferencesKey *v222;
  uint64_t v223;
  uint64_t *v224;
  const WTF::StringImpl *v225;
  WebKit::WebPreferencesKey *v226;
  uint64_t v227;
  uint64_t *v228;
  const WTF::StringImpl *v229;
  WebKit::WebPreferencesKey *v230;
  uint64_t v231;
  uint64_t *v232;
  WebKit::WebPreferencesKey *v233;
  uint64_t *v234;
  const WTF::StringImpl *v235;
  WebKit::WebPreferencesKey *v236;
  uint64_t v237;
  uint64_t *v238;
  WebKit::WebPreferencesKey *v239;
  uint64_t *v240;
  double v241;
  WebKit::WebPreferencesKey *v242;
  uint64_t *v243;
  const WTF::StringImpl *v244;
  WebKit::WebPreferencesKey *v245;
  uint64_t v246;
  uint64_t *v247;
  const WTF::StringImpl *v248;
  WebKit::WebPreferencesKey *v249;
  uint64_t v250;
  uint64_t *DeferringEnabledKey;
  const WTF::StringImpl *v252;
  WebKit::WebPreferencesKey *v253;
  uint64_t v254;
  uint64_t *v255;
  const WTF::StringImpl *v256;
  WebKit::WebPreferencesKey *v257;
  uint64_t *v258;
  WebKit::WebPreferencesKey *v259;
  uint64_t *v260;
  WebKit::WebPreferencesKey *v261;
  uint64_t *v262;
  const WTF::StringImpl *v263;
  WebKit::WebPreferencesKey *v264;
  uint64_t v265;
  uint64_t *v266;
  WebKit::WebPreferencesKey *v267;
  uint64_t *v268;
  const WTF::StringImpl *v269;
  WebKit::WebPreferencesKey *v270;
  uint64_t v271;
  uint64_t *v272;
  WTF::StringImpl *v273;
  WTF::StringImpl *v274;
  uint64_t *v275;
  const WTF::StringImpl *v276;
  WebKit::WebPreferencesKey *v277;
  uint64_t v278;
  uint64_t *v279;
  const WTF::StringImpl *v280;
  WebKit::WebPreferencesKey *v281;
  uint64_t v282;
  uint64_t *v283;
  const WTF::StringImpl *v284;
  WebKit::WebPreferencesKey *v285;
  uint64_t v286;
  uint64_t *v287;
  const WTF::StringImpl *v288;
  WebKit::WebPreferencesKey *v289;
  uint64_t v290;
  uint64_t *v291;
  WebKit::WebPreferencesKey *v292;
  uint64_t *v293;
  const WTF::StringImpl *v294;
  WebKit::WebPreferencesKey *v295;
  uint64_t v296;
  uint64_t *v297;
  const WTF::StringImpl *v298;
  WebKit::WebPreferencesKey *v299;
  uint64_t v300;
  uint64_t *v301;
  const WTF::StringImpl *v302;
  WebKit::WebPreferencesKey *v303;
  uint64_t v304;
  uint64_t *v305;
  double v306;
  WebKit::WebPreferencesKey *v307;
  uint64_t *v308;
  double v309;
  WebKit::WebPreferencesKey *v310;
  uint64_t *v311;
  WebKit::WebPreferencesKey *v312;
  uint64_t *v313;
  const WTF::StringImpl *v314;
  WebKit::WebPreferencesKey *v315;
  uint64_t v316;
  uint64_t *v317;
  const WTF::StringImpl *v318;
  WebKit::WebPreferencesKey *v319;
  uint64_t v320;
  uint64_t *v321;
  const WTF::StringImpl *v322;
  WebKit::WebPreferencesKey *v323;
  uint64_t v324;
  uint64_t *v325;
  const WTF::StringImpl *v326;
  WebKit::WebPreferencesKey *v327;
  uint64_t v328;
  uint64_t *v329;
  const WTF::StringImpl *v330;
  WebKit::WebPreferencesKey *v331;
  unsigned int *v332;
  int v333;
  unint64_t v334;
  uint64_t *v335;
  const WTF::StringImpl *v336;
  WebKit::WebPreferencesKey *v337;
  int v338;
  unint64_t v339;
  uint64_t *v340;
  const WTF::StringImpl *v341;
  WebKit::WebPreferencesKey *v342;
  uint64_t v343;
  uint64_t *v344;
  WebKit::WebPreferencesKey *v345;
  uint64_t *v346;
  const WTF::StringImpl *v347;
  WebKit::WebPreferencesKey *v348;
  uint64_t v349;
  uint64_t *v350;
  WTF::StringImpl *v351;
  WTF::StringImpl *v352;
  uint64_t *v353;
  const WTF::StringImpl *v354;
  WebKit::WebPreferencesKey *v355;
  uint64_t v356;
  uint64_t *v357;
  WebKit::WebPreferencesKey *v358;
  uint64_t *v359;
  const WTF::StringImpl *v360;
  WebKit::WebPreferencesKey *v361;
  uint64_t *v362;
  const WTF::StringImpl *v363;
  WebKit::WebPreferencesKey *v364;
  uint64_t v365;
  uint64_t *v366;
  const WTF::StringImpl *v367;
  WebKit::WebPreferencesKey *v368;
  uint64_t v369;
  uint64_t *v370;
  const WTF::StringImpl *v371;
  WebKit::WebPreferencesKey *v372;
  uint64_t v373;
  uint64_t *VideoKey;
  const WTF::StringImpl *v375;
  WebKit::WebPreferencesKey *v376;
  uint64_t v377;
  uint64_t *v378;
  WebKit::WebPreferencesKey *v379;
  uint64_t *v380;
  WebKit::WebPreferencesKey *v381;
  uint64_t *v382;
  WTF::StringImpl *v383;
  WTF::StringImpl *v384;
  uint64_t *v385;
  const WTF::StringImpl *v386;
  WebKit::WebPreferencesKey *v387;
  uint64_t v388;
  uint64_t *v389;
  WTF::StringImpl *v390;
  WTF::StringImpl *v391;
  uint64_t *v392;
  const WTF::StringImpl *v393;
  WebKit::WebPreferencesKey *ShouldAllowUserInstalledFonts;
  uint64_t *v395;
  const WTF::StringImpl *v396;
  WebKit::WebPreferencesKey *v397;
  uint64_t v398;
  uint64_t *v399;
  const WTF::StringImpl *v400;
  WebKit::WebPreferencesKey *v401;
  uint64_t v402;
  uint64_t *v403;
  const WTF::StringImpl *v404;
  WebKit::WebPreferencesKey *v405;
  uint64_t v406;
  uint64_t *v407;
  const WTF::StringImpl *v408;
  WebKit::WebPreferencesKey *v409;
  uint64_t v410;
  uint64_t *v411;
  const WTF::StringImpl *v412;
  WebKit::WebPreferencesKey *v413;
  uint64_t v414;
  uint64_t *v415;
  const WTF::StringImpl *v416;
  WebKit::WebPreferencesKey *ShouldEnableTextAutosizingBoost;
  uint64_t *v418;
  const WTF::StringImpl *v419;
  WebKit::WebPreferencesKey *v420;
  uint64_t v421;
  uint64_t *v422;
  const WTF::StringImpl *v423;
  WebKit::WebPreferencesKey *v424;
  uint64_t v425;
  uint64_t *v426;
  const WTF::StringImpl *v427;
  WebKit::WebPreferencesKey *v428;
  uint64_t v429;
  uint64_t *v430;
  const WTF::StringImpl *v431;
  WebKit::WebPreferencesKey *v432;
  uint64_t v433;
  uint64_t *v434;
  const WTF::StringImpl *v435;
  WebKit::WebPreferencesKey *v436;
  uint64_t v437;
  uint64_t *v438;
  const WTF::StringImpl *v439;
  WebKit::WebPreferencesKey *v440;
  uint64_t v441;
  uint64_t *v442;
  const WTF::StringImpl *v443;
  WebKit::WebPreferencesKey *v444;
  uint64_t v445;
  uint64_t *v446;
  const WTF::StringImpl *v447;
  WebKit::WebPreferencesKey *v448;
  uint64_t v449;
  uint64_t *v450;
  const WTF::StringImpl *v451;
  WebKit::WebPreferencesKey *v452;
  uint64_t v453;
  uint64_t *v454;
  const WTF::StringImpl *v455;
  WebKit::WebPreferencesKey *v456;
  uint64_t v457;
  uint64_t *v458;
  const WTF::StringImpl *v459;
  WebKit::WebPreferencesKey *v460;
  uint64_t v461;
  uint64_t *v462;
  const WTF::StringImpl *v463;
  WebKit::WebPreferencesKey *v464;
  uint64_t v465;
  uint64_t *v466;
  const WTF::StringImpl *v467;
  WebKit::WebPreferencesKey *v468;
  uint64_t v469;
  uint64_t *v470;
  WTF::StringImpl *v471;
  WTF::StringImpl *v472;
  uint64_t *v473;
  const WTF::StringImpl *v474;
  WebKit::WebPreferencesKey *v475;
  uint64_t v476;
  uint64_t *v477;
  WebKit::WebPreferencesKey *v478;
  uint64_t *v479;
  const WTF::StringImpl *v480;
  WebKit::WebPreferencesKey *v481;
  unsigned int *v482;
  char v483;
  unint64_t v484;
  uint64_t *v485;
  const WTF::StringImpl *v486;
  WebKit::WebPreferencesKey *v487;
  uint64_t v488;
  uint64_t *v489;
  const WTF::StringImpl *v490;
  WebKit::WebPreferencesKey *v491;
  uint64_t v492;
  uint64_t *v493;
  const WTF::StringImpl *v494;
  WebKit::WebPreferencesKey *v495;
  uint64_t *v496;
  const WTF::StringImpl *v497;
  WebKit::WebPreferencesKey *v498;
  uint64_t *v499;
  const WTF::StringImpl *v500;
  WebKit::WebPreferencesKey *v501;
  uint64_t v502;
  uint64_t *v503;
  const WTF::StringImpl *v504;
  WebKit::WebPreferencesKey *v505;
  uint64_t v506;
  uint64_t *v507;
  const WTF::StringImpl *v508;
  WebKit::WebPreferencesKey *v509;
  uint64_t v510;
  uint64_t *v511;
  const WTF::StringImpl *v512;
  WebKit::WebPreferencesKey *v513;
  uint64_t v514;
  uint64_t *v515;
  WebKit::WebPreferencesKey *v516;
  uint64_t *v517;
  const WTF::StringImpl *v518;
  WebKit::WebPreferencesKey *v519;
  uint64_t *v520;
  const WTF::StringImpl *v521;
  WebKit::WebPreferencesKey *v522;
  uint64_t v523;
  uint64_t *v524;
  const WTF::StringImpl *v525;
  WebKit::WebPreferencesKey *v526;
  uint64_t v527;
  uint64_t *v528;
  const WTF::StringImpl *v529;
  WebKit::WebPreferencesKey *v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t *v533;
  const WTF::StringImpl *v534;
  WebKit::WebPreferencesKey *v535;
  uint64_t v536;
  uint64_t *v537;
  const WTF::StringImpl *v538;
  WebKit::WebPreferencesKey *v539;
  uint64_t v540;
  uint64_t *v541;
  WebKit::WebPreferencesKey *v542;
  uint64_t *v543;
  const WTF::StringImpl *v544;
  WebKit::WebPreferencesKey *v545;
  uint64_t *v546;
  const WTF::StringImpl *v547;
  WebKit::WebPreferencesKey *v548;
  uint64_t v549;
  uint64_t *v550;
  const WTF::StringImpl *v551;
  WebKit::WebPreferencesKey *v552;
  int v553;
  unint64_t v554;
  uint64_t *v555;
  const WTF::StringImpl *v556;
  WebKit::WebPreferencesKey *v557;
  uint64_t v558;
  uint64_t *v559;
  const WTF::StringImpl *v560;
  WebKit::WebPreferencesKey *v561;
  uint64_t v562;
  uint64_t *v563;
  const WTF::StringImpl *v564;
  WebKit::WebPreferencesKey *v565;
  uint64_t v566;
  uint64_t *v567;
  const WTF::StringImpl *v568;
  WebKit::WebPreferencesKey *v569;
  uint64_t v570;
  uint64_t *v571;
  const WTF::StringImpl *v572;
  WebKit::WebPreferencesKey *v573;
  uint64_t v574;
  uint64_t *v575;
  const WTF::StringImpl *v576;
  WebKit::WebPreferencesKey *v577;
  uint64_t v578;
  uint64_t *v579;
  const WTF::StringImpl *v580;
  WebKit::WebPreferencesKey *v581;
  uint64_t v582;
  uint64_t *v583;
  const WTF::StringImpl *v584;
  WebKit::WebPreferencesKey *v585;
  uint64_t v586;
  uint64_t *v587;
  const WTF::StringImpl *v588;
  WebKit::WebPreferencesKey *v589;
  uint64_t v590;
  uint64_t *v591;
  const WTF::StringImpl *v592;
  WebKit::WebPreferencesKey *v593;
  uint64_t *v594;
  const WTF::StringImpl *v595;
  WebKit::WebPreferencesKey *v596;
  uint64_t v597;
  uint64_t *v598;
  const WTF::StringImpl *v599;
  WebKit::WebPreferencesKey *v600;
  uint64_t v601;
  uint64_t *v602;
  const WTF::StringImpl *v603;
  WebKit::WebPreferencesKey *v604;
  uint64_t v605;
  uint64_t *v606;
  const WTF::StringImpl *v607;
  WebKit::WebPreferencesKey *v608;
  uint64_t v609;
  unint64_t v610;
  uint64_t *v611;
  const WTF::StringImpl *v612;
  WebKit::WebPreferencesKey *v613;
  unint64_t v614;
  uint64_t *v615;
  const WTF::StringImpl *v616;
  WebKit::WebPreferencesKey *v617;
  uint64_t v618;
  uint64_t *v619;
  const WTF::StringImpl *v620;
  WebKit::WebPreferencesKey *v621;
  uint64_t v622;
  uint64_t *v623;
  const WTF::StringImpl *v624;
  WebKit::WebPreferencesKey *v625;
  uint64_t v626;
  uint64_t *v627;
  const WTF::StringImpl *v628;
  WebKit::WebPreferencesKey *v629;
  uint64_t v630;
  uint64_t *v631;
  const WTF::StringImpl *v632;
  WebKit::WebPreferencesKey *v633;
  uint64_t v634;
  uint64_t *v635;
  const WTF::StringImpl *v636;
  WebKit::WebPreferencesKey *v637;
  int v638;
  unint64_t v639;
  uint64_t *v640;
  const WTF::StringImpl *v641;
  WebKit::WebPreferencesKey *v642;
  uint64_t v643;
  uint64_t *v644;
  const WTF::StringImpl *v645;
  WebKit::WebPreferencesKey *v646;
  uint64_t v647;
  uint64_t *v648;
  const WTF::StringImpl *v649;
  WebKit::WebPreferencesKey *v650;
  uint64_t *v651;
  const WTF::StringImpl *v652;
  WebKit::WebPreferencesKey *v653;
  uint64_t *v654;
  const WTF::StringImpl *v655;
  WebKit::WebPreferencesKey *v656;
  uint64_t v657;
  unint64_t v658;
  uint64_t *v659;
  const WTF::StringImpl *v660;
  WebKit::WebPreferencesKey *v661;
  uint64_t v662;
  uint64_t *v663;
  const WTF::StringImpl *v664;
  WebKit::WebPreferencesKey *v665;
  uint64_t v666;
  uint64_t *v667;
  const WTF::StringImpl *v668;
  WebKit::WebPreferencesKey *v669;
  uint64_t v670;
  uint64_t *v671;
  const WTF::StringImpl *v672;
  WebKit::WebPreferencesKey *v673;
  uint64_t v674;
  uint64_t *v675;
  const WTF::StringImpl *v676;
  WebKit::WebPreferencesKey *v677;
  uint64_t v678;
  uint64_t *v679;
  const WTF::StringImpl *v680;
  WebKit::WebPreferencesKey *v681;
  uint64_t v682;
  uint64_t *v683;
  const WTF::StringImpl *v684;
  WebKit::WebPreferencesKey *v685;
  uint64_t v686;
  uint64_t *v687;
  const WTF::StringImpl *v688;
  WebKit::WebPreferencesKey *v689;
  uint64_t v690;
  uint64_t *v691;
  const WTF::StringImpl *v692;
  WebKit::WebPreferencesKey *v693;
  uint64_t v694;
  uint64_t *v695;
  const WTF::StringImpl *v696;
  WebKit::WebPreferencesKey *v697;
  uint64_t v698;
  uint64_t *v699;
  const WTF::StringImpl *v700;
  WebKit::WebPreferencesKey *v701;
  uint64_t v702;
  uint64_t *v703;
  const WTF::StringImpl *v704;
  WebKit::WebPreferencesKey *v705;
  uint64_t v706;
  uint64_t *v707;
  const WTF::StringImpl *v708;
  WebKit::WebPreferencesKey *v709;
  uint64_t v710;
  uint64_t *v711;
  const WTF::StringImpl *v712;
  WebKit::WebPreferencesKey *v713;
  uint64_t v714;
  uint64_t *v715;
  const WTF::StringImpl *v716;
  WebKit::WebPreferencesKey *v717;
  uint64_t v718;
  uint64_t *v719;
  const WTF::StringImpl *v720;
  WebKit::WebPreferencesKey *v721;
  uint64_t v722;
  uint64_t *v723;
  const WTF::StringImpl *v724;
  WebKit::WebPreferencesKey *v725;
  uint64_t v726;
  uint64_t *v727;
  const WTF::StringImpl *v728;
  WebKit::WebPreferencesKey *v729;
  uint64_t v730;
  uint64_t *v731;
  const WTF::StringImpl *v732;
  WebKit::WebPreferencesKey *v733;
  uint64_t v734;
  uint64_t *v735;
  const WTF::StringImpl *v736;
  WebKit::WebPreferencesKey *v737;
  uint64_t v738;
  uint64_t *v739;
  const WTF::StringImpl *v740;
  WebKit::WebPreferencesKey *v741;
  uint64_t v742;
  uint64_t *v743;
  const WTF::StringImpl *v744;
  WebKit::WebPreferencesKey *v745;
  uint64_t v746;
  uint64_t *v747;
  const WTF::StringImpl *v748;
  WebKit::WebPreferencesKey *v749;
  uint64_t v750;
  uint64_t *v751;
  const WTF::StringImpl *v752;
  WebKit::WebPreferencesKey *v753;
  uint64_t v754;
  uint64_t *v755;
  const WTF::StringImpl *v756;
  WebKit::WebPreferencesKey *v757;
  uint64_t v758;
  uint64_t *v759;
  const WTF::StringImpl *v760;
  WebKit::WebPreferencesKey *v761;
  uint64_t v762;
  uint64_t *v763;
  const WTF::StringImpl *v764;
  WebKit::WebPreferencesKey *v765;
  uint64_t v766;
  uint64_t *v767;
  const WTF::StringImpl *v768;
  WebKit::WebPreferencesKey *v769;
  uint64_t v770;
  uint64_t *v771;
  const WTF::StringImpl *v772;
  WebKit::WebPreferencesKey *v773;
  uint64_t v774;
  uint64_t *v775;
  const WTF::StringImpl *v776;
  WebKit::WebPreferencesKey *v777;
  uint64_t v778;
  uint64_t *v779;
  const WTF::StringImpl *v780;
  WebKit::WebPreferencesKey *v781;
  uint64_t v782;
  uint64_t *v783;
  const WTF::StringImpl *v784;
  WebKit::WebPreferencesKey *v785;
  uint64_t v786;
  uint64_t *v787;
  const WTF::StringImpl *v788;
  WebKit::WebPreferencesKey *v789;
  uint64_t v790;
  uint64_t *v791;
  const WTF::StringImpl *v792;
  WebKit::WebPreferencesKey *v793;
  uint64_t v794;
  uint64_t *v795;
  const WTF::StringImpl *v796;
  WebKit::WebPreferencesKey *v797;
  uint64_t v798;
  uint64_t *v799;
  const WTF::StringImpl *v800;
  WebKit::WebPreferencesKey *v801;
  uint64_t v802;
  uint64_t *v803;
  const WTF::StringImpl *v804;
  WebKit::WebPreferencesKey *v805;
  uint64_t v806;
  uint64_t *v807;
  const WTF::StringImpl *v808;
  WebKit::WebPreferencesKey *v809;
  uint64_t v810;
  uint64_t *v811;
  const WTF::StringImpl *v812;
  WebKit::WebPreferencesKey *v813;
  uint64_t v814;
  uint64_t *v815;
  const WTF::StringImpl *v816;
  WebKit::WebPreferencesKey *v817;
  uint64_t v818;
  uint64_t *v819;
  const WTF::StringImpl *v820;
  WebKit::WebPreferencesKey *v821;
  uint64_t v822;
  uint64_t *v823;
  const WTF::StringImpl *v824;
  WebKit::WebPreferencesKey *v825;
  uint64_t v826;
  uint64_t *v827;
  const WTF::StringImpl *v828;
  WebKit::WebPreferencesKey *v829;
  uint64_t v830;
  uint64_t *v831;
  const WTF::StringImpl *v832;
  WebKit::WebPreferencesKey *v833;
  uint64_t v834;
  uint64_t *v835;
  const WTF::StringImpl *v836;
  WebKit::WebPreferencesKey *v837;
  uint64_t v838;
  uint64_t *v839;
  const WTF::StringImpl *v840;
  WebKit::WebPreferencesKey *v841;
  uint64_t v842;
  uint64_t *v843;
  const WTF::StringImpl *v844;
  WebKit::WebPreferencesKey *v845;
  uint64_t v846;
  uint64_t *v847;
  const WTF::StringImpl *v848;
  WebKit::WebPreferencesKey *v849;
  uint64_t *v850;
  const WTF::StringImpl *v851;
  WebKit::WebPreferencesKey *v852;
  uint64_t v853;
  uint64_t *v854;
  const WTF::StringImpl *v855;
  WebKit::WebPreferencesKey *v856;
  uint64_t v857;
  uint64_t *v858;
  const WTF::StringImpl *v859;
  WebKit::WebPreferencesKey *v860;
  uint64_t v861;
  uint64_t *v862;
  const WTF::StringImpl *v863;
  WebKit::WebPreferencesKey *v864;
  uint64_t *v865;
  const WTF::StringImpl *v866;
  WebKit::WebPreferencesKey *v867;
  uint64_t v868;
  uint64_t *v869;
  const WTF::StringImpl *v870;
  WebKit::WebPreferencesKey *v871;
  uint64_t v872;
  uint64_t *v873;
  const WTF::StringImpl *v874;
  WebKit::WebPreferencesKey *v875;
  uint64_t v876;
  uint64_t *v877;
  const WTF::StringImpl *v878;
  WebKit::WebPreferencesKey *v879;
  uint64_t v880;
  uint64_t *v881;
  const WTF::StringImpl *v882;
  WebKit::WebPreferencesKey *v883;
  uint64_t v884;
  uint64_t *v885;
  const WTF::StringImpl *v886;
  WebKit::WebPreferencesKey *v887;
  uint64_t *v888;
  const WTF::StringImpl *v889;
  WebKit::WebPreferencesKey *v890;
  uint64_t *v891;
  const WTF::StringImpl *v892;
  WebKit::WebPreferencesKey *v893;
  uint64_t v894;
  uint64_t *v895;
  const WTF::StringImpl *v896;
  WebKit::WebPreferencesKey *v897;
  uint64_t v898;
  uint64_t *v899;
  const WTF::StringImpl *v900;
  WebKit::WebPreferencesKey *v901;
  uint64_t *v902;
  const WTF::StringImpl *v903;
  WebKit::WebPreferencesKey *v904;
  uint64_t v905;
  uint64_t *v906;
  const WTF::StringImpl *v907;
  WebKit::WebPreferencesKey *v908;
  uint64_t v909;
  uint64_t *v910;
  const WTF::StringImpl *v911;
  WebKit::WebPreferencesKey *v912;
  uint64_t v913;
  uint64_t *v914;
  const WTF::StringImpl *v915;
  WebKit::WebPreferencesKey *v916;
  uint64_t v917;
  uint64_t *v918;
  const WTF::StringImpl *v919;
  WebKit::WebPreferencesKey *v920;
  uint64_t v921;
  uint64_t *v922;
  const WTF::StringImpl *v923;
  WebKit::WebPreferencesKey *v924;
  uint64_t v925;
  uint64_t *v926;
  const WTF::StringImpl *v927;
  WebKit::WebPreferencesKey *v928;
  uint64_t v929;
  uint64_t *v930;
  const WTF::StringImpl *v931;
  WebKit::WebPreferencesKey *v932;
  uint64_t v933;
  uint64_t *v934;
  const WTF::StringImpl *v935;
  WebKit::WebPreferencesKey *v936;
  uint64_t v937;
  uint64_t *v938;
  const WTF::StringImpl *v939;
  WebKit::WebPreferencesKey *v940;
  uint64_t v941;
  uint64_t *v942;
  const WTF::StringImpl *v943;
  WebKit::WebPreferencesKey *v944;
  uint64_t v945;
  uint64_t *v946;
  const WTF::StringImpl *v947;
  WebKit::WebPreferencesKey *v948;
  uint64_t v949;
  uint64_t *v950;
  const WTF::StringImpl *v951;
  WebKit::WebPreferencesKey *v952;
  uint64_t v953;
  uint64_t *v954;
  const WTF::StringImpl *v955;
  WebKit::WebPreferencesKey *v956;
  uint64_t v957;
  uint64_t *v958;
  const WTF::StringImpl *v959;
  WebKit::WebPreferencesKey *v960;
  uint64_t v961;
  uint64_t *v962;
  const WTF::StringImpl *v963;
  WebKit::WebPreferencesKey *v964;
  uint64_t v965;
  uint64_t *v966;
  const WTF::StringImpl *v967;
  WebKit::WebPreferencesKey *v968;
  uint64_t v969;
  uint64_t *PaintKey;
  const WTF::StringImpl *v971;
  WebKit::WebPreferencesKey *v972;
  uint64_t v973;
  uint64_t *v974;
  const WTF::StringImpl *v975;
  WebKit::WebPreferencesKey *v976;
  uint64_t v977;
  uint64_t *v978;
  const WTF::StringImpl *v979;
  WebKit::WebPreferencesKey *v980;
  uint64_t v981;
  uint64_t *v982;
  const WTF::StringImpl *v983;
  WebKit::WebPreferencesKey *v984;
  uint64_t v985;
  uint64_t *v986;
  const WTF::StringImpl *v987;
  WebKit::WebPreferencesKey *v988;
  uint64_t v989;
  uint64_t *v990;
  const WTF::StringImpl *v991;
  WebKit::WebPreferencesKey *v992;
  uint64_t v993;
  uint64_t *v994;
  const WTF::StringImpl *v995;
  WebKit::WebPreferencesKey *v996;
  uint64_t v997;
  uint64_t *v998;
  const WTF::StringImpl *v999;
  WebKit::WebPreferencesKey *v1000;
  uint64_t v1001;
  uint64_t *v1002;
  const WTF::StringImpl *v1003;
  WebKit::WebPreferencesKey *v1004;
  uint64_t v1005;
  uint64_t *PartyWebsiteDataRemovalDisabledKey;
  const WTF::StringImpl *v1007;
  WebKit::WebPreferencesKey *v1008;
  uint64_t v1009;
  uint64_t *v1010;
  const WTF::StringImpl *v1011;
  WebKit::WebPreferencesKey *v1012;
  uint64_t v1013;
  uint64_t *v1014;
  const WTF::StringImpl *v1015;
  WebKit::WebPreferencesKey *v1016;
  uint64_t v1017;
  uint64_t *v1018;
  const WTF::StringImpl *v1019;
  WebKit::WebPreferencesKey *v1020;
  uint64_t v1021;
  uint64_t *v1022;
  const WTF::StringImpl *v1023;
  WebKit::WebPreferencesKey *v1024;
  uint64_t v1025;
  uint64_t *v1026;
  const WTF::StringImpl *v1027;
  WebKit::WebPreferencesKey *v1028;
  uint64_t v1029;
  uint64_t *v1030;
  const WTF::StringImpl *v1031;
  WebKit::WebPreferencesKey *v1032;
  uint64_t *v1033;
  const WTF::StringImpl *v1034;
  WebKit::WebPreferencesKey *v1035;
  uint64_t v1036;
  uint64_t *v1037;
  const WTF::StringImpl *v1038;
  WebKit::WebPreferencesKey *v1039;
  uint64_t *APIEnabledKey;
  const WTF::StringImpl *v1041;
  WebKit::WebPreferencesKey *v1042;
  uint64_t v1043;
  uint64_t *v1044;
  const WTF::StringImpl *v1045;
  WebKit::WebPreferencesKey *v1046;
  uint64_t v1047;
  uint64_t *v1048;
  const WTF::StringImpl *v1049;
  WebKit::WebPreferencesKey *v1050;
  uint64_t v1051;
  uint64_t *v1052;
  const WTF::StringImpl *v1053;
  WebKit::WebPreferencesKey *v1054;
  uint64_t v1055;
  uint64_t *PriorityEnabledKey;
  const WTF::StringImpl *v1057;
  WebKit::WebPreferencesKey *v1058;
  unint64_t v1059;
  uint64_t *v1060;
  const WTF::StringImpl *v1061;
  WebKit::WebPreferencesKey *v1062;
  uint64_t v1063;
  uint64_t *v1064;
  const WTF::StringImpl *v1065;
  WebKit::WebPreferencesKey *v1066;
  uint64_t *v1067;
  const WTF::StringImpl *v1068;
  WebKit::WebPreferencesKey *v1069;
  uint64_t v1070;
  uint64_t *v1071;
  const WTF::StringImpl *v1072;
  WebKit::WebPreferencesKey *v1073;
  uint64_t v1074;
  uint64_t *v1075;
  const WTF::StringImpl *v1076;
  WebKit::WebPreferencesKey *v1077;
  uint64_t v1078;
  uint64_t *v1079;
  const WTF::StringImpl *v1080;
  WebKit::WebPreferencesKey *v1081;
  uint64_t v1082;
  uint64_t *v1083;
  const WTF::StringImpl *v1084;
  WebKit::WebPreferencesKey *v1085;
  uint64_t v1086;
  uint64_t *v1087;
  const WTF::StringImpl *v1088;
  WebKit::WebPreferencesKey *v1089;
  uint64_t v1090;
  uint64_t *v1091;
  const WTF::StringImpl *v1092;
  WebKit::WebPreferencesKey *v1093;
  int v1094;
  unint64_t v1095;
  uint64_t *v1096;
  const WTF::StringImpl *v1097;
  WebKit::WebPreferencesKey *v1098;
  uint64_t v1099;
  uint64_t *v1100;
  const WTF::StringImpl *v1101;
  WebKit::WebPreferencesKey *v1102;
  uint64_t v1103;
  uint64_t *v1104;
  const WTF::StringImpl *v1105;
  WebKit::WebPreferencesKey *v1106;
  uint64_t v1107;
  uint64_t *v1108;
  const WTF::StringImpl *v1109;
  WebKit::WebPreferencesKey *v1110;
  uint64_t v1111;
  uint64_t *v1112;
  const WTF::StringImpl *v1113;
  WebKit::WebPreferencesKey *v1114;
  uint64_t *v1115;
  const WTF::StringImpl *v1116;
  WebKit::WebPreferencesKey *v1117;
  uint64_t v1118;
  uint64_t *v1119;
  const WTF::StringImpl *v1120;
  WebKit::WebPreferencesKey *v1121;
  uint64_t v1122;
  uint64_t *v1123;
  const WTF::StringImpl *v1124;
  WebKit::WebPreferencesKey *v1125;
  uint64_t v1126;
  uint64_t *v1127;
  const WTF::StringImpl *v1128;
  WebKit::WebPreferencesKey *v1129;
  uint64_t v1130;
  uint64_t *v1131;
  const WTF::StringImpl *v1132;
  WebKit::WebPreferencesKey *v1133;
  uint64_t v1134;
  uint64_t *v1135;
  const WTF::StringImpl *v1136;
  WebKit::WebPreferencesKey *v1137;
  uint64_t v1138;
  uint64_t *v1139;
  const WTF::StringImpl *v1140;
  WebKit::WebPreferencesKey *v1141;
  uint64_t v1142;
  uint64_t *v1143;
  const WTF::StringImpl *v1144;
  WebKit::WebPreferencesKey *v1145;
  uint64_t *v1146;
  const WTF::StringImpl *v1147;
  WebKit::WebPreferencesKey *v1148;
  uint64_t *v1149;
  const WTF::StringImpl *v1150;
  WebKit::WebPreferencesKey *v1151;
  uint64_t v1152;
  uint64_t *v1153;
  const WTF::StringImpl *v1154;
  WebKit::WebPreferencesKey *v1155;
  uint64_t v1156;
  uint64_t *v1157;
  const WTF::StringImpl *v1158;
  WebKit::WebPreferencesKey *v1159;
  uint64_t v1160;
  uint64_t *v1161;
  const WTF::StringImpl *v1162;
  WebKit::WebPreferencesKey *v1163;
  uint64_t *v1164;
  const WTF::StringImpl *v1165;
  WebKit::WebPreferencesKey *v1166;
  uint64_t v1167;
  uint64_t *v1168;
  const WTF::StringImpl *v1169;
  WebKit::WebPreferencesKey *v1170;
  uint64_t v1171;
  uint64_t *v1172;
  const WTF::StringImpl *v1173;
  WebKit::WebPreferencesKey *v1174;
  uint64_t v1175;
  uint64_t *v1176;
  const WTF::StringImpl *v1177;
  WebKit::WebPreferencesKey *v1178;
  uint64_t v1179;
  uint64_t *v1180;
  const WTF::StringImpl *v1181;
  WebKit::WebPreferencesKey *v1182;
  uint64_t v1183;
  uint64_t *v1184;
  const WTF::StringImpl *v1185;
  WebKit::WebPreferencesKey *v1186;
  uint64_t v1187;
  uint64_t *v1188;
  const WTF::StringImpl *v1189;
  WebKit::WebPreferencesKey *v1190;
  uint64_t *v1191;
  const WTF::StringImpl *v1192;
  WebKit::WebPreferencesKey *v1193;
  uint64_t v1194;
  uint64_t *v1195;
  const WTF::StringImpl *v1196;
  WebKit::WebPreferencesKey *v1197;
  uint64_t v1198;
  uint64_t *v1199;
  const WTF::StringImpl *v1200;
  WebKit::WebPreferencesKey *v1201;
  uint64_t *v1202;
  const WTF::StringImpl *v1203;
  WebKit::WebPreferencesKey *v1204;
  uint64_t *v1205;
  const WTF::StringImpl *v1206;
  WebKit::WebPreferencesKey *v1207;
  uint64_t v1208;
  uint64_t *v1209;
  const WTF::StringImpl *v1210;
  WebKit::WebPreferencesKey *v1211;
  uint64_t v1212;
  uint64_t *v1213;
  const WTF::StringImpl *v1214;
  WebKit::WebPreferencesKey *v1215;
  uint64_t v1216;
  uint64_t *v1217;
  const WTF::StringImpl *v1218;
  WebKit::WebPreferencesKey *v1219;
  uint64_t v1220;
  uint64_t *v1221;
  const WTF::StringImpl *v1222;
  WebKit::WebPreferencesKey *v1223;
  uint64_t v1224;
  uint64_t *v1225;
  const WTF::StringImpl *v1226;
  WebKit::WebPreferencesKey *v1227;
  uint64_t v1228;
  uint64_t *v1229;
  const WTF::StringImpl *v1230;
  WebKit::WebPreferencesKey *v1231;
  uint64_t v1232;
  uint64_t *v1233;
  const WTF::StringImpl *v1234;
  WebKit::WebPreferencesKey *v1235;
  uint64_t v1236;
  uint64_t *WebArchiveWithEphemeralStorageEnabledKey;
  const WTF::StringImpl *v1238;
  WebKit::WebPreferencesKey *v1239;
  int v1240;
  unint64_t v1241;
  uint64_t *v1242;
  const WTF::StringImpl *v1243;
  WebKit::WebPreferencesKey *v1244;
  uint64_t v1245;
  uint64_t *v1246;
  const WTF::StringImpl *v1247;
  WebKit::WebPreferencesKey *v1248;
  unint64_t v1249;
  uint64_t *v1250;
  const WTF::StringImpl *v1251;
  WebKit::WebPreferencesKey *v1252;
  uint64_t *v1253;
  const WTF::StringImpl *v1254;
  WebKit::WebPreferencesKey *v1255;
  uint64_t v1256;
  uint64_t *v1257;
  const WTF::StringImpl *v1258;
  WebKit::WebPreferencesKey *v1259;
  uint64_t v1260;
  uint64_t *v1261;
  const WTF::StringImpl *v1262;
  WebKit::WebPreferencesKey *v1263;
  uint64_t v1264;
  uint64_t *v1265;
  const WTF::StringImpl *v1266;
  WebKit::WebPreferencesKey *v1267;
  uint64_t v1268;
  uint64_t *v1269;
  const WTF::StringImpl *v1270;
  WebKit::WebPreferencesKey *v1271;
  uint64_t v1272;
  uint64_t *v1273;
  const WTF::StringImpl *v1274;
  WebKit::WebPreferencesKey *v1275;
  uint64_t *v1276;
  const WTF::StringImpl *v1277;
  WebKit::WebPreferencesKey *v1278;
  uint64_t v1279;
  uint64_t *v1280;
  const WTF::StringImpl *v1281;
  WebKit::WebPreferencesKey *v1282;
  uint64_t v1283;
  uint64_t *v1284;
  const WTF::StringImpl *v1285;
  WebKit::WebPreferencesKey *v1286;
  uint64_t v1287;
  uint64_t *v1288;
  const WTF::StringImpl *v1289;
  WebKit::WebPreferencesKey *v1290;
  uint64_t v1291;
  uint64_t *v1292;
  const WTF::StringImpl *v1293;
  WebKit::WebPreferencesKey *v1294;
  uint64_t v1295;
  uint64_t *v1296;
  const WTF::StringImpl *v1297;
  WebKit::WebPreferencesKey *v1298;
  uint64_t v1299;
  uint64_t *v1300;
  const WTF::StringImpl *v1301;
  WebKit::WebPreferencesKey *v1302;
  uint64_t v1303;
  uint64_t *v1304;
  const WTF::StringImpl *v1305;
  WebKit::WebPreferencesKey *v1306;
  uint64_t v1307;
  uint64_t *v1308;
  const WTF::StringImpl *v1309;
  WebKit::WebPreferencesKey *v1310;
  uint64_t v1311;
  uint64_t *v1312;
  const WTF::StringImpl *v1313;
  WebKit::WebPreferencesKey *v1314;
  uint64_t v1315;
  uint64_t *v1316;
  const WTF::StringImpl *v1317;
  WebKit::WebPreferencesKey *v1318;
  uint64_t v1319;
  uint64_t *v1320;
  const WTF::StringImpl *v1321;
  WebKit::WebPreferencesKey *v1322;
  uint64_t v1323;
  uint64_t *v1324;
  const WTF::StringImpl *v1325;
  WebKit::WebPreferencesKey *v1326;
  uint64_t v1327;
  uint64_t *v1328;
  const WTF::StringImpl *v1329;
  WebKit::WebPreferencesKey *v1330;
  uint64_t v1331;
  uint64_t *v1332;
  const WTF::StringImpl *v1333;
  WebKit::WebPreferencesKey *v1334;
  uint64_t v1335;
  uint64_t *v1336;
  const WTF::StringImpl *v1337;
  WebKit::WebPreferencesKey *v1338;
  uint64_t v1339;
  uint64_t *v1340;
  const WTF::StringImpl *v1341;
  WebKit::WebPreferencesKey *v1342;
  uint64_t v1343;
  uint64_t *v1344;
  const WTF::StringImpl *v1345;
  WebKit::WebPreferencesKey *v1346;
  uint64_t v1347;
  uint64_t *v1348;
  const WTF::StringImpl *v1349;
  WebKit::WebPreferencesKey *v1350;
  uint64_t v1351;
  uint64_t *v1352;
  const WTF::StringImpl *v1353;
  WebKit::WebPreferencesKey *v1354;
  uint64_t v1355;
  uint64_t *v1356;
  const WTF::StringImpl *v1357;
  WebKit::WebPreferencesKey *v1358;
  uint64_t v1359;
  uint64_t *v1360;
  const WTF::StringImpl *v1361;
  WebKit::WebPreferencesKey *v1362;
  uint64_t v1363;
  uint64_t *v1364;
  const WTF::StringImpl *v1365;
  WebKit::WebPreferencesKey *v1366;
  uint64_t v1367;
  uint64_t *v1368;
  const WTF::StringImpl *v1369;
  WebKit::WebPreferencesKey *v1370;
  uint64_t v1371;
  uint64_t *v1372;
  const WTF::StringImpl *v1373;
  WebKit::WebPreferencesKey *v1374;
  uint64_t v1375;
  uint64_t *v1376;
  const WTF::StringImpl *v1377;
  WebKit::WebPreferencesKey *v1378;
  uint64_t v1379;
  uint64_t *v1380;
  const WTF::StringImpl *v1381;
  WebKit::WebPreferencesKey *v1382;
  uint64_t v1383;
  uint64_t *v1384;
  const WTF::StringImpl *v1385;
  WebKit::WebPreferencesKey *v1386;
  uint64_t v1387;
  uint64_t *v1388;
  const WTF::StringImpl *v1389;
  WebKit::WebPreferencesKey *v1390;
  uint64_t v1391;
  uint64_t *v1392;
  const WTF::StringImpl *v1393;
  WebKit::WebPreferencesKey *v1394;
  uint64_t v1395;
  uint64_t *v1396;
  const WTF::StringImpl *v1397;
  WebKit::WebPreferencesKey *v1398;
  uint64_t v1399;
  uint64_t *v1400;
  const WTF::StringImpl *v1401;
  WebKit::WebPreferencesKey *v1402;
  uint64_t v1403;
  uint64_t *v1404;
  const WTF::StringImpl *v1405;
  WebKit::WebPreferencesKey *v1406;
  uint64_t v1407;
  uint64_t *v1408;
  const WTF::StringImpl *v1409;
  WebKit::WebPreferencesKey *v1410;
  uint64_t v1411;
  uint64_t *v1412;
  const WTF::StringImpl *v1413;
  WebKit::WebPreferencesKey *v1414;
  uint64_t v1415;
  uint64_t *v1416;
  const WTF::StringImpl *v1417;
  WebKit::WebPreferencesKey *v1418;
  int v1419;
  unint64_t v1420;
  uint64_t *v1421;
  const WTF::StringImpl *v1422;
  WebKit::WebPreferencesKey *v1423;
  uint64_t v1424;
  uint64_t *v1425;
  const WTF::StringImpl *v1426;
  WebKit::WebPreferencesKey *v1427;
  uint64_t v1428;
  uint64_t *v1429;
  const WTF::StringImpl *v1430;
  WebKit::WebPreferencesKey *v1431;
  uint64_t v1432;
  uint64_t *v1433;
  const WTF::StringImpl *v1434;
  WebKit::WebPreferencesKey *v1435;
  uint64_t v1436;
  uint64_t *v1437;
  const WTF::StringImpl *v1438;
  WebKit::WebPreferencesKey *v1439;
  uint64_t v1440;
  uint64_t *UserMediaRequiresFocusKey;
  const WTF::StringImpl *v1442;
  WebKit::WebPreferencesKey *v1443;
  uint64_t v1444;
  uint64_t *SchedulingEnabledKey;
  const WTF::StringImpl *v1446;
  WebKit::WebPreferencesKey *v1447;
  uint64_t v1448;
  uint64_t *v1449;
  const WTF::StringImpl *v1450;
  WebKit::WebPreferencesKey *v1451;
  uint64_t *v1452;
  const WTF::StringImpl *v1453;
  WebKit::WebPreferencesKey *v1454;
  uint64_t v1455;
  uint64_t *v1456;
  const WTF::StringImpl *v1457;
  WebKit::WebPreferencesKey *v1458;
  uint64_t v1459;
  uint64_t *v1460;
  const WTF::StringImpl *v1461;
  WebKit::WebPreferencesKey *v1462;
  uint64_t v1463;
  uint64_t *v1464;
  const WTF::StringImpl *v1465;
  WebKit::WebPreferencesKey *v1466;
  uint64_t v1467;
  uint64_t *v1468;
  const WTF::StringImpl *v1469;
  WebKit::WebPreferencesKey *v1470;
  uint64_t v1471;
  uint64_t *v1472;
  const WTF::StringImpl *v1473;
  WebKit::WebPreferencesKey *v1474;
  uint64_t v1475;
  uint64_t *v1476;
  const WTF::StringImpl *v1477;
  WebKit::WebPreferencesKey *v1478;
  uint64_t *v1479;
  const WTF::StringImpl *v1480;
  WebKit::WebPreferencesKey *v1481;
  uint64_t v1482;
  uint64_t *v1483;
  const WTF::StringImpl *v1484;
  WebKit::WebPreferencesKey *v1485;
  uint64_t v1486;
  uint64_t *v1487;
  const WTF::StringImpl *v1488;
  WebKit::WebPreferencesKey *v1489;
  uint64_t v1490;
  uint64_t *v1491;
  const WTF::StringImpl *v1492;
  WebKit::WebPreferencesKey *v1493;
  uint64_t v1494;
  uint64_t *v1495;
  const WTF::StringImpl *v1496;
  WebKit::WebPreferencesKey *v1497;
  uint64_t v1498;
  uint64_t *v1499;
  const WTF::StringImpl *v1500;
  WebKit::WebPreferencesKey *v1501;
  uint64_t v1502;
  uint64_t *v1503;
  const WTF::StringImpl *v1504;
  WebKit::WebPreferencesKey *v1505;
  uint64_t v1506;
  uint64_t *v1507;
  const WTF::StringImpl *v1508;
  WebKit::WebPreferencesKey *v1509;
  uint64_t *v1510;
  const WTF::StringImpl *v1511;
  WebKit::WebPreferencesKey *v1512;
  uint64_t v1513;
  uint64_t *v1514;
  const WTF::StringImpl *v1515;
  WebKit::WebPreferencesKey *v1516;
  uint64_t v1517;
  uint64_t *v1518;
  const WTF::StringImpl *v1519;
  WebKit::WebPreferencesKey *v1520;
  uint64_t v1521;
  uint64_t *v1522;
  const WTF::StringImpl *v1523;
  WebKit::WebPreferencesKey *v1524;
  uint64_t v1525;
  uint64_t *v1526;
  const WTF::StringImpl *v1527;
  WebKit::WebPreferencesKey *v1528;
  uint64_t v1529;
  uint64_t *v1530;
  const WTF::StringImpl *v1531;
  WebKit::WebPreferencesKey *v1532;
  uint64_t v1533;
  uint64_t *v1534;
  const WTF::StringImpl *v1535;
  WebKit::WebPreferencesKey *v1536;
  uint64_t v1537;
  uint64_t *v1538;
  const WTF::StringImpl *v1539;
  WebKit::WebPreferencesKey *v1540;
  uint64_t v1541;
  uint64_t *v1542;
  const WTF::StringImpl *v1543;
  WebKit::WebPreferencesKey *v1544;
  uint64_t v1545;
  uint64_t *v1546;
  const WTF::StringImpl *v1547;
  WebKit::WebPreferencesKey *v1548;
  uint64_t v1549;
  uint64_t *v1550;
  const WTF::StringImpl *v1551;
  WebKit::WebPreferencesKey *v1552;
  uint64_t v1553;
  uint64_t *v1554;
  const WTF::StringImpl *v1555;
  WebKit::WebPreferencesKey *v1556;
  uint64_t v1557;
  uint64_t *v1558;
  const WTF::StringImpl *v1559;
  WebKit::WebPreferencesKey *v1560;
  uint64_t v1561;
  uint64_t *v1562;
  const WTF::StringImpl *v1563;
  WebKit::WebPreferencesKey *v1564;
  uint64_t v1565;
  uint64_t *v1566;
  WebKit::WebPreferencesKey *v1567;
  uint64_t *v1568;
  const WTF::StringImpl *v1569;
  WebKit::WebPreferencesKey *v1570;
  uint64_t v1571;
  uint64_t *v1572;
  const WTF::StringImpl *v1573;
  WebKit::WebPreferencesKey *v1574;
  int v1575;
  unint64_t v1576;
  uint64_t *v1577;
  const WTF::StringImpl *v1578;
  WebKit::WebPreferencesKey *v1579;
  unint64_t v1580;
  uint64_t *v1581;
  const WTF::StringImpl *v1582;
  WebKit::WebPreferencesKey *v1583;
  uint64_t v1584;
  uint64_t *v1585;
  const WTF::StringImpl *v1586;
  WebKit::WebPreferencesKey *v1587;
  uint64_t v1588;
  uint64_t *v1589;
  const WTF::StringImpl *v1590;
  WebKit::WebPreferencesKey *v1591;
  uint64_t v1592;
  uint64_t *v1593;
  const WTF::StringImpl *v1594;
  WebKit::WebPreferencesKey *v1595;
  uint64_t v1596;
  uint64_t *v1597;
  const WTF::StringImpl *v1598;
  WebKit::WebPreferencesKey *v1599;
  uint64_t v1600;
  uint64_t *v1601;
  const WTF::StringImpl *v1602;
  WebKit::WebPreferencesKey *v1603;
  uint64_t v1604;
  uint64_t *v1605;
  const WTF::StringImpl *v1606;
  WebKit::WebPreferencesKey *v1607;
  uint64_t v1608;
  uint64_t *v1609;
  const WTF::StringImpl *v1610;
  WebKit::WebPreferencesKey *v1611;
  uint64_t v1612;
  uint64_t *v1613;
  const WTF::StringImpl *v1614;
  WebKit::WebPreferencesKey *v1615;
  uint64_t v1616;
  uint64_t *v1617;
  const WTF::StringImpl *v1618;
  WebKit::WebPreferencesKey *v1619;
  uint64_t *v1620;
  const WTF::StringImpl *v1621;
  WebKit::WebPreferencesKey *v1622;
  uint64_t v1623;
  uint64_t *v1624;
  const WTF::StringImpl *v1625;
  WebKit::WebPreferencesKey *v1626;
  uint64_t v1627;
  uint64_t *v1628;
  const WTF::StringImpl *v1629;
  WebKit::WebPreferencesKey *v1630;
  uint64_t v1631;
  uint64_t *v1632;
  const WTF::StringImpl *v1633;
  WebKit::WebPreferencesKey *v1634;
  uint64_t v1635;
  uint64_t *v1636;
  const WTF::StringImpl *v1637;
  WebKit::WebPreferencesKey *v1638;
  uint64_t v1639;
  uint64_t *v1640;
  const WTF::StringImpl *v1641;
  WebKit::WebPreferencesKey *v1642;
  uint64_t v1643;
  uint64_t *v1644;
  const WTF::StringImpl *v1645;
  WebKit::WebPreferencesKey *v1646;
  uint64_t *v1647;
  const WTF::StringImpl *v1648;
  WebKit::WebPreferencesKey *v1649;
  uint64_t v1650;
  uint64_t *v1651;
  const WTF::StringImpl *v1652;
  WebKit::WebPreferencesKey *v1653;
  uint64_t v1654;
  uint64_t *v1655;
  const WTF::StringImpl *v1656;
  WebKit::WebPreferencesKey *v1657;
  uint64_t v1658;
  uint64_t *v1659;
  const WTF::StringImpl *v1660;
  WebKit::WebPreferencesKey *v1661;
  uint64_t v1662;
  uint64_t *v1663;
  const WTF::StringImpl *v1664;
  WebKit::WebPreferencesKey *v1665;
  uint64_t v1666;
  uint64_t *v1667;
  const WTF::StringImpl *v1668;
  WebKit::WebPreferencesKey *v1669;
  int v1670;
  unint64_t v1671;
  uint64_t *v1672;
  const WTF::StringImpl *v1673;
  WebKit::WebPreferencesKey *v1674;
  int v1675;
  unint64_t v1676;
  uint64_t *v1677;
  const WTF::StringImpl *v1678;
  WebKit::WebPreferencesKey *v1679;
  int v1680;
  unint64_t v1681;
  uint64_t *v1682;
  const WTF::StringImpl *v1683;
  WebKit::WebPreferencesKey *v1684;
  int v1685;
  unint64_t v1686;
  uint64_t *v1687;
  const WTF::StringImpl *v1688;
  WebKit::WebPreferencesKey *v1689;
  uint64_t v1690;
  uint64_t *v1691;
  const WTF::StringImpl *v1692;
  WebKit::WebPreferencesKey *v1693;
  uint64_t v1694;
  uint64_t *v1695;
  const WTF::StringImpl *v1696;
  WebKit::WebPreferencesKey *v1697;
  uint64_t v1698;
  uint64_t *v1699;
  const WTF::StringImpl *v1700;
  WebKit::WebPreferencesKey *v1701;
  uint64_t v1702;
  uint64_t *v1703;
  const WTF::StringImpl *v1704;
  WebKit::WebPreferencesKey *v1705;
  uint64_t v1706;
  uint64_t *v1707;
  const WTF::StringImpl *v1708;
  WebKit::WebPreferencesKey *v1709;
  uint64_t v1710;
  uint64_t *v1711;
  const WTF::StringImpl *v1712;
  WebKit::WebPreferencesKey *v1713;
  int v1714;
  unint64_t v1715;
  uint64_t *v1716;
  const WTF::StringImpl *v1717;
  WebKit::WebPreferencesKey *v1718;
  int v1719;
  unint64_t v1720;
  uint64_t *v1721;
  const WTF::StringImpl *v1722;
  WebKit::WebPreferencesKey *v1723;
  int v1724;
  unint64_t v1725;
  uint64_t *v1726;
  const WTF::StringImpl *v1727;
  WebKit::WebPreferencesKey *v1728;
  int v1729;
  unint64_t v1730;
  uint64_t *v1731;
  const WTF::StringImpl *v1732;
  WebKit::WebPreferencesKey *v1733;
  uint64_t v1734;
  uint64_t *v1735;
  const WTF::StringImpl *v1736;
  WebKit::WebPreferencesKey *v1737;
  uint64_t v1738;
  uint64_t *v1739;
  const WTF::StringImpl *v1740;
  WebKit::WebPreferencesKey *v1741;
  uint64_t *v1742;
  const WTF::StringImpl *v1743;
  WebKit::WebPreferencesKey *v1744;
  uint64_t v1745;
  uint64_t *v1746;
  const WTF::StringImpl *v1747;
  WebKit::WebPreferencesKey *v1748;
  uint64_t v1749;
  uint64_t *v1750;
  const WTF::StringImpl *v1751;
  WebKit::WebPreferencesKey *v1752;
  uint64_t v1753;
  uint64_t *v1754;
  const WTF::StringImpl *v1755;
  WebKit::WebPreferencesKey *v1756;
  int v1757;
  unint64_t v1758;
  uint64_t *v1759;
  const WTF::StringImpl *v1760;
  WebKit::WebPreferencesKey *v1761;
  int v1762;
  unint64_t v1763;
  uint64_t *v1764;
  const WTF::StringImpl *v1765;
  WebKit::WebPreferencesKey *v1766;
  int v1767;
  unint64_t v1768;
  uint64_t *v1769;
  const WTF::StringImpl *v1770;
  WebKit::WebPreferencesKey *v1771;
  int v1772;
  unint64_t v1773;
  uint64_t *v1774;
  const WTF::StringImpl *v1775;
  WebKit::WebPreferencesKey *v1776;
  uint64_t v1777;
  uint64_t *v1778;
  const WTF::StringImpl *v1779;
  WebKit::WebPreferencesKey *v1780;
  int v1781;
  unint64_t v1782;
  uint64_t *v1783;
  const WTF::StringImpl *v1784;
  WebKit::WebPreferencesKey *v1785;
  int v1786;
  unint64_t v1787;
  uint64_t *v1788;
  const WTF::StringImpl *v1789;
  WebKit::WebPreferencesKey *v1790;
  int v1791;
  unint64_t v1792;
  uint64_t *v1793;
  const WTF::StringImpl *v1794;
  WebKit::WebPreferencesKey *v1795;
  int v1796;
  unint64_t v1797;
  uint64_t *v1798;
  const WTF::StringImpl *v1799;
  WebKit::WebPreferencesKey *v1800;
  int v1801;
  unint64_t v1802;
  uint64_t *v1803;
  const WTF::StringImpl *v1804;
  WebKit::WebPreferencesKey *v1805;
  int v1806;
  unint64_t v1807;
  uint64_t *v1808;
  const WTF::StringImpl *v1809;
  WebKit::WebPreferencesKey *v1810;
  int v1811;
  unint64_t v1812;
  uint64_t *v1813;
  const WTF::StringImpl *v1814;
  WebKit::WebPreferencesKey *v1815;
  uint64_t v1816;
  uint64_t *v1817;
  const WTF::StringImpl *v1818;
  WebKit::WebPreferencesKey *v1819;
  uint64_t v1820;
  uint64_t *v1821;
  const WTF::StringImpl *v1822;
  WebKit::WebPreferencesKey *v1823;
  uint64_t v1824;
  uint64_t *v1825;
  const WTF::StringImpl *v1826;
  WebKit::WebPreferencesKey *v1827;
  uint64_t v1828;
  uint64_t *v1829;
  const WTF::StringImpl *v1830;
  WebKit::WebPreferencesKey *v1831;
  unsigned int v1832;
  unint64_t v1833;
  uint64_t *v1834;
  const WTF::StringImpl *v1835;
  WebKit::WebPreferencesKey *v1836;
  int v1837;
  unint64_t v1838;
  uint64_t *PartyWebsiteDataRemovalLiveOnTestingEnabledKey;
  const WTF::StringImpl *v1840;
  WebKit::WebPreferencesKey *v1841;
  uint64_t v1842;
  uint64_t *PartyWebsiteDataRemovalReproTestingEnabledKey;
  const WTF::StringImpl *v1844;
  WebKit::WebPreferencesKey *v1845;
  uint64_t v1846;
  uint64_t *v1847;
  const WTF::StringImpl *v1848;
  WebKit::WebPreferencesKey *v1849;
  uint64_t v1850;
  uint64_t *v1851;
  const WTF::StringImpl *v1852;
  WebKit::WebPreferencesKey *v1853;
  uint64_t v1854;
  uint64_t *v1855;
  const WTF::StringImpl *v1856;
  WebKit::WebPreferencesKey *v1857;
  uint64_t v1858;
  uint64_t *v1859;
  const WTF::StringImpl *v1860;
  WebKit::WebPreferencesKey *v1861;
  uint64_t v1862;
  uint64_t *v1863;
  const WTF::StringImpl *v1864;
  WebKit::WebPreferencesKey *v1865;
  uint64_t v1866;
  uint64_t *v1867;
  const WTF::StringImpl *v1868;
  WebKit::WebPreferencesKey *v1869;
  uint64_t v1870;
  uint64_t *v1871;
  const WTF::StringImpl *v1872;
  WebKit::WebPreferencesKey *v1874;

  v5 = WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(this);
  BoolValueForKey = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v5, v6);
  v8 = (unint64_t *)((char *)a2 + 664);
  if ((_DWORD)BoolValueForKey)
    v9 = 0x200000000000000;
  else
    v9 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFDFFFFFFFFFFFFFFLL | v9;
  v10 = WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(BoolValueForKey);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v10, v11);
  v12 = (WebKit::WebPreferencesKey *)WebCore::Settings::setAcceleratedCompositingEnabled(a2);
  v13 = WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(v12);
  v15 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v13, v14);
  v16 = 32;
  if (!(_DWORD)v15)
    v16 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFFFFFFFDFLL | v16;
  v17 = WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(v15);
  v19 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v17, v18);
  v20 = 1024;
  if (!(_DWORD)v19)
    v20 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFFFFFFBFFLL | v20;
  matched = WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(v19);
  v23 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)matched, v22);
  v24 = 0x2000;
  if (!(_DWORD)v23)
    v24 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFFFFFDFFFLL | v24;
  v25 = WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(v23);
  v27 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v25, v26);
  v28 = 0x4000;
  if (!(_DWORD)v27)
    v28 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFFFFFBFFFLL | v28;
  v29 = WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(v27);
  v31 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v29, v30);
  v32 = 0x8000;
  if (!(_DWORD)v31)
    v32 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFFFFF7FFFLL | v32;
  v33 = WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(v31);
  v35 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v33, v34);
  v36 = 0x20000;
  if (!(_DWORD)v35)
    v36 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFFFFDFFFFLL | v36;
  v37 = WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(v35);
  v39 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v37, v38);
  v40 = 0x40000;
  if (!(_DWORD)v39)
    v40 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFFFFBFFFFLL | v40;
  v41 = WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(v39);
  v43 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v41, v42);
  v44 = 0x80000;
  if (!(_DWORD)v43)
    v44 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFFFF7FFFFLL | v44;
  v45 = WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(v43);
  v47 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v45, v46);
  v48 = (unsigned int *)((char *)a2 + 720);
  if ((_DWORD)v47)
    v49 = 0x800000;
  else
    v49 = 0;
  v50 = *((_DWORD *)a2 + 180) & 0xFF7FFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v48 = *((_DWORD *)a2 + 180) & 0xFF7FFFFF | v49;
  *((_BYTE *)a2 + 724) = BYTE4(v50);
  v51 = WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(v47);
  v53 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v51, v52);
  v54 = 0x400000;
  if (!(_DWORD)v53)
    v54 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFFFBFFFFFLL | v54;
  v55 = WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(v53);
  v57 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v55, v56);
  if ((_DWORD)v57)
    v58 = 0x800000;
  else
    v58 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFFF7FFFFFLL | v58;
  v59 = WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(v57);
  v61 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v59, v60);
  v62 = 0x1000000;
  if (!(_DWORD)v61)
    v62 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFFEFFFFFFLL | v62;
  v63 = WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(v61);
  v65 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v63, v64);
  if ((_DWORD)v65)
    v66 = 0x200000000;
  else
    v66 = 0;
  v67 = (*v48 | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32)) & 0xFFFFFFFDFFFFFFFFLL | v66;
  *v48 = *v48;
  *((_BYTE *)a2 + 724) = BYTE4(v67);
  v68 = WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(v65);
  v70 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v68, v69);
  v71 = 0x400000000;
  if (!(_DWORD)v70)
    v71 = 0;
  v72 = (*((unsigned int *)a2 + 180) | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32)) & 0xFFFFFFFBFFFFFFFFLL | v71;
  *v48 = *v48;
  *((_BYTE *)a2 + 724) = BYTE4(v72);
  v73 = WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(v70);
  v75 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v73, v74);
  v76 = 0x2000000;
  if (!(_DWORD)v75)
    v76 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFFDFFFFFFLL | v76;
  v77 = WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(v75);
  v79 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v77, v78);
  v80 = 0x10000000;
  if (!(_DWORD)v79)
    v80 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFFEFFFFFFFLL | v80;
  v81 = WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(v79);
  v83 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v81, v82);
  v84 = 0x20000000000;
  if (!(_DWORD)v83)
    v84 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFDFFFFFFFFFFLL | v84;
  v85 = WebKit::WebPreferencesKey::applePayEnabledKey(v83);
  v87 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v85, v86);
  v88 = 0x40000000000;
  if (!(_DWORD)v87)
    v88 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFBFFFFFFFFFFLL | v88;
  v89 = WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(v87);
  v91 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v89, v90);
  v92 = 0x100000000;
  if (!(_DWORD)v91)
    v92 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFEFFFFFFFFLL | v92;
  v93 = WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(v91);
  v95 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v93, v94);
  if ((_DWORD)v95)
    v96 = 0x200000000;
  else
    v96 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFFFDFFFFFFFFLL | v96;
  v97 = WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(v95);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v97, v98);
  v99 = (WebKit::WebPreferencesKey *)WebCore::Settings::setAuthorAndUserStylesEnabled(a2);
  v100 = WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(v99);
  v102 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v100, v101);
  v103 = 0x8000000000;
  if (!(_DWORD)v102)
    v103 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFFFF7FFFFFFFFFLL | v103;
  v104 = WebKit::WebPreferencesKey::caretBrowsingEnabledKey(v102);
  v106 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v104, v105);
  v107 = 0x4000000000000;
  if (!(_DWORD)v106)
    v107 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFFFBFFFFFFFFFFFFLL | v107;
  v108 = WebKit::WebPreferencesKey::colorFilterEnabledKey(v106);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v108, v109);
  v110 = (WebKit::WebPreferencesKey *)WebCore::Settings::setColorFilterEnabled(a2);
  v111 = WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(v110);
  v113 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v111, v112);
  v114 = 0x200000000000;
  if (!(_DWORD)v113)
    v114 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFDFFFFFFFFFFFLL | v114;
  v115 = WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(v113);
  v117 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v115, v116);
  if ((_DWORD)v117)
    v118 = 0x200000000000000;
  else
    v118 = 0;
  *((_QWORD *)a2 + 83) = *((_QWORD *)a2 + 83) & 0xFDFFFFFFFFFFFFFFLL | v118;
  v119 = WebKit::WebPreferencesKey::cursiveFontFamilyKey(v117);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v119, &v1874);
  WebCore::SettingsBase::setCursiveFontFamily();
  v121 = v1874;
  v1874 = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      v121 = (WTF::StringImpl *)WTF::StringImpl::destroy(v121, v120);
    else
      *(_DWORD *)v121 -= 2;
  }
  v122 = WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(v121);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v122, v123);
  v124 = (WebKit::WebPreferencesKey *)WebCore::Settings::setDNSPrefetchingEnabled(a2);
  v125 = WebKit::WebPreferencesKey::domPasteAllowedKey(v124);
  v127 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v125, v126);
  v128 = 0x40000000000000;
  if (!(_DWORD)v127)
    v128 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFBFFFFFFFFFFFFFLL | v128;
  v129 = WebKit::WebPreferencesKey::dataDetectorTypesKey(v127);
  UInt32ValueForKey = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v129);
  *((_BYTE *)a2 + 616) = (_BYTE)UInt32ValueForKey;
  v131 = WebKit::WebPreferencesKey::defaultFixedFontSizeKey(UInt32ValueForKey);
  DoubleValueForKey = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v131);
  v133 = (WebKit::WebPreferencesKey *)WebCore::Settings::setDefaultFixedFontSize(a2, DoubleValueForKey);
  v134 = WebKit::WebPreferencesKey::defaultFontSizeKey(v133);
  v135 = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v134);
  v136 = (WebKit::WebPreferencesKey *)WebCore::Settings::setDefaultFontSize(a2, v135);
  v137 = WebKit::WebPreferencesKey::defaultTextEncodingNameKey(v136);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v137, &v1874);
  WTF::String::operator=((WTF::StringImpl **)a2 + 43, (WTF::StringImpl *)&v1874);
  v139 = v1874;
  v1874 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
      v139 = (WTF::StringImpl *)WTF::StringImpl::destroy(v139, v138);
    else
      *(_DWORD *)v139 -= 2;
  }
  v140 = WebKit::WebPreferencesKey::developerExtrasEnabledKey(v139);
  v142 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v140, v141);
  v143 = 0x400000000000;
  if (!(_DWORD)v142)
    v143 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFBFFFFFFFFFFFLL | v143;
  v144 = WebKit::WebPreferencesKey::deviceHeightKey(v142);
  v145 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v144);
  *((_DWORD *)a2 + 90) = (_DWORD)v145;
  v146 = WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(v145);
  v148 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v146, v147);
  v149 = 0x2000000000000;
  if (!(_DWORD)v148)
    v149 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFDFFFFFFFFFFFFLL | v149;
  v150 = WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(v148);
  v152 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v150, v151);
  if ((_DWORD)v152)
    v153 = 0x4000000000000;
  else
    v153 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFBFFFFFFFFFFFFLL | v153;
  v154 = WebKit::WebPreferencesKey::deviceWidthKey(v152);
  v155 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v154);
  *((_DWORD *)a2 + 91) = (_DWORD)v155;
  v156 = WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(v155);
  v158 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v156, v157);
  if ((_DWORD)v158)
    v159 = 0x4000000000000;
  else
    v159 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFBFFFFFFFFFFFFLL | v159;
  v160 = WebKit::WebPreferencesKey::downloadAttributeEnabledKey(v158);
  v162 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v160, v161);
  v163 = 0x200000000000000;
  if (!(_DWORD)v162)
    v163 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFDFFFFFFFFFFFFFFLL | v163;
  v164 = WebKit::WebPreferencesKey::editableLinkBehaviorKey(v162);
  v165 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v164);
  *((_BYTE *)a2 + 369) = (_BYTE)v165;
  v166 = WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(v165);
  v168 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v166, v167);
  v169 = 0x1000000000000000;
  if (!(_DWORD)v168)
    v169 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xEFFFFFFFFFFFFFFFLL | v169;
  v170 = WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(v168);
  v172 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v170, v171);
  v173 = 0x20000000000000;
  if (!(_DWORD)v172)
    v173 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFDFFFFFFFFFFFFFLL | v173;
  v174 = WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(v172);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v174, &v1874);
  WTF::String::operator=((WTF::StringImpl **)a2 + 48, (WTF::StringImpl *)&v1874);
  v176 = v1874;
  v1874 = 0;
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
      v176 = (WTF::StringImpl *)WTF::StringImpl::destroy(v176, v175);
    else
      *(_DWORD *)v176 -= 2;
  }
  v177 = WebKit::WebPreferencesKey::fantasyFontFamilyKey(v176);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v177, &v1874);
  WebCore::SettingsBase::setFantasyFontFamily();
  v179 = v1874;
  v1874 = 0;
  if (v179)
  {
    if (*(_DWORD *)v179 == 2)
      v179 = (WTF::StringImpl *)WTF::StringImpl::destroy(v179, v178);
    else
      *(_DWORD *)v179 -= 2;
  }
  v180 = WebKit::WebPreferencesKey::fixedFontFamilyKey(v179);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v180, &v1874);
  WebCore::SettingsBase::setFixedFontFamily();
  v182 = v1874;
  v1874 = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
      v182 = (WTF::StringImpl *)WTF::StringImpl::destroy(v182, v181);
    else
      *(_DWORD *)v182 -= 2;
  }
  v183 = WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(v182);
  v185 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v183, v184);
  v186 = 256;
  if (!(_DWORD)v185)
    v186 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFFFFEFFLL | v186;
  v187 = WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(v185);
  v189 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v187, v188);
  if ((_DWORD)v189)
    v190 = 512;
  else
    v190 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFFFFDFFLL | v190;
  v191 = WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(v189);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v191, v192);
  v193 = (WebKit::WebPreferencesKey *)WebCore::Settings::setHiddenPageCSSAnimationSuspensionEnabled(a2);
  v194 = WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(v193);
  v196 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v194, v195);
  v197 = 0x4000000;
  if (!(_DWORD)v196)
    v197 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFBFFFFFFLL | v197;
  v198 = WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(v196);
  *((double *)a2 + 50) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v198);
  v200 = WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(v199);
  v202 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v200, v201);
  v203 = 0x10000000;
  if (!(_DWORD)v202)
    v203 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFEFFFFFFFLL | v203;
  v204 = WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(v202);
  *((double *)a2 + 51) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v204);
  v206 = WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(v205);
  *((double *)a2 + 52) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v206);
  v208 = WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(v207);
  v210 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v208, v209);
  v211 = 0x100000;
  if (!(_DWORD)v210)
    v211 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFEFFFFFLL | v211;
  v212 = WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(v210);
  v214 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v212, v213);
  v215 = 0x200000;
  if (!(_DWORD)v214)
    v215 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFDFFFFFLL | v215;
  v216 = WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(v214);
  v218 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v216, v217);
  v219 = 0x40000000;
  if (!(_DWORD)v218)
    v219 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFBFFFFFFFLL | v219;
  v220 = WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(v218);
  v222 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v220, v221);
  v223 = 0x80000000000;
  if (!(_DWORD)v222)
    v223 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFF7FFFFFFFFFFLL | v223;
  v224 = WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(v222);
  v226 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v224, v225);
  v227 = 0x100000000000;
  if (!(_DWORD)v226)
    v227 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFEFFFFFFFFFFFLL | v227;
  v228 = WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(v226);
  v230 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v228, v229);
  v231 = 0x20000000000000;
  if (!(_DWORD)v230)
    v231 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFDFFFFFFFFFFFFFLL | v231;
  v232 = WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(v230);
  v233 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v232);
  *((_DWORD *)a2 + 106) = (_DWORD)v233;
  v234 = WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(v233);
  v236 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v234, v235);
  v237 = 0x400000000000;
  if (!(_DWORD)v236)
    v237 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFBFFFFFFFFFFFLL | v237;
  v238 = WebKit::WebPreferencesKey::layoutFallbackWidthKey(v236);
  v239 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v238);
  *((_DWORD *)a2 + 107) = (_DWORD)v239;
  v240 = WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(v239);
  v241 = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v240);
  v242 = (WebKit::WebPreferencesKey *)WebCore::Settings::setLayoutViewportHeightExpansionFactor(a2, v241);
  v243 = WebKit::WebPreferencesKey::linkPreconnectKey(v242);
  v245 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v243, v244);
  v246 = 0x40000000000000;
  if (!(_DWORD)v245)
    v246 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFBFFFFFFFFFFFFFLL | v246;
  v247 = WebKit::WebPreferencesKey::linkPreloadEnabledKey(v245);
  v249 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v247, v248);
  v250 = 0x100000000000000;
  if (!(_DWORD)v249)
    v250 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFEFFFFFFFFFFFFFFLL | v250;
  DeferringEnabledKey = WebKit::WebPreferencesKey::loadDeferringEnabledKey(v249);
  v253 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)DeferringEnabledKey, v252);
  v254 = 0x1000000000000000;
  if (!(_DWORD)v253)
    v254 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xEFFFFFFFFFFFFFFFLL | v254;
  v255 = WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(v253);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v255, v256);
  v257 = (WebKit::WebPreferencesKey *)WebCore::Settings::setLoadsImagesAutomatically(a2);
  v258 = WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(v257);
  *((double *)a2 + 78) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v258);
  v260 = WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(v259);
  *((double *)a2 + 79) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v260);
  v262 = WebKit::WebPreferencesKey::mathMLEnabledKey(v261);
  v264 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v262, v263);
  if ((_DWORD)v264)
    v265 = 512;
  else
    v265 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFFDFFLL | v265;
  v266 = WebKit::WebPreferencesKey::maxParseDurationKey(v264);
  *((double *)a2 + 56) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v266);
  v268 = WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(v267);
  v270 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v268, v269);
  v271 = 32;
  if (!(_DWORD)v270)
    v271 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFFFDFLL | v271;
  v272 = WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(v270);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v272, &v1874);
  WebCore::SettingsBase::setMediaContentTypesRequiringHardwareSupport(a2, (const WTF::String *)&v1874);
  v274 = v1874;
  v1874 = 0;
  if (v274)
  {
    if (*(_DWORD *)v274 == 2)
      v274 = (WTF::StringImpl *)WTF::StringImpl::destroy(v274, v273);
    else
      *(_DWORD *)v274 -= 2;
  }
  v275 = WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(v274);
  v277 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v275, v276);
  v278 = 1024;
  if (!(_DWORD)v277)
    v278 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFFBFFLL | v278;
  v279 = WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(v277);
  v281 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v279, v280);
  v282 = 128;
  if (!(_DWORD)v281)
    v282 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFFF7FLL | v282;
  v283 = WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(v281);
  v285 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v283, v284);
  v286 = 256;
  if (!(_DWORD)v285)
    v286 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFFEFFLL | v286;
  v287 = WebKit::WebPreferencesKey::mediaEnabledKey(v285);
  v289 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v287, v288);
  v290 = 0x80000000000000;
  if (!(_DWORD)v289)
    v290 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFF7FFFFFFFFFFFFFLL | v290;
  v291 = WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(v289);
  *((double *)a2 + 59) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v291);
  v293 = WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(v292);
  v295 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v293, v294);
  v296 = 512;
  if (!(_DWORD)v295)
    v296 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFFDFFLL | v296;
  v297 = WebKit::WebPreferencesKey::mediaStreamEnabledKey(v295);
  v299 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v297, v298);
  v300 = 0x1000000;
  if (!(_DWORD)v299)
    v300 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFEFFFFFFLL | v300;
  v301 = WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(v299);
  v303 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v301, v302);
  v304 = 2048;
  if (!(_DWORD)v303)
    v304 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFF7FFLL | v304;
  v305 = WebKit::WebPreferencesKey::minimumFontSizeKey(v303);
  v306 = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v305);
  v307 = (WebKit::WebPreferencesKey *)WebCore::Settings::setMinimumFontSize(a2, v306);
  v308 = WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(v307);
  v309 = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v308);
  v310 = (WebKit::WebPreferencesKey *)WebCore::Settings::setMinimumLogicalFontSize(a2, v309);
  v311 = WebKit::WebPreferencesKey::minimumZoomFontSizeKey(v310);
  *((double *)a2 + 81) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v311);
  v313 = WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(v312);
  v315 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v313, v314);
  v316 = 4096;
  if (!(_DWORD)v315)
    v316 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFEFFFLL | v316;
  v317 = WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(v315);
  v319 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v317, v318);
  v320 = 0x8000;
  if (!(_DWORD)v319)
    v320 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFF7FFFLL | v320;
  v321 = WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(v319);
  v323 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v321, v322);
  v324 = 0x20000;
  if (!(_DWORD)v323)
    v324 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFDFFFFLL | v324;
  v325 = WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(v323);
  v327 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v325, v326);
  v328 = 0x40000;
  if (!(_DWORD)v327)
    v328 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFBFFFFLL | v328;
  v329 = WebKit::WebPreferencesKey::pdfPluginEnabledKey(v327);
  v331 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v329, v330);
  v332 = (unsigned int *)((char *)a2 + 720);
  v333 = 0x20000000;
  if (!(_DWORD)v331)
    v333 = 0;
  v334 = *((_DWORD *)a2 + 180) & 0xDFFFFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v332 = *((_DWORD *)a2 + 180) & 0xDFFFFFFF | v333;
  *((_BYTE *)a2 + 724) = BYTE4(v334);
  v335 = WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(v331);
  v337 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v335, v336);
  v338 = 0x40000000;
  if (!(_DWORD)v337)
    v338 = 0;
  v339 = *((_DWORD *)a2 + 180) & 0xBFFFFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v332 = *v332 & 0xBFFFFFFF | v338;
  *((_BYTE *)a2 + 724) = BYTE4(v339);
  v340 = WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(v337);
  v342 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v340, v341);
  v343 = 0x2000000;
  if (!(_DWORD)v342)
    v343 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFDFFFFFFLL | v343;
  v344 = WebKit::WebPreferencesKey::passwordEchoDurationKey(v342);
  *((double *)a2 + 64) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v344);
  v346 = WebKit::WebPreferencesKey::passwordEchoEnabledKey(v345);
  v348 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v346, v347);
  v349 = 0x8000000;
  if (!(_DWORD)v348)
    v349 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFF7FFFFFFLL | v349;
  v350 = WebKit::WebPreferencesKey::pictographFontFamilyKey(v348);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v350, &v1874);
  WebCore::SettingsBase::setPictographFontFamily();
  v352 = v1874;
  v1874 = 0;
  if (v352)
  {
    if (*(_DWORD *)v352 == 2)
      v352 = (WTF::StringImpl *)WTF::StringImpl::destroy(v352, v351);
    else
      *(_DWORD *)v352 -= 2;
  }
  v353 = WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(v352);
  v355 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v353, v354);
  v356 = 0x10000000000;
  if (!(_DWORD)v355)
    v356 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFEFFFFFFFFFFLL | v356;
  v357 = WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(v355);
  v358 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v357);
  *((_BYTE *)a2 + 520) = (_BYTE)v358;
  v359 = WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(v358);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v359, v360);
  v361 = (WebKit::WebPreferencesKey *)WebCore::Settings::setPunchOutWhiteBackgroundsInDarkMode(a2);
  v362 = WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(v361);
  v364 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v362, v363);
  v365 = 0x80000000000;
  if (!(_DWORD)v364)
    v365 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFF7FFFFFFFFFFLL | v365;
  v366 = WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(v364);
  v368 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v366, v367);
  v369 = 0x100000000000;
  if (!(_DWORD)v368)
    v369 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFEFFFFFFFFFFFLL | v369;
  v370 = WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(v368);
  v372 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v370, v371);
  v373 = 0x200000000000;
  if (!(_DWORD)v372)
    v373 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFDFFFFFFFFFFFLL | v373;
  VideoKey = WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(v372);
  v376 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)VideoKey, v375);
  v377 = 0x400000000000;
  if (!(_DWORD)v376)
    v377 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFBFFFFFFFFFFFLL | v377;
  v378 = WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(v376);
  *((double *)a2 + 66) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v378);
  v380 = WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(v379);
  *((double *)a2 + 67) = WebKit::WebPreferencesStore::getDoubleValueForKey(this, (WTF::StringImpl **)v380);
  v382 = WebKit::WebPreferencesKey::sansSerifFontFamilyKey(v381);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v382, &v1874);
  WebCore::SettingsBase::setSansSerifFontFamily();
  v384 = v1874;
  v1874 = 0;
  if (v384)
  {
    if (*(_DWORD *)v384 == 2)
      v384 = (WTF::StringImpl *)WTF::StringImpl::destroy(v384, v383);
    else
      *(_DWORD *)v384 -= 2;
  }
  v385 = WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(v384);
  v387 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v385, v386);
  v388 = 8;
  if (!(_DWORD)v387)
    v388 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFFFF7 | v388;
  v389 = WebKit::WebPreferencesKey::serifFontFamilyKey(v387);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v389, &v1874);
  WebCore::SettingsBase::setSerifFontFamily();
  v391 = v1874;
  v1874 = 0;
  if (v391)
  {
    if (*(_DWORD *)v391 == 2)
      v391 = (WTF::StringImpl *)WTF::StringImpl::destroy(v391, v390);
    else
      *(_DWORD *)v391 -= 2;
  }
  v392 = WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(v391);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v392, v393);
  ShouldAllowUserInstalledFonts = (WebKit::WebPreferencesKey *)WebCore::Settings::setShouldAllowUserInstalledFonts(a2);
  v395 = WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(ShouldAllowUserInstalledFonts);
  v397 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v395, v396);
  v398 = 4096;
  if (!(_DWORD)v397)
    v398 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFEFFFLL | v398;
  v399 = WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(v397);
  v401 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v399, v400);
  v402 = 0x2000;
  if (!(_DWORD)v401)
    v402 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFDFFFLL | v402;
  v403 = WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(v401);
  v405 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v403, v404);
  if ((_DWORD)v405)
    v406 = 0x4000;
  else
    v406 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFBFFFLL | v406;
  v407 = WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(v405);
  v409 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v407, v408);
  v410 = 0x400000000000000;
  if (!(_DWORD)v409)
    v410 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFBFFFFFFFFFFFFFFLL | v410;
  v411 = WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(v409);
  v413 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v411, v412);
  v414 = 0x800000000000000;
  if (!(_DWORD)v413)
    v414 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xF7FFFFFFFFFFFFFFLL | v414;
  v415 = WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(v413);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v415, v416);
  ShouldEnableTextAutosizingBoost = (WebKit::WebPreferencesKey *)WebCore::Settings::setShouldEnableTextAutosizingBoost(a2);
  v418 = WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(ShouldEnableTextAutosizingBoost);
  v420 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v418, v419);
  v421 = 0x100000;
  if (!(_DWORD)v420)
    v421 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFEFFFFFLL | v421;
  v422 = WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(v420);
  v424 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v422, v423);
  v425 = 0x400000;
  if (!(_DWORD)v424)
    v425 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFBFFFFFLL | v425;
  v426 = WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(v424);
  v428 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v426, v427);
  v429 = 0x800000;
  if (!(_DWORD)v428)
    v429 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFF7FFFFFLL | v429;
  v430 = WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(v428);
  v432 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v430, v431);
  v433 = 0x1000000;
  if (!(_DWORD)v432)
    v433 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFEFFFFFFLL | v433;
  v434 = WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(v432);
  v436 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v434, v435);
  v437 = 0x2000000;
  if (!(_DWORD)v436)
    v437 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFDFFFFFFLL | v437;
  v438 = WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(v436);
  v440 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v438, v439);
  v441 = 0x8000000;
  if (!(_DWORD)v440)
    v441 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFF7FFFFFFLL | v441;
  v442 = WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(v440);
  v444 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v442, v443);
  v445 = 0x200000000;
  if (!(_DWORD)v444)
    v445 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFDFFFFFFFFLL | v445;
  v446 = WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(v444);
  v448 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v446, v447);
  v449 = 0x400000000;
  if (!(_DWORD)v448)
    v449 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFBFFFFFFFFLL | v449;
  v450 = WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(v448);
  v452 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v450, v451);
  v453 = 0x800000000;
  if (!(_DWORD)v452)
    v453 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFF7FFFFFFFFLL | v453;
  v454 = WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(v452);
  v456 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v454, v455);
  v457 = 0x4000000000;
  if (!(_DWORD)v456)
    v457 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFBFFFFFFFFFLL | v457;
  v458 = WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(v456);
  v460 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v458, v459);
  if ((_DWORD)v460)
    v461 = 0x4000;
  else
    v461 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFBFFFLL | v461;
  v462 = WebKit::WebPreferencesKey::spatialNavigationEnabledKey(v460);
  v464 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v462, v463);
  v465 = 0x8000000000;
  if (!(_DWORD)v464)
    v465 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFF7FFFFFFFFFLL | v465;
  v466 = WebKit::WebPreferencesKey::standaloneKey(v464);
  v468 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v466, v467);
  v469 = 0x80000000000;
  if (!(_DWORD)v468)
    v469 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFF7FFFFFFFFFFLL | v469;
  v470 = WebKit::WebPreferencesKey::standardFontFamilyKey(v468);
  WebKit::WebPreferencesStore::getStringValueForKey(this, (WTF::StringImpl **)v470, &v1874);
  WebCore::SettingsBase::setStandardFontFamily();
  v472 = v1874;
  v1874 = 0;
  if (v472)
  {
    if (*(_DWORD *)v472 == 2)
      v472 = (WTF::StringImpl *)WTF::StringImpl::destroy(v472, v471);
    else
      *(_DWORD *)v472 -= 2;
  }
  v473 = WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(v472);
  v475 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v473, v474);
  v476 = 0x800000000000;
  if (!(_DWORD)v475)
    v476 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFF7FFFFFFFFFFFLL | v476;
  v477 = WebKit::WebPreferencesKey::systemLayoutDirectionKey(v475);
  v478 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v477);
  *((_BYTE *)a2 + 549) = (_DWORD)v478 != 0;
  v479 = WebKit::WebPreferencesKey::systemPreviewEnabledKey(v478);
  v481 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v479, v480);
  v482 = (unsigned int *)((char *)a2 + 720);
  v483 = *((_BYTE *)a2 + 724);
  v484 = 0xFFFFFF8000000000;
  if (!(_DWORD)v481)
    v484 = 0;
  *v482 = *((_DWORD *)a2 + 180);
  *((_BYTE *)a2 + 724) = (v484 & 0xFFFFFF80FFFFFFFFLL | ((unint64_t)(v483 & 0x7F) << 32)) >> 32;
  v485 = WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(v481);
  v487 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v485, v486);
  v488 = 0x2000000000000;
  if (!(_DWORD)v487)
    v488 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFDFFFFFFFFFFFFLL | v488;
  v489 = WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(v487);
  v491 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v489, v490);
  v492 = 0x4000000000000;
  if (!(_DWORD)v491)
    v492 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFBFFFFFFFFFFFFLL | v492;
  v493 = WebKit::WebPreferencesKey::textAreasAreResizableKey(v491);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v493, v494);
  v495 = (WebKit::WebPreferencesKey *)WebCore::Settings::setTextAreasAreResizable(a2);
  v496 = WebKit::WebPreferencesKey::textAutosizingEnabledKey(v495);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v496, v497);
  v498 = (WebKit::WebPreferencesKey *)WebCore::Settings::setTextAutosizingEnabled(a2);
  v499 = WebKit::WebPreferencesKey::textInteractionEnabledKey(v498);
  v501 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v499, v500);
  v502 = 0x10000000000000;
  if (!(_DWORD)v501)
    v502 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFEFFFFFFFFFFFFFLL | v502;
  v503 = WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(v501);
  v505 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v503, v504);
  v506 = 0x100000000000000;
  if (!(_DWORD)v505)
    v506 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFEFFFFFFFFFFFFFFLL | v506;
  v507 = WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(v505);
  v509 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v507, v508);
  v510 = 2;
  if (!(_DWORD)v509)
    v510 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFFFFDLL | v510;
  v511 = WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(v509);
  v513 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v511, v512);
  v514 = 4;
  if (!(_DWORD)v513)
    v514 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFFFFBLL | v514;
  v515 = WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(v513);
  v516 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v515);
  *((_BYTE *)a2 + 560) = (_DWORD)v516 != 0;
  v517 = WebKit::WebPreferencesKey::usesBackForwardCacheKey(v516);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v517, v518);
  v519 = (WebKit::WebPreferencesKey *)WebCore::Settings::setUsesBackForwardCache(a2);
  v520 = WebKit::WebPreferencesKey::usesEncodingDetectorKey(v519);
  v522 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v520, v521);
  v523 = 64;
  if (!(_DWORD)v522)
    v523 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFFFBFLL | v523;
  v524 = WebKit::WebPreferencesKey::vp9DecoderEnabledKey(v522);
  v526 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v524, v525);
  v527 = 0x2000000000000000;
  if (!(_DWORD)v526)
    v527 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xDFFFFFFFFFFFFFFFLL | v527;
  v528 = WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(v526);
  v530 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v528, v529);
  v531 = 0x1000000000;
  if (!(_DWORD)v530)
    v531 = 0;
  v532 = (*((unsigned int *)a2 + 180) | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32)) & 0xFFFFFFEFFFFFFFFFLL | v531;
  *v482 = *v482;
  *((_BYTE *)a2 + 724) = BYTE4(v532);
  v533 = WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(v530);
  v535 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v533, v534);
  v536 = 512;
  if (!(_DWORD)v535)
    v536 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFFDFFLL | v536;
  v537 = WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(v535);
  v539 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v537, v538);
  v540 = 0x1000000000000000;
  if (!(_DWORD)v539)
    v540 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xEFFFFFFFFFFFFFFFLL | v540;
  v541 = WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(v539);
  v542 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v541);
  *((_DWORD *)a2 + 153) = (_DWORD)v542;
  v543 = WebKit::WebPreferencesKey::visualViewportEnabledKey(v542);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v543, v544);
  v545 = (WebKit::WebPreferencesKey *)WebCore::Settings::setVisualViewportEnabled(a2);
  v546 = WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(v545);
  v548 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v546, v547);
  v549 = 0x2000;
  if (!(_DWORD)v548)
    v549 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFDFFFLL | v549;
  v550 = WebKit::WebPreferencesKey::webAudioEnabledKey(v548);
  v552 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v550, v551);
  v553 = 32;
  if (!(_DWORD)v552)
    v553 = 0;
  v554 = *((_DWORD *)a2 + 180) & 0xFFFFFFDF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFFFDF | v553;
  *((_BYTE *)a2 + 724) = BYTE4(v554);
  v555 = WebKit::WebPreferencesKey::webSecurityEnabledKey(v552);
  v557 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v555, v556);
  v558 = 0x20000000;
  if (!(_DWORD)v557)
    v558 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFDFFFFFFFLL | v558;
  v559 = WebKit::WebPreferencesKey::webSocketEnabledKey(v557);
  v561 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v559, v560);
  v562 = 0x100000000;
  if (!(_DWORD)v561)
    v562 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFEFFFFFFFFLL | v562;
  v563 = WebKit::WebPreferencesKey::windowFocusRestrictedKey(v561);
  v565 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v563, v564);
  if ((_DWORD)v565)
    v566 = 0x1000000000;
  else
    v566 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFEFFFFFFFFFLL | v566;
  v567 = WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(v565);
  v569 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v567, v568);
  v570 = 0x2000000000;
  if (!(_DWORD)v569)
    v570 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFDFFFFFFFFFLL | v570;
  v571 = WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(v569);
  v573 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v571, v572);
  v574 = 0x4000;
  if (!(_DWORD)v573)
    v574 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFFFBFFFLL | v574;
  v575 = WebKit::WebPreferencesKey::thumbAndTrackPseudoElementsEnabledKey(v573);
  v577 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v575, v576);
  v578 = 0x20000000000000;
  if (!(_DWORD)v577)
    v578 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFDFFFFFFFFFFFFFLL | v578;
  v579 = WebKit::WebPreferencesKey::selectShowPickerEnabledKey(v577);
  v581 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v579, v580);
  if ((_DWORD)v581)
    v582 = 4;
  else
    v582 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFFFFBLL | v582;
  v583 = WebKit::WebPreferencesKey::pageAtRuleSupportEnabledKey(v581);
  v585 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v583, v584);
  v586 = 0x1000000;
  if (!(_DWORD)v585)
    v586 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFEFFFFFFLL | v586;
  v587 = WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(v585);
  v589 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v587, v588);
  if ((_DWORD)v589)
    v590 = 4;
  else
    v590 = 0;
  *v8 = *v8 & 0xFFFFFFFFFFFFFFFBLL | v590;
  v591 = WebKit::WebPreferencesKey::acceleratedFiltersEnabledKey(v589);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v591, v592);
  v593 = (WebKit::WebPreferencesKey *)WebCore::Settings::setAcceleratedFiltersEnabled(a2);
  v594 = WebKit::WebPreferencesKey::accessHandleEnabledKey(v593);
  v596 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v594, v595);
  v597 = 256;
  if (!(_DWORD)v596)
    v597 = 0;
  *v8 = *v8 & 0xFFFFFFFFFFFFFEFFLL | v597;
  v598 = WebKit::WebPreferencesKey::domTestingAPIsEnabledKey(v596);
  v600 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v598, v599);
  v601 = 0x80000000000000;
  if (!(_DWORD)v600)
    v601 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFF7FFFFFFFFFFFFFLL | v601;
  v602 = WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(v600);
  v604 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v602, v603);
  v605 = 0x10000;
  if (!(_DWORD)v604)
    v605 = 0;
  *v8 = *v8 & 0xFFFFFFFFFFFEFFFFLL | v605;
  v606 = WebKit::WebPreferencesKey::allowViewportShrinkToFitContentKey(v604);
  v608 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v606, v607);
  if ((_DWORD)v608)
    v609 = 0x100000000;
  else
    v609 = 0;
  v610 = (*v482 | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32)) & 0xFFFFFFFEFFFFFFFFLL | v609;
  *v482 = *v482;
  *((_BYTE *)a2 + 724) = BYTE4(v610);
  v611 = WebKit::WebPreferencesKey::allowWebGLInWorkersKey(v608);
  v613 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v611, v612);
  v614 = 0x8000000000000000;
  if (!(_DWORD)v613)
    v614 = 0;
  *((_QWORD *)a2 + 89) = v614 & 0x8000000000000000 | *((_QWORD *)a2 + 89) & 0x7FFFFFFFFFFFFFFFLL;
  v615 = WebKit::WebPreferencesKey::perElementSpeakerSelectionEnabledKey(v613);
  v617 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v615, v616);
  v618 = 0x10000000;
  if (!(_DWORD)v617)
    v618 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFEFFFFFFFLL | v618;
  v619 = WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(v617);
  v621 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v619, v620);
  v622 = 0x20000;
  if (!(_DWORD)v621)
    v622 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFDFFFFLL | v622;
  v623 = WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(v621);
  v625 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v623, v624);
  v626 = 0x100000;
  if (!(_DWORD)v625)
    v626 = 0;
  *v8 = *v8 & 0xFFFFFFFFFFEFFFFFLL | v626;
  v627 = WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(v625);
  v629 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v627, v628);
  v630 = 0x200000;
  if (!(_DWORD)v629)
    v630 = 0;
  *v8 = *v8 & 0xFFFFFFFFFFDFFFFFLL | v630;
  v631 = WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(v629);
  v633 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v631, v632);
  v634 = 0x10000000000;
  if (!(_DWORD)v633)
    v634 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFEFFFFFFFFFFLL | v634;
  v635 = WebKit::WebPreferencesKey::alwaysAllowLocalWebarchiveKey(v633);
  v637 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v635, v636);
  if ((_DWORD)v637)
    v638 = 2;
  else
    v638 = 0;
  v639 = *v482 & 0xFFFFFFFD | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFFFFD | v638;
  *((_BYTE *)a2 + 724) = BYTE4(v639);
  v640 = WebKit::WebPreferencesKey::appBadgeEnabledKey(v637);
  v642 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v640, v641);
  v643 = 0x8000000;
  if (!(_DWORD)v642)
    v643 = 0;
  *v8 = *v8 & 0xFFFFFFFFF7FFFFFFLL | v643;
  v644 = WebKit::WebPreferencesKey::appHighlightsEnabledKey(v642);
  v646 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v644, v645);
  v647 = 0x80000000000;
  if (!(_DWORD)v646)
    v647 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFF7FFFFFFFFFFLL | v647;
  v648 = WebKit::WebPreferencesKey::asyncFrameScrollingEnabledKey(v646);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v648, v649);
  v650 = (WebKit::WebPreferencesKey *)WebCore::Settings::setAsyncFrameScrollingEnabled(a2);
  v651 = WebKit::WebPreferencesKey::asyncOverflowScrollingEnabledKey(v650);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v651, v652);
  v653 = (WebKit::WebPreferencesKey *)WebCore::Settings::setAsyncOverflowScrollingEnabled(a2);
  v654 = WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(v653);
  v656 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v654, v655);
  v657 = 0x800000000;
  if (!(_DWORD)v656)
    v657 = 0;
  v658 = (*((unsigned int *)a2 + 180) | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32)) & 0xFFFFFFF7FFFFFFFFLL | v657;
  *v482 = *v482;
  *((_BYTE *)a2 + 724) = BYTE4(v658);
  v659 = WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(v656);
  v661 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v659, v660);
  if ((_DWORD)v661)
    v662 = 0x20000000;
  else
    v662 = 0;
  *v8 = *v8 & 0xFFFFFFFFDFFFFFFFLL | v662;
  v663 = WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(v661);
  v665 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v663, v664);
  v666 = 0x100000000000;
  if (!(_DWORD)v665)
    v666 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFEFFFFFFFFFFFLL | v666;
  v667 = WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(v665);
  v669 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v667, v668);
  if ((_DWORD)v669)
    v670 = 0x20000000000000;
  else
    v670 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFDFFFFFFFFFFFFFLL | v670;
  v671 = WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(v669);
  v673 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v671, v672);
  if ((_DWORD)v673)
    v674 = 0x10000000000000;
  else
    v674 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFEFFFFFFFFFFFFFLL | v674;
  v675 = WebKit::WebPreferencesKey::domAudioSessionEnabledKey(v673);
  v677 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v675, v676);
  v678 = 0x8000000000000;
  if (!(_DWORD)v677)
    v678 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFF7FFFFFFFFFFFFLL | v678;
  v679 = WebKit::WebPreferencesKey::domAudioSessionFullEnabledKey(v677);
  v681 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v679, v680);
  if ((_DWORD)v681)
    v682 = 0x10000000000000;
  else
    v682 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFEFFFFFFFFFFFFFLL | v682;
  v683 = WebKit::WebPreferencesKey::automaticallyAdjustsViewScaleUsingMinimumEffectiveDeviceWidthKey(v681);
  v685 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v683, v684);
  if ((_DWORD)v685)
    v686 = 0x800000000;
  else
    v686 = 0;
  *v8 = *v8 & 0xFFFFFFF7FFFFFFFFLL | v686;
  v687 = WebKit::WebPreferencesKey::beaconAPIEnabledKey(v685);
  v689 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v687, v688);
  if ((_DWORD)v689)
    v690 = 0x10000000000;
  else
    v690 = 0;
  *v8 = *v8 & 0xFFFFFEFFFFFFFFFFLL | v690;
  v691 = WebKit::WebPreferencesKey::broadcastChannelEnabledKey(v689);
  v693 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v691, v692);
  v694 = 0x40000000000;
  if (!(_DWORD)v693)
    v694 = 0;
  *v8 = *v8 & 0xFFFFFBFFFFFFFFFFLL | v694;
  v695 = WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(v693);
  v697 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v695, v696);
  if ((_DWORD)v697)
    v698 = 0x80000000000;
  else
    v698 = 0;
  *v8 = *v8 & 0xFFFFF7FFFFFFFFFFLL | v698;
  v699 = WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(v697);
  v701 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v699, v700);
  v702 = 16;
  if (!(_DWORD)v701)
    v702 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFFFEFLL | v702;
  v703 = WebKit::WebPreferencesKey::cssCounterStyleAtRuleImageSymbolsEnabledKey(v701);
  v705 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v703, v704);
  v706 = 256;
  if (!(_DWORD)v705)
    v706 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFFEFFLL | v706;
  v707 = WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(v705);
  v709 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v707, v708);
  v710 = 512;
  if (!(_DWORD)v709)
    v710 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFFDFFLL | v710;
  v711 = WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(v709);
  v713 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v711, v712);
  v714 = 4096;
  if (!(_DWORD)v713)
    v714 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFEFFFLL | v714;
  v715 = WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(v713);
  v717 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v715, v716);
  v718 = 0x4000000;
  if (!(_DWORD)v717)
    v718 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFBFFFFFFLL | v718;
  v719 = WebKit::WebPreferencesKey::accentColorEnabledKey(v717);
  v721 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v719, v720);
  v722 = 128;
  if (!(_DWORD)v721)
    v722 = 0;
  *v8 = *v8 & 0xFFFFFFFFFFFFFF7FLL | v722;
  v723 = WebKit::WebPreferencesKey::cssAnchorPositioningEnabledKey(v721);
  v725 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v723, v724);
  v726 = 32;
  if (!(_DWORD)v725)
    v726 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFFFDFLL | v726;
  v727 = WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(v725);
  v729 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v727, v728);
  if ((_DWORD)v729)
    v730 = 128;
  else
    v730 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFFF7FLL | v730;
  v731 = WebKit::WebPreferencesKey::cssInputSecurityEnabledKey(v729);
  v733 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v731, v732);
  v734 = 0x4000;
  if (!(_DWORD)v733)
    v734 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFBFFFLL | v734;
  v735 = WebKit::WebPreferencesKey::masonryEnabledKey(v733);
  v737 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v735, v736);
  if ((_DWORD)v737)
    v738 = 16;
  else
    v738 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFFFEFLL | v738;
  v739 = WebKit::WebPreferencesKey::cssMotionPathEnabledKey(v737);
  v741 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v739, v740);
  v742 = 0x20000;
  if (!(_DWORD)v741)
    v742 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFDFFFFLL | v742;
  v743 = WebKit::WebPreferencesKey::cssNestingEnabledKey(v741);
  v745 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v743, v744);
  v746 = 0x40000;
  if (!(_DWORD)v745)
    v746 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFBFFFFLL | v746;
  v747 = WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(v745);
  v749 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v747, v748);
  v750 = 0x800000;
  if (!(_DWORD)v749)
    v750 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFF7FFFFFLL | v750;
  v751 = WebKit::WebPreferencesKey::cssPaintingAPIEnabledKey(v749);
  v753 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v751, v752);
  v754 = 0x80000;
  if (!(_DWORD)v753)
    v754 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFF7FFFFLL | v754;
  v755 = WebKit::WebPreferencesKey::cssRhythmicSizingEnabledKey(v753);
  v757 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v755, v756);
  v758 = 0x100000;
  if (!(_DWORD)v757)
    v758 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFEFFFFFLL | v758;
  v759 = WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(v757);
  v761 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v759, v760);
  v762 = 0x200000;
  if (!(_DWORD)v761)
    v762 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFDFFFFFLL | v762;
  v763 = WebKit::WebPreferencesKey::cssScrollAnchoringEnabledKey(v761);
  v765 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v763, v764);
  v766 = 0x400000;
  if (!(_DWORD)v765)
    v766 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFBFFFFFLL | v766;
  v767 = WebKit::WebPreferencesKey::springTimingFunctionEnabledKey(v765);
  v769 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v767, v768);
  if ((_DWORD)v769)
    v770 = 0x40000000000;
  else
    v770 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFBFFFFFFFFFFLL | v770;
  v771 = WebKit::WebPreferencesKey::cssTypedOMColorEnabledKey(v769);
  v773 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v771, v772);
  if ((_DWORD)v773)
    v774 = 0x800000000;
  else
    v774 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFF7FFFFFFFFLL | v774;
  v775 = WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(v773);
  v777 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v775, v776);
  v778 = 0x1000000000;
  if (!(_DWORD)v777)
    v778 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFEFFFFFFFFFLL | v778;
  v779 = WebKit::WebPreferencesKey::cssColorContrastEnabledKey(v777);
  v781 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v779, v780);
  v782 = 64;
  if (!(_DWORD)v781)
    v782 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFFFBFLL | v782;
  v783 = WebKit::WebPreferencesKey::cssDPropertyEnabledKey(v781);
  v785 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v783, v784);
  v786 = 1024;
  if (!(_DWORD)v785)
    v786 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFFBFFLL | v786;
  v787 = WebKit::WebPreferencesKey::cssFieldSizingEnabledKey(v785);
  v789 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v787, v788);
  v790 = 2048;
  if (!(_DWORD)v789)
    v790 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFF7FFLL | v790;
  v791 = WebKit::WebPreferencesKey::cssFontVariantEmojiEnabledKey(v789);
  v793 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v791, v792);
  v794 = 0x2000;
  if (!(_DWORD)v793)
    v794 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFDFFFLL | v794;
  v795 = WebKit::WebPreferencesKey::cssLightDarkEnabledKey(v793);
  v797 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v795, v796);
  v798 = 0x8000;
  if (!(_DWORD)v797)
    v798 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFF7FFFLL | v798;
  v799 = WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(v797);
  v801 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v799, v800);
  v802 = 0x10000;
  if (!(_DWORD)v801)
    v802 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFEFFFFLL | v802;
  v803 = WebKit::WebPreferencesKey::cssScrollbarColorEnabledKey(v801);
  v805 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v803, v804);
  if ((_DWORD)v805)
    v806 = 0x800000;
  else
    v806 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFF7FFFFFLL | v806;
  v807 = WebKit::WebPreferencesKey::cssScrollbarGutterEnabledKey(v805);
  v809 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v807, v808);
  v810 = 0x1000000;
  if (!(_DWORD)v809)
    v810 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFEFFFFFFLL | v810;
  v811 = WebKit::WebPreferencesKey::cssScrollbarWidthEnabledKey(v809);
  v813 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v811, v812);
  v814 = 0x2000000;
  if (!(_DWORD)v813)
    v814 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFDFFFFFFLL | v814;
  v815 = WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(v813);
  v817 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v815, v816);
  v818 = 0x8000000;
  if (!(_DWORD)v817)
    v818 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFF7FFFFFFLL | v818;
  v819 = WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(v817);
  v821 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v819, v820);
  v822 = 0x10000000;
  if (!(_DWORD)v821)
    v822 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFEFFFFFFFLL | v822;
  v823 = WebKit::WebPreferencesKey::cssTextGroupAlignEnabledKey(v821);
  v825 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v823, v824);
  v826 = 0x20000000;
  if (!(_DWORD)v825)
    v826 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFDFFFFFFFLL | v826;
  v827 = WebKit::WebPreferencesKey::cssTextJustifyEnabledKey(v825);
  v829 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v827, v828);
  v830 = 0x40000000;
  if (!(_DWORD)v829)
    v830 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFBFFFFFFFLL | v830;
  v831 = WebKit::WebPreferencesKey::cssTextSpacingEnabledKey(v829);
  v833 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v831, v832);
  v834 = 0x80000000;
  if (!(_DWORD)v833)
    v834 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFF7FFFFFFFLL | v834;
  v835 = WebKit::WebPreferencesKey::cssTextUnderlinePositionLeftRightEnabledKey(v833);
  v837 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v835, v836);
  v838 = 0x100000000;
  if (!(_DWORD)v837)
    v838 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFEFFFFFFFFLL | v838;
  v839 = WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(v837);
  v841 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v839, v840);
  v842 = 0x400000000;
  if (!(_DWORD)v841)
    v842 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFBFFFFFFFFLL | v842;
  v843 = WebKit::WebPreferencesKey::cssTextWrapPrettyEnabledKey(v841);
  v845 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v843, v844);
  v846 = 0x200000000;
  if (!(_DWORD)v845)
    v846 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFDFFFFFFFFLL | v846;
  v847 = WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(v845);
  v849 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v847, v848);
  *v8 = *v8 & 0xFFFFFFFFFFFFFFFELL | v849;
  v850 = WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(v849);
  v852 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v850, v851);
  if ((_DWORD)v852)
    v853 = 2;
  else
    v853 = 0;
  *v8 = *v8 & 0xFFFFFFFFFFFFFFFDLL | v853;
  v854 = WebKit::WebPreferencesKey::cacheAPIEnabledKey(v852);
  v856 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v854, v855);
  v857 = 0x100000000000;
  if (!(_DWORD)v856)
    v857 = 0;
  *v8 = *v8 & 0xFFFFEFFFFFFFFFFFLL | v857;
  v858 = WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(v856);
  v860 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v858, v859);
  v861 = 0x200000000000;
  if (!(_DWORD)v860)
    v861 = 0;
  *v8 = *v8 & 0xFFFFDFFFFFFFFFFFLL | v861;
  v862 = WebKit::WebPreferencesKey::canvasFiltersEnabledKey(v860);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v862, v863);
  v864 = (WebKit::WebPreferencesKey *)WebCore::Settings::setCanvasFiltersEnabled(a2);
  v865 = WebKit::WebPreferencesKey::canvasLayersEnabledKey(v864);
  v867 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v865, v866);
  v868 = 0x1000000000000;
  if (!(_DWORD)v867)
    v868 = 0;
  *v8 = *v8 & 0xFFFEFFFFFFFFFFFFLL | v868;
  v869 = WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(v867);
  v871 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v869, v870);
  if ((_DWORD)v871)
    v872 = 0x2000000000000;
  else
    v872 = 0;
  *v8 = *v8 & 0xFFFDFFFFFFFFFFFFLL | v872;
  v873 = WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(v871);
  v875 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v873, v874);
  v876 = 0x8000000000000;
  if (!(_DWORD)v875)
    v876 = 0;
  *v8 = *v8 & 0xFFF7FFFFFFFFFFFFLL | v876;
  v877 = WebKit::WebPreferencesKey::clientBadgeEnabledKey(v875);
  v879 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v877, v878);
  if ((_DWORD)v879)
    v880 = 0x10000000000000;
  else
    v880 = 0;
  *v8 = *v8 & 0xFFEFFFFFFFFFFFFFLL | v880;
  v881 = WebKit::WebPreferencesKey::inputTypeColorEnabledKey(v879);
  v883 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v881, v882);
  if ((_DWORD)v883)
    v884 = 4;
  else
    v884 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFFFFBLL | v884;
  v885 = WebKit::WebPreferencesKey::compositingBordersVisibleKey(v883);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v885, v886);
  v887 = (WebKit::WebPreferencesKey *)WebCore::Settings::setShowDebugBorders(a2);
  v888 = WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(v887);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v888, v889);
  v890 = (WebKit::WebPreferencesKey *)WebCore::Settings::setShowRepaintCounter(a2);
  v891 = WebKit::WebPreferencesKey::compressionStreamEnabledKey(v890);
  v893 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v891, v892);
  v894 = 0x80000000000000;
  if (!(_DWORD)v893)
    v894 = 0;
  *v8 = *v8 & 0xFF7FFFFFFFFFFFFFLL | v894;
  v895 = WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(v893);
  v897 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v895, v896);
  if ((_DWORD)v897)
    v898 = 0x100000000000000;
  else
    v898 = 0;
  *v8 = *v8 & 0xFEFFFFFFFFFFFFFFLL | v898;
  v899 = WebKit::WebPreferencesKey::sampleBufferContentKeySessionSupportEnabledKey(v897);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v899, v900);
  v901 = (WebKit::WebPreferencesKey *)WebCore::Settings::setSampleBufferContentKeySessionSupportEnabled(a2);
  v902 = WebKit::WebPreferencesKey::cookieConsentAPIEnabledKey(v901);
  v904 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v902, v903);
  v905 = 0x400000000000000;
  if (!(_DWORD)v904)
    v905 = 0;
  *v8 = *v8 & 0xFBFFFFFFFFFFFFFFLL | v905;
  v906 = WebKit::WebPreferencesKey::cookieStoreAPIExtendedAttributesEnabledKey(v904);
  v908 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v906, v907);
  v909 = 0x2000000000000000;
  if (!(_DWORD)v908)
    v909 = 0;
  *v8 = *v8 & 0xDFFFFFFFFFFFFFFFLL | v909;
  v910 = WebKit::WebPreferencesKey::cookieStoreAPIServiceWorkerEnabledKey(v908);
  v912 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v910, v911);
  v913 = 0x4000000000000000;
  if (!(_DWORD)v912)
    v913 = 0;
  *v8 = *v8 & 0xBFFFFFFFFFFFFFFFLL | v913;
  v914 = WebKit::WebPreferencesKey::cookieStoreAPIEnabledKey(v912);
  v916 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v914, v915);
  v917 = 0x1000000000000000;
  if (!(_DWORD)v916)
    v917 = 0;
  *v8 = *v8 & 0xEFFFFFFFFFFFFFFFLL | v917;
  v918 = WebKit::WebPreferencesKey::cookieEnabledKey(v916);
  v920 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v918, v919);
  v921 = 0x800000000000000;
  if (!(_DWORD)v920)
    v921 = 0;
  *v8 = *v8 & 0xF7FFFFFFFFFFFFFFLL | v921;
  v922 = WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(v920);
  v924 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v922, v923);
  if ((_DWORD)v924)
    v925 = 2;
  else
    v925 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFFFFDLL | v925;
  v926 = WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(v924);
  v928 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v926, v927);
  if ((_DWORD)v928)
    v929 = 4;
  else
    v929 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFFFFBLL | v929;
  v930 = WebKit::WebPreferencesKey::customStateSetEnabledKey(v928);
  v932 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v930, v931);
  v933 = 0x4000000000;
  if (!(_DWORD)v932)
    v933 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFBFFFFFFFFFLL | v933;
  v934 = WebKit::WebPreferencesKey::domPasteAccessRequestsEnabledKey(v932);
  v936 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v934, v935);
  v937 = 0x20000000000000;
  if (!(_DWORD)v936)
    v937 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFDFFFFFFFFFFFFFLL | v937;
  v938 = WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(v936);
  v940 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v938, v939);
  if ((_DWORD)v940)
    v941 = 0x100000000000000;
  else
    v941 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFEFFFFFFFFFFFFFFLL | v941;
  v942 = WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(v940);
  v944 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v942, v943);
  v945 = 0x8000000000;
  if (!(_DWORD)v944)
    v945 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFF7FFFFFFFFFLL | v945;
  v946 = WebKit::WebPreferencesKey::dataListElementEnabledKey(v944);
  v948 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v946, v947);
  v949 = 0x400000000000;
  if (!(_DWORD)v948)
    v949 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFBFFFFFFFFFFFLL | v949;
  v950 = WebKit::WebPreferencesKey::inputTypeDateEnabledKey(v948);
  v952 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v950, v951);
  v953 = 8;
  if (!(_DWORD)v952)
    v953 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFFFF7 | v953;
  v954 = WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(v952);
  v956 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v954, v955);
  if ((_DWORD)v956)
    v957 = 0x800000000000;
  else
    v957 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFF7FFFFFFFFFFFLL | v957;
  v958 = WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(v956);
  v960 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v958, v959);
  v961 = 0x10000000000;
  if (!(_DWORD)v960)
    v961 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFEFFFFFFFFFFLL | v961;
  v962 = WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(v960);
  v964 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v962, v963);
  v965 = 0x20000000000;
  if (!(_DWORD)v964)
    v965 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFDFFFFFFFFFFLL | v965;
  v966 = WebKit::WebPreferencesKey::declarativeWebPushKey(v964);
  v968 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v966, v967);
  if ((_DWORD)v968)
    v969 = 0x1000000000000;
  else
    v969 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFEFFFFFFFFFFFFLL | v969;
  PaintKey = WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(v968);
  v972 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)PaintKey, v971);
  v973 = 0x8000;
  if (!(_DWORD)v972)
    v973 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFF7FFFLL | v973;
  v974 = WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(v972);
  v976 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v974, v975);
  v977 = 0x40000000000;
  if (!(_DWORD)v976)
    v977 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFBFFFFFFFFFFLL | v977;
  v978 = WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(v976);
  v980 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v978, v979);
  v981 = 0x80000000000;
  if (!(_DWORD)v980)
    v981 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFF7FFFFFFFFFFLL | v981;
  v982 = WebKit::WebPreferencesKey::deprecationReportingEnabledKey(v980);
  v984 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v982, v983);
  v985 = 0x100000000000;
  if (!(_DWORD)v984)
    v985 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFEFFFFFFFFFFFLL | v985;
  v986 = WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(v984);
  v988 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v986, v987);
  if ((_DWORD)v988)
    v989 = 0x400000000000000;
  else
    v989 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFBFFFFFFFFFFFFFFLL | v989;
  v990 = WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(v988);
  v992 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v990, v991);
  if ((_DWORD)v992)
    v993 = 0x800000000000;
  else
    v993 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFF7FFFFFFFFFFFLL | v993;
  v994 = WebKit::WebPreferencesKey::digitalCredentialsEnabledKey(v992);
  v996 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v994, v995);
  if ((_DWORD)v996)
    v997 = 0x1000000000000;
  else
    v997 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFEFFFFFFFFFFFFLL | v997;
  v998 = WebKit::WebPreferencesKey::directoryUploadEnabledKey(v996);
  v1000 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v998, v999);
  if ((_DWORD)v1000)
    v1001 = 0x2000000000000;
  else
    v1001 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFDFFFFFFFFFFFFLL | v1001;
  v1002 = WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(v1000);
  v1004 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1002, v1003);
  if ((_DWORD)v1004)
    v1005 = 0x20000000000;
  else
    v1005 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFDFFFFFFFFFFLL | v1005;
  PartyWebsiteDataRemovalDisabledKey = WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(v1004);
  v1008 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)PartyWebsiteDataRemovalDisabledKey, v1007);
  if ((_DWORD)v1008)
    v1009 = 0x100000000;
  else
    v1009 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFEFFFFFFFFLL | v1009;
  v1010 = WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(v1008);
  v1012 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1010, v1011);
  v1013 = 0x8000000000000;
  if (!(_DWORD)v1012)
    v1013 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFF7FFFFFFFFFFFFLL | v1013;
  v1014 = WebKit::WebPreferencesKey::shouldDropNearSuspendedAssertionAfterDelayKey(v1012);
  v1016 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1014, v1015);
  if ((_DWORD)v1016)
    v1017 = 0x40000;
  else
    v1017 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFBFFFFLL | v1017;
  v1018 = WebKit::WebPreferencesKey::embedElementEnabledKey(v1016);
  v1020 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1018, v1019);
  if ((_DWORD)v1020)
    v1021 = 0x800000000000000;
  else
    v1021 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xF7FFFFFFFFFFFFFFLL | v1021;
  v1022 = WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(v1020);
  v1024 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1022, v1023);
  if ((_DWORD)v1024)
    v1025 = 0x800000000000;
  else
    v1025 = 0;
  *v8 = *v8 & 0xFFFF7FFFFFFFFFFFLL | v1025;
  v1026 = WebKit::WebPreferencesKey::cryptoKitEnabledKey(v1024);
  v1028 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1026, v1027);
  if ((_DWORD)v1028)
    v1029 = 8;
  else
    v1029 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFFFFFFFFFFFF7 | v1029;
  v1030 = WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(v1028);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1030, v1031);
  v1032 = (WebKit::WebPreferencesKey *)WebCore::Settings::setICECandidateFilteringEnabled(a2);
  v1033 = WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(v1032);
  v1035 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1033, v1034);
  v1036 = 256;
  if (!(_DWORD)v1035)
    v1036 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFFEFFLL | v1036;
  v1037 = WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(v1035);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1037, v1038);
  v1039 = (WebKit::WebPreferencesKey *)WebCore::Settings::setMockCaptureDevicesEnabled(a2);
  APIEnabledKey = WebKit::WebPreferencesKey::backgroundFetchAPIEnabledKey(v1039);
  v1042 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)APIEnabledKey, v1041);
  v1043 = 0x2000000000;
  if (!(_DWORD)v1042)
    v1043 = 0;
  *v8 = *v8 & 0xFFFFFFDFFFFFFFFFLL | v1043;
  v1044 = WebKit::WebPreferencesKey::enterKeyHintEnabledKey(v1042);
  v1046 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1044, v1045);
  if ((_DWORD)v1046)
    v1047 = 0x2000000000000000;
  else
    v1047 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xDFFFFFFFFFFFFFFFLL | v1047;
  v1048 = WebKit::WebPreferencesKey::eventHandlerDrivenSmoothKeyboardScrollingEnabledKey(v1046);
  v1050 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1048, v1049);
  v1051 = 0x4000000000000000;
  if (!(_DWORD)v1050)
    v1051 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xBFFFFFFFFFFFFFFFLL | v1051;
  v1052 = WebKit::WebPreferencesKey::ftpEnabledKey(v1050);
  v1054 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1052, v1053);
  v1055 = 1024;
  if (!(_DWORD)v1054)
    v1055 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFFFFBFFLL | v1055;
  PriorityEnabledKey = WebKit::WebPreferencesKey::fetchPriorityEnabledKey(v1054);
  v1058 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)PriorityEnabledKey, v1057);
  v1059 = 0x8000000000000000;
  if (!(_DWORD)v1058)
    v1059 = 0;
  *((_QWORD *)a2 + 84) = v1059 & 0x8000000000000000 | *((_QWORD *)a2 + 84) & 0x7FFFFFFFFFFFFFFFLL;
  v1060 = WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(v1058);
  v1062 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1060, v1061);
  v1063 = 2;
  if (!(_DWORD)v1062)
    v1063 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFFFFFFDLL | v1063;
  v1064 = WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(v1062);
  v1066 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1064, v1065);
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFFFFFFELL | ((_DWORD)v1066 != 0);
  v1067 = WebKit::WebPreferencesKey::filterLinkDecorationByDefaultEnabledKey(v1066);
  v1069 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1067, v1068);
  v1070 = 4;
  if (!(_DWORD)v1069)
    v1070 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFFFFFFBLL | v1070;
  v1071 = WebKit::WebPreferencesKey::fullScreenKeyboardLockKey(v1069);
  v1073 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1071, v1072);
  v1074 = 0x100000000000000;
  if (!(_DWORD)v1073)
    v1074 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFEFFFFFFFFFFFFFFLL | v1074;
  v1075 = WebKit::WebPreferencesKey::fullScreenEnabledKey(v1073);
  v1077 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1075, v1076);
  v1078 = 0x80000000000000;
  if (!(_DWORD)v1077)
    v1078 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFF7FFFFFFFFFFFFFLL | v1078;
  v1079 = WebKit::WebPreferencesKey::blockMediaLayerRehostingInWebContentProcessKey(v1077);
  v1081 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1079, v1080);
  v1082 = 0x1000000000000000;
  if (!(_DWORD)v1081)
    v1082 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xEFFFFFFFFFFFFFFFLL | v1082;
  v1083 = WebKit::WebPreferencesKey::manageCaptureStatusBarInGPUProcessEnabledKey(v1081);
  v1085 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1083, v1084);
  if ((_DWORD)v1085)
    v1086 = 0x80000000;
  else
    v1086 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFF7FFFFFFFLL | v1086;
  v1087 = WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(v1085);
  v1089 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1087, v1088);
  if ((_DWORD)v1089)
    v1090 = 0x2000000000000000;
  else
    v1090 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xDFFFFFFFFFFFFFFFLL | v1090;
  v1091 = WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(v1089);
  v1093 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1091, v1092);
  v1094 = 0x20000;
  if (!(_DWORD)v1093)
    v1094 = 0;
  v1095 = *((_DWORD *)a2 + 180) & 0xFFFDFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFDFFFF | v1094;
  *((_BYTE *)a2 + 724) = BYTE4(v1095);
  v1096 = WebKit::WebPreferencesKey::gamepadTriggerRumbleEnabledKey(v1093);
  v1098 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1096, v1097);
  v1099 = 0x200000000000000;
  if (!(_DWORD)v1098)
    v1099 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFDFFFFFFFFFFFFFFLL | v1099;
  v1100 = WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(v1098);
  v1102 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1100, v1101);
  v1103 = 0x400000000000000;
  if (!(_DWORD)v1102)
    v1103 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFBFFFFFFFFFFFFFFLL | v1103;
  v1104 = WebKit::WebPreferencesKey::gamepadsEnabledKey(v1102);
  v1106 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1104, v1105);
  if ((_DWORD)v1106)
    v1107 = 0x800000000000000;
  else
    v1107 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xF7FFFFFFFFFFFFFFLL | v1107;
  v1108 = WebKit::WebPreferencesKey::genericCueAPIEnabledKey(v1106);
  v1110 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1108, v1109);
  v1111 = 0x40000000000000;
  if (!(_DWORD)v1110)
    v1111 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFBFFFFFFFFFFFFFLL | v1111;
  v1112 = WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(v1110);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1112, v1113);
  v1114 = (WebKit::WebPreferencesKey *)WebCore::Settings::setGraphicsContextFiltersEnabled(a2);
  v1115 = WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(v1114);
  v1117 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1115, v1116);
  v1118 = 64;
  if (!(_DWORD)v1117)
    v1118 = 0;
  *v8 = *v8 & 0xFFFFFFFFFFFFFFBFLL | v1118;
  v1119 = WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(v1117);
  v1121 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1119, v1120);
  v1122 = 0x200000000000;
  if (!(_DWORD)v1121)
    v1122 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFFFFDFFFFFFFFFFFLL | v1122;
  v1123 = WebKit::WebPreferencesKey::modelElementEnabledKey(v1121);
  v1125 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1123, v1124);
  if ((_DWORD)v1125)
    v1126 = 0x100000000;
  else
    v1126 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFEFFFFFFFFLL | v1126;
  v1127 = WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(v1125);
  v1129 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1127, v1128);
  if ((_DWORD)v1129)
    v1130 = 0x20000000;
  else
    v1130 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFDFFFFFFFLL | v1130;
  v1131 = WebKit::WebPreferencesKey::invokerAttributesEnabledKey(v1129);
  v1133 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1131, v1132);
  if ((_DWORD)v1133)
    v1134 = 0x80000000;
  else
    v1134 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFF7FFFFFFFLL | v1134;
  v1135 = WebKit::WebPreferencesKey::popoverAttributeEnabledKey(v1133);
  v1137 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1135, v1136);
  if ((_DWORD)v1137)
    v1138 = 0x20000000;
  else
    v1138 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFDFFFFFFFLL | v1138;
  v1139 = WebKit::WebPreferencesKey::switchControlEnabledKey(v1137);
  v1141 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1139, v1140);
  if ((_DWORD)v1141)
    v1142 = 0x1000000000000;
  else
    v1142 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFEFFFFFFFFFFFFLL | v1142;
  v1143 = WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(v1141);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1143, v1144);
  v1145 = (WebKit::WebPreferencesKey *)WebCore::Settings::setHiddenPageDOMTimerThrottlingAutoIncreases(a2);
  v1146 = WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(v1145);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1146, v1147);
  v1148 = (WebKit::WebPreferencesKey *)WebCore::Settings::setHiddenPageDOMTimerThrottlingEnabled(a2);
  v1149 = WebKit::WebPreferencesKey::highlightAPIEnabledKey(v1148);
  v1151 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1149, v1150);
  if ((_DWORD)v1151)
    v1152 = 0x40000;
  else
    v1152 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFFBFFFFLL | v1152;
  v1153 = WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(v1151);
  v1155 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1153, v1154);
  v1156 = 0x100000;
  if (!(_DWORD)v1155)
    v1156 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFEFFFFFLL | v1156;
  v1157 = WebKit::WebPreferencesKey::itpDebugModeEnabledKey(v1155);
  v1159 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1157, v1158);
  v1160 = 0x40000000000;
  if (!(_DWORD)v1159)
    v1160 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFBFFFFFFFFFFLL | v1160;
  v1161 = WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(v1159);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1161, v1162);
  v1163 = (WebKit::WebPreferencesKey *)WebCore::Settings::setTextAutosizingUsesIdempotentMode(a2);
  v1164 = WebKit::WebPreferencesKey::imageAnalysisDuringFindInPageEnabledKey(v1163);
  v1166 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1164, v1165);
  if ((_DWORD)v1166)
    v1167 = 0x4000000000000000;
  else
    v1167 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xBFFFFFFFFFFFFFFFLL | v1167;
  v1168 = WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(v1166);
  v1170 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1168, v1169);
  v1171 = 0x8000000000;
  if (!(_DWORD)v1170)
    v1171 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFF7FFFFFFFFFLL | v1171;
  v1172 = WebKit::WebPreferencesKey::imageCaptureEnabledKey(v1170);
  v1174 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1172, v1173);
  if ((_DWORD)v1174)
    v1175 = 0x80000;
  else
    v1175 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFF7FFFFLL | v1175;
  v1176 = WebKit::WebPreferencesKey::inWindowFullscreenEnabledKey(v1174);
  v1178 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1176, v1177);
  if ((_DWORD)v1178)
    v1179 = 0x2000000;
  else
    v1179 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFDFFFFFFLL | v1179;
  v1180 = WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(v1178);
  v1182 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1180, v1181);
  if ((_DWORD)v1182)
    v1183 = 0x8000000;
  else
    v1183 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFF7FFFFFFLL | v1183;
  v1184 = WebKit::WebPreferencesKey::javaScriptEnabledKey(v1182);
  v1186 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1184, v1185);
  if ((_DWORD)v1186)
    v1187 = 0x10000000000000;
  else
    v1187 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFEFFFFFFFFFFFFFLL | v1187;
  v1188 = WebKit::WebPreferencesKey::layerBasedSVGEngineEnabledKey(v1186);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1188, v1189);
  v1190 = (WebKit::WebPreferencesKey *)WebCore::Settings::setLayerBasedSVGEngineEnabled(a2);
  v1191 = WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(v1190);
  v1193 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1191, v1192);
  if ((_DWORD)v1193)
    v1194 = 0x1000000000000;
  else
    v1194 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFEFFFFFFFFFFFFLL | v1194;
  v1195 = WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(v1193);
  v1197 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1195, v1196);
  v1198 = 0x2000000000000;
  if (!(_DWORD)v1197)
    v1198 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFDFFFFFFFFFFFFLL | v1198;
  v1199 = WebKit::WebPreferencesKey::legacyOverflowScrollingTouchEnabledKey(v1197);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1199, v1200);
  v1201 = (WebKit::WebPreferencesKey *)WebCore::Settings::setLegacyOverflowScrollingTouchEnabled(a2);
  v1202 = WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(v1201);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1202, v1203);
  v1204 = (WebKit::WebPreferencesKey *)WebCore::Settings::setLegacyLineLayoutVisualCoverageEnabled(a2);
  v1205 = WebKit::WebPreferencesKey::showModalDialogEnabledKey(v1204);
  v1207 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1205, v1206);
  v1208 = 0x40000000;
  if (!(_DWORD)v1207)
    v1208 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFBFFFFFFFLL | v1208;
  v1209 = WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(v1207);
  v1211 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1209, v1210);
  v1212 = 0x400000;
  if (!(_DWORD)v1211)
    v1212 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFBFFFFFLL | v1212;
  v1213 = WebKit::WebPreferencesKey::linkSanitizerEnabledKey(v1211);
  v1215 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1213, v1214);
  v1216 = 0x400000000000000;
  if (!(_DWORD)v1215)
    v1216 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFBFFFFFFFFFFFFFFLL | v1216;
  v1217 = WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(v1215);
  v1219 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1217, v1218);
  v1220 = 0x200000000000000;
  if (!(_DWORD)v1219)
    v1220 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFDFFFFFFFFFFFFFFLL | v1220;
  v1221 = WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(v1219);
  v1223 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1221, v1222);
  if ((_DWORD)v1223)
    v1224 = 0x10000000000000;
  else
    v1224 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFEFFFFFFFFFFFFFLL | v1224;
  v1225 = WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(v1223);
  v1227 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1225, v1226);
  v1228 = 0x20000000000000;
  if (!(_DWORD)v1227)
    v1228 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFDFFFFFFFFFFFFFLL | v1228;
  v1229 = WebKit::WebPreferencesKey::linkPrefetchEnabledKey(v1227);
  v1231 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1229, v1230);
  v1232 = 0x80000000000000;
  if (!(_DWORD)v1231)
    v1232 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFF7FFFFFFFFFFFFFLL | v1232;
  v1233 = WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(v1231);
  v1235 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1233, v1234);
  v1236 = 0x800000000000000;
  if (!(_DWORD)v1235)
    v1236 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xF7FFFFFFFFFFFFFFLL | v1236;
  WebArchiveWithEphemeralStorageEnabledKey = WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(v1235);
  v1239 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)WebArchiveWithEphemeralStorageEnabledKey, v1238);
  if ((_DWORD)v1239)
    v1240 = 4;
  else
    v1240 = 0;
  v1241 = *v482 & 0xFFFFFFFB | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFFFFB | v1240;
  *((_BYTE *)a2 + 724) = BYTE4(v1241);
  v1242 = WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(v1239);
  v1244 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1242, v1243);
  if ((_DWORD)v1244)
    v1245 = 0x4000000000000000;
  else
    v1245 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xBFFFFFFFFFFFFFFFLL | v1245;
  v1246 = WebKit::WebPreferencesKey::localStorageEnabledKey(v1244);
  v1248 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1246, v1247);
  v1249 = 0x8000000000000000;
  if (!(_DWORD)v1248)
    v1249 = 0;
  *((_QWORD *)a2 + 85) = v1249 & 0x8000000000000000 | *((_QWORD *)a2 + 85) & 0x7FFFFFFFFFFFFFFFLL;
  v1250 = WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(v1248);
  v1252 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1250, v1251);
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFFFFELL | ((_DWORD)v1252 != 0);
  v1253 = WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(v1252);
  v1255 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1253, v1254);
  if ((_DWORD)v1255)
    v1256 = 4;
  else
    v1256 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFFFFBLL | v1256;
  v1257 = WebKit::WebPreferencesKey::loginStatusAPIEnabledKey(v1255);
  v1259 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1257, v1258);
  v1260 = 2;
  if (!(_DWORD)v1259)
    v1260 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFFFFDLL | v1260;
  v1261 = WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(v1259);
  v1263 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1261, v1262);
  v1264 = 8;
  if (!(_DWORD)v1263)
    v1264 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFFFF7 | v1264;
  v1265 = WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(v1263);
  v1267 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1265, v1266);
  if ((_DWORD)v1267)
    v1268 = 0x2000;
  else
    v1268 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFDFFFLL | v1268;
  v1269 = WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(v1267);
  v1271 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1269, v1270);
  v1272 = 0x8000;
  if (!(_DWORD)v1271)
    v1272 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFF7FFFLL | v1272;
  v1273 = WebKit::WebPreferencesKey::coreMathMLEnabledKey(v1271);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1273, v1274);
  v1275 = (WebKit::WebPreferencesKey *)WebCore::Settings::setCoreMathMLEnabled(a2);
  v1276 = WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(v1275);
  v1278 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1276, v1277);
  v1279 = 64;
  if (!(_DWORD)v1278)
    v1279 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFFFBFLL | v1279;
  v1280 = WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(v1278);
  v1282 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1280, v1281);
  v1283 = 0x40000000000000;
  if (!(_DWORD)v1282)
    v1283 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFBFFFFFFFFFFFFFLL | v1283;
  v1284 = WebKit::WebPreferencesKey::mediaSessionEnabledKey(v1282);
  v1286 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1284, v1285);
  v1287 = 4096;
  if (!(_DWORD)v1286)
    v1287 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFEFFFLL | v1287;
  v1288 = WebKit::WebPreferencesKey::mediaSourceEnabledKey(v1286);
  v1290 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1288, v1289);
  v1291 = 1024;
  if (!(_DWORD)v1290)
    v1291 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFFBFFLL | v1291;
  v1292 = WebKit::WebPreferencesKey::mediaDevicesEnabledKey(v1290);
  v1294 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1292, v1293);
  v1295 = 0x800000;
  if (!(_DWORD)v1294)
    v1295 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFF7FFFFFLL | v1295;
  v1296 = WebKit::WebPreferencesKey::mediaRecorderEnabledKey(v1294);
  v1298 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1296, v1297);
  if ((_DWORD)v1298)
    v1299 = 2048;
  else
    v1299 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFF7FFLL | v1299;
  v1300 = WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(v1298);
  v1302 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1300, v1301);
  v1303 = 0x10000;
  if (!(_DWORD)v1302)
    v1303 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFEFFFFLL | v1303;
  v1304 = WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(v1302);
  v1306 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1304, v1305);
  if ((_DWORD)v1306)
    v1307 = 0x2000000;
  else
    v1307 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFDFFFFFFLL | v1307;
  v1308 = WebKit::WebPreferencesKey::momentumScrollingAnimatorEnabledKey(v1306);
  v1310 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1308, v1309);
  if ((_DWORD)v1310)
    v1311 = 0x2000;
  else
    v1311 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFDFFFLL | v1311;
  v1312 = WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(v1310);
  v1314 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1312, v1313);
  if ((_DWORD)v1314)
    v1315 = 32;
  else
    v1315 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFFFDFLL | v1315;
  v1316 = WebKit::WebPreferencesKey::mouseEventsSimulationEnabledKey(v1314);
  v1318 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1316, v1317);
  v1319 = 0x1000000000000;
  if (!(_DWORD)v1318)
    v1319 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFEFFFFFFFFFFFFLL | v1319;
  v1320 = WebKit::WebPreferencesKey::muteCameraOnMicrophoneInterruptionEnabledKey(v1318);
  v1322 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1320, v1321);
  if ((_DWORD)v1322)
    v1323 = 0x8000000;
  else
    v1323 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFF7FFFFFFLL | v1323;
  v1324 = WebKit::WebPreferencesKey::navigationAPIEnabledKey(v1322);
  v1326 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1324, v1325);
  v1327 = 0x4000;
  if (!(_DWORD)v1326)
    v1327 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFFFBFFFLL | v1327;
  v1328 = WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(v1326);
  v1330 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1328, v1329);
  if ((_DWORD)v1330)
    v1331 = 0x80000;
  else
    v1331 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFF7FFFFLL | v1331;
  v1332 = WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(v1330);
  v1334 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1332, v1333);
  v1335 = 0x100000;
  if (!(_DWORD)v1334)
    v1335 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFEFFFFFLL | v1335;
  v1336 = WebKit::WebPreferencesKey::flexFormattingContextIntegrationEnabledKey(v1334);
  v1338 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1336, v1337);
  if ((_DWORD)v1338)
    v1339 = 32;
  else
    v1339 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFFFFFDFLL | v1339;
  v1340 = WebKit::WebPreferencesKey::notificationEventEnabledKey(v1338);
  v1342 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1340, v1341);
  if ((_DWORD)v1342)
    v1343 = 0x400000000;
  else
    v1343 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFBFFFFFFFFLL | v1343;
  v1344 = WebKit::WebPreferencesKey::notificationsEnabledKey(v1342);
  v1346 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1344, v1345);
  if ((_DWORD)v1346)
    v1347 = 0x200000000;
  else
    v1347 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFDFFFFFFFFLL | v1347;
  v1348 = WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(v1346);
  v1350 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1348, v1349);
  v1351 = 512;
  if (!(_DWORD)v1350)
    v1351 = 0;
  *v8 = *v8 & 0xFFFFFFFFFFFFFDFFLL | v1351;
  v1352 = WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(v1350);
  v1354 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1352, v1353);
  v1355 = 0x2000000000;
  if (!(_DWORD)v1354)
    v1355 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFDFFFFFFFFFLL | v1355;
  v1356 = WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(v1354);
  v1358 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1356, v1357);
  if ((_DWORD)v1358)
    v1359 = 0x1000000000;
  else
    v1359 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFEFFFFFFFFFLL | v1359;
  v1360 = WebKit::WebPreferencesKey::offscreenCanvasDeprecatedCommitEnabledKey(v1358);
  v1362 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1360, v1361);
  if ((_DWORD)v1362)
    v1363 = 0x800000000;
  else
    v1363 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFF7FFFFFFFFLL | v1363;
  v1364 = WebKit::WebPreferencesKey::opportunisticSweepingAndGarbageCollectionEnabledKey(v1362);
  v1366 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1364, v1365);
  v1367 = 0x200000;
  if (!(_DWORD)v1366)
    v1367 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFDFFFFFLL | v1367;
  v1368 = WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(v1366);
  v1370 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1368, v1369);
  v1371 = 0x400000;
  if (!(_DWORD)v1370)
    v1371 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFFBFFFFFLL | v1371;
  v1372 = WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(v1370);
  v1374 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1372, v1373);
  v1375 = 0x20000000000;
  if (!(_DWORD)v1374)
    v1375 = 0;
  *v8 = *v8 & 0xFFFFFDFFFFFFFFFFLL | v1375;
  v1376 = WebKit::WebPreferencesKey::permissionsAPIEnabledKey(v1374);
  v1378 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1376, v1377);
  v1379 = 0x10000000;
  if (!(_DWORD)v1378)
    v1379 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFEFFFFFFFLL | v1379;
  v1380 = WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(v1378);
  v1382 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1380, v1381);
  v1383 = 0x80000000;
  if (!(_DWORD)v1382)
    v1383 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFF7FFFFFFFLL | v1383;
  v1384 = WebKit::WebPreferencesKey::preferSandboxedMediaParsingKey(v1382);
  v1386 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1384, v1385);
  if ((_DWORD)v1386)
    v1387 = 0x100000000000000;
  else
    v1387 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFEFFFFFFFFFFFFFFLL | v1387;
  v1388 = WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(v1386);
  v1390 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1388, v1389);
  if ((_DWORD)v1390)
    v1391 = 0x200000000;
  else
    v1391 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFDFFFFFFFFLL | v1391;
  v1392 = WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(v1390);
  v1394 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1392, v1393);
  if ((_DWORD)v1394)
    v1395 = 0x800000000;
  else
    v1395 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFF7FFFFFFFFLL | v1395;
  v1396 = WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(v1394);
  v1398 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1396, v1397);
  if ((_DWORD)v1398)
    v1399 = 0x400000000;
  else
    v1399 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFBFFFFFFFFLL | v1399;
  v1400 = WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(v1398);
  v1402 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1400, v1401);
  if ((_DWORD)v1402)
    v1403 = 0x1000000000;
  else
    v1403 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFEFFFFFFFFFLL | v1403;
  v1404 = WebKit::WebPreferencesKey::pushAPIEnabledKey(v1402);
  v1406 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1404, v1405);
  v1407 = 0x4000000000;
  if (!(_DWORD)v1406)
    v1407 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFBFFFFFFFFFLL | v1407;
  v1408 = WebKit::WebPreferencesKey::legacyPluginQuirkForMailSignaturesEnabledKey(v1406);
  v1410 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1408, v1409);
  if ((_DWORD)v1410)
    v1411 = 0x8000000000000;
  else
    v1411 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFF7FFFFFFFFFFFFLL | v1411;
  v1412 = WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(v1410);
  v1414 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1412, v1413);
  v1415 = 0x2000;
  if (!(_DWORD)v1414)
    v1415 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFFFDFFFLL | v1415;
  v1416 = WebKit::WebPreferencesKey::remotePlaybackEnabledKey(v1414);
  v1418 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1416, v1417);
  v1419 = 0x1000000;
  if (!(_DWORD)v1418)
    v1419 = 0;
  v1420 = *((_DWORD *)a2 + 180) & 0xFEFFFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFEFFFFFF | v1419;
  *((_BYTE *)a2 + 724) = BYTE4(v1420);
  v1421 = WebKit::WebPreferencesKey::removeBackgroundEnabledKey(v1418);
  v1423 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1421, v1422);
  if ((_DWORD)v1423)
    v1424 = 2;
  else
    v1424 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFFFFDLL | v1424;
  v1425 = WebKit::WebPreferencesKey::reportingEnabledKey(v1423);
  v1427 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1425, v1426);
  v1428 = 0x8000000000;
  if (!(_DWORD)v1427)
    v1428 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFF7FFFFFFFFFLL | v1428;
  v1429 = WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(v1427);
  v1431 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1429, v1430);
  v1432 = 0x40000000000;
  if (!(_DWORD)v1431)
    v1432 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFBFFFFFFFFFFLL | v1432;
  v1433 = WebKit::WebPreferencesKey::speakerSelectionRequiresUserGestureKey(v1431);
  v1435 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1433, v1434);
  v1436 = 0x40000000;
  if (!(_DWORD)v1435)
    v1436 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFBFFFFFFFLL | v1436;
  v1437 = WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(v1435);
  v1439 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1437, v1438);
  if ((_DWORD)v1439)
    v1440 = 2048;
  else
    v1440 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFFFF7FFLL | v1440;
  UserMediaRequiresFocusKey = WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(v1439);
  v1443 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)UserMediaRequiresFocusKey, v1442);
  v1444 = 0x40000;
  if (!(_DWORD)v1443)
    v1444 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFBFFFFLL | v1444;
  SchedulingEnabledKey = WebKit::WebPreferencesKey::resourceLoadSchedulingEnabledKey(v1443);
  v1447 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)SchedulingEnabledKey, v1446);
  v1448 = 0x800000000000;
  if (!(_DWORD)v1447)
    v1448 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFF7FFFFFFFFFFFLL | v1448;
  v1449 = WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(v1447);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1449, v1450);
  v1451 = (WebKit::WebPreferencesKey *)WebCore::Settings::setResourceUsageOverlayVisible(a2);
  v1452 = WebKit::WebPreferencesKey::sKAttributionEnabledKey(v1451);
  v1454 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1452, v1453);
  v1455 = 0x1000000000000;
  if (!(_DWORD)v1454)
    v1455 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFEFFFFFFFFFFFFLL | v1455;
  v1456 = WebKit::WebPreferencesKey::isSameSiteStrictEnforcementEnabledKey(v1454);
  v1458 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1456, v1457);
  if ((_DWORD)v1458)
    v1459 = 0x10000000000;
  else
    v1459 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFEFFFFFFFFFFLL | v1459;
  v1460 = WebKit::WebPreferencesKey::screenOrientationLockingAPIEnabledKey(v1458);
  v1462 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1460, v1461);
  v1463 = 0x4000000000000;
  if (!(_DWORD)v1462)
    v1463 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFBFFFFFFFFFFFFLL | v1463;
  v1464 = WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(v1462);
  v1466 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1464, v1465);
  v1467 = 0x2000000000000;
  if (!(_DWORD)v1466)
    v1467 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFDFFFFFFFFFFFFLL | v1467;
  v1468 = WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(v1466);
  v1470 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1468, v1469);
  if ((_DWORD)v1470)
    v1471 = 0x8000000000000;
  else
    v1471 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFF7FFFFFFFFFFFFLL | v1471;
  v1472 = WebKit::WebPreferencesKey::screenCaptureEnabledKey(v1470);
  v1474 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1472, v1473);
  if ((_DWORD)v1474)
    v1475 = 0x20000000;
  else
    v1475 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFDFFFFFFFLL | v1475;
  v1476 = WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(v1474);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1476, v1477);
  v1478 = (WebKit::WebPreferencesKey *)WebCore::Settings::setScrollingPerformanceTestingEnabled(a2);
  v1479 = WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(v1478);
  v1481 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1479, v1480);
  v1482 = 0x200000000000000;
  if (!(_DWORD)v1481)
    v1482 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFDFFFFFFFFFFFFFFLL | v1482;
  v1483 = WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(v1481);
  v1485 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1483, v1484);
  v1486 = 0x400000000000000;
  if (!(_DWORD)v1485)
    v1486 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFBFFFFFFFFFFFFFFLL | v1486;
  v1487 = WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(v1485);
  v1489 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1487, v1488);
  if ((_DWORD)v1489)
    v1490 = 0x800000000000000;
  else
    v1490 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xF7FFFFFFFFFFFFFFLL | v1490;
  v1491 = WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(v1489);
  v1493 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1491, v1492);
  v1494 = 0x1000000000000000;
  if (!(_DWORD)v1493)
    v1494 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xEFFFFFFFFFFFFFFFLL | v1494;
  v1495 = WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(v1493);
  v1497 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1495, v1496);
  if ((_DWORD)v1497)
    v1498 = 0x100000000000000;
  else
    v1498 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFEFFFFFFFFFFFFFFLL | v1498;
  v1499 = WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(v1497);
  v1501 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1499, v1500);
  if ((_DWORD)v1501)
    v1502 = 0x40000000000000;
  else
    v1502 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFBFFFFFFFFFFFFFLL | v1502;
  v1503 = WebKit::WebPreferencesKey::scrollDrivenAnimationsEnabledKey(v1501);
  v1505 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1503, v1504);
  v1506 = 0x80000000000000;
  if (!(_DWORD)v1505)
    v1506 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFF7FFFFFFFFFFFFFLL | v1506;
  v1507 = WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(v1505);
  v1509 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1507, v1508);
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFFFFELL | ((_DWORD)v1509 != 0);
  v1510 = WebKit::WebPreferencesKey::secureContextChecksEnabledKey(v1509);
  v1512 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1510, v1511);
  if ((_DWORD)v1512)
    v1513 = 2;
  else
    v1513 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFFFFDLL | v1513;
  v1514 = WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(v1512);
  v1516 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1514, v1515);
  if ((_DWORD)v1516)
    v1517 = 16;
  else
    v1517 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFFFEFLL | v1517;
  v1518 = WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(v1516);
  v1520 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1518, v1519);
  v1521 = 32;
  if (!(_DWORD)v1520)
    v1521 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFFFDFLL | v1521;
  v1522 = WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(v1520);
  v1524 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1522, v1523);
  if ((_DWORD)v1524)
    v1525 = 64;
  else
    v1525 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFFFBFLL | v1525;
  v1526 = WebKit::WebPreferencesKey::serviceWorkersEnabledKey(v1524);
  v1528 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1526, v1527);
  v1529 = 128;
  if (!(_DWORD)v1528)
    v1529 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFFF7FLL | v1529;
  v1530 = WebKit::WebPreferencesKey::shapeDetectionKey(v1528);
  v1532 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1530, v1531);
  v1533 = 512;
  if (!(_DWORD)v1532)
    v1533 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFFDFFLL | v1533;
  v1534 = WebKit::WebPreferencesKey::sharedWorkerEnabledKey(v1532);
  v1536 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1534, v1535);
  v1537 = 1024;
  if (!(_DWORD)v1536)
    v1537 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFFBFFLL | v1537;
  v1538 = WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(v1536);
  v1540 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1538, v1539);
  if ((_DWORD)v1540)
    v1541 = 0x20000000;
  else
    v1541 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFDFFFFFFFLL | v1541;
  v1542 = WebKit::WebPreferencesKey::sidewaysWritingModesEnabledKey(v1540);
  v1544 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1542, v1543);
  v1545 = 0x1000000000;
  if (!(_DWORD)v1544)
    v1545 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFEFFFFFFFFFLL | v1545;
  v1546 = WebKit::WebPreferencesKey::siteIsolationEnabledKey(v1544);
  v1548 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1546, v1547);
  v1549 = 0x2000000000;
  if (!(_DWORD)v1548)
    v1549 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFDFFFFFFFFFLL | v1549;
  v1550 = WebKit::WebPreferencesKey::speechRecognitionEnabledKey(v1548);
  v1552 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1550, v1551);
  if ((_DWORD)v1552)
    v1553 = 0x10000000000;
  else
    v1553 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFEFFFFFFFFFFLL | v1553;
  v1554 = WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(v1552);
  v1556 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1554, v1555);
  v1557 = 0x20000000000;
  if (!(_DWORD)v1556)
    v1557 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFDFFFFFFFFFFLL | v1557;
  v1558 = WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(v1556);
  v1560 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1558, v1559);
  v1561 = 0x200000000000;
  if (!(_DWORD)v1560)
    v1561 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFDFFFFFFFFFFFLL | v1561;
  v1562 = WebKit::WebPreferencesKey::storageAPIEnabledKey(v1560);
  v1564 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1562, v1563);
  v1565 = 0x100000000000;
  if (!(_DWORD)v1564)
    v1565 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFEFFFFFFFFFFFLL | v1565;
  v1566 = WebKit::WebPreferencesKey::storageBlockingPolicyKey(v1564);
  WebKit::WebPreferencesStore::getUInt32ValueForKey(this, (WTF::StringImpl **)v1566);
  v1567 = (WebKit::WebPreferencesKey *)WebCore::Settings::setStorageBlockingPolicy();
  v1568 = WebKit::WebPreferencesKey::shouldTakeNearSuspendedAssertionsKey(v1567);
  v1570 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1568, v1569);
  if ((_DWORD)v1570)
    v1571 = 0x4000000;
  else
    v1571 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFBFFFFFFLL | v1571;
  v1572 = WebKit::WebPreferencesKey::textAnimationsEnabledKey(v1570);
  v1574 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1572, v1573);
  if ((_DWORD)v1574)
    v1575 = 0x4000000;
  else
    v1575 = 0;
  v1576 = *v482 & 0xFBFFFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFBFFFFFF | v1575;
  *((_BYTE *)a2 + 724) = BYTE4(v1576);
  v1577 = WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(v1574);
  v1579 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1577, v1578);
  v1580 = 0x8000000000000000;
  if (!(_DWORD)v1579)
    v1580 = 0;
  *((_QWORD *)a2 + 88) = v1580 & 0x8000000000000000 | *((_QWORD *)a2 + 88) & 0x7FFFFFFFFFFFFFFFLL;
  v1581 = WebKit::WebPreferencesKey::threadedAnimationResolutionEnabledKey(v1579);
  v1583 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1581, v1582);
  v1584 = 0x800000000000;
  if (!(_DWORD)v1583)
    v1584 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFF7FFFFFFFFFFFLL | v1584;
  v1585 = WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(v1583);
  v1587 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1585, v1586);
  v1588 = 0x100000000;
  if (!(_DWORD)v1587)
    v1588 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFEFFFFFFFFLL | v1588;
  v1589 = WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(v1587);
  v1591 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1589, v1590);
  if ((_DWORD)v1591)
    v1592 = 64;
  else
    v1592 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFFFBFLL | v1592;
  v1593 = WebKit::WebPreferencesKey::trackConfigurationEnabledKey(v1591);
  v1595 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1593, v1594);
  if ((_DWORD)v1595)
    v1596 = 0x40000000000000;
  else
    v1596 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFBFFFFFFFFFFFFFLL | v1596;
  v1597 = WebKit::WebPreferencesKey::trustedTypesEnabledKey(v1595);
  v1599 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1597, v1598);
  v1600 = 0x200000000000000;
  if (!(_DWORD)v1599)
    v1600 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFDFFFFFFFFFFFFFFLL | v1600;
  v1601 = WebKit::WebPreferencesKey::undoManagerAPIEnabledKey(v1599);
  v1603 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1601, v1602);
  if ((_DWORD)v1603)
    v1604 = 0x800000000000000;
  else
    v1604 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xF7FFFFFFFFFFFFFFLL | v1604;
  v1605 = WebKit::WebPreferencesKey::unifiedPDFEnabledKey(v1603);
  v1607 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1605, v1606);
  v1608 = 0x8000000000000;
  if (!(_DWORD)v1607)
    v1608 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFF7FFFFFFFFFFFFLL | v1608;
  v1609 = WebKit::WebPreferencesKey::iPAddressAndLocalhostMixedContentUpgradeTestingEnabledKey(v1607);
  v1611 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1609, v1610);
  v1612 = 0x200000;
  if (!(_DWORD)v1611)
    v1612 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFDFFFFFLL | v1612;
  v1613 = WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(v1611);
  v1615 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1613, v1614);
  if ((_DWORD)v1615)
    v1616 = 0x4000000000000000;
  else
    v1616 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xBFFFFFFFFFFFFFFFLL | v1616;
  v1617 = WebKit::WebPreferencesKey::useGiantTilesKey(v1615);
  v1619 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1617, v1618);
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFFFFELL | ((_DWORD)v1619 != 0);
  v1620 = WebKit::WebPreferencesKey::userActivationAPIEnabledKey(v1619);
  v1622 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1620, v1621);
  if ((_DWORD)v1622)
    v1623 = 8;
  else
    v1623 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFFFF7 | v1623;
  v1624 = WebKit::WebPreferencesKey::userGesturePromisePropagationEnabledKey(v1622);
  v1626 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1624, v1625);
  if ((_DWORD)v1626)
    v1627 = 16;
  else
    v1627 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFFFEFLL | v1627;
  v1628 = WebKit::WebPreferencesKey::serviceWorkersUserGestureEnabledKey(v1626);
  v1630 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1628, v1629);
  if ((_DWORD)v1630)
    v1631 = 256;
  else
    v1631 = 0;
  *((_QWORD *)a2 + 87) = *((_QWORD *)a2 + 87) & 0xFFFFFFFFFFFFFEFFLL | v1631;
  v1632 = WebKit::WebPreferencesKey::verifyWindowOpenUserGestureFromUIProcessKey(v1630);
  v1634 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1632, v1633);
  if ((_DWORD)v1634)
    v1635 = 128;
  else
    v1635 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFFF7FLL | v1635;
  v1636 = WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(v1634);
  v1638 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1636, v1637);
  if ((_DWORD)v1638)
    v1639 = 256;
  else
    v1639 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFFEFFLL | v1639;
  v1640 = WebKit::WebPreferencesKey::viewTransitionsEnabledKey(v1638);
  v1642 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1640, v1641);
  if ((_DWORD)v1642)
    v1643 = 1024;
  else
    v1643 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFFBFFLL | v1643;
  v1644 = WebKit::WebPreferencesKey::visualTranslationEnabledKey(v1642);
  v1646 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1644, v1645);
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFFFFELL | ((_DWORD)v1646 != 0);
  v1647 = WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(v1646);
  v1649 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1647, v1648);
  v1650 = 2048;
  if (!(_DWORD)v1649)
    v1650 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFF7FFLL | v1650;
  v1651 = WebKit::WebPreferencesKey::webAPIStatisticsEnabledKey(v1649);
  v1653 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1651, v1652);
  v1654 = 0x4000;
  if (!(_DWORD)v1653)
    v1654 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFFBFFFLL | v1654;
  v1655 = WebKit::WebPreferencesKey::webAPIsInShadowRealmEnabledKey(v1653);
  v1657 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1655, v1656);
  v1658 = 0x8000;
  if (!(_DWORD)v1657)
    v1658 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFF7FFFLL | v1658;
  v1659 = WebKit::WebPreferencesKey::webAnimationsCustomEffectsEnabledKey(v1657);
  v1661 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1659, v1660);
  v1662 = 0x10000;
  if (!(_DWORD)v1661)
    v1662 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFEFFFFLL | v1662;
  v1663 = WebKit::WebPreferencesKey::webAnimationsCustomFrameRateEnabledKey(v1661);
  v1665 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1663, v1664);
  v1666 = 0x20000;
  if (!(_DWORD)v1665)
    v1666 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFDFFFFLL | v1666;
  v1667 = WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(v1665);
  v1669 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1667, v1668);
  if ((_DWORD)v1669)
    v1670 = 8;
  else
    v1670 = 0;
  v1671 = *v482 & 0xFFFFFFF7 | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFFFF7 | v1670;
  *((_BYTE *)a2 + 724) = BYTE4(v1671);
  v1672 = WebKit::WebPreferencesKey::webArchiveTestingModeEnabledKey(v1669);
  v1674 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1672, v1673);
  if ((_DWORD)v1674)
    v1675 = 16;
  else
    v1675 = 0;
  v1676 = *v482 & 0xFFFFFFEF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFFFEF | v1675;
  *((_BYTE *)a2 + 724) = BYTE4(v1676);
  v1677 = WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(v1674);
  v1679 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1677, v1678);
  if ((_DWORD)v1679)
    v1680 = 0x10000000;
  else
    v1680 = 0;
  v1681 = *v482 & 0xEFFFFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xEFFFFFFF | v1680;
  *((_BYTE *)a2 + 724) = BYTE4(v1681);
  v1682 = WebKit::WebPreferencesKey::webAuthenticationEnabledKey(v1679);
  v1684 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1682, v1683);
  v1685 = 64;
  if (!(_DWORD)v1684)
    v1685 = 0;
  v1686 = *((_DWORD *)a2 + 180) & 0xFFFFFFBF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFFFBF | v1685;
  *((_BYTE *)a2 + 724) = BYTE4(v1686);
  v1687 = WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(v1684);
  v1689 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1687, v1688);
  if ((_DWORD)v1689)
    v1690 = 0x40000;
  else
    v1690 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFFBFFFFLL | v1690;
  v1691 = WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(v1689);
  v1693 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1691, v1692);
  v1694 = 0x80000;
  if (!(_DWORD)v1693)
    v1694 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFF7FFFFLL | v1694;
  v1695 = WebKit::WebPreferencesKey::webLocksAPIEnabledKey(v1693);
  v1697 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1695, v1696);
  v1698 = 0x4000000;
  if (!(_DWORD)v1697)
    v1698 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFBFFFFFFLL | v1698;
  v1699 = WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(v1697);
  v1701 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1699, v1700);
  v1702 = 0x80000000;
  if (!(_DWORD)v1701)
    v1702 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFF7FFFFFFFLL | v1702;
  v1703 = WebKit::WebPreferencesKey::webShareEnabledKey(v1701);
  v1705 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1703, v1704);
  v1706 = 0x40000000;
  if (!(_DWORD)v1705)
    v1706 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFBFFFFFFFLL | v1706;
  v1707 = WebKit::WebPreferencesKey::webAssemblyESMIntegrationEnabledKey(v1705);
  v1709 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1707, v1708);
  if ((_DWORD)v1709)
    v1710 = 0x4000000000000000;
  else
    v1710 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xBFFFFFFFFFFFFFFFLL | v1710;
  v1711 = WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(v1709);
  v1713 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1711, v1712);
  if ((_DWORD)v1713)
    v1714 = 128;
  else
    v1714 = 0;
  v1715 = *v482 & 0xFFFFFF7F | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFFF7F | v1714;
  *((_BYTE *)a2 + 724) = BYTE4(v1715);
  v1716 = WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(v1713);
  v1718 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1716, v1717);
  v1719 = 256;
  if (!(_DWORD)v1718)
    v1719 = 0;
  v1720 = *((_DWORD *)a2 + 180) & 0xFFFFFEFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFFEFF | v1719;
  *((_BYTE *)a2 + 724) = BYTE4(v1720);
  v1721 = WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(v1718);
  v1723 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1721, v1722);
  v1724 = 512;
  if (!(_DWORD)v1723)
    v1724 = 0;
  v1725 = *((_DWORD *)a2 + 180) & 0xFFFFFDFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFFDFF | v1724;
  *((_BYTE *)a2 + 724) = BYTE4(v1725);
  v1726 = WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(v1723);
  v1728 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1726, v1727);
  if ((_DWORD)v1728)
    v1729 = 1024;
  else
    v1729 = 0;
  v1730 = *v482 & 0xFFFFFBFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFFBFF | v1729;
  *((_BYTE *)a2 + 724) = BYTE4(v1730);
  v1731 = WebKit::WebPreferencesKey::webGLDraftExtensionsEnabledKey(v1728);
  v1733 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1731, v1732);
  if ((_DWORD)v1733)
    v1734 = 0x100000;
  else
    v1734 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFEFFFFFLL | v1734;
  v1735 = WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(v1733);
  v1737 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1735, v1736);
  v1738 = 0x800000;
  if (!(_DWORD)v1737)
    v1738 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFF7FFFFFLL | v1738;
  v1739 = WebKit::WebPreferencesKey::webGLUsingMetalKey(v1737);
  v1741 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1739, v1740);
  *v482 = *v482 & 0xFFFFFFFE | ((_DWORD)v1741 != 0);
  v1742 = WebKit::WebPreferencesKey::webGLEnabledKey(v1741);
  v1744 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1742, v1743);
  if ((_DWORD)v1744)
    v1745 = 0x200000;
  else
    v1745 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFFDFFFFFLL | v1745;
  v1746 = WebKit::WebPreferencesKey::webGPUEnabledKey(v1744);
  v1748 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1746, v1747);
  v1749 = 0x1000000;
  if (!(_DWORD)v1748)
    v1749 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFEFFFFFFLL | v1749;
  v1750 = WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(v1748);
  v1752 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1750, v1751);
  if ((_DWORD)v1752)
    v1753 = 0x2000000;
  else
    v1753 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFFDFFFFFFLL | v1753;
  v1754 = WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(v1752);
  v1756 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1754, v1755);
  v1757 = 0x2000;
  if (!(_DWORD)v1756)
    v1757 = 0;
  v1758 = *((_DWORD *)a2 + 180) & 0xFFFFDFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFDFFF | v1757;
  *((_BYTE *)a2 + 724) = BYTE4(v1758);
  v1759 = WebKit::WebPreferencesKey::webRTCDTMFEnabledKey(v1756);
  v1761 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1759, v1760);
  v1762 = 0x4000;
  if (!(_DWORD)v1761)
    v1762 = 0;
  v1763 = *((_DWORD *)a2 + 180) & 0xFFFFBFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFBFFF | v1762;
  *((_BYTE *)a2 + 724) = BYTE4(v1763);
  v1764 = WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(v1761);
  v1766 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1764, v1765);
  v1767 = 0x8000;
  if (!(_DWORD)v1766)
    v1767 = 0;
  v1768 = *((_DWORD *)a2 + 180) & 0xFFFF7FFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFF7FFF | v1767;
  *((_BYTE *)a2 + 724) = BYTE4(v1768);
  v1769 = WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(v1766);
  v1771 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1769, v1770);
  v1772 = 0x10000;
  if (!(_DWORD)v1771)
    v1772 = 0;
  v1773 = *((_DWORD *)a2 + 180) & 0xFFFEFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFEFFFF | v1772;
  *((_BYTE *)a2 + 724) = BYTE4(v1773);
  v1774 = WebKit::WebPreferencesKey::webRTCMediaPipelineAdditionalLoggingEnabledKey(v1771);
  v1776 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1774, v1775);
  if ((_DWORD)v1776)
    v1777 = 0x10000000;
  else
    v1777 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFFEFFFFFFFLL | v1777;
  v1778 = WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(v1776);
  v1780 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1778, v1779);
  v1781 = 4096;
  if (!(_DWORD)v1780)
    v1781 = 0;
  v1782 = *((_DWORD *)a2 + 180) & 0xFFFFEFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFEFFF | v1781;
  *((_BYTE *)a2 + 724) = BYTE4(v1782);
  v1783 = WebKit::WebPreferencesKey::peerConnectionEnabledKey(v1780);
  v1785 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1783, v1784);
  if ((_DWORD)v1785)
    v1786 = 2048;
  else
    v1786 = 0;
  v1787 = *v482 & 0xFFFFF7FF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFFF7FF | v1786;
  *((_BYTE *)a2 + 724) = BYTE4(v1787);
  v1788 = WebKit::WebPreferencesKey::webRTCRemoteVideoFrameEnabledKey(v1785);
  v1790 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1788, v1789);
  if ((_DWORD)v1790)
    v1791 = 0x40000;
  else
    v1791 = 0;
  v1792 = *v482 & 0xFFFBFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFFBFFFF | v1791;
  *((_BYTE *)a2 + 724) = BYTE4(v1792);
  v1793 = WebKit::WebPreferencesKey::webRTCSFrameTransformEnabledKey(v1790);
  v1795 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1793, v1794);
  v1796 = 0x80000;
  if (!(_DWORD)v1795)
    v1796 = 0;
  v1797 = *((_DWORD *)a2 + 180) & 0xFFF7FFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFF7FFFF | v1796;
  *((_BYTE *)a2 + 724) = BYTE4(v1797);
  v1798 = WebKit::WebPreferencesKey::webRTCSocketsProxyingEnabledKey(v1795);
  v1800 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1798, v1799);
  if ((_DWORD)v1800)
    v1801 = 0x100000;
  else
    v1801 = 0;
  v1802 = *v482 & 0xFFEFFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFEFFFFF | v1801;
  *((_BYTE *)a2 + 724) = BYTE4(v1802);
  v1803 = WebKit::WebPreferencesKey::webRTCVP9Profile0CodecEnabledKey(v1800);
  v1805 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1803, v1804);
  if ((_DWORD)v1805)
    v1806 = 0x200000;
  else
    v1806 = 0;
  v1807 = *v482 & 0xFFDFFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFDFFFFF | v1806;
  *((_BYTE *)a2 + 724) = BYTE4(v1807);
  v1808 = WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(v1805);
  v1810 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1808, v1809);
  v1811 = 0x400000;
  if (!(_DWORD)v1810)
    v1811 = 0;
  v1812 = *((_DWORD *)a2 + 180) & 0xFFBFFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFFBFFFFF | v1811;
  *((_BYTE *)a2 + 724) = BYTE4(v1812);
  v1813 = WebKit::WebPreferencesKey::webTransportEnabledKey(v1810);
  v1815 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1813, v1814);
  if ((_DWORD)v1815)
    v1816 = 0x200000000;
  else
    v1816 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFFDFFFFFFFFLL | v1816;
  v1817 = WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(v1815);
  v1819 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1817, v1818);
  v1820 = 128;
  if (!(_DWORD)v1819)
    v1820 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFFF7FLL | v1820;
  v1821 = WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(v1819);
  v1823 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1821, v1822);
  v1824 = 0x800000000;
  if (!(_DWORD)v1823)
    v1824 = 0;
  *((_QWORD *)a2 + 88) = *((_QWORD *)a2 + 88) & 0xFFFFFFF7FFFFFFFFLL | v1824;
  v1825 = WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(v1823);
  v1827 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1825, v1826);
  v1828 = 0x4000000;
  if (!(_DWORD)v1827)
    v1828 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFFFFFBFFFFFFLL | v1828;
  v1829 = WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(v1827);
  v1831 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1829, v1830);
  v1832 = 0x80000000;
  if (!(_DWORD)v1831)
    v1832 = 0;
  v1833 = *((_DWORD *)a2 + 180) & 0x7FFFFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0x7FFFFFFF | v1832;
  *((_BYTE *)a2 + 724) = BYTE4(v1833);
  v1834 = WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(v1831);
  v1836 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1834, v1835);
  if ((_DWORD)v1836)
    v1837 = 0x2000000;
  else
    v1837 = 0;
  v1838 = *v482 & 0xFDFFFFFF | ((unint64_t)*((unsigned __int8 *)a2 + 724) << 32);
  *v482 = *v482 & 0xFDFFFFFF | v1837;
  *((_BYTE *)a2 + 724) = BYTE4(v1838);
  PartyWebsiteDataRemovalLiveOnTestingEnabledKey = WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(v1836);
  v1841 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)PartyWebsiteDataRemovalLiveOnTestingEnabledKey, v1840);
  if ((_DWORD)v1841)
    v1842 = 0x200000000;
  else
    v1842 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFDFFFFFFFFLL | v1842;
  PartyWebsiteDataRemovalReproTestingEnabledKey = WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(v1841);
  v1845 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)PartyWebsiteDataRemovalReproTestingEnabledKey, v1844);
  v1846 = 0x400000000;
  if (!(_DWORD)v1845)
    v1846 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFBFFFFFFFFLL | v1846;
  v1847 = WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(v1845);
  v1849 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1847, v1848);
  if ((_DWORD)v1849)
    v1850 = 2048;
  else
    v1850 = 0;
  *v8 = *v8 & 0xFFFFFFFFFFFFF7FFLL | v1850;
  v1851 = WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(v1849);
  v1853 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1851, v1852);
  v1854 = 16;
  if (!(_DWORD)v1853)
    v1854 = 0;
  *((_QWORD *)a2 + 89) = *((_QWORD *)a2 + 89) & 0xFFFFFFFFFFFFFFEFLL | v1854;
  v1855 = WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(v1853);
  v1857 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1855, v1856);
  v1858 = 0x400000000000000;
  if (!(_DWORD)v1857)
    v1858 = 0;
  *((_QWORD *)a2 + 84) = *((_QWORD *)a2 + 84) & 0xFBFFFFFFFFFFFFFFLL | v1858;
  v1859 = WebKit::WebPreferencesKey::httpEquivEnabledKey(v1857);
  v1861 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1859, v1860);
  if ((_DWORD)v1861)
    v1862 = 0x80000;
  else
    v1862 = 0;
  *((_QWORD *)a2 + 85) = *((_QWORD *)a2 + 85) & 0xFFFFFFFFFFF7FFFFLL | v1862;
  v1863 = WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(v1861);
  v1865 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1863, v1864);
  v1866 = 0x10000000000;
  if (!(_DWORD)v1865)
    v1866 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFEFFFFFFFFFFLL | v1866;
  v1867 = WebKit::WebPreferencesKey::requestStorageAccessThrowsExceptionUntilReloadKey(v1865);
  v1869 = (WebKit::WebPreferencesKey *)WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1867, v1868);
  v1870 = 0x20000000000;
  if (!(_DWORD)v1869)
    v1870 = 0;
  *((_QWORD *)a2 + 86) = *((_QWORD *)a2 + 86) & 0xFFFFFDFFFFFFFFFFLL | v1870;
  v1871 = WebKit::WebPreferencesKey::cssWordBreakAutoPhraseEnabledKey(v1869);
  WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)v1871, v1872);
  return WebCore::Settings::setCSSWordBreakAutoPhraseEnabled(a2);
}

double WebKit::WebPreferencesStore::getDoubleValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2)
{
  return WebKit::valueForKey<double>((uint64_t)this, (uint64_t)this + 24, a2);
}

uint64_t WebKit::WebPreferencesStore::getUInt32ValueForKey(WebKit::WebPreferencesStore *this, WTF::StringImpl **a2)
{
  return WebKit::valueForKey<unsigned int>((uint64_t)this, (uint64_t)this + 24, a2);
}

uint64_t WebKit::WebPreferencesStore::getStringValueForKey@<X0>(WebKit::WebPreferencesStore *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  return WebKit::valueForKey<WTF::String>((uint64_t)this, (uint64_t)this + 24, a2, a3);
}

void WebContentServiceInitializer(WTF *a1, void *a2)
{
  const char *v4;
  uint64_t inited;
  _BOOL8 v6;
  _BOOL8 v7;
  _BOOL8 v8;
  int v9;
  _BOOL8 v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WebKit::WebProcess *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSC::ExecutableAllocator *v21;
  uint64_t v22;
  JSC::ExecutableAllocator *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  char v30;
  int v31;
  id v32;
  WTF::StringImpl **v33;
  char v34;
  uint64_t v35;
  int v36;
  xpc_object_t v37[4];

  WTF::initializeMainThread(a1);
  WebKit::EnvironmentUtilities::removeValuesEndingWith((WebKit::EnvironmentUtilities *)"DYLD_INSERT_LIBRARIES", "/WebProcessShim.dylib", v4);
  GSInitialize();
  inited = InitWebCoreThreadSystemInterface();
  if (a1)
    inited = a1;
  if (a2)
  {
    v6 = xpc_dictionary_get_BOOL(a2, "configure-jsc-for-testing");
    if (v6)
      JSC::Config::configureForTesting((JSC::Config *)v6);
    v7 = xpc_dictionary_get_BOOL(a2, "enable-captive-portal-mode");
    if (v7)
    {
      v21 = (JSC::ExecutableAllocator *)JSC::Options::initialize((JSC::Options *)v7);
      JSC::ExecutableAllocator::disableJIT(v21);
      v22 = MEMORY[0x1E0CC10F8];
      *(_WORD *)(MEMORY[0x1E0CC10F8] + 841) = 0;
      *(_BYTE *)(v22 + 1929) = 0;
      v9 = 1;
      *(_BYTE *)(v22 + 1474) = 1;
      *(_WORD *)(v22 + 1472) = 1;
    }
    else
    {
      v8 = xpc_dictionary_get_BOOL(a2, "disable-jit");
      if (v8)
      {
        v23 = (JSC::ExecutableAllocator *)JSC::Options::initialize((JSC::Options *)v8);
        JSC::ExecutableAllocator::disableJIT(v23);
        v9 = 1;
      }
      else
      {
        v9 = 0;
      }
    }
    v10 = xpc_dictionary_get_BOOL(a2, "enable-shared-array-buffer");
    if (v10)
    {
      JSC::Options::initialize((JSC::Options *)v10);
      *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1963) = 1;
      inited = xpc_dictionary_get_BOOL(a2, "disable-jit-cage");
      if (!(_DWORD)inited)
        goto LABEL_48;
    }
    else
    {
      inited = xpc_dictionary_get_BOOL(a2, "disable-jit-cage");
      if ((inited & 1) == 0)
      {
        if (!v9)
          goto LABEL_12;
LABEL_48:
        inited = JSC::Options::notifyOptionsChanged((JSC::Options *)inited);
        goto LABEL_12;
      }
    }
    inited = JSC::Options::initialize((JSC::Options *)inited);
    *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1921) = 0;
    goto LABEL_48;
  }
LABEL_12:
  v37[0] = &off_1E34B8870;
  v37[1] = a1;
  v37[2] = a2;
  WebKit::InitializeWebKit2((WebKit *)inited);
  v30 = 0;
  v31 = 0;
  v35 = 0;
  v36 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  LOBYTE(v29) = 0;
  v32 = 0;
  v33 = 0;
  if (!WebKit::XPCServiceInitializerDelegate::getConnectionIdentifier((uint64_t)v37, (uint64_t)&v31)
    || !WebKit::XPCServiceInitializerDelegate::getClientIdentifier(v37, &v27))
  {
    v17 = (WTF::StringImpl **)WTF::exitProcess((WTF *)1);
    goto LABEL_43;
  }
  WebKit::XPCServiceInitializerDelegate::getClientBundleIdentifier(v37, &v28);
  WebKit::XPCServiceInitializerDelegate::getClientSDKAlignedBehaviors((uint64_t)v37, (uint64_t)&v35);
  v25 = 0;
  if (!WebKit::XPCServiceInitializerDelegate::getProcessIdentifier((uint64_t)v37, &v25))
    goto LABEL_41;
  if (!v30)
    v30 = 1;
  v29 = v25;
  if (!WebKit::XPCServiceInitializerDelegate::getClientProcessName(v37, &v26)
    || (WebKit::XPCServiceInitializerDelegate::getExtraInitializationData((uint64_t)v37, (uint64_t *)&v33) & 1) == 0)
  {
LABEL_41:
    v17 = (WTF::StringImpl **)WTF::exitProcess((WTF *)1);
LABEL_43:
    __break(1u);
LABEL_44:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v16);
    goto LABEL_25;
  }
  voucher_replace_default_voucher();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v24 = (WTF::StringImpl *)v37[3];
  v13 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)&v33, &v24, v11);
  v14 = v24;
  v24 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      v14 = (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v13)
    v14 = (WTF::StringImpl *)WTF::Thread::setGlobalMaxQOSClass((WTF::Thread *)0x11, (uint64_t)v12);
  v34 = 0;
  v15 = WebKit::WebProcess::singleton(v14);
  WebKit::AuxiliaryProcess::initialize(v15, (const WebKit::AuxiliaryProcessInitializationParameters *)&v26);
  v17 = v33;
  if (v33)
    goto LABEL_44;
LABEL_25:
  if (v32)

  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v27;
  v27 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v16);
    else
      *(_DWORD *)v20 -= 2;
  }
  WebKit::XPCServiceInitializerDelegate::~XPCServiceInitializerDelegate((WebKit::XPCServiceInitializerDelegate *)v37);
}

void sub_196D1A658(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WebKit::AuxiliaryProcessInitializationParameters::~AuxiliaryProcessInitializationParameters((WebKit::AuxiliaryProcessInitializationParameters *)&a11, a2);
  WebKit::XPCServiceInitializerDelegate::~XPCServiceInitializerDelegate((WebKit::XPCServiceInitializerDelegate *)(v11 - 64));
  _Unwind_Resume(a1);
}

uint64_t WebKit::EnvironmentUtilities::removeValuesEndingWith(WebKit::EnvironmentUtilities *this, const char *a2, const char *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const char *v9;
  void *v10;
  WTF *v11;
  WTF::StringImpl *v12;

  result = (uint64_t)getenv((const char *)this);
  if (result)
  {
    v6 = result;
    v7 = strlen((const char *)result) | 0x100000000;
    if (a2)
      strlen(a2);
    WebKit::EnvironmentUtilities::stripEntriesEndingWith(v6, v7, &v12);
    v8 = v12;
    if (v12 && *((_DWORD *)v12 + 1))
    {
      WTF::String::utf8();
      if (v11)
        v9 = (char *)v11 + 16;
      else
        v9 = 0;
      setenv((const char *)this, v9, 1);
      result = (uint64_t)v11;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
          result = WTF::fastFree(v11, v10);
        else
          --*(_DWORD *)v11;
      }
      v8 = v12;
    }
    else
    {
      result = unsetenv((const char *)this);
    }
    v12 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        return WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  return result;
}

void NetworkServiceInitializer(WTF *a1, uint64_t *a2)
{
  WTF *v4;
  id v5;

  WTF::initializeMainThread(a1);
  v5 = a1;
  if (a1)
    v4 = a1;
  WebKit::XPCServiceInitializer<WebKit::NetworkProcess,WebKit::NetworkServiceInitializerDelegate>((uint64_t)&v5, a2);
  if (v5)

}

void sub_196D1A830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)

  _Unwind_Resume(exception_object);
}

void WebKit::XPCServiceInitializer<WebKit::GPUProcess,WebKit::GPUServiceInitializerDelegate>(uint64_t a1, uint64_t *xdict)
{
  uint64_t *v2;
  void **v3;
  uint64_t v4;
  _BOOL8 v5;
  _BOOL8 v6;
  int v7;
  _BOOL8 v8;
  void *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  uint64_t *v14;
  WTF::StringImpl *v15;
  JSC::ExecutableAllocator *v16;
  uint64_t v17;
  JSC::ExecutableAllocator *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  void (**v32)(WebKit::XPCServiceInitializerDelegate *__hidden);
  id v33;
  uint64_t *v34;
  WTF::StringImpl *v35;

  v2 = xdict;
  v3 = (void **)a1;
  if (!xdict)
    goto LABEL_9;
  v4 = xpc_dictionary_get_BOOL(xdict, "configure-jsc-for-testing");
  if ((_DWORD)v4)
    goto LABEL_28;
  while (1)
  {
    v5 = xpc_dictionary_get_BOOL(v2, "enable-captive-portal-mode");
    if (v5)
    {
      v16 = (JSC::ExecutableAllocator *)JSC::Options::initialize((JSC::Options *)v5);
      JSC::ExecutableAllocator::disableJIT(v16);
      v17 = MEMORY[0x1E0CC10F8];
      *(_WORD *)(MEMORY[0x1E0CC10F8] + 841) = 0;
      *(_BYTE *)(v17 + 1929) = 0;
      v7 = 1;
      *(_BYTE *)(v17 + 1474) = 1;
      *(_WORD *)(v17 + 1472) = 1;
    }
    else
    {
      v6 = xpc_dictionary_get_BOOL(v2, "disable-jit");
      if (v6)
      {
        v18 = (JSC::ExecutableAllocator *)JSC::Options::initialize((JSC::Options *)v6);
        JSC::ExecutableAllocator::disableJIT(v18);
        v7 = 1;
      }
      else
      {
        v7 = 0;
      }
    }
    v8 = xpc_dictionary_get_BOOL(v2, "enable-shared-array-buffer");
    if (!v8)
    {
      a1 = xpc_dictionary_get_BOOL(v2, "disable-jit-cage");
      if ((a1 & 1) == 0)
      {
        if (!v7)
          goto LABEL_9;
        goto LABEL_32;
      }
LABEL_31:
      a1 = JSC::Options::initialize((JSC::Options *)a1);
      *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1921) = 0;
      goto LABEL_32;
    }
    JSC::Options::initialize((JSC::Options *)v8);
    *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1963) = 1;
    a1 = xpc_dictionary_get_BOOL(v2, "disable-jit-cage");
    if ((_DWORD)a1)
      goto LABEL_31;
LABEL_32:
    a1 = JSC::Options::notifyOptionsChanged((JSC::Options *)a1);
LABEL_9:
    v9 = *v3;
    *v3 = 0;
    v33 = v9;
    v34 = v2;
    v32 = &off_1E34B4278;
    WebKit::InitializeWebKit2((WebKit *)a1);
    if ((WebKit::XPCServiceInitializerDelegate::checkEntitlements((WebKit::XPCServiceInitializerDelegate *)&v32) & 1) != 0)
    {
      v25 = 0;
      v2 = (uint64_t *)&v21;
      v26 = 0;
      v30 = 0;
      v31 = 0;
      v22 = 0;
      v23 = 0;
      v21 = 0;
      LOBYTE(v24) = 0;
      v27 = 0;
      v28 = 0;
      if (WebKit::XPCServiceInitializerDelegate::getConnectionIdentifier((uint64_t)&v32, (uint64_t)&v26)
        && WebKit::XPCServiceInitializerDelegate::getClientIdentifier((xpc_object_t *)&v32, &v22))
      {
        WebKit::XPCServiceInitializerDelegate::getClientBundleIdentifier((xpc_object_t *)&v32, &v23);
        WebKit::XPCServiceInitializerDelegate::getClientSDKAlignedBehaviors((uint64_t)&v32, (uint64_t)&v30);
        v20 = 0;
        if (WebKit::XPCServiceInitializerDelegate::getProcessIdentifier((uint64_t)&v32, &v20))
        {
          if (!v25)
            v25 = 1;
          v24 = v20;
          if (WebKit::XPCServiceInitializerDelegate::getClientProcessName((xpc_object_t *)&v32, &v21))
          {
            v2 = &v28;
            if ((WebKit::XPCServiceInitializerDelegate::getExtraInitializationData((uint64_t)&v32, &v28) & 1) != 0)
              break;
          }
        }
      }
    }
    v4 = WTF::exitProcess((WTF *)1);
    __break(1u);
LABEL_28:
    JSC::Config::configureForTesting((JSC::Config *)v4);
  }
  voucher_replace_default_voucher();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = v35;
  v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(&v28, &v19, v10);
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v12)
    v13 = (WTF::StringImpl *)WTF::Thread::setGlobalMaxQOSClass((WTF::Thread *)0x11, (uint64_t)v11);
  v29 = 3;
  v14 = WebKit::GPUProcess::singleton(v13);
  WebKit::AuxiliaryProcess::initialize((WebKit::AuxiliaryProcess *)v14, (const WebKit::AuxiliaryProcessInitializationParameters *)&v21);
  WebKit::AuxiliaryProcessInitializationParameters::~AuxiliaryProcessInitializationParameters((WebKit::AuxiliaryProcessInitializationParameters *)&v21, v15);
  v32 = &off_1E34B8870;
  if (v33)

}

void sub_196D1AB08(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v13;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WebKit::AuxiliaryProcessInitializationParameters::~AuxiliaryProcessInitializationParameters((WebKit::AuxiliaryProcessInitializationParameters *)&a11, a2);
  *(_QWORD *)(v11 - 64) = &off_1E34B8870;
  v13 = *(void **)(v11 - 56);
  if (v13)

  _Unwind_Resume(a1);
}

void WebKit::XPCServiceInitializer<WebKit::NetworkProcess,WebKit::NetworkServiceInitializerDelegate>(uint64_t a1, uint64_t *xdict)
{
  uint64_t *v2;
  void **v3;
  uint64_t v4;
  _BOOL8 v5;
  _BOOL8 v6;
  int v7;
  _BOOL8 v8;
  void *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  JSC::ExecutableAllocator *v14;
  uint64_t v15;
  JSC::ExecutableAllocator *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void (**v30)(WebKit::XPCServiceInitializerDelegate *__hidden);
  id v31;
  uint64_t *v32;
  WTF::StringImpl *v33;

  v2 = xdict;
  v3 = (void **)a1;
  if (!xdict)
    goto LABEL_9;
  v4 = xpc_dictionary_get_BOOL(xdict, "configure-jsc-for-testing");
  if ((_DWORD)v4)
    goto LABEL_30;
  while (1)
  {
    v5 = xpc_dictionary_get_BOOL(v2, "enable-captive-portal-mode");
    if (v5)
    {
      v14 = (JSC::ExecutableAllocator *)JSC::Options::initialize((JSC::Options *)v5);
      JSC::ExecutableAllocator::disableJIT(v14);
      v15 = MEMORY[0x1E0CC10F8];
      *(_WORD *)(MEMORY[0x1E0CC10F8] + 841) = 0;
      *(_BYTE *)(v15 + 1929) = 0;
      v7 = 1;
      *(_BYTE *)(v15 + 1474) = 1;
      *(_WORD *)(v15 + 1472) = 1;
    }
    else
    {
      v6 = xpc_dictionary_get_BOOL(v2, "disable-jit");
      if (v6)
      {
        v16 = (JSC::ExecutableAllocator *)JSC::Options::initialize((JSC::Options *)v6);
        JSC::ExecutableAllocator::disableJIT(v16);
        v7 = 1;
      }
      else
      {
        v7 = 0;
      }
    }
    v8 = xpc_dictionary_get_BOOL(v2, "enable-shared-array-buffer");
    if (!v8)
    {
      a1 = xpc_dictionary_get_BOOL(v2, "disable-jit-cage");
      if ((a1 & 1) == 0)
      {
        if (!v7)
          goto LABEL_9;
        goto LABEL_34;
      }
LABEL_33:
      a1 = JSC::Options::initialize((JSC::Options *)a1);
      *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1921) = 0;
      goto LABEL_34;
    }
    JSC::Options::initialize((JSC::Options *)v8);
    *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1963) = 1;
    a1 = xpc_dictionary_get_BOOL(v2, "disable-jit-cage");
    if ((_DWORD)a1)
      goto LABEL_33;
LABEL_34:
    a1 = JSC::Options::notifyOptionsChanged((JSC::Options *)a1);
LABEL_9:
    v9 = *v3;
    *v3 = 0;
    v31 = v9;
    v32 = v2;
    v30 = &off_1E34B4A30;
    WebKit::InitializeWebKit2((WebKit *)a1);
    if ((WebKit::XPCServiceInitializerDelegate::checkEntitlements((WebKit::XPCServiceInitializerDelegate *)&v30) & 1) != 0)
    {
      v23 = 0;
      v2 = (uint64_t *)&v19;
      v24 = 0;
      v28 = 0;
      v29 = 0;
      v20 = 0;
      v21 = 0;
      v19 = 0;
      LOBYTE(v22) = 0;
      v25 = 0;
      v26 = 0;
      if (WebKit::XPCServiceInitializerDelegate::getConnectionIdentifier((uint64_t)&v30, (uint64_t)&v24)
        && WebKit::XPCServiceInitializerDelegate::getClientIdentifier((xpc_object_t *)&v30, &v20))
      {
        WebKit::XPCServiceInitializerDelegate::getClientBundleIdentifier((xpc_object_t *)&v30, &v21);
        WebKit::XPCServiceInitializerDelegate::getClientSDKAlignedBehaviors((uint64_t)&v30, (uint64_t)&v28);
        v18 = 0;
        if (WebKit::XPCServiceInitializerDelegate::getProcessIdentifier((uint64_t)&v30, &v18))
        {
          if (!v23)
            v23 = 1;
          v22 = v18;
          if (WebKit::XPCServiceInitializerDelegate::getClientProcessName((xpc_object_t *)&v30, &v19))
          {
            v2 = &v26;
            if ((WebKit::XPCServiceInitializerDelegate::getExtraInitializationData((uint64_t)&v30, &v26) & 1) != 0)
              break;
          }
        }
      }
    }
    v4 = WTF::exitProcess((WTF *)1);
    __break(1u);
LABEL_30:
    JSC::Config::configureForTesting((JSC::Config *)v4);
  }
  voucher_replace_default_voucher();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = v33;
  v12 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(&v26, &v17, v10);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v12)
    WTF::Thread::setGlobalMaxQOSClass((WTF::Thread *)0x11, (uint64_t)v11);
  v27 = 1;
  if ((_MergedGlobals_62 & 1) == 0)
  {
    WebKit::NetworkProcess::NetworkProcess(&unk_1EE3413A8, &v19);
    _MergedGlobals_62 = 1;
  }
  WebKit::AuxiliaryProcessInitializationParameters::~AuxiliaryProcessInitializationParameters((WebKit::AuxiliaryProcessInitializationParameters *)&v19, v11);
  v30 = &off_1E34B8870;
  if (v31)

}

void sub_196D1AE4C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v13;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WebKit::AuxiliaryProcessInitializationParameters::~AuxiliaryProcessInitializationParameters((WebKit::AuxiliaryProcessInitializationParameters *)&a11, a2);
  *(_QWORD *)(v11 - 64) = &off_1E34B8870;
  v13 = *(void **)(v11 - 56);
  if (v13)

  _Unwind_Resume(a1);
}

void WebKit::AuxiliaryProcessInitializationParameters::~AuxiliaryProcessInitializationParameters(WebKit::AuxiliaryProcessInitializationParameters *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 7);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)

  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

uint64_t WebKit::XPCServiceInitializerDelegate::getExtraInitializationData(uint64_t a1, uint64_t *a2)
{
  xpc_object_t value;
  const char *string;
  const char *v5;
  const char *v6;
  const char *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const char *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  const char *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34[2];
  __int128 v35;
  _OWORD v36[2];

  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 16), "extra-initialization-data");
  string = xpc_dictionary_get_string(value, "inspector-process");
  WTF::String::String((WTF::String *)&v33, string);
  if (v33)
  {
    if (*((_DWORD *)v33 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v34[0] = *(WTF::StringImpl **)&v36[0];
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t)v36, a2, v34, (WTF::StringImpl *)&v33);
      v19 = v34[0];
      v34[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
  }
  v5 = xpc_dictionary_get_string(value, "service-worker-process");
  WTF::String::String((WTF::String *)&v32, v5);
  if (v32)
  {
    if (*((_DWORD *)v32 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v34[0] = *(WTF::StringImpl **)&v36[0];
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>(a2, v34, (WTF::StringImpl *)&v32, (uint64_t)v36);
      v21 = v34[0];
      v34[0] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
  }
  v6 = xpc_dictionary_get_string(value, "registrable-domain");
  WTF::String::String((WTF::String *)&v31, v6);
  if (v31)
  {
    if (*((_DWORD *)v31 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v34[0] = *(WTF::StringImpl **)&v36[0];
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String>(a2, v34, (WTF::StringImpl *)&v31, (uint64_t)v36);
      v23 = v34[0];
      v34[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
  }
  v7 = xpc_dictionary_get_string(value, "is-prewarmed");
  WTF::String::String((WTF::String *)&v30, v7);
  if (v30)
  {
    if (*((_DWORD *)v30 + 1))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v34[0] = *(WTF::StringImpl **)&v36[0];
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t)v36, a2, v34, (WTF::StringImpl *)&v30);
      v9 = v34[0];
      v34[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  xpc_connection_get_audit_token();
  *(_OWORD *)v34 = v36[0];
  v35 = v36[1];
  if (!sandbox_check_by_audit_token())
  {
    v24 = xpc_dictionary_get_string(value, "user-directory-suffix");
    WTF::String::String((WTF::String *)v34, v24);
    v26 = v34[0];
    if (v34[0])
    {
      if (!*((_DWORD *)v34[0] + 1))
      {
        v34[0] = 0;
LABEL_52:
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
        goto LABEL_13;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = *(WTF::StringImpl **)&v36[0];
      WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t)v36, a2, &v29, (WTF::StringImpl *)v34);
      v27 = v29;
      v29 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v25);
        else
          *(_DWORD *)v27 -= 2;
      }
      v26 = v34[0];
      v34[0] = 0;
      if (v26)
        goto LABEL_52;
    }
  }
LABEL_13:
  v10 = xpc_dictionary_get_string(value, "always-runs-at-background-priority");
  WTF::String::String((WTF::String *)v34, v10);
  v12 = v34[0];
  if (!v34[0])
    goto LABEL_18;
  if (!*((_DWORD *)v34[0] + 1))
  {
    v34[0] = 0;
LABEL_16:
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
    goto LABEL_18;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v29 = *(WTF::StringImpl **)&v36[0];
  WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t)v36, a2, &v29, (WTF::StringImpl *)v34);
  v28 = v29;
  v29 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v11);
    else
      *(_DWORD *)v28 -= 2;
  }
  v12 = v34[0];
  v34[0] = 0;
  if (v12)
    goto LABEL_16;
LABEL_18:
  v13 = v30;
  v30 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v31;
  v31 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v32;
  v32 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v33;
  v33 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v11);
    else
      *(_DWORD *)v16 -= 2;
  }
  return 1;
}

void sub_196D1B3BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::XPCServiceInitializerDelegate::getClientBundleIdentifier(xpc_object_t *this, WTF::StringImpl **a2)
{
  const char *string;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  string = xpc_dictionary_get_string(this[2], "client-bundle-identifier");
  WTF::String::String((WTF::String *)&v10, string);
  v5 = v10;
  v10 = 0;
  v6 = *a2;
  *a2 = v5;
  if (!v6)
    return v5 && *((_DWORD *)v5 + 1) != 0;
  v7 = *(_DWORD *)v6 - 2;
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::destroy(v6, v4);
    v6 = v10;
    v10 = 0;
    if (!v6)
      goto LABEL_4;
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v9);
      goto LABEL_4;
    }
  }
  *(_DWORD *)v6 = v7;
LABEL_4:
  v5 = *a2;
  return v5 && *((_DWORD *)v5 + 1) != 0;
}

BOOL WebKit::XPCServiceInitializerDelegate::getConnectionIdentifier(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  void *v7;
  id v8;
  void *v9;

  v4 = xpc_dictionary_copy_mach_send();
  v5 = v4 - 1;
  if ((v4 - 1) <= 0xFFFFFFFD)
  {
    v6 = v4;
    v7 = *(void **)(a1 + 8);
    if (v7)
      v8 = v7;
    *(_DWORD *)a2 = v6;
    v9 = *(void **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v7;
    if (v9)

  }
  return v5 < 0xFFFFFFFE;
}

unint64_t WTF::parseInteger<unsigned long long>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a2 & 0xFF00000000) != 0)
    return WTF::parseInteger<unsigned long long,unsigned char>(a1, a2, a3, 0);
  else
    return WTF::parseInteger<unsigned long long,char16_t>(a1, a2, a3, 0);
}

BOOL WebKit::XPCServiceInitializerDelegate::getClientProcessName(xpc_object_t *this, WTF::StringImpl **a2)
{
  WTF::String *string;
  const char *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  string = (WTF::String *)xpc_dictionary_get_string(this[2], "ui-process-name");
  WTF::String::fromUTF8((uint64_t *)&v11, string, v4);
  v6 = v11;
  v11 = 0;
  v7 = *a2;
  *a2 = v6;
  if (!v7)
    return v6 && *((_DWORD *)v6 + 1) != 0;
  v8 = *(_DWORD *)v7 - 2;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, v5);
    v7 = v11;
    v11 = 0;
    if (!v7)
      goto LABEL_4;
    v8 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v10);
      goto LABEL_4;
    }
  }
  *(_DWORD *)v7 = v8;
LABEL_4:
  v6 = *a2;
  return v6 && *((_DWORD *)v6 + 1) != 0;
}

BOOL WebKit::XPCServiceInitializerDelegate::getClientIdentifier(xpc_object_t *this, WTF::StringImpl **a2)
{
  WTF::String *string;
  const char *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  string = (WTF::String *)xpc_dictionary_get_string(this[2], "client-identifier");
  WTF::String::fromUTF8((uint64_t *)&v11, string, v4);
  v6 = v11;
  v11 = 0;
  v7 = *a2;
  *a2 = v6;
  if (!v7)
    return v6 && *((_DWORD *)v6 + 1) != 0;
  v8 = *(_DWORD *)v7 - 2;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, v5);
    v7 = v11;
    v11 = 0;
    if (!v7)
      goto LABEL_4;
    v8 = *(_DWORD *)v7 - 2;
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v10);
      goto LABEL_4;
    }
  }
  *(_DWORD *)v7 = v8;
LABEL_4:
  v6 = *a2;
  return v6 && *((_DWORD *)v6 + 1) != 0;
}

uint64_t WebKit::XPCServiceInitializerDelegate::checkEntitlements(WebKit::XPCServiceInitializerDelegate *this)
{
  return 1;
}

void WebKit::XPCServiceInitializerDelegate::~XPCServiceInitializerDelegate(WebKit::XPCServiceInitializerDelegate *this)
{
  void *v1;

  *(_QWORD *)this = &off_1E34B8870;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1E34B8870;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)

  JUMPOUT(0x19AEB936CLL);
}

uint64_t WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF::StringImpl *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl **v12;
  int i;
  unsigned int v14;
  WTF::StringImpl **v15;
  WTF *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v8 + 16 * (v11 & v9));
    v16 = *v15;
    if (!*v15)
    {
      if (v12)
      {
        *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v15 = v12;
      }
      WTF::String::operator=(v15, (WTF::StringImpl *)a3);
      result = (uint64_t)WTF::String::operator=(v15 + 1, a4);
      v18 = *a2;
      if (*a2)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *a2;
      if (*a2)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_16;
      }
      else if (3 * v23 > 4 * v22)
      {
LABEL_16:
        v24 = v20 + 16 * v23;
        v25 = 1;
        goto LABEL_17;
      }
      result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v15);
      v15 = (WTF::StringImpl **)result;
      v20 = *a2;
      if (*a2)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_16;
    }
    if (v16 == (WTF *)-1)
    {
      v12 = (WTF::StringImpl **)(v8 + 16 * v14);
      goto LABEL_24;
    }
    result = WTF::equal(v16, *a3, (const WTF::StringImpl *)a3);
    if ((_DWORD)result)
      break;
LABEL_24:
    v11 = i + v14;
  }
  v26 = *a2;
  if (*a2)
    v27 = *(unsigned int *)(v26 - 4);
  else
    v27 = 0;
  v25 = 0;
  v24 = v26 + 16 * v27;
LABEL_17:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v24;
  *(_BYTE *)(a1 + 16) = v25;
  return result;
}

uint64_t GPUServiceInitializer(WTF *a1, uint64_t *a2)
{
  uint64_t v4;
  JSC::Options *v5;
  JSC::ExecutableAllocator *v6;
  JSC::Options *v7;
  WTF *v8;
  WTF::Config *v9;
  WTF *v11;

  v4 = MEMORY[0x1E0CC10F8];
  *(_WORD *)(MEMORY[0x1E0CC10F8] + 482) = 257;
  *(_BYTE *)(v4 + 146) = 1;
  v5 = (JSC::Options *)WTF::initializeMainThread(a1);
  v6 = (JSC::ExecutableAllocator *)JSC::Options::initialize(v5);
  v7 = (JSC::Options *)JSC::ExecutableAllocator::disableJIT(v6);
  JSC::Options::notifyOptionsChanged(v7);
  v11 = a1;
  if (a1)
    v8 = a1;
  WebKit::XPCServiceInitializer<WebKit::GPUProcess,WebKit::GPUServiceInitializerDelegate>((uint64_t)&v11, a2);
  if (v11)

  return WTF::Config::finalize(v9);
}

void sub_196D1BA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)

  _Unwind_Resume(exception_object);
}

void WebKit::ProcessLauncher::~ProcessLauncher(WebKit::ProcessLauncher *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::ProcessLauncher::~ProcessLauncher(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl **v3;
  uint64_t v4;
  unsigned int *v5;
  void *v6;
  char v7;

  *(_QWORD *)this = off_1E34B2968;
  if (*((_BYTE *)this + 56))
    WebKit::ExtensionProcess::invalidate((WebKit::ProcessLauncher *)((char *)this + 40));
  if (*((_BYTE *)this + 104))
    kdebug_trace();
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 11);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  if (*((_BYTE *)this + 56))
  {
    v4 = *((unsigned int *)this + 12);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, char *))off_1E34B2978[v4])(&v7, (char *)this + 40);
    *((_DWORD *)this + 12) = -1;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebKit::LaunchGrant,(WTF::DestructionThread)0>::deref(v5);
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
    os_release(v6);
}

uint64_t WebKit::OriginStorageManager::StorageBucket::localStorageManager(WebKit::OriginStorageManager::StorageBucket *this, uint64_t a2)
{
  uint64_t result;
  char *v4;
  _QWORD *v6;
  _QWORD *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v4 = (char *)this + 32;
  result = *((_QWORD *)this + 4);
  if (!result)
  {
    WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath(this, &v10);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    v7 = WebKit::LocalStorageManager::LocalStorageManager(v6, (_DWORD **)&v10, a2);
    v8 = (WTF *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v7;
    if (v8)
      std::default_delete<WebKit::LocalStorageManager>::operator()[abi:sn180100]((int)v4, v8);
    v9 = v10;
    v10 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    return *(_QWORD *)v4;
  }
  return result;
}

unint64_t WebKit::StorageAreaBase::nextMessageIdentifier(WebKit::StorageAreaBase *this)
{
  unint64_t v1;
  unint64_t result;

  do
  {
    v1 = __ldaxr(&WebKit::StorageAreaBase::nextMessageIdentifier(void)::currentIdentifier);
    result = v1 + 1;
  }
  while (__stlxr(v1 + 1, &WebKit::StorageAreaBase::nextMessageIdentifier(void)::currentIdentifier));
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
          {
            WTF::StringImpl::destroy(v6, a2);
            v5 = *v4;
          }
          else
          {
            *(_DWORD *)v6 -= 2;
          }
        }
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WebKit::NetworkStorageManager::removeOriginStorageManagerIfPossible(WebKit::NetworkStorageManager *this, const WebCore::ClientOrigin *a2)
{
  uint64_t *v3;
  uint64_t v4;
  WebKit::OriginStorageManager **v5;
  uint64_t v6;
  WebKit::OriginStorageManager::StorageBucket *v7;
  WebKit::OriginStorageManager::StorageBucket *v8;
  uint64_t result;
  const WTF::String *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v3 = (uint64_t *)((char *)this + 80);
  v4 = WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>((uint64_t *)this + 10, (uint64_t)a2);
  v5 = (WebKit::OriginStorageManager **)v4;
  v6 = *((_QWORD *)this + 10);
  if (v6)
    v6 += 72 * *(unsigned int *)(v6 - 4);
  if (v6 == v4)
    return 1;
  v7 = WebKit::OriginStorageManager::defaultBucket(*(WebKit::OriginStorageManager **)(v4 + 64));
  if ((WebKit::OriginStorageManager::StorageBucket::isActive(v7) & 1) != 0)
    return 0;
  v8 = WebKit::OriginStorageManager::defaultBucket(v5[8]);
  if (WebKit::OriginStorageManager::StorageBucket::hasDataInMemory(v8))
    return 0;
  WebKit::OriginStorageManager::deleteEmptyDirectory((unsigned __int8 *)v5[8]);
  WebKit::deleteEmptyOriginDirectory((WebKit::OriginStorageManager *)((char *)v5[8] + 16), v10);
  if (*v3)
  {
    v11 = *v3 + 72 * *(unsigned int *)(*v3 - 4);
    if ((WebKit::OriginStorageManager **)v11 == v5)
      return 1;
  }
  else
  {
    if (!v5)
      return 1;
    v11 = 0;
  }
  if ((WebKit::OriginStorageManager **)v11 == v5)
    return 1;
  WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>>::customDeleteBucket((WebCore::ClientOrigin *)v5);
  ++*(_DWORD *)(*v3 - 16);
  v12 = *v3;
  v13 = *v3 ? *(_DWORD *)(v12 - 12) - 1 : -1;
  *(_DWORD *)(v12 - 12) = v13;
  v14 = *v3;
  if (!*v3)
    return 1;
  v15 = 6 * *(_DWORD *)(v14 - 12);
  v16 = *(_DWORD *)(v14 - 4);
  result = 1;
  if (v15 < v16 && v16 >= 9)
  {
    WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::rehash(v3, v16 >> 1, 0);
    return 1;
  }
  return result;
}

WebKit::OriginStorageManager::StorageBucket *WebKit::OriginStorageManager::defaultBucket(WebKit::OriginStorageManager *this)
{
  uint64_t v1;
  WebKit::OriginStorageManager::StorageBucket **v2;
  WebKit::OriginStorageManager::StorageBucket *v4;
  WebKit::OriginStorageManager::StorageBucket *v5;
  WTF *v6;
  void *v7;
  _QWORD v8[2];
  WebKit::OriginStorageManager::StorageBucket *v9;

  v2 = (WebKit::OriginStorageManager::StorageBucket **)((char *)this + 8);
  v1 = *((_QWORD *)this + 1);
  if (!v1)
  {
    v8[0] = "default";
    v8[1] = 8;
    std::make_unique[abi:sn180100]<WebKit::OriginStorageManager::StorageBucket,WTF::String &,WTF::ASCIILiteral,WTF::String &,WTF::String &,WTF::String &,WebKit::UnifiedOriginStorageLevel &>((_DWORD **)this + 2, (uint64_t)v8, (_DWORD **)this + 3, (_DWORD **)this + 4, (_DWORD **)this + 5, (char *)this + 56, (uint64_t *)&v9);
    v4 = v9;
    v9 = 0;
    std::unique_ptr<WebKit::OriginStorageManager::StorageBucket>::reset[abi:sn180100](v2, v4);
    v5 = v9;
    v9 = 0;
    if (v5)
    {
      WebKit::OriginStorageManager::StorageBucket::~StorageBucket(v5);
      WTF::fastFree(v6, v7);
    }
    return *v2;
  }
  return (WebKit::OriginStorageManager::StorageBucket *)v1;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::StorageBucket(uint64_t result, _DWORD *a2, _DWORD **a3, _DWORD **a4, _DWORD **a5, _DWORD **a6, char a7)
{
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;

  if (a2)
    *a2 += 2;
  *(_QWORD *)result = a2;
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  v8 = *a4;
  if (*a4)
    *v8 += 2;
  *(_QWORD *)(result + 40) = v8;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  v9 = *a5;
  if (*a5)
    *v9 += 2;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 72) = v9;
  v10 = *a6;
  if (*a6)
    *v10 += 2;
  *(_QWORD *)(result + 96) = v10;
  *(_QWORD *)(result + 104) = 0;
  *(_BYTE *)(result + 112) = a7;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  return result;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::isActive(WebKit::OriginStorageManager::StorageBucket *this)
{
  WebKit::FileSystemStorageManager *v2;
  WebKit::LocalStorageManager *v3;
  WebKit::SessionStorageManager *v4;
  WebKit::FileSystemStorageManager *v5;
  uint64_t result;

  v2 = (WebKit::FileSystemStorageManager *)*((_QWORD *)this + 3);
  if (v2 && WebKit::FileSystemStorageManager::isActive(v2))
    return 1;
  v3 = (WebKit::LocalStorageManager *)*((_QWORD *)this + 4);
  if (v3)
  {
    if ((WebKit::LocalStorageManager::isActive(v3) & 1) != 0)
      return 1;
  }
  v4 = (WebKit::SessionStorageManager *)*((_QWORD *)this + 7);
  if (v4)
  {
    if ((WebKit::SessionStorageManager::isActive(v4) & 1) != 0)
      return 1;
  }
  v5 = (WebKit::FileSystemStorageManager *)*((_QWORD *)this + 8);
  if (v5)
  {
    if (WebKit::FileSystemStorageManager::isActive(v5))
      return 1;
  }
  result = *((_QWORD *)this + 11);
  if (result)
    return WebKit::CacheStorageManager::isActive((WebKit::CacheStorageManager *)result);
  return result;
}

BOOL WebKit::OriginStorageManager::StorageBucket::hasDataInMemory(WebKit::OriginStorageManager::StorageBucket *this)
{
  WebKit::LocalStorageManager *v2;
  WebKit::SessionStorageManager *v3;
  WebKit::IDBStorageManager *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = (WebKit::LocalStorageManager *)*((_QWORD *)this + 4);
  if (v2 && WebKit::LocalStorageManager::hasDataInMemory(v2))
    return 1;
  v3 = (WebKit::SessionStorageManager *)*((_QWORD *)this + 7);
  if (v3)
  {
    if (WebKit::SessionStorageManager::hasDataInMemory(v3))
      return 1;
  }
  v4 = (WebKit::IDBStorageManager *)*((_QWORD *)this + 8);
  if (v4)
  {
    if ((WebKit::IDBStorageManager::hasDataInMemory(v4) & 1) != 0)
      return 1;
  }
  v5 = *((_QWORD *)this + 11);
  if (!v5)
    return 0;
  v7 = *(_QWORD *)(v5 + 56);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 4))
      return 0;
  }
  if (*(_DWORD *)(v5 + 100))
    return 1;
  v8 = *(_QWORD *)(v5 + 104);
  if (!v8)
    return 0;
  return *(_DWORD *)(v8 - 12) != 0;
}

WTF::StringImpl *WebKit::deleteEmptyOriginDirectory(WTF::StringImpl *this, const WTF::String *a2)
{
  const WTF::String **v2;
  WTF::StringImpl *v3;
  const WTF::String *v4;
  WTF::StringImpl *v5;
  const WTF::String *v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    v2 = (const WTF::String **)this;
    if (WebKit::isEmptyOriginDirectory(this, a2))
    {
      WebKit::originFilePath((WTF::StringImpl *)&v9, *v2);
      WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v9, v4);
      v5 = v9;
      v9 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v3);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
    WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)v2, v3);
    WTF::FileSystemImpl::parentPath((WTF::FileSystemImpl *)v2, v6);
    WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v9, v7);
    this = v9;
    v9 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

unsigned __int8 *WebKit::OriginStorageManager::deleteEmptyDirectory(unsigned __int8 *this)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    if (*(_DWORD *)(v1 + 4))
    {
      v2 = (unsigned __int8 *)WebKit::OriginStorageManager::defaultBucket((WebKit::OriginStorageManager *)this);
      return WebKit::OriginStorageManager::StorageBucket::deleteEmptyDirectory(v2);
    }
  }
  return this;
}

WTF::StringImpl *WebKit::OriginStorageManager::StorageBucket::resolvedLocalStoragePath@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  const WTF::String *v6;
  uint64_t v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  const WTF::String *v15;
  const WTF::String *v16;
  NSObject *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint8_t buf[4];
  WTF::StringImpl *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (WTF::StringImpl **)((char *)this + 48);
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  if (v3)
    goto LABEL_16;
  v5 = this;
  if (!*((_BYTE *)this + 112))
  {
    v11 = (WTF::StringImpl *)((char *)this + 40);
    goto LABEL_21;
  }
  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
  {
    v11 = (WTF::StringImpl *)MEMORY[0x1E0CBF738];
LABEL_21:
    this = (WTF::StringImpl *)WTF::String::operator=((WTF::StringImpl **)this + 6, v11);
    goto LABEL_15;
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, (WTF::StringImpl *)1, &v20);
  WebKit::LocalStorageManager::localStorageFilePath((uint64_t)&v20, &v19);
  v7 = *((_QWORD *)v5 + 5);
  if (v7
    && *(_DWORD *)(v7 + 4)
    && (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v19, v6) & 1) == 0
    && WTF::FileSystemImpl::fileExists((WTF::StringImpl *)((char *)v5 + 40), v8))
  {
    v12 = qword_1ECE718E8;
    if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::utf8();
      v14 = v18 ? (uint64_t)v18 + 16 : 0;
      *(_DWORD *)buf = 134218242;
      v22 = v5;
      v23 = 2082;
      v24 = v14;
      _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - StorageBucket::resolvedLocalStoragePath New path '%{public}s'", buf, 0x16u);
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
          WTF::fastFree(v18, v13);
        else
          --*(_DWORD *)v18;
      }
    }
    WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)&v20, (const WTF::String *)v13);
    if ((WebCore::SQLiteFileSystem::moveDatabaseFile((WTF::StringImpl *)((char *)v5 + 40), (const WTF::String *)&v19, v15) & 1) == 0&& (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v19, v16) & 1) == 0)
    {
      v17 = qword_1ECE718E8;
      if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v22 = v5;
        _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "%p - StorageBucket::resolvedLocalStoragePath Fails to migrate file to new path", buf, 0xCu);
      }
    }
  }
  WTF::String::operator=(v4, (WTF::StringImpl *)&v19);
  v10 = v19;
  v19 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  this = v20;
  v20 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v9);
    else
      *(_DWORD *)this -= 2;
  }
LABEL_15:
  v3 = *v4;
  if (*v4)
LABEL_16:
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

unsigned __int8 *WebKit::OriginStorageManager::StorageBucket::deleteEmptyDirectory(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  int v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const WTF::String *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const WTF::String *v12;
  WTF::StringImpl *v13;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const WTF::String *v17;
  WTF::StringImpl *v18;
  const WTF::String *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  const WTF::String *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const WTF::String *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v1 = this;
  v2 = this[112];
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, 0, &v27);
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v19);
      v21 = v27;
      v27 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
      WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)v1, (WTF::StringImpl *)1, &v27);
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v22);
      v24 = v27;
      v27 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
      WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)v1, (WTF::StringImpl *)3, &v27);
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v25);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v18);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
    else
    {
      if (this[112])
        return this;
      WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, 0, &v27);
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v14);
      v16 = v27;
      v27 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)(v1 + 40), v15);
      WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)(v1 + 72), v17);
    }
    return (unsigned __int8 *)WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)(v1 + 96), v18);
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)this, 0, &v27);
  WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v3);
  v5 = v27;
  v27 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)v1, (WTF::StringImpl *)1, &v27);
  WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v6);
  v8 = v27;
  v27 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)v1, (WTF::StringImpl *)3, &v27);
  WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v9);
  v11 = v27;
  v27 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebKit::OriginStorageManager::StorageBucket::typeStoragePath((uint64_t)v1, (WTF::StringImpl *)4, &v27);
  WTF::FileSystemImpl::deleteEmptyDirectory((WTF::FileSystemImpl *)&v27, v12);
  this = (unsigned __int8 *)v27;
  v27 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v13);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebKit::OriginStorageManager::StorageBucket::typeStoragePath@<X0>(uint64_t result@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v5;
  BOOL v6;
  _DWORD *v7;
  WTF::StringImpl *v8;

  v3 = result;
  switch((int)a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5 = v8;
      break;
    default:
      v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v5 += 2;
      break;
  }
  if (*(_QWORD *)v3)
  {
    v6 = !*(_DWORD *)(*(_QWORD *)v3 + 4) || v5 == 0;
    if (!v6 && *((_DWORD *)v5 + 1))
    {
      result = WTF::FileSystemImpl::pathByAppendingComponent();
LABEL_10:
      if (*(_DWORD *)v5 == 2)
        return WTF::StringImpl::destroy(v5, a2);
      *(_DWORD *)v5 -= 2;
      return result;
    }
  }
  v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v7 += 2;
  *a3 = v7;
  if (v5)
    goto LABEL_10;
  return result;
}

_QWORD *WebKit::LocalStorageManager::LocalStorageManager(_QWORD *result, _DWORD **a2, uint64_t a3)
{
  _DWORD *v3;

  v3 = *a2;
  if (*a2)
    *v3 += 2;
  *result = v3;
  result[1] = a3;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t WebKit::LocalStorageManager::localStorageFilePath@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
    return WTF::FileSystemImpl::pathByAppendingComponent();
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *a2 = v3;
  return this;
}

WebKit::StorageAreaBase *WebKit::StorageAreaBase::StorageAreaBase(WebKit::StorageAreaBase *this, int a2, const WebCore::ClientOrigin *a3)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)this = off_1E34C7828;
  *((_DWORD *)this + 6) = a2;
  WebCore::ClientOrigin::ClientOrigin((WebKit::StorageAreaBase *)((char *)this + 32), a3);
  *((_QWORD *)this + 12) = 0;
  return this;
}

uint64_t WTF::HashTable<WebCore::ClientOrigin,WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>>>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ClientOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ClientOrigin,std::unique_ptr<WebKit::OriginStorageManager>,WTF::DefaultHash<WebCore::ClientOrigin>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ClientOrigin>>,WebCore::ClientOrigin>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned int v5;
  WebCore::SecurityOriginData *v6;
  int v7;
  char v8;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::computeHash<WebCore::ClientOrigin>(a2) & v4;
  v6 = (WebCore::SecurityOriginData *)(v2 + 72 * v5);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>() & 1) != 0)
  {
LABEL_7:
    if (*a1)
      return *a1 + 72 * *(unsigned int *)(*a1 - 4);
    return 0;
  }
  v7 = 1;
  while (1)
  {
    WebCore::SecurityOriginData::isHashTableDeletedValue(v6);
    if ((v8 & 1) == 0 && (WebCore::operator==() & 1) != 0)
      return (uint64_t)v6;
    v5 = (v5 + v7) & v4;
    v6 = (WebCore::SecurityOriginData *)(v2 + 72 * v5);
    ++v7;
    if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebCore::ClientOrigin>,false>::isEmptyValue<WebCore::ClientOrigin>())
      goto LABEL_7;
  }
}

uint64_t WebCore::operator==()
{
  uint64_t result;

  result = WebCore::operator==();
  if ((_DWORD)result)
    return WebCore::operator==();
  return result;
}

{
  return MEMORY[0x1E0DD6728]();
}

{
  return MEMORY[0x1E0DD6730]();
}

WebKit::OriginStorageManager *WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTraits<std::unique_ptr<WebKit::OriginStorageManager>>>::customDeleteBucket(WebCore::ClientOrigin *a1)
{
  uint64_t v1;

  WebCore::ClientOrigin::~ClientOrigin(a1);
  *(_QWORD *)v1 = -1;
  *(_QWORD *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  return std::unique_ptr<WebKit::OriginStorageManager>::reset[abi:sn180100]((WebKit::OriginStorageManager **)(v1 + 64), 0);
}

unsigned __int8 ***WebKit::StorageAreaMap::sendConnectMessage(uint64_t a1, int a2)
{
  WebKit::WebProcess *v4;
  uint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  __int128 v20;
  __int128 *v21;
  _BYTE *v22;
  char *v23;
  uint64_t *v24;
  __int128 *v25;
  _BYTE *v26;
  unsigned int v27;
  char v28;
  __int128 v29;
  os_unfair_lock_s *v30;
  _BYTE v31[64];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 105) = 1;
  v4 = WebKit::WebProcess::singleton((WebKit::WebProcess *)a1);
  v5 = WebKit::WebProcess::ensureNetworkProcessConnection(v4);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v30, *(unsigned __int8 ***)(v5 + 24));
  v29 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + 48);
  WebKit::StorageAreaMap::clientOrigin((WebKit::StorageAreaMap *)v31, a1);
  v6 = *(unsigned __int8 *)(a1 + 92);
  if ((v6 - 1) <= 1 && *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32))
    LOBYTE(v6) = 2;
  v28 = v6;
  if (a2)
  {
    v19 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v20 = &v28;
    *((_QWORD *)&v20 + 1) = &v19;
    v21 = &v29;
    v22 = v31;
    IPC::Connection::sendSync<Messages::NetworkStorageManager::ConnectToStorageAreaSync>((uint64_t)&v23, (uint64_t)v30, (uint64_t)&v20);
    v14 = v27;
    if (v27)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
    }
    else
    {
      v15 = (uint64_t)v24;
      v16 = v25;
      v25 = 0;
      v17 = (unint64_t)v26;
    }
    *(_QWORD *)&v20 = v15;
    *((_QWORD *)&v20 + 1) = v16;
    v21 = (__int128 *)v17;
    WebKit::StorageAreaMap::didConnect(a1, v15, (uint64_t)&v20 + 8, v17);
    if (*((_QWORD *)&v20 + 1))
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v20 + 1), v18);
    if ((_DWORD)v14 != -1)
      ((void (*)(__int128 *, char **))off_1E34F2128[v14])(&v20, &v23);
  }
  else
  {
    *(_QWORD *)&v20 = a1;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    v7 = *(unsigned int **)(a1 + 8);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    *((_QWORD *)&v20 + 1) = v7;
    v19 = *(_QWORD *)(a1 + 16);
    v23 = &v28;
    v24 = &v19;
    v25 = &v29;
    v26 = v31;
    IPC::Connection::sendWithAsyncReply<Messages::NetworkStorageManager::ConnectToStorageArea,WebKit::StorageAreaMap::sendConnectMessage(WebKit::StorageAreaMap::SendMode)::$_0>(v30, (uint64_t)&v23, &v20);
    v10 = (unsigned int *)*((_QWORD *)&v20 + 1);
    *((_QWORD *)&v20 + 1) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v9);
      }
    }
  }
  WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)v31);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v30);
}

void WebCore::ClientOrigin::~ClientOrigin(WebCore::ClientOrigin *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *((unsigned int *)this + 14);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v2])(&v4, (char *)this + 32);
  *((_DWORD *)this + 14) = -1;
  v3 = *((unsigned int *)this + 6);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, WebCore::ClientOrigin *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v5, this);
  *((_DWORD *)this + 6) = -1;
}

uint64_t WebKit::StorageAreaMap::clientOrigin(WebKit::StorageAreaMap *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t result;
  char v9;
  _BYTE v10[24];
  int v11;
  _BYTE v12[24];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40) + 8;
  v12[0] = 0;
  v13 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v12, v4);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 32);
  if (v5)
    v6 = (_BYTE *)(v5 + 8);
  else
    v6 = v12;
  v10[0] = 0;
  v11 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v10, (uint64_t)v6);
  *(_BYTE *)this = 0;
  *((_DWORD *)this + 6) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)this, (uint64_t)v10);
  *((_BYTE *)this + 32) = 0;
  v7 = (char *)this + 32;
  *((_DWORD *)v7 + 6) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v7, (uint64_t)v12);
  if (v11 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))off_1E34F2090[v11])(&v9, v10);
  if (v13 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34F2090[v13])(v10, v12);
  return result;
}

unsigned int *WTF::GenericHashTraits<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::WeakPtr<WebKit::StorageAreaBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::StorageAreaBase&>(unsigned int **a1, uint64_t a2)
{
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v5 = *(unsigned int **)(a2 + 8);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  result = *a1;
  *a1 = v5;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

char *IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  int v5;

  v4 = *(_DWORD *)(a2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2, v4);
  v5 = *(_DWORD *)(a2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  return IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(a1, a2 + 32, v5);
}

void WebKit::WebPageProxy::~WebPageProxy(WebKit::WebPageProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  WebKit::BrowsingContextGroup *v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  void *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  void *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int *v56;
  void *v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  uint64_t v63;
  void *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl **v66;
  _DWORD *v67;
  _DWORD *v68;
  unsigned int v69;
  unsigned int v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  _DWORD *v78;
  WTF::StringImpl **v79;
  uint64_t v80;
  const void *v81;
  uint64_t v82;
  const void *v83;
  WTF::StringImpl *v84;
  _DWORD *v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF *v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  WebKit::WebPageProxy::Internals *v136;
  WTF *v137;
  void *v138;
  IPC::Encoder *v139;
  _BYTE buf[12];
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  int v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *(_QWORD *)(v3 + 744);
    v5 = *(_QWORD *)(v3 + 1896);
    v6 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 + 108);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = this;
    v141 = 2048;
    v142 = v4;
    v143 = 2048;
    v144 = v5;
    v145 = 1024;
    v146 = v6;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::destructor:", buf, 0x26u);
  }
  *(_QWORD *)buf = 0;
  WebKit::WebPageProxy::setPageLoadStateObserver((uint64_t)this, (unsigned int **)buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (!*((_BYTE *)this + 729))
    WebKit::WebPageProxy::close((unsigned int *)this);
  --HIDWORD(WebKit::WebProcessPool::statistics(void)::statistics);
  if (*((_BYTE *)this + 1096))
    WebKit::TextChecker::closeSpellDocumentWithTag(*((WebKit::TextChecker **)this + 136));
  v7 = *((_QWORD *)this + 28);
  CFRetain(*(CFTypeRef *)(v7 + 8));
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>(v7 + 88, this);
  v8 = *((unsigned int *)this + 245);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 121);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9++ = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v10 -= 8;
    }
    while (v10);
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 33) + 408);
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 16);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v15 = *(_QWORD *)(*((_QWORD *)this + 33) + 24);
    v16 = *((_QWORD *)this + 4);
    v17 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v17 = 428;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 528) = v17 + 16;
    *(_QWORD *)(v17 + 536) = v17 + 16;
    *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v17 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
    v139 = (IPC::Encoder *)v17;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = v15;
    v18 = *(_QWORD *)(v16 + 744);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v17, 8uLL, 8) = v18;
    buf[0] = 0;
    BYTE2(v142) = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v139, 0, (uint64_t)buf, 1);
    if (BYTE2(v142))
    {
      v20 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
    v21 = v139;
    v139 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v19);
      WTF::fastFree(v22, v23);
    }
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v12 + 16));
  }
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  v24 = *((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  *((_QWORD *)this + 176) = off_1E34ABE00;
  v25 = *((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy *)((char *)this + 1408));
  v26 = *((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = (void *)*((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v27)
    std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100]((uint64_t)this + 1376, (uint64_t)v27);
  v28 = *((_QWORD *)this + 170);
  if (v28)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v28, v27);
  std::unique_ptr<WebKit::WebsitePoliciesData>::reset[abi:sn180100]((WebKit::WebsitePoliciesData **)this + 169, 0);
  v30 = (WebKit::BrowsingContextGroup *)*((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v30)
    WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v30, v29);
  v31 = *((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = 0;
  if (v31)
    CFRelease(*(CFTypeRef *)(v31 + 8));
  std::unique_ptr<WebKit::NetworkIssueReporter>::reset[abi:sn180100]((WebKit::NetworkIssueReporter **)this + 166, 0);
  v33 = (const void *)*((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = 0;
  if (v33)
    CFRelease(v33);
  v34 = *((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v34)
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v34, v32);
  std::unique_ptr<WebKit::WebScreenOrientationManagerProxy>::reset[abi:sn180100]((WebKit::WebScreenOrientationManagerProxy **)this + 156, 0);
  v36 = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 306, v35);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1208, v37);
  v39 = (WTF::StringImpl *)*((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  std::unique_ptr<WebKit::SpeechRecognitionPermissionManager>::reset[abi:sn180100]((WebKit::SpeechRecognitionPermissionManager **)this + 148, 0);
  v41 = (unsigned int *)*((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = 0;
  if (v41)
  {
    v42 = v41 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v41 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
    }
  }
  v45 = *((_QWORD *)this + 145);
  if (v45)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v45, v40);
  v46 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (unsigned int *)*((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v47)
  {
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v47);
      WTF::fastFree((WTF *)v47, v40);
    }
  }
  v50 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = (WTF::StringImpl **)*((_QWORD *)this + 138);
  if (v52)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v52, (WTF::StringImpl *)v40);
  v53 = *((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v53)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v53 + 8), v40);
  v54 = (uint64_t *)*((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v54)
  {
    v55 = v54[6];
    if (v55)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v55, (WTF::StringImpl *)v40);
    v56 = (unsigned int *)v54[4];
    v54[4] = 0;
    if (v56)
    {
      do
      {
        v69 = __ldaxr(v56);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v56));
      if (!v70)
      {
        atomic_store(1u, v56);
        WTF::fastFree((WTF *)v56, v40);
      }
    }
    Inspector::AgentRegistry::~AgentRegistry((Inspector::AgentRegistry *)(v54 + 2));
    v58 = (WTF *)v54[1];
    v54[1] = 0;
    if (v58)
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v58, v57);
    v59 = *v54;
    *v54 = 0;
    if (v59)
      WTF::RefCounted<Inspector::FrontendRouter>::deref(v59, v57);
    WTF::fastFree((WTF *)v54, v57);
  }
  v60 = *((_QWORD *)this + 133);
  if (v60)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<API::Attachment,WTF::RawPtrTraits<API::Attachment>,WTF::DefaultRefDerefTraits<API::Attachment>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v60, (WTF::StringImpl *)v40);
  v61 = *((_QWORD *)this + 132);
  if (v61)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v61, (WTF::StringImpl *)v40);
  v62 = (WTF::StringImpl **)*((_QWORD *)this + 130);
  if (v62)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v62, (WTF::StringImpl *)v40);
  v63 = *((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 968, v40);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 928, v64);
  std::unique_ptr<WebKit::RemoteLayerTreeScrollingPerformanceData>::reset[abi:sn180100]((uint64_t *)this + 114, 0);
  std::unique_ptr<WebCore::RunLoopObserver>::reset[abi:sn180100]((WebCore::RunLoopObserver **)this + 113, 0);
  v66 = (WTF::StringImpl **)*((_QWORD *)this + 112);
  if (v66)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v66, v65);
  v67 = (_DWORD *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v67)
    WTF::RefCounted<WebCore::ValidationBubble>::deref(v67);
  v68 = (_DWORD *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v68)
  {
    if (v68[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
    else
      --v68[2];
  }
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 768, v65);
  std::unique_ptr<WebKit::WebWheelEventCoalescer>::reset[abi:sn180100]((WebKit::WebWheelEventCoalescer **)this + 93, 0);
  v72 = (WTF::StringImpl *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, v71);
    else
      *(_DWORD *)v72 -= 2;
  }
  v73 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v73)
    CFRelease(*(CFTypeRef *)(v73 + 8));
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 70, 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 69, 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 68, 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 67, 0);
  std::unique_ptr<WebKit::MediaKeySystemPermissionRequestManagerProxy>::reset[abi:sn180100]((WebKit::MediaKeySystemPermissionRequestManagerProxy **)this + 64, 0);
  v75 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v76)
    CFRelease(*(CFTypeRef *)(v76 + 8));
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 480, v74);
  v78 = (_DWORD *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v78)
  {
    if (v78[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v78 + 8))(v78);
    else
      --v78[2];
  }
  v79 = (WTF::StringImpl **)*((_QWORD *)this + 58);
  if (v79)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v79, v77);
  v80 = *((_QWORD *)this + 56);
  if (v80)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v80, v77);
  v81 = (const void *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v81)
    CFRelease(v81);
  v82 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = (const void *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v83)
    CFRelease(v83);
  std::unique_ptr<WebKit::ModelElementController>::reset[abi:sn180100]((WTF **)this + 52, 0);
  std::unique_ptr<WebKit::SystemPreviewController>::reset[abi:sn180100]((WTF **)this + 51, 0);
  v85 = (_DWORD *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v85)
  {
    if (v85[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v85 + 8))(v85);
    else
      --v85[4];
  }
  v86 = (_DWORD *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v86)
  {
    if (v86[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v86 + 8))(v86);
    else
      --v86[4];
  }
  v87 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
  v88 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v89)
    CFRelease(*(CFTypeRef *)(v89 + 8));
  v90 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
      WTF::StringImpl::destroy(v90, v84);
    else
      *(_DWORD *)v90 -= 2;
  }
  v91 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
      WTF::StringImpl::destroy(v91, v84);
    else
      *(_DWORD *)v91 -= 2;
  }
  v92 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
      WTF::StringImpl::destroy(v92, v84);
    else
      *(_DWORD *)v92 -= 2;
  }
  v93 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
      WTF::StringImpl::destroy(v93, v84);
    else
      *(_DWORD *)v93 -= 2;
  }
  v94 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, v84);
    else
      *(_DWORD *)v94 -= 2;
  }
  v95 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
      WTF::StringImpl::destroy(v95, v84);
    else
      *(_DWORD *)v95 -= 2;
  }
  v96 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v96)
    CFRelease(*(CFTypeRef *)(v96 + 8));
  v97 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v97)
    CFRelease(*(CFTypeRef *)(v97 + 8));
  v98 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v98)
    CFRelease(*(CFTypeRef *)(v98 + 8));
  v99 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v99)
    CFRelease(*(CFTypeRef *)(v99 + 8));
  v100 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v100)
    CFRelease(*(CFTypeRef *)(v100 + 8));
  v101 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v101)
    CFRelease(*(CFTypeRef *)(v101 + 8));
  v102 = (unsigned int *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v102)
  {
    do
    {
      v103 = __ldaxr(v102);
      v104 = v103 - 1;
    }
    while (__stlxr(v104, v102));
    if (!v104)
    {
      atomic_store(1u, v102);
      WTF::fastFree((WTF *)v102, v84);
    }
  }
  v105 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v105)
    CFRelease(*(CFTypeRef *)(v105 + 8));
  v106 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v106)
    CFRelease(*(CFTypeRef *)(v106 + 8));
  v107 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v107)
    CFRelease(*(CFTypeRef *)(v107 + 8));
  v108 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v108)
    CFRelease(*(CFTypeRef *)(v108 + 8));
  v109 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v109)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v109 + 16));
  v110 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100]((WebKit::RemoteLayerTreeHost **)this + 24, 0);
  v112 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v112)
    (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
  v113 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, v111);
    else
      *(_DWORD *)v113 -= 2;
  }
  v114 = (WTF *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v114)
  {
    v115 = *((_QWORD *)v114 + 1);
    if (v115)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v115, v111);
    if (*(_QWORD *)v114)
    {
      *(_QWORD *)(*(_QWORD *)v114 + 8) = 0;
      v116 = *(unsigned int **)v114;
      *(_QWORD *)v114 = 0;
      if (v116)
      {
        do
        {
          v117 = __ldaxr(v116);
          v118 = v117 - 1;
        }
        while (__stlxr(v118, v116));
        if (!v118)
        {
          atomic_store(1u, v116);
          WTF::fastFree((WTF *)v116, v111);
        }
      }
    }
    else
    {
      *(_QWORD *)v114 = 0;
    }
    WTF::fastFree(v114, v111);
  }
  v119 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  v120 = (WTF *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v120)
    WTF::fastFree(v120, v111);
  v121 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  v123 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  v124 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  v125 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  v127 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  v128 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v128)
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  v129 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  v130 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v131 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  v132 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v132)
    CFRelease(*(CFTypeRef *)(v132 + 8));
  v133 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v133)
  {
    do
    {
      v134 = __ldaxr(v133);
      v135 = v134 - 1;
    }
    while (__stlxr(v135, v133));
    if (!v135)
    {
      atomic_store(1u, v133);
      WTF::fastFree((WTF *)v133, v111);
    }
  }
  v136 = (WebKit::WebPageProxy::Internals *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v136)
  {
    WebKit::WebPageProxy::Internals::~Internals(v136, v111);
    WTF::fastFree(v137, v138);
  }
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v111);
}

{
  WebKit::WebPageProxy::~WebPageProxy(this);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int **v19;
  uint64_t v20;
  uint64_t v22;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v7 = *(_DWORD *)(v6 - 4);
      if (!v7)
        goto LABEL_25;
      v8 = 0;
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(v6 + 8 * --v7);
          if ((unint64_t)(v9 + 1) >= 2 && !*(_QWORD *)(v9 + 8))
            break;
          if (!v7)
            goto LABEL_14;
        }
        *(_QWORD *)(v6 + 8 * v7) = 0;
        do
        {
          v10 = __ldaxr((unsigned int *)v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v9);
          WTF::fastFree((WTF *)v9, a2);
        }
        *(_QWORD *)(v6 + 8 * v7) = -1;
        ++v8;
      }
      while (v7);
LABEL_14:
      v6 = *(_QWORD *)a1;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) += v8;
        v12 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v13 = *(_DWORD *)(v12 - 12);
        else
          v13 = 0;
        *(_DWORD *)(v12 - 12) = v13 - v8;
        v6 = *(_QWORD *)a1;
      }
      if (v6)
      {
        v14 = *(_DWORD *)(v6 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v14)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          v6 = *(_QWORD *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v6)
          {
            v16 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_28:
        v16 = *(_DWORD *)(v6 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_30:
          *(_DWORD *)(a1 + 12) = 2 * v17;
          goto LABEL_31;
        }
LABEL_29:
        v17 = v16;
        goto LABEL_30;
      }
    }
    v16 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v18 = a2[3];
  if (!v18 || !*(_QWORD *)(v18 + 8))
    return 0;
  v22 = a2[3];
  v19 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v22);
  if (*(_QWORD *)a1)
  {
    v20 = *(_QWORD *)a1 + 8 * *(unsigned int *)(*(_QWORD *)a1 - 4);
    if ((unsigned int **)v20 == v19)
      return 0;
  }
  else
  {
    if (!v19)
      return 0;
    v20 = 0;
  }
  if ((unsigned int **)v20 != v19)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, v19);
  return 1;
}

unsigned int *WebKit::WebPageProxy::dispatchActivityStateChange(WebCore::RunLoopObserver **this)
{
  unsigned int *result;
  WebCore::RunLoopObserver *v3;
  __int16 v4;
  int v5;
  uint64_t v6;
  const WTF::StringImpl *v7;
  WebCore::RunLoopObserver *v8;
  int v9;
  int v10;
  int v11;
  __int16 v12;
  NSObject *v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::RunLoopObserver *v18;
  unsigned int *v19;
  unsigned int v20;
  WebCore::RunLoopObserver *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  void *v29;
  WebCore::RunLoopObserver *v30;
  WebKit::UserMediaPermissionRequestManagerProxy *v31;
  WebCore::RunLoopObserver *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  WebCore::RunLoopObserver *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  WebCore::RunLoopObserver *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  WebCore::RunLoopObserver *v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  WebKit::VideoPresentationManagerProxy *v66;
  WebCore::RunLoopObserver *v67;
  uint64_t v68;
  int v69;
  WebCore::RunLoopObserver *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  IPC::Encoder *v76;
  WTF *v77;
  void *v78;
  WebCore::RunLoopObserver *v79;
  uint64_t v80;
  int v81;
  unsigned int *v82;
  uint64_t v83;
  WebCore::RunLoopObserver *v84;
  uint64_t v85;
  uint64_t v86;
  WebCore::RunLoopObserver *v87;
  uint64_t v88;
  WebCore::RunLoopObserver *v89;
  uint64_t v90;
  WebCore::RunLoopObserver *v91;
  unsigned int *v92;
  unsigned int v93;
  IPC::Encoder *v94[2];
  unsigned int *v95;
  uint64_t v96;
  _BYTE buf[22];
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  int v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  result = (unsigned int *)WebCore::RunLoopObserver::isScheduled(this[113]);
  if ((_DWORD)result)
    result = (unsigned int *)WebCore::RunLoopObserver::invalidate(this[113]);
  *((_BYTE *)this + 921) = 0;
  if (!*((_BYTE *)this + 729) && *((_BYTE *)this + 728))
  {
    v3 = this[4];
    v4 = *((_WORD *)v3 + 660);
    if ((v4 & 4) != 0)
    {
      v4 |= 0x28u;
      *((_WORD *)v3 + 660) = v4;
    }
    v5 = *((unsigned __int16 *)v3 + 24);
    WebKit::WebPageProxy::updateActivityState(this, v4);
    v8 = this[4];
    v9 = *((unsigned __int16 *)v8 + 24);
    v10 = (unsigned __int16)(v9 ^ v5);
    v11 = (v9 ^ v5) & 1;
    if ((v11 & v9) != 0)
    {
      WebKit::WebPageProxy::updateCurrentModifierState((WebKit::WebPageProxy *)this);
      v8 = this[4];
    }
    if ((*((_WORD *)v8 + 660) & 4) != 0)
    {
      v12 = *((_WORD *)v8 + 24);
      v13 = qword_1ECE71A28;
      v14 = os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_DEFAULT);
      if ((v12 & 4) != 0)
      {
        if (v14)
        {
          v23 = *((_QWORD *)v8 + 93);
          v24 = *((_QWORD *)v8 + 237);
          v25 = *((_QWORD *)this[26] + 17);
          if (v25)
            LODWORD(v25) = *(_DWORD *)(v25 + 108);
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = this;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v23;
          v98 = 2048;
          v99 = v24;
          v100 = 1024;
          v101 = v25;
          _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::viewIsBecomingVisible:", buf, 0x26u);
        }
        v26 = (uint64_t)this[26];
        v27 = (unsigned int *)(v26 + 16);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 + 1, v27));
        {
          WebKit::liveProcessesLRU(void)::processes = 0u;
          unk_1ECE73890 = 0u;
        }
        WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v26);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v27);
        v30 = this[23];
        if (v30)
          (*(void (**)(WebCore::RunLoopObserver *))(*(_QWORD *)v30 + 136))(v30);
        v31 = this[63];
        if (v31)
          WebKit::UserMediaPermissionRequestManagerProxy::viewIsBecomingVisible(v31, v29);
        v32 = this[5];
        if (v32)
          v21 = (WebCore::RunLoopObserver *)*((_QWORD *)v32 + 1);
        else
          v21 = 0;
        (*(void (**)(WebCore::RunLoopObserver *))(*(_QWORD *)v21 + 1584))(v21);
        (*(void (**)(WebCore::RunLoopObserver *))(*(_QWORD *)v21 + 80))(v21);
        v22 = 199;
        goto LABEL_37;
      }
      if (v14)
      {
        v15 = *((_QWORD *)v8 + 93);
        v16 = *((_QWORD *)v8 + 237);
        v17 = *((_QWORD *)this[26] + 17);
        if (v17)
          LODWORD(v17) = *(_DWORD *)(v17 + 108);
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = this;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v15;
        v98 = 2048;
        v99 = v16;
        v100 = 1024;
        v101 = v17;
        _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::viewIsBecomingInvisible:", buf, 0x26u);
      }
      v18 = this[26];
      v19 = (unsigned int *)((char *)v18 + 16);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
      WebKit::WebProcessProxy::pageIsBecomingInvisible((uint64_t *)v18, *((_QWORD *)this[4] + 237));
      if (v18)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v18 + 4);
      v21 = this[23];
      if (v21)
      {
        v22 = 18;
LABEL_37:
        (*(void (**)(WebCore::RunLoopObserver *))(*(_QWORD *)v21 + 8 * v22))(v21);
      }
    }
    if ((v10 & 0x10) != 0)
    {
      v34 = *((unsigned __int16 *)this[4] + 24);
      v33 = (v34 >> 4) & 1;
      if (*((_BYTE *)this + 520) && (v34 & 0x10) != 0)
      {
        if ((*(unsigned int (**)(WebCore::RunLoopObserver *))(*(_QWORD *)this[23] + 184))(this[23])
          && *((_BYTE *)this + 601)
          && !*((_BYTE *)this + 602))
        {
          *((_BYTE *)this + 960) = 1;
        }
        *((_BYTE *)this + 602) = 0;
        LOBYTE(v33) = 1;
      }
    }
    else
    {
      LOBYTE(v33) = 0;
    }
    if ((*((_WORD *)this[4] + 24) & 4) != 0)
    {
      if (*((_BYTE *)this + 960))
      {
        v35 = (uint64_t)this[119] + 1;
        this[119] = (WebCore::RunLoopObserver *)v35;
      }
      else
      {
        v35 = 0;
      }
    }
    else
    {
      v35 = 0;
      *((_BYTE *)this + 960) = 0;
    }
    v96 = v35;
    v36 = *((_DWORD *)this + 245);
    if (!v10 && !v35 && !v36)
    {
      WebKit::WebPageProxy::updateThrottleState((WebKit::WebPageProxy *)this, v6, v7);
LABEL_107:
      WebKit::WebPageProxy::updateBackingStoreDiscardableState((WebKit::WebPageProxy *)this);
      if (v96)
      {
        if (!*((_BYTE *)this + 729))
        {
          if (*((_BYTE *)this + 728))
          {
            v87 = this[26];
            v88 = *((_QWORD *)v87 + 17);
            if (!v88 || !*(_BYTE *)(v88 + 104))
            {
              if (*((_QWORD *)v87 + 18))
              {
                if (!*((_BYTE *)this + 891))
                {
                  v89 = this[67];
                  if (v89)
                  {
                    v90 = *((_QWORD *)v89 + 1);
                    if (v90)
                    {
                      if (*(_QWORD *)(v90 + 8))
                      {
                        *((_BYTE *)this + 891) = 1;
                        v91 = this[23];
                        v92 = (unsigned int *)((char *)v87 + 16);
                        do
                          v93 = __ldaxr(v92);
                        while (__stlxr(v93 + 1, v92));
                        (*(void (**)(WebCore::RunLoopObserver *))(*(_QWORD *)v91 + 160))(v91);
                        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v92);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      *((_WORD *)this[4] + 660) = 0;
      *((_BYTE *)this + 960) = 0;
      *((_BYTE *)this + 520) |= v33;
      WebKit::WebPageProxy::updateMediaCapability((WebKit::WebPageProxy *)this);
      v82 = (unsigned int *)(this + 116);
      v83 = *((unsigned int *)this + 235);
      if ((_DWORD)v83)
      {
        v84 = this[116];
        v85 = 8 * v83;
        do
        {
          v86 = *(_QWORD *)v84;
          *(_QWORD *)v84 = 0;
          v84 = (WebCore::RunLoopObserver *)((char *)v84 + 8);
          (*(void (**)(uint64_t))(*(_QWORD *)v86 + 16))(v86);
          (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
          v85 -= 8;
        }
        while (v85);
      }
      return WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v82, 0);
    }
    v37 = this[121];
    v38 = *((_DWORD *)this + 244);
    v94[0] = 0;
    this[121] = 0;
    v94[1] = 0;
    this[122] = 0;
    v39 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v39 = off_1E34D4708;
    *(_QWORD *)(v39 + 8) = v37;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_DWORD *)(v39 + 16) = v38;
    *(_DWORD *)(v39 + 20) = v36;
    v40 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v40 = 1;
    *(_QWORD *)(v40 + 8) = v39;
    v95 = (unsigned int *)v40;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v41);
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v94, v42);
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v43 = off_1E34D4730;
    v43[1] = this;
    v43[2] = &v95;
    v43[3] = &v96;
    *(_QWORD *)buf = v43;
    WebKit::WebPageProxy::forEachWebContentProcess(this, buf);
    v46 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    v47 = v95;
    v95 = 0;
    if (v47)
    {
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        atomic_store(1u, v47);
        *(_QWORD *)buf = v47;
        WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)buf);
      }
    }
    WebKit::WebPageProxy::updateThrottleState((WebKit::WebPageProxy *)this, v44, v45);
    if ((v10 & 4) != 0)
    {
      v50 = this[4];
      if ((*((_WORD *)v50 + 24) & 4) == 0)
      {
        v51 = *((_QWORD *)v50 + 234);
        *((_QWORD *)v50 + 234) = 0;
        if (v51)
        {
          v52 = *(uint64_t **)v51;
          v53 = *(_QWORD *)(v51 + 8) - 1;
          *(_QWORD *)(v51 + 8) = v53;
          if (!v52)
            goto LABEL_69;
          v54 = *v52;
          if (*v52)
          {
            v55 = *(_BYTE *)(v51 + 16);
            *(_BYTE *)(v51 + 16) = 1;
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 16))(v54, 0);
            *(_BYTE *)(v51 + 16) = v55;
            if (!*(_QWORD *)v51)
            {
              v53 = *(_QWORD *)(v51 + 8);
LABEL_69:
              if (!v53)
                MEMORY[0x19AEB936C](v51, 0x1020C40545B2139);
            }
          }
        }
        v56 = this[26];
        v57 = (unsigned int *)((char *)v56 + 16);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 + 1, v57));
        WebKit::ResponsivenessTimer::stop((_BYTE *)v56 + 56);
        if (v56)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v56 + 4);
        goto LABEL_86;
      }
      v59 = *((_QWORD *)this[26] + 93);
      if (v59)
      {
        v60 = *(_QWORD **)v59;
        ++*(_QWORD *)(v59 + 8);
        if (v60)
        {
          if (*v60)
          {
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v60 + 16))(*v60, 1);
            v50 = this[4];
          }
        }
      }
      v61 = *((_QWORD *)v50 + 234);
      *((_QWORD *)v50 + 234) = v59;
      if (!v61)
        goto LABEL_86;
      v62 = *(uint64_t **)v61;
      v63 = *(_QWORD *)(v61 + 8) - 1;
      *(_QWORD *)(v61 + 8) = v63;
      if (!v62)
      {
LABEL_84:
        if (!v63)
          MEMORY[0x19AEB936C](v61, 0x1020C40545B2139);
        goto LABEL_86;
      }
      v64 = *v62;
      if (*v62)
      {
        v65 = *(_BYTE *)(v61 + 16);
        *(_BYTE *)(v61 + 16) = 1;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 16))(v64, 0);
        *(_BYTE *)(v61 + 16) = v65;
        if (!*(_QWORD *)v61)
        {
          v63 = *(_QWORD *)(v61 + 8);
          goto LABEL_84;
        }
      }
    }
LABEL_86:
    if ((v10 & 0x10) != 0)
    {
      if ((*((_WORD *)this[4] + 24) & 0x10) != 0)
      {
        v67 = this[5];
        if (v67)
          v68 = *((_QWORD *)v67 + 1);
        else
          v68 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 1584))(v68);
        v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 120))(v68);
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 1592))(v68);
        v70 = this[4];
        if (*((unsigned __int8 *)v70 + 784) != v69)
        {
          *((_BYTE *)v70 + 784) = v69;
          v71 = (uint64_t)this[26];
          v72 = *((_QWORD *)v70 + 237);
          v73 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v73 = 2402;
          *(_QWORD *)(v73 + 8) = v72;
          *(_QWORD *)(v73 + 528) = v73 + 16;
          *(_QWORD *)(v73 + 536) = v73 + 16;
          *(_OWORD *)(v73 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v73 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v73);
          v94[0] = (IPC::Encoder *)v73;
          *IPC::Encoder::grow((IPC::Encoder *)v73, 1uLL, 1) = v69;
          buf[0] = 0;
          buf[16] = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage(v71, v94, 0, (uint64_t)buf, 1);
          if (buf[16])
          {
            v75 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v75)
              (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
          }
          v76 = v94[0];
          v94[0] = 0;
          if (v76)
          {
            IPC::Encoder::~Encoder(v76, v74);
            WTF::fastFree(v77, v78);
          }
        }
      }
      else
      {
        WebKit::WebPageProxy::closeOverlayedViews((WebKit::WebPageProxy *)this);
        v66 = this[48];
        if (v66 && WebKit::VideoPresentationManagerProxy::hasMode(v66, 1))
          WebKit::VideoPresentationManagerProxy::requestHideAndExitFullscreen(this[48]);
      }
    }
    if (v11 && this[54])
    {
      v79 = this[5];
      v80 = v79 ? *((_QWORD *)v79 + 1) : 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 1584))(v80);
      v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 56))(v80);
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 1592))(v80);
      if (v81)
        WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(this[54]);
    }
    goto LABEL_107;
  }
  return result;
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(unsigned int)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WebKit::WebPageProxy::updateThrottleState(WebKit::WebPageProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebKit::ProcessThrottlerActivity **v33;
  WebKit::ProcessThrottlerActivity *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WebKit::ProcessThrottlerActivity *v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WebKit::ProcessThrottlerActivity **v71;
  WebKit::ProcessThrottlerActivity *v72;
  uint64_t v73;
  uint64_t v74;
  WebKit::ProcessThrottlerActivity **v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  WebKit::WebPageProxy *v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  int v89;
  __int16 v90;
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, a3);
  if ((result & 1) != 0)
  {
    v6 = *((_QWORD *)this + 4);
    if (!*(_QWORD *)(v6 + 1328))
      *(_QWORD *)(v6 + 1328) = 0;
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 512) + 8);
    if (v7)
      v8 = v7 - 16;
    else
      v8 = 0;
    v9 = *(_QWORD *)(v8 + 552);
    if (v9)
    {
      v10 = *(uint64_t **)v9;
      ++*(_QWORD *)(v9 + 8);
      if (v10)
      {
        result = *v10;
        if (*v10)
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 1);
      }
    }
    v11 = *((_QWORD *)this + 4);
    v12 = *(_QWORD *)(v11 + 1328);
    *(_QWORD *)(v11 + 1328) = v9;
    if (v12)
    {
      v13 = *(uint64_t **)v12;
      v14 = *(_QWORD *)(v12 + 8) - 1;
      *(_QWORD *)(v12 + 8) = v14;
      if (v13)
      {
        result = *v13;
        if (!*v13)
          goto LABEL_20;
        v15 = *(_BYTE *)(v12 + 16);
        *(_BYTE *)(v12 + 16) = 1;
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
        *(_BYTE *)(v12 + 16) = v15;
        if (*(_QWORD *)v12)
          goto LABEL_20;
        v14 = *(_QWORD *)(v12 + 8);
      }
      if (!v14)
        result = MEMORY[0x19AEB936C](v12, 0x1020C40545B2139);
    }
  }
LABEL_20:
  v16 = *((_QWORD *)this + 4);
  v17 = *(_QWORD *)(v16 + 920);
  if ((*(_WORD *)(v16 + 48) & 0x20) != 0)
  {
    *(_QWORD *)(v16 + 920) = 0;
    if (!v17)
      goto LABEL_38;
  }
  else
  {
    if (v17)
      goto LABEL_38;
    v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 512) + 8);
    if (v18)
      v19 = v18 - 16;
    else
      v19 = 0;
    v20 = *(_QWORD *)(v19 + 536);
    if (!v20 || (v21 = *(uint64_t **)v20, ++*(_QWORD *)(v20 + 8), !v21) || (result = *v21) == 0)
    {
      *(_QWORD *)(v16 + 920) = v20;
      goto LABEL_38;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 1);
    v22 = *((_QWORD *)this + 4);
    v17 = *(_QWORD *)(v22 + 920);
    *(_QWORD *)(v22 + 920) = v20;
    if (!v17)
      goto LABEL_38;
  }
  v23 = *(uint64_t **)v17;
  v24 = *(_QWORD *)(v17 + 8) - 1;
  *(_QWORD *)(v17 + 8) = v24;
  if (v23)
  {
    result = *v23;
    if (!*v23)
      goto LABEL_38;
    v25 = *(_BYTE *)(v17 + 16);
    *(_BYTE *)(v17 + 16) = 1;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
    *(_BYTE *)(v17 + 16) = v25;
    if (*(_QWORD *)v17)
      goto LABEL_38;
    v24 = *(_QWORD *)(v17 + 8);
  }
  if (!v24)
    result = MEMORY[0x19AEB936C](v17, 0x1020C40545B2139);
LABEL_38:
  v26 = *((_QWORD *)this + 4);
  if ((*(_WORD *)(v26 + 48) & 4) != 0)
  {
    v35 = *((_QWORD *)this + 67);
    if (!v35 || (v36 = *(_QWORD *)(v35 + 8)) == 0 || !*(_QWORD *)(v36 + 8))
    {
      v37 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v38 = *(_QWORD *)(v26 + 744);
        v39 = *(_QWORD *)(v26 + 1896);
        v40 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
        if (v40)
          LODWORD(v40) = *(_DWORD *)(v40 + 108);
        v82 = 134218752;
        v83 = this;
        v84 = 2048;
        v85 = v38;
        v86 = 2048;
        v87 = v39;
        v88 = 1024;
        v89 = v40;
        _os_log_impl(&dword_196BCC000, v37, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: UIProcess is taking a foreground assertion because the view is visible", (uint8_t *)&v82, 0x26u);
      }
      v41 = *(_QWORD *)(*((_QWORD *)this + 66) + 208) + 200;
      v42 = WTF::fastMalloc((WTF *)0x28);
      WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v42, v41, "View is visible", 16, 1, 0);
      v33 = (WebKit::ProcessThrottlerActivity **)((char *)this + 536);
      v34 = (WebKit::ProcessThrottlerActivity *)v42;
      goto LABEL_55;
    }
  }
  else
  {
    v27 = *((_QWORD *)this + 67);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 8);
      if (v28)
      {
        if (*(_QWORD *)(v28 + 8))
        {
          v29 = qword_1ECE71640;
          if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
          {
            v30 = *(_QWORD *)(v26 + 744);
            v31 = *(_QWORD *)(v26 + 1896);
            v32 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
            if (v32)
              LODWORD(v32) = *(_DWORD *)(v32 + 108);
            v82 = 134218752;
            v83 = this;
            v84 = 2048;
            v85 = v30;
            v86 = 2048;
            v87 = v31;
            v88 = 1024;
            v89 = v32;
            _os_log_impl(&dword_196BCC000, v29, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: UIProcess is releasing a foreground assertion because the view is no longer visible", (uint8_t *)&v82, 0x26u);
          }
          v33 = (WebKit::ProcessThrottlerActivity **)((char *)this + 536);
          v34 = 0;
LABEL_55:
          result = (uint64_t)std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v33, v34);
        }
      }
    }
  }
  v43 = *((_QWORD *)this + 4);
  if ((*(_WORD *)(v43 + 48) & 0x40) != 0)
  {
    v51 = *((_QWORD *)this + 68);
    if (!v51 || (v52 = *(_QWORD *)(v51 + 8)) == 0 || !*(_QWORD *)(v52 + 8))
    {
      v53 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v54 = *(_QWORD *)(v43 + 744);
        v55 = *(_QWORD *)(v43 + 1896);
        v56 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
        if (v56)
          LODWORD(v56) = *(_DWORD *)(v56 + 108);
        v82 = 134218752;
        v83 = this;
        v84 = 2048;
        v85 = v54;
        v86 = 2048;
        v87 = v55;
        v88 = 1024;
        v89 = v56;
        _os_log_impl(&dword_196BCC000, v53, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: UIProcess is taking a foreground assertion because we are playing audio", (uint8_t *)&v82, 0x26u);
      }
      v57 = *(_QWORD *)(*((_QWORD *)this + 66) + 208) + 200;
      v58 = (WebKit::ProcessThrottlerActivity *)WTF::fastMalloc((WTF *)0x28);
      WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity((uint64_t)v58, v57, "View is playing audio", 22, 1, 0);
      std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 68, v58);
      v43 = *((_QWORD *)this + 4);
    }
    result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v43 + 56));
    if ((_DWORD)result)
    {
      v59 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v60 = *((_QWORD *)this + 4);
        v61 = *(_QWORD *)(v60 + 744);
        v62 = *(_QWORD *)(v60 + 1896);
        v63 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
        if (v63)
          LODWORD(v63) = *(_DWORD *)(v63 + 108);
        v82 = 134218752;
        v83 = this;
        v84 = 2048;
        v85 = v61;
        v86 = 2048;
        v87 = v62;
        v88 = 1024;
        v89 = v63;
        _os_log_impl(&dword_196BCC000, v59, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: Cancelling timer to release foreground assertion", (uint8_t *)&v82, 0x26u);
      }
      result = WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*((_QWORD *)this + 4) + 56));
    }
  }
  else
  {
    v44 = *((_QWORD *)this + 68);
    if (v44)
    {
      v45 = *(_QWORD *)(v44 + 8);
      if (v45)
      {
        if (*(_QWORD *)(v45 + 8))
        {
          result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v43 + 56));
          if ((result & 1) == 0)
          {
            v46 = qword_1ECE71640;
            if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
            {
              v47 = *((_QWORD *)this + 4);
              v48 = *(_QWORD *)(v47 + 744);
              v49 = *(_QWORD *)(v47 + 1896);
              v50 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
              if (v50)
                LODWORD(v50) = *(_DWORD *)(v50 + 108);
              v82 = 134219008;
              v83 = this;
              v84 = 2048;
              v85 = v48;
              v86 = 2048;
              v87 = v49;
              v88 = 1024;
              v89 = v50;
              v90 = 2048;
              v91 = 0x4024000000000000;
              _os_log_impl(&dword_196BCC000, v46, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: UIProcess starting timer to release a foreground assertion in %g seconds if audio doesn't start to play", (uint8_t *)&v82, 0x30u);
            }
            result = WTF::RunLoop::TimerBase::start();
          }
        }
      }
    }
  }
  v64 = *((_QWORD *)this + 4);
  if ((*(_WORD *)(v64 + 48) & 0x100) != 0)
  {
    v73 = *((_QWORD *)this + 69);
    if (!v73 || (v74 = *(_QWORD *)(v73 + 8)) == 0 || !*(_QWORD *)(v74 + 8))
    {
      v75 = (WebKit::ProcessThrottlerActivity **)((char *)this + 552);
      v76 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v77 = *(_QWORD *)(v64 + 744);
        v78 = *(_QWORD *)(v64 + 1896);
        v79 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
        if (v79)
          LODWORD(v79) = *(_DWORD *)(v79 + 108);
        v82 = 134218752;
        v83 = this;
        v84 = 2048;
        v85 = v77;
        v86 = 2048;
        v87 = v78;
        v88 = 1024;
        v89 = v79;
        _os_log_impl(&dword_196BCC000, v76, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: UIProcess is taking a foreground assertion because media capture is active", (uint8_t *)&v82, 0x26u);
      }
      v80 = *(_QWORD *)(*((_QWORD *)this + 66) + 208) + 200;
      v81 = WTF::fastMalloc((WTF *)0x28);
      WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v81, v80, "View is capturing media", 24, 1, 0);
      v71 = v75;
      v72 = (WebKit::ProcessThrottlerActivity *)v81;
      return (uint64_t)std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v71, v72);
    }
  }
  else
  {
    v65 = *((_QWORD *)this + 69);
    if (v65)
    {
      v66 = *(_QWORD *)(v65 + 8);
      if (v66)
      {
        if (*(_QWORD *)(v66 + 8))
        {
          v67 = qword_1ECE71640;
          if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
          {
            v68 = *(_QWORD *)(v64 + 744);
            v69 = *(_QWORD *)(v64 + 1896);
            v70 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
            if (v70)
              LODWORD(v70) = *(_DWORD *)(v70 + 108);
            v82 = 134218752;
            v83 = this;
            v84 = 2048;
            v85 = v68;
            v86 = 2048;
            v87 = v69;
            v88 = 1024;
            v89 = v70;
            _os_log_impl(&dword_196BCC000, v67, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::updateThrottleState: UIProcess is releasing a foreground assertion because media capture is no longer active", (uint8_t *)&v82, 0x26u);
          }
          v71 = (WebKit::ProcessThrottlerActivity **)((char *)this + 552);
          v72 = 0;
          return (uint64_t)std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](v71, v72);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::updateBackingStoreDiscardableState(WebKit::WebPageProxy *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;

  result = *((_QWORD *)this + 23);
  if (result)
  {
    v3 = *((_QWORD *)this + 26);
    if (*(_BYTE *)(v3 + 104) && *(_BYTE *)(v3 + 496))
    {
      v4 = *((_QWORD *)this + 5);
      if (v4)
        v5 = *(_QWORD *)(v4 + 8);
      else
        v5 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5))
        v6 = (*(_WORD *)(*((_QWORD *)this + 4) + 48) & 4) == 0;
      else
        v6 = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
      result = *((_QWORD *)this + 23);
    }
    else
    {
      v6 = 0;
    }
    return (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)result + 88))(result, v6);
  }
  return result;
}

void WebKit::WebPageProxy::updateMediaCapability(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  CFTypeRef *v7;
  uint64_t v8;
  WebKit::ExtensionCapabilityGranter *v9;
  WebKit::ExtensionCapabilityGranter *v10;

  v1 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v1 + 2560))
  {
    if (WebKit::WebPageProxy::shouldDeactivateMediaCapability(this))
    {
      if (*(_BYTE *)(v1 + 2560))
      {
        WebKit::WebPageProxy::deactivateMediaCapability(this, (id *)(v1 + 2480));
        return;
      }
      goto LABEL_21;
    }
    v3 = *((_QWORD *)this + 26);
    v4 = (unsigned int *)(v3 + 16);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 512) + 8);
    if (v6)
      v7 = (CFTypeRef *)(v6 - 16);
    else
      v7 = 0;
    CFRetain(v7[1]);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
    v8 = *((_QWORD *)this + 4);
    if ((*(_WORD *)(v8 + 48) & 4) != 0 && (*(_DWORD *)(v8 + 808) & 0x36C7803) != 0)
    {
      v9 = (WebKit::ExtensionCapabilityGranter *)WebKit::WebProcessPool::extensionCapabilityGranter((WebKit::WebProcessPool *)v7);
      if (!*(_BYTE *)(v1 + 2560))
        goto LABEL_21;
      WebKit::ExtensionCapabilityGranter::setMediaCapabilityActive(v9, (WebKit::MediaCapability *)(v1 + 2480), 1);
    }
    if (*(_BYTE *)(v1 + 2560))
    {
      if (!WebKit::MediaCapability::isActivatingOrActive((WebKit::MediaCapability *)(v1 + 2480)))
        goto LABEL_18;
      v10 = (WebKit::ExtensionCapabilityGranter *)WebKit::WebProcessPool::extensionCapabilityGranter((WebKit::WebProcessPool *)v7);
      if (*(_BYTE *)(v1 + 2560))
      {
        WebKit::ExtensionCapabilityGranter::grant(v10, (const WebKit::ExtensionCapability *)(v1 + 2480));
LABEL_18:
        if (v6)
          CFRelease(v7[1]);
        return;
      }
    }
LABEL_21:
    __break(1u);
  }
}

void sub_196D1EDDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::MediaCapability::isActivatingOrActive(WebKit::MediaCapability *this)
{
  unsigned int v1;
  uint64_t result;

  v1 = *((unsigned __int8 *)this + 24);
  if (v1 < 4)
    return (6u >> (v1 & 0xF)) & 1;
  result = 62;
  __break(0xC471u);
  return result;
}

unsigned __int8 *WebKit::WebPageProxy::currentURL@<X0>(WebKit::WebPageProxy *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  unsigned __int8 *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  result = WebKit::PageLoadState::activeURL((unsigned __int8 *)(*((_QWORD *)this + 4) + 968), a2);
  if (!*a2 || !*((_DWORD *)*a2 + 1))
  {
    v5 = *((_QWORD *)this + 74);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6 && *(_QWORD *)(v6 + 8) && *(_BYTE *)(v5 + 48))
    {
      v7 = *(_QWORD *)(v5 + 40);
      if (v7 >= *(unsigned int *)(v5 + 36))
      {
        __break(0xC471u);
      }
      else
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7);
        if (v8)
          return (unsigned __int8 *)WTF::String::operator=(a2, (WTF::StringImpl *)(v8 + 56));
      }
    }
  }
  return result;
}

unsigned int *WTF::Vector<WTF::CompletionHandler<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  unint64_t v4;
  unsigned int **v5;
  uint64_t v6;
  WTF *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int *v11;

  if (result[2] > a2)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > a2)
    {
      v5 = (unsigned int **)(*(_QWORD *)result + 8 * a2);
      v6 = 8 * v4 - 8 * a2;
      do
      {
        result = *v5;
        *v5 = 0;
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        ++v5;
        v6 -= 8;
      }
      while (v6);
      v3[3] = a2;
      LODWORD(v4) = a2;
    }
    v7 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4)
      {
        v8 = result;
        if (result != (unsigned int *)v7)
        {
          v9 = 8 * v4;
          v10 = (unsigned int **)v7;
          do
          {
            v11 = *v10;
            *v10 = 0;
            *(_QWORD *)v8 = v11;
            result = *v10;
            *v10 = 0;
            if (result)
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
            v8 += 2;
            ++v10;
            v9 -= 8;
          }
          while (v9);
        }
      }
    }
    if (v7)
    {
      if (*(WTF **)v3 == v7)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v7, (void *)a2);
    }
  }
  return result;
}

uint64_t WebKit::WebPageProxy::setUIClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t result;
  _QWORD *v8;
  char v9;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    v4 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v3;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (!*(_BYTE *)(a1 + 729))
    {
      if (*(_BYTE *)(a1 + 728))
      {
        v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 232))(*(_QWORD *)(a1 + 104));
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetCanRunBeforeUnloadConfirmPanel>(*(_QWORD *)(a1 + 208), &v9, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
      }
    }
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 392))(*(_QWORD *)(a1 + 104));
    WebKit::WebPageProxy::setCanRunModal((WebKit::WebPageProxy *)a1, v5);
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 280))(*(_QWORD *)(a1 + 104));
    return WebKit::WebPageProxy::setNeedsFontAttributes(a1, v6);
  }
  else
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v8 = off_1E34DA170;
    result = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v8;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t API::UIClient::canRunModal(API::UIClient *this)
{
  return 0;
}

WebKit::UIDelegate::UIClient *WebKit::UIDelegate::createUIClient@<X0>(WebKit::UIDelegate *this@<X0>, WebKit::UIDelegate::UIClient **a2@<X8>)
{
  WebKit::UIDelegate::UIClient *v4;
  WebKit::UIDelegate::UIClient *result;

  v4 = (WebKit::UIDelegate::UIClient *)WTF::fastMalloc((WTF *)0x18);
  result = WebKit::UIDelegate::UIClient::UIClient(v4, this);
  *a2 = v4;
  return result;
}

void sub_196D1F1C0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::UIDelegate::UIClient *WebKit::UIDelegate::UIClient::UIClient(WebKit::UIDelegate::UIClient *this, WebKit::UIDelegate *a2)
{
  unsigned int *v4;
  unsigned int v5;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_1E34C9218;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2, (uint64_t)a2);
  v4 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 2) = v4;
  return this;
}

void sub_196D1F238(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UIDelegate::setDelegate(uint64_t a1, void *a2)
{
  char v3;
  unsigned int *v4;
  int v5;
  __int16 v6;
  __int16 *v7;
  char v8;
  char v9;
  __int16 v10;
  unsigned int v11;
  int v12;
  char v13;
  __int16 v14;
  unsigned int v15;
  int v16;
  char v17;
  __int16 v18;
  unsigned int v19;
  int v20;
  char v21;
  __int16 v22;
  unsigned int v23;
  int v24;
  char v25;
  __int16 v26;
  unsigned int v27;
  int v28;
  char v29;
  __int16 v30;
  unsigned int v31;
  int v32;
  char v33;
  __int16 v34;
  unsigned int v35;
  int v36;
  char v37;
  __int16 v38;
  unsigned int v39;
  int v40;
  char v41;
  __int16 v42;
  unsigned int v43;
  int v44;
  char v45;
  __int16 v46;
  unsigned int v47;
  int v48;
  char v49;
  __int16 v50;
  unsigned int v51;
  int v52;
  char v53;
  __int16 v54;
  unsigned int v55;
  int v56;
  char v57;
  __int16 v58;
  unsigned int v59;
  int v60;
  char v61;
  __int16 v62;
  unsigned int v63;
  int v64;
  char v65;
  __int16 v66;
  unsigned int v67;
  int v68;
  char v69;
  __int16 v70;
  unsigned int v71;
  int v72;
  char v73;
  __int16 v74;
  unsigned int v75;
  int v76;
  char v77;
  __int16 v78;
  unsigned int v79;
  int v80;
  char v81;
  __int16 v82;
  unsigned int v83;
  int v84;
  char v85;
  __int16 v86;
  unsigned int v87;
  int v88;
  char v89;
  __int16 v90;
  unsigned int v91;
  int v92;
  char v93;
  __int16 v94;
  unsigned int v95;
  int v96;
  char v97;
  __int16 v98;
  unsigned int v99;
  int v100;
  char v101;
  __int16 v102;
  unsigned int v103;
  int v104;
  char v105;
  __int16 v106;
  unsigned int v107;
  int v108;
  char v109;
  __int16 v110;
  unsigned int v111;
  unsigned int v112;
  char v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  __int16 v126;
  unsigned int v127;
  int v128;
  char v129;
  __int16 v130;
  unsigned int v131;
  int v132;
  char v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  char v138;
  __int16 *v139;
  __int16 v140;
  unsigned int v141;
  char v142;
  __int16 v143;
  unsigned int v144;
  int v145;
  char v146;
  __int16 v147;
  unsigned int v148;
  int v149;
  char v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  int v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  char v166;
  int v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  int v171;
  uint64_t v172;
  unint64_t v173;
  char v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  char v178;
  int v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  int v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  int v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  int v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  int v195;
  uint64_t v196;
  unint64_t v197;
  char v198;
  uint64_t v199;
  unint64_t v200;
  char v201;
  uint64_t v202;
  unint64_t v203;
  char v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t result;
  char v208;
  unint64_t v209;

  objc_storeWeak((id *)(a1 + 16), a2);
  v3 = objc_opt_respondsToSelector();
  v5 = *(_DWORD *)(a1 + 24);
  v4 = (unsigned int *)(a1 + 24);
  v7 = (__int16 *)(v4 + 1);
  v6 = *((_WORD *)v4 + 2);
  v8 = *((_BYTE *)v4 + 6);
  *v4 = v5 & 0xFFFFFFFE | v3 & 1;
  *((_WORD *)v4 + 2) = v6;
  *((_BYTE *)v4 + 6) = v8;
  v9 = objc_opt_respondsToSelector();
  v10 = *((_WORD *)v4 + 2);
  v11 = *v4;
  v12 = 2;
  if ((v9 & 1) == 0)
    v12 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v10;
  *v4 = v11 & 0xFFFFFFFD | v12;
  v13 = objc_opt_respondsToSelector();
  v14 = *v7;
  v15 = *v4;
  v16 = 4;
  if ((v13 & 1) == 0)
    v16 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v14;
  *v4 = v15 & 0xFFFFFFFB | v16;
  v17 = objc_opt_respondsToSelector();
  v18 = *v7;
  v19 = *v4;
  v20 = 8;
  if ((v17 & 1) == 0)
    v20 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v18;
  *v4 = v19 & 0xFFFFFFF7 | v20;
  v21 = objc_opt_respondsToSelector();
  v22 = *v7;
  v23 = *v4;
  v24 = 16;
  if ((v21 & 1) == 0)
    v24 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v22;
  *v4 = v23 & 0xFFFFFFEF | v24;
  v25 = objc_opt_respondsToSelector();
  v26 = *v7;
  v27 = *v4;
  v28 = 32;
  if ((v25 & 1) == 0)
    v28 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v26;
  *v4 = v27 & 0xFFFFFFDF | v28;
  v29 = objc_opt_respondsToSelector();
  v30 = *v7;
  v31 = *v4;
  v32 = 64;
  if ((v29 & 1) == 0)
    v32 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v30;
  *v4 = v31 & 0xFFFFFFBF | v32;
  v33 = objc_opt_respondsToSelector();
  v34 = *v7;
  v35 = *v4;
  v36 = 128;
  if ((v33 & 1) == 0)
    v36 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v34;
  *v4 = v35 & 0xFFFFFF7F | v36;
  v37 = objc_opt_respondsToSelector();
  v38 = *v7;
  v39 = *v4;
  v40 = 512;
  if ((v37 & 1) == 0)
    v40 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v38;
  *v4 = v39 & 0xFFFFFDFF | v40;
  v41 = objc_opt_respondsToSelector();
  v42 = *v7;
  v43 = *v4;
  v44 = 256;
  if ((v41 & 1) == 0)
    v44 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v42;
  *v4 = v43 & 0xFFFFFEFF | v44;
  v45 = objc_opt_respondsToSelector();
  v46 = *v7;
  v47 = *v4;
  v48 = 1024;
  if ((v45 & 1) == 0)
    v48 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v46;
  *v4 = v47 & 0xFFFFFBFF | v48;
  v49 = objc_opt_respondsToSelector();
  v50 = *v7;
  v51 = *v4;
  v52 = 2048;
  if ((v49 & 1) == 0)
    v52 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v50;
  *v4 = v51 & 0xFFFFF7FF | v52;
  v53 = objc_opt_respondsToSelector();
  v54 = *v7;
  v55 = *v4;
  v56 = 4096;
  if ((v53 & 1) == 0)
    v56 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v54;
  *v4 = v55 & 0xFFFFEFFF | v56;
  v57 = objc_opt_respondsToSelector();
  v58 = *v7;
  v59 = *v4;
  v60 = 0x2000;
  if ((v57 & 1) == 0)
    v60 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v58;
  *v4 = v59 & 0xFFFFDFFF | v60;
  v61 = objc_opt_respondsToSelector();
  v62 = *v7;
  v63 = *v4;
  v64 = 0x4000;
  if ((v61 & 1) == 0)
    v64 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v62;
  *v4 = v63 & 0xFFFFBFFF | v64;
  v65 = objc_opt_respondsToSelector();
  v66 = *v7;
  v67 = *v4;
  v68 = 0x8000;
  if ((v65 & 1) == 0)
    v68 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v66;
  *v4 = v67 & 0xFFFF7FFF | v68;
  v69 = objc_opt_respondsToSelector();
  v70 = *v7;
  v71 = *v4;
  v72 = 0x10000;
  if ((v69 & 1) == 0)
    v72 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v70;
  *v4 = v71 & 0xFFFEFFFF | v72;
  v73 = objc_opt_respondsToSelector();
  v74 = *v7;
  v75 = *v4;
  v76 = 0x80000;
  if ((v73 & 1) == 0)
    v76 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v74;
  *v4 = v75 & 0xFFF7FFFF | v76;
  v77 = objc_opt_respondsToSelector();
  v78 = *v7;
  v79 = *v4;
  v80 = 0x100000;
  if ((v77 & 1) == 0)
    v80 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v78;
  *v4 = v79 & 0xFFEFFFFF | v80;
  v81 = objc_opt_respondsToSelector();
  v82 = *v7;
  v83 = *v4;
  v84 = 0x200000;
  if ((v81 & 1) == 0)
    v84 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v82;
  *v4 = v83 & 0xFFDFFFFF | v84;
  v85 = objc_opt_respondsToSelector();
  v86 = *v7;
  v87 = *v4;
  v88 = 0x400000;
  if ((v85 & 1) == 0)
    v88 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v86;
  *v4 = v87 & 0xFFBFFFFF | v88;
  v89 = objc_opt_respondsToSelector();
  v90 = *v7;
  v91 = *v4;
  v92 = 0x800000;
  if ((v89 & 1) == 0)
    v92 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v90;
  *v4 = v91 & 0xFF7FFFFF | v92;
  v93 = objc_opt_respondsToSelector();
  v94 = *v7;
  v95 = *v4;
  v96 = 0x1000000;
  if ((v93 & 1) == 0)
    v96 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v94;
  *v4 = v95 & 0xFEFFFFFF | v96;
  v97 = objc_opt_respondsToSelector();
  v98 = *v7;
  v99 = *v4;
  v100 = 0x2000000;
  if ((v97 & 1) == 0)
    v100 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v98;
  *v4 = v99 & 0xFDFFFFFF | v100;
  v101 = objc_opt_respondsToSelector();
  v102 = *v7;
  v103 = *v4;
  v104 = 0x4000000;
  if ((v101 & 1) == 0)
    v104 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v102;
  *v4 = v103 & 0xFBFFFFFF | v104;
  v105 = objc_opt_respondsToSelector();
  v106 = *v7;
  v107 = *v4;
  v108 = 0x40000000;
  if ((v105 & 1) == 0)
    v108 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v106;
  *v4 = v107 & 0xBFFFFFFF | v108;
  v109 = objc_opt_respondsToSelector();
  v110 = *v7;
  v111 = *v4;
  v112 = 0x80000000;
  if ((v109 & 1) == 0)
    v112 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v110;
  *v4 = v111 & 0x7FFFFFFF | v112;
  v113 = objc_opt_respondsToSelector();
  v114 = *((unsigned __int8 *)v4 + 6);
  v115 = 0x100000000;
  if ((v113 & 1) == 0)
    v115 = 0;
  v116 = (*v4 | ((unint64_t)((unsigned __int16)*v7 | (v114 << 16)) << 32)) & 0xFFFFFFFEFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v114;
  *v4 = v116;
  *v7 = (v116 | v115) >> 32;
  v117 = objc_opt_respondsToSelector();
  v118 = *((unsigned __int8 *)v4 + 6);
  v119 = 0x200000000;
  if ((v117 & 1) == 0)
    v119 = 0;
  v120 = (*v4 | ((unint64_t)((unsigned __int16)*v7 | (v118 << 16)) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v118;
  *v4 = v120;
  *v7 = (v120 | v119) >> 32;
  v121 = objc_opt_respondsToSelector();
  v122 = *((unsigned __int8 *)v4 + 6);
  v123 = 0x400000000;
  if ((v121 & 1) == 0)
    v123 = 0;
  v124 = (*v4 | ((unint64_t)((unsigned __int16)*v7 | (v122 << 16)) << 32)) & 0xFFFFFFFBFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v122;
  *v4 = v124;
  *v7 = (v124 | v123) >> 32;
  v125 = objc_opt_respondsToSelector();
  v126 = *v7;
  v127 = *v4;
  v128 = 0x20000;
  if ((v125 & 1) == 0)
    v128 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v126;
  *v4 = v127 & 0xFFFDFFFF | v128;
  v129 = objc_opt_respondsToSelector();
  v130 = *v7;
  v131 = *v4;
  v132 = 0x40000;
  if ((v129 & 1) == 0)
    v132 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v7 = v130;
  *v4 = v131 & 0xFFFBFFFF | v132;
  v133 = objc_opt_respondsToSelector();
  v134 = *((unsigned __int8 *)v4 + 6);
  v135 = 0x800000000;
  if ((v133 & 1) == 0)
    v135 = 0;
  v136 = (*v4 | ((unint64_t)((unsigned __int16)*v7 | (v134 << 16)) << 32)) & 0xFFFFFFF7FFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v134;
  *v4 = v136;
  *v7 = (v136 | v135) >> 32;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v137 = 0x8000000;
  }
  else
  {
    v138 = objc_opt_respondsToSelector();
    v137 = 0x8000000;
    if ((v138 & 1) == 0)
      v137 = 0;
  }
  v139 = (__int16 *)(v4 + 1);
  v140 = *((_WORD *)v4 + 2);
  v141 = *v4 & 0xF7FFFFFF | v137;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *((_WORD *)v4 + 2) = v140;
  *v4 = v141;
  v142 = objc_opt_respondsToSelector();
  v143 = *((_WORD *)v4 + 2);
  v144 = *v4;
  v145 = 0x10000000;
  if ((v142 & 1) == 0)
    v145 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v139 = v143;
  *v4 = v144 & 0xEFFFFFFF | v145;
  v146 = objc_opt_respondsToSelector();
  v147 = *v139;
  v148 = *v4;
  v149 = 0x20000000;
  if ((v146 & 1) == 0)
    v149 = 0;
  *((_BYTE *)v4 + 6) = *((_BYTE *)v4 + 6);
  *v139 = v147;
  *v4 = v148 & 0xDFFFFFFF | v149;
  v150 = objc_opt_respondsToSelector();
  v151 = *((unsigned __int8 *)v4 + 6);
  v152 = 0x1000000000;
  if ((v150 & 1) == 0)
    v152 = 0;
  v153 = (*v4 | ((unint64_t)((unsigned __int16)*v139 | (v151 << 16)) << 32)) & 0xFFFFFFEFFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v151;
  *v4 = v153;
  *v139 = (v153 | v152) >> 32;
  v154 = objc_opt_respondsToSelector();
  v155 = *((unsigned __int8 *)v4 + 6);
  v156 = 0x2000000000;
  if ((v154 & 1) == 0)
    v156 = 0;
  v157 = (*v4 | ((unint64_t)((unsigned __int16)*v139 | (v155 << 16)) << 32)) & 0xFFFFFFDFFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v155;
  *v4 = v157;
  *v139 = (v157 | v156) >> 32;
  v158 = objc_opt_respondsToSelector();
  v159 = *((unsigned __int8 *)v4 + 6);
  v160 = 0x4000000000;
  if ((v158 & 1) == 0)
    v160 = 0;
  v161 = (*v4 | ((unint64_t)((unsigned __int16)*v139 | (v159 << 16)) << 32)) & 0xFFFFFFBFFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v159;
  *v4 = v161;
  *v139 = (v161 | v160) >> 32;
  v162 = objc_opt_respondsToSelector();
  v163 = *((unsigned __int8 *)v4 + 6);
  v164 = 0x8000000000;
  if ((v162 & 1) == 0)
    v164 = 0;
  v165 = (*v4 | ((unint64_t)((unsigned __int16)*v139 | (v163 << 16)) << 32)) & 0xFFFFFF7FFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v163;
  *v4 = v165;
  *v139 = (v165 | v164) >> 32;
  v166 = objc_opt_respondsToSelector();
  v167 = *((unsigned __int8 *)v4 + 6);
  v168 = 0x10000000000;
  if ((v166 & 1) == 0)
    v168 = 0;
  v169 = (*v4 | ((unint64_t)((unsigned __int16)*v139 | (v167 << 16)) << 32)) & 0xFFFFFEFFFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v167;
  *v4 = v169;
  *v139 = (v169 | v168) >> 32;
  v170 = objc_opt_respondsToSelector();
  v171 = *((unsigned __int8 *)v4 + 6);
  v172 = 0x20000000000;
  if ((v170 & 1) == 0)
    v172 = 0;
  v173 = (*v4 | ((unint64_t)((unsigned __int16)*v139 | (v171 << 16)) << 32)) & 0xFFFFFDFFFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v171;
  *v4 = v173;
  *v139 = (v173 | v172) >> 32;
  v174 = objc_opt_respondsToSelector();
  v175 = *((unsigned __int8 *)v4 + 6);
  v176 = 0x40000000000;
  if ((v174 & 1) == 0)
    v176 = 0;
  v177 = (*v4 | ((unint64_t)((unsigned __int16)*v139 | (v175 << 16)) << 32)) & 0xFFFFFBFFFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v175;
  *v4 = v177;
  *v139 = (v177 | v176) >> 32;
  v178 = objc_opt_respondsToSelector();
  v179 = *((unsigned __int8 *)v4 + 6);
  v180 = 0x80000000000;
  if ((v178 & 1) == 0)
    v180 = 0;
  v181 = (*v4 | ((unint64_t)((unsigned __int16)*v139 | (v179 << 16)) << 32)) & 0xFFFFF7FFFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v179;
  *v4 = v181;
  *v139 = (v181 | v180) >> 32;
  v182 = objc_opt_respondsToSelector();
  v183 = *((unsigned __int8 *)v4 + 6);
  v184 = 0x100000000000;
  if ((v182 & 1) == 0)
    v184 = 0;
  v185 = (*v4 | ((unint64_t)((unsigned __int16)*v139 | (v183 << 16)) << 32)) & 0xFFFFEFFFFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v183;
  *v4 = v185;
  *v139 = (v185 | v184) >> 32;
  v186 = objc_opt_respondsToSelector();
  v187 = *((unsigned __int8 *)v4 + 6);
  v188 = 0x200000000000;
  if ((v186 & 1) == 0)
    v188 = 0;
  v189 = (*v4 | ((unint64_t)((unsigned __int16)*v139 | (v187 << 16)) << 32)) & 0xFFFFDFFFFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v187;
  *v4 = v189;
  *v139 = (v189 | v188) >> 32;
  v190 = objc_opt_respondsToSelector();
  v191 = *((unsigned __int8 *)v4 + 6);
  v192 = 0x400000000000;
  if ((v190 & 1) == 0)
    v192 = 0;
  v193 = (*v4 | ((unint64_t)((unsigned __int16)*v139 | (v191 << 16)) << 32)) & 0xFFFFBFFFFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v191;
  *v4 = v193;
  *v139 = (v193 | v192) >> 32;
  v194 = objc_opt_respondsToSelector();
  v195 = *((unsigned __int8 *)v4 + 6);
  v196 = 0x800000000000;
  if ((v194 & 1) == 0)
    v196 = 0;
  v197 = (*v4 | ((unint64_t)((unsigned __int16)*v139 | (v195 << 16)) << 32)) & 0xFFFF7FFFFFFFFFFFLL;
  *((_BYTE *)v4 + 6) = v195;
  *v4 = v197;
  *v139 = (v197 | v196) >> 32;
  v198 = objc_opt_respondsToSelector();
  v199 = 0x1000000000000;
  if ((v198 & 1) == 0)
    v199 = 0;
  v200 = (*v4 | ((unint64_t)(*((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16)) << 32)) & 0xFFFEFFFFFFFFFFFFLL;
  *v139 = *v139;
  *v4 = v200;
  *((_BYTE *)v4 + 6) = (v200 | v199) >> 48;
  v201 = objc_opt_respondsToSelector();
  v202 = 0x2000000000000;
  if ((v201 & 1) == 0)
    v202 = 0;
  v203 = (*v4 | ((unint64_t)(*((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16)) << 32)) & 0xFFFDFFFFFFFFFFFFLL;
  *v139 = *v139;
  *v4 = v203;
  *((_BYTE *)v4 + 6) = (v203 | v202) >> 48;
  v204 = objc_opt_respondsToSelector();
  v205 = 0x4000000000000;
  if ((v204 & 1) == 0)
    v205 = 0;
  v206 = (*v4 | ((unint64_t)(*((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16)) << 32)) & 0xFFFBFFFFFFFFFFFFLL;
  *v139 = *v139;
  *v4 = v206;
  *((_BYTE *)v4 + 6) = (v206 | v205) >> 48;
  result = objc_opt_respondsToSelector();
  v208 = 8;
  if ((result & 1) == 0)
    v208 = 0;
  v209 = (*v4 | ((unint64_t)(*((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16)) << 32)) & 0xFFF7FFFFFFFFFFFFLL;
  *v139 = *v139;
  *v4 = v209;
  *((_BYTE *)v4 + 6) = BYTE6(v209) | v208;
  return result;
}

unint64_t WebKit::UIDelegate::UIClient::canRunBeforeUnloadConfirmPanel(WebKit::UIDelegate::UIClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return ((unint64_t)*(unsigned int *)(v2 + 24) >> 7) & 1;
  else
    return 0;
}

unint64_t WebKit::UIDelegate::UIClient::needsFontAttributes(WebKit::UIDelegate::UIClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return ((unint64_t)*(unsigned int *)(v2 + 24) >> 29) & 1;
  else
    return 0;
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::unpauseConditionalAssertion(uint64_t this)
{
  uint64_t v1;
  WTF::ThreadSafeRefCountedBase **v2;
  uint64_t *v3;
  WTF::ThreadSafeRefCountedBase *v4[2];

  v4[1] = (WTF::ThreadSafeRefCountedBase *)this;
  v1 = this;
  if ((*(_BYTE *)(this + 48) & 1) != 0)
  {
    this = WTF::RetainPtr<WKWebView>::operator BOOL((_QWORD *)(this + 40));
    if ((this & 1) != 0 && (*(_BYTE *)(v1 + 49) & 1) != 0)
    {
      v2 = WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v4, v1);
      v3 = (uint64_t *)WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy((WebKit::WebAuthenticatorCoordinatorProxy *)v2);
      WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(v3, (uint64_t *)v4);
      WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)v4);
      this = objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(v1 + 40)), "performAutoFillAssistedRequests");
    }
    *(_BYTE *)(v1 + 48) = 0;
  }
  return this;
}

uint64_t WebKit::WebProcessPool::updateProcessSuppressionState(WebKit::WebProcessPool *this, void *a2)
{
  char v2;
  void *v3;
  unsigned __int8 ***v4;
  unsigned __int8 ***v5;
  unsigned __int8 **v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned __int8 ***v10;
  int v11;

  if (*(_QWORD *)(*((_QWORD *)this + 67) + 8))
    v2 = 0;
  else
    v2 = *(_QWORD *)(*((_QWORD *)this + 69) + 8) == 0;
  WebKit::NetworkProcessProxy::allNetworkProcesses(a2, (uint64_t)&v10);
  if (v11)
  {
    v4 = v10;
    v5 = &v10[v11];
    do
    {
      v6 = *v4;
      v7 = (unsigned int *)(*v4 + 2);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      WebKit::AuxiliaryProcessProxy::setProcessSuppressionEnabled(v6, v2);
      if (v6)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7);
      ++v4;
    }
    while (v4 != v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v3);
}

uint64_t WebKit::PageClientImpl::viewLayerHostingMode(WebKit::PageClientImpl *this)
{
  return 1;
}

uint64_t WebKit::WebPageProxy::updateCurrentModifierState(WebKit::WebPageProxy *this)
{
  _BYTE *v3;
  char v4;

  v4 = WebCore::PlatformKeyboardEvent::currentStateOfModifierKeys(this);
  v3 = &v4;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UpdateCurrentModifierState>(*((_QWORD *)this + 26), &v3, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
}

unsigned int *WebKit::WebPageProxy::setPageLoadStateObserver(uint64_t a1, unsigned int **a2)
{
  _QWORD *v4;
  unsigned int *v5;
  unsigned int *result;
  _BYTE v7[24];

  v4 = *(_QWORD **)(a1 + 152);
  if (v4)
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(*(_QWORD *)(a1 + 32) + 944, v4);
  v5 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v5;
  if (result)
  {
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    v5 = *(unsigned int **)(a1 + 152);
  }
  if (v5)
    return WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>(*(_QWORD *)(a1 + 32) + 944, v5, (uint64_t)v7);
  return result;
}

unsigned int *WTF::Vector<WebKit::WebPageProxy::InjectedBundleMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        CFRelease(*(CFTypeRef *)(v6 + 8));
      v7 = (WTF::StringImpl *)*(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v8 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

_QWORD *WebKit::NetworkProcess::setTrackingPreventionEnabled(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = (_QWORD *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v5);
  if (result)
    return WebKit::NetworkSession::setTrackingPreventionEnabled(result, a3);
  return result;
}

void WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3) & v7;
  v9 = (uint64_t *)(v6 + 16 * v8);
  v10 = *v9;
  v11 = *a3;
  if (*v9)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v10 == v11)
      {
        v23 = *a2;
        if (*a2)
          v24 = *(unsigned int *)(v23 - 4);
        else
          v24 = 0;
        v20 = 0;
        v19 = v23 + 16 * v24;
        goto LABEL_14;
      }
      if (v10 == -1)
        v21 = v9;
      v8 = (v8 + v22) & v7;
      v9 = (uint64_t *)(v6 + 16 * v8);
      v10 = *v9;
      ++v22;
    }
    while (*v9);
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v9 = v21;
    }
  }
  v12 = v9[1];
  *v9 = v11;
  v9[1] = 0;
  if (v12)
    WebCore::NetworkStorageSession::operator delete(v12, 0x128uLL);
  v13 = *a2;
  if (*a2)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_13;
LABEL_25:
    v9 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(a2, v9);
    v15 = *a2;
    if (*a2)
      v18 = *(unsigned int *)(v15 - 4);
    else
      v18 = 0;
    goto LABEL_13;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_25;
LABEL_13:
  v19 = v15 + 16 * v18;
  v20 = 1;
LABEL_14:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = v20;
}

void WebKit::NetworkProcess::addWebsiteDataStore(uint64_t a1, uint64_t a2)
{
  WebKit::NetworkProcess *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;

  v4 = (WebKit::NetworkProcess *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(a2 + 648))
    WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 640), (const WebKit::SandboxExtensionHandle *)a2);
  if (*(_BYTE *)(a2 + 664))
    WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 656), (const WebKit::SandboxExtensionHandle *)a2);
  if (*(_BYTE *)(a2 + 680))
    WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 672), (const WebKit::SandboxExtensionHandle *)a2);
  if (*(_BYTE *)(a2 + 696))
    WebKit::SandboxExtension::consumePermanently((const char ***)(a2 + 688), (const WebKit::SandboxExtensionHandle *)a2);
  WebKit::NetworkProcess::addStorageSession((uint64_t *)a1, v5, a2);
  v7 = (uint64_t *)(a1 + 208);
  v6 = *(_QWORD *)(a1 + 208);
  if (v6
    || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand((uint64_t *)(a1 + 208), 0), (v6 = *v7) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = (v5 + ~(v5 << 32)) ^ ((v5 + ~(v5 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (uint64_t *)(v6 + 16 * v12);
  v14 = *v13;
  if (!*v13)
  {
LABEL_20:
    *v13 = v5;
    WebKit::NetworkSessionCocoa::create((WebKit::NetworkSessionCocoa *)a1, v4, &v30);
    v17 = (uint64_t)v30;
    v30 = 0;
    v18 = v13[1];
    v13[1] = v17;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = (uint64_t)v30;
      v30 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    v20 = *v7;
    if (*v7)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v7;
    if (*v7)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_32;
    }
    else if (3 * v25 > 4 * v24)
    {
      goto LABEL_32;
    }
    v13 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand((uint64_t *)(a1 + 208), v13);
    goto LABEL_32;
  }
  v15 = 0;
  v16 = 1;
  while (v14 != v5)
  {
    if (v14 == -1)
      v15 = v13;
    v12 = (v12 + v16) & v8;
    v13 = (uint64_t *)(v6 + 16 * v12);
    v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        *v15 = 0;
        v15[1] = 0;
        --*(_DWORD *)(*v7 - 16);
        v13 = v15;
      }
      goto LABEL_20;
    }
  }
LABEL_32:
  if (*(_BYTE *)(a1 + 395))
  {
    v26 = *(_QWORD *)(v13[1] + 800);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v26 + 16));
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v27 = off_1E34BE328;
    v30 = v27;
    WebKit::NetworkStorageManager::suspend(v26, (uint64_t *)&v30);
    v29 = (uint64_t)v30;
    v30 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    if (v26)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v26 + 16), v28);
  }
}

uint64_t WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *a1 + ~(*a1 << 32);
  v2 = 9 * (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) ^ (((v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13)) >> 8));
  v3 = (v2 ^ (v2 >> 15)) + ~((v2 ^ (v2 >> 15)) << 27);
  return (v3 >> 31) ^ v3;
}

void WebKit::NetworkSessionCocoa::create(WebKit::NetworkSessionCocoa *this@<X0>, WebKit::NetworkProcess *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;

  std::make_unique[abi:sn180100]<WebKit::NetworkSessionCocoa,WebKit::NetworkProcess &,WebKit::NetworkSessionCreationParameters const&>(&v5, (uint64_t)this, (uint64_t)a2);
  *a3 = v5;
}

uint64_t WebKit::proxyDictionary(uint64_t this, const WTF::URL *a2, const WTF::URL *a3)
{
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef cf;

  v5 = (_QWORD *)this;
  if ((*((_BYTE *)a2 + 8) & 1) != 0 || (*((_BYTE *)a3 + 8) & 1) != 0)
  {
    this = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
    v6 = (void *)this;
    if ((*((_BYTE *)a2 + 8) & 1) != 0)
    {
      v13 = WTF::URL::host(a2);
      v14 = v10;
      WTF::StringView::createNSString((WTF::StringView *)&v13);
      objc_msgSend(v6, "setObject:forKey:", cf, *MEMORY[0x1E0C93220]);
      v11 = cf;
      cf = 0;
      if (v11)
        CFRelease(v11);
      this = WTF::URL::port(a2);
      if ((this & 0xFF0000) != 0)
      {
        v12 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", (unsigned __int16)this);
        this = objc_msgSend(v6, "setObject:forKey:", v12, *MEMORY[0x1E0C93228]);
      }
    }
    if ((*((_BYTE *)a3 + 8) & 1) != 0)
    {
      v13 = WTF::URL::host(a3);
      v14 = v7;
      WTF::StringView::createNSString((WTF::StringView *)&v13);
      objc_msgSend(v6, "setObject:forKey:", cf, *MEMORY[0x1E0C93238]);
      v8 = cf;
      cf = 0;
      if (v8)
        CFRelease(v8);
      this = WTF::URL::port(a3);
      if ((this & 0xFF0000) != 0)
      {
        v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", (unsigned __int16)this);
        this = objc_msgSend(v6, "setObject:forKey:", v9, *MEMORY[0x1E0C93240]);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  *v5 = v6;
  return this;
}

void sub_196D209B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  const void *v12;

  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkSessionCocoa::initializeNSURLSessionsInSet(uint64_t a1, uint64_t a2, WebKit::AuxiliaryProcess *a3)
{
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  WebKit::SessionWrapper::initialize(a2 + 32, a3, (WebKit **)a1, 1);
  if (objc_msgSend((id)-[WebKit::AuxiliaryProcess HTTPCookieStorage](a3, "HTTPCookieStorage"), "cookieAcceptPolicy") == 1)
  {
    v5 = qword_1ECE714B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE714B0, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 24);
      v7 = 134217984;
      v8 = v6;
      _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "Creating network session with ID %llu that will not accept cookies.", (uint8_t *)&v7, 0xCu);
    }
  }
}

WebKit::NetworkSession *WebKit::NetworkSession::NetworkSession(WebKit::NetworkSession *this, WebKit::NetworkProcess *a2, const WebKit::NetworkSessionCreationParameters *a3)
{
  unsigned int *v6;
  unsigned int v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  const WebKit::SandboxExtensionHandle *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17;
  WebKit::NetworkCache::Cache *v18;
  WebKit::NetworkCache::Cache *v19;
  uint64_t v20;
  uint64_t v21;
  const WebKit::SandboxExtensionHandle *v22;
  WTF::StringImpl *v23;
  const WebKit::SandboxExtensionHandle *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  NSObject *v29;
  uint64_t v30[2];
  WTF::StringImpl *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)this = off_1E34BFEC0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = *(_QWORD *)a3;
  v6 = (unsigned int *)((char *)a2 + 120);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = a2;
  *((_BYTE *)this + 56) = 0;
  v8 = (_DWORD *)*((_QWORD *)a3 + 69);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 8) = v8;
  *((_QWORD *)this + 9) = 0;
  *((_WORD *)this + 40) = *((_WORD *)a3 + 285);
  v9 = (_DWORD *)*((_QWORD *)a3 + 75);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 11) = v9;
  *((_BYTE *)this + 96) = *((_BYTE *)a3 + 569);
  *((_BYTE *)this + 97) = 1;
  *((_BYTE *)this + 98) = *((_BYTE *)a3 + 572);
  *(_WORD *)((char *)this + 99) = *(_WORD *)((char *)a3 + 573);
  v10 = (_DWORD *)*((_QWORD *)a3 + 72);
  if (v10)
    *v10 += 2;
  *((_QWORD *)this + 13) = v10;
  *((_BYTE *)this + 136) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_BYTE *)this + 128) = 0;
  WebKit::managerOrProxy((WebKit::NetworkSession *)((char *)this + 152), this, a2, a3);
  *((_BYTE *)this + 160) = *((_BYTE *)a3 + 360);
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 480) = 0;
  *((_BYTE *)this + 488) = 0;
  *((_OWORD *)this + 31) = 0u;
  WebKit::PrefetchCache::PrefetchCache((WebKit::NetworkSession *)((char *)this + 512));
  *((_OWORD *)this + 38) = 0u;
  *((_QWORD *)this + 78) = MEMORY[0x1E0DD8F90] + 16;
  *((_BYTE *)this + 664) = 0;
  *((_BYTE *)this + 688) = 0;
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_OWORD *)this + 40) = 0u;
  *(_QWORD *)((char *)this + 653) = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *((_QWORD *)this + 88) = WebKit::NetworkBroadcastChannelRegistry::NetworkBroadcastChannelRegistry(v11, a2);
  *((_DWORD *)this + 178) = *((_DWORD *)a3 + 79);
  *((_BYTE *)this + 716) = *((_BYTE *)a3 + 321);
  *((_BYTE *)this + 717) = *((_BYTE *)a3 + 323);
  *((_BYTE *)this + 718) = 0;
  *((_QWORD *)this + 90) = *(_QWORD *)((char *)a3 + 324);
  *((_BYTE *)this + 760) = 0;
  *((_BYTE *)this + 744) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_BYTE *)this + 784) = *((_BYTE *)a3 + 521);
  *((_QWORD *)this + 99) = 0;
  WebKit::createNetworkStorageManager((WebKit::NetworkSession *)((char *)this + 800), a2, a3);
  *((_QWORD *)this + 103) = 0;
  *((_QWORD *)this + 101) = 0;
  *(_DWORD *)((char *)this + 815) = 0;
  WebKit::WebPushD::WebPushDaemonConnectionConfiguration::WebPushDaemonConnectionConfiguration((WebKit::WebPushD::WebPushDaemonConnectionConfiguration *)&v31, (const WebKit::NetworkSessionCreationParameters *)((char *)a3 + 208));
  WebKit::NetworkNotificationManager::NetworkNotificationManager((char *)this + 832, this, (char *)a3 + 344, &v31);
  WebKit::WebPushD::WebPushDaemonConnectionConfiguration::~WebPushDaemonConnectionConfiguration((WebKit::WebPushD::WebPushDaemonConnectionConfiguration *)&v31, v12);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 0x8000000000000000) == 0 || v14 == -1)
  {
    v15 = (WTF::StringImpl *)*((_QWORD *)a3 + 36);
    if (v15)
    {
      *(_DWORD *)v15 += 2;
      v31 = v15;
      WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 37, v13);
      v16 = *((_BYTE *)a2 + 328);
      if (*((_BYTE *)a3 + 313))
        v16 |= 4u;
      WebKit::NetworkCache::Cache::open((WTF::FileSystemImpl *)&v31, (uint64_t)a2, v16 | *((_BYTE *)a3 + 314), *((_QWORD *)this + 3), v30);
      v17 = v30[0];
      v30[0] = 0;
      v18 = (WebKit::NetworkCache::Cache *)*((_QWORD *)this + 76);
      *((_QWORD *)this + 76) = v17;
      if (v18)
      {
        WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v18, v13);
        v19 = (WebKit::NetworkCache::Cache *)v30[0];
        v30[0] = 0;
        if (v19)
          WTF::RefCounted<WebKit::NetworkCache::Cache>::deref(v19, v13);
        v17 = *((_QWORD *)this + 76);
      }
      if (!v17)
      {
        v29 = qword_1ECE71410;
        if (os_log_type_enabled((os_log_t)qword_1ECE71410, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v30[0]) = 0;
          _os_log_error_impl(&dword_196BCC000, v29, OS_LOG_TYPE_ERROR, "Failed to initialize the WebKit network disk cache", (uint8_t *)v30, 2u);
        }
      }
    }
    else
    {
      v31 = 0;
    }
    v20 = *((_QWORD *)a3 + 69);
    if (v20 && *(_DWORD *)(v20 + 4))
      WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 70, v13);
    v21 = *((_QWORD *)a3 + 59);
    if (v21 && *(_DWORD *)(v21 + 4))
    {
      WTF::String::operator=((WTF::StringImpl **)this + 101, (const WebKit::NetworkSessionCreationParameters *)((char *)a3 + 472));
      WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 60, v22);
    }
    v23 = v31;
    v31 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v13);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  *((_BYTE *)this + 144) = *((_BYTE *)a3 + 315);
  WebKit::NetworkSession::setTrackingPreventionEnabled(this, *((unsigned __int8 *)a3 + 568));
  WebKit::NetworkSession::setBlobRegistryTopOriginPartitioningEnabled(this, *((unsigned __int8 *)a3 + 361));
  *((_BYTE *)this + 718) = *((_BYTE *)a3 + 362);
  WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 64, v24);
  v25 = (WTF::StringImpl *)*((_QWORD *)a3 + 63);
  if (v25)
    *(_DWORD *)v25 += 2;
  v31 = v25;
  v32 = *((_BYTE *)a3 + 520);
  std::optional<WebKit::NetworkSession::ServiceWorkerInfo>::operator=[abi:sn180100]<WebKit::NetworkSession::ServiceWorkerInfo,void>((uint64_t)this + 744, (WTF::StringImpl *)&v31);
  v27 = v31;
  v31 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  return this;
}

_QWORD *WebKit::NetworkSession::setTrackingPreventionEnabled(_QWORD *this, int a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::NetworkStorageSession *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _QWORD *v28;
  _BYTE buf[12];
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if ((((this[9] == 0) ^ a2) & 1) == 0)
  {
    v3 = (uint64_t)this;
    v4 = qword_1ECE718E8;
    if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(v3 + 24);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v3;
      v30 = 2048;
      v31 = v5;
      v32 = 1024;
      v33 = a2;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - NetworkSession::setTrackingPreventionEnabled: sessionID=%llu, enabled=%d", buf, 0x1Cu);
    }
    v6 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)buf = *(_QWORD *)(v3 + 24);
    v7 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 216), buf);
    if (v7)
      WebCore::NetworkStorageSession::setTrackingPreventionEnabled(v7);
    if ((a2 & 1) != 0)
    {
      v8 = *(_QWORD *)(v3 + 24);
      v9 = v8 < 0 && v8 != -1;
      WebKit::WebResourceLoadStatisticsStore::create(v3, v3 + 64, *(_BYTE *)(v3 + 80) != 0, v9, (uint64_t *)buf);
      v10 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      v11 = *(unsigned __int8 ***)(v3 + 72);
      *(_QWORD *)(v3 + 72) = v10;
      if (v11)
      {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v11);
        v12 = *(unsigned __int8 ***)buf;
        *(_QWORD *)buf = 0;
        if (v12)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v12);
      }
      v13 = *(_QWORD *)(v3 + 24);
      if ((v13 & 0x8000000000000000) == 0 || v13 == -1)
      {
        v14 = *(unsigned __int8 ***)(v3 + 72);
        v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v15 = off_1E34C0598;
        *(_QWORD *)buf = v15;
        WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(v14, (uint64_t *)buf);
        v16 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      if (*(_BYTE *)(v3 + 81))
      {
        v19 = *(_QWORD *)(v3 + 72);
        v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v20 = off_1E34C05C0;
        *(_QWORD *)buf = v20;
        WebKit::WebResourceLoadStatisticsStore::setResourceLoadStatisticsDebugMode(v19, 1, (uint64_t *)buf);
        v21 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      v17 = *(_QWORD *)(v3 + 88);
      if (v17 && *(_DWORD *)(v17 + 4) && (MEMORY[0x19AEABBCC]() & 1) == 0)
      {
        v22 = *(_QWORD *)(v3 + 72);
        v23 = *(_DWORD **)(v3 + 88);
        if (v23)
          *v23 += 2;
        *(_QWORD *)buf = v23;
        v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v24 = off_1E34C05E8;
        v28 = v24;
        WebKit::WebResourceLoadStatisticsStore::setPrevalentResourceForDebugMode(v22, (uint64_t)buf, (uint64_t *)&v28);
        v26 = (uint64_t)v28;
        v28 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        v27 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v25);
          else
            *(_DWORD *)v27 -= 2;
        }
      }
      return WebKit::NetworkSession::forwardResourceLoadStatisticsSettings((WebKit::NetworkSession *)v3);
    }
    else
    {
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = off_1E34C0570;
      *(_QWORD *)buf = v18;
      WebKit::NetworkSession::destroyResourceLoadStatistics(v3, (uint64_t *)buf);
      this = *(_QWORD **)buf;
      if (*(_QWORD *)buf)
        return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
    }
  }
  return this;
}

unsigned __int8 *WebKit::NetworkSession::destroyResourceLoadStatistics(uint64_t a1, uint64_t *a2)
{
  WTF::RunLoop *v3;
  unsigned __int8 *result;
  unsigned __int8 **v5;
  uint64_t v6;

  v3 = *(WTF::RunLoop **)(a1 + 72);
  if (v3)
  {
    result = (unsigned __int8 *)WebKit::WebResourceLoadStatisticsStore::didDestroyNetworkSession(v3, a2);
    v5 = *(unsigned __int8 ***)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v5)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::WebResourceLoadStatisticsStore,(WTF::DestructionThread)1>(*v5);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::NetworkSession::setBlobRegistryTopOriginPartitioningEnabled(WebKit::NetworkSession *this, int a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "disabled";
    v6 = *((_QWORD *)this + 3);
    if (a2)
      v5 = "enabled";
    v8 = 136446466;
    v9 = v5;
    v10 = 2048;
    v11 = v6;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "NetworkSession::setBlobRegistryTopOriginPartitioningEnabled as %{public}s for session %llu", (uint8_t *)&v8, 0x16u);
  }
  return WebCore::BlobRegistryImpl::setPartitioningEnabled((WebKit::NetworkSession *)((char *)this + 624));
}

WTF::StringImpl *WebKit::createNetworkStorageManager(WebKit *this, WebKit::NetworkProcess *a2, const WebKit::NetworkSessionCreationParameters *a3)
{
  const WebKit::SandboxExtensionHandle *v6;
  const WebKit::SandboxExtensionHandle *v7;
  const WebKit::SandboxExtensionHandle *v8;
  uint64_t v9;
  uint64_t v10;
  const WebKit::SandboxExtensionHandle *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;

  WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 56, a2);
  WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 58, v6);
  WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 60, v7);
  WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 62, v8);
  v9 = *((_QWORD *)a2 + 4);
  if (v9)
    v10 = *(_QWORD *)(v9 + 24);
  else
    v10 = 0;
  v14 = 0;
  WTF::String::operator=(&v14, (const WebKit::NetworkSessionCreationParameters *)((char *)a3 + 504));
  WebKit::SandboxExtension::consumePermanently((const char ***)a3 + 64, v11);
  WebKit::NetworkStorageManager::create((uint64_t)a2, *(_QWORD *)a3, v10, (WTF::StringImpl **)a3 + 61, (uint64_t)a3 + 440, (uint64_t)a3 + 456, (uint64_t *)this, (uint64_t)a3 + 472, (uint64_t)&v14, *((_QWORD *)a3 + 46), *((_QWORD *)a3 + 47), *((_QWORD *)a3 + 48), *((_QWORD *)a3 + 49), *((_QWORD *)a3 + 50), *((_QWORD *)a3 + 51), *((_OWORD *)a3 + 26), *((_QWORD *)a3 + 53), *((_QWORD *)a3 + 54), HIDWORD(*((_QWORD *)a3 + 54)),
    *((_BYTE *)a3 + 363),
    *((_BYTE *)a3 + 522));
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebKit::PCM::ManagerProxy *WebKit::managerOrProxy(WebKit *this, WebKit::NetworkSession *a2, WebKit::NetworkProcess *a3, const WebKit::NetworkSessionCreationParameters *a4)
{
  uint64_t v8;
  WebKit::PCM::ClientImpl *v9;
  WebKit::PCM::ManagerProxy *result;
  uint64_t v11;
  WebKit::PCM::ManagerProxy *v12;
  WebKit::PCM::ClientImpl *v13;
  uint64_t v14;

  v8 = *((_QWORD *)a4 + 42);
  if (v8 && *(_DWORD *)(v8 + 4) && ((v11 = *((_QWORD *)a2 + 3), (v11 & 0x8000000000000000) == 0) || v11 == -1))
  {
    v12 = (WebKit::PCM::ManagerProxy *)WTF::fastMalloc((WTF *)0x30);
    result = WebKit::PCM::ManagerProxy::ManagerProxy(v12, (const WebKit::NetworkSessionCreationParameters *)((char *)a4 + 336), a2);
    *(_QWORD *)this = result;
  }
  else
  {
    v9 = (WebKit::PCM::ClientImpl *)WTF::fastMalloc((WTF *)0x18);
    v13 = WebKit::PCM::ClientImpl::ClientImpl(v9, a2, a3);
    WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::PrivateClickMeasurementManager,WTF::UniqueRef<WebKit::PCM::ClientImpl>,WTF::String const&>(&v14, (uint64_t *)&v13, (uint64_t)a4 + 552);
    result = v13;
    *(_QWORD *)this = v14;
    if (result)
      return (WebKit::PCM::ManagerProxy *)(*(uint64_t (**)(WebKit::PCM::ManagerProxy *))(*(_QWORD *)result
                                                                                                 + 8))(result);
  }
  return result;
}

WebKit::WebPushD::WebPushDaemonConnectionConfiguration *WebKit::WebPushD::WebPushDaemonConnectionConfiguration::WebPushDaemonConnectionConfiguration(WebKit::WebPushD::WebPushDaemonConnectionConfiguration *this, const WebKit::WebPushD::WebPushDaemonConnectionConfiguration *a2)
{
  _DWORD *v4;
  __int128 v5;

  *(_BYTE *)this = *(_BYTE *)a2;
  std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100]((uint64_t)this + 8, (uint64_t)a2 + 8);
  v4 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v4)
    *v4 += 2;
  *((_QWORD *)this + 4) = v4;
  v5 = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = v5;
  return this;
}

_QWORD *WebKit::NetworkBroadcastChannelRegistry::NetworkBroadcastChannelRegistry(_QWORD *this, WebKit::NetworkProcess *a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = (unsigned int *)((char *)a2 + 120);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *this = a2;
  this[1] = 0;
  return this;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;

  v10 = WTF::fastMalloc((WTF *)0x70);
  result = WebKit::WebResourceLoadStatisticsStore::WebResourceLoadStatisticsStore(v10, a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::WebResourceLoadStatisticsStore(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  WTF::RunLoop *v13;
  WTF::RunLoop *v14;
  WTF::RunLoop *Statistics;
  WTF::RunLoop *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  WTF::StringImpl *v20;
  __int128 v21;
  uint64_t v22;

  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v10 + 24) = a1;
  *(_QWORD *)a1 = v10;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v11 = *(unsigned int **)(a2 + 8);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 8) = v11;
  v13 = (WTF::RunLoop *)WebKit::sharedStatisticsQueue((WTF::WorkQueue **)(a1 + 16));
  *(_QWORD *)(a1 + 24) = 0;
  v14 = (WTF::RunLoop *)WTF::RunLoop::main(v13);
  Statistics = (WTF::RunLoop *)WTF::RunLoop::Timer::Timer<WebKit::WebResourceLoadStatisticsStore>((WTF::RunLoop::TimerBase *)(a1 + 32), v14, a1);
  *(_BYTE *)(a1 + 64) = a5;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 96) = 0;
  v16 = (WTF::RunLoop *)WTF::RunLoop::main(Statistics);
  if ((WTF::RunLoop::isCurrent(v16) & 1) != 0)
  {
    if ((a5 & 1) == 0 && *(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
    {
      WTF::String::isolatedCopy();
      LOBYTE(v21) = a4;
      *((_QWORD *)&v21 + 1) = *(_QWORD *)(a2 + 24);
      v17 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v17 = &off_1E34C1538;
      *(_QWORD *)(v17 + 8) = a1;
      *(_QWORD *)(v17 + 16) = v20;
      *(_OWORD *)(v17 + 24) = v21;
      v22 = v17;
      WebKit::WebResourceLoadStatisticsStore::postTask(a1, &v22);
      v18 = v22;
      v22 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      WTF::RunLoop::TimerBase::start();
    }
    return a1;
  }
  else
  {
    result = 153;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::sharedStatisticsQueue@<X0>(WTF::WorkQueue **a1@<X8>)
{
  WTF::WorkQueue *v3;
  uint64_t result;
  uint64_t v5;

  {
    v3 = (WTF::WorkQueue *)WebKit::sharedStatisticsQueue(void)::queue;
  }
  else
  {
    WTF::SuspendableWorkQueue::create();
    v3 = (WTF::WorkQueue *)v5;
    WebKit::sharedStatisticsQueue(void)::queue = v5;
  }
  result = WTF::WorkQueue::ref(v3);
  *a1 = v3;
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;

  v8[0] = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34C15D8;
  v5[1] = a1;
  v5[2] = a1;
  v5[3] = v4;
  v8[1] = 0;
  v8[2] = 0;
  v9 = v5;
  WebKit::WebResourceLoadStatisticsStore::postTask((uint64_t)a1, (uint64_t *)&v9);
  v6 = (uint64_t)v9;
  v9 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WebKit::WebResourceLoadStatisticsStore::populateMemoryStoreFromDisk(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v8);
}

_QWORD *WebKit::NetworkNotificationManager::NetworkNotificationManager(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  WTF *v8;
  __int128 v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  void *v13;
  __n128 v14;
  uint64_t v15;
  WTF *v16;
  WTF *v18;
  int v19;
  int v20;
  _OWORD v21[2];
  unsigned __int8 v22;

  *a1 = off_1E34C2920;
  a1[1] = 0;
  a1[2] = a2;
  a1[3] = 0;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 < 0)
    goto LABEL_16;
  while (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    IPC::Connection::getAuditToken(*(IPC::Connection **)(*(_QWORD *)(a2 + 32) + 32), (uint64_t)v21);
    if (!v22)
      goto LABEL_8;
    v20 = 32;
    v8 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    v19 = 32;
    v18 = v8;
    v7 = v22;
    if (v22)
    {
      v9 = v21[1];
      *(_OWORD *)v8 = v21[0];
      *((_OWORD *)v8 + 1) = v9;
      std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a4 + 8, (uint64_t)&v18);
      v11 = v18;
      if (v18)
      {
        v18 = 0;
        v19 = 0;
        WTF::fastFree(v11, v10);
      }
LABEL_8:
      WTF::String::utf8();
      v12 = WTF::fastMalloc((WTF *)0x80);
      v14 = WebKit::WebPushD::Connection::Connection(v12, (uint64_t *)&v18, (uint64_t)a1, a4);
      v15 = a1[3];
      a1[3] = v12;
      if (v15)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v14);
      v16 = v18;
      v18 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          WTF::fastFree(v16, v13);
        else
          --*(_DWORD *)v16;
      }
      return a1;
    }
    __break(1u);
LABEL_16:
    if (v7 != -1)
      return a1;
  }
  return a1;
}

_QWORD *WebKit::NetworkSession::forwardResourceLoadStatisticsSettings(WebKit::NetworkSession *this)
{
  uint64_t v2;
  char v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  _QWORD *v9;

  WebKit::WebResourceLoadStatisticsStore::setThirdPartyCookieBlockingMode(*((_QWORD **)this + 9), *((_BYTE *)this + 98));
  WebKit::WebResourceLoadStatisticsStore::setSameSiteStrictEnforcementEnabled(*((_BYTE **)this + 9), *((_BYTE *)this + 99));
  v2 = *((_QWORD *)this + 9);
  v3 = *((_BYTE *)this + 100);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34C0610;
  v9 = v4;
  WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(v2, v3, (uint64_t *)&v9);
  v5 = (uint64_t)v9;
  v9 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 9);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E34C0638;
  v9 = v7;
  WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(v6, (uint64_t)this + 104, (uint64_t *)&v9);
  result = v9;
  v9 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

_BYTE *WebKit::WebResourceLoadStatisticsStore::setSameSiteStrictEnforcementEnabled(_BYTE *result, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  if (!result[64])
  {
    v3 = (uint64_t)result;
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v4 = off_1E34C1A38;
    *(_QWORD *)(v4 + 8) = v3;
    *(_BYTE *)(v4 + 16) = a2;
    v5 = (_BYTE *)v4;
    WebKit::WebResourceLoadStatisticsStore::postTask(v3, (uint64_t *)&v5);
    result = v5;
    v5 = 0;
    if (result)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setFirstPartyWebsiteDataRemovalMode(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 64))
  {
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    v6 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v6 = &off_1E34C1A60;
    *(_QWORD *)(v6 + 8) = a1;
    *(_BYTE *)(v6 + 16) = a2;
    *(_QWORD *)(v6 + 24) = v5;
    v9 = v6;
    WebKit::WebResourceLoadStatisticsStore::postTask(a1, &v9);
    result = v9;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::postTask(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v4 = *a2;
    *a2 = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v5 = &off_1E34C0D18;
    v5[1] = a1;
    v5[2] = v4;
    v7 = v5;
    WTF::SuspendableWorkQueue::dispatch();
    result = (uint64_t)v7;
    if (v7)
      return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  }
  return result;
}

_QWORD *WebKit::WebResourceLoadStatisticsStore::setThirdPartyCookieBlockingMode(_QWORD *result, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (uint64_t)result;
  v4 = result[1];
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 32);
      v8 = *(_QWORD **)(v5 + 24);
      result = (_QWORD *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v6 + 216), &v8);
      if (result)
        result = (_QWORD *)WebCore::NetworkStorageSession::setThirdPartyCookieBlockingMode();
    }
  }
  if (!*(_BYTE *)(v3 + 64))
  {
    v7 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v7 = off_1E34C1A10;
    *(_QWORD *)(v7 + 8) = v3;
    *(_BYTE *)(v7 + 16) = a2;
    v8 = (_QWORD *)v7;
    WebKit::WebResourceLoadStatisticsStore::postTask(v3, (uint64_t *)&v8);
    result = v8;
    v8 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if (!*(_BYTE *)(a1 + 64) && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4) && !MEMORY[0x19AEABBCC]())
  {
    v7 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "WebResourceLoadStatisticsStore::setStandaloneApplicationDomain() called with non-empty domain.", (uint8_t *)&v13, 2u);
    }
    v13 = a1;
    WebCore::RegistrableDomain::isolatedCopy(&v14);
    v8 = *a3;
    *a3 = 0;
    v15 = v8;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v9 = &off_1E34C1AB0;
    v9[1] = v13;
    v9[2] = v14;
    v10 = v15;
    v14 = 0;
    v15 = 0;
    v9[3] = v10;
    v16 = v9;
    WebKit::WebResourceLoadStatisticsStore::postTask(a1, (uint64_t *)&v16);
    v12 = (uint64_t)v16;
    v16 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    return WebKit::WebResourceLoadStatisticsStore::setStandaloneApplicationDomain(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)&v13, v11);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

void WebKit::NetworkProcess::addStorageSession(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  const WebKit::SandboxExtensionHandle *v5;
  const char *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *PrivateStorageSession;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  const char *v16;
  CFTypeRef v17;
  CFTypeRef v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  WTF::StringImpl *v22;
  CFTypeRef cf;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27[3];
  const char *v28;
  int v29;
  WTF::StringImpl *v30;

  v26 = a2;
  WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)&v24, a1 + 27, (uint64_t *)&v26);
  if (!v25)
    return;
  if (!*(_BYTE *)(a3 + 346))
  {
    cf = 0;
    if ((v26 & 0x8000000000000000) != 0 && v26 != -1
      || !*(_DWORD *)(a3 + 12)
      || (WebKit::SandboxExtension::consumePermanently((const char ***)(a3 + 16), v5), v26 == 1))
    {
      v6 = 0;
    }
    else
    {
      WebKit::cookieStorageFromIdentifyingData(a3, (uint64_t *)&v28);
      v6 = v28;
      cf = v28;
    }
    v7 = *WebKit::NetworkProcess::uiProcessBundleIdentifier((WebKit::NetworkProcess *)a1);
    if (v7)
      *(_DWORD *)v7 += 2;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(&v22, (uint64_t)v7, 46, v26);
    v9 = v22;
    if (v22)
    {
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v8);
        else
          *(_DWORD *)v7 -= 2;
      }
      v21 = 0;
      *(_DWORD *)v9 += 2;
      WTF::UUID::UUID((WTF::UUID *)v27);
      v30 = v9;
      v28 = ".PrivateBrowsing.";
      v29 = 17;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(&v20, (uint64_t *)&v30, (uint64_t)&v28, v27);
      if (v20)
      {
        WTF::String::createCFString((WTF::String *)&v20);
        PrivateStorageSession = v20;
        v20 = 0;
        if (PrivateStorageSession)
        {
          if (*(_DWORD *)PrivateStorageSession == 2)
            PrivateStorageSession = (WTF::StringImpl *)WTF::StringImpl::destroy(PrivateStorageSession, v10);
          else
            *(_DWORD *)PrivateStorageSession -= 2;
        }
        if (*(_DWORD *)v9 == 2)
          PrivateStorageSession = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v10);
        else
          *(_DWORD *)v9 -= 2;
        if ((v26 & 0x8000000000000000) != 0)
        {
          if (v26 != -1)
          {
            PrivateStorageSession = (WTF::StringImpl *)WebCore::createPrivateStorageSession();
            goto LABEL_22;
          }
        }
        else if (v26 == 1)
        {
          v12 = 0;
LABEL_23:
          if (WebCore::NetworkStorageSession::processMayUseCookieAPI(PrivateStorageSession) && !v6 && v12)
            cf = (CFTypeRef)_CFURLStorageSessionCopyCookieStorage();
          v13 = WTF::fastMalloc((WTF *)0x128);
          MEMORY[0x19AEB13A4](v13, v26, &v21, &cf, 0);
          v15 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = v13;
          if (v15)
            WebCore::NetworkStorageSession::operator delete(v15, 0x128uLL);
          v16 = v28;
          v28 = 0;
          if (v16)
            CFRelease(v16);
          v17 = v21;
          v21 = 0;
          if (v17)
            CFRelease(v17);
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v14);
          else
            *(_DWORD *)v9 -= 2;
          v18 = cf;
          cf = 0;
          if (v18)
            CFRelease(v18);
          return;
        }
        PrivateStorageSession = (WTF::StringImpl *)WebCore::NetworkStorageSession::createCFStorageSessionForIdentifier();
LABEL_22:
        v12 = v27[0];
        v21 = (CFTypeRef)v27[0];
        goto LABEL_23;
      }
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x196D22134);
  }
  WebKit::NetworkProcess::newTestingSession(&v28, v26);
  v19 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v24 + 8) = v28;
  if (v19)
    WebCore::NetworkStorageSession::operator delete(v19, 0x128uLL);
}

WTF::StringImpl **WebKit::NetworkProcess::uiProcessBundleIdentifier(WebKit::NetworkProcess *this)
{
  WTF::StringImpl **v1;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v1 = (WTF::StringImpl **)((char *)this + 144);
  if (!*((_QWORD *)this + 18))
  {
    MEMORY[0x19AEABCC8](&v8, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"));
    v4 = v8;
    v8 = 0;
    v5 = *v1;
    *v1 = v4;
    if (v5)
    {
      v6 = *(_DWORD *)v5 - 2;
      if (*(_DWORD *)v5 == 2)
      {
        WTF::StringImpl::destroy(v5, v3);
        v5 = v8;
        v8 = 0;
        if (!v5)
          return v1;
        v6 = *(_DWORD *)v5 - 2;
        if (*(_DWORD *)v5 == 2)
        {
          WTF::StringImpl::destroy(v5, v7);
          return v1;
        }
      }
      *(_DWORD *)v5 = v6;
    }
  }
  return v1;
}

WebKit::PrefetchCache *WebKit::PrefetchCache::PrefetchCache(WebKit::PrefetchCache *this)
{
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  WebCore::Timer::Timer<WebKit::PrefetchCache,WebKit::PrefetchCache>((WebKit::PrefetchCache *)((char *)this + 40), (uint64_t)this);
  return this;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::PrefetchCache,WebKit::PrefetchCache>(WebCore::TimerBase *a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E34B3740;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E34C4FA8;
  v4[1] = WebKit::PrefetchCache::clearExpiredEntries;
  v4[2] = 0;
  v4[3] = a2;
  *((_QWORD *)a1 + 6) = v4;
  return a1;
}

_QWORD *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (uint64_t *)v6;
    do
    {
      if (*v16 != -1)
      {
        if (*v16)
        {
          v18 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(*a1, v16);
          v19 = v16[1];
          v16[1] = 0;
          if (v19)
            WebCore::NetworkStorageSession::operator delete(v19, 0x128uLL);
          if (v16 == a3)
            v13 = v18;
        }
        else
        {
          v17 = v16[1];
          v16[1] = 0;
          if (v17)
            WebCore::NetworkStorageSession::operator delete(v17, 0x128uLL);
        }
      }
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_19;
  }
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

_QWORD *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (uint64_t *)v6;
    do
    {
      if (*v16 != -1)
      {
        if (*v16)
        {
          v18 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::reinsert(*a1, v16);
          v19 = v16[1];
          v16[1] = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          if (v16 == a3)
            v13 = v18;
        }
        else
        {
          v17 = v16[1];
          v16[1] = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_19;
  }
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,std::unique_ptr<WebKit::NetworkSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v5, a2);
}

uint64_t WTF::RunLoop::Timer::Timer<WebKit::WebResourceLoadStatisticsStore>(WTF::RunLoop::TimerBase *a1, WTF::RunLoop *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34C1510;
  v6[1] = WebKit::WebResourceLoadStatisticsStore::performDailyTasks;
  v6[2] = 0;
  v6[3] = a3;
  result = WTF::RunLoop::TimerBase::TimerBase(a1, a2);
  *(_QWORD *)a1 = off_1E34ABE00;
  *((_QWORD *)a1 + 3) = v6;
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::add<WebKit::NetworkStorageManager&>(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  WTF **v10;
  int i;
  unsigned int v12;
  WTF **v13;
  WTF *v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;

  v6 = qword_1ECE72A50;
  if (qword_1ECE72A50
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(0),
        (v6 = qword_1ECE72A50) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_DWORD *)*a2 + 4);
  v25 = a1;
  if (v8 >= 0x100)
    v9 = v8 >> 8;
  else
    v9 = WTF::StringImpl::hashSlowCase(*a2);
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = (WTF **)(v6 + 24 * (v9 & v7));
    v14 = *v13;
    if (!*v13)
    {
      if (v10)
      {
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        --*(_DWORD *)(qword_1ECE72A50 - 16);
        v13 = v10;
      }
      result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::String const&,WebKit::NetworkStorageManager&>((uint64_t)v13, (WTF::StringImpl *)a2, (uint64_t)a3);
      if (qword_1ECE72A50)
        v16 = *(_DWORD *)(qword_1ECE72A50 - 12) + 1;
      else
        v16 = 1;
      *(_DWORD *)(qword_1ECE72A50 - 12) = v16;
      v17 = qword_1ECE72A50;
      if (qword_1ECE72A50)
        v18 = *(_DWORD *)(qword_1ECE72A50 - 12);
      else
        v18 = 0;
      v19 = (*(_DWORD *)(qword_1ECE72A50 - 16) + v18);
      v20 = *(unsigned int *)(qword_1ECE72A50 - 4);
      if (v20 > 0x400)
      {
        if (v20 > 2 * v19)
          goto LABEL_16;
      }
      else if (3 * v20 > 4 * v19)
      {
LABEL_16:
        v21 = v25;
        v22 = v17 + 24 * v20;
        v23 = 1;
        goto LABEL_17;
      }
      result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v13);
      v13 = (WTF **)result;
      v17 = qword_1ECE72A50;
      if (qword_1ECE72A50)
        LODWORD(v20) = *(_DWORD *)(qword_1ECE72A50 - 4);
      else
        LODWORD(v20) = 0;
      goto LABEL_16;
    }
    if (v14 == (WTF *)-1)
    {
      v10 = (WTF **)(v6 + 24 * v12);
      goto LABEL_25;
    }
    result = WTF::equal(v14, *a2, a3);
    if ((_DWORD)result)
      break;
LABEL_25:
    v9 = i + v12;
  }
  if (qword_1ECE72A50)
    v24 = *(_DWORD *)(qword_1ECE72A50 - 4);
  else
    v24 = 0;
  v21 = v25;
  v23 = 0;
  v22 = qword_1ECE72A50 + 24 * v24;
LABEL_17:
  *(_QWORD *)v21 = v13;
  *(_QWORD *)(v21 + 8) = v22;
  *(_BYTE *)(v21 + 16) = v23;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(unsigned int a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **result;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl **v15;
  void *v16;

  v4 = qword_1ECE72A50;
  if (qword_1ECE72A50)
  {
    v5 = *(_DWORD *)(qword_1ECE72A50 - 4);
    v6 = *(_DWORD *)(qword_1ECE72A50 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  v9 = (_DWORD *)v7;
  v10 = v7 + 16;
  if (a1)
    bzero((void *)(v7 + 16), 24 * a1);
  qword_1ECE72A50 = v10;
  v9[2] = a1 - 1;
  v9[3] = a1;
  *v9 = 0;
  *(_DWORD *)(qword_1ECE72A50 - 12) = v6;
  v11 = 0;
  if (v5)
  {
    v13 = v5;
    v14 = (_QWORD *)v4;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert((uint64_t)v14, v8);
          WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>::~KeyValuePair((uint64_t)v14, v16);
          if (v14 == a2)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>::~KeyValuePair((uint64_t)v14, v8);
        }
      }
      v14 += 3;
      --v13;
    }
    while (v13);
    goto LABEL_16;
  }
  result = 0;
  if (v4)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(_QWORD *a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE72A50 && (v2 = *(_DWORD *)(qword_1ECE72A50 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE72A50 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v3, a1);
}

unsigned __int8 **WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::ThreadSafeWeakPtr<WebKit::NetworkStorageManager>>,WTF::String const&,WebKit::NetworkStorageManager&>(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  unsigned __int8 **result;

  WTF::String::operator=((WTF::StringImpl **)a1, a2);
  result = WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>::operator=((unsigned __int8 **)(a1 + 8), *(WTF::ThreadSafeWeakPtrControlBlock **)(a3 + 16));
  *(_QWORD *)(a1 + 16) = a3;
  return result;
}

unsigned __int8 **WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>::operator=(unsigned __int8 **a1, WTF::ThreadSafeWeakPtrControlBlock *this)
{
  WTF::ThreadSafeWeakPtrControlBlock *v3;
  unsigned __int8 *v4;

  if (this)
    v3 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(this);
  else
    v3 = 0;
  v4 = *a1;
  *a1 = (unsigned __int8 *)v3;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, this);
  return a1;
}

void WebKit::WebPageGroup::~WebPageGroup(WebKit::WebPageGroup *this, void *a2)
{
  int *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;

  *(_QWORD *)this = &off_1E34D3BB0;
  if ((byte_1ECE72D46 & 1) != 0)
  {
    v3 = dword_1ECE72000;
    if (qword_1ECE72D58)
    {
      v4 = *((_QWORD *)this + 4);
      v5 = *(_DWORD *)(qword_1ECE72D58 - 8);
      v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = *(_QWORD *)(qword_1ECE72D58 + 16 * v9);
      if (v10 != v4)
      {
        v11 = 1;
        while (v10)
        {
          v9 = ((_DWORD)v9 + v11) & v5;
          v10 = *(_QWORD *)(qword_1ECE72D58 + 16 * v9);
          ++v11;
          if (v10 == v4)
            goto LABEL_9;
        }
        v9 = *(unsigned int *)(qword_1ECE72D58 - 4);
      }
LABEL_9:
      if (v9 != *(_DWORD *)(qword_1ECE72D58 - 4))
      {
        v12 = (_QWORD *)(qword_1ECE72D58 + 16 * v9);
        v13 = (unsigned int *)v12[1];
        *v12 = -1;
        v12[1] = 0;
        if (v13)
        {
          do
          {
            v16 = __ldaxr(v13);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v13));
          if (!v17)
          {
            atomic_store(1u, v13);
            WTF::fastFree((WTF *)v13, a2);
            v3 = dword_1ECE72000;
          }
        }
        v14 = *((_QWORD *)v3 + 427);
        ++*(_DWORD *)(v14 - 16);
        if (v14)
          v15 = *(_DWORD *)(v14 - 12) - 1;
        else
          v15 = -1;
        *(_DWORD *)(v14 - 12) = v15;
        v18 = *((_QWORD *)v3 + 427);
        if (v18)
        {
          v19 = 6 * *(_DWORD *)(v18 - 12);
          v20 = *(_DWORD *)(v18 - 4);
          if (v19 < v20 && v20 >= 9)
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageGroup,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v20 >> 1);
        }
      }
    }
  }
  else
  {
    qword_1ECE72D58 = 0;
    byte_1ECE72D46 = 1;
  }
  v22 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v22)
    CFRelease(*(CFTypeRef *)(v22 + 8));
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *((_QWORD *)this + 2);
  if (v24)
  {
    *(_QWORD *)(v24 + 8) = 0;
    v25 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebKit::WebPageGroup::~WebPageGroup(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebPreferences::~WebPreferences(WebKit::WebPreferences *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  *(_QWORD *)this = &off_1E34D6F28;
  v3 = *((_QWORD *)this + 11);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 8);
  if (v4)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, (WTF::StringImpl *)*((unsigned int *)this + 18));
  v5 = (WTF *)*((_QWORD *)this + 5);
  if (v5)
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v5, (WTF::StringImpl *)*((unsigned int *)this + 12));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

{
  WebKit::WebPreferences::~WebPreferences(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebProcessPool::~WebProcessPool(WebKit::WebProcessPool *this)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::WebProcessPool *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  WTF *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WebKit::WebBackForwardCache *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl **v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  const void *v79;
  const void *v80;
  const void *v81;
  const void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl **v95;
  WTF::StringImpl **v96;
  WTF::StringImpl **v97;
  WTF::StringImpl **v98;
  WTF::StringImpl **v99;
  WTF::StringImpl **v100;
  WTF::StringImpl **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t i;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;

  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    {
      v3 = WebKit::singleton(void)::singleton;
      if (WebKit::singleton(void)::singleton)
        v3 = *(_QWORD *)(WebKit::singleton(void)::singleton + 8);
    }
    else
    {
      v3 = 0;
      WebKit::singleton(void)::singleton = 0;
    }
    if (v3 == v2)
      WebKit::GPUProcessProxy::keepProcessAliveTemporarily((unsigned int *)this);
  }
  v4 = (_DWORD *)*((_QWORD *)this + 96);
  ++*v4;
  WebKit::WebProcessCache::clear((uint64_t)v4);
  if (!*v4)
  {
    __break(0xC471u);
    JUMPOUT(0x196D23884);
  }
  --*v4;
  {
    if (dword_1ECE73864)
    {
      v6 = *(_QWORD *)WebKit::processPools(void)::processPools;
      v7 = *(_QWORD *)(*(_QWORD *)WebKit::processPools(void)::processPools + 8);
      v8 = (WebKit::WebProcessPool *)(v7 - 16);
      v10 = v7 == 0;
      v9 = 0;
      v10 = !v10 && v8 == this;
      if (v10)
      {
LABEL_20:
        v13 = WebKit::processPools(void)::processPools + 8 * v9;
        *(_QWORD *)v13 = 0;
        do
        {
          v14 = __ldaxr((unsigned int *)v6);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, (unsigned int *)v6));
        if (!v15)
        {
          atomic_store(1u, (unsigned int *)v6);
          WTF::fastFree((WTF *)v6, v5);
        }
        WTF::VectorMover<false,WTF::WeakRef<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl>>::move((unsigned int *)(v13 + 8), (unsigned int *)(WebKit::processPools(void)::processPools + 8 * dword_1ECE73864), (unsigned int **)v13);
        --dword_1ECE73864;
      }
      else
      {
        while (dword_1ECE73864 - 1 != v9)
        {
          v6 = *(_QWORD *)(WebKit::processPools(void)::processPools + 8 + 8 * v9);
          v11 = *(_QWORD *)(v6 + 8);
          ++v9;
          if (v11)
            v12 = v11 - 16 == (_QWORD)this;
          else
            v12 = 0;
          if (v12)
            goto LABEL_20;
        }
      }
    }
  }
  else
  {
    WebKit::processPools(void)::processPools = 0;
    *(_QWORD *)&dword_1ECE73860 = 0;
  }
  IPC::MessageReceiverMap::invalidate((WebKit::WebProcessPool *)((char *)this + 56), v5);
  v16 = *((_QWORD *)this + 57);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    v18 = v16 + 24 * v17;
    if (*(_DWORD *)(v16 - 12))
    {
      v19 = *((_QWORD *)this + 57);
      if ((_DWORD)v17)
      {
        v20 = 24 * v17;
        v19 = *((_QWORD *)this + 57);
        while (!*(_QWORD *)v19 || *(_QWORD *)v19 == -1)
        {
          v19 += 24;
          v20 -= 24;
          if (!v20)
          {
            v19 = v18;
            goto LABEL_36;
          }
        }
      }
      goto LABEL_36;
    }
    v19 = v16 + 24 * v17;
  }
  else
  {
    v19 = 0;
    LODWORD(v17) = 0;
  }
  v18 = v16 + 24 * v17;
  if (v16)
  {
LABEL_36:
    v22 = v16 + 24 * *(unsigned int *)(v16 - 4);
    goto LABEL_41;
  }
  v22 = 0;
LABEL_41:
  while (v19 != v22)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v19 + 16) + 16))(*(_QWORD *)(v19 + 16));
    *(_QWORD *)(*(_QWORD *)(v19 + 16) + 8) = 0;
    v23 = v19 + 24;
    v19 = v18;
    if (v23 != v18)
    {
      v19 = v23;
      while (!*(_QWORD *)v19 || *(_QWORD *)v19 == -1)
      {
        v19 += 24;
        if (v19 == v18)
        {
          v19 = v18;
          break;
        }
      }
    }
  }
  WebKit::WebProcessPool::unregisterNotificationObservers(this);
  v25 = (uint64_t *)((char *)this + 664);
  if (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 83))
  {
    {
      WebKit::UIGamepadProvider::UIGamepadProvider((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider);
    }
    WebKit::UIGamepadProvider::processPoolStoppedUsingGamepads((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider, this);
  }
  while (*((_DWORD *)this + 21))
    WebKit::WebProcessProxy::shutDown(**((WebKit::WebProcessProxy ***)this + 9));
  v27 = *((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v27)
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v27, v26);
  v28 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v28)
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v28, v26);
  v29 = (_QWORD *)*((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v29)
    std::default_delete<WebKit::ExtensionCapabilityGranter>::operator()[abi:sn180100]((uint64_t)this + 936, v29);
  WTF::Vector<WTF::RetainPtr<NSObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 920, v29);
  v31 = (WTF *)*((_QWORD *)this + 113);
  if (v31)
  {
    *((_QWORD *)this + 113) = 0;
    *((_DWORD *)this + 228) = 0;
    WTF::fastFree(v31, v30);
  }
  v32 = *((_QWORD *)this + 112);
  if (v32)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v32, v30);
  v33 = (WTF::StringImpl **)*((_QWORD *)this + 111);
  if (v33)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, (WTF::StringImpl *)v30);
  v34 = *((_QWORD *)this + 109);
  *(_QWORD *)v34 = 0;
  if (!*(_BYTE *)(v34 + 16) && !*(_QWORD *)(v34 + 8))
    MEMORY[0x19AEB936C]();
  v35 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  *((_QWORD *)this + 104) = off_1E34ABE00;
  v36 = *((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebProcessPool *)((char *)this + 832));
  if (*((_BYTE *)this + 824))
  {
    v38 = *((_QWORD *)this + 102);
    *((_QWORD *)this + 102) = 0;
    if (v38)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v38 + 8), v37);
    v39 = *((_QWORD *)this + 101);
    *((_QWORD *)this + 101) = 0;
    if (v39)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v39 + 8), v37);
  }
  v40 = *((_QWORD *)this + 100);
  *(_QWORD *)v40 = 0;
  if (!*(_BYTE *)(v40 + 16) && !*(_QWORD *)(v40 + 8))
    MEMORY[0x19AEB936C]();
  v41 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *((_QWORD *)this + 98);
  if (v42)
  {
    v43 = *(unsigned int *)(v42 - 4);
    if ((_DWORD)v43)
    {
      v44 = (uint64_t *)(v42 + 8);
      do
      {
        if (*(v44 - 1) != -1)
        {
          std::unique_ptr<WebCore::PrewarmInformation>::reset[abi:sn180100](v44, 0);
          v45 = (WTF::StringImpl *)*(v44 - 1);
          *(v44 - 1) = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v37);
            else
              *(_DWORD *)v45 -= 2;
          }
        }
        v44 += 2;
        --v43;
      }
      while (v43);
    }
    WTF::fastFree((WTF *)(v42 - 16), v37);
  }
  v46 = *((_QWORD *)this + 97);
  if (v46)
  {
    v47 = *(unsigned int *)(v46 - 4);
    if ((_DWORD)v47)
    {
      v48 = *((_QWORD *)this + 97);
      do
      {
        v49 = *(WTF::StringImpl **)v48;
        if (*(_QWORD *)v48 != -1)
        {
          v50 = *(_QWORD *)(v48 + 8);
          *(_QWORD *)(v48 + 8) = 0;
          if (v50)
          {
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v50 + 16));
            v49 = *(WTF::StringImpl **)v48;
          }
          *(_QWORD *)v48 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v37);
            else
              *(_DWORD *)v49 -= 2;
          }
        }
        v48 += 16;
        --v47;
      }
      while (v47);
    }
    WTF::fastFree((WTF *)(v46 - 16), v37);
  }
  v51 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v51)
  {
    *(_QWORD *)(v51 + 24) = off_1E34ABE00;
    v52 = *(_QWORD *)(v51 + 48);
    *(_QWORD *)(v51 + 48) = 0;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v51 + 24));
    v53 = *(_QWORD *)(v51 + 16);
    if (v53)
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v53, (WTF::StringImpl *)v37);
    v54 = *(_QWORD *)(v51 + 8);
    if (v54)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v54, v37);
    if (*(_DWORD *)v51)
    {
      *(_QWORD *)(v51 + 48) = 0;
      *(_OWORD *)(v51 + 16) = 0u;
      *(_OWORD *)(v51 + 32) = 0u;
      *(_OWORD *)v51 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v51, v37);
    }
  }
  v55 = (WebKit::WebBackForwardCache *)*((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v55)
  {
    WebKit::WebBackForwardCache::~WebBackForwardCache(v55);
    if (*(_DWORD *)v56)
    {
      *(_QWORD *)(v56 + 48) = 0;
      *(_OWORD *)(v56 + 16) = 0u;
      *(_OWORD *)(v56 + 32) = 0u;
      *(_OWORD *)v56 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v56, v37);
    }
  }
  v57 = *((_QWORD *)this + 94);
  *(_QWORD *)v57 = 0;
  if (!*(_BYTE *)(v57 + 16) && !*(_QWORD *)(v57 + 8))
    MEMORY[0x19AEB936C]();
  v58 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *((_QWORD *)this + 92);
  *(_QWORD *)v59 = 0;
  if (!*(_BYTE *)(v59 + 16) && !*(_QWORD *)(v59 + 8))
    MEMORY[0x19AEB936C]();
  v60 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = *((_QWORD *)this + 90);
  if (v61)
  {
    v62 = *(unsigned int *)(v61 - 4);
    if ((_DWORD)v62)
    {
      v63 = (_QWORD *)(v61 + 8);
      do
      {
        if (*(v63 - 1) != -1 && *v63)
          WTF::fastFree((WTF *)(*v63 - 16), v37);
        v63 += 2;
        --v62;
      }
      while (v62);
    }
    WTF::fastFree((WTF *)(v61 - 16), v37);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 704, v37);
  v65 = (WTF::StringImpl *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v64);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = (WTF::StringImpl *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v64);
    else
      *(_DWORD *)v66 -= 2;
  }
  if (*v25)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v25, v64);
  v67 = (WTF::StringImpl **)*((_QWORD *)this + 82);
  if (v67)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v67, v64);
  v68 = (const void *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v68)
    CFRelease(v68);
  *((_QWORD *)this + 76) = off_1E34ABE00;
  v69 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebProcessPool *)((char *)this + 608));
  *((_QWORD *)this + 72) = off_1E34ABE00;
  v70 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebProcessPool *)((char *)this + 576));
  v72 = *((_QWORD *)this + 71);
  *(_QWORD *)v72 = 0;
  if (!*(_BYTE *)(v72 + 16) && !*(_QWORD *)(v72 + 8))
    MEMORY[0x19AEB936C]();
  v73 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *((_QWORD *)this + 69);
  *(_QWORD *)v74 = 0;
  if (!*(_BYTE *)(v74 + 16) && !*(_QWORD *)(v74 + 8))
    MEMORY[0x19AEB936C]();
  v75 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = *((_QWORD *)this + 67);
  *(_QWORD *)v76 = 0;
  if (!*(_BYTE *)(v76 + 16) && !*(_QWORD *)(v76 + 8))
    MEMORY[0x19AEB936C]();
  v77 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = (WTF::StringImpl *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v71);
    else
      *(_DWORD *)v78 -= 2;
  }
  v79 = (const void *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v79)
    CFRelease(v79);
  v80 = (const void *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v80)
    CFRelease(v80);
  v81 = (const void *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v81)
    CFRelease(v81);
  v82 = (const void *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v82)
    CFRelease(v82);
  std::unique_ptr<WebCore::PowerSourceNotifier>::reset[abi:sn180100]((uint64_t *)this + 58, 0);
  v84 = *((_QWORD *)this + 57);
  if (v84)
  {
    v85 = *(unsigned int *)(v84 - 4);
    if ((_DWORD)v85)
    {
      v86 = (uint64_t *)(v84 + 16);
      do
      {
        if (*(v86 - 2) != -1)
        {
          v87 = *v86;
          *v86 = 0;
          if (v87)
            (*(void (**)(uint64_t))(*(_QWORD *)v87 + 32))(v87);
        }
        v86 += 3;
        --v85;
      }
      while (v85);
    }
    WTF::fastFree((WTF *)(v84 - 16), v83);
  }
  v88 = *((unsigned int *)this + 109);
  if ((_DWORD)v88)
  {
    v89 = 16 * v88;
    v90 = (uint64_t *)(*((_QWORD *)this + 53) + 8);
    do
    {
      v91 = *v90;
      *v90 = 0;
      if (v91)
        CFRelease(*(CFTypeRef *)(v91 + 8));
      v92 = (WTF::StringImpl *)*(v90 - 1);
      *(v90 - 1) = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 2)
          WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v83);
        else
          *(_DWORD *)v92 -= 2;
      }
      v90 += 2;
      v89 -= 16;
    }
    while (v89);
  }
  v93 = (WTF *)*((_QWORD *)this + 53);
  if (v93)
  {
    *((_QWORD *)this + 53) = 0;
    *((_DWORD *)this + 108) = 0;
    WTF::fastFree(v93, v83);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 408, v83);
  v95 = (WTF::StringImpl **)*((_QWORD *)this + 49);
  if (v95)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v95, v94);
  v96 = (WTF::StringImpl **)*((_QWORD *)this + 48);
  if (v96)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v96, v94);
  v97 = (WTF::StringImpl **)*((_QWORD *)this + 47);
  if (v97)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v97, v94);
  v98 = (WTF::StringImpl **)*((_QWORD *)this + 46);
  if (v98)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v98, v94);
  v99 = (WTF::StringImpl **)*((_QWORD *)this + 45);
  if (v99)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v99, v94);
  v100 = (WTF::StringImpl **)*((_QWORD *)this + 44);
  if (v100)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v100, v94);
  v101 = (WTF::StringImpl **)*((_QWORD *)this + 43);
  if (v101)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v101, v94);
  v102 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v102)
    CFRelease(*(CFTypeRef *)(v102 + 8));
  v103 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v103)
    CFRelease(*(CFTypeRef *)(v103 + 8));
  v104 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  v105 = (_DWORD *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v105)
  {
    if (v105[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v105 + 8))(v105);
    else
      --v105[2];
  }
  v106 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  v107 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v108 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v108)
    CFRelease(*(CFTypeRef *)(v108 + 8));
  v109 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v109)
    CFRelease(*(CFTypeRef *)(v109 + 8));
  v110 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v110)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v110 + 16));
  v111 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, v94);
    else
      *(_DWORD *)v111 -= 2;
  }
  v112 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v112)
    CFRelease(*(CFTypeRef *)(v112 + 8));
  std::__optional_destruct_base<WebKit::WebPreferencesStore,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 104);
  v114 = *((_QWORD *)this + 12);
  if (v114)
  {
    v115 = *(unsigned int *)(v114 - 4);
    if ((_DWORD)v115)
    {
      for (i = 0; i != v115; ++i)
      {
        if (*(_QWORD *)(v114 + 16 * i) != -1)
        {
          v117 = v114 + 16 * i;
          v118 = *(unsigned int **)(v117 + 8);
          *(_QWORD *)(v117 + 8) = 0;
          if (v118)
          {
            do
            {
              v119 = __ldaxr(v118);
              v120 = v119 - 1;
            }
            while (__stlxr(v120, v118));
            if (!v120)
            {
              atomic_store(1u, v118);
              WTF::fastFree((WTF *)v118, v113);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v114 - 16), v113);
  }
  v121 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v121)
  {
    do
    {
      v122 = __ldaxr(v121);
      v123 = v122 - 1;
    }
    while (__stlxr(v123, v121));
    if (!v123)
    {
      atomic_store(1u, v121);
      WTF::fastFree((WTF *)v121, v113);
    }
  }
  WTF::Vector<WTF::Ref<WebKit::NetworkProcessProxy,WTF::RawPtrTraits<WebKit::NetworkProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcessProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v113);
  IPC::MessageReceiverMap::~MessageReceiverMap((WebKit::WebProcessPool *)((char *)this + 56), v124);
  v126 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v126)
    CFRelease(*(CFTypeRef *)(v126 + 8));
  v127 = *((_QWORD *)this + 5);
  if (v127)
  {
    *(_QWORD *)(v127 + 8) = 0;
    v128 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v128)
    {
      do
      {
        v129 = __ldaxr(v128);
        v130 = v129 - 1;
      }
      while (__stlxr(v130, v128));
      if (!v130)
      {
        atomic_store(1u, v128);
        WTF::fastFree((WTF *)v128, v125);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v125);
}

{
  WebKit::WebProcessPool::~WebProcessPool(this);
  JUMPOUT(0x19AEB936CLL);
}

unsigned int *WTF::VectorMover<false,WTF::WeakRef<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl>>::move(unsigned int *result, unsigned int *a2, unsigned int **a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      *a3 = v6;
      result = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        do
        {
          v7 = __ldaxr(result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, result));
        if (!v8)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      ++a3;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

void WebKit::VisitedLinkStore::~VisitedLinkStore(WebKit::VisitedLinkStore *this)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  WTF *v5;
  unsigned int *v6;

  v2 = (uint64_t *)((char *)this + 48);
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 6))
  {
    *((_QWORD *)this + 15) = off_1E34ABE00;
    v3 = *((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase((WebKit::VisitedLinkStore *)((char *)this + 120));
    v5 = (WTF *)*((_QWORD *)this + 13);
    if (v5)
    {
      *((_QWORD *)this + 13) = 0;
      *((_DWORD *)this + 28) = 0;
      WTF::fastFree(v5, v4);
    }
    v6 = (unsigned int *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v6)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v6);
    if (*v2)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v2, v4);
    *((_QWORD *)this + 2) = &off_1E34B0558;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v4);
  }
  else
  {
    __break(0xC471u);
  }
}

{
  WebKit::VisitedLinkStore::~VisitedLinkStore(this);
  JUMPOUT(0x19AEB936CLL);
}

void sub_196D23BA0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void API::ProcessPoolConfiguration::~ProcessPoolConfiguration(API::ProcessPoolConfiguration *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  void *v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (WTF *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v5);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, v6);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
}

{
  API::ProcessPoolConfiguration::~ProcessPoolConfiguration(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void `non-virtual thunk to'WebKit::WebNotificationManagerProxy::derefWebContextSupplement(CFTypeRef *this)
{
  CFRelease(*(this - 1));
}

uint64_t `non-virtual thunk to'WebKit::WebNotificationManagerProxy::processPoolDestroyed(WebKit::WebNotificationManagerProxy *this)
{
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), (char *)this - 16);
}

void `non-virtual thunk to'WebKit::WebGeolocationManagerProxy::derefWebContextSupplement(CFTypeRef *this)
{
  CFRelease(*(this - 1));
}

uint64_t `non-virtual thunk to'WebKit::WebGeolocationManagerProxy::processPoolDestroyed(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl *a2)
{
  return WebKit::WebGeolocationManagerProxy::processPoolDestroyed((WebKit::WebGeolocationManagerProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::WebGeolocationManagerProxy::processPoolDestroyed(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result && *(_DWORD *)(result - 12))
  {
    *((_QWORD *)this + 7) = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::WebGeolocationManagerProxy::PerDomainData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(result, a2);
    result = *((_QWORD *)this + 8);
    if (result)
      return (*(uint64_t (**)(uint64_t, WebKit::WebGeolocationManagerProxy *))(*(_QWORD *)result + 24))(result, this);
  }
  return result;
}

void WebKit::WebBackForwardCache::~WebBackForwardCache(WebKit::WebBackForwardCache *this)
{
  void *v2;
  void *v3;
  uint64_t v4;

  WebKit::WebBackForwardCache::clear(this);
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)this + 24, v2);
  v4 = *((_QWORD *)this + 3);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v3);
}

uint64_t WebKit::WebBackForwardCache::clear(WebKit::WebBackForwardCache *this)
{
  NSObject *v2;
  void *v3;
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v2 = qword_1ECE70F60;
  if (os_log_type_enabled((os_log_t)qword_1ECE70F60, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "WebBackForwardCache::clear", (uint8_t *)&v10, 2u);
  }
  v10 = *((_QWORD *)this + 3);
  v4 = *((_OWORD *)this + 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v11 = v4;
  v5 = *((_QWORD *)this + 6);
  v12 = v5;
  v6 = (_QWORD *)v4;
  if ((_QWORD)v4)
  {
    while (1)
    {
      v7 = *(_QWORD *)(*v6 + 8);
      if (v7)
        break;
      v6 = (_QWORD *)v6[2];
      if (!v6)
        goto LABEL_12;
    }
LABEL_7:
    std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100]((WebKit::WebBackForwardCacheEntry **)(v7 + 416), 0);
    while (1)
    {
      v6 = (_QWORD *)v6[2];
      if (!v6)
        break;
      v7 = *(_QWORD *)(*v6 + 8);
      if (v7)
      {
        LODWORD(v5) = v5 + 1;
        goto LABEL_7;
      }
    }
    LODWORD(v12) = v5 + 1;
  }
LABEL_12:
  result = WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)&v10, v3);
  if (v10)
    return WTF::fastFree((WTF *)(v10 - 16), v9);
  return result;
}

void WebKit::WebProcessPool::unregisterNotificationObservers(WebKit::WebProcessPool *this)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  CFTypeRef *v7;
  uint64_t v8;
  CFTypeRef v9;
  const __CFString *v10;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v12;
  __CFNotificationCenter *v13;
  const __CFString *v14;
  __CFNotificationCenter *v15;
  const __CFString *v16;
  __CFNotificationCenter *v17;
  const __CFString *v18;
  __CFNotificationCenter *v19;
  const __CFString *v20;
  __CFNotificationCenter *v21;
  const __CFString *v22;
  __CFNotificationCenter *v23;
  WebCore *v24;
  const __CFString *MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification;
  __CFNotificationCenter *v26;
  const void *v27;

  v2 = *((unsigned int *)this + 229);
  if ((_DWORD)v2)
  {
    v3 = (int *)*((_QWORD *)this + 113);
    v4 = 4 * v2;
    do
    {
      v5 = *v3++;
      notify_cancel(v5);
      v4 -= 4;
    }
    while (v4);
  }
  v6 = *((unsigned int *)this + 233);
  if ((_DWORD)v6)
  {
    v7 = (CFTypeRef *)*((_QWORD *)this + 115);
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      if (*v7)
        CFRetain(*v7);
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", v9);
      if (v9)
        CFRelease(v9);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v10 = (const __CFString *)*MEMORY[0x1E0CEB398];
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, *((const void **)this + 62), v10, 0);
  v12 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v12, *((const void **)this + 62), CFSTR("com.apple.webinspectord.enabled"), 0);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)this + 60));
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)this + 61));
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)this + 59));
  std::unique_ptr<WebCore::PowerSourceNotifier>::reset[abi:sn180100]((uint64_t *)this + 58, 0);
  v13 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v13, *((const void **)this + 62), CFSTR("WKCaptivePortalModeContainerConfigurationChanged"), 0);
  v14 = (const __CFString *)*MEMORY[0x1E0DDE210];
  v15 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v15, *((const void **)this + 62), v14, 0);
  v16 = (const __CFString *)*MEMORY[0x1E0DDE148];
  v17 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v17, *((const void **)this + 62), v16, 0);
  v18 = (const __CFString *)*MEMORY[0x1E0DDE0A0];
  v19 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v19, *((const void **)this + 62), v18, 0);
  v20 = (const __CFString *)*MEMORY[0x1E0DDE078];
  v21 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v21, *((const void **)this + 62), v20, 0);
  v22 = (const __CFString *)*MEMORY[0x1E0DDE150];
  v23 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v23, *((const void **)this + 62), v22, 0);
  MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification = (const __CFString *)WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(v24);
  v26 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v26, *((const void **)this + 62), MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification, 0);
  v27 = (const void *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v27)
    CFRelease(v27);
}

void sub_196D240C0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *IPC::MessageReceiverMap::invalidate(IPC::MessageReceiverMap *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *result;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  _BOOL4 v16;

  v3 = *(_QWORD *)this;
  if (!v3)
  {
    v6 = 0;
    v4 = 0;
    goto LABEL_10;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = (unsigned __int8 *)(v3 + 16 * v4);
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = (unsigned __int8 *)(v3 + 16 * v4);
LABEL_10:
    v5 = (unsigned __int8 *)(v3 + 16 * v4);
    goto LABEL_11;
  }
  v6 = (unsigned __int8 *)v3;
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v6 = (unsigned __int8 *)v3;
    while (*v6 >= 0xFEu)
    {
      v6 += 16;
      v7 -= 16;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_11:
  if (v3)
    v8 = (unsigned __int8 *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v8 = 0;
  while (v6 != v8)
  {
    v9 = v6 + 16;
    v6 = v5;
    if (v9 != v5)
    {
      v6 = v9;
      while (*v6 >= 0xFEu)
      {
        v6 += 16;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  if (v3)
  {
    *(_QWORD *)this = 0;
    WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::deallocateTable(v3, a2);
  }
  v10 = (unsigned __int8 *)*((_QWORD *)this + 1);
  result = WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::begin(v10);
  if (v10)
    v13 = &v10[24 * *((unsigned int *)v10 - 1)];
  else
    v13 = 0;
  if (v13 != result)
  {
    while (1)
    {
      result += 24;
      if (result == v12)
      {
        result = v12;
LABEL_39:
        if (result == v13)
          break;
      }
      else
      {
        v14 = *result;
        v16 = v14 == 255 && *((_QWORD *)result + 1) == 0;
        if (v14 != 254 && !v16)
          goto LABEL_39;
      }
    }
  }
  if (v10)
  {
    *((_QWORD *)this + 1) = 0;
    return (unsigned __int8 *)WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::deallocateTable((uint64_t)v10, v12);
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::begin(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  _BOOL4 v6;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[24 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[24 * v1];
  if ((_DWORD)v1)
  {
    v3 = 24 * v1;
    while (1)
    {
      v4 = *result;
      v5 = v4 == 255 && *((_QWORD *)result + 1) == 0;
      v6 = v5;
      if (v4 != 254 && !v6)
        break;
      result += 24;
      v3 -= 24;
      if (!v3)
        return v2;
    }
  }
  return result;
}

uint64_t WebCore::SecurityOriginData::SecurityOriginData(uint64_t a1, uint64_t a2)
{
  WebCore::SecurityOriginData::SecurityOriginData(a1, a2);
  return a1;
}

{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

void WebKit::WebPageProxy::Internals::~Internals(WebKit::WebPageProxy::Internals *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  WTF *v21;
  _QWORD *v22;
  WTF *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::SecurityOriginData *v35;
  _DWORD *v36;
  _DWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD **v50;
  _DWORD *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  void *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  void *v81;
  WTF *v82;
  unint64_t v83;
  unint64_t v84;
  WebKit::WebKeyboardEvent *v85;
  uint64_t v86;
  WebKit::WebKeyboardEvent *v87;
  WTF::StringImpl *v88;
  void *v89;
  WTF *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  WTF::StringImpl **v96;
  uint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;

  v3 = *((_QWORD *)this + 323);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 323);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  std::unique_ptr<WebKit::WebPageProxyFrameLoadStateObserver>::reset[abi:sn180100]((WebKit::WebPageProxyFrameLoadStateObserver **)this + 322, 0);
  std::__optional_destruct_base<WebKit::MediaCapability,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 2480, v7);
  *((_QWORD *)this + 304) = off_1E34ABE00;
  v8 = *((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy::Internals *)((char *)this + 2432));
  v10 = *((_QWORD *)this + 278);
  if (v10)
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v10, v9);
  v11 = *((_QWORD *)this + 277);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      for (i = 0; i != v12; ++i)
      {
        v14 = (_QWORD *)(v11 + (i << 7));
        if (*v14 ^ 1 | v14[1])
        {
          v15 = v14[14];
          if ((v15 & 0x8000000000000) != 0)
          {
            v24 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              WTF::fastFree((WTF *)v24, v9);
            }
          }
          v16 = v11 + (i << 7);
          v17 = *(_DWORD **)(v16 + 104);
          *(_QWORD *)(v16 + 104) = 0;
          if (v17)
          {
            if (v17[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
            else
              --v17[2];
          }
          v18 = *(_DWORD **)(v16 + 96);
          *(_QWORD *)(v16 + 96) = 0;
          if (v18)
          {
            if (v18[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
            else
              --v18[2];
          }
          v19 = v11 + (i << 7);
          v20 = *(_DWORD **)(v19 + 88);
          *(_QWORD *)(v19 + 88) = 0;
          if (v20)
          {
            if (v20[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
            else
              --v20[2];
          }
          v23 = *(WTF **)(v19 + 64);
          v22 = (_QWORD *)(v19 + 64);
          v21 = v23;
          if (v23)
          {
            *v22 = 0;
            *(_DWORD *)(v11 + (i << 7) + 72) = 0;
            WTF::fastFree(v21, v9);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v11 - 16), v9);
  }
  if (*((_BYTE *)this + 2200))
  {
    v27 = *((_QWORD *)this + 274);
    *((_QWORD *)this + 274) = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = *((_QWORD *)this + 273);
    *((_QWORD *)this + 273) = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = *((_QWORD *)this + 272);
    *((_QWORD *)this + 272) = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = *((_QWORD *)this + 271);
    *((_QWORD *)this + 271) = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = (WTF *)*((_QWORD *)this + 270);
    *((_QWORD *)this + 270) = 0;
    if (v31)
      WTF::RefCounted<WebCore::PlatformSpeechSynthesisUtterance>::deref(v31, (WTF::StringImpl *)v9);
    v32 = (_DWORD *)*((_QWORD *)this + 269);
    *((_QWORD *)this + 269) = 0;
    if (v32)
    {
      if (v32[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
      else
        --v32[2];
    }
  }
  v33 = *((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *((_QWORD *)this + 267);
  *((_QWORD *)this + 267) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 266);
  if (v35)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v35, v9);
  v36 = (_DWORD *)*((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (v36)
  {
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    else
      --v36[2];
  }
  v37 = (_DWORD *)*((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = 0;
  if (v37)
  {
    if (v37[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
    else
      --v37[2];
  }
  objc_destroyWeak((id *)this + 248);
  v39 = *((_QWORD *)this + 247);
  *((_QWORD *)this + 247) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *((_QWORD *)this + 246);
  if (v40)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v40, v38);
  v41 = *((_QWORD *)this + 244);
  if (v41)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v41, v38);
  WebKit::WebPageProxyMessageReceiverRegistration::~WebPageProxyMessageReceiverRegistration((WebKit::WebPageProxy::Internals *)((char *)this + 1928));
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 240, 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 239, 0);
  v43 = *((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = 0;
  if (v43)
  {
    v44 = *(uint64_t **)v43;
    v45 = *(_QWORD *)(v43 + 8) - 1;
    *(_QWORD *)(v43 + 8) = v45;
    if (v44)
    {
      v46 = *v44;
      if (!*v44)
        goto LABEL_83;
      v47 = *(_BYTE *)(v43 + 16);
      *(_BYTE *)(v43 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 16))(v46, 0);
      *(_BYTE *)(v43 + 16) = v47;
      if (*(_QWORD *)v43)
        goto LABEL_83;
      v45 = *(_QWORD *)(v43 + 8);
    }
    if (!v45)
      MEMORY[0x19AEB936C](v43, 0x1020C40545B2139);
  }
LABEL_83:
  v48 = *((_QWORD *)this + 229);
  if (v48)
  {
    v49 = *(unsigned int *)(v48 - 4);
    if ((_DWORD)v49)
    {
      v50 = (_DWORD **)(v48 + 8);
      do
      {
        if (*(v50 - 1) != (_DWORD *)-1)
        {
          v51 = *v50;
          *v50 = 0;
          if (v51)
          {
            if (v51[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
            else
              --v51[2];
          }
        }
        v50 += 2;
        --v49;
      }
      while (v49);
    }
    WTF::fastFree((WTF *)(v48 - 16), v42);
  }
  *((_QWORD *)this + 225) = off_1E34ABE00;
  v52 = *((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy::Internals *)((char *)this + 1800));
  v54 = *((_QWORD *)this + 224);
  if ((v54 & 0x8000000000000) != 0)
  {
    v107 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFLL);
    do
    {
      v108 = __ldaxr(v107);
      v109 = v108 - 1;
    }
    while (__stlxr(v109, v107));
    if (!v109)
    {
      atomic_store(1u, v107);
      WTF::fastFree((WTF *)v107, v53);
    }
  }
  v55 = *((_QWORD *)this + 223);
  if ((v55 & 0x8000000000000) != 0)
  {
    v110 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
    do
    {
      v111 = __ldaxr(v110);
      v112 = v111 - 1;
    }
    while (__stlxr(v112, v110));
    if (!v112)
    {
      atomic_store(1u, v110);
      WTF::fastFree((WTF *)v110, v53);
    }
  }
  *((_QWORD *)this + 219) = off_1E34ABE00;
  v56 = *((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy::Internals *)((char *)this + 1752));
  v58 = *((_QWORD *)this + 218);
  if ((v58 & 0x8000000000000) != 0)
  {
    v113 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFLL);
    do
    {
      v114 = __ldaxr(v113);
      v115 = v114 - 1;
    }
    while (__stlxr(v115, v113));
    if (!v115)
    {
      atomic_store(1u, v113);
      WTF::fastFree((WTF *)v113, v57);
    }
  }
  v59 = *((_QWORD *)this + 215);
  if ((v59 & 0x8000000000000) != 0)
  {
    v116 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
    do
    {
      v117 = __ldaxr(v116);
      v118 = v117 - 1;
    }
    while (__stlxr(v118, v116));
    if (!v118)
    {
      atomic_store(1u, v116);
      WTF::fastFree((WTF *)v116, v57);
    }
  }
  *((_QWORD *)this + 210) = off_1E34ABE00;
  v60 = *((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy::Internals *)((char *)this + 1680));
  std::__optional_destruct_base<WebKit::PrivateClickMeasurementAndMetadata,false>::~__optional_destruct_base[abi:sn180100]((WebKit::WebPageProxy::Internals *)((char *)this + 1336), v61);
  v63 = *((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v63)
  {
    v64 = *(uint64_t **)v63;
    v65 = *(_QWORD *)(v63 + 8) - 1;
    *(_QWORD *)(v63 + 8) = v65;
    if (v64)
    {
      v66 = *v64;
      if (!*v64)
        goto LABEL_110;
      v67 = *(_BYTE *)(v63 + 16);
      *(_BYTE *)(v63 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 16))(v66, 0);
      *(_BYTE *)(v63 + 16) = v67;
      if (*(_QWORD *)v63)
        goto LABEL_110;
      v65 = *(_QWORD *)(v63 + 8);
    }
    if (!v65)
      MEMORY[0x19AEB936C](v63, 0x1020C40545B2139);
  }
LABEL_110:
  WebKit::PageLoadState::~PageLoadState((WebKit::WebPageProxy::Internals *)((char *)this + 944), v62);
  v69 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (!v69)
    goto LABEL_117;
  v70 = *(uint64_t **)v69;
  v71 = *(_QWORD *)(v69 + 8) - 1;
  *(_QWORD *)(v69 + 8) = v71;
  if (v70)
  {
    v72 = *v70;
    if (!*v70)
      goto LABEL_117;
    v73 = *(_BYTE *)(v69 + 16);
    *(_BYTE *)(v69 + 16) = 1;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v72 + 16))(v72, 0);
    *(_BYTE *)(v69 + 16) = v73;
    if (*(_QWORD *)v69)
      goto LABEL_117;
    v71 = *(_QWORD *)(v69 + 8);
  }
  if (!v71)
    MEMORY[0x19AEB936C](v69, 0x1020C40545B2139);
LABEL_117:
  v74 = *((_QWORD *)this + 114);
  if ((v74 & 0x8000000000000) != 0)
  {
    v119 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFLL);
    do
    {
      v120 = __ldaxr(v119);
      v121 = v120 - 1;
    }
    while (__stlxr(v121, v119));
    if (!v121)
    {
      atomic_store(1u, v119);
      WTF::fastFree((WTF *)v119, v68);
    }
  }
  *((_QWORD *)this + 110) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 111, v68);
  v75 = *((_QWORD *)this + 105);
  v76 = *((_QWORD *)this + 106);
  v77 = (WTF::StringImpl *)*((_QWORD *)this + 107);
  if (v75 <= v76)
  {
    v80 = (WTF::StringImpl *)((char *)v77 + 128 * v76);
    v79 = (WTF::StringImpl *)((char *)v77 + 128 * v75);
  }
  else
  {
    WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct(v77, (WTF::StringImpl *)((char *)v77 + 128 * v76));
    v78 = *((_QWORD *)this + 107);
    v79 = (WTF::StringImpl *)(v78 + (*((_QWORD *)this + 105) << 7));
    v80 = (WTF::StringImpl *)(v78 + ((unint64_t)*((unsigned int *)this + 216) << 7));
  }
  WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct(v79, v80);
  v82 = (WTF *)*((_QWORD *)this + 107);
  if (v82)
  {
    *((_QWORD *)this + 107) = 0;
    *((_DWORD *)this + 216) = 0;
    WTF::fastFree(v82, v81);
  }
  v83 = *((_QWORD *)this + 94);
  v84 = *((_QWORD *)this + 95);
  v85 = (WebKit::WebKeyboardEvent *)*((_QWORD *)this + 96);
  if (v83 <= v84)
  {
    v88 = (WebKit::WebKeyboardEvent *)((char *)v85 + 96 * v84);
    v87 = (WebKit::WebKeyboardEvent *)((char *)v85 + 96 * v83);
  }
  else
  {
    WTF::VectorDestructor<true,WebKit::NativeWebKeyboardEvent>::destruct(v85, (WebKit::WebKeyboardEvent *)((char *)v85 + 96 * v84));
    v86 = *((_QWORD *)this + 96);
    v87 = (WebKit::WebKeyboardEvent *)(v86 + 96 * *((_QWORD *)this + 94));
    v88 = (WTF::StringImpl *)(v86 + 96 * *((unsigned int *)this + 194));
  }
  WTF::VectorDestructor<true,WebKit::NativeWebKeyboardEvent>::destruct(v87, v88);
  v90 = (WTF *)*((_QWORD *)this + 96);
  if (v90)
  {
    *((_QWORD *)this + 96) = 0;
    *((_DWORD *)this + 194) = 0;
    WTF::fastFree(v90, v89);
  }
  v91 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v91)
  {
    v92 = *(uint64_t **)v91;
    v93 = *(_QWORD *)(v91 + 8) - 1;
    *(_QWORD *)(v91 + 8) = v93;
    if (v92)
    {
      v94 = *v92;
      if (!*v92)
        goto LABEL_135;
      v95 = *(_BYTE *)(v91 + 16);
      *(_BYTE *)(v91 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v94 + 16))(v94, 0);
      *(_BYTE *)(v91 + 16) = v95;
      if (*(_QWORD *)v91)
        goto LABEL_135;
      v93 = *(_QWORD *)(v91 + 8);
    }
    if (!v93)
      MEMORY[0x19AEB936C](v91, 0x1020C40545B2139);
  }
LABEL_135:
  v96 = (WTF::StringImpl **)*((_QWORD *)this + 90);
  if (v96)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v96, (WTF::StringImpl *)v89);
  v97 = *((_QWORD *)this + 89);
  if (v97)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v97, v89);
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 576, v89);
  if (*((_BYTE *)this + 560))
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::WebPageProxy::Internals *)((char *)this + 256), v98);
  WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 200, v98);
  std::__optional_destruct_base<WebCore::FontAttributes,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 112, v99);
  std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 88, v100);
  *((_QWORD *)this + 7) = off_1E34ABE00;
  v101 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebPageProxy::Internals *)((char *)this + 56));
  v103 = *((_QWORD *)this + 3);
  if (v103)
  {
    *(_QWORD *)(v103 + 8) = 0;
    v104 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v104)
    {
      do
      {
        v105 = __ldaxr(v104);
        v106 = v105 - 1;
      }
      while (__stlxr(v106, v104));
      if (!v106)
      {
        atomic_store(1u, v104);
        WTF::fastFree((WTF *)v104, v102);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::WebPageProxy::Internals::~Internals(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::WebPageProxyMessageReceiverRegistration::~WebPageProxyMessageReceiverRegistration(WebKit::WebPageProxyMessageReceiverRegistration *this)
{
  uint64_t v2;

  WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages((unsigned __int8 *)this);
  if (*((_BYTE *)this + 16))
  {
    v2 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v2)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  }
}

void WebKit::PageLoadState::~PageLoadState(WebKit::PageLoadState *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebKit::PageLoadState::Data::~Data((WebKit::PageLoadState *)((char *)this + 192), a2);
  WebKit::PageLoadState::Data::~Data((WebKit::PageLoadState *)((char *)this + 24), v4);
  if (*(_QWORD *)this)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*(_QWORD *)this, v5);
}

void WebKit::PageLoadState::Data::~Data(WebKit::PageLoadState::Data *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;

  v3 = (const void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((unsigned int *)this + 16);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char *))off_1E34D1268[v8])(&v12, (char *)this + 40);
  *((_DWORD *)this + 16) = -1;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
}

void WTF::VectorDestructor<true,WebKit::NativeWebKeyboardEvent>::destruct(WebKit::WebKeyboardEvent *this, WTF::StringImpl *a2)
{
  WebKit::WebKeyboardEvent *v3;
  const void *v4;

  if (this != a2)
  {
    v3 = this;
    do
    {
      v4 = (const void *)*((_QWORD *)v3 + 11);
      *((_QWORD *)v3 + 11) = 0;
      if (v4)
        CFRelease(v4);
      WebKit::WebKeyboardEvent::~WebKeyboardEvent(v3, a2);
      v3 = (WebKit::WebKeyboardEvent *)((char *)v3 + 96);
    }
    while (v3 != a2);
  }
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::NativeWebMouseEvent>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (const void *)*((_QWORD *)v3 + 14);
      *((_QWORD *)v3 + 14) = 0;
      if (v4)
        CFRelease(v4);
      result = (WTF::StringImpl *)*((_QWORD *)v3 + 12);
      *((_QWORD *)v3 + 12) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 128);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  const void *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(const void ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      _Block_release(v6);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WebKit::NavigationState::~NavigationState(WebKit::NavigationState *this)
{
  id *v2;
  void *WeakRetained;
  void *v4;
  const void *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v20;
  void *v21;

  v2 = (id *)((char *)this + 16);
  WeakRetained = objc_loadWeakRetained((id *)this + 2);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = *((_QWORD *)WeakRetained + 53);
    if (v6)
      WeakRetained = (void *)CFRetain(*(CFTypeRef *)(v6 + 8));
    {
      v7 = dword_1ECE736B0++;
      if (v7 > dword_1ECE736B4)
        WTF::WeakHashMap<WebKit::WebPageProxy,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)WeakRetained, v4);
    }
    else
    {
      WebKit::navigationStates(void)::navigationStates = 0;
      *(_QWORD *)&dword_1ECE736B0 = 1;
    }
    v8 = *(_QWORD *)(v6 + 24);
    if (v8 && *(_QWORD *)(v8 + 8) && WebKit::navigationStates(void)::navigationStates)
    {
      v9 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 8);
      v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      for (i = 1; ; ++i)
      {
        v15 = v13;
        v16 = *(_QWORD *)(WebKit::navigationStates(void)::navigationStates + 16 * v13);
        if (v16 != -1)
        {
          if (!v16)
            goto LABEL_26;
          if (v16 == v8)
            break;
        }
        v13 = (v15 + i) & v9;
      }
      if ((_DWORD)v15 != *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 4))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(WebKit::navigationStates(void)::navigationStates + 16 * v15, v4);
        ++*(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 16);
        v17 = WebKit::navigationStates(void)::navigationStates
            ? *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) - 1
            : -1;
        *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) = v17;
        if (WebKit::navigationStates(void)::navigationStates)
        {
          v18 = *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 4);
          if (6 * *(_DWORD *)(WebKit::navigationStates(void)::navigationStates - 12) < v18 && v18 >= 9)
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebKit::NavigationState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v18 >> 1);
        }
      }
    }
LABEL_26:
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(*(_QWORD *)(v6 + 32) + 944, this);
    CFRelease(*(CFTypeRef *)(v6 + 8));
    CFRelease(v5);
  }
  *((_QWORD *)this + 8) = off_1E34ABE00;
  v20 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::NavigationState *)((char *)this + 64));
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 7, 0);
  objc_destroyWeak((id *)this + 5);
  objc_destroyWeak((id *)this + 3);
  objc_destroyWeak(v2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v21);
}

{
  WTF *v1;
  void *v2;

  WebKit::NavigationState::~NavigationState(this);
  WTF::fastFree(v1, v2);
}

void sub_196D254E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;

  v5 = v4;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  CFRelease(v3);
  *(_QWORD *)(v1 + 64) = off_1E34ABE00;
  v7 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 88) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)(v1 + 64));
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v1 + 56), 0);
  objc_destroyWeak((id *)(v1 + 40));
  objc_destroyWeak((id *)(v1 + 24));
  objc_destroyWeak(v2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v1 + 8), v8);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::didStartProgress(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  _QWORD v12[2];

  v2 = *((_QWORD *)this + 5);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
  v6 = *((_QWORD *)this + 4);
  v7 = *(_QWORD *)(v6 + 960);
  v8 = v6;
  if (v7)
  {
    CFRetain(*(CFTypeRef *)(v7 + 8));
    v8 = *((_QWORD *)this + 4);
  }
  v12[0] = v7;
  v12[1] = v6 + 944;
  ++*(_DWORD *)(v6 + 1316);
  *(_BYTE *)(v6 + 1312) = 1;
  *(_QWORD *)(v8 + 1280) = 0x3FB999999999999ALL;
  WebKit::PageLoadState::commitChanges((WebKit::PageLoadState *)(v8 + 944), v4, v5);
  WebKit::PageLoadState::Transaction::~Transaction((WebKit::PageLoadState::Transaction *)v12, v9, v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
}

BOOL WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess(WebKit::WebPageProxy *this, WebKit::WebProcessProxy *a2, const WTF::URL *a3)
{
  _BOOL8 v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;

  if (!WTF::URL::protocolIs() || *((_BYTE *)this + 1117))
    return 1;
  WTF::URL::fileSystemPath(a3);
  v8 = *((_QWORD *)this + 138);
  if (v8)
    v9 = (uint64_t *)(v8 + 8 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  v10 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 138);
  if (v9 == v10)
    goto LABEL_23;
  v12 = v10;
  v13 = v11;
  while (1)
  {
    v14 = *v12;
    if (*v12)
    {
      v15 = *(WTF::StringImpl **)(v14 + 8);
      v16 = *(_DWORD *)(v14 + 4);
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    if (v17)
      break;
    if (!v16)
      goto LABEL_21;
LABEL_13:
    while (++v12 != v13)
    {
      if ((unint64_t)(*v12 + 1) > 1)
        goto LABEL_17;
    }
    v12 = v13;
LABEL_17:
    if (v12 == v9)
      goto LABEL_23;
  }
  if ((WTF::StringImpl::startsWith() & 1) == 0)
    goto LABEL_13;
LABEL_21:
  if (v12 == v9)
LABEL_23:
    v6 = WebKit::WebProcessProxy::checkURLReceivedFromWebProcess((uint64_t)a2, a3, 1);
  else
    v6 = 1;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  return v6;
}

uint64_t WebKit::WebPageProxy::didReachLayoutMilestone(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 1584))(v5);
  if ((a2 & 2) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 272))(v5);
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 64))(v6, a1, a2);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72) + 184))(*(_QWORD *)(a1 + 72), a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1592))(v5);
}

id WebKit::PageClientImpl::refView(id *this)
{
  id v2;

  v2 = objc_loadWeak(this + 5);
  return objc_loadWeak(this + 2);
}

void WebKit::PageClientImpl::derefView(id *this)
{

}

void WebKit::NavigationState::NavigationClient::renderingProgressDidChange(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  id v10;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if ((*(_DWORD *)(v4 + 32) & 0x4000000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v4 + 24));
        if (WeakRetained)
        {
          v8 = WeakRetained;
          v9 = *(_QWORD *)(a1 + 8);
          if (v9)
            v9 = *(_QWORD *)(v9 + 8);
          v10 = objc_loadWeakRetained((id *)(v9 + 16));
          objc_msgSend(v8, "_webView:renderingProgressDidChange:", v10, (a3 >> 3) & 8 | a3 & 0x1B7);
          if (v10)
            CFRelease(v10);
          CFRelease(v8);
        }
      }
    }
  }
}

void sub_196D25944(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebFrameProxy::setUpPolicyListenerProxy(uint64_t a1, uint64_t *a2, char a3, char a4, char a5)
{
  WTF *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;

  v10 = *(WTF **)(a1 + 264);
  if (v10)
    WebKit::WebFramePolicyListenerProxy::ignore(v10, 0);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v11 = *a2;
  *a2 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = &off_1E34D38D0;
  v12[1] = a1;
  v12[2] = a1;
  v12[3] = v11;
  v17 = v12;
  v13 = API::Object::newObject(0x48uLL, 61);
  v14 = WebKit::WebFramePolicyListenerProxy::WebFramePolicyListenerProxy(v13, (uint64_t *)&v17, a3, a4, a5);
  v15 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v14;
  if (v15)
    CFRelease(*(CFTypeRef *)(v15 + 8));
  if (v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  return *(_QWORD *)(a1 + 264);
}

uint64_t WebKit::WebFramePolicyListenerProxy::WebFramePolicyListenerProxy(uint64_t a1, uint64_t *a2, char a3, char a4, char a5)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF *v14;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D36D0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 58) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 64) = v10;
  if ((a3 & 1) == 0)
  {
    v14 = 0;
    WebKit::WebFramePolicyListenerProxy::didReceiveSafeBrowsingResults(a1, (WTF::StringImpl *)&v14);
    v12 = v14;
    v14 = 0;
    if (v12)
      WTF::RefCounted<WebKit::SafeBrowsingWarning>::deref(v12, v11);
  }
  if ((a4 & 1) == 0)
    WebKit::WebFramePolicyListenerProxy::didReceiveAppBoundDomainResult(a1, 0);
  if ((a5 & 1) == 0)
    WebKit::WebFramePolicyListenerProxy::didReceiveInitialLinkDecorationFilteringData(a1);
  return a1;
}

uint64_t WebKit::WebFramePolicyListenerProxy::didReceiveSafeBrowsingResults(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)(result + 32) || !*(_BYTE *)(result + 58) || !*(_BYTE *)(result + 60))
    return std::optional<WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<WebKit::SafeBrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::SafeBrowsingWarning>>>::operator=[abi:sn180100]<WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<WebKit::SafeBrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::SafeBrowsingWarning>>,void>(result + 40, a2);
  v2 = *(_QWORD *)(result + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(result + 16);
    v4 = *(unsigned __int8 *)(result + 24);
    v5 = *(unsigned __int16 *)(result + 56);
    *(_QWORD *)(result + 64) = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, WTF::StringImpl *, uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0, v3, v4, a2, v5, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

uint64_t WebKit::WebFramePolicyListenerProxy::didReceiveInitialLinkDecorationFilteringData(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(this + 32) && *(_BYTE *)(this + 58) && *(_BYTE *)(this + 48))
  {
    v1 = *(_QWORD *)(this + 64);
    if (v1)
    {
      v2 = *(_QWORD *)(this + 16);
      v3 = *(unsigned __int8 *)(this + 24);
      v4 = *(unsigned __int16 *)(this + 56);
      *(_QWORD *)(this + 64) = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0, v2, v3, this + 40, v4, 0);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    }
  }
  else
  {
    *(_BYTE *)(this + 60) = 1;
  }
  return this;
}

uint64_t WebKit::WebFramePolicyListenerProxy::didReceiveAppBoundDomainResult(uint64_t result, unsigned __int16 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(result + 32) && *(_BYTE *)(result + 48) && *(_BYTE *)(result + 60))
  {
    v2 = *(_QWORD *)(result + 64);
    if (v2)
    {
      v3 = *(_QWORD *)(result + 16);
      v4 = *(unsigned __int8 *)(result + 24);
      *(_QWORD *)(result + 64) = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0, v3, v4, result + 40, a2, 0);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 58))
      *(_BYTE *)(result + 58) = 1;
    *(_WORD *)(result + 56) = a2;
  }
  return result;
}

uint64_t WebKit::WebPage::canShowResponse(WebKit::WebPage *this, const WebCore::ResourceResponse *a2)
{
  WebCore::MIMETypeRegistry *v4;
  _QWORD *v5;
  uint64_t canShowMIMEType;
  _QWORD *v8;

  v4 = (WebCore::MIMETypeRegistry *)WebCore::ResourceResponseBase::mimeType(a2);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = off_1E34FA4D8;
  v5[1] = this;
  v5[2] = a2;
  v8 = v5;
  canShowMIMEType = WebKit::WebPage::canShowMIMEType((uint64_t)this, v4, &v8);
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  return canShowMIMEType;
}

uint64_t WebKit::WebPage::canShowMIMEType(uint64_t a1, WebCore::MIMETypeRegistry *this, _QWORD *a3)
{
  if ((WebCore::MIMETypeRegistry::canShowMIMEType(this, this) & 1) != 0
    || *(_QWORD *)this
    && (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>((uint64_t *)(a1 + 1792), (WTF::ASCIICaseInsensitiveHash **)this) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD, WebCore::MIMETypeRegistry *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, this, 1);
  }
}

void WebKit::DrawingArea::didCompleteRenderingUpdateDisplay(WebKit::DrawingArea *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (!*(_BYTE *)(v2 + 186))
    WebCore::Page::didCompleteRenderingUpdateDisplay(*(WebCore::Page **)(v2 + 48));
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

uint64_t WebKit::WebPage::updateVisibleContentRects(uint64_t result, uint64_t a2, double a3)
{
  unint64_t v3;
  BOOL v4;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  float v11;
  float v12;
  float v13;
  double v14;
  double v15;
  float v16;
  WebKit *v17;
  double v18;
  float v19;
  float v20;
  _BOOL8 v21;
  uint64_t v22;
  float v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  double v27;
  float64x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  WebCore::LocalFrameView *v31;
  _OWORD *v32;
  void *v33;
  _OWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  float v38;
  uint64_t v39;
  float v40;
  unint64_t v41;
  _BOOL8 v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  WebCore::Quirks *v54;
  int v55;
  double v56;
  WebKit *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float v62;
  float v63;
  _BOOL8 v64;
  float v65;
  int v66;
  char v67;
  _OWORD *v68;
  unsigned __int8 *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  float v75;
  unint64_t v76;
  IntSize v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 v80;
  _BYTE v81[20];
  char v82;
  int v83;
  BOOL v84[8];
  __int128 v85;
  char v86;
  char v87;
  char v88;
  __int128 v89;
  char v90;
  __int128 v91;
  uint64_t v92;
  IntPoint v93;
  _QWORD v94[2];

  v3 = *(_QWORD *)(a2 + 152);
  v4 = v3 < *(_QWORD *)(*(_QWORD *)(result + 88) + 96) && *(_BYTE *)(a2 + 169) == 0;
  if (v4)
    return result;
  v7 = result;
  v8 = 1;
  *(_BYTE *)(result + 1288) = 1;
  v9 = *(unsigned __int8 *)(a2 + 168);
  v10 = *(_BYTE *)(a2 + 168) == 0;
  *(_BYTE *)(result + 1293) = v10;
  v11 = 0.0;
  if (*(_QWORD *)(result + 1576) <= v3)
  {
    v12 = *(double *)(a2 + 160);
    v13 = *(float *)(*(_QWORD *)(result + 48) + 356);
    if (v9 && vabds_f32(v12, v13) < 0.005)
      v12 = *(float *)(*(_QWORD *)(result + 48) + 356);
    if (*(_BYTE *)(result + 1177))
    {
      WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor(result + 944);
      v15 = v14 * 5.0;
    }
    else
    {
      v15 = *(double *)(result + 984);
    }
    v16 = v15;
    v17 = (WebKit *)WebCore::ViewportConfiguration::minimumScale((WebCore::ViewportConfiguration *)(v7 + 944));
    v19 = v18;
    if (v12 > v19)
      v19 = v12;
    v20 = v19 >= v16 ? v16 : v19;
    v21 = WebKit::scalesAreEssentiallyEqual(v17, v13, v20);
    v10 = *(unsigned __int8 *)(v7 + 1293);
    if (!v21)
    {
      if (*(_BYTE *)(v7 + 1293))
      {
        v8 = 0;
        v11 = v20;
      }
      else
      {
        result = WTF::MemoryPressureHandler::singleton((WTF::MemoryPressureHandler *)v21);
        v37 = atomic_load((unsigned __int8 *)(result + 4));
        if (v37 == 2 || *(_BYTE *)(result + 7))
          return result;
        v8 = 0;
        v11 = v20;
        if (!*(_BYTE *)(v7 + 1293))
          goto LABEL_19;
      }
LABEL_23:
      *(_BYTE *)(v7 + 1292) = 1;
      goto LABEL_24;
    }
  }
  if (v10)
    goto LABEL_23;
LABEL_19:
  if (*(double *)(v7 + 1296) == 0.0)
    *(double *)(v7 + 1296) = a3;
LABEL_24:
  v22 = *(_QWORD *)(v7 + 48);
  v23 = *(float *)(v22 + 356);
  if (v8)
    v24 = *(float *)(v22 + 356);
  else
    v24 = v11;
  v25 = *(float32x2_t *)a2;
  v26 = *(float32x2_t *)(a2 + 8);
  v27 = *(double *)(a2 + 160);
  if (v27 != v24)
  {
    v28 = vcvtq_f64_f32(v26);
    v29 = vmul_f32(vcvt_f32_f64(vsubq_f64(vdivq_f64(vmulq_n_f64(v28, v27), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v24), 0)), v28)), (float32x2_t)0x3F0000003F000000);
    v25 = vsub_f32(v25, v29);
    v26 = vadd_f32(v29, vadd_f32(v26, v29));
  }
  v94[0] = v25;
  v94[1] = v26;
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v7 + 72) + 168))(*(_QWORD *)(v7 + 72), v94);
  result = *(_QWORD *)(v7 + 48);
  v30 = *(_QWORD *)(result + 160);
  if (!v30 || *(_BYTE *)(v30 + 144))
    return result;
  v31 = *(WebCore::LocalFrameView **)(v30 + 288);
  v32 = (_OWORD *)WebCore::Page::scrollingCoordinator((WebCore::Page *)result);
  if (v32)
  {
    v34 = v32;
    if (((*(uint64_t (**)(_OWORD *))(*(_QWORD *)v32 + 32))(v32) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196D267A4);
    }
    v32 = (_OWORD *)WebCore::LocalFrameView::scrollingNodeID(v31);
    if (v32)
    {
      v35 = (uint64_t *)(v34 + 10);
      if ((*(_BYTE *)(a2 + 168) & 4) != 0)
      {
        *(_QWORD *)&v91 = v32;
        *((_QWORD *)&v91 + 1) = v33;
        v32 = (_OWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add(v35, &v91, (uint64_t)v81);
        goto LABEL_47;
      }
      *(_QWORD *)v81 = v32;
      *(_QWORD *)&v81[8] = v33;
      v32 = (_OWORD *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v35, v81);
      v33 = v32;
      if (*v35)
      {
        v36 = *v35 + 16 * *(unsigned int *)(*v35 - 4);
        if ((_OWORD *)v36 == v32)
          goto LABEL_47;
      }
      else
      {
        if (!v32)
          goto LABEL_47;
        v36 = 0;
      }
      if ((_OWORD *)v36 != v32)
        v32 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v35, v32);
    }
  }
LABEL_47:
  v38 = roundf(*(float *)(a2 + 16));
  if (v38 >= 2147500000.0)
  {
    v39 = 0x7FFFFFFFLL;
  }
  else
  {
    v39 = 0x80000000;
    if (v38 > -2147500000.0)
      v39 = (int)v38;
  }
  v40 = roundf(*(float *)(a2 + 20));
  if (v40 >= 2147500000.0)
  {
    v41 = 0x7FFFFFFF00000000;
  }
  else if (v40 <= -2147500000.0)
  {
    v41 = 0x8000000000000000;
  }
  else
  {
    v41 = (unint64_t)(int)v40 << 32;
  }
  v93 = (IntPoint)(v41 | v39);
  if (!*(_BYTE *)(v7 + 1672)
    || (v42 = WebKit::scalesAreEssentiallyEqual((WebKit *)v32, v24, *(float *)(*(_QWORD *)(v7 + 48) + 356)))
    || (v43 = *(double *)(v7 + 1664), !WebKit::scalesAreEssentiallyEqual((WebKit *)v42, v43, v24))
    || *(_QWORD *)(v7 + 1656) < *(_QWORD *)(a2 + 152))
  {
    if ((v8 & 1) != 0)
    {
      if (*(_BYTE *)(v7 + 1293))
        WebCore::Page::setPageScaleFactor(*(WebCore::Page **)(v7 + 48), v23, &v93);
    }
    else
    {
      *(_BYTE *)(v7 + 1290) = 1;
      *(_BYTE *)(v7 + 1292) = *(_BYTE *)(v7 + 1293);
      v44 = *(_QWORD *)(v7 + 1496);
      if (v44)
      {
        *(_QWORD *)(v7 + 1496) = 0;
        WTF::fastFree((WTF *)(v44 - 16), v33);
      }
      WebCore::Page::setPageScaleFactor(*(WebCore::Page **)(v7 + 48), v11, &v93);
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 32) + 56))(v7 + 32);
      v46 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v46 = 1989;
      *(_QWORD *)(v46 + 8) = v45;
      *(_QWORD *)(v46 + 528) = v46 + 16;
      *(_QWORD *)(v46 + 536) = v46 + 16;
      *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v46 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
      *(_QWORD *)v81 = v46;
      *(double *)IPC::Encoder::grow((IPC::Encoder *)v46, 8uLL, 8) = v11;
      (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)(v7 + 32) + 32))(v7 + 32, v81, 0);
      v48 = *(IPC::Encoder **)v81;
      *(_QWORD *)v81 = 0;
      if (v48)
      {
        IPC::Encoder::~Encoder(v48, v47);
        WTF::fastFree(v49, v50);
      }
    }
  }
  if (v93 != WebCore::ScrollableArea::visibleContentRect())
  {
    v52 = *(_QWORD *)(v7 + 1496);
    if (v52)
    {
      *(_QWORD *)(v7 + 1496) = 0;
      WTF::fastFree((WTF *)(v52 - 16), v51);
    }
  }
  if (WebCore::ViewportConfiguration::setCanIgnoreScalingConstraints((WebCore::ViewportConfiguration *)(v7 + 944)))
    WebKit::WebPage::viewportConfigurationChanged(v7, 0);
  v53 = *(_QWORD *)(v30 + 296);
  if (v53)
  {
    *(_DWORD *)(v53 + 24) += 2;
    v54 = *(WebCore::Quirks **)(v53 + 688);
    if (!v54)
      v54 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v53);
    if (WebCore::Quirks::shouldLayOutAtMinimumWindowWidthWhenIgnoringScalingConstraints(v54))
      v55 = 500;
    else
      v55 = 0;
    if (*(_DWORD *)(v53 + 24) == 2)
    {
      if ((*(_WORD *)(v53 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v53);
    }
    else
    {
      *(_DWORD *)(v53 + 24) -= 2;
    }
  }
  else
  {
    v55 = 0;
  }
  if (WebCore::ViewportConfiguration::setMinimumEffectiveDeviceWidthWhenIgnoringScalingConstraints((WebCore::ViewportConfiguration *)(v7 + 944), (double)v55))WebKit::WebPage::viewportConfigurationChanged(v7, 0);
  *(_QWORD *)v81 = *(_QWORD *)(a2 + 24);
  WebCore::ScrollView::setUnobscuredContentSize(v31, (const FloatSize *)v81);
  *(_OWORD *)(*(_QWORD *)(v7 + 48) + 392) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(*(_QWORD *)(v7 + 48) + 376) = *(_OWORD *)(a2 + 96);
  WebCore::Page::setUnobscuredSafeAreaInsets();
  *(_BYTE *)(*(_QWORD *)(v7 + 48) + 448) = *(_BYTE *)(a2 + 171);
  v91 = *(_OWORD *)(a2 + 128);
  v92 = *(_QWORD *)(a2 + 144);
  v56 = *(double *)(a2 + 160);
  v57 = (WebKit *)WebCore::ViewportConfiguration::minimumScale((WebCore::ViewportConfiguration *)(v7 + 944));
  v59 = v58;
  if (*(_BYTE *)(v7 + 1177))
  {
    v57 = (WebKit *)WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor(v7 + 944);
    v61 = v60 * 5.0;
  }
  else
  {
    v61 = *(double *)(v7 + 984);
  }
  if (*((float *)&v91 + 2) != 0.0)
    *(_QWORD *)&v91 = 0;
  if (v56 <= v59
    || v56 >= v61
    || (v62 = v56, v63 = v59, v64 = WebKit::scalesAreEssentiallyEqual(v57, v62, v63))
    || (v65 = v61, WebKit::scalesAreEssentiallyEqual((WebKit *)v64, v62, v65)))
  {
    DWORD2(v91) = 0;
  }
  WebCore::LocalFrameView::setScrollVelocity();
  if (*(float *)(a2 + 16) == *(float *)(a2 + 48)
    && *(float *)(a2 + 20) == *(float *)(a2 + 52)
    && *(float *)(a2 + 24) == *(float *)(a2 + 56)
    && *(float *)(a2 + 28) == *(float *)(a2 + 60))
  {
    if (*(_BYTE *)(v7 + 1293))
    {
      v87 = 0;
      v88 = 0;
      WebCore::LocalFrameView::setVisualViewportOverrideRect();
      v66 = 1;
    }
    else
    {
      v66 = 0;
    }
  }
  else
  {
    WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v81, (const FloatRect *)(a2 + 48));
    v89 = *(_OWORD *)v81;
    v66 = 1;
    v90 = 1;
    WebCore::LocalFrameView::setVisualViewportOverrideRect();
  }
  v67 = *(_BYTE *)(a2 + 168);
  v68 = (_OWORD *)(a2 + 80);
  WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)v81, (const FloatRect *)(a2 + 80));
  v85 = *(_OWORD *)v81;
  v86 = 1;
  WebCore::LocalFrameView::setLayoutViewportOverrideRect();
  if (!*(_BYTE *)(v7 + 1293))
    goto LABEL_110;
  v69 = *(unsigned __int8 **)(*(_QWORD *)(v30 + 296) + 3064);
  v70 = v69[153];
  if (!v69[153])
    goto LABEL_110;
  v84[0] = 0;
  if (v70 == 1)
  {
    WebCore::FrameSelection::absoluteCaretBounds((WebCore::FrameSelection *)v69, v84);
  }
  else
  {
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v81, v84);
    v71 = *(_QWORD *)v81;
    *(_QWORD *)v81 = 0;
    if (v71)
    {
      if (*(_DWORD *)(v71 + 24) == 2)
      {
        if ((*(_WORD *)(v71 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v71);
      }
      else
      {
        *(_DWORD *)(v71 + 24) -= 2;
      }
    }
    if (v84[0])
      goto LABEL_109;
    WebCore::VisiblePosition::VisiblePosition();
    WebCore::VisiblePosition::absoluteCaretBounds((WebCore::VisiblePosition *)v81, v84);
    v72 = *(_QWORD *)v81;
    *(_QWORD *)v81 = 0;
    if (v72)
    {
      if (*(_DWORD *)(v72 + 24) == 2)
      {
        if ((*(_WORD *)(v72 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v72);
      }
      else
      {
        *(_DWORD *)(v72 + 24) -= 2;
      }
    }
  }
  if (v84[0])
  {
LABEL_109:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(WebCore::LocalFrameView::frame(v31) + 296) + 3064) + 24) = 1;
    WebKit::WebPage::scheduleFullEditorStateUpdate((_BYTE *)v7);
  }
LABEL_110:
  if (v66)
    WebCore::LocalFrameView::layoutOrVisualViewportChanged(v31);
  if ((v67 & 8) != 0)
  {
    result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v7 + 48));
    if (!result)
      return result;
    v78 = result;
    v80 = 1;
    v79 = 2;
    goto LABEL_125;
  }
  v73 = ceilf(*(float *)(a2 + 72));
  if (v73 >= 2147500000.0)
  {
    v74 = 0x7FFFFFFFLL;
  }
  else if (v73 <= -2147500000.0)
  {
    v74 = 0x80000000;
  }
  else
  {
    v74 = (int)v73;
  }
  v75 = ceilf(*(float *)(a2 + 76));
  if (v75 >= 2147500000.0)
  {
    v76 = 0x7FFFFFFF00000000;
  }
  else if (v75 <= -2147500000.0)
  {
    v76 = 0x8000000000000000;
  }
  else
  {
    v76 = (unint64_t)(int)v75 << 32;
  }
  v77 = (IntSize)(v76 | v74);
  WebCore::LocalFrameView::setCustomSizeForResizeEvent(v31, v77);
  result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v7 + 48));
  if (result)
  {
    v78 = result;
    v4 = *(_BYTE *)(v7 + 1293) == 0;
    v79 = *(_BYTE *)(v7 + 1293) == 0;
    if (v4)
      v80 = 1;
    else
      v80 = 2;
LABEL_125:
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v84, &v93);
    *(_OWORD *)&v81[4] = *v68;
    v82 = 1;
    v83 = 1;
    return (*(uint64_t (**)(uint64_t, WebCore::LocalFrameView *, BOOL *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v78 + 72))(v78, v31, v84, v81, 0, v79, v80);
  }
  return result;
}

void sub_196D26800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a10);
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ViewportConfiguration::effectiveLayoutSizeScaleFactor(uint64_t this)
{
  WebCore::ViewportConfiguration *v1;
  double v2;
  uint64_t v3;

  v1 = (WebCore::ViewportConfiguration *)this;
  if (*(float *)(this + 128) != 0.0)
  {
    v2 = *(double *)(this + 208);
    this = WebCore::ViewportConfiguration::shouldIgnoreMinimumEffectiveDeviceWidthForShrinkToFit((WebCore::ViewportConfiguration *)this);
    if ((this & 1) == 0)
    {
      v3 = 224;
      if (!*((_BYTE *)v1 + 232))
        v3 = 216;
      if (v2 < *(double *)((char *)v1 + v3))
        v2 = *(double *)((char *)v1 + v3);
    }
    if (v2 != 0.0)
      return WebCore::ViewportConfiguration::shouldIgnoreMinimumEffectiveDeviceWidthForShrinkToFit(v1);
  }
  return this;
}

uint64_t WebCore::ViewportConfiguration::shouldIgnoreMinimumEffectiveDeviceWidthForShrinkToFit(WebCore::ViewportConfiguration *this)
{
  uint64_t result;
  BOOL v8;
  _BYTE v9[4];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;

  if (*((_BYTE *)this + 232))
  {
    if (*((double *)this + 28) == 0.0)
      return 1;
  }
  else
  {
    v9[0] = 0;
    __asm { FMOV            V0.4S, #-1.0 }
    v10 = _Q0;
    v11 = _Q0;
    v12 = _Q0;
    v13 = 0;
    v8 = WebCore::ViewportArguments::operator==((uint64_t)this + 136, (uint64_t)v9);
    result = 0;
    if (v8)
      return result;
    if ((*((float *)this + 41) == 1.0 || *((float *)this + 35) == -2.0) && !*((_BYTE *)this + 234))
      return 1;
  }
  return 0;
}

BOOL WebCore::ViewportArguments::operator==(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 4) == *(float *)(a2 + 4)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(float *)(a1 + 28) == *(float *)(a2 + 28)
      && *(float *)(a1 + 32) == *(float *)(a2 + 32)
      && *(float *)(a1 + 36) == *(float *)(a2 + 36)
      && *(float *)(a1 + 40) == *(float *)(a2 + 40)
      && *(float *)(a1 + 44) == *(float *)(a2 + 44)
      && *(float *)(a1 + 48) == *(float *)(a2 + 48)
      && *(unsigned __int8 *)(a1 + 52) == *(unsigned __int8 *)(a2 + 52)
      && *(unsigned __int8 *)(a1 + 53) == *(unsigned __int8 *)(a2 + 53);
}

void WebKit::NavigationActionData::~NavigationActionData(WebKit::NavigationActionData *this)
{
  WebCore::ResourceRequestBase *v2;
  const void *v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  const void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  const void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v2 = (WebKit::NavigationActionData *)((char *)this + 2360);
  v3 = (const void *)*((_QWORD *)this + 319);
  *((_QWORD *)this + 319) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v2);
  v4 = (const void *)*((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NavigationActionData *)((char *)this + 2160));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((unsigned int *)this + 522);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v7])(&v21, (char *)this + 2064);
  *((_DWORD *)this + 522) = -1;
  v8 = (const void *)*((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = 0;
  if (v8)
    CFRelease(v8);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NavigationActionData *)((char *)this + 1864));
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *((unsigned int *)this + 444);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v11])(&v22, (char *)this + 1752);
  *((_DWORD *)this + 444) = -1;
  v12 = (const void *)*((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v12)
    CFRelease(v12);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NavigationActionData *)((char *)this + 1552));
  if (*((_BYTE *)this + 1536))
    WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::NavigationActionData *)((char *)this + 872));
  if (*((_BYTE *)this + 856))
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebKit::NavigationActionData *)((char *)this + 544), v13);
  std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 488, v13);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *((unsigned int *)this + 102);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v16])(&v23, (char *)this + 384);
  *((_DWORD *)this + 102) = -1;
  v17 = *((unsigned int *)this + 94);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v17])(&v24, (char *)this + 352);
  *((_DWORD *)this + 94) = -1;
  v18 = (const void *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v18)
    CFRelease(v18);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::NavigationActionData *)((char *)this + 88), v14);
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
}

BOOL IPC::MessageSender::sendMessageWithAsyncReply(uint64_t a1, IPC::Encoder **a2, uint64_t *a3, char a4)
{
  unsigned __int8 **v7;
  os_unfair_lock_s *v8;
  unsigned __int8 *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];
  uint64_t v28;

  v7 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v8 = (os_unfair_lock_s *)v7;
  if (v7)
  {
    v9 = *v7;
    if (__ldaxr(*v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
LABEL_5:
      ++*((_QWORD *)v9 + 1);
      v11 = __ldxr(v9);
      if (v11 == 1)
      {
        if (!__stlxr(0, v9))
          goto LABEL_10;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_10;
    }
    MEMORY[0x19AEABB3C](v9);
    goto LABEL_5;
  }
LABEL_10:
  v12 = *a3;
  v13 = a3[1];
  *a3 = 0;
  v27[0] = v12;
  v27[1] = v13;
  v14 = IPC::Connection::sendMessageWithAsyncReply(v8, a2, v27, a4, 0);
  v15 = v27[0];
  v27[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v8)
  {
    v16 = *(_QWORD *)&v8->_os_unfair_lock_opaque;
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
LABEL_16:
      v18 = *(_QWORD *)(v16 + 8);
      v19 = v18 - 1;
      *(_QWORD *)(v16 + 8) = v18 - 1;
      if (v18 == 1)
      {
        v26 = *(_QWORD *)(v16 + 16);
        v21 = *(_QWORD *)(v16 + 24);
        *(_QWORD *)(v16 + 24) = 0;
        v20 = v26 == 0;
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      v22 = __ldxr((unsigned __int8 *)v16);
      if (v22 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v16))
        {
LABEL_20:
          if (!v19)
          {
            v24 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v24 = off_1E34ACA48;
            *(_QWORD *)(v24 + 8) = v16;
            *(_QWORD *)(v24 + 16) = v21;
            *(_BYTE *)(v24 + 24) = v20;
            v28 = v24;
            WTF::ensureOnMainRunLoop();
            v25 = v28;
            v28 = 0;
            if (v25)
              (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          }
          return v14 == 0;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
      goto LABEL_20;
    }
    MEMORY[0x19AEABB3C](v16);
    goto LABEL_16;
  }
  return v14 == 0;
}

uint64_t IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(IPC::Encoder *a1, _DWORD **a2)
{
  _DWORD *v4;
  WTF::RefCountedBase *v5;
  void *v6;
  uint64_t v8[2];

  v4 = *a2;
  if (*a2)
    ++*v4;
  v8[0] = (uint64_t)v4;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,void>::encode<IPC::Encoder,WebCore::FormData>(a1, v8);
  v5 = (WTF::RefCountedBase *)v8[0];
  v8[0] = 0;
  if (v5)
    WTF::RefCounted<WebCore::FormData>::deref(v5);
  if (*a2)
  {
    WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,IPC::FormDataReference::sandboxExtensionHandles(void)::{lambda(0ul &)#1},WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((uint64_t)(*a2 + 2), (uint64_t)v8);
  }
  else
  {
    v8[0] = 0;
    v8[1] = 0;
  }
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v8);
  return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
}

void sub_196D26F20(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebFrame::info(WebKit::WebFrame *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  WebCore::LocalFrame *v7;
  uint64_t v8;
  WebCore::SecurityOriginData *v9;
  WebCore::SecurityOriginData *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  char v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[5];
  uint64_t v19;

  WebKit::WebFrame::parentFrame((unsigned int *)this, &v19);
  v4 = *((_QWORD *)this + 3);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    *(_BYTE *)a2 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5;
    v6 = *(_BYTE *)(v5 + 144) != 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    v6 = 1;
  }
  *(_BYTE *)(a2 + 1) = v6;
  WebKit::WebFrame::url(this, (uint64_t)v18);
  WebCore::ResourceRequestBase::ResourceRequestBase(a2 + 8, (const WTF::URL *)v18, 0);
  *(_QWORD *)(a2 + 200) = 0;
  v8 = *((_QWORD *)this + 3);
  if (v8 && (v9 = *(WebCore::SecurityOriginData **)(v8 + 8)) != 0)
  {
    if (*((_BYTE *)v9 + 144))
      v10 = 0;
    else
      v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  WebCore::SecurityOriginData::fromFrame(v10, v7);
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    v11 = *(_QWORD *)(v11 + 8);
    if (v11)
    {
      v11 = *(_QWORD *)(v11 + 64);
      if (v11)
        *(_DWORD *)v11 += 2;
    }
  }
  *(_QWORD *)(a2 + 240) = v11;
  *(_OWORD *)(a2 + 248) = *((_OWORD *)this + 5);
  v12 = (_OWORD *)(a2 + 264);
  v13 = v19;
  if (v19)
  {
    *v12 = *(_OWORD *)(v19 + 80);
    v14 = 1;
  }
  else
  {
    v14 = 0;
    *(_BYTE *)v12 = 0;
  }
  *(_BYTE *)(a2 + 280) = v14;
  *(_DWORD *)(a2 + 288) = getpid();
  *(_BYTE *)(a2 + 292) = WebKit::WebFrame::isFocused(this);
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    v16 = *(_QWORD *)(v16 + 8);
    if (v16)
    {
      if (*(_BYTE *)(v16 + 144))
        LOBYTE(v16) = 0;
      else
        LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v16 + 280) + 404) != 0;
    }
  }
  *(_BYTE *)(a2 + 293) = v16;
  v17 = v18[0];
  v18[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (v13)
    CFRelease(*(CFTypeRef *)(v13 + 8));
}

BOOL WebKit::WebFrame::isFocused(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 72) + 16);
  if (v5)
    v5 = *(_QWORD *)(v5 + 8);
  return v5 == v2;
}

uint64_t *WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::add<WebKit::WebFrame::PolicyCheck>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  int v28;
  unsigned int v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v27 = 0;
    v28 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v29 = 0;
        else
          v29 = *(_DWORD *)(v8 - 4);
        v26 = 0;
        v25 = v8 + 24 * v29;
        goto LABEL_14;
      }
      if (v17 == -1)
        v27 = v16;
      v15 = (v15 + v28) & v10;
      v16 = (uint64_t *)(v8 + 24 * v15);
      v17 = *v16;
      ++v28;
    }
    while (*v16);
    if (v27)
    {
      *v27 = 0;
      v27[1] = 0;
      v27[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v27;
    }
  }
  *v16 = v11;
  *((_BYTE *)v16 + 8) = *(_BYTE *)a3;
  v18 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  result = (uint64_t *)v16[2];
  v16[2] = v18;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_13;
LABEL_18:
    result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, v16);
    v16 = result;
    v21 = *v6;
    if (*v6)
      LODWORD(v24) = *(_DWORD *)(v21 - 4);
    else
      LODWORD(v24) = 0;
    goto LABEL_13;
  }
  if (3 * v24 <= 4 * v23)
    goto LABEL_18;
LABEL_13:
  v25 = v21 + 24 * v24;
  v26 = 1;
LABEL_14:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v25;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (uint64_t *)v6;
    do
    {
      if (*v16 != -1)
      {
        if (*v16)
        {
          v18 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::reinsert(*a1, v16);
          v19 = v16[2];
          v16[2] = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          if (v16 == a3)
            v13 = v18;
        }
        else
        {
          v17 = v16[2];
          v16[2] = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      v16 += 3;
      --v15;
    }
    while (v15);
    goto LABEL_19;
  }
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebKit::WebFrame::PolicyCheck>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebKit::WebFrame::PolicyCheck,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebKit::WebFrame::PolicyCheck>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

uint64_t WebKit::WebFrame::originatorAdvancedPrivacyProtections(WebKit::WebFrame *this)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v1 = WebKit::WebFrame::policySourceDocumentLoader(this);
  if (v1)
  {
    v2 = v1[6];
    v3 = v1[879];
    v4 = v3 >> 8;
    v1[6] = v2 + 1;
    v5 = HIWORD(v3);
    v6 = HIBYTE(v3);
    if (v2)
      v1[6] = v2;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 24))(v1);
  }
  else
  {
    LOBYTE(v3) = 0;
    LOBYTE(v5) = 0;
    v6 = 0;
    LOBYTE(v4) = 0;
  }
  return (v5 << 16) | (v6 << 24) | (v4 << 8) | v3;
}

uint64_t WebKit::WebFrame::advancedPrivacyProtections(WebKit::WebFrame *this)
{
  _DWORD *v1;
  int v2;
  uint64_t v3;

  v1 = WebKit::WebFrame::policySourceDocumentLoader(this);
  if (!v1)
    return 0;
  v2 = v1[6];
  v1[6] = v2 + 1;
  v3 = *((unsigned __int16 *)v1 + 1757);
  if (v2)
    v1[6] = v2;
  else
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 24))(v1);
  return v3;
}

_DWORD *WebKit::WebFrame::policySourceDocumentLoader(WebKit::WebFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  WebCore::Document *v8;
  uint64_t v9;
  _DWORD *v10;
  WTF::URL *v11;
  uint64_t v12;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 144))
      {
        v5 = (unsigned int *)(v2 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        v7 = *(_QWORD *)(v2 + 296);
        if (!v7)
        {
          v3 = 0;
LABEL_16:
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
          return v3;
        }
        *(_DWORD *)(v7 + 24) += 2;
        v8 = (WebCore::Document *)WebCore::Document::topDocument((WebCore::Document *)v7);
        v9 = WebCore::Document::loader(v8);
        if (v9)
        {
          v10 = (_DWORD *)v9;
          ++*(_DWORD *)(v9 + 24);
          v11 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v9 + 872));
          if ((WTF::URL::hasSpecialScheme(v11) & 1) != 0 || (*(_BYTE *)(v7 + 744) & 2) == 0)
          {
            v3 = v10;
          }
          else
          {
            v12 = WebCore::Document::loader((WebCore::Document *)v7);
            v3 = (_DWORD *)v12;
            if (v12)
              ++*(_DWORD *)(v12 + 24);
            if (v10[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
            else
              --v10[6];
            if (!v3)
              goto LABEL_14;
          }
          if (v3[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
          else
            --v3[6];
        }
        else
        {
          v3 = 0;
        }
LABEL_14:
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
        goto LABEL_16;
      }
    }
  }
  return 0;
}

uint64_t WebKit::WebPage::platformCanHandleRequest(WebKit::WebPage *this, const WebCore::ResourceRequest *a2)
{
  return objc_msgSend(MEMORY[0x1E0C92C58], "canHandleRequest:", WebCore::ResourceRequest::nsURLRequest());
}

uint64_t WebKit::WebPage::canHandleRequest(WebKit::WebPage *this, const WebCore::ResourceRequest *a2)
{
  WTF::URL *v3;
  const WebCore::ResourceRequest *v4;

  v3 = (WTF::URL *)WebCore::ResourceRequestBase::url(this);
  WTF::URL::protocol(v3);
  if ((WebCore::LegacySchemeRegistry::shouldLoadURLSchemeAsEmptyDocument() & 1) != 0)
    return 1;
  WebCore::ResourceRequestBase::url(this);
  if ((WTF::URL::protocolIs() & 1) != 0)
    return 1;
  else
    return WebKit::WebPage::platformCanHandleRequest(this, v4);
}

uint64_t WebKit::modifiersForNavigationAction(_BYTE *a1)
{
  unsigned int v2;

  if (!a1[445] || !a1[440])
    return 0;
  v2 = a1[441] != 0;
  if (a1[442])
    v2 |= 2u;
  if (a1[443])
    v2 |= 4u;
  if (a1[444])
    return v2 | 8;
  else
    return v2;
}

void WebKit::NetworkProcessConnection::create(uint64_t *a1, int *a2, char a3)
{
  uint64_t v6;
  void *v7;
  int v8;
  void *object;

  v6 = WTF::fastMalloc((WTF *)0x68);
  v8 = *a2;
  v7 = (void *)*((_QWORD *)a2 + 1);
  object = v7;
  if (v7)
    os_retain(v7);
  WebKit::NetworkProcessConnection::NetworkProcessConnection(v6, (uint64_t)&v8, a3);
  *a1 = v6;
  if (object)
    os_release(object);
}

uint64_t WebKit::NetworkProcessConnection::NetworkProcessConnection(uint64_t a1, int a2, void *object, char a4)
{
  mach_port_context_t *v6;
  WTF::RunLoop *v7;
  IPC::Connection *v8;
  uint64_t v9;
  WebCore::WebRTCProvider *v10;
  WebKit::WebProcess *v11;
  WebKit::WebProcess *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 **v16;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  int v20;
  void *objecta;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E34EAF70;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (mach_port_context_t *)(a1 + 24);
  v20 = a2;
  objecta = object;
  if (object)
    os_retain(object);
  IPC::Connection::createClientConnection((uint64_t)&v20, v6);
  v7 = (WTF::RunLoop *)objecta;
  if (objecta)
    os_release(objecta);
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = a4;
  v8 = *(IPC::Connection **)(a1 + 24);
  v9 = WTF::RunLoop::current(v7);
  v10 = (WebCore::WebRTCProvider *)IPC::Connection::open(v8, a1, v9);
  v11 = (WebKit::WebProcess *)WebCore::WebRTCProvider::webRTCAvailable(v10);
  if ((_DWORD)v11)
  {
    v12 = WebKit::WebProcess::singleton(v11);
    WebKit::WebProcess::libWebRTCNetwork(v12);
    v14 = v13;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, (unsigned __int8 **)*v6);
    v15 = v18;
    v18 = 0;
    v19 = v15;
    WebKit::LibWebRTCNetwork::setConnection(v14, &v19);
    v16 = v19;
    v19 = 0;
    if (v16)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v16);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
  }
  return a1;
}

uint64_t WebKit::NetworkProcessConnection::NetworkProcessConnection(uint64_t a1, uint64_t a2, char a3)
{
  return WebKit::NetworkProcessConnection::NetworkProcessConnection(a1, *(_DWORD *)a2, *(void **)(a2 + 8), a3);
}

void WebKit::LibWebRTCNetwork::setConnection(uint64_t a1, unsigned __int8 ***a2)
{
  uint64_t v4;
  unsigned __int8 ***v5;

  v5 = (unsigned __int8 ***)(a1 + 200);
  v4 = *(_QWORD *)(a1 + 200);
  if (v4)
    IPC::Connection::removeMessageReceiver(v4, 0x15u, 0);
  WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::operator=(v5, a2);
  if (*(_BYTE *)(a1 + 192))
    WebKit::LibWebRTCNetwork::setSocketFactoryConnection((WebKit::LibWebRTCNetwork *)a1);
  if (*v5)
    IPC::Connection::addMessageReceiver((uint64_t)*v5, a1, a1 + 8, 0x15u, 0);
}

void WebKit::WebProcess::libWebRTCNetwork(WebKit::WebProcess *this)
{
  WebKit::LibWebRTCNetwork *v2;
  double v3;
  uint64_t v4;
  uint64_t v5;

  if (!*((_QWORD *)this + 53))
  {
    v2 = (WebKit::LibWebRTCNetwork *)WTF::fastMalloc((WTF *)0xD0);
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    v3 = WebKit::LibWebRTCNetwork::LibWebRTCNetwork(v2);
    v4 = *((_QWORD *)this + 53);
    *((_QWORD *)this + 53) = v5;
    if (v4)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v4 + 8))(v4, v3);
  }
}

double WebKit::LibWebRTCNetwork::LibWebRTCNetwork(WebKit::LibWebRTCNetwork *this)
{
  uint64_t v1;
  double result;

  v1 = WTF::FunctionDispatcher::FunctionDispatcher(this);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)v1 = off_1E34EC1F8;
  *(_QWORD *)(v1 + 8) = &unk_1E34EC228;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_BYTE *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 200) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 76) = 0u;
  *(_QWORD *)(v1 + 180) = 0;
  *(_QWORD *)(v1 + 172) = 0;
  *(_QWORD *)(v1 + 185) = 0;
  return result;
}

unsigned __int8 ***WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::operator=(unsigned __int8 ***a1, unsigned __int8 ***a2)
{
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (!v4)
    return a1;
  v5 = *v4;
  if (__ldaxr(*v4))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](v5);
    goto LABEL_5;
  }
  if (__stxr(1u, v5))
    goto LABEL_4;
LABEL_5:
  v7 = *((_QWORD *)v5 + 1);
  v8 = v7 - 1;
  *((_QWORD *)v5 + 1) = v7 - 1;
  if (v7 == 1)
  {
    v14 = *((_QWORD *)v5 + 2);
    v10 = *((_QWORD *)v5 + 3);
    *((_QWORD *)v5 + 3) = 0;
    v9 = v14 == 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v11 = __ldxr(v5);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v8)
  {
    v13 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v13 = off_1E34ACA48;
    *(_QWORD *)(v13 + 8) = v5;
    *(_QWORD *)(v13 + 16) = v10;
    *(_BYTE *)(v13 + 24) = v9;
    v15 = v13;
    WTF::ensureOnMainRunLoop();
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return a1;
}

void WebKit::PageClientImpl::setRemoteLayerTreeRootNode(id *this, WebKit::RemoteLayerTreeNode *a2)
{
  id WeakRetained;
  const void *v4;
  uint64_t v5;

  WeakRetained = objc_loadWeakRetained(this + 5);
  v4 = WeakRetained;
  if (a2)
    v5 = *((_QWORD *)a2 + 6);
  else
    v5 = 0;
  objc_msgSend(WeakRetained, "_setAcceleratedCompositingRootView:", v5);
  if (v4)
    CFRelease(v4);
}

void sub_196D27E9C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::WebChromeClient::addMessageWithArgumentsToConsole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;

  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v16)
    v17 = v16 - 16;
  else
    v17 = 0;
  CFRetain(*(CFTypeRef *)(v17 + 8));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t))(**(_QWORD **)(v17 + 376) + 24))(*(_QWORD *)(v17 + 376), v17, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v16)
    CFRelease(*(CFTypeRef *)(v16 - 8));
}

void sub_196D28214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcess::webPageGroup(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;
  _DWORD *v7;
  uint64_t v8;
  char v9;

  v7 = 0;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PageGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageGroupProxy,WTF::RawPtrTraits<WebKit::WebPageGroupProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageGroupProxy>>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(a1 + 120), a2 + 1, (uint64_t)&v8);
  if (v9)
  {
    WebKit::WebPageGroupProxy::create((const WTF::String *)a2, (uint64_t *)&v7);
    v3 = (uint64_t)v7;
    v7 = 0;
    v4 = *(_DWORD **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v3;
    if (v4)
    {
      v5 = v4[2] - 1;
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *(_QWORD *)(v8 + 8);
        v5 = v4[2] - 1;
        if (v4[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
          return *(_QWORD *)(v8 + 8);
        }
      }
      v4[2] = v5;
    }
  }
  return *(_QWORD *)(v8 + 8);
}

uint64_t WebKit::WebPageGroupProxy::create@<X0>(const WTF::String *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x28);
  result = WebKit::WebPageGroupProxy::WebPageGroupProxy(v4, a1);
  *a2 = result;
  return result;
}

uint64_t WebKit::WebPageGroupProxy::WebPageGroupProxy(uint64_t a1, const WTF::String *a2)
{
  WebCore::PageGroup *v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int **v8;
  unsigned int v9;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34F18B8;
  v3 = (WebCore::PageGroup *)(a1 + 16);
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
  v5 = (unsigned int *)WebCore::PageGroup::pageGroup(v3, a2);
  if (v5)
  {
    v8 = (unsigned int **)v5;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v5, (uint64_t)v5);
    v6 = *v8;
    if (*v8)
    {
      do
        v9 = __ldaxr(v6);
      while (__stlxr(v9 + 1, v6));
    }
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(a1 + 32) = v6;
  return a1;
}

BOOL WebKit::isLockdownModeEnabledBySystemIgnoringCaching(WebKit *this)
{
  _BOOL8 result;
  _BOOL8 HasContainer;
  const __CFString *v3;
  WTF::StringImpl *v4;
  _BOOL4 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  {
    if (HIBYTE(WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting))
      return (_BYTE)WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting != 0;
  }
  else
  {
    WebKit::isLockdownModeEnabledGloballyForTesting(void)::enabledForTesting = 0;
  }
  result = +[_WKSystemPreferences isCaptivePortalModeEnabled](_WKSystemPreferences, "isCaptivePortalModeEnabled");
  if (result)
  {
    HasContainer = WebKit::processHasContainer((WebKit *)result);
    if (HasContainer)
    {
      WebKit::pathForProcessContainer((uint64_t *)&v7, (WebKit *)HasContainer);
      if (v7)
        v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v3 = &stru_1E351F1B8;
      v5 = +[_WKSystemPreferences isCaptivePortalModeIgnored:](_WKSystemPreferences, "isCaptivePortalModeIgnored:", v3);
      v6 = v7;
      v7 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
      return !v5;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_196D284D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196D285BC(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t **IPC::StreamClientConnection::open(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t **result;
  IPC::Connection *v7;

  if (*(_BYTE *)(a1 + 40))
  {
    *(_QWORD *)(a1 + 16) = &off_1E34B0558;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 24), a2);
  }
  *(_QWORD *)(a1 + 16) = &off_1E351F028;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = 1;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v7, (uint64_t **)(a1 + 8));
  if (*(_BYTE *)(a1 + 40))
  {
    IPC::Connection::open(v7, a1 + 16, a3);
    return (uint64_t **)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          CFRelease(*(CFTypeRef *)(v6 + 8));
          v5 = *(WTF::StringImpl **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebKit::WebPageProxy::resetState(uint64_t a1, void *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  WebKit::RemoteLayerTreeDrawingAreaProxy *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  CFTypeRef *v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebKit::PlaybackSessionManagerProxy *v23;
  WebKit::VideoPresentationManagerProxy *v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  WebKit::AuthenticatorManager *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  char v65;
  _QWORD **v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71[2];

  v2 = (int)a2;
  v4 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = *(_QWORD *)(a1 + 1128);
  *(_QWORD *)(a1 + 1128) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(unsigned int **)(a1 + 1136);
  *(_QWORD *)(a1 + 1136) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  std::unique_ptr<WebKit::RemoteLayerTreeScrollingPerformanceData>::reset[abi:sn180100]((uint64_t *)(a1 + 912), 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1992) = 0;
  v11 = *(unsigned int *)(a1 + 492);
  if ((_DWORD)v11)
    WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)(a1 + 480), (WTF::StringImpl *)(*(_QWORD *)(a1 + 480) + 16 * v11));
  v12 = *(WTF **)(a1 + 480);
  if (v12)
  {
    *(_QWORD *)(a1 + 480) = 0;
    *(_DWORD *)(a1 + 488) = 0;
    WTF::fastFree(v12, v10);
  }
  v60 = 0;
  *(_QWORD *)(a1 + 480) = 0;
  v61 = 0;
  *(_QWORD *)(a1 + 488) = 0;
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v10);
  v14 = *(WebKit::RemoteLayerTreeDrawingAreaProxy **)(a1 + 184);
  if (v14)
  {
    if (v2 == 2 && !*((_BYTE *)v14 + 32))
    {
      WebKit::RemoteLayerTreeDrawingAreaProxy::detachRemoteLayerTreeHost(v14, v13, &v60);
      std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100]((WebKit::RemoteLayerTreeHost **)(a1 + 192), v60);
    }
    v60 = 0;
    WebKit::WebPageProxy::setDrawingArea(a1, &v60);
    if (v60)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v60 + 8))(v60);
  }
  WebKit::WebPageProxy::closeOverlayedViews((WebKit::WebPageProxy *)a1);
  v15 = *(_QWORD *)(a1 + 352);
  if (v15)
  {
    CFRetain(*(CFTypeRef *)(v15 + 8));
    WebKit::WebInspectorUIProxy::reset(v15);
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    WebKit::WebInspectorUIProxy::reset(0);
  }
  v16 = *(_QWORD *)(a1 + 360);
  if (v16)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v16 + 32) + 16))(*(_QWORD *)(v16 + 32));
    v17 = *(_QWORD *)(a1 + 360);
    *(_QWORD *)(a1 + 360) = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  std::unique_ptr<WebKit::WebScreenOrientationManagerProxy>::reset[abi:sn180100]((WebKit::WebScreenOrientationManagerProxy **)(a1 + 1248), 0);
  if (v2 != 2)
  {
    *(_DWORD *)(a1 + 1152) = 0;
    WebKit::WebPageProxy::callLoadCompletionHandlersIfNecessary(a1, 0);
  }
  v19 = *(CFTypeRef **)(a1 + 496);
  *(_QWORD *)(a1 + 496) = 0;
  if (v19)
  {
    WebKit::WebOpenPanelResultListenerProxy::invalidate((WebKit::WebOpenPanelResultListenerProxy *)v19, v18);
    CFRelease(v19[1]);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 2208) = 0;
  WebKit::GeolocationPermissionRequestManagerProxy::invalidateRequests((WebKit::GeolocationPermissionRequestManagerProxy *)(*(_QWORD *)(a1 + 32) + 712));
  v60 = 0;
  WebKit::WebPageProxy::setToolTip((WTF **)a1, &v60, v20);
  v22 = v60;
  v60 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  *(_WORD *)(a1 + 848) = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 785) = 16843009;
  *(_OWORD *)(*(_QWORD *)(a1 + 32) + 1880) = 0u;
  v23 = *(WebKit::PlaybackSessionManagerProxy **)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v23)
  {
    WebKit::PlaybackSessionManagerProxy::invalidate(v23, v21);
    if (*((_DWORD *)v23 + 4) == 1)
      (*(void (**)(WebKit::PlaybackSessionManagerProxy *))(*(_QWORD *)v23 + 8))(v23);
    else
      --*((_DWORD *)v23 + 4);
  }
  v24 = *(WebKit::VideoPresentationManagerProxy **)(a1 + 384);
  *(_QWORD *)(a1 + 384) = 0;
  if (v24)
  {
    WebKit::VideoPresentationManagerProxy::invalidate(v24, v21);
    if (*((_DWORD *)v24 + 4) == 1)
      (*(void (**)(WebKit::VideoPresentationManagerProxy *))(*(_QWORD *)v24 + 8))(v24);
    else
      --*((_DWORD *)v24 + 4);
  }
  v25 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(v25 + 2400) = 0u;
  *(_OWORD *)(v25 + 2384) = 0u;
  *(_OWORD *)(v25 + 2368) = 0u;
  *(_OWORD *)(v25 + 2352) = 0u;
  *(_OWORD *)(v25 + 2336) = 0u;
  *(_OWORD *)(v25 + 2320) = 0u;
  *(_OWORD *)(v25 + 2304) = 0u;
  *(_OWORD *)(v25 + 2288) = 0u;
  *(_OWORD *)(v25 + 2272) = 0u;
  *(_OWORD *)(v25 + 2256) = 0u;
  *(_QWORD *)(v25 + 2416) = 0xBFF0000000000000;
  *(_DWORD *)(v25 + 2424) = 0;
  *(_WORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 402) = 0;
  *(_BYTE *)(a1 + 1033) = 0;
  v26 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v26 + 2592) = 1;
  v27 = *(_WORD **)(v26 + 1976);
  if (v27)
  {
    if (v2 == 1 && v27[28])
      v27[28] = 8;
    *(_QWORD *)(v26 + 1976) = 0;
    (*(void (**)(_WORD *))(*(_QWORD *)v27 + 8))(v27);
  }
  std::unique_ptr<WebKit::SystemPreviewController>::reset[abi:sn180100]((WTF **)(a1 + 408), 0);
  std::unique_ptr<WebKit::ModelElementController>::reset[abi:sn180100]((WTF **)(a1 + 416), 0);
  v28 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *(_QWORD *)(a1 + 1240);
  *(_QWORD *)(a1 + 1240) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(_QWORD **)(a1 + 448);
  v31 = *(_QWORD **)(a1 + 456);
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  v71[0] = v30;
  v71[1] = v31;
  v32 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(v71);
  v60 = (WTF::StringImpl *)v71;
  v61 = v32;
  v62 = v33;
  v34 = v71[0];
  if (v71[0])
  {
    v35 = *((unsigned int *)v71[0] - 1);
    v36 = &v71[0][v35];
    v63 = v36;
    v64 = v36;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v60);
  }
  else
  {
    v63 = 0;
    v64 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v60);
    v36 = 0;
    v35 = 0;
  }
  v66 = v71;
  v67 = v36;
  v68 = v36;
  v69 = v36;
  v70 = &v34[v35];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v66);
  v38 = v61;
  if (v61 != v67)
  {
    do
    {
      v39 = *(_QWORD *)(*v38 + 8);
      CFRetain(*(CFTypeRef *)(v39 + 8));
      v41 = *(unsigned int **)(v39 + 40);
      *(_QWORD *)(v39 + 40) = 0;
      if (v41)
      {
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          atomic_store(1u, v41);
          WTF::fastFree((WTF *)v41, v40);
        }
      }
      CFRelease(*(CFTypeRef *)(v39 + 8));
      v44 = v61 + 1;
      v61 = v44;
      if (v44 != v62)
      {
        while ((unint64_t)(*v44 + 1) <= 1)
        {
          if (++v44 == v62)
          {
            v44 = v62;
            break;
          }
        }
        v61 = v44;
      }
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v60);
      ++*((_DWORD *)v60 + 2);
      v38 = v61;
    }
    while (v61 != v67);
    v34 = v71[0];
  }
  if (v34)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable((uint64_t)v34, v37);
  v45 = *(_DWORD **)(a1 + 472);
  *(_QWORD *)(a1 + 472) = 0;
  if (v45)
  {
    if (v45[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
    else
      --v45[2];
  }
  WebKit::WebPageProxy::updatePlayingMediaDidChange((WebKit::WebPageProxy *)a1, 0, 0);
  v46 = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 504) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  WebKit::WebPageProxy::resetSpeechSynthesizer(*(_QWORD *)(a1 + 32));
  v47 = *(_QWORD *)(a1 + 264);
  CFRetain(*(CFTypeRef *)(v47 + 8));
  v48 = *(WebKit::AuthenticatorManager **)(v47 + 360);
  v49 = *(_QWORD *)(a1 + 32) + 1896;
  LOBYTE(v60) = 0;
  LOBYTE(v62) = 0;
  WebKit::AuthenticatorManager::cancelRequest(v48, v49, (uint64_t)&v60);
  CFRelease(*(CFTypeRef *)(v47 + 8));
  std::unique_ptr<WebKit::SpeechRecognitionPermissionManager>::reset[abi:sn180100]((WebKit::SpeechRecognitionPermissionManager **)(a1 + 1184), 0);
  *(_WORD *)(a1 + 1306) = 0;
  LOBYTE(v60) = 0;
  v65 = 0;
  WebKit::WebPageProxy::setMediaCapability((WebKit::WebPageProxy *)a1, (uint64_t)&v60);
  std::__optional_destruct_base<WebKit::MediaCapability,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v60, v50);
  v52 = *(_QWORD *)(a1 + 32);
  v53 = *(_QWORD *)(v52 + 2224);
  if (v53)
  {
    *(_QWORD *)(v52 + 2224) = 0;
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(v53, v51);
  }
  v54 = *(_QWORD *)(a1 + 1360);
  if (v54)
  {
    *(_QWORD *)(a1 + 1360) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v54, v51);
    v55 = *(_QWORD *)(a1 + 1360);
    *(_DWORD *)(a1 + 1368) = 0;
    if (v55)
    {
      LODWORD(v55) = *(_DWORD *)(v55 - 12);
      if (v55 > 0x7FFFFFFE)
        LODWORD(v55) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v55) = 0;
    *(_DWORD *)(a1 + 1368) = 0;
  }
  *(_DWORD *)(a1 + 1372) = 2 * v55;
  v56 = *(_QWORD *)(a1 + 1376);
  *(_QWORD *)(a1 + 1376) = 0;
  if (v56)
    std::default_delete<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>>::operator()[abi:sn180100](a1 + 1376, v56);
  v57 = *(_QWORD *)(a1 + 40);
  if (v57)
    v58 = *(_QWORD *)(v57 + 8);
  else
    v58 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 1584))(v58);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v58 + 1864))(v58, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 1592))(v58);
}

WTF::StringImpl *WebKit::WebPageProxy::setMediaCapability(WebKit::WebPageProxy *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *result;
  WTF *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  _BYTE buf[12];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  __int16 v44;
  char *v45;
  __int16 v46;
  char *v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 4);
  v5 = v4 + 2480;
  buf[0] = 0;
  v48 = 0;
  if (*(_BYTE *)(v4 + 2560))
  {
    WebKit::MediaCapability::MediaCapability((uint64_t)buf, v5);
    v48 = 1;
  }
  std::__optional_destruct_base<WebKit::MediaCapability,false>::reset[abi:sn180100](v5, (WTF::StringImpl *)a2);
  if (v48)
    WebKit::WebPageProxy::deactivateMediaCapability(a1, (id *)buf);
  std::__optional_destruct_base<WebKit::MediaCapability,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v6);
  v8 = *((_QWORD *)a1 + 4);
  if (*(unsigned __int8 *)(v8 + 2560) == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(v8 + 2560))
    {
      v9 = *(_QWORD *)(a2 + 8);
      if (v9)
        CFRetain(*(CFTypeRef *)(a2 + 8));
      v10 = *(const void **)(v8 + 2488);
      *(_QWORD *)(v8 + 2488) = v9;
      if (v10)
        CFRelease(v10);
      *(_BYTE *)(v8 + 2504) = *(_BYTE *)(a2 + 24);
      WTF::URL::operator=(v8 + 2512, (WTF::StringImpl *)(a2 + 32));
      v11 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 72) = 0;
      v12 = *(const void **)(v8 + 2552);
      *(_QWORD *)(v8 + 2552) = v11;
      if (v12)
        CFRelease(v12);
    }
  }
  else
  {
    v13 = v8 + 2480;
    if (*(_BYTE *)(v8 + 2560))
    {
      std::__optional_destruct_base<WebKit::MediaCapability,false>::reset[abi:sn180100](v13, v7);
    }
    else
    {
      WebKit::MediaCapability::MediaCapability(v13, a2);
      *(_BYTE *)(v8 + 2560) = 1;
    }
  }
  v14 = *((_QWORD *)a1 + 4);
  v15 = *(unsigned __int8 *)(v14 + 2560);
  v16 = qword_1ECE71618;
  v17 = os_log_type_enabled((os_log_t)qword_1ECE71618, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v17)
    {
      v18 = *(_QWORD *)(*((_QWORD *)a1 + 26) + 136);
      v19 = v18 ? *(_DWORD *)(v18 + 108) : 0;
      v25 = *(_QWORD *)(v14 + 744);
      v26 = *(_QWORD *)(v14 + 1896);
      WebKit::MediaCapability::environmentIdentifier((id *)(v14 + 2480), (uint64_t *)&v35);
      WTF::String::utf8();
      v27 = v36 ? (char *)v36 + 16 : 0;
      if (!*(_BYTE *)(*((_QWORD *)a1 + 4) + 2560))
        goto LABEL_52;
      WTF::String::utf8();
      if (v34)
        v28 = (char *)v34 + 16;
      else
        v28 = 0;
      *(_DWORD *)buf = 134219267;
      *(_QWORD *)&buf[4] = a1;
      v38 = 2048;
      v39 = v25;
      v40 = 2048;
      v41 = v26;
      v42 = 1024;
      v43 = v19;
      v44 = 2082;
      v45 = v27;
      v46 = 2085;
      v47 = v28;
      _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::setMediaCapability: creating (envID=%{public}s) for URL '%{sensitive}s'", buf, 0x3Au);
      if (v34)
      {
        if (*(_DWORD *)v34 == 1)
          WTF::fastFree(v34, v29);
        else
          --*(_DWORD *)v34;
      }
      v30 = v36;
      v36 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 1)
          WTF::fastFree(v30, v29);
        else
          --*(_DWORD *)v30;
      }
      v31 = v35;
      v35 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v29);
        else
          *(_DWORD *)v31 -= 2;
      }
      v14 = *((_QWORD *)a1 + 4);
      if (!*(_BYTE *)(v14 + 2560))
LABEL_52:
        __break(1u);
    }
    v32 = *((_QWORD *)a1 + 26);
    WebKit::MediaCapability::environmentIdentifier((id *)(v14 + 2480), (uint64_t *)&v36);
    *(_QWORD *)buf = &v36;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMediaEnvironment>(v32, (uint64_t **)buf, *(_QWORD *)(*((_QWORD *)a1 + 4) + 1896));
  }
  else
  {
    if (v17)
    {
      v20 = *(_QWORD *)(v14 + 744);
      v21 = *(_QWORD *)(v14 + 1896);
      v22 = *(_QWORD *)(*((_QWORD *)a1 + 26) + 136);
      if (v22)
        LODWORD(v22) = *(_DWORD *)(v22 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = a1;
      v38 = 2048;
      v39 = v20;
      v40 = 2048;
      v41 = v21;
      v42 = 1024;
      v43 = v22;
      _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::setMediaCapability: clearing media capability", buf, 0x26u);
      v14 = *((_QWORD *)a1 + 4);
    }
    v23 = *((_QWORD *)a1 + 26);
    v36 = 0;
    *(_QWORD *)buf = &v36;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetMediaEnvironment>(v23, (uint64_t **)buf, *(_QWORD *)(v14 + 1896));
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_196D29158(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, char a13)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebInspectorUIProxy::reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = *(_QWORD *)(this + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      IPC::MessageReceiverMap::removeMessageReceiver(*(_QWORD *)(v2 + 192) + 152, 0xAFu, *(_QWORD *)(*(_QWORD *)(v2 + 16) + 1896));
      this = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (this)
      {
        do
        {
          v5 = __ldaxr((unsigned int *)this);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, (unsigned int *)this));
        if (!v6)
        {
          atomic_store(1u, (unsigned int *)this);
          return WTF::fastFree((WTF *)this, v4);
        }
      }
    }
  }
  return this;
}

void WebKit::WebPageProxy::updatePlayingMediaDidChange(WebKit::WebPageProxy *this, unsigned int a2, char a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;

  v6 = *((_QWORD *)this + 4);
  v7 = *(_DWORD *)(v6 + 808);
  if (v7 == a2)
  {
    if ((a3 & 1) == 0)
    {
      if (WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v6 + 1800)))
      {
        WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*((_QWORD *)this + 4) + 1800));
        WebKit::WebPageProxy::updateReportedMediaCaptureState((uint64_t)this);
      }
    }
  }
  else
  {
    v8 = a2 & 0x7FDF800;
    if ((a2 & 1) == (*(_DWORD *)(v6 + 808) & 1))
    {
      *(_DWORD *)(v6 + 808) = a2;
    }
    else
    {
      v9 = *((_QWORD *)this + 5);
      if (v9)
        v10 = *(_QWORD *)(v9 + 8);
      else
        v10 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1584))(v10);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1384))(v10);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
      v11 = *((_QWORD *)this + 5);
      *(_DWORD *)(*((_QWORD *)this + 4) + 808) = a2;
      if (v11)
        v12 = *(_QWORD *)(v11 + 8);
      else
        v12 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 1584))(v12);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 1392))(v12);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 1592))(v12);
    }
    if ((v7 & 0x7FDF800) != v8)
    {
      WebKit::WebPageProxy::updateReportedMediaCaptureState((uint64_t)this);
      v13 = *((_QWORD *)this + 63);
      if (v13)
        WebKit::UserMediaPermissionRequestManagerProxy::captureStateChanged(v13, v7 & 0x7FDF800, a2 & 0xF800);
    }
    if ((a3 & 1) == 0
      && WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(*((_QWORD *)this + 4) + 1800)))
    {
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*((_QWORD *)this + 4) + 1800));
      WebKit::WebPageProxy::updateReportedMediaCaptureState((uint64_t)this);
    }
    WebKit::WebPageProxy::activityStateDidChange((uint64_t)this, 320, 0, 0);
    v14 = *(_DWORD *)(*((_QWORD *)this + 4) + 808);
    if (((v14 ^ v7) & 0x7FDF803) != 0)
    {
      (*(void (**)(_QWORD, WebKit::WebPageProxy *))(**((_QWORD **)this + 13) + 424))(*((_QWORD *)this + 13), this);
      v14 = *(_DWORD *)(*((_QWORD *)this + 4) + 808);
    }
    if (((v7 >> 10) & 1) != (unsigned __int16)(v14 & 0x400) >> 10)
    {
      v15 = *((_QWORD *)this + 5);
      if (v15)
        v16 = *(_QWORD *)(v15 + 8);
      else
        v16 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 1584))(v16);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 1576))(v16);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 1592))(v16);
    }
    v17 = (unsigned int *)*((_QWORD *)this + 26);
    v18 = v17 + 4;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    WebKit::WebProcessProxy::updateAudibleMediaAssertions((WebKit::WebProcessProxy *)v17);
    if (((a2 >> 27) & 1) != (v7 & 0x8000000) >> 27)
      WebKit::WebProcessProxy::updateMediaStreamingActivity((WebKit::WebProcessProxy *)v17);
    WebKit::WebPageProxy::updateMediaCapability(this);
    if (v17)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v17 + 4);
  }
}

uint64_t WebKit::MediaCapability::MediaCapability(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;

  v4 = *(const void **)(a2 + 8);
  *(_QWORD *)a1 = off_1E34AB458;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    CFRetain(v4);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E34B6890;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  WTF::URL::URL(a1 + 32, (uint64_t *)(a2 + 32));
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v5;
  return a1;
}

void sub_196D2955C(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  unsigned int **v3;
  uint64_t v4;
  const void *v6;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  v6 = (const void *)v2[1];
  *v2 = v4;
  v2[1] = 0;
  if (v6)
    CFRelease(v6);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::GeolocationPermissionRequestManagerProxy::invalidateRequests(WebKit::GeolocationPermissionRequestManagerProxy *this)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this);
  v4 = *(_QWORD **)this;
  if (*(_QWORD *)this)
    v5 = &v4[2 * *((unsigned int *)v4 - 1)];
  else
    v5 = 0;
  if (v5 != result)
  {
    do
    {
      *(_QWORD *)(result[1] + 8) = 0;
      while (1)
      {
        result += 2;
        if (result == v3)
          break;
        if ((unint64_t)(*result + 1) > 1)
          goto LABEL_10;
      }
      result = v3;
LABEL_10:
      ;
    }
    while (result != v5);
    v4 = *(_QWORD **)this;
  }
  if (v4)
  {
    *(_QWORD *)this = 0;
    return (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable((uint64_t)v4, v3);
  }
  return result;
}

void WebKit::WebDeviceOrientationUpdateProviderProxy::~WebDeviceOrientationUpdateProviderProxy(WebKit::WebDeviceOrientationUpdateProviderProxy *this)
{
  WTF *v1;
  void *v2;

  WebKit::WebDeviceOrientationUpdateProviderProxy::~WebDeviceOrientationUpdateProviderProxy(this);
  WTF::fastFree(v1, v2);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1E34F4800;
  *((_QWORD *)this + 2) = &unk_1E34F4838;
  IPC::MessageReceiverMap::removeMessageReceiver(*(_QWORD *)(*((_QWORD *)this + 4) + 208) + 152, 0x9Fu, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 32) + 1896));
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

void WebKit::WebAuthenticatorCoordinatorProxy::~WebAuthenticatorCoordinatorProxy(WebKit::WebAuthenticatorCoordinatorProxy *this)
{
  WTF *v1;
  void *v2;

  WebKit::WebAuthenticatorCoordinatorProxy::~WebAuthenticatorCoordinatorProxy(this);
  WTF::fastFree(v1, v2);
}

{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  _QWORD *v11;

  *(_QWORD *)this = off_1E34DEEB0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34DF158;
  v11 = v2;
  WebKit::WebAuthenticatorCoordinatorProxy::cancel(this, (uint64_t *)&v11);
  v3 = (uint64_t)v11;
  v11 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  IPC::MessageReceiverMap::removeMessageReceiver(*(_QWORD *)(*((_QWORD *)this + 2) + 208) + 152, 0x99u, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 1896));
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

BOOL WTF::RetainPtr<WKWebView>::operator BOOL(_QWORD *a1)
{
  return *a1 != 0;
}

void WebKit::PlaybackSessionManagerProxy::invalidate(WebKit::PlaybackSessionManagerProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  v3 = *((_QWORD *)this + 8);
  v4 = *((_QWORD *)this + 9);
  v21[0] = "VideoPresentationManagerProxy";
  v21[1] = 30;
  v21[2] = "invalidate";
  v21[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v21);
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      CFRetain(*(CFTypeRef *)(v6 - 8));
      v7 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
      if (v7)
        v8 = v7 - 16;
      else
        v8 = 0;
      IPC::MessageReceiverMap::removeMessageReceiver(*(_QWORD *)(v6 + 192) + 152, 0x30u, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 1896));
      v10 = (unsigned int *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, v9);
        }
      }
      CFRelease(*(CFTypeRef *)(v6 - 8));
    }
  }
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  v14 = *((_QWORD *)this + 7);
  if (v14)
  {
    *((_QWORD *)this + 7) = 0;
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
  if (v13)
  {
    v15 = *(unsigned int *)(v13 - 4);
    v16 = v13 + 24 * v15;
    if (*(_DWORD *)(v13 - 12))
    {
      v17 = v13;
      if ((_DWORD)v15)
      {
        v18 = 24 * v15;
        v17 = v13;
        while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
        {
          v17 += 24;
          v18 -= 24;
          if (!v18)
          {
            v17 = v16;
            goto LABEL_22;
          }
        }
      }
      goto LABEL_22;
    }
    v17 = v13 + 24 * v15;
  }
  else
  {
    v17 = 0;
    LODWORD(v15) = 0;
  }
  v16 = v13 + 24 * v15;
  if (v13)
  {
LABEL_22:
    v19 = v13 + 24 * *(unsigned int *)(v13 - 4);
    goto LABEL_27;
  }
  v19 = 0;
LABEL_27:
  while (v17 != v19)
  {
    WebCore::PlaybackSessionInterfaceAVKit::invalidate(*(WebCore::PlaybackSessionInterfaceAVKit **)(v17 + 16));
    v20 = v17 + 24;
    v17 = v16;
    if (v20 != v16)
    {
      v17 = v20;
      while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
      {
        v17 += 24;
        if (v17 == v16)
        {
          v17 = v16;
          break;
        }
      }
    }
  }
  if (v13)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v13, a2);
}

void sub_196D299C4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (v2)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v2, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy(WebKit::WebPaymentCoordinatorProxy *this)
{
  WTF *v1;
  void *v2;

  WebKit::WebPaymentCoordinatorProxy::~WebPaymentCoordinatorProxy(this);
  WTF::fastFree(v1, v2);
}

{
  CFTypeRef v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef cf;

  *(_QWORD *)this = off_1E34B7608;
  *((_QWORD *)this + 2) = &unk_1E34B7688;
  *((_QWORD *)this + 3) = &unk_1E34B76D8;
  if (*((unsigned __int16 *)this + 28) - 10 >= 0xFFFFFFF7)
  {
    cf = 0;
    WebKit::WebPaymentCoordinatorProxy::didReachFinalState((uint64_t)this, (WebCore::PaymentSessionError *)&cf);
    v2 = cf;
    cf = 0;
    if (v2)
      CFRelease(v2);
  }
  (*(void (**)(_QWORD, WebKit::WebPaymentCoordinatorProxy *, uint64_t))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4), this, 183);
  objc_destroyWeak((id *)this + 10);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v3);
}

void sub_196D29ACC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  objc_destroyWeak((id *)(v1 + 80));
  v4 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v5 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)v1 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v1 + 8), v3);
  _Unwind_Resume(a1);
}

unsigned __int8 *`non-virtual thunk to'WebKit::WebPageProxy::Internals::paymentCoordinatorRemoveMessageReceiver(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return IPC::MessageReceiverMap::removeMessageReceiver(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208) + 152, a3, *(_QWORD *)(a1 + 1888));
}

void WebKit::WebFullScreenManagerProxy::~WebFullScreenManagerProxy(WebKit::WebFullScreenManagerProxy *this)
{
  void *v2;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;

  *(_QWORD *)this = off_1E34D3720;
  IPC::MessageReceiverMap::removeMessageReceiver(*(_QWORD *)(*((_QWORD *)this + 3) + 208) + 152, 0xA6u, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 32) + 1896));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
  WebKit::WebFullScreenManagerProxy::callCloseCompletionHandlers(this, v2);
  v4 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, v3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v8);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebFullScreenManagerProxy::~WebFullScreenManagerProxy(this);
  if (*((_DWORD *)v1 + 4))
  {
    *((_OWORD *)v1 + 3) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    *((_OWORD *)v1 + 2) = 0u;
    *(_OWORD *)v1 = 0u;
  }
  else
  {
    WTF::fastFree(v1, v2);
  }
}

void `non-virtual thunk to'WebKit::PageClientImpl::closeFullScreenManager(id *this)
{
  WebKit::PageClientImpl::closeFullScreenManager(this - 4);
}

void WebKit::PageClientImpl::closeFullScreenManager(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "closeFullScreenWindowController");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196D29C3C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebFullScreenManagerProxy::callCloseCompletionHandlers(WebKit::WebFullScreenManagerProxy *this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  int v9;
  int v10;

  v2 = (_QWORD *)*((_QWORD *)this + 6);
  v8 = v2;
  v4 = *((_DWORD *)this + 14);
  v3 = *((unsigned int *)this + 15);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v9 = v4;
  v10 = v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    do
    {
      v6 = *v2;
      *v2++ = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, a2);
}

unsigned __int8 *WebKit::DrawingAreaProxy::stopReceivingMessages(WebKit::DrawingAreaProxy *this, WebKit::WebProcessProxy *a2)
{
  unsigned __int8 *result;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;

  result = (unsigned __int8 *)(*(uint64_t (**)(WebKit::DrawingAreaProxy *))(*(_QWORD *)this + 40))(this);
  if (v5)
  {
    v6 = result;
    v7 = v5;
    v8 = (char *)a2 + 152;
    do
    {
      v9 = *v6++;
      result = IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v8, v9, *((_QWORD *)this + 3));
      --v7;
    }
    while (v7);
  }
  return result;
}

unsigned __int8 *IPC::MessageReceiverMap::removeMessageReceiver(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  unsigned __int8 *result;
  uint64_t v6;
  unsigned __int8 *v7;
  _QWORD v8[2];

  v4 = (uint64_t *)(a1 + 8);
  v8[0] = a2;
  v8[1] = a3;
  result = WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>>,std::pair<IPC::ReceiverName,unsigned long long>>((uint64_t *)(a1 + 8), (unsigned __int8 *)v8);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (unsigned __int8 *)(v6 + 24 * *(unsigned int *)(v6 - 4));
    if (v7 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v7 = 0;
  }
  if (v7 != result)
    return WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::remove(v4, result);
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::remove(uint64_t *a1, void *a2)
{
  unsigned __int8 *result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  *(_BYTE *)a2 = -2;
  result = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (unsigned __int8 *)WTF::fastFree((WTF *)result, a2);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>>,std::pair<IPC::ReceiverName,unsigned long long>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 *result;
  int v11;
  uint64_t v12;
  int v14;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::PairHash<IPC::ReceiverName,unsigned long long>::hash(a2);
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 1);
  v9 = v6 & v5;
  result = (unsigned __int8 *)(v2 + 24 * (v6 & v5));
  v11 = *result;
  v12 = *((_QWORD *)result + 1);
  if (v11 != v7 || v12 != v8)
  {
    v14 = 1;
    while (v11 != 255 || v12)
    {
      v9 = (v9 + v14) & v5;
      result = (unsigned __int8 *)(v2 + 24 * v9);
      v11 = *result;
      v12 = *((_QWORD *)result + 1);
      ++v14;
      if (v11 == v7 && v12 == v8)
        return result;
    }
    if (*a1)
      return (unsigned __int8 *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    else
      return 0;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 16 * v6);
    if (v7 == a2)
    {
      return *(_QWORD *)(result + 16 * v6 + 8);
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 16 * v6);
        ++v8;
        if (v7 == a2)
          return *(_QWORD *)(result + 16 * v6 + 8);
      }
      return 0;
    }
  }
  return result;
}

WebCore::DiagnosticLoggingKeys *WebKit::WebPageProxy::reportPageLoadResult(WebCore::DiagnosticLoggingKeys *this, const WebCore::ResourceError *a2)
{
  WebCore::DiagnosticLoggingKeys *v3;
  WTF::StringImpl *v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::DiagnosticLoggingKeys *Key;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore::DiagnosticLoggingKeys *v19;
  WebCore::DiagnosticLoggingKeys *v20;
  WebCore::DiagnosticLoggingKeys *v21;
  WebCore::DiagnosticLoggingKeys *v22;
  WebCore::DiagnosticLoggingKeys *v23;
  WebCore::DiagnosticLoggingKeys *v24;
  WebCore::DiagnosticLoggingKeys *v25;
  WebCore::DiagnosticLoggingKeys *v26;
  WebCore::DiagnosticLoggingKeys *v27;
  WebCore::DiagnosticLoggingKeys *v28;
  WebCore::DiagnosticLoggingKeys *v29;
  WebCore::DiagnosticLoggingKeys *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  uint64_t i;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38[3];
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;

  v3 = this;
  v63 = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE72D43 & 1) == 0)
  {
    LODWORD(v38[0]) = 0;
    v38[1] = (WTF::StringImpl *)0x4000000000000000;
    v19 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::canceledLessThan2SecondsKey(this);
    v39 = 0;
    v40 = 0x4014000000000000;
    v20 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::canceledLessThan5SecondsKey(v19);
    v41 = 0;
    v42 = 0x4034000000000000;
    v21 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::canceledLessThan20SecondsKey(v20);
    v43 = 0;
    v44 = 0x7FF0000000000000;
    v22 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::canceledMoreThan20SecondsKey(v21);
    v45 = 1;
    v46 = 0x4000000000000000;
    v23 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::failedLessThan2SecondsKey(v22);
    v47 = 1;
    v48 = 0x4014000000000000;
    v24 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::failedLessThan5SecondsKey(v23);
    v49 = 1;
    v50 = 0x4034000000000000;
    v25 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::failedLessThan20SecondsKey(v24);
    v51 = 1;
    v52 = 0x7FF0000000000000;
    v26 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::failedMoreThan20SecondsKey(v25);
    v53 = 2;
    v54 = 0x4000000000000000;
    v27 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::succeededLessThan2SecondsKey(v26);
    v55 = 2;
    v56 = 0x4014000000000000;
    v28 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::succeededLessThan5SecondsKey(v27);
    v57 = 2;
    v58 = 0x4034000000000000;
    v29 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::succeededLessThan20SecondsKey(v28);
    v59 = 2;
    v60 = 0x7FF0000000000000;
    v30 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::succeededMoreThan20SecondsKey(v29);
    v61 = 3;
    v62 = 0x7FF0000000000000;
    WebCore::DiagnosticLoggingKeys::timedOutKey(v30);
    qword_1ECE72D70 = 0;
    *(_QWORD *)&dword_1ECE72D78 = 0;
    v31 = WTF::fastMalloc((WTF *)0x138);
    v33 = 0;
    dword_1ECE72D78 = 13;
    qword_1ECE72D70 = v31;
    v34 = dword_1ECE72D7C;
    do
    {
      *(_OWORD *)(v31 + 24 * v34) = *(_OWORD *)&v38[v33];
      v35 = v38[v33 + 2];
      if (v35)
        *(_DWORD *)v35 += 2;
      *(_QWORD *)(v31 + 24 * v34++ + 16) = v35;
      v33 += 3;
    }
    while (v33 != 39);
    dword_1ECE72D7C = v34;
    for (i = 38; i != -1; i -= 3)
    {
      this = v38[i];
      v38[i] = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WebCore::DiagnosticLoggingKeys *)WTF::StringImpl::destroy(this, v32);
        else
          *(_DWORD *)this -= 2;
      }
    }
    byte_1ECE72D43 = 1;
  }
  if (*(_BYTE *)(*((_QWORD *)v3 + 4) + 936))
  {
    this = (WebCore::DiagnosticLoggingKeys *)WTF::MonotonicTime::now(this);
    v6 = *((_QWORD *)v3 + 4);
    if (*(_BYTE *)(v6 + 936))
    {
      v7 = v5;
      v8 = *(double *)(v6 + 928);
      *(_BYTE *)(v6 + 936) = 0;
      v9 = *((unsigned __int8 *)a2 + 60);
      if (v9 == 4)
      {
        v10 = 3;
      }
      else if (v9 == 3)
      {
        v10 = 0;
      }
      else if (*((_BYTE *)a2 + 60)
             || (this = (WebCore::DiagnosticLoggingKeys *)MEMORY[0x19AEB7BFC](a2), *((_DWORD *)a2 + 14)))
      {
        v10 = 1;
      }
      else
      {
        v10 = 2;
      }
      if (!dword_1ECE72D7C)
        return this;
      a2 = (const WebCore::ResourceError *)(qword_1ECE72D70 + 16);
      v11 = 24 * dword_1ECE72D7C;
      while (v10 != *((_DWORD *)a2 - 4) || v7 - v8 >= *((double *)a2 - 1))
      {
        a2 = (const WebCore::ResourceError *)((char *)a2 + 24);
        v11 -= 24;
        if (!v11)
          return this;
      }
      WebCore::DiagnosticLoggingKeys::telemetryPageLoadKey(this);
      v6 = *(_QWORD *)(*((_QWORD *)v3 + 33) + 24);
      if ((v6 & 0x8000000000000000) == 0)
        goto LABEL_19;
    }
    else
    {
      __break(1u);
    }
    if (v6 != -1)
    {
LABEL_21:
      v13 = v38[0];
      v38[0] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v4);
        else
          *(_DWORD *)v13 -= 2;
      }
      Key = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::telemetryPageLoadKey(v13);
      WebCore::DiagnosticLoggingKeys::occurredKey(Key);
      v16 = *(_QWORD *)(*((_QWORD *)v3 + 33) + 24);
      if ((v16 & 0x8000000000000000) == 0 || v16 == -1)
      {
        v17 = *((_QWORD *)v3 + 16);
        if (v17)
          (*(void (**)(uint64_t, WebCore::DiagnosticLoggingKeys *, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, v3, v38, &v37);
      }
      v18 = v37;
      v37 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v15);
        else
          *(_DWORD *)v18 -= 2;
      }
      this = v38[0];
      v38[0] = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (WebCore::DiagnosticLoggingKeys *)WTF::StringImpl::destroy(this, v15);
        else
          *(_DWORD *)this -= 2;
      }
      return this;
    }
LABEL_19:
    v12 = *((_QWORD *)v3 + 16);
    if (v12)
      (*(void (**)(uint64_t, WebCore::DiagnosticLoggingKeys *, WTF::StringImpl **, const WebCore::ResourceError *))(*(_QWORD *)v12 + 16))(v12, v3, v38, a2);
    goto LABEL_21;
  }
  return this;
}

uint64_t WebKit::WebPageProxy::closeOverlayedViews(WebKit::WebPageProxy *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v2)
    WTF::RefCounted<WebCore::ValidationBubble>::deref(v2);
  WebKit::WebPageProxy::endDataListSuggestions((uint64_t)this);
  WebKit::WebPageProxy::endColorPicker((uint64_t)this);
  return WebKit::WebPageProxy::endDateTimePicker((uint64_t)this);
}

uint64_t WebKit::WebPageProxy::endDataListSuggestions(uint64_t this)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(*(_QWORD *)(this + 32) + 2000);
  if (v1)
  {
    ++v1[2];
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 32))(v1);
    if (v1[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  return this;
}

uint64_t WebKit::WebPageProxy::endColorPicker(uint64_t this)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *(_QWORD *)(this + 32);
  v2 = *(_DWORD **)(v1 + 2048);
  *(_QWORD *)(v1 + 2048) = 0;
  if (v2)
  {
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    if (v2[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return this;
}

uint64_t WebKit::WebPageProxy::endDateTimePicker(uint64_t this)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(this + 808);
  if (v1)
  {
    ++v1[2];
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 16))(v1);
    if (v1[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  return this;
}

uint64_t WebKit::WebProcessProxy::didStartProvisionalLoadForMainFrame(WebKit::WebProcessProxy *this, const WTF::URL *a2)
{
  NSObject *v4;
  uint64_t v5;
  WTF **v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t buf[4];
  _BYTE v29[20];
  uint64_t *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 712))
  {
    __break(0xC471u);
    goto LABEL_55;
  }
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 17);
    if (v5)
      LODWORD(v5) = *(_DWORD *)(v5 + 108);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)v29 = this;
    *(_WORD *)&v29[8] = 1024;
    *(_DWORD *)&v29[10] = v5;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::didStartProvisionalLoadForMainFrame:", buf, 0x12u);
  }
  v6 = (WTF **)((char *)this + 696);
  if (!*((_BYTE *)this + 704)
    || (result = (uint64_t)*v6) != 0 && *(_DWORD *)(result + 4) && (result = MEMORY[0x19AEABBCC](), (result & 1) == 0))
  {
    result = WTF::URL::protocolIs();
    if ((result & 1) == 0)
    {
      if ((*((_BYTE *)a2 + 8) & 2) != 0
        || ((v9 = *(_QWORD *)(*((_QWORD *)this + 64) + 8)) != 0 ? (v10 = v9 - 16) : (v10 = 0),
            *(_BYTE *)(*(_QWORD *)(v10 + 48) + 88)))
      {
        WebCore::RegistrableDomain::RegistrableDomain(&v25, a2);
        v11 = *((_QWORD *)this + 94);
        if (!v11)
          goto LABEL_58;
        CFRetain(*(CFTypeRef *)(v11 + 8));
        if (!*((_BYTE *)this + 704))
          goto LABEL_24;
        if ((WTF::equal(*v6, v25, v12) & 1) != 0)
        {
LABEL_58:
          if (*((_BYTE *)this + 704))
          {
            v13 = v25;
            v25 = 0;
            v14 = *v6;
            *v6 = v13;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
              {
                WTF::StringImpl::destroy(v14, v8);
                if (!v11)
                {
LABEL_27:
                  result = (uint64_t)v25;
                  v25 = 0;
                  if (!result)
                    return result;
                  goto LABEL_28;
                }
              }
              else
              {
                *(_DWORD *)v14 -= 2;
                if (!v11)
                  goto LABEL_27;
              }
LABEL_26:
              CFRelease(*(CFTypeRef *)(v11 + 8));
              goto LABEL_27;
            }
LABEL_25:
            if (!v11)
              goto LABEL_27;
            goto LABEL_26;
          }
LABEL_24:
          v15 = v25;
          v25 = 0;
          *((_QWORD *)this + 87) = v15;
          *((_BYTE *)this + 704) = 1;
          goto LABEL_25;
        }
        if (*((_BYTE *)this + 872))
        {
          v16 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v11);
          v17 = (unsigned int *)(v16 + 16);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
          if (!*((_BYTE *)this + 704))
            goto LABEL_55;
          v19 = *(_QWORD *)(v11 + 24);
          v26 = *((_QWORD *)this + 22);
          v27 = v19;
          buf[0] = 1;
          *(_QWORD *)&v29[4] = &v27;
          *(_QWORD *)&v29[12] = (char *)this + 696;
          v30 = &v26;
          WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::TerminateRemoteWorkerContextConnectionWhenPossible>(v16, (uint64_t)buf, 0, 0);
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v17);
        }
        if (!*((_BYTE *)this + 952))
          goto LABEL_42;
        v20 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)v11);
        v21 = (unsigned int *)(v20 + 16);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 + 1, v21));
        if (*((_BYTE *)this + 704))
        {
          v23 = *(_QWORD *)(v11 + 24);
          v26 = *((_QWORD *)this + 22);
          v27 = v23;
          buf[0] = 2;
          *(_QWORD *)&v29[4] = &v27;
          *(_QWORD *)&v29[12] = (char *)this + 696;
          v30 = &v26;
          WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::TerminateRemoteWorkerContextConnectionWhenPossible>(v20, (uint64_t)buf, 0, 0);
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v21);
LABEL_42:
          if (*((_BYTE *)this + 704))
          {
            v24 = *v6;
            *v6 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v8);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
          else
          {
            *((_QWORD *)this + 87) = 0;
            *((_BYTE *)this + 704) = 1;
          }
          goto LABEL_26;
        }
LABEL_55:
        __break(1u);
      }
      if (!*((_BYTE *)this + 704))
      {
        *((_QWORD *)this + 87) = 0;
        *((_BYTE *)this + 704) = 1;
        return result;
      }
      result = (uint64_t)*v6;
      *v6 = 0;
      if (result)
      {
LABEL_28:
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebProcessProxy::transformHandlesToObjects@<X0>(WebKit::WebProcessProxy *this@<X0>, API::Object *a2@<X1>, WebKit **a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  unsigned int *result;
  unsigned int v10;
  unsigned int v11;
  uint64_t (**v12)();
  WTF *v13;

  v12 = &off_1E34D7328;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v13 = (WTF *)v6;
  WebKit::UserData::transform(a2, (uint64_t)&v12, a3);
  result = (unsigned int *)v13;
  v13 = 0;
  if (result)
  {
    do
    {
      v10 = __ldaxr(result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, result));
    if (!v11)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  return result;
}

void WebKit::NavigationState::NavigationClient::didStartProvisionalNavigation(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, const WebCore::ResourceRequest *a3, Navigation *a4, API::Object *a5)
{
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v6 + 24));
      if (WeakRetained)
      {
        v10 = WeakRetained;
        v11 = *((_QWORD *)this + 1);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if ((*(_DWORD *)(v12 + 32) & 0x10) == 0)
            goto LABEL_15;
        }
        else
        {
          if ((MEMORY[0x20] & 0x10) == 0)
          {
LABEL_15:
            CFRelease(v10);
            return;
          }
          v12 = 0;
        }
        v13 = objc_loadWeakRetained((id *)(v12 + 16));
        if (a4)
          v14 = *((_QWORD *)a4 + 1);
        else
          v14 = 0;
        objc_msgSend(v10, "webView:didStartProvisionalNavigation:", v13, v14);
        if (v13)
          CFRelease(v13);
        goto LABEL_15;
      }
    }
  }
}

void sub_196D2AA04(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PageClientImpl::didStartProvisionalLoadForMainFrame(id *this)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "_didStartProvisionalLoadForMainFrame");
  v3 = objc_loadWeakRetained(this + 5);
  objc_msgSend(v3, "_didStartProvisionalLoadForMainFrame");
  if (v3)
    CFRelease(v3);
  objc_msgSend(WeakRetained, "_hidePasswordView");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196D2AA90(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;
  const void *v3;

  v3 = v2;
  if (v3)
    CFRelease(v3);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::FrameLoadState::didStartProvisionalLoad(WebKit::FrameLoadState *this, const WTF::URL *a2)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  *(_DWORD *)this = 0;
  WTF::String::operator=((WTF::StringImpl **)this + 6, a2);
  v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 72) = v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34D1038;
  v5[1] = a2;
  v7 = (uint64_t)v5;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 21, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl **WebKit::PageLoadState::didStartProvisionalLoad(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, WTF::StringImpl *a4)
{
  *(_BYTE *)(a1 + 192) = 0;
  WTF::String::operator=((WTF::StringImpl **)(a1 + 216), a3);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 360), (WTF::StringImpl *)(a1 + 264));
  return WTF::String::operator=((WTF::StringImpl **)(a1 + 264), a4);
}

uint64_t WebKit::WebPageProxy::callLoadCompletionHandlersIfNecessary(uint64_t this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = this;
  if (*(_BYTE *)(this + 1118))
  {
    v4 = *(_QWORD *)(this + 32);
    v5 = *(_QWORD *)(v4 + 2136);
    if (v5)
    {
      if ((a2 & 1) == 0)
      {
        *(_QWORD *)(v4 + 2136) = 0;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
    }
  }
  v6 = *(_QWORD *)(v3 + 32);
  v7 = *(_QWORD *)(v6 + 2144);
  if (v7)
  {
    if (a2)
    {
      v8 = *(_QWORD *)(v6 + 1896);
      v9 = 1;
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    *(_QWORD *)(v6 + 2144) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v8, v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return this;
}

void WebKit::WebPageProxy::notifyProcessPoolToPrewarm(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (this)
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
      v2 = v1 - 16;
    else
      v2 = 0;
  }
  else
  {
    v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(_QWORD *)(v2 + 88);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    WebKit::WebProcessPool::didReachGoodTimeToPrewarm((WebKit::WebProcessPool *)v2);
  CFRelease(*(CFTypeRef *)(v2 + 8));
}

void WebKit::WebProcessPool::didReachGoodTimeToPrewarm(WebKit::WebProcessPool *this)
{
  WebKit::WebProcessPool *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  NSObject *v9;
  int v10;
  WebKit::WebProcessPool *v11;
  uint64_t v12;

  v1 = this;
  v12 = *MEMORY[0x1E0C80C00];
  {
    this = WebKit::RestrictedOpenerDomainsController::RestrictedOpenerDomainsController((WebKit::RestrictedOpenerDomainsController *)&WebKit::RestrictedOpenerDomainsController::shared(void)::sharedInstance);
  }
  v2 = (_BYTE *)*((_QWORD *)v1 + 6);
  v3 = 89;
  if (!v2[90])
    v3 = 93;
  if (v2[v3])
  {
    v4 = 84;
    if (!v2[85])
      v4 = 86;
    if (v2[v4] && !v2[96])
    {
      v5 = WTF::MemoryPressureHandler::singleton(this);
      v6 = atomic_load((unsigned __int8 *)(v5 + 4));
      if (v6 != 2 && *(_BYTE *)(v5 + 7) == 0)
      {
        WebKit::WebProcessPool::prewarmProcess((unsigned int *)v1);
      }
      else
      {
        v8 = *((_QWORD *)v1 + 11);
        if (!v8 || !*(_QWORD *)(v8 + 8))
        {
          v9 = qword_1ECE71578;
          if (os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_DEFAULT))
          {
            v10 = 134217984;
            v11 = v1;
            _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - WebProcessPool::didReachGoodTimeToPrewarm: Not automatically prewarming a WebProcess due to memory pressure", (uint8_t *)&v10, 0xCu);
          }
        }
      }
    }
  }
}

uint64_t WebKit::WebPageProxy::resetSpeechSynthesizer(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(this + 2200))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 2176);
    *(_QWORD *)(v1 + 2176) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(v1 + 2168);
    *(_QWORD *)(v1 + 2168) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *(_QWORD *)(v1 + 2184);
    *(_QWORD *)(v1 + 2184) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(_QWORD *)(v1 + 2192);
    *(_QWORD *)(v1 + 2192) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 2152) + 48))(*(_QWORD *)(v1 + 2152));
  }
  return this;
}

uint64_t WebKit::WebPageProxy::setToolTip(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  char *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  result = WTF::equal(this[76], *a2, a3);
  if ((result & 1) == 0)
  {
    v6 = (char *)(this + 76);
    v7 = this[76];
    if (v7)
      *(_DWORD *)v7 += 2;
    v11 = v7;
    WTF::String::operator=(this + 76, (WTF::StringImpl *)a2);
    v8 = this[5];
    if (v8)
      v9 = *((_QWORD *)v8 + 1);
    else
      v9 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
    (*(void (**)(uint64_t, WTF::StringImpl **, char *))(*(_QWORD *)v9 + 176))(v9, &v11, v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
    result = (uint64_t)v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

BOOL WebKit::WebLoaderStrategy::havePerformedSecurityChecks(WebKit::WebLoaderStrategy *this, const WebCore::ResourceResponse *a2)
{
  return *(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared(this) + 22)
      && WebCore::ResourceResponseBase::source(a2) < 4;
}

uint64_t IPC::Decoder::decode<WebKit::WebPageCreationParameters>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebPageCreationParameters,void>::decode(a1, (WTF::StringImpl **)a2);
  if (!*(_BYTE *)(a2 + 1488))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WebKit::InjectedBundleClient::didCreatePage(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(result + 24);
  if (v3)
    return v3(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), *(_QWORD *)(result + 16));
  return result;
}

uint64_t WebKit::InjectedBundle::didCreatePage(WebKit::InjectedBundle *this, WebKit::WebPage *a2)
{
  return (*(uint64_t (**)(_QWORD, WebKit::InjectedBundle *, WebKit::WebPage *))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), this, a2);
}

uint64_t didCreatePage(const OpaqueWKBundle *a1, OpaqueWKBundlePage *a2, _QWORD *a3)
{
  void *v5;
  uint64_t result;

  v5 = (void *)a3[9];
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return objc_msgSend(v5, "webProcessPlugIn:didCreateBrowserContextController:", a3, *(_QWORD *)(-[OpaqueWKBundlePage _apiObject](a2, "_apiObject") + 8));
  return result;
}

_QWORD *WKBundlePageSetResourceLoadClient(void *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *Client;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = WTF::fastMalloc((WTF *)0x58);
  Client = (_QWORD *)WebKit::InjectedBundlePageResourceLoadClient::InjectedBundlePageResourceLoadClient(v4, a2);
  WebKit::WebPage::setInjectedBundleResourceLoadClient(v3, &Client);
  result = Client;
  Client = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

uint64_t WebKit::WebPage::setInjectedBundleResourceLoadClient(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;

  if (*(_QWORD *)(a1 + 368))
  {
    v3 = *a2;
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E34FA038;
  }
  result = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::InjectedBundlePageResourceLoadClient::InjectedBundlePageResourceLoadClient(uint64_t result, __int128 *a2)
{
  _OWORD *v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_OWORD *)(result + 8) = 0u;
  v2 = (_OWORD *)(result + 8);
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_QWORD *)result = off_1E34E9FB8;
  if (a2)
  {
    v3 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == 1)
    {
      *v2 = *a2;
      v4 = a2[1];
      v5 = a2[2];
      v6 = a2[4];
      *(_OWORD *)(result + 56) = a2[3];
      *(_OWORD *)(result + 72) = v6;
      *(_OWORD *)(result + 24) = v4;
      *(_OWORD *)(result + 40) = v5;
    }
    else if (v3 <= 0)
    {
      if (v3)
      {
        __break(1u);
      }
      else
      {
        v7 = *a2;
        v8 = a2[1];
        v9 = a2[3];
        *(_OWORD *)(result + 40) = a2[2];
        *(_OWORD *)(result + 56) = v9;
        *v2 = v7;
        *(_OWORD *)(result + 24) = v8;
      }
    }
  }
  return result;
}

uint64_t WKBundlePageSetPageLoaderClient(void *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = WTF::fastMalloc((WTF *)0x150);
  v6 = WebKit::InjectedBundlePageLoaderClient::InjectedBundlePageLoaderClient(v4, a2);
  WebKit::WebPage::setInjectedBundlePageLoaderClient(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPage::setInjectedBundlePageLoaderClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    v4 = *(_QWORD *)(a1 + 360);
    *(_QWORD *)(a1 + 360) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v3 = *(_QWORD *)(a1 + 360);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3);
    if ((_WORD)result)
    {
      if (*(_QWORD *)(a1 + 48))
        return WebCore::Page::addLayoutMilestones();
    }
  }
  else
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v6 = off_1E34F9F10;
    result = *(_QWORD *)(a1 + 360);
    *(_QWORD *)(a1 + 360) = v6;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageLoaderClient::layoutMilestones(WebKit::InjectedBundlePageLoaderClient *this)
{
  uint64_t (*v1)(_QWORD);

  v1 = (uint64_t (*)(_QWORD))*((_QWORD *)this + 40);
  if (v1)
    return v1(*((_QWORD *)this + 2)) & 0x1B7;
  if (*((_QWORD *)this + 13))
    return (*((_QWORD *)this + 12) != 0) | 2u;
  return *((_QWORD *)this + 12) != 0;
}

uint64_t WebKit::InjectedBundlePageLoaderClient::InjectedBundlePageLoaderClient(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = a1 + 8;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_QWORD *)a1 = off_1E34E9E90;
  API::Client<WKBundlePageLoaderClientBase>::initialize((_QWORD *)v3, a2);
  return a1;
}

_QWORD *API::Client<WKBundlePageLoaderClientBase>::initialize(_QWORD *result, _DWORD *a2)
{
  uint64_t v2;
  size_t v3;

  if (!a2)
  {
    result[40] = 0;
    *((_OWORD *)result + 18) = 0u;
    *((_OWORD *)result + 19) = 0u;
    *((_OWORD *)result + 16) = 0u;
    *((_OWORD *)result + 17) = 0u;
    *((_OWORD *)result + 14) = 0u;
    *((_OWORD *)result + 15) = 0u;
    *((_OWORD *)result + 12) = 0u;
    *((_OWORD *)result + 13) = 0u;
    *((_OWORD *)result + 10) = 0u;
    *((_OWORD *)result + 11) = 0u;
    *((_OWORD *)result + 8) = 0u;
    *((_OWORD *)result + 9) = 0u;
    *((_OWORD *)result + 6) = 0u;
    *((_OWORD *)result + 7) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    return result;
  }
  if (*a2 == 11)
  {
    v3 = 328;
    return memcpy(result, a2, v3);
  }
  result[40] = 0;
  *((_OWORD *)result + 18) = 0u;
  *((_OWORD *)result + 19) = 0u;
  *((_OWORD *)result + 16) = 0u;
  *((_OWORD *)result + 17) = 0u;
  *((_OWORD *)result + 14) = 0u;
  *((_OWORD *)result + 15) = 0u;
  *((_OWORD *)result + 12) = 0u;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *(_OWORD *)result = 0u;
  *((_OWORD *)result + 1) = 0u;
  v2 = *a2;
  if ((int)v2 <= 10)
  {
    if (v2 >= 0xC)
    {
      __break(1u);
      return result;
    }
    v3 = qword_1978D0CA8[v2];
    return memcpy(result, a2, v3);
  }
  return result;
}

uint64_t layoutMilestones(id *a1)
{
  id WeakRetained;
  uint64_t v3;

  WeakRetained = objc_loadWeakRetained(a1 + 313);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextControllerRenderingProgressEvents:", a1);
    if (!WeakRetained)
      return v3;
    goto LABEL_5;
  }
  v3 = 0;
  if (WeakRetained)
LABEL_5:
    CFRelease(WeakRetained);
  return v3;
}

void sub_196D2B73C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkStorageManager::importServiceWorkerRegistrations(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  uint64_t result;
  WTF::StringImpl *v9;
  _QWORD v10[3];
  _QWORD *v11;
  _BYTE v12[16];
  char v13;

  if (*(_BYTE *)(a1 + 72))
  {
    v12[0] = 0;
    v13 = 0;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>)>::operator()(a2, (uint64_t)v12);
    if (v13)
      return WTF::Vector<WebCore::ServiceWorkerContextData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v9);
  }
  else
  {
    v10[0] = a1;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
    v4 = *a2;
    *a2 = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v5 = &off_1E34C71E0;
    v5[1] = a1;
    v5[2] = a1;
    v5[3] = v4;
    v10[1] = 0;
    v10[2] = 0;
    v11 = v5;
    WTF::SuspendableWorkQueue::dispatch();
    v7 = v11;
    v11 = 0;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    return WebKit::NetworkStorageManager::syncLocalStorage(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v10, v6);
  }
  return result;
}

unsigned int *WebKit::NavigationState::createHistoryClient@<X0>(WebKit::NavigationState *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *result;
  uint64_t v4;

  result = WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::NavigationState::HistoryClient,WebKit::NavigationState&>((uint64_t)this, &v4);
  *a2 = v4;
  return result;
}

unsigned int *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::NavigationState::HistoryClient,WebKit::NavigationState&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34C7E48;
  result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v6 = *(unsigned int **)(a1 + 8);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v4[1] = v6;
  *a2 = v4;
  return result;
}

void sub_196D2B938(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::IconLoadingDelegate::setDelegate(uint64_t a1, void *a2)
{
  uint64_t result;

  objc_storeWeak((id *)(a1 + 8), a2);
  result = objc_opt_respondsToSelector();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 16) & 0xFE | result & 1;
  return result;
}

uint64_t _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  char v9[4];
  _BYTE v10[16];
  int v11;
  _BYTE v12[16];
  int v13;
  _BYTE v14[16];
  int v15;
  _BYTE v16[16];
  int v17;
  _BYTE v18[16];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WTF::Internal::appendHex();
  v19 = v3;
  WTF::Internal::appendHex();
  v17 = v4;
  WTF::Internal::appendHex();
  v15 = v5;
  WTF::Internal::appendHex();
  v13 = v6;
  memset(v9, 45, sizeof(v9));
  WTF::Internal::appendHex();
  v11 = v7;
  return _ZN3WTF18handleWithAdaptersIZNKS_17StringTypeAdapterINS_4UUIDEvE6lengthEvEUlDpOT_E_JNS_15HexNumberBufferEcS8_cS8_cS8_cS8_EEEDcOT_DpOT0_(a2, (uint64_t)v18, &v9[3], (uint64_t)v16, &v9[2], (uint64_t)v14, &v9[1], (uint64_t)v12, v9, (uint64_t)v10);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(char *__dst, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v13;

  v13 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v13, __dst);
  v11 = v13;
  if (v13)
    v11 = *(unsigned int *)(v13 + 4);
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(&__dst[v11], a3, a4, a5, a6);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(char *__dst, char *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  _QWORD v10[2];
  char **v11;
  char *v12;

  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      memcpy(__dst, a2, a3);
  }
  v10[0] = a4;
  v10[1] = a5;
  v11 = &v12;
  v12 = &__dst[a3];
  return _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)v10, &v11);
}

_BYTE *_ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_(uint64_t a1, _BYTE ***a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _BYTE v9[16];
  int v10;
  _BYTE v11[16];
  int v12;
  _BYTE v13[16];
  int v14;
  _BYTE v15[16];
  int v16;
  _BYTE v17[16];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  WTF::Internal::appendHex();
  v18 = v3;
  WTF::Internal::appendHex();
  v16 = v4;
  WTF::Internal::appendHex();
  v14 = v5;
  WTF::Internal::appendHex();
  v12 = v6;
  WTF::Internal::appendHex();
  v10 = v7;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(**a2, (uint64_t)v17, 45, (uint64_t)v15, 45, (uint64_t)v13, 45, (uint64_t)v11, 45, (uint64_t)v9);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(_BYTE *__dst, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  size_t v17;
  unsigned int *v18;
  _BYTE *v19;
  uint64_t v20;

  v18 = (unsigned int *)(a2 + 16);
  v17 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v17)
  {
    v19 = (char *)v18 - v17;
    if ((_DWORD)v17 == 1)
      *__dst = *v19;
    else
      memcpy(__dst, v19, v17);
  }
  v20 = *v18;
  __dst[v20] = a3;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(&__dst[v20 + 1], a4, a5, a6, a7, a8, a9, a10);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(_BYTE *__dst, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  size_t v15;
  unsigned int *v16;
  _BYTE *v17;
  uint64_t v18;

  v16 = (unsigned int *)(a2 + 16);
  v15 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v15)
  {
    v17 = (char *)v16 - v15;
    if ((_DWORD)v15 == 1)
      *__dst = *v17;
    else
      memcpy(__dst, v17, v15);
  }
  v18 = *v16;
  __dst[v18] = a3;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(&__dst[v18 + 1], a4, a5, a6, a7, a8);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(_BYTE *__dst, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  size_t v11;
  unsigned int *v12;
  _BYTE *v13;
  uint64_t v14;

  v12 = (unsigned int *)(a2 + 16);
  v11 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v11)
  {
    v13 = (char *)v12 - v11;
    if ((_DWORD)v11 == 1)
      *__dst = *v13;
    else
      memcpy(__dst, v13, v11);
  }
  v14 = *v12;
  __dst[v14] = a3;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(&__dst[v14 + 1], a4, a5, a6);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(_BYTE *__dst, uint64_t a2, char a3, uint64_t a4)
{
  size_t v7;
  unsigned int *v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *result;
  size_t v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE *v15;

  v8 = (unsigned int *)(a2 + 16);
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v9 = (char *)v8 - v7;
    if ((_DWORD)v7 == 1)
      *__dst = *v9;
    else
      memcpy(__dst, v9, v7);
  }
  v10 = *v8;
  __dst[v10] = a3;
  result = &__dst[v10 + 1];
  v14 = *(_DWORD *)(a4 + 16);
  v13 = a4 + 16;
  v12 = v14;
  if (v14)
  {
    v15 = (_BYTE *)(v13 - v12);
    if ((_DWORD)v12 == 1)
      *result = *v15;
    else
      return memcpy(result, v15, v12);
  }
  return result;
}

uint64_t _ZN3WTF18handleWithAdaptersIZNKS_17StringTypeAdapterINS_4UUIDEvE6lengthEvEUlDpOT_E_JNS_15HexNumberBufferEcS8_cS8_cS8_cS8_EEEDcOT_DpOT0_(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6, char *a7, uint64_t a8, char *a9, uint64_t a10)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = a2;
  v18 = *a3;
  v17 = a4;
  v16 = *a5;
  v15 = a6;
  v14 = *a7;
  v13 = a8;
  v12 = *a9;
  v11 = a10;
  return WTF::StringTypeAdapter<WTF::UUID,void>::length(void)const::{lambda(WTF::UUID &&)#1}::operator()<WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::HexNumberBuffer,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::HexNumberBuffer,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::HexNumberBuffer,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::HexNumberBuffer>(a1, (uint64_t)&v19, (uint64_t)&v18, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15, (uint64_t)&v14, (uint64_t)&v13, (uint64_t)&v12, (uint64_t)&v11);
}

uint64_t WTF::StringTypeAdapter<WTF::UUID,void>::length(void)const::{lambda(WTF::UUID &&)#1}::operator()<WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::HexNumberBuffer,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::HexNumberBuffer,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::HexNumberBuffer,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::HexNumberBuffer>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _BYTE v11[4];
  unsigned int v12;

  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(*(_DWORD *)(*(_QWORD *)a2 + 16), 1, *(unsigned int *)(*(_QWORD *)a4 + 16), 1, *(_DWORD *)(*(_QWORD *)a6 + 16), 1, *(_DWORD *)(*(_QWORD *)a8 + 16), 1, (uint64_t)v11, *(_DWORD *)(*(_QWORD *)a10 + 16));
  if (v11[0])
    return 0xFFFFFFFFLL;
  else
    return v12;
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10)
{
  uint64_t result;
  int v14;
  BOOL v15;
  int v16;
  _BYTE v17[4];
  int v18;

  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(a3, a4, a5, a6, a7, a8, a10, (uint64_t)v17);
  if (a2 < 0
    || v17[0]
    || (v14 = a2 + v18, __OFADD__(a2, v18))
    || a1 < 0
    || (v15 = __OFADD__(a1, v14), v16 = a1 + v14, v15))
  {
    *(_DWORD *)(a9 + 4) = 0;
    *(_BYTE *)a9 = 1;
  }
  else
  {
    *(_BYTE *)a9 = 0;
    *(_DWORD *)(a9 + 4) = v16;
  }
  return result;
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  int v8;
  BOOL v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;

  if ((a7 | a6) < 0)
    goto LABEL_29;
  v8 = a6 + a7;
  v9 = __OFADD__(a6, a7);
  if (a5 < 0 || v9)
    goto LABEL_29;
  v10 = __OFADD__(a5, v8);
  v11 = a5 + v8;
  v12 = v10;
  if (a4 < 0 || v12)
    goto LABEL_29;
  v10 = __OFADD__(a4, v11);
  v13 = a4 + v11;
  v14 = v10;
  if (a3 < 0 || v14)
    goto LABEL_29;
  v10 = __OFADD__(a3, v13);
  v15 = a3 + v13;
  v16 = v10;
  if (a2 < 0
    || v16
    || ((v10 = __OFADD__(a2, v15), v17 = a2 + v15, !v10) ? (v18 = 0) : (v18 = 1),
        (result & 0x80000000) != 0 || v18 || (v10 = __OFADD__((_DWORD)result, v17), v19 = result + v17, v10)))
  {
LABEL_29:
    *(_DWORD *)(a8 + 4) = 0;
    *(_BYTE *)a8 = 1;
  }
  else
  {
    *(_BYTE *)a8 = 0;
    *(_DWORD *)(a8 + 4) = v19;
  }
  return result;
}

uint64_t WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  __int128 v8;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)result;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v4 && (WTF *)result != v5)
      {
        v6 = 16 * v4;
        v7 = v5;
        do
        {
          v8 = *(_OWORD *)v7;
          v7 = (WTF *)((char *)v7 + 16);
          *(_OWORD *)result = v8;
          result += 16;
          v6 -= 16;
        }
        while (v6);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordSetInlineFillColor(WTF::ApproximateTime *result, int a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  unsigned __int8 *v4;
  IPC::StreamClientConnection *v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  void *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  WebKit::RemoteImageBufferProxy *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  unsigned int v47;
  WTF *v48;
  void *v49;
  int v50;
  int v51;
  NSObject *v52;
  const char *v53;
  uint64_t v54;
  _BYTE *v55;
  int v56;
  int *v57;
  WebKit::RemoteImageBufferProxy *v58;
  IPC::StreamClientConnection *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int8 v62;
  _BYTE buf[24];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v56 = a2;
  v57 = &v56;
  v2 = *((_QWORD *)result + 481);
  if (v2)
  {
    v3 = result;
    result = *(WTF::ApproximateTime **)(v2 + 8);
    if (result)
    {
      result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v59);
      if (v59)
      {
        v4 = (unsigned __int8 *)*((_QWORD *)v3 + 479);
        if (v4)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v4, *((_QWORD *)v3 + 480), &v58);
          v4 = (unsigned __int8 *)v58;
          if (v58)
            v4 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v58);
        }
        else
        {
          v58 = 0;
        }
        v5 = v59;
        v6 = *((_QWORD *)v3 + 478);
        WTF::ApproximateTime::now((WTF::ApproximateTime *)v4);
        v8 = v7 + 15.0;
        if (*((_QWORD *)v5 + 6) == v6)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, &v60, v8);
            if (!v62)
            {
              v50 = 15;
              goto LABEL_84;
            }
            *(_QWORD *)buf = v60;
            *(_QWORD *)&buf[8] = v61;
            *(_QWORD *)&buf[16] = 0;
            v9 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v10 = v9 >= v60;
            v11 = v9 - v60;
            if (v10)
            {
              if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v61)
              {
                *(_QWORD *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v60 + v11) = 849;
                *(_QWORD *)&buf[16] = v11 + 2;
              }
            }
            IPC::StreamConnectionEncoder::operator<<<int const&>(buf, v57);
            if (*(_QWORD *)&buf[8])
            {
              v17 = *(_QWORD *)&buf[16];
              v18 = *((_QWORD *)v5 + 8);
              v19 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v20 = *((_QWORD *)v5 + 7);
              if (v19 + 16 >= v20)
                v19 = 0;
              if (*(_QWORD *)&buf[16] <= 0x10uLL)
                v17 = 16;
              v21 = v19 + v17;
              if (v20 <= v21)
                v21 = 0;
              *((_QWORD *)v5 + 9) = v21;
              v22 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v21, v22));
              v24 = *((_DWORD *)v5 + 27);
              if (v23 == 0x80000000 || v24 != 0)
              {
                v29 = v24 + 1;
                *((_DWORD *)v5 + 27) = v29;
                if (v29 >= *((_DWORD *)v5 + 26))
                {
                  if (*((_BYTE *)v5 + 96))
                    MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
                  *((_DWORD *)v5 + 27) = 0;
                }
              }
              goto LABEL_29;
            }
            v30 = v62;
            if (v62)
            {
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v60, v61);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
              v51 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::SetInlineFillColor>(*(uint64_t *)buf, &v57, v6);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
              v50 = v51;
              if (v51)
                goto LABEL_84;
              goto LABEL_29;
            }
            __break(1u);
LABEL_90:
            if (!v14)
              break;
            v35 = 0;
            if (v16 > 0xFFFFFFFFFFFFFFFDLL)
            {
              v32 = 0;
            }
            else
            {
              v32 = 0;
              if (v16 + 2 <= v15)
              {
                v32 = v16 + 2;
LABEL_49:
                *(_WORD *)(v30 + v16) = 2822;
                goto LABEL_50;
              }
            }
LABEL_51:
            v36 = (v30 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v36 >= v30 + v32)
            {
              v37 = v36 - v30;
              v38 = 17;
              if (v37 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_83;
              v32 = v37 + 8;
              if (v37 + 8 > v35)
                goto LABEL_83;
              *(_QWORD *)(v30 + v37) = v6;
            }
            if (!v35)
            {
              v38 = 17;
              goto LABEL_83;
            }
            v39 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v40 = *((_QWORD *)v5 + 7);
            if (v39 + 16 >= v40)
              v39 = 0;
            if (v32 <= 0x10)
              v32 = 16;
            v41 = v39 + v32;
            if (v40 <= v41)
              v42 = 0;
            else
              v42 = v41;
            *((_QWORD *)v5 + 9) = v42;
            v43 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v42, v43));
            v45 = *((_DWORD *)v5 + 27);
            if (v44 == 0x80000000 || v45 != 0)
            {
              v47 = v45 + 1;
              *((_DWORD *)v5 + 27) = v47;
              if (v47 >= *((_DWORD *)v5 + 26))
              {
                if (*((_BYTE *)v5 + 96))
                  MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
                *((_DWORD *)v5 + 27) = 0;
              }
            }
            *((_QWORD *)v5 + 6) = v6;
          }
          v32 = 0;
LABEL_50:
          v35 = v15;
          goto LABEL_51;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, buf, v7 + 15.0);
        if (buf[16])
        {
          v30 = *(_QWORD *)buf;
          v15 = *(_QWORD *)&buf[8];
          v31 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v16 = v31 - *(_QWORD *)buf;
          v14 = v31 >= *(_QWORD *)buf;
          v32 = v31 - *(_QWORD *)buf + 2;
          v34 = v16 < 0xFFFFFFFFFFFFFFFELL && v32 <= *(_QWORD *)&buf[8];
          if (!v14 || !v34)
            goto LABEL_90;
          goto LABEL_49;
        }
        v38 = 15;
LABEL_83:
        v50 = v38;
LABEL_84:
        v52 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v53 = IPC::errorAsString(v50);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_SetInlineFillColor";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v53;
          _os_log_impl(&dword_196BCC000, v52, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v54 = *((_QWORD *)v3 + 481);
        if (v54)
        {
          v55 = *(_BYTE **)(v54 + 8);
          if (v55)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v55);
        }
LABEL_29:
        v26 = v58;
        v58 = 0;
        if (v26)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v26 + 1, v13);
        result = v59;
        v59 = 0;
        if (result)
        {
          do
          {
            v27 = __ldaxr((unsigned int *)result);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, (unsigned int *)result));
          if (!v28)
          {
            atomic_store(1u, (unsigned int *)result);
            IPC::StreamClientConnection::~StreamClientConnection(result);
            return (WTF::ApproximateTime *)WTF::fastFree(v48, v49);
          }
        }
      }
    }
  }
  return result;
}

WTF *IPC::ArgumentCoder<WebCore::Path,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF *result;
  void *v6;
  unint64_t v7;
  WTF *v9;
  int v10;
  char v11;
  char v12;
  _BYTE v13[56];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = IPC::VectorArgumentCoder<false,WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, (uint64_t)&v9);
  if (!v11)
  {
    v6 = (void *)*a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result && v7 != 0)
      result = (WTF *)(*(uint64_t (**)(WTF *, void *))(*(_QWORD *)result + 16))(result, v6);
  }
  if (*a1)
  {
    if (!v11)
      __break(1u);
    WebCore::Path::Path();
    result = (WTF *)std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v13);
    a3[72] = 1;
    if (v14 != -1)
      result = (WTF *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v14])(&v12, v13);
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
  if (v11)
  {
    result = v9;
    if (v9)
    {
      v9 = 0;
      v10 = 0;
      return (WTF *)WTF::fastFree(result, v6);
    }
  }
  return result;
}

void sub_196D2C77C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12, int a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  if (a12)
  {
    if (a9)
      WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::VectorArgumentCoder<false,WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  WTF *v16;
  uint64_t v17;
  WTF *result;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  WTF *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v22 = 0;
    v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v24 + 16))(v24, v6, v5);
        v23 = *a1;
        v22 = a1[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
    goto LABEL_28;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (unint64_t)(v9 + 1);
  if (!v6)
  {
    v22 = v5;
    v23 = 0;
LABEL_28:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
    {
      if (v22)
        result = (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v23);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v34 = 0;
  v35 = 0;
  if (v10 >= 0x4924)
  {
    while (1)
    {
      IPC::ArgumentCoder<WebCore::PathSegment,void>::decode(a1, (uint64_t)&v36);
      if (!v40)
      {
        a2 = (void *)*a1;
        v31 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v32 = a1[3];
        if (!v32 || v31 == 0)
          break;
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v32 + 16))(v32, a2);
        if (!v40)
          break;
      }
      if (HIDWORD(v35) == (_DWORD)v35)
      {
        WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PathSegment>((uint64_t)&v34, (unint64_t)&v36);
      }
      else
      {
        v25 = HIDWORD(v35) + 1;
        v26 = (char *)v34 + 56 * HIDWORD(v35);
        v27 = v38;
        v28 = v37;
        v29 = v36;
        *((_QWORD *)v26 + 6) = v39;
        *((_OWORD *)v26 + 1) = v28;
        *((_OWORD *)v26 + 2) = v27;
        *(_OWORD *)v26 = v29;
        HIDWORD(v35) = v25;
      }
      if (!--v10)
      {
        WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v34, HIDWORD(v35));
        *(_QWORD *)a3 = v34;
        v30 = v35;
        v34 = 0;
        v35 = 0;
        *(_QWORD *)(a3 + 8) = v30;
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (!v10)
    {
      v16 = 0;
      v17 = 0;
LABEL_15:
      v34 = 0;
      *(_QWORD *)a3 = v16;
      HIDWORD(v35) = 0;
      *(_QWORD *)(a3 + 8) = v17;
LABEL_16:
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_17;
    }
    LODWORD(v35) = 56 * (int)v10 / 0x38u;
    v34 = (WTF *)WTF::fastMalloc((WTF *)(56 * v10));
    while (1)
    {
      IPC::ArgumentCoder<WebCore::PathSegment,void>::decode(a1, (uint64_t)&v36);
      if (!v40)
      {
        a2 = (void *)*a1;
        v19 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v20 = a1[3];
        if (!v20 || v19 == 0)
          break;
        (*(void (**)(unint64_t, void *))(*(_QWORD *)v20 + 16))(v20, a2);
        if (!v40)
          break;
      }
      if (HIDWORD(v35) == (_DWORD)v35)
      {
        WTF::Vector<WebCore::PathSegment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PathSegment>((uint64_t)&v34, (unint64_t)&v36);
      }
      else
      {
        v11 = HIDWORD(v35) + 1;
        v12 = (char *)v34 + 56 * HIDWORD(v35);
        v13 = v38;
        v14 = v37;
        v15 = v36;
        *((_QWORD *)v12 + 6) = v39;
        *((_OWORD *)v12 + 1) = v14;
        *((_OWORD *)v12 + 2) = v13;
        *(_OWORD *)v12 = v15;
        HIDWORD(v35) = v11;
      }
      if (!--v10)
      {
        v16 = v34;
        v17 = v35;
        goto LABEL_15;
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
LABEL_17:
  result = v34;
  if (v34)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void sub_196D2CAC4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

unint64_t *IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::decode<IPC::Decoder,0ul,1ul>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *result;
  int v6;
  char v7;
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  __int128 v23;
  uint64_t v24;
  char v25;

  if (a2 == 2)
  {
    v8 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    v10 = v9;
    if (!v9)
      goto LABEL_18;
    while (1)
    {
      result = (unint64_t *)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
      v12 = v11;
      if (!v11)
      {
        v18 = *a1;
        v19 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v20 = a1[3];
        if (v20)
        {
          if (v19)
          {
            v22 = result;
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
            v12 = 0;
            result = v22;
          }
        }
      }
      if (!*a1)
        break;
      if (v10 && v12)
      {
        *(_QWORD *)a3 = v8;
        *(_QWORD *)(a3 + 8) = result;
        v6 = 2;
        goto LABEL_5;
      }
      __break(1u);
LABEL_18:
      v15 = *a1;
      v16 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      v17 = a1[3];
      if (v17 && v16)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
    }
    v21 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (unint64_t *)a1[3];
    if (result && v21)
      result = (unint64_t *)(*(uint64_t (**)(unint64_t *, _QWORD))(*result + 16))(result, 0);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
  }
  else if (a2 == 3)
  {
    result = (unint64_t *)IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::decode(a1, (uint64_t)&v23);
    if (v25)
    {
      *(_OWORD *)a3 = v23;
      *(_QWORD *)(a3 + 16) = v24;
      v6 = 3;
LABEL_5:
      *(_DWORD *)(a3 + 52) = v6;
      v7 = 1;
    }
    else
    {
      v13 = *a1;
      v14 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      result = (unint64_t *)a1[3];
      if (result)
      {
        if (v14)
          result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v13);
      }
      v7 = 0;
      *(_BYTE *)a3 = 0;
    }
    *(_BYTE *)(a3 + 56) = v7;
  }
  else
  {
    return IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul>(a1, a2, a3);
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *result;
  char v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (a2)
  {
    if (a2 != 1)
      return IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::decode<IPC::Decoder,0ul,1ul>(a1, a2, a3);
    result = (unint64_t *)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    if (v6)
    {
      if (*a1)
      {
        *(_QWORD *)a3 = result;
        *(_DWORD *)(a3 + 52) = 1;
LABEL_7:
        *(_BYTE *)(a3 + 56) = 1;
        return result;
      }
      goto LABEL_12;
    }
LABEL_11:
    v9 = *a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      if (v8)
      {
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v9);
        if (*a1)
          __break(1u);
      }
    }
    goto LABEL_12;
  }
  result = (unint64_t *)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  if (!v7)
    goto LABEL_11;
  if (*a1)
  {
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 52) = 0;
    goto LABEL_7;
  }
LABEL_12:
  v11 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  result = (unint64_t *)a1[3];
  if (result)
  {
    if (v11)
      result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 16))(result);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 56) = 0;
  return result;
}

uint64_t WebKit::WebPage::callVolatilityCompletionHandlers(WebKit::WebPage *this, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD *v10;
  int v11;
  int v12;

  v3 = (_QWORD *)*((_QWORD *)this + 221);
  v10 = v3;
  v4 = *((unsigned int *)this + 445);
  v11 = *((_DWORD *)this + 444);
  v12 = v4;
  v9[0] = 0;
  *((_QWORD *)this + 221) = 0;
  v9[1] = 0;
  *((_QWORD *)this + 222) = 0;
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, a2);
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    do
    {
      v7 = *v3;
      *v3++ = 0;
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v7 + 16))(v7, a2);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v5);
}

void WebKit::WebProcessProxy::~WebProcessProxy(WebKit::WebProcessProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  WebKit::WebPasteboardProxy *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  void *v57;
  void *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl **v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t i;
  uint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t j;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  WTF::StringImpl **v106;
  WTF::StringImpl **v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  _BYTE v112[12];
  _DWORD v113[3];
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E34D7000;
  *((_QWORD *)this + 3) = &unk_1E34D7128;
  *((_QWORD *)this + 4) = &unk_1E34D7180;
  if ((WebKit::isMainThreadOrCheckDisabled(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196D2D794);
  }
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 17);
    if (v3)
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    *(_DWORD *)v112 = 134218240;
    *(_QWORD *)&v112[4] = this;
    LOWORD(v113[0]) = 1024;
    *(_DWORD *)((char *)v113 + 2) = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::destructor:", v112, 0x12u);
  }
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    unk_1ECE73890 = 0u;
  }
  v4 = (WebKit::WebPasteboardProxy *)WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebProcessProxy>((uint64_t **)this);
  v5 = *((_QWORD *)this + 129);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = (uint64_t *)(v5 + 16 * v6);
    if (*(_DWORD *)(v5 - 12))
    {
      v8 = (uint64_t *)*((_QWORD *)this + 129);
      if ((_DWORD)v6)
      {
        v9 = 16 * v6;
        v8 = (uint64_t *)*((_QWORD *)this + 129);
        while ((unint64_t)(*v8 + 1) <= 1)
        {
          v8 += 2;
          v9 -= 16;
          if (!v9)
          {
            v8 = v7;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    v8 = (uint64_t *)(v5 + 16 * v6);
  }
  else
  {
    v8 = 0;
    v6 = 0;
  }
  v7 = (uint64_t *)(v5 + 16 * v6);
  if (v5)
  {
LABEL_15:
    v10 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    goto LABEL_20;
  }
  v10 = 0;
LABEL_20:
  while (v8 != v10)
  {
    v11 = v8 + 2;
    v4 = (WebKit::WebPasteboardProxy *)IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)this + 152, 0x8Du, *v8);
    v8 = v7;
    if (v11 != v7)
    {
      v8 = v11;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
  }
  if (*((_QWORD *)this + 130))
    v4 = (WebKit::WebPasteboardProxy *)IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)this + 19, 0x8Cu);
  {
    if (WebKit::WebProcessProxy::allProcessMap(void)::map)
    {
      v12 = *((_QWORD *)this + 22);
      v13 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 8);
      v14 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = *(_QWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map + 16 * v17);
      if (v18 != v12)
      {
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = *(_QWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map + 16 * v17);
          ++v19;
          if (v18 == v12)
            goto LABEL_37;
        }
        v17 = *(unsigned int *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 4);
      }
LABEL_37:
      if (v17 != *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 4))
      {
        v20 = (_QWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map + 16 * v17);
        v21 = v20[1];
        *v20 = -1;
        v20[1] = 0;
        if (v21)
        {
          v22 = (unsigned int *)(v21 + 48);
          if (!atomic_load(v22))
          {
            __break(0xC471u);
            JUMPOUT(0x196D2D7E0);
          }
          do
            v24 = __ldaxr(v22);
          while (__stlxr(v24 - 1, v22));
        }
        ++*(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 16);
        if (WebKit::WebProcessProxy::allProcessMap(void)::map)
          v25 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12) - 1;
        else
          v25 = -1;
        *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12) = v25;
        if (WebKit::WebProcessProxy::allProcessMap(void)::map)
        {
          v26 = *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 4);
          if (6 * *(_DWORD *)(WebKit::WebProcessProxy::allProcessMap(void)::map - 12) < v26 && v26 >= 9)
            v4 = (WebKit::WebPasteboardProxy *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CheckedRef<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v26 >> 1);
        }
      }
    }
  }
  else
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  WebKit::WebPasteboardProxy::singleton(v4);
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)&qword_1ECE737F8, this);
  v28 = (uint64_t *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  *(_QWORD *)v112 = v28;
  v29 = *((_DWORD *)this + 182);
  v30 = *((unsigned int *)this + 183);
  *((_QWORD *)this + 91) = 0;
  *(_DWORD *)&v112[8] = v29;
  v113[0] = v30;
  if ((_DWORD)v30)
  {
    v31 = 8 * v30;
    do
    {
      v32 = *v28;
      *v28++ = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 16))(v32, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      v31 -= 8;
    }
    while (v31);
  }
  *((_DWORD *)this + 164) = (*((_DWORD *)this + 164) & (*((int *)this + 164) >> 31)) - 1;
  WebKit::WebProcessProxy::platformDestroy(this);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v112, v33);
  WTF::MachSendRight::~MachSendRight((WebKit::WebProcessProxy *)((char *)this + 1136));
  v35 = (WTF::StringImpl *)*((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = *((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = 0;
  if (v36)
  {
    IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*(_QWORD *)(v36 + 16) + 152), 0xB9u);
    *(_QWORD *)v36 = &off_1E34B0558;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v36 + 8), v37);
    WTF::fastFree((WTF *)v36, v38);
  }
  std::unique_ptr<WebKit::WebLockRegistryProxy>::reset[abi:sn180100]((uint64_t *)this + 131, 0);
  v39 = (_QWORD *)*((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v39)
    std::default_delete<WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager>::operator()[abi:sn180100]((uint64_t)this + 1040, v39);
  v40 = *((_QWORD *)this + 129);
  if (v40)
  {
    v41 = *(unsigned int *)(v40 - 4);
    if ((_DWORD)v41)
    {
      v42 = (uint64_t *)(v40 + 8);
      do
      {
        if (*(v42 - 1) != -1)
        {
          v43 = *v42;
          *v42 = 0;
          if (v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        }
        v42 += 2;
        --v41;
      }
      while (v41);
    }
    WTF::fastFree((WTF *)(v40 - 16), v39);
  }
  v44 = *((_QWORD *)this + 127);
  *(_QWORD *)v44 = 0;
  if (!*(_BYTE *)(v44 + 16) && !*(_QWORD *)(v44 + 8))
    MEMORY[0x19AEB936C](v44, 0x1020C40545B2139);
  v45 = *((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  if (*((_BYTE *)this + 1000))
  {
    v46 = *((_QWORD *)this + 124);
    *((_QWORD *)this + 124) = 0;
    if (v46)
    {
      v47 = *(uint64_t **)v46;
      v48 = *(_QWORD *)(v46 + 8) - 1;
      *(_QWORD *)(v46 + 8) = v48;
      if (v47)
      {
        v49 = *v47;
        if (!*v47)
          goto LABEL_83;
        v50 = *(_BYTE *)(v46 + 16);
        *(_BYTE *)(v46 + 16) = 1;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 16))(v49, 0);
        *(_BYTE *)(v46 + 16) = v50;
        if (*(_QWORD *)v46)
          goto LABEL_83;
        v48 = *(_QWORD *)(v46 + 8);
      }
      if (!v48)
        MEMORY[0x19AEB936C](v46, 0x1020C40545B2139);
    }
  }
LABEL_83:
  if (!*((_BYTE *)this + 984))
    goto LABEL_93;
  v51 = *((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v51)
  {
    v52 = *(uint64_t **)v51;
    v53 = *(_QWORD *)(v51 + 8) - 1;
    *(_QWORD *)(v51 + 8) = v53;
    if (!v52)
      goto LABEL_89;
    v54 = *v52;
    if (*v52)
    {
      v55 = *(_BYTE *)(v51 + 16);
      *(_BYTE *)(v51 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 16))(v54, 0);
      *(_BYTE *)(v51 + 16) = v55;
      if (!*(_QWORD *)v51)
      {
        v53 = *(_QWORD *)(v51 + 8);
LABEL_89:
        if (!v53)
          MEMORY[0x19AEB936C](v51, 0x1020C40545B2139);
      }
    }
  }
  v56 = *((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v56)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v56 + 8), v39);
LABEL_93:
  std::__optional_destruct_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 880, v39);
  std::__optional_destruct_base<WebKit::WebProcessProxy::RemoteWorkerInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 800, v57);
  v59 = (unsigned int *)*((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v59)
  {
    v60 = v59 + 2;
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      atomic_store(1u, v59 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 8))(v59);
    }
  }
  v63 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v64)
    CFRelease(*(CFTypeRef *)(v64 + 8));
  v65 = *((_QWORD *)this + 93);
  *(_QWORD *)v65 = 0;
  if (!*(_BYTE *)(v65 + 16) && !*(_QWORD *)(v65 + 8))
    MEMORY[0x19AEB936C](v65, 0x1020C40545B2139);
  v66 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 720, v58);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 696, v67);
  v69 = *((_QWORD *)this + 86);
  if (v69)
  {
    v70 = *(unsigned int *)(v69 - 4);
    if ((_DWORD)v70)
    {
      v71 = (WTF::StringImpl **)*((_QWORD *)this + 86);
      do
      {
        v72 = *v71;
        if (*v71 != (WTF::StringImpl *)-1)
        {
          *v71 = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 == 2)
              WTF::StringImpl::destroy(v72, v68);
            else
              *(_DWORD *)v72 -= 2;
          }
        }
        v71 += 2;
        --v70;
      }
      while (v70);
    }
    WTF::fastFree((WTF *)(v69 - 16), v68);
  }
  v73 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v73)
  {
    v74 = *(uint64_t **)v73;
    v75 = *(_QWORD *)(v73 + 8) - 1;
    *(_QWORD *)(v73 + 8) = v75;
    if (v74)
    {
      v76 = *v74;
      if (!*v74)
        goto LABEL_124;
      v77 = *(_BYTE *)(v73 + 16);
      *(_BYTE *)(v73 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v76 + 16))(v76, 0);
      *(_BYTE *)(v73 + 16) = v77;
      if (*(_QWORD *)v73)
        goto LABEL_124;
      v75 = *(_QWORD *)(v73 + 8);
    }
    if (!v75)
      MEMORY[0x19AEB936C](v73, 0x1020C40545B2139);
  }
LABEL_124:
  v78 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (!v78)
    goto LABEL_131;
  v79 = *(uint64_t **)v78;
  v80 = *(_QWORD *)(v78 + 8) - 1;
  *(_QWORD *)(v78 + 8) = v80;
  if (v79)
  {
    v81 = *v79;
    if (!*v79)
      goto LABEL_131;
    v82 = *(_BYTE *)(v78 + 16);
    *(_BYTE *)(v78 + 16) = 1;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 16))(v81, 0);
    *(_BYTE *)(v78 + 16) = v82;
    if (*(_QWORD *)v78)
      goto LABEL_131;
    v80 = *(_QWORD *)(v78 + 8);
  }
  if (!v80)
    MEMORY[0x19AEB936C](v78, 0x1020C40545B2139);
LABEL_131:
  v83 = *((_QWORD *)this + 80);
  if (v83)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v83, v68);
  v84 = *((_QWORD *)this + 78);
  if (v84)
  {
    v85 = *(unsigned int *)(v84 - 4);
    if ((_DWORD)v85)
    {
      for (i = 0; i != v85; ++i)
      {
        v87 = v84 + 16 * i;
        v88 = *(unsigned int **)v87;
        if (*(_QWORD *)v87 != -1)
        {
          v89 = *(_QWORD *)(v87 + 8);
          if (v89)
          {
            WTF::fastFree((WTF *)(v89 - 16), v68);
            v88 = *(unsigned int **)v87;
          }
          *(_QWORD *)v87 = 0;
          if (v88)
          {
            do
            {
              v90 = __ldaxr(v88);
              v91 = v90 - 1;
            }
            while (__stlxr(v91, v88));
            if (!v91)
            {
              atomic_store(1u, v88);
              WTF::fastFree((WTF *)v88, v68);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v84 - 16), v68);
  }
  v92 = *((_QWORD *)this + 77);
  if (v92)
  {
    v93 = *(unsigned int *)(v92 - 4);
    if ((_DWORD)v93)
    {
      v94 = (uint64_t *)(v92 + 8);
      do
      {
        if (*(v94 - 1) != -1 && *v94)
          WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::deallocateTable(*v94, v68);
        v94 += 2;
        --v93;
      }
      while (v93);
    }
    WTF::fastFree((WTF *)(v92 - 16), v68);
  }
  v95 = *((_QWORD *)this + 76);
  if (v95)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v95, v68);
  v96 = *((_QWORD *)this + 74);
  if (v96)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v96, v68);
  v97 = *((_QWORD *)this + 72);
  if (v97)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v97, v68);
  v98 = *((_QWORD *)this + 70);
  if (v98)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v98, v68);
  v99 = *((_QWORD *)this + 69);
  if (v99)
  {
    v100 = *(unsigned int *)(v99 - 4);
    if ((_DWORD)v100)
    {
      for (j = 0; j != v100; ++j)
      {
        if (*(_QWORD *)(v99 + 16 * j) != -1)
        {
          v102 = v99 + 16 * j;
          v103 = *(unsigned int **)(v102 + 8);
          *(_QWORD *)(v102 + 8) = 0;
          if (v103)
          {
            do
            {
              v104 = __ldaxr(v103);
              v105 = v104 - 1;
            }
            while (__stlxr(v105, v103));
            if (!v105)
            {
              atomic_store(1u, v103);
              WTF::fastFree((WTF *)v103, v68);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v99 - 16), v68);
  }
  v106 = (WTF::StringImpl **)*((_QWORD *)this + 68);
  if (v106)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v106, v68);
  v107 = (WTF::StringImpl **)*((_QWORD *)this + 67);
  if (v107)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v107, v68);
  v108 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v108)
    CFRelease(*(CFTypeRef *)(v108 + 8));
  v109 = (unsigned int *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v109)
  {
    do
    {
      v110 = __ldaxr(v109);
      v111 = v110 - 1;
    }
    while (__stlxr(v111, v109));
    if (!v111)
    {
      atomic_store(1u, v109);
      WTF::fastFree((WTF *)v109, v68);
    }
  }
  WebKit::BackgroundProcessResponsivenessTimer::~BackgroundProcessResponsivenessTimer((WebKit::WebProcessProxy *)((char *)this + 416));
  WebKit::AuxiliaryProcessProxy::~AuxiliaryProcessProxy(this);
}

void WebKit::BackgroundProcessResponsivenessTimer::~BackgroundProcessResponsivenessTimer(WebKit::BackgroundProcessResponsivenessTimer *this)
{
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *((_QWORD *)this + 6) = off_1E34ABE00;
  v2 = (WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 48);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)v2 + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::RunLoop::TimerBase::~TimerBase(v2);
  *((_QWORD *)this + 2) = off_1E34ABE00;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 16));
  v6 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
}

void WebKit::UserMediaCaptureManagerProxy::~UserMediaCaptureManagerProxy(WebKit::UserMediaCaptureManagerProxy *this)
{
  void *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E34DC2F8;
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3), 145);
  v3 = (_QWORD *)*((_QWORD *)this + 9);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, v2);
  v4 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  WebCore::OrientationNotifier::~OrientationNotifier((WebKit::UserMediaCaptureManagerProxy *)((char *)this + 32), v2);
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 2);
  if (v10)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v10, v8);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v8);
}

{
  WTF *v1;
  void *v2;

  WebKit::UserMediaCaptureManagerProxy::~UserMediaCaptureManagerProxy(this);
  WTF::fastFree(v1, v2);
}

unsigned int *IPC::MessageReceiverMap::removeMessageReceiver(uint64_t *a1, unsigned __int8 a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned __int8 v5;

  v5 = a2;
  result = (unsigned int *)WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<IPC::ReceiverName>>,IPC::ReceiverName>(a1, &v5);
  if (*a1)
  {
    v4 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((unsigned int *)v4 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v4 = 0;
  }
  if ((unsigned int *)v4 != result)
    return WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::remove(a1, result);
  return result;
}

unsigned int *WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::remove(uint64_t *a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  *(_BYTE *)a2 = -2;
  result = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return (unsigned int *)WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<IPC::ReceiverName>>,IPC::ReceiverName>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = (v6 ^ HIWORD(v6)) & v3;
  v8 = *(unsigned __int8 *)(v2 + 16 * v7);
  if (v8 == v4)
    return v2 + 16 * v7;
  v9 = 1;
  while (v8 != 255)
  {
    v7 = ((_DWORD)v7 + v9) & v3;
    v8 = *(unsigned __int8 *)(v2 + 16 * v7);
    ++v9;
    if (v8 == v4)
      return v2 + 16 * v7;
  }
  return v2 + 16 * *(unsigned int *)(v2 - 4);
}

void WebKit::UIProxyForCapture::~UIProxyForCapture(WebKit::UIProxyForCapture *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WebKit::UIProxyForCapture *v5;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = this;
      WTF::fastFree((WTF *)v2, a2);
      this = v5;
    }
  }
  WTF::fastFree(this, a2);
}

{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

unsigned int *WebKit::UIProxyForCapture::removeMessageReceiver(uint64_t a1, unsigned __int8 a2)
{
  return IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 152), a2);
}

void WebKit::ProcessThrottler::~ProcessThrottler(WebKit::ProcessThrottler *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  WTF *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  WebKit::ProcessThrottler::invalidateAllActivities(this);
  v3 = *((_QWORD *)this + 19);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, v2);
  v4 = *((_QWORD *)this + 17);
  if (v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v2);
  *((_QWORD *)this + 13) = off_1E34ABE00;
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::ProcessThrottler *)((char *)this + 104));
  *((_QWORD *)this + 9) = off_1E34ABE00;
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::ProcessThrottler *)((char *)this + 72));
  *((_QWORD *)this + 5) = off_1E34ABE00;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::ProcessThrottler *)((char *)this + 40));
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 8), v8);
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 8), v8);
  v11 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    do
    {
      v17 = __ldaxr(v11);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v11));
    if (!v18)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v8);
    }
  }
  v12 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    v13 = *((_QWORD *)v12 + 1);
    if (v13)
      WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::deallocateTable(v13, v8);
    if (*(_DWORD *)v12)
    {
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
    else
    {
      WTF::fastFree(v12, v8);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v14 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v8);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void WebKit::ProcessThrottler::invalidateAllActivities(WebKit::ProcessThrottler *this)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[14];
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 136);
    if (v4)
      v5 = *(_DWORD *)(v4 + 108);
    else
      v5 = 0;
    v9 = 134218752;
    *(_QWORD *)v10 = this;
    *(_WORD *)&v10[8] = 1024;
    *(_DWORD *)&v10[10] = v5;
    v11 = 1024;
    v12 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 136, v3);
    v13 = 1024;
    v14 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 152, v6);
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::invalidateAllActivities: BEGIN (foregroundActivityCount: %u, backgroundActivityCount: %u)", (uint8_t *)&v9, 0x1Eu);
  }
  while (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 17))
  {
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 17, &v9);
    WebKit::ProcessThrottlerActivity::invalidate(*(_QWORD *)(**(_QWORD **)&v10[4] + 8), 1);
  }
  while (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 19))
  {
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 19, &v9);
    WebKit::ProcessThrottlerActivity::invalidate(*(_QWORD *)(**(_QWORD **)&v10[4] + 8), 1);
  }
  v7 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 136);
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    v9 = 134218240;
    *(_QWORD *)v10 = this;
    *(_WORD *)&v10[8] = 1024;
    *(_DWORD *)&v10[10] = v8;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::invalidateAllActivities: END", (uint8_t *)&v9, 0x12u);
  }
}

uint64_t WebKit::WebProcessProxy::platformDestroy(WebKit::WebProcessProxy *this)
{
  -[WKMouseDeviceObserver stop](+[WKMouseDeviceObserver sharedInstance](WKMouseDeviceObserver, "sharedInstance"), "stop");
  return -[WKStylusDeviceObserver stop](+[WKStylusDeviceObserver sharedInstance](WKStylusDeviceObserver, "sharedInstance"), "stop");
}

void WebKit::WebProcessProxy::removeWebPage(uint64_t a1, WebKit::WebPageProxy *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  unsigned int *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  CFTypeRef *v30;
  CFTypeRef *v31;
  CFTypeRef *v32;
  _BYTE v33[12];
  __int16 v34;
  int v35;
  __int16 v36;
  WebKit::WebPageProxy *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 136);
    if (v7)
      LODWORD(v7) = *(_DWORD *)(v7 + 108);
    v8 = *((_QWORD *)a2 + 4);
    v9 = *(_QWORD *)(v8 + 744);
    v10 = *(_QWORD *)(v8 + 1896);
    *(_DWORD *)v33 = 134219008;
    *(_QWORD *)&v33[4] = a1;
    v34 = 1024;
    v35 = v7;
    v36 = 2048;
    v37 = a2;
    v38 = 2048;
    v39 = v9;
    v40 = 2048;
    v41 = v10;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::removeWebPage: webPage=%p, pageProxyID=%llu, webPageID=%llu", v33, 0x30u);
  }
  v11 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 552), *(_QWORD *)(*((_QWORD *)a2 + 4) + 744));
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::take((uint64_t *)v33, (uint64_t *)(a1 + 552), v11);
  v13 = *(unsigned int **)v33;
  if (*(_QWORD *)v33)
  {
    v14 = *(_QWORD *)(*(_QWORD *)v33 + 8);
    v15 = v14 == 0;
    if (v14)
    {
      v16 = v14 - 16;
      CFRetain(*(CFTypeRef *)(v14 - 8));
    }
    else
    {
      v16 = 0;
    }
    *(_QWORD *)v33 = 0;
    do
    {
      v17 = __ldaxr(v13);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v13));
    if (!v18)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
  }
  else
  {
    v16 = 0;
    v15 = 1;
  }
  {
    v19 = WebKit::WebProcessProxy::globalPageMap(void)::pageMap;
  }
  else
  {
    v19 = 0;
    WebKit::WebProcessProxy::globalPageMap(void)::pageMap = 0;
  }
  v20 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkSession::CachedNetworkResourceLoader>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v19, *(_QWORD *)(*((_QWORD *)a2 + 4) + 744));
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::take((uint64_t *)v33, &WebKit::WebProcessProxy::globalPageMap(void)::pageMap, v20);
  v22 = *(unsigned int **)v33;
  if (*(_QWORD *)v33 && (v23 = *(_QWORD *)(*(_QWORD *)v33 + 8)) != 0)
  {
    v24 = v23 - 16;
    CFRetain(*(CFTypeRef *)(v23 - 8));
    v25 = 0;
  }
  else
  {
    v24 = 0;
    v25 = 1;
  }
  if (!v15)
    CFRelease(*(CFTypeRef *)(v16 + 8));
  *(_QWORD *)v33 = 0;
  if (v22)
  {
    do
    {
      v26 = __ldaxr(v22);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v22));
    if (!v27)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v21);
    }
  }
  WebKit::WebProcessProxy::reportProcessDisassociatedWithPageIfNecessary(a1, *(_QWORD *)(*((_QWORD *)a2 + 4) + 744));
  if (a3)
  {
    v28 = *(_QWORD *)(a1 + 512);
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 8);
      if (v29)
        v30 = (CFTypeRef *)(v29 - 16);
      else
        v30 = 0;
    }
    else
    {
      v30 = 0;
    }
    CFRetain(v30[1]);
    v31 = (CFTypeRef *)*((_QWORD *)a2 + 33);
    CFRetain(v31[1]);
    WebKit::WebProcessPool::pageEndUsingWebsiteDataStore((WebKit::WebProcessPool *)v30, a2, (WebKit::WebsiteDataStore *)v31);
    CFRelease(v31[1]);
    CFRelease(v30[1]);
  }
  v32 = (CFTypeRef *)*((_QWORD *)a2 + 32);
  CFRetain(v32[1]);
  WebKit::WebProcessProxy::removeVisitedLinkStoreUser((uint64_t *)a1, (WebKit::VisitedLinkStore *)v32, *(_QWORD *)(*((_QWORD *)a2 + 4) + 744));
  CFRelease(v32[1]);
  WebKit::WebProcessProxy::updateRegistrationWithDataStore((WebKit::WebProcessProxy *)a1);
  WebKit::WebProcessProxy::updateAudibleMediaAssertions((WebKit::WebProcessProxy *)a1);
  WebKit::WebProcessProxy::updateMediaStreamingActivity((WebKit::WebProcessProxy *)a1);
  WebKit::BackgroundProcessResponsivenessTimer::updateState((WebKit::BackgroundProcessResponsivenessTimer *)(a1 + 416));
  WebKit::WebsiteDataStore::updateBlobRegistryPartitioningState(*(WebKit::WebsiteDataStore **)(a1 + 752));
  WebKit::WebProcessProxy::maybeShutDown((WebKit::WebProcessProxy *)a1);
  if ((v25 & 1) == 0)
    CFRelease(*(CFTypeRef *)(v24 + 8));
}

_QWORD *WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(_QWORD *a1, _QWORD **a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  *a1 = a2;
  a1[1] = v4;
  a1[2] = v5;
  v6 = *a2;
  if (*a2)
  {
    v7 = *((unsigned int *)v6 - 1);
    v8 = &v6[v7];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  a1[3] = v8;
  a1[4] = &v6[v7];
  return WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
}

void WebKit::WebProcessProxy::updateMediaStreamingActivity(WebKit::WebProcessProxy *this)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE v23[12];
  _DWORD v24[3];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WebKit::WebProcessProxy::pages(this, (uint64_t)v23);
  if (v24[0])
  {
    v3 = *(uint64_t **)v23;
    v4 = 8 * v24[0] - 8;
    do
    {
      v5 = *v3++;
      v6 = *(_DWORD *)(*(_QWORD *)(v5 + 32) + 808);
      v7 = (v6 >> 27) & 1;
      if ((v6 & 0x8000000) != 0)
        break;
      v8 = v4;
      v4 -= 8;
    }
    while (v8);
  }
  else
  {
    v7 = 0;
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v2);
  if (v7 != (*((_BYTE *)this + 1000) != 0))
  {
    v9 = (uint64_t *)((char *)this + 992);
    v10 = qword_1ECE71640;
    v11 = os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v11)
      {
        v12 = *((_QWORD *)this + 17);
        if (v12)
          LODWORD(v12) = *(_DWORD *)(v12 + 108);
        *(_DWORD *)v23 = 134218240;
        *(_QWORD *)&v23[4] = this;
        LOWORD(v24[0]) = 1024;
        *(_DWORD *)((char *)v24 + 2) = v12;
        _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::updateMediaStreamingActivity: Start Media Networking Activity for WebProcess", v23, 0x12u);
      }
      v13 = *(_QWORD *)(*((_QWORD *)this + 64) + 8);
      if (v13)
        v14 = v13 - 16;
      else
        v14 = 0;
      v15 = *(_QWORD *)(v14 + 872);
      if (v15)
      {
        v16 = *(_QWORD **)v15;
        ++*(_QWORD *)(v15 + 8);
        if (v16)
        {
          if (*v16)
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v16 + 16))(*v16, 1);
        }
      }
      if (!*((_BYTE *)this + 1000))
      {
        *((_QWORD *)this + 124) = v15;
        *((_BYTE *)this + 1000) = 1;
        return;
      }
      v17 = *v9;
      *v9 = v15;
      if (!v17)
        return;
      v18 = *(uint64_t **)v17;
      v19 = *(_QWORD *)(v17 + 8) - 1;
      *(_QWORD *)(v17 + 8) = v19;
      if (!v18)
        goto LABEL_26;
      v20 = *v18;
      if (*v18)
      {
        v21 = *(_BYTE *)(v17 + 16);
        *(_BYTE *)(v17 + 16) = 1;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0);
        *(_BYTE *)(v17 + 16) = v21;
        if (!*(_QWORD *)v17)
        {
          v19 = *(_QWORD *)(v17 + 8);
LABEL_26:
          if (!v19)
            MEMORY[0x19AEB936C](v17, 0x1020C40545B2139);
        }
      }
    }
    else
    {
      if (v11)
      {
        v22 = *((_QWORD *)this + 17);
        if (v22)
          LODWORD(v22) = *(_DWORD *)(v22 + 108);
        *(_DWORD *)v23 = 134218240;
        *(_QWORD *)&v23[4] = this;
        LOWORD(v24[0]) = 1024;
        *(_DWORD *)((char *)v24 + 2) = v22;
        _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::updateMediaStreamingActivity: Stop Media Networking Activity for WebProcess", v23, 0x12u);
      }
      std::__optional_destruct_base<WTF::RefPtr<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count,WTF::RawPtrTraits<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count>,WTF::DefaultRefDerefTraits<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count>>,false>::reset[abi:sn180100]((_BYTE *)this + 992);
    }
  }
}

uint64_t WebKit::WebProcessProxy::updateAudibleMediaAssertions(WebKit::WebProcessProxy *this)
{
  uint64_t result;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE buf[12];
  _DWORD v31[3];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  result = WebCore::PlatformMediaSessionManager::mediaCapabilityGrantsEnabled(this);
  if ((result & 1) != 0)
    return result;
  WebKit::WebProcessProxy::pages(this, (uint64_t)buf);
  if (v31[0])
  {
    v4 = *(uint64_t **)buf;
    v5 = 8 * v31[0] - 8;
    do
    {
      v6 = *v4++;
      v7 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 808) & 1;
      if (v7)
        break;
      v8 = v5;
      v5 -= 8;
    }
    while (v8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v3);
  if (v7 == (*((_BYTE *)this + 984) != 0))
    return result;
  v9 = (uint64_t *)((char *)this + 968);
  v10 = qword_1ECE71640;
  v11 = os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v11)
    {
      v13 = *((_QWORD *)this + 17);
      if (v13)
        LODWORD(v13) = *(_DWORD *)(v13 + 108);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = this;
      LOWORD(v31[0]) = 1024;
      *(_DWORD *)((char *)v31 + 2) = v13;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::updateAudibleMediaAssertions: Taking MediaPlayback assertion for WebProcess", buf, 0x12u);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v29 = 0;
    v14 = WTF::fastMalloc((WTF *)0xB0);
    v15 = WebKit::ProcessAssertion::ProcessAssertion(v14, this, (_DWORD **)buf, 4);
    WebKit::ProcessAssertion::acquireAsync(v15, &v29);
    v17 = *(_QWORD *)(*((_QWORD *)this + 64) + 8);
    if (v17)
      v18 = v17 - 16;
    else
      v18 = 0;
    v19 = *(_QWORD *)(v18 + 800);
    if (v19)
    {
      v20 = *(_QWORD **)v19;
      ++*(_QWORD *)(v19 + 8);
      if (v20)
      {
        if (*v20)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v20 + 16))(*v20, 1);
      }
    }
    if (*((_BYTE *)this + 984))
    {
      v21 = *v9;
      *v9 = v14;
      if (v21)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v21 + 8), v16);
      v22 = *((_QWORD *)this + 122);
      *((_QWORD *)this + 122) = v19;
      if (!v22)
        goto LABEL_37;
      v23 = *(uint64_t **)v22;
      v24 = *(_QWORD *)(v22 + 8) - 1;
      *(_QWORD *)(v22 + 8) = v24;
      if (!v23)
        goto LABEL_29;
      v25 = *v23;
      if (*v23)
      {
        v26 = *(_BYTE *)(v22 + 16);
        *(_BYTE *)(v22 + 16) = 1;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 16))(v25, 0);
        *(_BYTE *)(v22 + 16) = v26;
        if (!*(_QWORD *)v22)
        {
          v24 = *(_QWORD *)(v22 + 8);
LABEL_29:
          if (!v24)
            MEMORY[0x19AEB936C](v22, 0x1020C40545B2139);
        }
      }
    }
    else
    {
      *((_QWORD *)this + 121) = v14;
      *((_QWORD *)this + 122) = v19;
      *((_BYTE *)this + 984) = 1;
    }
LABEL_37:
    v28 = v29;
    v29 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    result = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  if (v11)
  {
    v27 = *((_QWORD *)this + 17);
    if (v27)
      LODWORD(v27) = *(_DWORD *)(v27 + 108);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = this;
    LOWORD(v31[0]) = 1024;
    *(_DWORD *)((char *)v31 + 2) = v27;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::updateAudibleMediaAssertions: Releasing MediaPlayback assertion for WebProcess", buf, 0x12u);
  }
  return (uint64_t)std::__optional_destruct_base<WebKit::WebProcessProxy::AudibleMediaActivity,false>::reset[abi:sn180100]((unsigned __int8 *)this + 968, v12);
}

unsigned __int8 *WebKit::VisitedLinkStore::removeProcess(WebKit::VisitedLinkStore *this, WebKit::WebProcessProxy *a2)
{
  unsigned __int8 *result;

  result = (unsigned __int8 *)WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)this + 48, a2);
  if ((_DWORD)result)
    return IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)a2 + 152, 0x97u, *((_QWORD *)this + 4));
  return result;
}

uint64_t WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int **v19;
  uint64_t v20;
  uint64_t v22;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v7 = *(_DWORD *)(v6 - 4);
      if (!v7)
        goto LABEL_25;
      v8 = 0;
      do
      {
        while (1)
        {
          v9 = *(_QWORD *)(v6 + 8 * --v7);
          if ((unint64_t)(v9 + 1) >= 2 && !*(_QWORD *)(v9 + 8))
            break;
          if (!v7)
            goto LABEL_14;
        }
        *(_QWORD *)(v6 + 8 * v7) = 0;
        do
        {
          v10 = __ldaxr((unsigned int *)v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v9);
          WTF::fastFree((WTF *)v9, a2);
        }
        *(_QWORD *)(v6 + 8 * v7) = -1;
        ++v8;
      }
      while (v7);
LABEL_14:
      v6 = *(_QWORD *)a1;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) += v8;
        v12 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v13 = *(_DWORD *)(v12 - 12);
        else
          v13 = 0;
        *(_DWORD *)(v12 - 12) = v13 - v8;
        v6 = *(_QWORD *)a1;
      }
      if (v6)
      {
        v14 = *(_DWORD *)(v6 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v14)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          v6 = *(_QWORD *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v6)
          {
            v16 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_28:
        v16 = *(_DWORD *)(v6 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_30:
          *(_DWORD *)(a1 + 12) = 2 * v17;
          goto LABEL_31;
        }
LABEL_29:
        v17 = v16;
        goto LABEL_30;
      }
    }
    v16 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v18 = a2[1];
  if (!v18 || !*(_QWORD *)(v18 + 8))
    return 0;
  v22 = a2[1];
  v19 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v22);
  if (*(_QWORD *)a1)
  {
    v20 = *(_QWORD *)a1 + 8 * *(unsigned int *)(*(_QWORD *)a1 - 4);
    if ((unsigned int **)v20 == v19)
      return 0;
  }
  else
  {
    if (!v19)
      return 0;
    v20 = 0;
  }
  if ((unsigned int **)v20 != v19)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)a1, v19);
  return 1;
}

uint64_t **WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebProcessProxy>(uint64_t **result)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t **v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;

  v1 = result;
  if (++dword_1ECE73898 > *(_DWORD *)algn_1ECE7389C)
    result = (uint64_t **)WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)&WebKit::liveProcessesLRU(void)::processes);
  v2 = v1[1];
  if (v2 && v2[1])
  {
    v7 = v1[1];
    result = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)&WebKit::liveProcessesLRU(void)::processes, &v7);
    v3 = (uint64_t **)WebKit::liveProcessesLRU(void)::processes;
    if ((_QWORD)WebKit::liveProcessesLRU(void)::processes)
      v3 = (uint64_t **)(WebKit::liveProcessesLRU(void)::processes
                      + 8 * *(unsigned int *)(WebKit::liveProcessesLRU(void)::processes - 4));
    if (v3 != result)
    {
      v4 = *result;
      if (*result)
      {
        v7 = *result;
        v5 = (_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>>,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>((uint64_t *)&WebKit::liveProcessesLRU(void)::processes, &v7);
        v6 = (_QWORD *)WebKit::liveProcessesLRU(void)::processes;
        if ((_QWORD)WebKit::liveProcessesLRU(void)::processes)
          v6 = (_QWORD *)(WebKit::liveProcessesLRU(void)::processes
                        + 8 * *(unsigned int *)(WebKit::liveProcessesLRU(void)::processes - 4));
        if (v6 != v5)
          WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove((uint64_t *)&WebKit::liveProcessesLRU(void)::processes, v5);
        return (uint64_t **)WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete((uint64_t)&WebKit::liveProcessesLRU(void)::processes, (WTF *)v4);
      }
    }
  }
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<void,void,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  char v6;

  WTF::NativePromiseBase::log<char [10],WTF::NativePromise<void,void,0u>>((WTF::NativePromiseBase *)"destroying ", a1);
  WTF::NativePromise<void,void,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, v2);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,void,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,void,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 72, v3);
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34DC478[v4])(&v6, a1 + 56);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t WTF::NativePromise<void,void,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
LABEL_3:
    result = MEMORY[0x19AEABB3C](result + 48);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v6 = *(uint64_t **)(v1 + 96);
    v7 = 40 * v4;
    do
    {
      result = *v6;
      if (*v6)
        result = WTF::NativePromise<void,void,0u>::assertIsDead();
      v6 += 5;
      v7 -= 40;
    }
    while (v7);
  }
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void WebKit::VisitedLinkStore::addProcess(WebKit::VisitedLinkStore *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v4;
  unsigned int *v5[2];
  char v6;
  _QWORD v7[2];

  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)this + 48, (unsigned int *)a2, (uint64_t)v5);
  if (v6)
  {
    v4 = *((_QWORD *)this + 4);
    v7[0] = 151;
    v7[1] = v4;
    WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)a2 + 20, (unsigned __int8 *)v7, (uint64_t)this + 16, v5);
    if (*((_DWORD *)this + 18))
      WebKit::VisitedLinkStore::sendStoreHandleToProcess(this, a2);
  }
}

void sub_196D2EDE4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v1);
  _Block_release(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

IPC::Encoder *IPC::Connection::dispatchSyncMessage(IPC::Connection *this, IPC::Decoder *a2)
{
  IPC::Encoder *result;
  char v5;
  IPC::Encoder *v6;
  uint64_t v7;
  IPC::Decoder *v8;
  void *v9;
  WTF *v10;
  void *v11;
  IPC::Decoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  IPC::Decoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  IPC::Decoder *v22;
  IPC::Decoder *v23;
  IPC::Encoder *v24;

  if (!*((_QWORD *)this + 2))
  {
    __break(0xC471u);
    goto LABEL_21;
  }
  result = (IPC::Encoder *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a2);
  if (!v5)
    return result;
  v6 = result;
  ++*((_DWORD *)this + 21);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2823;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v24 = (IPC::Encoder *)v7;
  if (*((_WORD *)a2 + 25) == 3736)
  {
    if (!*((_BYTE *)this + 96))
    {
      v9 = *(void **)a2;
      v19 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      v20 = *((_QWORD *)a2 + 3);
      if (v20 && v19)
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v20 + 16))(v20, v9);
      goto LABEL_5;
    }
    IPC::Decoder::unwrapForTesting(a2, v8, &v23);
    if (v23)
    {
      v22 = v23;
      v23 = 0;
      IPC::Connection::processIncomingMessage((uint64_t)this, &v22);
      v12 = v22;
      v22 = 0;
      if (v12)
      {
        IPC::Decoder::~Decoder(v12);
        WTF::fastFree(v13, v14);
      }
      v15 = *((_QWORD *)this + 2);
      v21 = 0;
      IPC::Connection::SyncMessageState::dispatchMessages(v15, &v21);
      v16 = v23;
      v23 = 0;
      if (v16)
      {
        IPC::Decoder::~Decoder(v16);
        WTF::fastFree(v17, v18);
      }
      goto LABEL_15;
    }
    __break(0xC471u);
LABEL_21:
    JUMPOUT(0x196D2EFECLL);
  }
  if (((*(uint64_t (**)(_QWORD, IPC::Connection *, IPC::Decoder *, IPC::Encoder **))(**((_QWORD **)this + 1)
                                                                                              + 32))(*((_QWORD *)this + 1), this, a2, &v24) & 1) == 0)LABEL_15:IPC::Connection::sendMessageImpl(this, &v24, 0, 0);
LABEL_5:
  result = v24;
  v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    result = (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  --*((_DWORD *)this + 21);
  return result;
}

uint64_t WebKit::WebProcessProxy::didReceiveSyncWebProcessProxyMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (unsigned int *)(a1 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  switch(*(_WORD *)(a3 + 50))
  {
    case 0xE93:
      v7 = IPC::handleMessageSynchronous<Messages::WebProcessProxy::GetNetworkProcessConnection,WebKit::WebProcessProxy,WebKit::WebProcessProxy,void ()(WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::WebProcessProxy::getNetworkProcessConnection, 0);
      goto LABEL_10;
    case 0xE94:
      v7 = IPC::handleMessageSynchronous<Messages::WebProcessProxy::ShouldTerminate,WebKit::WebProcessProxy,WebKit::WebProcessProxy,void ()(WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::WebProcessProxy::shouldTerminate, 0);
      goto LABEL_10;
    case 0xE95:
      v7 = IPC::handleMessageSynchronous<Messages::WebProcessProxy::UnwrapCryptoKey,WebKit::WebProcessProxy,WebKit::WebProcessProxy,void ()(WebCore::WrappedCryptoKey &&,WTF::CompletionHandler<void ()(std::optional<WebCore::WrappedCryptoKey &&::Vector<unsigned char,0ul,WebCore::WrappedCryptoKey &&::CrashOnOverflow,16ul,WebCore::WrappedCryptoKey &&::FastMalloc>> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, _BYTE *, _QWORD **))WebKit::WebProcessProxy::unwrapCryptoKey, 0);
      goto LABEL_10;
    case 0xE96:
      v7 = IPC::handleMessageSynchronous<Messages::WebProcessProxy::WrapCryptoKey,WebKit::WebProcessProxy,WebKit::WebProcessProxy,void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)>(a2, (uint64_t *)a3, a4, a1, (void (*)(_QWORD *, WTF **, _QWORD **))WebKit::WebProcessProxy::wrapCryptoKey, 0);
LABEL_10:
      v8 = v7;
      if (a1)
        goto LABEL_11;
      return v8;
    default:
      v8 = 0;
      if (!a1)
        return v8;
LABEL_11:
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
      return v8;
  }
}

uint64_t WebKit::WebProcessProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v13;

  if ((IPC::MessageReceiverMap::dispatchSyncMessage((unsigned int **)(a1 + 152), (uint64_t)a2, a3, (uint64_t)a4) & 1) != 0)
    return 1;
  v8 = *(_QWORD *)(a1 + 512);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = v9 ? v9 - 16 : 0;
  }
  else
  {
    v10 = 0;
  }
  CFRetain(*(CFTypeRef *)(v10 + 8));
  v11 = IPC::MessageReceiverMap::dispatchSyncMessage((unsigned int **)(v10 + 56), (uint64_t)a2, a3, (uint64_t)a4);
  CFRelease(*(CFTypeRef *)(v10 + 8));
  if ((v11 & 1) != 0)
    return 1;
  v13 = *(unsigned __int16 *)(a3 + 50);
  if (v13 >= 0xE98)
    v13 = 3736;
  if (LOBYTE((&IPC::Detail::messageDescriptions)[3 * v13 + 2]) == 188)
    return WebKit::WebProcessProxy::didReceiveSyncWebProcessProxyMessage(a1, a2, a3, a4);
  else
    return 0;
}

uint64_t IPC::MessageReceiverMap::dispatchSyncMessage(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  unsigned int v9;
  void *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v23[2];
  WTF *v24;

  v9 = *(unsigned __int16 *)(a3 + 50);
  if (v9 >= 0xE98)
    v9 = 3736;
  LOBYTE(v24) = (&IPC::Detail::messageDescriptions)[3 * v9 + 2];
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<IPC::ReceiverName>>,IPC::ReceiverName>(a1, (unsigned __int8 *)&v24, (unsigned int **)v23);
  v11 = (unsigned int *)v23[0];
  if (v23[0])
  {
    v12 = *((_QWORD *)v23[0] + 1);
    if (v12)
    {
      v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(*((_QWORD *)v23[0] + 1), a2, a3, a4);
      v11 = (unsigned int *)v23[0];
      v23[0] = 0;
      if (!v11)
        return v4 & 1;
    }
    else
    {
      v23[0] = 0;
    }
    do
    {
      v13 = __ldaxr(v11);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v11));
    if (v14)
    {
      if (v12)
        return v4 & 1;
    }
    else
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
      if (v12)
        return v4 & 1;
    }
  }
  v15 = *(unsigned __int16 *)(a3 + 50);
  if (v15 >= 0xE98)
    v15 = 3736;
  v16 = *(WTF **)(a3 + 64);
  v23[0] = (WTF *)LOBYTE((&IPC::Detail::messageDescriptions)[3 * v15 + 2]);
  v23[1] = v16;
  WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>>,std::pair<IPC::ReceiverName,unsigned long long>>((unint64_t)(a1 + 1), (unsigned __int8 *)v23, (unsigned int **)&v24);
  v18 = (unsigned int *)v24;
  if (!v24)
    goto LABEL_21;
  v19 = *((_QWORD *)v24 + 1);
  if (v19)
  {
    v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(*((_QWORD *)v24 + 1), a2, a3, a4);
    v18 = (unsigned int *)v24;
    v24 = 0;
    if (!v18)
      return v4 & 1;
  }
  else
  {
    v24 = 0;
  }
  do
  {
    v20 = __ldaxr(v18);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v18));
  if (!v21)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v17);
    if (v19)
      return v4 & 1;
    goto LABEL_21;
  }
  if (!v19)
LABEL_21:
    v4 = 0;
  return v4 & 1;
}

uint64_t `non-virtual thunk to'WebKit::GPUConnectionToWebProcess::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return WebKit::GPUConnectionToWebProcess::didReceiveSyncMessage(a1 - 24, a2, a3, a4);
}

uint64_t WebKit::GPUConnectionToWebProcess::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v12, a1);
  if (*(_WORD *)(a3 + 50) == 3505)
    v8 = IPC::handleMessageSynchronous<Messages::GPUConnectionToWebProcess::EnsureAudioSession,WebKit::GPUConnectionToWebProcess,WebKit::GPUConnectionToWebProcess,void ()(WTF::CompletionHandler<void ()(WebKit::RemoteAudioSessionConfiguration const&)> &&)>(a2, a3, a4, a1, (void (*)(_QWORD *, _QWORD **))WebKit::GPUConnectionToWebProcess::ensureAudioSession, 0);
  else
    WebKit::GPUConnectionToWebProcess::dispatchSyncMessage(a1, a2, a3, (uint64_t *)a4);
  v9 = v8;
  v10 = v12;
  v12 = 0;
  if (v10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v10 + 16));
  return v9;
}

void WebKit::GPUConnectionToWebProcess::didReceiveMessage(WebKit::GPUConnectionToWebProcess *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebCore::MediaStrategy *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  __int16 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  WTF::StringImpl *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::MachSendRight *v79;
  WTF::MachSendRight *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE v116[48];
  uint64_t v117;
  char v118;
  __int128 v119;
  _OWORD v120[2];
  char v121;
  _BYTE v122[48];
  uint64_t v123;
  char v124;
  __int128 v125;
  _OWORD v126[2];
  char v127;
  _BYTE v128[4];
  char v129;
  char v130;

  v6 = (WebCore::MediaStrategy *)WTF::Ref<WebKit::GPUConnectionToWebProcess,WTF::RawPtrTraits<WebKit::GPUConnectionToWebProcess>,WTF::DefaultRefDerefTraits<WebKit::GPUConnectionToWebProcess>>::Ref(&v115, (uint64_t)this);
  switch(*((_WORD *)a3 + 25))
  {
    case '!':
      WebKit::GPUConnectionToWebProcess::clearNowPlayingInfo(this);
      goto LABEL_136;
    case '"':
      IPC::Decoder::decode<std::tuple<WTF::String,WTFLogChannelState,WTFLogLevel>>((uint64_t *)a3, v122);
      if (v122[16])
      {
        WebKit::GPUConnectionToWebProcess::configureLoggingChannel((int)this, (WebCore *)v122, v122[8], v122[9]);
        if (v122[16])
        {
          v11 = *(WTF::StringImpl **)v122;
          *(_QWORD *)v122 = 0;
          if (v11)
            goto LABEL_109;
        }
      }
      goto LABEL_136;
    case '#':
      v31 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v32)
        WebKit::GPUConnectionToWebProcess::createAudioHardwareListener((uint64_t)this, v31);
      goto LABEL_136;
    case '$':
      if (!*((_BYTE *)this + 361))
        goto LABEL_52;
      v35 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v36
        && (v37 = v35,
            v38 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3),
            v39))
      {
        v40 = v38;
        IPC::Decoder::decode<IPC::StreamServerConnectionHandle>(v116, a3);
        v41 = v116[24];
        if (v116[24])
        {
          *(_QWORD *)v122 = v37;
          *(_QWORD *)&v122[8] = v40;
          WTF::MachSendRight::MachSendRight();
          WTF::MachSendRight::MachSendRight();
          *(_QWORD *)&v122[32] = *(_QWORD *)&v116[16];
          v41 = 1;
        }
        else
        {
          v122[0] = 0;
        }
        v122[40] = v41;
        std::__optional_destruct_base<IPC::StreamServerConnectionHandle,false>::~__optional_destruct_base[abi:sn180100](v116);
        if (v122[40])
          goto LABEL_81;
      }
      else
      {
        v122[0] = 0;
        v122[40] = 0;
      }
      v83 = *(_QWORD *)a3;
      v84 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v85 = *((_QWORD *)a3 + 3);
      if (!v85)
        goto LABEL_136;
      if (!v84)
        goto LABEL_136;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(v85, v83);
      if (!v122[40])
        goto LABEL_136;
LABEL_81:
      v79 = (WTF::MachSendRight *)&v122[16];
      WebKit::GPUConnectionToWebProcess::createGPU((uint64_t)this, *(uint64_t *)v122, *(uint64_t *)&v122[8], (WTF::MachSendRight *)&v122[16]);
      if (v122[40])
      {
        v80 = (WTF::MachSendRight *)&v122[24];
        goto LABEL_97;
      }
      goto LABEL_136;
    case '%':
      if (!*((_BYTE *)this + 360))
        goto LABEL_52;
      v18 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v19)
        goto LABEL_124;
      v20 = v18;
      v21 = IPC::ArgumentCoder<WebCore::GraphicsContextGLAttributes,void>::decode(a3);
      if ((v22 & 0xFF0000) == 0)
      {
        v92 = *(_QWORD *)a3;
        v93 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v94 = *((_QWORD *)a3 + 3);
        if (v94 && v93)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v94 + 16))(v94, v92);
        goto LABEL_124;
      }
      v23 = v21;
      v24 = v22;
      v25 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v26)
      {
LABEL_124:
        v122[0] = 0;
        v124 = 0;
        goto LABEL_125;
      }
      v27 = v25;
      IPC::Decoder::decode<IPC::StreamServerConnectionHandle>(v116, a3);
      v28 = v116[24];
      if (v116[24])
      {
        *(_QWORD *)v122 = v20;
        *(_QWORD *)&v122[8] = v23;
        *(_WORD *)&v122[16] = v24;
        *(_QWORD *)&v122[24] = v27;
        WTF::MachSendRight::MachSendRight();
        WTF::MachSendRight::MachSendRight();
        v123 = *(_QWORD *)&v116[16];
        v28 = 1;
      }
      else
      {
        v122[0] = 0;
      }
      v124 = v28;
      std::__optional_destruct_base<IPC::StreamServerConnectionHandle,false>::~__optional_destruct_base[abi:sn180100](v116);
      if (v124)
        goto LABEL_95;
LABEL_125:
      v95 = *(_QWORD *)a3;
      v96 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v97 = *((_QWORD *)a3 + 3);
      if (!v97)
        goto LABEL_136;
      if (!v96)
        goto LABEL_136;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v97 + 16))(v97, v95);
      if (!v124)
        goto LABEL_136;
LABEL_95:
      v79 = (WTF::MachSendRight *)&v122[32];
      WebKit::GPUConnectionToWebProcess::createGraphicsContextGL((uint64_t)this, *(uint64_t *)v122, *(uint64_t *)&v122[8], *(__int16 *)&v122[16], *(uint64_t *)&v122[24], (WTF::MachSendRight *)&v122[32]);
      if (v124)
      {
        v80 = (WTF::MachSendRight *)&v122[40];
LABEL_97:
        WTF::MachSendRight::~MachSendRight(v80);
        goto LABEL_98;
      }
LABEL_136:
      v109 = v115;
      v115 = 0;
      if (v109)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v109 + 16));
      return;
    case '&':
      v52 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v53)
        WebKit::GPUConnectionToWebProcess::createRemoteCommandListener((uint64_t)this, v52);
      goto LABEL_136;
    case '\'':
      IPC::handleMessage<Messages::GPUConnectionToWebProcess::CreateRenderingBackend,WebKit::GPUConnectionToWebProcess,WebKit::GPUConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle &&)>((uint64_t *)a3, (uint64_t)this);
      goto LABEL_136;
    case '(':
      v42 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v43)
        goto LABEL_76;
      v44 = v42;
      v45 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v46)
        goto LABEL_76;
      v47 = *((_QWORD *)a3 + 1);
      v48 = *(_QWORD *)a3;
      v49 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v47 <= v49)
      {
        v110 = 0;
        v111 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v112 = *((_QWORD *)a3 + 3);
        if (v112)
        {
          if (v47)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v112 + 16))(v112);
            v111 = *(_QWORD *)a3;
            v110 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v110 = 0;
            v111 = 0;
          }
        }
      }
      else
      {
        v50 = (unsigned __int8 *)(v48 + v49);
        *((_QWORD *)a3 + 2) = v50 + 1;
        if (v48)
        {
          v51 = *v50;
          if (v51 < 2)
          {
            WebKit::GPUConnectionToWebProcess::createVisibilityPropagationContextForPage((uint64_t)this, v44, v45, v51 != 0);
            goto LABEL_136;
          }
LABEL_147:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v114 = *((_QWORD *)a3 + 3);
          if (v114 && v47)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, v48);
          goto LABEL_76;
        }
        v110 = v47;
        v111 = 0;
      }
      v47 = 0;
      v48 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v113 = *((_QWORD *)a3 + 3);
      if (v113)
      {
        if (v110)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v113 + 16))(v113, v111, v110);
          v48 = *(_QWORD *)a3;
          v47 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v47 = 0;
          v48 = 0;
        }
      }
      goto LABEL_147;
    case ')':
      v63 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v64)
        goto LABEL_76;
      v65 = v63;
      v66 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v67)
        goto LABEL_76;
      WebKit::GPUConnectionToWebProcess::destroyVisibilityPropagationContextForPage((uint64_t)this, v65, v66);
      goto LABEL_136;
    case '*':
      if (!*((_BYTE *)this + 346))
      {
        WebCore::MediaStrategy::addMockMediaSourceEngine(v6);
        *((_BYTE *)this + 346) = 1;
      }
      goto LABEL_136;
    case '+':
      WebKit::GPUConnectionToWebProcess::mediaSessionHelperProxy(this);
      goto LABEL_136;
    case ',':
      v16 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v17)
        WebKit::GPUConnectionToWebProcess::releaseAudioHardwareListener((uint64_t)this, v16);
      goto LABEL_136;
    case '-':
      if (!*((_BYTE *)this + 361))
        goto LABEL_52;
      v29 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v30)
        WebKit::GPUConnectionToWebProcess::releaseGPU((uint64_t)this, v29);
      goto LABEL_136;
    case '.':
      if (!*((_BYTE *)this + 360))
        goto LABEL_52;
      v54 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v55)
        goto LABEL_76;
      WebKit::GPUConnectionToWebProcess::releaseGraphicsContextGL((uint64_t)this, v54);
      goto LABEL_136;
    case '/':
      v12 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioHardwareListenerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v13)
      {
        v14 = v12;
        v15 = *((_QWORD *)this + 42);
        if (v15)
        {
          if (*(_QWORD *)(v15 + 40) == v14)
          {
            *((_QWORD *)this + 42) = 0;
            if (*(_DWORD *)(v15 + 16) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            else
              --*(_DWORD *)(v15 + 16);
          }
        }
      }
      goto LABEL_136;
    case '0':
      v33 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionControllerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v34)
        goto LABEL_76;
      WebKit::GPUConnectionToWebProcess::releaseRenderingBackend((uint64_t)this, v33);
      goto LABEL_136;
    case '1':
      v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v8)
        goto LABEL_76;
      v9 = v7;
      IPC::Decoder::decode<WTF::String>((uint64_t *)a3, v116);
      if (!v116[8])
        goto LABEL_76;
      *(_QWORD *)v122 = v9;
      *(_QWORD *)&v122[8] = *(_QWORD *)v116;
      v122[16] = 1;
      WebKit::GPUConnectionToWebProcess::setMediaEnvironment((uint64_t)this, v9, (WTF::StringImpl *)&v122[8]);
      if (!v122[16])
        goto LABEL_136;
      v11 = *(WTF::StringImpl **)&v122[8];
      *(_QWORD *)&v122[8] = 0;
      if (!v11)
        goto LABEL_136;
      goto LABEL_109;
    case '2':
      IPC::ArgumentCoder<WebKit::MediaOverridesForTesting,void>::decode((uint64_t *)a3, (uint64_t)v122);
      if (v122[40])
      {
        *(_OWORD *)&v116[1] = *(_OWORD *)&v122[1];
        *(_OWORD *)&v116[17] = *(_OWORD *)&v122[17];
        *(_QWORD *)&v116[32] = *(_QWORD *)&v122[32];
        v116[0] = v122[0];
        WebKit::GPUConnectionToWebProcess::setMediaOverridesForTesting((uint64_t)this, v116);
        goto LABEL_136;
      }
      v86 = *(_QWORD *)a3;
      v87 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v88 = *((_QWORD *)a3 + 3);
      if (!v88 || !v87)
      {
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        goto LABEL_136;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, v86);
      v76 = *(_QWORD *)a3;
      v77 = *((_QWORD *)a3 + 1);
      v78 = *((_QWORD *)a3 + 3);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      if (!v78)
        goto LABEL_136;
      goto LABEL_77;
    case '3':
      IPC::Decoder::decode<WebCore::NowPlayingInfo>((uint64_t *)a3, (uint64_t)v122);
      if (v127)
      {
        v57 = *(_OWORD *)v122;
        v58 = *(_OWORD *)&v122[16];
        memset(v122, 0, 32);
        *(_OWORD *)v116 = v57;
        *(_OWORD *)&v116[16] = v58;
        v116[32] = 0;
        v118 = 0;
        if (v124)
        {
          v59 = *(_OWORD *)&v122[32];
          *(_QWORD *)&v122[32] = 0;
          *(_QWORD *)&v122[40] = 0;
          *(_OWORD *)&v116[32] = v59;
          v60 = v123;
          v123 = 0;
          v117 = v60;
          v118 = 1;
        }
        v119 = v125;
        v120[0] = v126[0];
        *(_OWORD *)((char *)v120 + 10) = *(_OWORD *)((char *)v126 + 10);
        v121 = 1;
        std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v122, v56);
        WebKit::GPUConnectionToWebProcess::setNowPlayingInfo((uint64_t)this);
        if (v121)
        {
          std::__optional_destruct_base<WebCore::NowPlayingInfoArtwork,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v116[32], v61);
          v62 = *(WTF::StringImpl **)&v116[24];
          *(_QWORD *)&v116[24] = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 2)
              WTF::StringImpl::destroy(v62, v10);
            else
              *(_DWORD *)v62 -= 2;
          }
          v81 = *(WTF::StringImpl **)&v116[16];
          *(_QWORD *)&v116[16] = 0;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2)
              WTF::StringImpl::destroy(v81, v10);
            else
              *(_DWORD *)v81 -= 2;
          }
          v82 = *(WTF::StringImpl **)&v116[8];
          *(_QWORD *)&v116[8] = 0;
          if (v82)
          {
            if (*(_DWORD *)v82 == 2)
              WTF::StringImpl::destroy(v82, v10);
            else
              *(_DWORD *)v82 -= 2;
          }
          v11 = *(WTF::StringImpl **)v116;
          *(_QWORD *)v116 = 0;
          if (v11)
          {
LABEL_109:
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
      }
      else
      {
        std::__optional_destruct_base<WebCore::NowPlayingInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v122, v56);
LABEL_76:
        v76 = *(_QWORD *)a3;
        v77 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v78 = *((_QWORD *)a3 + 3);
        if (v78)
        {
LABEL_77:
          if (v77)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 16))(v78, v76);
        }
      }
      goto LABEL_136;
    case '4':
      v68 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v69)
        goto LABEL_134;
      v70 = v68;
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v116);
      if (!v116[16])
      {
        v89 = *(_QWORD *)a3;
        v90 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v91 = *((_QWORD *)a3 + 3);
        if (v91 && v90)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, v89);
        goto LABEL_134;
      }
      v71 = *((_QWORD *)a3 + 1);
      v72 = *(_QWORD *)a3;
      v73 = *((_QWORD *)a3 + 2) - *(_QWORD *)a3;
      if (v71 <= v73)
      {
        v98 = 0;
        v99 = 0;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v100 = *((_QWORD *)a3 + 3);
        if (v100)
        {
          if (v71)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v100 + 16))(v100);
            v99 = *(_QWORD *)a3;
            v98 = *((_QWORD *)a3 + 1);
          }
          else
          {
            v98 = 0;
            v99 = 0;
          }
        }
      }
      else
      {
        v74 = (unsigned __int8 *)(v72 + v73);
        *((_QWORD *)a3 + 2) = v74 + 1;
        if (v72)
        {
          v75 = *v74;
          if (v75 < 2)
          {
            if (!v75)
            {
              v128[0] = 0;
              v129 = 0;
              v130 = 1;
              goto LABEL_84;
            }
            IPC::Decoder::takeLastAttachment(a3, v122);
            if (v122[4])
            {
              WTF::MachSendRight::MachSendRight();
              v129 = 1;
              v130 = 1;
              if (!v122[4])
                goto LABEL_84;
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v122);
              if (v130)
                goto LABEL_84;
              goto LABEL_133;
            }
LABEL_132:
            v128[0] = 0;
            v130 = 0;
LABEL_133:
            v103 = *(_QWORD *)a3;
            v104 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v105 = *((_QWORD *)a3 + 3);
            if (!v105
              || !v104
              || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, v103), !v130))
            {
LABEL_134:
              v122[0] = 0;
              v122[32] = 0;
              goto LABEL_135;
            }
LABEL_84:
            *(_QWORD *)v122 = v70;
            *(_OWORD *)&v122[8] = *(_OWORD *)v116;
            v122[24] = 0;
            v122[28] = 0;
            if (!v129)
            {
              v122[32] = 1;
              goto LABEL_90;
            }
            WTF::MachSendRight::MachSendRight();
            v122[28] = 1;
            v122[32] = 1;
            if (!v130 || !v129 || (WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v128), v122[32]))
            {
LABEL_90:
              v79 = (WTF::MachSendRight *)&v122[24];
              WebKit::GPUConnectionToWebProcess::updateSampleBufferDisplayLayerBoundsAndPosition((uint64_t)this, *(uint64_t *)v122, (uint64_t)&v122[24]);
              if (v122[32] && v122[28])
LABEL_98:
                WTF::MachSendRight::~MachSendRight(v79);
              goto LABEL_136;
            }
LABEL_135:
            v106 = *(_QWORD *)a3;
            v107 = *((_QWORD *)a3 + 1);
            *(_QWORD *)a3 = 0;
            *((_QWORD *)a3 + 1) = 0;
            v108 = *((_QWORD *)a3 + 3);
            if (!v108)
              goto LABEL_136;
            if (!v107)
              goto LABEL_136;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v108 + 16))(v108, v106);
            if (!v122[32])
              goto LABEL_136;
            goto LABEL_90;
          }
LABEL_131:
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v102 = *((_QWORD *)a3 + 3);
          if (v102 && v71)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v102 + 16))(v102, v72);
          goto LABEL_132;
        }
        v98 = v71;
        v99 = 0;
      }
      v71 = 0;
      v72 = 0;
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v101 = *((_QWORD *)a3 + 3);
      if (v101)
      {
        if (v98)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v101 + 16))(v101, v99, v98);
          v72 = *(_QWORD *)a3;
          v71 = *((_QWORD *)a3 + 1);
        }
        else
        {
          v71 = 0;
          v72 = 0;
        }
      }
      goto LABEL_131;
    default:
LABEL_52:
      WebKit::GPUConnectionToWebProcess::dispatchMessage(this, a2, a3);
      goto LABEL_136;
  }
}

void WebKit::LayerHostingContext::createForExternalHostingProcess(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const void **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  _QWORD v17[3];
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (const void **)(v4 + 8);
  *(_QWORD *)(v4 + 16) = 0;
  *a2 = v4;
  v6 = (_QWORD *)MEMORY[0x1E0CD2A50];
  *(_BYTE *)v4 = 1;
  v17[0] = *v6;
  v7 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *a1);
  v8 = *MEMORY[0x1E0CD2A40];
  v18[0] = v7;
  v18[1] = MEMORY[0x1E0C9AAB0];
  v9 = *MEMORY[0x1E0CD2A18];
  v17[1] = v8;
  v17[2] = v9;
  v18[2] = &unk_1E356FEE0;
  v10 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 3);
  if (a1[1])
  {
    v11 = (const void *)objc_msgSend((id)getBELayerHierarchyClass(), "layerHierarchyWithOptions:error:", v10, 0);
    v12 = v11;
    if (v11)
      CFRetain(v11);
    v13 = *(const void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v12;
    if (v13)
      CFRelease(v13);
  }
  else
  {
    v14 = (const void *)objc_msgSend(MEMORY[0x1E0CD2720], "remoteContextWithOptions:", v10);
    v15 = v14;
    if (v14)
      CFRetain(v14);
    v16 = *v5;
    *v5 = v15;
    if (v16)
      CFRelease(v16);
    *(_DWORD *)(v4 + 4) = WebKit::LayerHostingContext::contextID((id *)v4);
  }
}

void sub_196D30058(_Unwind_Exception *a1)
{
  id **v1;

  std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t WebKit::LayerHostingContext::contextID(id *this)
{
  xpc_object_t v2;
  uint64_t uint64;
  xpc_object_t xdict;

  WebKit::LayerHostingContext::xpcRepresentation((WebKit::LayerHostingContext *)this, &xdict);
  v2 = xdict;
  if (!xdict)
    return objc_msgSend(this[1], "contextId");
  uint64 = xpc_dictionary_get_uint64(xdict, "cid");

  return uint64;
}

void sub_196D300D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::LayerHostingContext::xpcRepresentation@<X0>(WebKit::LayerHostingContext *this@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = (id)*((_QWORD *)this + 2);
  if (result)
  {
    result = (id)objc_msgSend((id)objc_msgSend(result, "handle"), "createXPCRepresentation");
    *a2 = result;
    if (result)
      return result;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

_QWORD *WebKit::RemoteRenderingBackend::startListeningForIPC(WebKit::RemoteRenderingBackend *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34B84D0;
  v2[1] = this;
  v4 = v2;
  IPC::StreamConnectionWorkQueue::dispatch(*((_QWORD *)this + 4), (uint64_t *)&v4);
  result = v4;
  v4 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

double WebKit::ShapeDetection::ObjectHeap::ObjectHeap(WebKit::ShapeDetection::ObjectHeap *this)
{
  double result;

  *(_DWORD *)this = 1;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

WebKit::RemoteRenderingBackend **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::operator=(WebKit::RemoteRenderingBackend **a1, WebKit::RemoteRenderingBackend **a2)
{
  WebKit::RemoteRenderingBackend *v4;
  WebKit::RemoteRenderingBackend *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (a1 != a2)
  {
    if (*a1)
      IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>(a1);
    v4 = *a2;
    *a2 = 0;
    v5 = *a1;
    *a1 = v4;
    if (v5)
    {
      v6 = (unsigned int *)((char *)v5 + 16);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)v5 + 4);
        (*(void (**)(uint64_t))(*((_QWORD *)v5 + 1) + 8))((uint64_t)v5 + 8);
      }
    }
  }
  return a1;
}

WebKit::RemoteRenderingBackend **IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::~ScopedActiveMessageReceiveQueue(WebKit::RemoteRenderingBackend **a1)
{
  WebKit::RemoteRenderingBackend *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*a1)
  {
    IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteRenderingBackend,WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>::stopListeningForIPCAndRelease<WTF::RefPtr<WebKit::RemoteRenderingBackend,WTF::RawPtrTraits<WebKit::RemoteRenderingBackend>,WTF::DefaultRefDerefTraits<WebKit::RemoteRenderingBackend>>>(a1);
    v3 = *a1;
    *a1 = 0;
    if (v3)
    {
      v4 = (unsigned int *)((char *)v3 + 16);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, (unsigned int *)v3 + 4);
        (*(void (**)(uint64_t))(*((_QWORD *)v3 + 1) + 8))((uint64_t)v3 + 8);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t IPC::StreamConnectionWorkQueue::dispatch(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  int v9;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 41);
  if (__ldaxr((unsigned __int8 *)(result + 41)))
  {
    __clrex();
LABEL_3:
    result = MEMORY[0x19AEABB3C](result + 41);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = atomic_load((unsigned __int8 *)(v3 + 40));
  if ((v6 & 1) != 0)
  {
LABEL_8:
    v8 = 0;
    goto LABEL_10;
  }
  result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::append<WTF::Function<void ()(void)>>(v3 + 56, a2);
  v7 = atomic_load((unsigned __int8 *)(v3 + 40));
  if ((v7 & 1) == 0 && !*(_QWORD *)(v3 + 48))
  {
    result = IPC::StreamConnectionWorkQueue::startProcessingThread((unsigned int **)v3);
    goto LABEL_8;
  }
  v8 = 1;
LABEL_10:
  v9 = __ldxr(v4);
  if (v9 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_12:
  if (v8)
    JUMPOUT(0x19AEBA1A0);
  return result;
}

uint64_t WTF::Deque<WTF::Function<void ()(void)>,0ul>::append<WTF::Function<void ()(void)>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(a1);
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  if (v6 == *(unsigned int *)(a1 + 24) - 1)
    v8 = 0;
  else
    v8 = v6 + 1;
  *(_QWORD *)(a1 + 8) = v8;
  return result;
}

uint64_t WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacityIfNeeded(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)result;
  v1 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    ++v1;
  }
  else
  {
    v3 = *(unsigned int *)(result + 24);
    if (!v1)
    {
      if ((_DWORD)v3)
        return result;
      return WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity(result);
    }
    v2 = v3 - 1;
  }
  if (v1 == v2)
    return WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity(result);
  return result;
}

uint64_t WTF::Deque<WTF::Function<void ()(void)>,0ul>::expandCapacity(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  WTF *v4;
  unsigned int v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(unsigned int *)(result + 24);
  v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF)
    v2 = 15;
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = result;
    v4 = *(WTF **)(result + 16);
    v5 = v2 + 1;
    result = WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
    v7 = (_QWORD *)result;
    *(_DWORD *)(v3 + 24) = v5;
    *(_QWORD *)(v3 + 16) = result;
    v8 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    if (*(_QWORD *)v3 > v9)
    {
      if (v9)
      {
        v15 = 8 * v9;
        v16 = (uint64_t *)v4;
        do
        {
          v17 = *v16;
          *v16 = 0;
          *v7 = v17;
          result = *v16;
          *v16 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v7;
          ++v16;
          v15 -= 8;
        }
        while (v15);
        v5 = *(_DWORD *)(v3 + 24);
        v8 = *(_QWORD *)v3;
        v7 = *(_QWORD **)(v3 + 16);
      }
      v10 = v8 - v1 + v5;
      if (v8 != v1)
      {
        v18 = v5;
        v19 = (uint64_t *)((char *)v4 + 8 * v8);
        v20 = &v7[v18];
        v21 = 8 * v8 - 8 * v1;
        do
        {
          v22 = *v19;
          *v19 = 0;
          *(_QWORD *)((char *)v20 + v21) = v22;
          result = *v19;
          *v19 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          ++v19;
          v21 += 8;
        }
        while (v21);
      }
      *(_QWORD *)v3 = v10;
    }
    else if (*(_QWORD *)v3 != v9)
    {
      v11 = (uint64_t *)(result + 8 * v8);
      v12 = (uint64_t *)((char *)v4 + 8 * v8);
      v13 = 8 * v9 - 8 * v8;
      do
      {
        v14 = *v12;
        *v12 = 0;
        *v11 = v14;
        result = *v12;
        *v12 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        ++v11;
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    if (v4)
    {
      if (*(WTF **)(v3 + 16) == v4)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

uint64_t IPC::StreamConnectionWorkQueue::startProcessingThread(unsigned int **this)
{
  _QWORD *v2;
  unsigned int *v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  WTF::Thread *v9;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E351F140;
  v2[1] = this;
  v7 = (uint64_t)v2;
  WTF::Thread::create();
  WTF::RefPtr<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::operator=<WTF::Thread>(this + 6, &v8);
  v3 = v8;
  v8 = 0;
  if (v3)
  {
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
    {
      atomic_store(1u, v3);
      v9 = (WTF::Thread *)v3;
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v9);
    }
  }
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

unsigned int *IPC::StreamServerConnection::tryCreate@<X0>(WTF::MachSendRight *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *result;
  uint64_t v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 **v8;
  unsigned int *v9;
  int v10;
  void *object;
  unsigned __int8 *v12;
  unsigned int *v13;
  uint64_t v14;
  char v15;
  unsigned __int8 **v16;

  result = (unsigned int *)WebCore::SharedMemory::map();
  if (v16)
  {
    v12 = v16[1] - 256;
    v13 = (unsigned int *)v16;
    v14 = 0;
    v15 = 1;
    v10 = WTF::MachSendRight::leakSendRight(a1);
    object = 0;
    IPC::Connection::createClientConnection((uint64_t)&v10, (mach_port_context_t *)&v16);
    if (object)
      os_release(object);
    v5 = WTF::fastMalloc((WTF *)0x90);
    v6 = v16;
    v16 = 0;
    v8 = v6;
    v7 = IPC::StreamServerConnection::StreamServerConnection(v5, (uint64_t *)&v8, (uint64_t *)&v12);
    v9 = 0;
    *a2 = v7;
    WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>::~Ref(&v9);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v8);
    result = (unsigned int *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
    if (v15)
    {
      result = v13;
      if (v13)
        return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v13);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void IPC::Decoder::decode<IPC::StreamServerConnectionHandle>(_BYTE *a1, IPC::Decoder *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<IPC::StreamServerConnectionHandle,void>::decode(a2, a1);
  if (!a1[24])
  {
    v4 = *(_QWORD *)a2;
    v5 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v6 = *((_QWORD *)a2 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<IPC::StreamServerConnectionHandle,void>::decode(IPC::Decoder *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v4[8];
  uint64_t v5;
  _BYTE v6[8];
  uint64_t v7;
  char v8;
  _BYTE v9[4];
  char v10;

  IPC::Decoder::decode<IPC::ConnectionHandle>(a1, v9);
  IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a1, (uint64_t)v6);
  if (!*(_QWORD *)a1)
    goto LABEL_11;
  if (!v8)
  {
LABEL_12:
    __break(1u);
    return;
  }
  if ((unint64_t)(v7 - 257) >= 0x7FFFFFFF)
  {
LABEL_11:
    *a2 = 0;
    a2[24] = 0;
    goto LABEL_6;
  }
  if (!v10)
    goto LABEL_12;
  IPC::StreamServerConnectionHandle::StreamServerConnectionHandle((uint64_t)v4, (uint64_t)v9, (uint64_t)v6);
  IPC::StreamServerConnectionHandle::StreamServerConnectionHandle((uint64_t)a2, (uint64_t)v4);
  a2[24] = 1;
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v5);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
LABEL_6:
  if (v8)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v6);
  if (v10)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
}

void sub_196D3085C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v15 + 8));
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  if (a15)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a13);
  if (*(_BYTE *)(v16 - 20))
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v16 - 24));
  _Unwind_Resume(a1);
}

void sub_196D308E4(_Unwind_Exception *a1)
{
  WTF::MachSendRight *v1;

  WTF::MachSendRight::~MachSendRight(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::GPUConnectionToWebProcess::ensureAudioSession(WebKit::GPUConnectionToWebProcess *a1, uint64_t *a2)
{
  WebKit::RemoteAudioSessionProxy *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8[7];
  WTF::StringImpl *v9;

  v3 = (WebKit::RemoteAudioSessionProxy *)WebKit::GPUConnectionToWebProcess::audioSessionProxy(a1);
  WebKit::RemoteAudioSessionProxy::configuration(v3, (uint64_t)v8);
  v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 16))(v4, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v8[0];
  v8[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages25GPUConnectionToWebProcess18EnsureAudioSessionEN6WebKit25GPUConnectionToWebProcessES8_FvONS_17CompletionHandlerIFvRKNS7_31RemoteAudioSessionConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B6E70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages25GPUConnectionToWebProcess18EnsureAudioSessionEN6WebKit25GPUConnectionToWebProcessES8_FvONS_17CompletionHandlerIFvRKNS7_31RemoteAudioSessionConfigurationEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::RemoteAudioSessionConfiguration,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

char *IPC::ArgumentCoder<WebKit::RemoteAudioSessionConfiguration,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2);
  v4 = *((_DWORD *)v2 + 2);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = v2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = v2[3];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = v2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v7;
  v8 = v2[5];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v8;
  LOBYTE(v8) = *((_BYTE *)v2 + 48);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  LOBYTE(v8) = *((_BYTE *)v2 + 49);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 7);
  LOBYTE(v2) = *((_BYTE *)v2 + 64);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned long long,void>>(char *__dst, uint64_t a2, char a3, unint64_t a4)
{
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13[6];

  v13[5] = *MEMORY[0x1E0C80C00];
  v13[0] = a2;
  result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v13, __dst);
  v8 = v13[0];
  if (v13[0])
    v8 = *(unsigned int *)(v13[0] + 4);
  v9 = 0;
  v10 = &__dst[v8];
  *v10 = a3;
  do
  {
    *((_BYTE *)&v13[4] + v9-- + 7) = (a4 % 0xA) | 0x30;
    v11 = a4 >= 9;
    v12 = a4 == 9;
    a4 /= 0xAuLL;
  }
  while (!v12 && v11);
  if (v9 + 26 <= 25)
    return (uint64_t *)memcpy(v10 + 1, (char *)&v13[5] + v9, -v9);
  return result;
}

void WebKit::WebProgressTrackerClient::progressEstimateChanged(WebKit::WebProgressTrackerClient *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  if (*(WebCore::LocalFrame **)(*((_QWORD *)a2 + 16) + 8) == a2)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
        v4 = v3 - 16;
      else
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 128) + 128);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32) + 56))(v4 + 32);
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 1867;
    *(_QWORD *)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v12 = (IPC::Encoder *)v7;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v5;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v4 + 32) + 32))(v4 + 32, &v12, 0);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v10, v11);
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_QWORD *WebKit::WebPreferences::setSafeBrowsingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t *WebKit::NetworkProcess::prepareToSuspend(uint64_t a1, int a2, uint64_t *a3, double a4)
{
  double v8;
  double v9;
  NSObject *v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *result;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  _BYTE buf[12];
  __int16 v39;
  int v40;
  __int16 v41;
  double v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v9 = v8;
  v10 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v11 = a4 - v9;
    *(_DWORD *)buf = 134218496;
    if (a4 <= v9)
      v11 = 0.0;
    *(_QWORD *)&buf[4] = a1;
    v39 = 1024;
    v40 = a2;
    v41 = 2048;
    v42 = v11;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcess::prepareToSuspend(), isSuspensionImminent=%d, remainingRunTime=%fs", buf, 0x1Cu);
  }
  *(_BYTE *)(a1 + 395) = 1;
  WebKit::NetworkProcess::lowMemoryHandler(a1, 1);
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = &off_1E34BEC88;
  v13[1] = a1;
  v13[2] = v12;
  v14 = WTF::fastMalloc((WTF *)0x10);
  v15 = v14;
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v13;
  v37 = (unsigned int *)v14;
  do
    v16 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v16 + 1, (unsigned int *)v14));
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = &off_1E34BECB0;
  v17[1] = v15;
  *(_QWORD *)buf = v17;
  WebKit::WebResourceLoadStatisticsStore::suspend();
  v18 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v37;
  if (v37)
  {
    do
      v20 = __ldaxr(v37);
    while (__stlxr(v20 + 1, v37));
  }
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v21 = &off_1E34BECD8;
  v21[1] = v19;
  *(_QWORD *)buf = v21;
  WebKit::PCM::PersistentStore::prepareForProcessToSuspend();
  v22 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v23 = off_1E34BED00;
  v23[1] = a1;
  v23[2] = &v37;
  *(_QWORD *)buf = v23;
  WebKit::NetworkProcess::forEachNetworkSession(a1, buf);
  (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  v24 = *(_QWORD **)(a1 + 376);
  result = WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::begin(v24);
  v26 = result;
  v28 = v27;
  if (v24)
    v29 = &v24[*((unsigned int *)v24 - 1)];
  else
    v29 = 0;
  if (v29 != result)
  {
    do
    {
      v30 = *v26;
      v31 = v37;
      if (v37)
      {
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 + 1, v31));
      }
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v33 = &off_1E34BED78;
      v33[1] = v31;
      *(_QWORD *)buf = v33;
      WebKit::NetworkStorageManager::suspend(v30, (uint64_t *)buf);
      result = *(uint64_t **)buf;
      *(_QWORD *)buf = 0;
      if (result)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      while (++v26 != v28)
      {
        if ((unint64_t)(*v26 + 1) > 1)
          goto LABEL_25;
      }
      v26 = v28;
LABEL_25:
      ;
    }
    while (v26 != v29);
  }
  v34 = v37;
  v37 = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      *(_QWORD *)buf = v34;
      return (uint64_t *)WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)buf);
    }
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::begin(_QWORD *result)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[v2];
  if (!*((_DWORD *)result - 3))
    return &result[v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WebKit::PCM::PersistentStore::prepareForProcessToSuspend()
{
  WTF::WorkQueue *v0;
  _QWORD *v1;
  uint64_t result;
  _QWORD *v3;
  WTF::WorkQueue *v4;

  WebKit::PCM::sharedWorkQueue(&v4);
  v0 = v4;
  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1 = off_1E34B3DA0;
  v1[1] = WebKit::PCM::Database::interruptAllDatabases;
  v3 = v1;
  WTF::SuspendableWorkQueue::suspend();
  result = (uint64_t)v3;
  if (v3)
    result = (*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
  if (v0)
    return WTF::WorkQueue::deref(v0);
  return result;
}

uint64_t WebKit::PCM::sharedWorkQueue@<X0>(WTF::WorkQueue **a1@<X8>)
{
  WTF::WorkQueue *v3;
  uint64_t result;
  uint64_t v5;

  {
    v3 = (WTF::WorkQueue *)WebKit::PCM::sharedWorkQueue(void)::queue;
  }
  else
  {
    WTF::SuspendableWorkQueue::create();
    v3 = (WTF::WorkQueue *)v5;
    WebKit::PCM::sharedWorkQueue(void)::queue = v5;
  }
  result = WTF::WorkQueue::ref(v3);
  *a1 = v3;
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::suspend()
{
  WTF::WorkQueue *v0;
  _QWORD *v1;
  uint64_t result;
  _QWORD *v3;
  WTF::WorkQueue *v4;

  WebKit::sharedStatisticsQueue(&v4);
  v0 = v4;
  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1 = off_1E34B3DA0;
  v1[1] = WebKit::ResourceLoadStatisticsStore::interruptAllDatabases;
  v3 = v1;
  WTF::SuspendableWorkQueue::suspend();
  result = (uint64_t)v3;
  if (v3)
    result = (*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
  if (v0)
    return WTF::WorkQueue::deref(v0);
  return result;
}

uint64_t WebKit::NetworkProcess::lowMemoryHandler(uint64_t result, char a2)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;

  if (!*(_BYTE *)(result + 138))
  {
    v3 = result;
    MEMORY[0x19AEABA04]();
    v4 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34BE288;
    v4[8] = a2;
    v5 = v4;
    WebKit::NetworkProcess::forEachNetworkSession(v3, &v5);
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

void IPC::handleMessageAsync<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  void *v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  _BYTE v14[208];
  char v15;

  IPC::Decoder::decode<std::tuple<WebKit::NetworkProcessCreationParameters>>(v14, a2);
  if (v15)
  {
    v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if ((_BYTE)v7)
    {
      v11 = v6;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E34B0D60;
      v8[1] = v11;
      v9 = v12;
      v12 = 0;
      v13 = v8;
      v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
      if (!v15)
      {
        __break(1u);
        return;
      }
      WebKit::NetworkProcess::initializeNetworkProcess(a3, (uint64_t)v14, (uint64_t *)&v13);
      v10 = (uint64_t)v13;
      v13 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    if (v15)
      WebKit::NetworkProcessCreationParameters::~NetworkProcessCreationParameters((WebKit::NetworkProcessCreationParameters *)v14, v7);
  }
}

void WebKit::NetworkProcess::initializeNetworkProcess(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  WebCore::SQLiteDatabase *v6;
  WebCore *IsUserInitiated;
  WTF::MemoryPressureHandler *v8;
  int v9;
  WTF::MemoryPressureHandler *v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::String *v16;
  const WTF::String *v17;
  const WTF::String *v18;
  const WTF::String *v19;
  const WTF::String *v20;
  BOOL v21;
  uint64_t v22;
  WebCore::LegacySchemeRegistry *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::LegacySchemeRegistry *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  NSObject *v35;
  _BOOL8 v36;
  int v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  _DWORD *v41;
  _QWORD *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WebCore::LegacySchemeRegistry *v45;
  uint64_t v46;
  WebCore::LegacySchemeRegistry *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _BYTE buf[18];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  *a3 = 0;
  v50 = v5;
  WebKit::AuxiliaryProcess::applyProcessCreationParameters((WebKit::AuxiliaryProcess *)a1, (WTF::StringImpl **)a2);
  v6 = (WebCore::SQLiteDatabase *)WTF::setProcessPrivileges();
  WebCore::SQLiteDatabase::useFastMalloc(v6);
  WebCore::NetworkStorageSession::permitProcessToUseCookieAPI((WebCore::NetworkStorageSession *)1);
  WebKit::NetworkProcess::platformInitializeNetworkProcess((WebKit *)a1, (WebKit::NetworkProcess *)a2);
  IsUserInitiated = (WebCore *)WTF::Thread::setCurrentThreadIsUserInitiated(0);
  v8 = (WTF::MemoryPressureHandler *)WebCore::initializeCommonAtomStrings(IsUserInitiated);
  v9 = *(unsigned __int8 *)(a2 + 33);
  *(_BYTE *)(a1 + 138) = v9;
  if (!v9)
  {
    v10 = (WTF::MemoryPressureHandler *)WTF::MemoryPressureHandler::singleton(v8);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    v11 = *(unsigned int **)(a1 + 8);
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = &off_1E34BE2B0;
    v13[1] = v11;
    v14 = *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 6) = v13;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    WTF::MemoryPressureHandler::install(v10);
  }
  WebKit::NetworkProcess::setCacheModel(a1, *(unsigned __int8 *)(a2 + 32));
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 144);
  *(_WORD *)(a1 + 393) = *(_WORD *)(a2 + 145);
  v15 = *(unsigned int *)(a2 + 180);
  if ((_DWORD)v15)
  {
    v38 = *(uint64_t **)(a2 + 168);
    v39 = &v38[2 * v15];
    do
    {
      v40 = *v38;
      *(_QWORD *)buf = *v38;
      v41 = (_DWORD *)v38[1];
      if (v41)
      {
        *v41 += 2;
        v40 = *(_QWORD *)buf;
      }
      *(_QWORD *)&buf[8] = v41;
      v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v42 = off_1E34BE2D8;
      v49 = v42;
      WebKit::NetworkProcess::addAllowedFirstPartyForCookies(a1, v40, (WTF::ASCIICaseInsensitiveHash **)&buf[8], 0, (uint64_t *)&v49);
      if (v49)
        (*(void (**)(_QWORD *))(*v49 + 8))(v49);
      v44 = *(WTF::StringImpl **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v43);
        else
          *(_DWORD *)v44 -= 2;
      }
      v38 += 2;
    }
    while (v38 != v39);
  }
  v16 = *(const WTF::String **)(a1 + 192);
  v17 = (const WTF::String *)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::begin(v16);
  v19 = v17;
  v20 = v18;
  if (v16)
    v16 = (const WTF::String *)((char *)v16 + 24 * *((unsigned int *)v16 - 1));
  if (v16 != v17)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 2) + 24))(*((_QWORD *)v19 + 2), a2);
      while (1)
      {
        v19 = (const WTF::String *)((char *)v19 + 24);
        if (v19 == v20)
          break;
        if (*(_QWORD *)v19)
          v21 = *(_QWORD *)v19 == -1;
        else
          v21 = 1;
        if (!v21)
          goto LABEL_17;
      }
      v19 = v20;
LABEL_17:
      ;
    }
    while (v19 != v16);
  }
  v22 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v22)
  {
    v23 = *(WebCore::LegacySchemeRegistry **)(a2 + 80);
    v24 = 8 * v22;
    do
    {
      WebCore::LegacySchemeRegistry::registerURLSchemeAsSecure(v23, v18);
      v23 = (WebCore::LegacySchemeRegistry *)((char *)v23 + 8);
      v24 -= 8;
    }
    while (v24);
  }
  v25 = *(unsigned int *)(a2 + 108);
  if ((_DWORD)v25)
  {
    v26 = *(WebCore::LegacySchemeRegistry **)(a2 + 96);
    v27 = 8 * v25;
    do
    {
      WebCore::LegacySchemeRegistry::registerURLSchemeAsBypassingContentSecurityPolicy(v26, v18);
      v26 = (WebCore::LegacySchemeRegistry *)((char *)v26 + 8);
      v27 -= 8;
    }
    while (v27);
  }
  v28 = *(unsigned int *)(a2 + 124);
  if ((_DWORD)v28)
  {
    v45 = *(WebCore::LegacySchemeRegistry **)(a2 + 112);
    v46 = 8 * v28;
    do
    {
      WebCore::LegacySchemeRegistry::registerURLSchemeAsLocal(v45, v18);
      v45 = (WebCore::LegacySchemeRegistry *)((char *)v45 + 8);
      v46 -= 8;
    }
    while (v46);
  }
  v29 = *(unsigned int *)(a2 + 140);
  if ((_DWORD)v29)
  {
    v47 = *(WebCore::LegacySchemeRegistry **)(a2 + 128);
    v48 = 8 * v29;
    do
    {
      WebCore::LegacySchemeRegistry::registerURLSchemeAsNoAccess(v47, v18);
      v47 = (WebCore::LegacySchemeRegistry *)((char *)v47 + 8);
      v48 -= 8;
    }
    while (v48);
  }
  v30 = *(_DWORD *)(a2 + 164);
  if (v30)
  {
    v31 = *(_QWORD *)(a2 + 152);
    v32 = 704 * v30;
    do
    {
      WebKit::NetworkProcess::addWebsiteDataStore(a1, v31);
      v31 += 704;
      v32 -= 704;
    }
    while (v32);
  }
  v33 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  v34 = *(WTF::StringImpl ***)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v33;
  if (v34)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v18);
  WebCore::NetworkStorageSession::updateStorageAccessPromptQuirks();
  v35 = qword_1ECE71C68;
  v36 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
  if (v36)
  {
    v37 = WebCore::presentingApplicationPID((WebCore *)v36);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v37;
    _os_log_impl(&dword_196BCC000, v35, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcess::initializeNetworkProcess: Presenting processPID=%d", buf, 0x12u);
  }
  WTF::CompletionHandlerCallingScope::~CompletionHandlerCallingScope((WTF::CompletionHandlerCallingScope *)&v50);
}

WTF::StringImpl **WebKit::LegacyCustomProtocolManager::initialize(WebKit::LegacyCustomProtocolManager *this, const WebKit::NetworkProcessCreationParameters *a2)
{
  WTF::StringImpl **result;
  uint64_t v5;
  WTF::ASCIICaseInsensitiveHash **v6;
  uint64_t v7;

  result = (WTF::StringImpl **)WTF::isIntegralOrPointerType(this);
  v5 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v5)
  {
    v6 = (WTF::ASCIICaseInsensitiveHash **)*((_QWORD *)a2 + 5);
    v7 = 8 * v5;
    do
    {
      result = WebKit::LegacyCustomProtocolManager::registerScheme(this, v6++);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl **WebKit::LegacyCustomProtocolManager::registerScheme(WebKit::LegacyCustomProtocolManager *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  unsigned __int8 *v4;
  WTF::StringImpl **result;
  int v7;
  _BYTE v8[24];

  v4 = (unsigned __int8 *)this + 56;
  if (__ldaxr((unsigned __int8 *)this + 56))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEABB3C]((char *)this + 56);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 6, a2, (uint64_t)v8);
  v7 = __ldxr(v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, v4))
      return result;
  }
  else
  {
    __clrex();
  }
  return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

void sub_196D31B68(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebKit::NetworkProcess::platformInitializeNetworkProcess(WebKit *a1, WebKit::NetworkProcess *a2)
{
  WebKit::initializeSecItemShim(a1, a2);
  WebKit::NetworkProcess::platformInitializeNetworkProcessCocoa((uint64_t)a1, (uint64_t)a2);
}

uint64_t WebKit::initializeSecItemShim(WebKit *this, WebKit::NetworkProcess *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if ((byte_1ECE729F1 & 1) != 0)
  {
    v6 = (unsigned int *)qword_1ECE72A00;
    qword_1ECE72A00 = (uint64_t)v4;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v3);
      }
    }
  }
  else
  {
    byte_1ECE729F1 = 1;
    qword_1ECE72A00 = (uint64_t)v4;
  }
  return _CFURLConnectionSetFrameworkStubs();
}

uint64_t WebKit::NetworkProcess::setCacheModel(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = result;
  if (!*(_BYTE *)(result + 136) || *(unsigned __int8 *)(result + 137) != a2)
  {
    *(_BYTE *)(result + 136) = 1;
    *(_BYTE *)(result + 137) = a2;
    v3 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v3 = off_1E34BEC60;
    v4 = v3;
    WebKit::NetworkProcess::forEachNetworkSession(v2, &v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

_QWORD *WebKit::NetworkProcess::forEachNetworkSession(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 208));
  v5 = result;
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 208);
  if (v8)
    v9 = (_QWORD *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 != result)
  {
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, v5[1]);
      while (1)
      {
        v5 += 2;
        if (v5 == v7)
          break;
        if ((unint64_t)(*v5 + 1) > 1)
          goto LABEL_10;
      }
      v5 = v7;
LABEL_10:
      ;
    }
    while (v5 != v9);
  }
  return result;
}

void WTF::CompletionHandlerCallingScope::~CompletionHandlerCallingScope(WTF::CompletionHandlerCallingScope *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

IPC::Encoder *IPC::handleMessageAsync<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkProcess *,void ()(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkProcess::*)::{lambda(Messages::NetworkProcess::InitializeNetworkProcess &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *a1;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2933;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24InitializeNetworkProcessEN6WebKit14NetworkProcessES8_FvONS7_32NetworkProcessCreationParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B0D60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages14NetworkProcess24InitializeNetworkProcessEN6WebKit14NetworkProcessES8_FvONS7_32NetworkProcessCreationParametersEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcess,WebKit::NetworkProcess,void ()(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkProcess *,void ()(WebKit::NetworkProcessCreationParameters &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkProcess::*)::{lambda(Messages::NetworkProcess::InitializeNetworkProcess &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

void IPC::Decoder::decode<std::tuple<WebKit::NetworkProcessCreationParameters>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebKit::NetworkProcessCreationParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[208])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::NetworkProcessCreationParameters>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  void *v3;
  int v4;
  uint64_t v5[26];
  unsigned __int8 v6;

  IPC::Decoder::decode<WebKit::NetworkProcessCreationParameters>(v5, a2);
  if (v6)
  {
    WebKit::NetworkProcessCreationParameters::NetworkProcessCreationParameters((uint64_t)a1, v5);
    v4 = v6;
    a1[208] = 1;
    if (v4)
      WebKit::NetworkProcessCreationParameters::~NetworkProcessCreationParameters((WebKit::NetworkProcessCreationParameters *)v5, v3);
  }
  else
  {
    *a1 = 0;
    a1[208] = 0;
  }
}

uint64_t IPC::Decoder::decode<WebKit::NetworkProcessCreationParameters>(_BYTE *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::NetworkProcessCreationParameters,void>::decode(a2, a1);
  if (!a1[208])
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::handleLowMemoryWarning(unsigned __int8 **this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v2 = &off_1E34C6FD8;
  v2[1] = this;
  v2[2] = this;
  v4 = (uint64_t)v2;
  WTF::SuspendableWorkQueue::dispatch();
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

uint64_t WebKit::NetworkSession::lowMemoryHandler(uint64_t a1)
{
  WebCore::SWServer *v2;

  WebKit::PrefetchCache::clear((WebKit::PrefetchCache *)(a1 + 512));
  v2 = *(WebCore::SWServer **)(a1 + 768);
  if (v2)
    WebCore::SWServer::handleLowMemoryWarning(v2);
  return WebKit::NetworkStorageManager::handleLowMemoryWarning(*(unsigned __int8 ***)(a1 + 800));
}

WTF *WebKit::PrefetchCache::clear(WebKit::PrefetchCache *this)
{
  unint64_t v2;
  unint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  void *v8;
  WTF *result;
  WTF **v10;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebKit::PrefetchCache *)((char *)this + 40));
  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  if (v2 <= v3)
  {
    v7 = (WTF::StringImpl *)((char *)v4 + 48 * v3);
    v6 = (WTF::StringImpl *)((char *)v4 + 48 * v2);
  }
  else
  {
    WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct(v4, (WTF::StringImpl *)((char *)v4 + 48 * v3));
    v5 = *((_QWORD *)this + 3);
    v6 = (WTF::StringImpl *)(v5 + 48 * *((_QWORD *)this + 1));
    v7 = (WTF::StringImpl *)(v5 + 48 * *((unsigned int *)this + 8));
  }
  WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct(v6, v7);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  result = (WTF *)*((_QWORD *)this + 3);
  if (result)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    result = (WTF *)WTF::fastFree(result, v8);
  }
  v10 = *(WTF ***)this;
  if (*(_QWORD *)this)
  {
    result = *v10;
    if (*v10)
    {
      *v10 = 0;
      return (WTF *)WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::deallocateTable((uint64_t)result, (WTF::StringImpl *)v8);
    }
  }
  return result;
}

uint64_t WebKit::NetworkStorageManager::suspend(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  if ((v3 & 0x8000000000000000) == 0 || v3 == -1)
  {
    v4 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v8[0]) = 134217984;
      *(_QWORD *)((char *)v8 + 4) = a1;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - NetworkStorageManager::suspend()", (uint8_t *)v8, 0xCu);
    }
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v5 = &off_1E34C6FB0;
    v5[1] = a1;
    v5[2] = a1;
    v8[0] = v5;
    WTF::SuspendableWorkQueue::suspend();
    result = v8[0];
    v8[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

void WebKit::NetworkProcess::platformFlushCookies(uint64_t a1, const void *a2, uint64_t *a3)
{
  WebCore::NetworkStorageSession *v4;
  CFTypeRef v5;
  CFTypeRef cf;

  cf = a2;
  v4 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 216), &cf);
  if (v4)
  {
    WebCore::NetworkStorageSession::nsCookieStorage(v4);
    WebKit::saveCookies((void *)cf, a3);
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a3);
  }
}

void sub_196D32318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::TextRecognitionWordData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 6;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::RemoteRenderingBackendProxy,WebKit::RemoteRenderingBackendProxy>(WebCore::TimerBase *a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E34B3740;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E34E3AF8;
  v4[1] = WebKit::RemoteRenderingBackendProxy::destroyGetPixelBufferSharedMemory;
  v4[2] = 0;
  v4[3] = a2;
  *((_QWORD *)a1 + 6) = v4;
  return a1;
}

uint64_t WebKit::WebPageProxy::applicationDidBecomeActive(WebKit::WebPageProxy *this)
{
  WebKit::VideoPresentationManagerProxy *v2;
  uint64_t v3;
  char v5;

  v2 = (WebKit::VideoPresentationManagerProxy *)*((_QWORD *)this + 48);
  if (v2)
    WebKit::VideoPresentationManagerProxy::applicationDidBecomeActive(v2);
  v3 = *((_QWORD *)this + 26);
  v5 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ApplicationDidBecomeActive>(v3, (uint64_t)&v5, *(_QWORD *)(*((_QWORD *)this + 4) + 1896), 0);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ApplicationDidBecomeActive>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2105;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

void sub_196D324FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_196D32620(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WebCore::ScrollableAreaParameters>(uint64_t *a1)
{
  unsigned __int16 v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  char v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 v51;
  unsigned __int16 v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 v55;
  unsigned __int16 v56;
  unsigned __int16 v57;
  char v58;
  int v59;
  unsigned __int16 v60;
  unsigned __int16 v61;
  unsigned __int16 v62;
  unsigned __int16 v63;
  unsigned __int16 v64;

  v60 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  v64 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  v63 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  v62 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  v61 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  v2 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
    goto LABEL_35;
  v6 = (unsigned __int8 *)(v4 + v5);
  v7 = v4 + v5 + 1;
  a1[2] = v7;
  if (!v4)
  {
    v33 = v3;
    v34 = 0;
    goto LABEL_36;
  }
  v8 = *v6;
  if (v8 >= 2)
    goto LABEL_38;
  v58 = 1;
  v59 = 0;
LABEL_5:
  v9 = v7 - v4;
  if (v3 <= v9)
  {
    v38 = 0;
    v53 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v3 && v53)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
      v4 = *a1;
      v38 = a1[1];
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v10 = (unsigned __int8 *)(v4 + v9);
    a1[2] = (uint64_t)(v10 + 1);
    if (v4)
    {
      v11 = *v10;
      if (v11 < 2)
      {
        v12 = 0;
        v13 = 1;
        goto LABEL_9;
      }
      goto LABEL_42;
    }
    v38 = v3;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v39 = a1[3];
    if (v39 && v38)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v4, v38);
      v11 = 0;
      v4 = *a1;
      v3 = a1[1];
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v11 = 0;
    }
LABEL_42:
    *a1 = 0;
    a1[1] = 0;
    v40 = a1[3];
    if (v40 && v3)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v4);
    v13 = 0;
    v12 = 1;
LABEL_9:
    v14 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
    v15 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>(a1);
    v3 = a1[1];
    v16 = *a1;
    v17 = a1[2] - *a1;
    if (v3 <= v17)
    {
      v41 = 0;
      v42 = 0;
      *a1 = 0;
      a1[1] = 0;
      v43 = a1[3];
      if (v43)
      {
        v52 = v15;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(a1[3]);
          v42 = *a1;
          v41 = a1[1];
        }
        else
        {
          v41 = 0;
          v42 = 0;
        }
        v15 = v52;
      }
      goto LABEL_45;
    }
    v18 = (unsigned __int8 *)(v16 + v17);
    v19 = v16 + v17 + 1;
    a1[2] = v19;
    if (!v16)
    {
      v41 = v3;
      v42 = 0;
LABEL_45:
      *a1 = 0;
      a1[1] = 0;
      v44 = a1[3];
      if (v44)
      {
        v51 = v15;
        if (v41)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v44 + 16))(a1[3], v42, v41);
          v16 = *a1;
          v3 = a1[1];
        }
        else
        {
          v3 = 0;
          v16 = 0;
        }
        v15 = v51;
      }
      else
      {
        v3 = 0;
        v16 = 0;
      }
      goto LABEL_47;
    }
    if (*v18 < 2u)
    {
      v20 = 0;
      goto LABEL_13;
    }
LABEL_47:
    *a1 = 0;
    a1[1] = 0;
    v45 = a1[3];
    if (!v45)
    {
      v16 = 0;
      v20 = 1;
      goto LABEL_49;
    }
    v57 = v15;
    if (!v3)
    {
      v45 = 0;
      v16 = 0;
      v20 = 1;
      goto LABEL_88;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v16);
    v16 = *a1;
    v3 = a1[1];
    v20 = 1;
    v19 = a1[2];
    v15 = v57;
LABEL_13:
    v21 = v19 - v16;
    if (v3 <= v21)
    {
      v57 = v15;
      v45 = 0;
      v54 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v54 && v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
        v16 = *a1;
        v45 = a1[1];
      }
      else
      {
        v16 = 0;
      }
LABEL_88:
      v15 = v57;
LABEL_49:
      *a1 = 0;
      a1[1] = 0;
      v46 = a1[3];
      if (v46)
      {
        v56 = v15;
        if (v45)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v46 + 16))(v46, v16, v45);
          v16 = *a1;
          v3 = a1[1];
        }
        else
        {
          v3 = 0;
          v16 = 0;
        }
        v15 = v56;
      }
      else
      {
        v3 = 0;
        v16 = 0;
      }
      goto LABEL_51;
    }
    v22 = (unsigned __int8 *)(v16 + v21);
    a1[2] = (uint64_t)(v22 + 1);
    if (!v16)
    {
      v45 = v3;
      goto LABEL_49;
    }
    v23 = *v22;
    if (v23 < 3)
    {
      v24 = v23 | 0x100;
      goto LABEL_17;
    }
LABEL_51:
    v47 = 0;
    *a1 = 0;
    a1[1] = 0;
    v48 = a1[3];
    if (!v48)
      goto LABEL_52;
    v55 = v15;
    if (!v3)
      break;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v16);
    v47 = *a1;
    v15 = v55;
    if (!*a1)
      goto LABEL_52;
    v24 = 0;
LABEL_17:
    v25 = v60;
    v27 = v63;
    v26 = v64;
    v28 = v62;
    v29 = v61;
    if (v60 > 0xFFu
      && v64 > 0xFFu
      && v63 > 0xFFu
      && v62 > 0xFFu
      && v61 > 0xFFu
      && v2 > 0xFFu
      && !v59
      && !v12
      && v14 > 0xFFu
      && v15 > 0xFFu
      && !v20
      && v24 > 0xFF)
    {
      goto LABEL_29;
    }
    __break(1u);
LABEL_35:
    v33 = 0;
    v34 = 0;
    *a1 = 0;
    a1[1] = 0;
    v35 = a1[3];
    if (v35)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        v34 = *a1;
        v33 = a1[1];
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
    }
LABEL_36:
    *a1 = 0;
    a1[1] = 0;
    v36 = a1[3];
    if (v36 && v33)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v36 + 16))(v36, v34, v33);
      v8 = 0;
      v4 = *a1;
      v3 = a1[1];
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v8 = 0;
    }
LABEL_38:
    *a1 = 0;
    a1[1] = 0;
    v37 = a1[3];
    if (v37 && v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v4);
      v4 = *a1;
      v3 = a1[1];
      v58 = 0;
      v59 = 1;
      v7 = a1[2];
      goto LABEL_5;
    }
    v38 = 0;
    v4 = 0;
    v58 = 0;
    v59 = 1;
  }
  v47 = 0;
LABEL_52:
  v49 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v50 = a1[3];
  if (v50)
  {
    if (v49)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(a1[3], v47);
    v25 = 0;
  }
  else
  {
    v25 = 0;
  }
  v27 = v63;
  v26 = v64;
  v28 = v62;
  v29 = v61;
LABEL_29:
  v30 = 0x1000000000000;
  if ((v58 & (v8 != 0)) == 0)
    v30 = 0;
  v31 = 0x100000000000000;
  if ((v13 & (v11 != 0)) == 0)
    v31 = 0;
  return v25 | (v30 | v31) & 0xFFFFFFFF000000FFLL | ((unint64_t)v2 << 40) | ((unint64_t)v29 << 32) | ((unint64_t)v28 << 24) | ((unint64_t)v27 << 16) | ((unint64_t)v26 << 8);
}

uint64_t IPC::Decoder::decode<WebCore::BackgroundFetchResult>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v7 = 0;
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    v9 = a1[3];
    if (v9)
    {
      v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        a1 = v12;
        v8 = *v12;
        v7 = v12[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
    }
    goto LABEL_7;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v7 = v1;
    v8 = 0;
LABEL_7:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        v2 = *v11;
        v1 = v11[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_8;
  }
  v5 = *v4;
  if (v5 < 3)
    return v5 | 0x100;
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v2);
    return 0;
  }
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::createNetworkingContext@<X0>(WebKit::WebLocalFrameLoaderClient *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = *((_QWORD *)this + 2);
  result = WTF::fastMalloc((WTF *)0x18);
  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(v3 + 24);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && !*(_BYTE *)(v7 + 144))
  {
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = &unk_1E34D3A68;
    result = (uint64_t)WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 16), v7);
    v8 = *(unsigned int **)(v7 + 16);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  else
  {
    v8 = 0;
    *(_DWORD *)(result + 8) = 1;
  }
  v5[2] = v8;
  *v5 = &off_1E34D39E0;
  *a2 = v5;
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteDisplayListRecorder,WTF::RefPtr<WebKit::RemoteDisplayListRecorder,WTF::RawPtrTraits<WebKit::RemoteDisplayListRecorder>,WTF::DefaultRefDerefTraits<WebKit::RemoteDisplayListRecorder>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 == *a2)
    return v2 + 16 * v7;
  v10 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v10) & v3;
    v8 = *(_QWORD *)(v2 + 16 * v7);
    ++v10;
    if (v8 == *a2)
      return v2 + 16 * v7;
  }
  return v2 + 16 * *(unsigned int *)(v2 - 4);
}

double WebKit::WebChromeClient::eventThrottlingDelay(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (*(unsigned __int16 *)(*(_QWORD *)(v2 + 48) + 1133) >= 0x100u)
  {
    if (*(_WORD *)(*(_QWORD *)(v2 + 48) + 1133))
      v3 = 1.0;
    else
      v3 = 0.0;
  }
  else
  {
    v3 = 0.0;
    if (!*(_BYTE *)(v2 + 1293))
    {
      v4 = *(double *)(v2 + 1304);
      v5 = v4 + v4;
      if (v4 + v4 > 1.0)
        v5 = 1.0;
      if (v4 > 0.0166666667)
        v3 = v5;
      else
        v3 = 0.0;
    }
  }
  if (v1)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return v3;
}

void sub_196D33D3C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::PageClientImpl *WebKit::PageClientImpl::PageClientImpl(WebKit::PageClientImpl *this, WKContentView *a2, WKWebView *a3)
{
  WebKit::PageClientImplCocoa *v5;

  v5 = WebKit::PageClientImplCocoa::PageClientImplCocoa(this, a3);
  *(_QWORD *)v5 = off_1E34CCF90;
  *((_QWORD *)v5 + 4) = &unk_1E34CD738;
  *((_QWORD *)v5 + 5) = 0;
  objc_initWeak((id *)v5 + 5, a2);
  *((_QWORD *)this + 6) = objc_alloc_init(WKEditorUndoTarget);
  return this;
}

void sub_196D33DBC(_Unwind_Exception *a1)
{
  WebKit::PageClientImplCocoa *v1;
  id *v2;

  objc_destroyWeak(v2);
  WebKit::PageClientImplCocoa::~PageClientImplCocoa(v1);
  _Unwind_Resume(a1);
}

WebKit::PageClientImplCocoa *WebKit::PageClientImplCocoa::PageClientImplCocoa(WebKit::PageClientImplCocoa *this, WKWebView *a2)
{
  _QWORD *v3;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_1E34C7E88;
  *((_QWORD *)this + 2) = 0;
  objc_initWeak((id *)this + 2, a2);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = 0;
  v3[1] = 0;
  *((_QWORD *)this + 3) = v3;
  return this;
}

void sub_196D33E3C(_Unwind_Exception *a1)
{
  unsigned int **v1;
  id *v2;
  void *v4;

  objc_destroyWeak(v2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1, v4);
  _Unwind_Resume(a1);
}

void sub_196D33F28(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition(WebKit::InteractionInformationAtPosition *this, void *a2)
{
  WTF *v3;
  const void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  WTF *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v3 = (WTF *)*((_QWORD *)this + 78);
  if (v3)
  {
    *((_QWORD *)this + 78) = 0;
    *((_DWORD *)this + 158) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (const void *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 47);
  if ((v6 & 0x8000000000000) != 0)
  {
    v20 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  v7 = (_DWORD *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = (WTF *)*((_QWORD *)this + 41);
  if (v10)
  {
    *((_QWORD *)this + 41) = 0;
    *((_DWORD *)this + 84) = 0;
    WTF::fastFree(v10, a2);
  }
  if (*((_BYTE *)this + 272))
  {
    v11 = (_DWORD *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (v11)
    {
      if (v11[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      else
        --v11[2];
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v14)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v14, a2);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v19 -= 2;
  }
}

void WebKit::FocusedElementInformation::~FocusedElementInformation(WebKit::FocusedElementInformation *this, void *a2)
{
  void *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 344, a2);
  v4 = *((_QWORD *)this + 42);
  if ((v4 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v3);
    }
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v3);
    else
      *(_DWORD *)v10 -= 2;
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 200, v3);
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
}

void WebKit::DragDropInteractionState::~DragDropInteractionState(WebKit::DragDropInteractionState *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  v3 = *((_QWORD *)this + 53);
  if (v3)
    WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 52);
  if (v4)
    WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::deallocateTable(v4, a2);
  WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 400, a2);
  std::__optional_destruct_base<WebKit::DragSourceState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 80, v5);
  v6 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    CFRelease(v6);
  _Block_release(*((const void **)this + 8));
  _Block_release(*((const void **)this + 7));
  v7 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
    CFRelease(v8);
}

void WebKit::PageClientImplCocoa::~PageClientImplCocoa(WebKit::PageClientImplCocoa *this)
{
  _QWORD *v2;
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34C7E88;
  v4 = (WTF *)*((_QWORD *)this + 3);
  v2 = (_QWORD *)((char *)this + 24);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebCore::AlternativeTextUIController>::operator()[abi:sn180100]((int)v2, v3);
  objc_destroyWeak((id *)this + 2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

void WebKit::PageClientImpl::~PageClientImpl(WebKit::PageClientImpl *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    CFRelease(v2);
  objc_destroyWeak((id *)this + 5);
  WebKit::PageClientImplCocoa::~PageClientImplCocoa(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::PageClientImpl::~PageClientImpl(this);
  WTF::fastFree(v1, v2);
}

uint64_t WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::Color>::destruct(*(_QWORD **)a1, (_QWORD *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::DragSourceState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::DragSourceState>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 312 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess22TakeAllMessagesForPortEN6WebKit29NetworkConnectionToWebProcessES8_FvRKN7WebCore21MessagePortIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS9_23MessageWithMessagePortsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEyEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_yEE4callESJ_y(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  void *v23;
  IPC::Encoder *result;
  WTF *v25;
  void *v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  void *v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  IPC::Encoder *v37;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2876;
  *(_QWORD *)(v7 + 8) = v6;
  v8 = (void *)(v7 + 16);
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v37 = (IPC::Encoder *)v7;
  v9 = *(unsigned int *)(a2 + 12);
  v10 = *(_QWORD *)(v7 + 544);
  v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v11 + 8;
  v13 = *(_QWORD *)(v7 + 552);
  if (v13 < v11 + 8)
  {
    v27 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v28 = v27;
      v27 *= 2;
    }
    while (v28 < v12);
    v29 = (char *)mmap(0, v28, 3, 4098, -1, 0);
    if (v29 == (char *)-1)
      goto LABEL_24;
    v14 = v29;
    memcpy(v29, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
    v30 = *(void **)(v7 + 528);
    if (v30 != v8)
      munmap(v30, *(_QWORD *)(v7 + 552));
    *(_QWORD *)(v7 + 528) = v14;
    *(_QWORD *)(v7 + 552) = v28;
    v10 = *(_QWORD *)(v7 + 544);
  }
  else
  {
    v14 = *(char **)(v7 + 528);
  }
  bzero(&v14[v10], v11 - v10);
  *(_QWORD *)(v7 + 544) = v12;
  v15 = (_QWORD *)(*(_QWORD *)(v7 + 528) + v11);
  *(_QWORD *)(v7 + 536) = v15 + 1;
  *v15 = v9;
  v16 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v16)
  {
    v35 = *(uint64_t **)a2;
    v36 = 24 * v16;
    do
    {
      IPC::ArgumentCoder<WebCore::MessageWithMessagePorts,void>::encode((IPC::Encoder *)v7, v35);
      v35 += 3;
      v36 -= 24;
    }
    while (v36);
  }
  v17 = *(_QWORD *)(v7 + 544);
  v18 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = v18 + 8;
  v20 = *(_QWORD *)(v7 + 552);
  if (v20 >= v18 + 8)
  {
    v21 = *(char **)(v7 + 528);
    goto LABEL_6;
  }
  v31 = (2 * v20 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v32 = v31;
    v31 *= 2;
  }
  while (v32 < v19);
  v33 = (char *)mmap(0, v32, 3, 4098, -1, 0);
  if (v33 == (char *)-1)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x196D3488CLL);
  }
  v21 = v33;
  memcpy(v33, *(const void **)(v7 + 528), *(_QWORD *)(v7 + 544));
  v34 = *(void **)(v7 + 528);
  if (v34 != v8)
    munmap(v34, *(_QWORD *)(v7 + 552));
  *(_QWORD *)(v7 + 528) = v21;
  *(_QWORD *)(v7 + 552) = v32;
  v17 = *(_QWORD *)(v7 + 544);
LABEL_6:
  bzero(&v21[v17], v18 - v17);
  *(_QWORD *)(v7 + 544) = v19;
  v22 = (_QWORD *)(*(_QWORD *)(v7 + 528) + v18);
  *(_QWORD *)(v7 + 536) = v22 + 1;
  *v22 = a3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v37, 0, 0);
  result = v37;
  v37 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v23);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (uint64_t *)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = (uint64_t *)(v20 + 16 * v27);
          v30 = v29[1];
          v29[1] = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          *v29 = *v16;
          v31 = v6 + 16 * v13;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          v29[1] = v32;
          v33 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          if (v16 == a3)
            v14 = v29;
        }
        else
        {
          v18 = v6 + 16 * v13;
          v19 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

WebKit::WebFrame *WebKit::WebLocalFrameLoaderClient::finishedLoading(WebKit::WebFrame **this, WebCore::DocumentLoader *a2)
{
  WebKit::WebFrame *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  void *v8;
  WebCore::FragmentedSharedBuffer *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebCore::SharedBuffer *v14[2];
  WebCore::FragmentedSharedBuffer *v15;
  uint64_t v16;

  if (*((_BYTE *)this + 50))
  {
    result = (WebKit::WebFrame *)WebKit::WebFrame::page(this[2]);
    if (!result)
      return result;
    v5 = (uint64_t)result;
    CFRetain(*((CFTypeRef *)result + 1));
    WebCore::DocumentLoader::mainResourceData(a2);
    if (v15
      && (WebCore::FragmentedSharedBuffer::makeContiguous(v15),
          v6 = (unsigned int *)v14[0],
          v7 = (unsigned int *)v15,
          v15 = 0,
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v7, v8),
          v14[0]))
    {
      v9 = (WebCore::FragmentedSharedBuffer *)WebCore::SharedBuffer::data(v14[0]);
      v10 = *((_QWORD *)v14[0] + 6);
      v15 = v9;
      v16 = v10;
    }
    else
    {
      v6 = 0;
      v15 = 0;
      v16 = 0;
    }
    WebCore::ResourceResponseBase::suggestedFilename((WebCore::DocumentLoader *)((char *)a2 + 1272));
    v14[0] = (WebCore::SharedBuffer *)&v13;
    v14[1] = (WebCore::SharedBuffer *)&v15;
    IPC::MessageSender::send<Messages::WebPageProxy::DidFinishLoadingDataForCustomContentProvider>(v5 + 32, (uint64_t)v14);
    v12 = v13;
    v13 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (v6)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v11);
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  result = this[5];
  if (result)
  {
    if (*((_BYTE *)this + 48)
      || (WebKit::PluginView::manualLoadDidReceiveResponse(result, (CFTypeRef *)a2 + 159), (result = this[5]) != 0))
    {
      WebKit::PluginView::manualLoadDidFinishLoading((unsigned __int8 *)result);
      result = this[5];
      this[5] = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (WebKit::WebFrame *)(*(uint64_t (**)(WebKit::WebFrame *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
      *((_BYTE *)this + 48) = 0;
    }
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setTextAutosizingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setPunchOutWhiteBackgroundsInDarkMode(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

unsigned int *WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WebKit::WebPageInspectorTarget *>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  int i;
  unsigned int v14;
  unsigned int *v15;
  WTF *v16;
  unsigned int *result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (unsigned int *)(v8 + 16 * (v11 & v9));
    v16 = *(WTF **)v15;
    if (!*(_QWORD *)v15)
    {
      if (v12)
      {
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        --*(_DWORD *)(*a1 - 16);
        v15 = v12;
      }
      WTF::String::operator=((WTF::StringImpl **)v15, (WTF::StringImpl *)a2);
      result = WTF::GenericHashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPageInspectorTarget *>((unsigned int **)v15 + 1, *a3);
      v18 = *a1;
      if (*a1)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *a1;
      if (*a1)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_16;
      }
      else if (3 * v23 > 4 * v22)
      {
LABEL_16:
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v20 + 16 * v23;
        *(_BYTE *)(a4 + 16) = 1;
        return result;
      }
      result = (unsigned int *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
      v15 = result;
      v20 = *a1;
      if (*a1)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_16;
    }
    if (v16 == (WTF *)-1)
    {
      v12 = (unsigned int *)(v8 + 16 * v14);
      goto LABEL_25;
    }
    if (WTF::equal(v16, *a2, (const WTF::StringImpl *)a3))
      break;
LABEL_25:
    v11 = i + v14;
  }
  v25 = *a1;
  if (*a1)
    v26 = *(unsigned int *)(v25 - 4);
  else
    v26 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v25 + 16 * v26;
  *(_BYTE *)(a4 + 16) = 0;
  v27 = *a3;
  if (*a3)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v27 + 2, (uint64_t)*a3);
    v28 = (unsigned int *)*((_QWORD *)v27 + 1);
    if (v28)
    {
      do
        v31 = __ldaxr(v28);
      while (__stlxr(v31 + 1, v28));
      v15 = *(unsigned int **)a4;
    }
  }
  else
  {
    v28 = 0;
  }
  result = (unsigned int *)*((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v28;
  if (result)
  {
    do
    {
      v29 = __ldaxr(result);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, result));
    if (!v30)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v24);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  void *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (WTF::StringImpl **)v6;
    do
    {
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (*v16)
        {
          v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, v16);
          WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::~KeyValuePair((uint64_t)v16, v18);
          if (v16 == a3)
            v13 = v17;
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::~KeyValuePair((uint64_t)v16, v10);
        }
      }
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_16;
  }
  result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

unsigned int *WTF::GenericHashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::assignToEmpty<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WebKit::WebPageInspectorTarget *>(unsigned int **a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v8;

  if (a2)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
    v3 = (unsigned int *)*((_QWORD *)a2 + 1);
    if (v3)
    {
      do
        v8 = __ldaxr(v3);
      while (__stlxr(v8 + 1, v3));
    }
  }
  else
  {
    v3 = 0;
  }
  result = *a1;
  *a1 = v3;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::TextGranularity>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::TextGranularity,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::setCacheMaxAgeCap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 32);
      v7 = *(_QWORD *)(v3 + 24);
      if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 216), &v7))
      {
        WebCore::NetworkStorageSession::setCacheMaxAgeCapForPrevalentResources();
      }
    }
  }
  v5 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo::~RootLayerInfo(WebKit::RemoteLayerTreeDrawingArea::RootLayerInfo *this)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[2];
  }
  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
}

_QWORD *WTF::ProcessQualifiedStringTypeAdapter::writeTo<unsigned char>(_QWORD *result, char *__dst)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  _BYTE v12[25];
  uint64_t v13;

  v3 = result;
  v4 = 0;
  v13 = *MEMORY[0x1E0C80C00];
  v5 = *result;
  v6 = *result;
  do
  {
    ++v4;
    v7 = v6 > 9;
    v6 /= 0xAuLL;
  }
  while (v7);
  v8 = 0;
  do
  {
    v12[v8-- + 24] = (v5 % 0xA) | 0x30;
    v7 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v7);
  if (v8 + 26 <= 25)
    result = memcpy(__dst, &v12[v8 + 25], -v8);
  v9 = 0;
  v10 = &__dst[v4];
  *v10 = 45;
  v11 = v3[1];
  do
  {
    v12[v9-- + 24] = (v11 % 0xA) | 0x30;
    v7 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v7);
  if (v9 + 26 <= 25)
    return memcpy(v10 + 1, &v12[v9 + 25], -v9);
  return result;
}

__n128 WebKit::WebPageProxyFrameLoadStateObserver::didReceiveProvisionalURL(WebKit::WebPageProxyFrameLoadStateObserver *this, const WTF::URL *a2)
{
  unsigned int v2;
  __n128 result;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = *((_DWORD *)this + 7);
  if (v2 == *((_DWORD *)this + 6))
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL const&>((uint64_t)this + 16, (unint64_t)a2);
  }
  else
  {
    v4 = *((_QWORD *)this + 2);
    v5 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v5 += 2;
    *(_QWORD *)(v4 + 40 * v2) = v5;
    v6 = v4 + 40 * v2;
    result = *(__n128 *)((char *)a2 + 8);
    *(_OWORD *)(v6 + 24) = *(_OWORD *)((char *)a2 + 24);
    *(__n128 *)(v6 + 8) = result;
    ++*((_DWORD *)this + 7);
  }
  return result;
}

uint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  __int128 v8;

  v3 = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD **)v3;
  if (*(_QWORD *)v3)
    *v6 += 2;
  v7 = v5 + 40 * v4;
  *(_QWORD *)v7 = v6;
  v8 = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v7 + 8) = v8;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x196D35800);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (uint64_t *)(*(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12));
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WTF::URL>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WTF::URL>::move(WTF::StringImpl *result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  WTF::StringImpl *v6;

  if (result != (WTF::StringImpl *)a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      WTF::URL::URL(a3, v5);
      result = (WTF::StringImpl *)*v5;
      *v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 40;
      v5 += 5;
    }
    while (v5 != a2);
  }
  return result;
}

void WebKit::NetworkResourceLoader::continueDidReceiveResponse(WebKit::NetworkResourceLoader *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  WebKit::ServiceWorkerFetchTask *v12;
  WebKit::NetworkCache::Entry *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF *v25;
  void *v26;
  WebKit::NetworkCache::Entry *v27;
  uint8_t buf[4];
  WebKit::NetworkResourceLoader *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  _BOOL4 v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BOOL4 v43;
  __int16 v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 10);
    v4 = *((_QWORD *)this + 11);
    v5 = *((_QWORD *)this + 12);
    v6 = *((_QWORD *)this + 379);
    v7 = *((unsigned __int8 *)this + 315) == 1;
    v8 = *((unsigned __int8 *)this + 3072);
    v9 = *((_QWORD *)this + 519) != 0;
    v10 = *((_QWORD *)this + 537) != 0;
    v11 = *((_QWORD *)this + 540) != 0;
    *(_DWORD *)buf = 134220288;
    v29 = this;
    v30 = 2048;
    v31 = v3;
    v32 = 2048;
    v33 = v4;
    v34 = 2048;
    v35 = v5;
    v36 = 2048;
    v37 = v6;
    v38 = 1024;
    v39 = v7;
    v40 = 1024;
    v41 = v8;
    v42 = 1024;
    v43 = v9;
    v44 = 1024;
    LODWORD(v45[0]) = v10;
    WORD2(v45[0]) = 1024;
    *(_DWORD *)((char *)v45 + 6) = v11;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueDidReceiveResponse: (hasCacheEntryWaitingForContinueDidReceiveResponse=%d, hasResponseCompletionHandler=%d)", buf, 0x52u);
  }
  v12 = (WebKit::ServiceWorkerFetchTask *)*((_QWORD *)this + 547);
  if (v12)
  {
    v15 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *((_QWORD *)this + 10);
      v17 = *((_QWORD *)this + 11);
      v18 = *((_QWORD *)this + 12);
      v19 = *((_QWORD *)this + 379);
      v20 = *((unsigned __int8 *)this + 315) == 1;
      v21 = *((unsigned __int8 *)this + 3072);
      v22 = *((_QWORD *)this + 519) != 0;
      v23 = *((_QWORD *)v12 + 5);
      *(_DWORD *)buf = 134220032;
      v29 = this;
      v30 = 2048;
      v31 = v16;
      v32 = 2048;
      v33 = v17;
      v34 = 2048;
      v35 = v18;
      v36 = 2048;
      v37 = v19;
      v38 = 1024;
      v39 = v20;
      v40 = 1024;
      v41 = v21;
      v42 = 1024;
      v43 = v22;
      v44 = 2048;
      v45[0] = v23;
      _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::continueDidReceiveResponse: continuing with ServiceWorkerFetchTask (fetchIdentifier=%llu)", buf, 0x50u);
      v12 = (WebKit::ServiceWorkerFetchTask *)*((_QWORD *)this + 547);
    }
    WebKit::ServiceWorkerFetchTask::continueDidReceiveFetchResponse(v12);
  }
  else
  {
    v13 = (WebKit::NetworkCache::Entry *)*((_QWORD *)this + 537);
    if (v13)
    {
      *((_QWORD *)this + 537) = 0;
      v27 = v13;
      WebKit::NetworkResourceLoader::sendResultForCacheEntry((uint64_t)this, &v27);
      WebKit::NetworkCache::Entry::~Entry(v13, v24);
      WTF::fastFree(v25, v26);
      WebKit::NetworkResourceLoader::cleanup((uint64_t)this, 1);
    }
    else
    {
      v14 = *((_QWORD *)this + 540);
      if (v14)
      {
        *((_QWORD *)this + 540) = 0;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
}

void sub_196D362C0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WebCore::AdditionalNetworkLoadMetricsForWebInspector *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,uint64_t a38)
{
  if (a36)
  {
    if (*(_DWORD *)a36 == 2)
      WTF::StringImpl::destroy(a36, a2);
    else
      *(_DWORD *)a36 -= 2;
  }
  WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(a12);
  if (a38)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(a38 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkLoad::shouldCaptureExtraNetworkLoadMetrics(WebKit::NetworkLoad *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 104))(*((_QWORD *)this + 2));
}

void sub_196D3683C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v13;

  v13 = *(_QWORD *)(v11 - 144);
  *(_QWORD *)(v11 - 144) = 0;
  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v13 + 8));
  _Unwind_Resume(exception_object);
}

WebCore::ResourceResponse *WebCore::ResourceResponse::ResourceResponse(WebCore::ResourceResponse *this, NSURLResponse *a2)
{
  *(_QWORD *)(WebCore::ResourceResponseBase::ResourceResponseBase(this) + 240) = a2;
  if (a2)
    CFRetain(a2);
  *((_BYTE *)this + 248) = 0;
  *((_BYTE *)this + 138) = *((_BYTE *)this + 138) & 0xF0 | (a2 == 0);
  return this;
}

void sub_196D36968(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v2;

  WebCore::ResourceResponseBase::~ResourceResponseBase(v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::NetworkLoad::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  const char *v13;
  _QWORD v14[4];
  char v15;

  v9 = *(_QWORD *)(a1 + 2992);
  if (v9 && *(_QWORD *)(v9 + 40))
    return WebKit::NetworkProcess::findPendingDownloadLocation(*(_QWORD *)(a1 + 24), v9, a5, a2);
  if (a3)
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 192);
    v14[0] = "AuthenticationManager";
    v14[1] = 22;
    v13 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v12, (WTF::ASCIILiteralHash *)v14);
    WebKit::AuthenticationManager::negotiatedLegacyTLS((uint64_t)v13, *(_QWORD *)(a1 + 32));
  }
  if (*(_BYTE *)(a1 + 325))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
    if (v11 && *(_QWORD *)(v11 + 352))
    {
      xpc_connection_get_audit_token();
      v15 = 1;
    }
    else
    {
      LOBYTE(v14[0]) = 0;
      v15 = 0;
    }
    WebCore::ResourceResponseBase::includeCertificateInfo();
  }
  return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, WebCore::ResourceResponseBase *, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2, a4, a5);
}

WTF::StringImpl *WebKit::NetworkResourceLoader::didReceiveResponse(uint64_t a1, uint64_t a2, char a3, unsigned int ***a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  WebCore::ResourceResponse *v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  __int128 v24;
  unsigned int **v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  int isConditional;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WebKit::NetworkLoadChecker *v40;
  uint64_t v41;
  const WebCore::ResourceRequest *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  CFTypeRef v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *result;
  WTF::StringImpl *v51;
  __int128 v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unsigned int **v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  __int128 v59;
  const WebCore::ResourceResponse *v60;
  __n128 v61;
  unsigned int **v62;
  unsigned int v63;
  int v64;
  unsigned int **v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t *v69;
  unsigned int **v70;
  unsigned int **v71;
  NSObject *v72;
  WTF::StringImpl *v73;
  unsigned int **v74;
  WTF::StringImpl *v75;
  WTF *v76;
  WTF::StringImpl *v77;
  int v78;
  uint64_t v79;
  void *v80;
  unsigned int *v81;
  unsigned int *v82;
  NSObject *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  _BOOL8 v89;
  unsigned int *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  unsigned int **v93;
  WTF::StringImpl *v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL4 v100;
  int v101;
  _BOOL4 v102;
  WebCore::SecurityOrigin *v103;
  const WTF::URL *v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unsigned int *v109;
  WTF::StringImpl *v110;
  unsigned int v111;
  _QWORD *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  unsigned int v120;
  uint64_t v121;
  os_unfair_lock_s *v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  os_unfair_lock_s *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  WTF::StringImpl *v135;
  WTF::URL *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  IPC::Encoder *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  NSObject *v143;
  _BOOL8 v144;
  uint64_t v145;
  _DWORD *v146;
  __int128 v147;
  WTF::StringImpl *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BOOL4 v152;
  _BOOL4 v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BOOL4 v160;
  int v161;
  _BOOL4 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _BOOL4 v167;
  int v168;
  _BOOL4 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BOOL4 v174;
  int v175;
  _BOOL4 v176;
  int v178;
  int v179;
  NSObject *v180;
  int v181;
  NSObject *log;
  os_log_t loga;
  _OWORD v186[3];
  char v187;
  WTF::StringImpl *v188;
  __int128 v189;
  __int128 v190;
  WTF::StringImpl *v191;
  uint64_t v192;
  __int16 v193;
  unsigned int *v194;
  WTF::StringImpl *v195[3];
  unsigned int *v196;
  WTF::StringImpl *v197[2];
  uint64_t *v198;
  uint64_t v199;
  int v200;
  unsigned int *v201;
  _BYTE v202[22];
  __int16 v203;
  uint64_t v204;
  __int16 v205;
  uint64_t v206;
  __int16 v207;
  __int128 v208;
  int v209;
  CFTypeRef cf;
  _BYTE buf[72];
  __int128 v212;
  __int128 v213;
  __int128 v214;
  WTF::StringImpl *v215;
  uint64_t v216;
  __int16 v217;
  unsigned int **v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  int v222;
  uint64_t v223;

  v5 = a1;
  v223 = *MEMORY[0x1E0C80C00];
  v6 = (unint64_t)off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(v5 + 80);
    v8 = *(_QWORD *)(v5 + 88);
    v9 = *(_QWORD *)(v5 + 96);
    v10 = *(_QWORD *)(v5 + 3032);
    v11 = *(unsigned __int8 *)(v5 + 315) == 1;
    v179 = *(unsigned __int8 *)(v5 + 3072);
    log = v6;
    v6 = *(_QWORD *)(v5 + 4152) != 0;
    v12 = WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2);
    WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)a2);
    WTF::String::utf8();
    if (*(_QWORD *)v202)
      v13 = *(_QWORD *)v202 + 16;
    else
      v13 = 0;
    v14 = WebCore::ResourceResponseBase::expectedContentLength((WebCore::ResourceResponseBase *)a2);
    v15 = *(_QWORD *)(v5 + 4272) != 0;
    v16 = *(_QWORD *)(v5 + 4304) != 0;
    *(_DWORD *)buf = 134221058;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v8;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v9;
    *(_WORD *)&buf[42] = 2048;
    *(_QWORD *)&buf[44] = v10;
    *(_WORD *)&buf[52] = 1024;
    *(_DWORD *)&buf[54] = v11;
    *(_WORD *)&buf[58] = 1024;
    *(_DWORD *)&buf[60] = v179;
    *(_WORD *)&buf[64] = 1024;
    *(_DWORD *)&buf[66] = v6;
    *(_WORD *)&buf[70] = 1024;
    LODWORD(v212) = v12;
    WORD2(v212) = 2082;
    *(_QWORD *)((char *)&v212 + 6) = v13;
    HIWORD(v212) = 2048;
    *(_QWORD *)&v213 = v14;
    WORD4(v213) = 1024;
    *(_DWORD *)((char *)&v213 + 10) = v15;
    HIWORD(v213) = 1024;
    LODWORD(v214) = v16;
    _os_log_impl(&dword_196BCC000, log, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: (httpStatusCode=%d, MIMEType=%{public}s, expectedContentLength=%lld, hasCachedEntryForValidation=%d, hasNetworkLoadChecker=%d)", buf, 0x6Cu);
    v18 = *(WTF **)v202;
    *(_QWORD *)v202 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v17);
      else
        --*(_DWORD *)v18;
    }
    v5 = a1;
  }
  if (*(_QWORD *)(v5 + 4792) && (WebCore::ContentFilter::continueAfterResponseReceived() & 1) == 0)
  {
    v70 = *a4;
    *a4 = 0;
    (*((void (**)(unsigned int **, uint64_t))*v70 + 2))(v70, 2);
    return (WTF::StringImpl *)(*((uint64_t (**)(unsigned int **))*v70 + 1))(v70);
  }
  v19 = v5 + 4120;
  if (*(_BYTE *)(v5 + 315) == 1)
    WebKit::NetworkResourceLoader::didReceiveMainResourceResponse((WebKit::NetworkResourceLoader *)v5, (const WebCore::ResourceResponse *)a2);
  v20 = (WebCore::ResourceResponse *)(v5 + 3872);
  WebCore::ResourceResponseBase::operator=(v5 + 3872, a2);
  v21 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  v22 = *(const void **)(v5 + 4112);
  *(_QWORD *)(v5 + 4112) = v21;
  if (v22)
    CFRelease(v22);
  *(_BYTE *)v19 = *(_BYTE *)(a2 + 248);
  *(_BYTE *)(v5 + 4904) = a3;
  if ((*(_BYTE *)(v5 + 4672) & 1) == 0)
  {
    v23 = WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)(v5 + 3872));
    WTF::String::operator=((WTF::StringImpl **)(v5 + 4664), (WTF::StringImpl *)v23);
    v24 = *(_OWORD *)(v23 + 24);
    *(_OWORD *)(v5 + 4672) = *(_OWORD *)(v23 + 8);
    *(_OWORD *)(v5 + 4688) = v24;
  }
  if (*(_BYTE *)(v5 + 4328))
  {
    v79 = *(_QWORD *)(v5 + 4304);
    if (v79)
    {
      v6 = (unint64_t)buf;
      WebCore::NetworkLoadInformation::NetworkLoadInformation((uint64_t)buf, v79 + 536);
      WebCore::ResourceResponse::operator=((uint64_t)&v219, v5 + 3872);
      WebKit::NetworkConnectionToWebProcess::addNetworkLoadInformation(*(_QWORD *)(v5 + 3856), *(_QWORD *)(v5 + 3032), (uint64_t)buf);
      WebCore::NetworkLoadInformation::~NetworkLoadInformation((WebCore::NetworkLoadInformation *)buf, v80);
    }
  }
  WebKit::NetworkResourceLoader::resourceLoadInfo((WebKit::NetworkResourceLoader *)v186, v5);
  v25 = (unsigned int **)(v5 + 4136);
  if (!*(_QWORD *)(v5 + 4136)
    && WebCore::ResourceResponseBase::expectedContentLength((WebCore::ResourceResponseBase *)(v5 + 3872)) > 0x100000
    && (HIBYTE(v193) == 13 || HIBYTE(v193) == 4))
  {
    v69 = (uint64_t *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(v5 + 3872));
    if (WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1::operator()(v69))
    {
      WebCore::SharedBufferBuilder::empty((WebCore::SharedBufferBuilder *)(v5 + 4136));
      *(_QWORD *)(v5 + 3064) = 0x3FA999999999999ALL;
    }
  }
  if (!*(_QWORD *)(v5 + 4152))
  {
    v26 = (_QWORD *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(v5 + 3872));
    if (MEMORY[0x19AEABBCC](*v26, "multipart/x-mixed-replace", 25))
    {
      v82 = *v25;
      *v25 = 0;
      if (v82)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v82, v27);
    }
  }
  v28 = (_QWORD *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(v5 + 3872));
  if (MEMORY[0x19AEABBCC](*v28, "multipart/x-mixed-replace", 25))
  {
    v81 = *(unsigned int **)(v5 + 4264);
    *(_QWORD *)(v5 + 4264) = 0;
    if (v81)
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v81, v29);
  }
  if (!*(_QWORD *)(v5 + 4272))
    goto LABEL_39;
  v6 = v5 + 4272;
  v30 = WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)(v5 + 3872));
  v25 = (unsigned int **)off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v31 = *(_QWORD *)(v5 + 80);
    v32 = *(_QWORD *)(v5 + 88);
    v33 = *(_QWORD *)(v5 + 96);
    v34 = *(_QWORD *)(v5 + 3032);
    v180 = v25;
    v35 = *(unsigned __int8 *)(v5 + 315) == 1;
    v178 = *(unsigned __int8 *)(v5 + 3072);
    LODWORD(v25) = *(_QWORD *)(v5 + 4152) != 0;
    isConditional = WebCore::ResourceRequestBase::isConditional((WebCore::ResourceRequestBase *)(v5 + 168));
    *(_DWORD *)buf = 134220288;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v31;
    v19 = v5 + 4120;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v32;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v33;
    *(_WORD *)&buf[42] = 2048;
    *(_QWORD *)&buf[44] = v34;
    *(_WORD *)&buf[52] = 1024;
    *(_DWORD *)&buf[54] = v35;
    v20 = (WebCore::ResourceResponse *)(v5 + 3872);
    *(_WORD *)&buf[58] = 1024;
    *(_DWORD *)&buf[60] = v178;
    *(_WORD *)&buf[64] = 1024;
    *(_DWORD *)&buf[66] = (_DWORD)v25;
    *(_WORD *)&buf[70] = 1024;
    LODWORD(v212) = v30 == 304;
    WORD2(v212) = 1024;
    *(_DWORD *)((char *)&v212 + 6) = isConditional;
    _os_log_impl(&dword_196BCC000, v180, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Received revalidation response (validationSucceeded=%d, wasOriginalRequestConditional=%d)", buf, 0x52u);
  }
  if (v30 == 304)
  {
    WebKit::NetworkCache::Cache::update(*(_QWORD **)(v5 + 4256), (WebCore::NetworkStorageSession *)(v5 + 168), *(_QWORD *)(v5 + 4272), v20, *(_BYTE *)(v19 + 784), (WebKit::NetworkCache::Entry **)buf);
    std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v5 + 4272), *(WTF::StringImpl **)buf);
    if (WebCore::ResourceRequestBase::isConditional((WebCore::ResourceRequestBase *)(v5 + 168)))
    {
      WebCore::ResourceResponseBase::httpHeaderField();
      if (*(_QWORD *)buf && *(_DWORD *)(*(_QWORD *)buf + 4))
        WebCore::ResourceResponseBase::setHTTPHeaderField();
      WebCore::ResourceResponseBase::httpHeaderField();
      if (*(_QWORD *)v202 && *(_DWORD *)(*(_QWORD *)v202 + 4))
        WebCore::ResourceResponseBase::setHTTPHeaderField();
      std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v5 + 4272), 0);
      v38 = *(WTF::StringImpl **)v202;
      *(_QWORD *)v202 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v37);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v37);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
  }
  else
  {
    std::unique_ptr<WebKit::NetworkCache::Entry>::reset[abi:sn180100]((WebKit::NetworkCache::Entry **)(v5 + 4272), 0);
  }
  if (!*(_QWORD *)v6)
  {
LABEL_39:
    v40 = *(WebKit::NetworkLoadChecker **)(v5 + 4304);
    if (!v40)
      goto LABEL_64;
    v41 = *(_QWORD *)(v5 + 3864);
    if (v41)
      v42 = (const WebCore::ResourceRequest *)(v41 + 3008);
    else
      v42 = (const WebCore::ResourceRequest *)(v5 + 168);
    WebKit::NetworkLoadChecker::validateResponse(v40, v42, (WebCore::AdditionalNetworkLoadMetricsForWebInspector ***)v20, (uint64_t)v202);
    v44 = v209;
    if ((_BYTE)v209)
    {
      v83 = off_1ECE713E8;
      v84 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR);
      if ((_DWORD)v84)
      {
        loga = (os_log_t)v20;
        v6 = *(_QWORD *)(v5 + 80);
        v19 = *(_QWORD *)(v5 + 88);
        v150 = *(_QWORD *)(v5 + 96);
        v151 = *(_QWORD *)(v5 + 3032);
        v152 = *(unsigned __int8 *)(v5 + 315) == 1;
        v181 = *(unsigned __int8 *)(v5 + 3072);
        v153 = *(_QWORD *)(v5 + 4152) != 0;
        MEMORY[0x19AEB7BFC](v202);
        WTF::String::utf8();
        if (v220)
          v154 = v220 + 16;
        else
          v154 = 0;
        MEMORY[0x19AEB7BFC](v202);
        *(_DWORD *)buf = 134220290;
        *(_QWORD *)&buf[4] = v5;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v6;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v19;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v150;
        *(_WORD *)&buf[42] = 2048;
        *(_QWORD *)&buf[44] = v151;
        *(_WORD *)&buf[52] = 1024;
        *(_DWORD *)&buf[54] = v152;
        *(_WORD *)&buf[58] = 1024;
        *(_DWORD *)&buf[60] = v181;
        *(_WORD *)&buf[64] = 1024;
        *(_DWORD *)&buf[66] = v153;
        *(_WORD *)&buf[70] = 2082;
        *(_QWORD *)&v212 = v154;
        WORD4(v212) = 1024;
        *(_DWORD *)((char *)&v212 + 10) = HIDWORD(v208);
        _os_log_error_impl(&dword_196BCC000, v83, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: NetworkLoadChecker::validateResponse returned an error (error.domain=%{public}s, error.code=%d)", buf, 0x56u);
        v84 = v220;
        v220 = 0;
        if (v84)
        {
          if (*(_DWORD *)v84 == 1)
            v84 = WTF::fastFree((WTF *)v84, v155);
          else
            --*(_DWORD *)v84;
        }
        v20 = (WebCore::ResourceResponse *)loga;
        v5 = a1;
      }
      WTF::RunLoop::main((WTF::RunLoop *)v84);
      ++*(_DWORD *)(v5 + 8);
      *(_QWORD *)buf = v5;
      WebCore::ResourceError::ResourceError((uint64_t)&buf[8], (uint64_t *)v202);
      WTF::Function<void ()(void)>::Function<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2,void>(&v220, (uint64_t *)buf);
      WTF::RunLoop::dispatch();
      v86 = v220;
      v220 = 0;
      if (v86)
        (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
      WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2::~$_2((uint64_t *)buf, v85);
      v25 = *a4;
      *a4 = 0;
      (*((void (**)(unsigned int **, uint64_t))*v25 + 2))(v25, 2);
      v87 = 1;
    }
    else
    {
      v45 = *(_QWORD *)(v5 + 3864);
      if (!v45 || !*(_BYTE *)(*(_QWORD *)(v5 + 4304) + 1160) || (v25 = *(unsigned int ***)(v45 + 2992)) == 0)
      {
LABEL_45:
        v46 = cf;
        cf = 0;
        if (v46)
          CFRelease(v46);
        v47 = *(WTF::StringImpl **)((char *)&v208 + 4);
        *(_QWORD *)((char *)&v208 + 4) = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v43);
          else
            *(_DWORD *)v47 -= 2;
        }
        v48 = *(WTF::StringImpl **)&v202[8];
        *(_QWORD *)&v202[8] = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, v43);
          else
            *(_DWORD *)v48 -= 2;
        }
        v49 = *(WTF::StringImpl **)v202;
        *(_QWORD *)v202 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
            WTF::StringImpl::destroy(v49, v43);
          else
            *(_DWORD *)v49 -= 2;
        }
        if (v44)
          goto LABEL_57;
LABEL_64:
        WebKit::NetworkResourceLoader::initializeReportingEndpoints((WebKit::NetworkResourceLoader *)v5, v20);
        if (*(_BYTE *)(v5 + 315) == 1
          && WebKit::NetworkResourceLoader::shouldInterruptLoadForCSPFrameAncestorsOrXFrameOptions((const WebCore::SecurityOrigin ***)v5, v20))
        {
          v72 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR))
          {
            v163 = *(_QWORD *)(v5 + 80);
            v164 = *(_QWORD *)(v5 + 88);
            v165 = *(_QWORD *)(v5 + 96);
            v166 = *(_QWORD *)(v5 + 3032);
            v167 = *(unsigned __int8 *)(v5 + 315) == 1;
            v168 = *(unsigned __int8 *)(v5 + 3072);
            v169 = *(_QWORD *)(v5 + 4152) != 0;
            *(_DWORD *)buf = 134219776;
            *(_QWORD *)&buf[4] = v5;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v163;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v164;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v165;
            *(_WORD *)&buf[42] = 2048;
            *(_QWORD *)&buf[44] = v166;
            *(_WORD *)&buf[52] = 1024;
            *(_DWORD *)&buf[54] = v167;
            *(_WORD *)&buf[58] = 1024;
            *(_DWORD *)&buf[60] = v168;
            *(_WORD *)&buf[64] = 1024;
            *(_DWORD *)&buf[66] = v169;
            _os_log_error_impl(&dword_196BCC000, v72, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Interrupting main resource load due to CSP frame-ancestors or X-Frame-Options", buf, 0x46u);
          }
          WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)v202, v20);
          WebKit::NetworkResourceLoader::sanitizeResponseIfPossible((uint64_t)buf, v5, (uint64_t)v202);
          WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v202, v73);
          *(_QWORD *)v202 = buf;
          IPC::MessageSender::send<Messages::WebResourceLoader::StopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied>(v5 + 16, (WebCore::ResourceResponseBase **)v202);
          v74 = *a4;
          *a4 = 0;
          (*((void (**)(unsigned int **, uint64_t))*v74 + 2))(v74, 2);
          (*((void (**)(unsigned int **))*v74 + 1))(v74);
          WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)buf, v75);
          goto LABEL_57;
        }
        if (*(_BYTE *)(v5 + 3072) == 19 && (*(_BYTE *)(v5 + 3256) || *(_BYTE *)(v5 + 3257)))
        {
          v76 = (WTF *)WebCore::obtainCrossOriginEmbedderPolicy();
          v78 = v202[0];
          if (*(_BYTE *)(v5 + 3257) && !v202[0])
          {
            LODWORD(v25) = v5 + 64;
            v6 = v5;
            if ((*(_BYTE *)(v5 + 3200) & 1) == 0)
              WTF::aboutBlankURL(v76);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WebCore::sendCOEPInheritenceViolation();
            v135 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v135)
            {
              if (*(_DWORD *)v135 == 2)
                WTF::StringImpl::destroy(v135, v77);
              else
                *(_DWORD *)v135 -= 2;
            }
            v78 = v202[0];
          }
          if (*(_BYTE *)(v5 + 3256) && !v78)
          {
            v136 = (WTF::URL *)WebCore::ResourceResponseBase::url(v20);
            WTF::URL::stringCenterEllipsizedToLength(v136);
            WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Refused to load '", 18, (uint64_t *)v195, (uint64_t)"' worker because of Cross-Origin-Embedder-Policy.", 50, v197);
            v138 = v195[0];
            v195[0] = 0;
            if (v138)
            {
              if (*(_DWORD *)v138 == 2)
                WTF::StringImpl::destroy(v138, v137);
              else
                *(_DWORD *)v138 -= 2;
            }
            v220 = *(_QWORD *)(v5 + 3032);
            v221 = 1;
            *(_QWORD *)buf = v5 + 96;
            *(_WORD *)&buf[8] = 520;
            *(_QWORD *)&buf[16] = v197;
            *(_QWORD *)&buf[24] = &v220;
            v139 = IPC::MessageSender::send<Messages::WebPage::AddConsoleMessage,WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(v5 + 16, (uint64_t)buf, *(_QWORD *)(v5 + 88));
            if ((*(_BYTE *)(v5 + 3200) & 1) == 0)
              WTF::aboutBlankURL(v139);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WebCore::sendCOEPInheritenceViolation();
            v141 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v141)
            {
              if (*(_DWORD *)v141 == 2)
                WTF::StringImpl::destroy(v141, v140);
              else
                *(_DWORD *)v141 -= 2;
            }
            v142 = v197[0];
            v197[0] = 0;
            if (v142)
            {
              if (*(_DWORD *)v142 == 2)
                WTF::StringImpl::destroy(v142, v140);
              else
                *(_DWORD *)v142 -= 2;
            }
            WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy((WebCore::CrossOriginEmbedderPolicy *)v202, v140);
            v143 = off_1ECE713E8;
            v144 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR);
            if (v144)
            {
              v170 = *(_QWORD *)(v5 + 80);
              v171 = *(_QWORD *)(v5 + 88);
              v172 = *(_QWORD *)(v5 + 96);
              v173 = *(_QWORD *)(v5 + 3032);
              v174 = *(unsigned __int8 *)(v5 + 315) == 1;
              v175 = *(unsigned __int8 *)(v5 + 3072);
              v176 = *(_QWORD *)(v5 + 4152) != 0;
              *(_DWORD *)buf = 134219776;
              *(_QWORD *)&buf[4] = v5;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v170;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v171;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v172;
              *(_WORD *)&buf[42] = 2048;
              *(_QWORD *)&buf[44] = v173;
              *(_WORD *)&buf[52] = 1024;
              *(_DWORD *)&buf[54] = v174;
              *(_WORD *)&buf[58] = 1024;
              *(_DWORD *)&buf[60] = v175;
              *(_WORD *)&buf[64] = 1024;
              *(_DWORD *)&buf[66] = v176;
              _os_log_error_impl(&dword_196BCC000, v143, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Interrupting worker load due to Cross-Origin-Opener-Policy", buf, 0x46u);
            }
            WTF::RunLoop::main((WTF::RunLoop *)v144);
            ++*(_DWORD *)(v5 + 8);
            *(_QWORD *)buf = v5;
            v145 = WebCore::ResourceResponseBase::url(v20);
            v146 = *(_DWORD **)v145;
            if (*(_QWORD *)v145)
              *v146 += 2;
            *(_QWORD *)&buf[8] = v146;
            v147 = *(_OWORD *)(v145 + 24);
            *(_OWORD *)&buf[16] = *(_OWORD *)(v145 + 8);
            *(_OWORD *)&buf[32] = v147;
            WTF::Function<void ()(void)>::Function<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3,void>(v202, (uint64_t *)buf);
            WTF::RunLoop::dispatch();
            v149 = *(_QWORD *)v202;
            *(_QWORD *)v202 = 0;
            if (v149)
              (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
            WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_3::~$_3((uint64_t *)buf, v148);
            v71 = *a4;
            *a4 = 0;
            (*((void (**)(unsigned int **, uint64_t))*v71 + 2))(v71, 2);
            goto LABEL_104;
          }
          WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy((WebCore::CrossOriginEmbedderPolicy *)v202, v77);
        }
        WebKit::NetworkResourceLoader::doCrossOriginOpenerHandlingOfResponse((WebKit::NetworkResourceLoader *)v5, v20, buf);
        if (BYTE8(v212))
        {
          v88 = off_1ECE713E8;
          v89 = os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_ERROR);
          if (v89)
          {
            v156 = *(_QWORD *)(v5 + 80);
            v157 = *(_QWORD *)(v5 + 88);
            v158 = *(_QWORD *)(v5 + 96);
            v159 = *(_QWORD *)(v5 + 3032);
            v160 = *(unsigned __int8 *)(v5 + 315) == 1;
            v161 = *(unsigned __int8 *)(v5 + 3072);
            v162 = *(_QWORD *)(v5 + 4152) != 0;
            *(_DWORD *)v202 = 134219776;
            *(_QWORD *)&v202[4] = v5;
            *(_WORD *)&v202[12] = 2048;
            *(_QWORD *)&v202[14] = v156;
            v203 = 2048;
            v204 = v157;
            v205 = 2048;
            v206 = v158;
            v207 = 2048;
            *(_QWORD *)&v208 = v159;
            WORD4(v208) = 1024;
            *(_DWORD *)((char *)&v208 + 10) = v160;
            HIWORD(v208) = 1024;
            v209 = v161;
            LOWORD(cf) = 1024;
            *(_DWORD *)((char *)&cf + 2) = v162;
            _os_log_error_impl(&dword_196BCC000, v88, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveResponse: Interrupting load due to Cross-Origin-Opener-Policy", v202, 0x46u);
          }
          WTF::RunLoop::main((WTF::RunLoop *)v89);
          ++*(_DWORD *)(v5 + 8);
          *(_QWORD *)v202 = v5;
          v90 = (unsigned int *)BYTE8(v212);
          if (BYTE8(v212))
          {
            WebCore::ResourceError::ResourceError((uint64_t)&v202[8], (uint64_t *)buf);
            WTF::Function<void ()(void)>::Function<WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_4,void>(&v220, (uint64_t *)v202);
            WTF::RunLoop::dispatch();
            v92 = v220;
            v220 = 0;
            if (v92)
              (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
            WebKit::NetworkResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_2::~$_2((uint64_t *)v202, v91);
            v93 = *a4;
            *a4 = 0;
            (*((void (**)(unsigned int **, uint64_t))*v93 + 2))(v93, 2);
            (*((void (**)(unsigned int **))*v93 + 1))(v93);
            std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v94);
            goto LABEL_57;
          }
          __break(1u);
        }
        else
        {
          std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v51);
          *(_OWORD *)&buf[24] = v186[0];
          *(_OWORD *)&buf[40] = v186[1];
          *(_OWORD *)&buf[56] = v186[2];
          v52 = v190;
          v213 = v189;
          *(_QWORD *)buf = v5;
          ++*(_DWORD *)(v5 + 8);
          buf[16] = a3;
          LOBYTE(v212) = v187;
          v53 = v188;
          v214 = v52;
          v54 = v191;
          v188 = 0;
          v191 = 0;
          *((_QWORD *)&v212 + 1) = v53;
          v215 = v54;
          v217 = v193;
          v216 = v192;
          v55 = *a4;
          *a4 = 0;
          v218 = v55;
          v56 = WTF::fastMalloc((WTF *)0xA0);
          *(_QWORD *)v56 = &off_1E34C0370;
          *(_QWORD *)(v56 + 8) = v5;
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)(v56 + 16) = v5;
          *(_BYTE *)(v56 + 24) = a3;
          v57 = *(_OWORD *)&buf[56];
          v58 = v212;
          v59 = *(_OWORD *)&buf[40];
          *(_OWORD *)(v56 + 32) = *(_OWORD *)&buf[24];
          *(_OWORD *)(v56 + 48) = v59;
          *(_BYTE *)(v56 + 80) = v58;
          *(_OWORD *)(v56 + 64) = v57;
          v61.n128_f64[0] = WTF::URL::URL(v56 + 88, (uint64_t *)&v212 + 1);
          *(_QWORD *)(v56 + 128) = v215;
          *(_WORD *)(v56 + 144) = v217;
          *(_QWORD *)(v56 + 136) = v216;
          v62 = v218;
          v215 = 0;
          v218 = 0;
          *(_QWORD *)(v56 + 152) = v62;
          if (!*(_BYTE *)(v5 + 3417))
          {
LABEL_75:
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v56 + 16))(v56, v61);
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
LABEL_76:
            v65 = v218;
            v218 = 0;
            if (v65)
              (*((void (**)(unsigned int **))*v65 + 1))(v65);
            v66 = v215;
            v215 = 0;
            if (v66)
            {
              if (*(_DWORD *)v66 == 2)
                WTF::StringImpl::destroy(v66, v43);
              else
                *(_DWORD *)v66 -= 2;
            }
            v67 = (WTF::StringImpl *)*((_QWORD *)&v212 + 1);
            *((_QWORD *)&v212 + 1) = 0;
            if (v67)
            {
              if (*(_DWORD *)v67 == 2)
                WTF::StringImpl::destroy(v67, v43);
              else
                *(_DWORD *)v67 -= 2;
            }
            v68 = *(_QWORD *)&buf[8];
            *(_QWORD *)&buf[8] = 0;
            if (v68)
              WTF::RefCounted<WebKit::NetworkResourceLoader>::deref((_DWORD *)(v68 + 8), v43);
            goto LABEL_57;
          }
          v63 = WebCore::parseClearSiteDataHeader(v20, v60);
          if ((v63 & 1) != 0)
            v64 = 6;
          else
            v64 = 0;
          if ((v63 & 2) != 0)
            v64 |= 1u;
          if ((v63 & 8) != 0)
          {
            v64 |= 0x8C0F0u;
            v200 = v64;
            LODWORD(v25) = (v63 >> 2) & 1;
          }
          else
          {
            v200 = v64;
            LODWORD(v25) = (v63 >> 2) & 1;
            if (!(_DWORD)v25 && !v64)
              goto LABEL_75;
          }
          v95 = off_1ECE713E8;
          if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
          {
            v96 = *(_QWORD *)(v5 + 80);
            v97 = *(_QWORD *)(v5 + 88);
            v98 = *(_QWORD *)(v5 + 96);
            v99 = *(_QWORD *)(v5 + 3032);
            v100 = *(unsigned __int8 *)(v5 + 315) == 1;
            v101 = *(unsigned __int8 *)(v5 + 3072);
            v102 = *(_QWORD *)(v5 + 4152) != 0;
            *(_DWORD *)v202 = 134219776;
            *(_QWORD *)&v202[4] = v5;
            *(_WORD *)&v202[12] = 2048;
            *(_QWORD *)&v202[14] = v96;
            v203 = 2048;
            v204 = v97;
            v205 = 2048;
            v206 = v98;
            v207 = 2048;
            *(_QWORD *)&v208 = v99;
            WORD4(v208) = 1024;
            *(_DWORD *)((char *)&v208 + 10) = v100;
            HIWORD(v208) = 1024;
            v209 = v101;
            LOWORD(cf) = 1024;
            *(_DWORD *)((char *)&cf + 2) = v102;
            _os_log_impl(&dword_196BCC000, v95, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::processClearSiteDataHeader: BEGIN", v202, 0x46u);
          }
          v103 = (WebCore::SecurityOrigin *)WebCore::ResourceResponseBase::url(v20);
          WebCore::SecurityOrigin::create(v103, v104);
          LOBYTE(v220) = 0;
          v222 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v220, *(_QWORD *)v202 + 8);
          v106 = *(_QWORD *)v202;
          *(_QWORD *)v202 = 0;
          if (v106)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v106, v105);
          v107 = *(_QWORD *)(v5 + 112);
          if (v107)
            v108 = (uint64_t *)(v107 + 8);
          else
            v108 = &v220;
          v202[0] = 0;
          LODWORD(v204) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v202, (uint64_t)v108);
          LOBYTE(v205) = 0;
          HIDWORD(v208) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v205, (uint64_t)&v220);
          v197[0] = (WTF::StringImpl *)v5;
          WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 56), v5 + 48);
          v109 = *(unsigned int **)(v5 + 56);
          v110 = (WTF::StringImpl *)v5;
          if (v109)
          {
            do
              v111 = __ldaxr(v109);
            while (__stlxr(v111 + 1, v109));
            v110 = v197[0];
            v64 = v200;
          }
          v112 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *v112 = &off_1E34C0258;
          v112[1] = v110;
          v112[2] = v109;
          v112[3] = v56;
          v197[1] = 0;
          v198 = 0;
          v19 = WTF::fastMalloc((WTF *)0x10);
          *(_DWORD *)v19 = 1;
          *(_QWORD *)(v19 + 8) = v112;
          WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v197, v113);
          if (v64)
          {
            v114 = *(_QWORD *)(v5 + 3856);
            v115 = *(_QWORD *)(v114 + 72);
            v116 = *(_QWORD *)(v114 + 80);
            do
              v117 = __ldaxr((unsigned int *)v19);
            while (__stlxr(v117 + 1, (unsigned int *)v19));
            v118 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v118 = off_1E34C0280;
            *((_QWORD *)v118 + 1) = v19;
            v197[0] = v118;
            WebKit::NetworkProcess::deleteWebsiteDataForOrigin(v115, v116, v64, (WebCore::SecurityOriginData *)v202, (uint64_t *)v197);
            v119 = v197[0];
            v197[0] = 0;
            if (v119)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v119 + 8))(v119);
            v120 = v200;
          }
          else
          {
            v120 = 0;
          }
          if (!WebKit::WebsiteDataStore::computeWebProcessAccessTypeForDataRemoval(v120))
          {
LABEL_161:
            if ((_DWORD)v25)
            {
              LOBYTE(v197[0]) = 0;
              LOBYTE(v198) = 0;
              if (*(_BYTE *)(v5 + 315) == 1)
              {
                *(_OWORD *)v197 = *(_OWORD *)(v5 + 96);
                LOBYTE(v198) = 1;
              }
              v126 = *(_QWORD *)(v5 + 3856);
              v127 = *(_QWORD *)(v126 + 80);
              v128 = *(os_unfair_lock_s **)(*(_QWORD *)(v126 + 72) + 32);
              v195[0] = (WTF::StringImpl *)v202;
              v195[1] = (WTF::StringImpl *)&v196;
              v195[2] = (WTF::StringImpl *)v197;
              v196 = (unsigned int *)v127;
              do
                v129 = __ldaxr((unsigned int *)v19);
              while (__stlxr(v129 + 1, (unsigned int *)v19));
              v194 = (unsigned int *)v19;
              IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::ReloadExecutionContextsForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_3>(v128, (uint64_t)v195, (uint64_t *)&v194);
              v130 = v194;
              v194 = 0;
              if (v130)
              {
                do
                {
                  v131 = __ldaxr(v130);
                  v132 = v131 - 1;
                }
                while (__stlxr(v132, v130));
                if (!v132)
                {
                  atomic_store(1u, v130);
                  v201 = v130;
                  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v201);
                }
              }
            }
            do
            {
              v133 = __ldaxr((unsigned int *)v19);
              v134 = v133 - 1;
            }
            while (__stlxr(v134, (unsigned int *)v19));
            if (!v134)
            {
              atomic_store(1u, (unsigned int *)v19);
              v197[0] = (WTF::StringImpl *)v19;
              WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v197);
            }
            WebCore::ClientOrigin::~ClientOrigin((WebCore::ClientOrigin *)v202);
            if (v222 != -1)
              ((void (*)(_BYTE *, uint64_t *))off_1E34C0170[v222])(v202, &v220);
            goto LABEL_76;
          }
          v6 = v5;
          v121 = *(_QWORD *)(v5 + 3856);
          v122 = *(os_unfair_lock_s **)(*(_QWORD *)(v121 + 72) + 32);
          v201 = *(unsigned int **)(v121 + 80);
          v197[0] = (WTF::StringImpl *)&v200;
          v197[1] = (WTF::StringImpl *)v202;
          v198 = (uint64_t *)&v201;
          v199 = v5 + 80;
          do
            v123 = __ldaxr((unsigned int *)v19);
          while (__stlxr(v123 + 1, (unsigned int *)v19));
          v196 = (unsigned int *)v19;
          IPC::Connection::sendWithAsyncReply<Messages::NetworkProcessProxy::DeleteWebsiteDataInWebProcessesForOrigin,WebKit::NetworkResourceLoader::processClearSiteDataHeader(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_2>(v122, (int **)v197, (uint64_t *)&v196);
          v90 = v196;
          v196 = 0;
          if (!v90)
            goto LABEL_160;
          do
          {
            v124 = __ldaxr(v90);
            v125 = v124 - 1;
          }
          while (__stlxr(v125, v90));
          if (v125)
          {
LABEL_160:
            v5 = v6;
            goto LABEL_161;
          }
        }
        atomic_store(1u, v90);
        v195[0] = (WTF::StringImpl *)v90;
        WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v195);
        goto LABEL_160;
      }
      v87 = 11;
    }
    (*(void (**)(unsigned int **))&(*v25)[2 * v87])(v25);
    goto LABEL_45;
  }
  v71 = *a4;
  *a4 = 0;
  (*((void (**)(unsigned int **, _QWORD))*v71 + 2))(v71, 0);
LABEL_104:
  (*((void (**)(unsigned int **))*v71 + 1))(v71);
LABEL_57:
  if (v191)
  {
    if (*(_DWORD *)v191 == 2)
      WTF::StringImpl::destroy(v191, v43);
    else
      *(_DWORD *)v191 -= 2;
  }
  result = v188;
  if (v188)
  {
    if (*(_DWORD *)v188 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v188, v43);
    else
      *(_DWORD *)v188 -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkResourceLoader::resourceLoadInfo(WebKit::NetworkResourceLoader *this, uint64_t a2)
{
  WebCore::ResourceRequestBase *v4;
  uint64_t v5;
  _DWORD *v6;
  __int128 v7;
  WTF::WallTime *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  unint64_t v13;

  *(_QWORD *)this = *(_QWORD *)(a2 + 4400);
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)(a2 + 96);
  *((_BYTE *)this + 24) = 1;
  *((_OWORD *)this + 2) = *(_OWORD *)(a2 + 3344);
  *((_BYTE *)this + 48) = *(_BYTE *)(a2 + 3360);
  v4 = (WebCore::ResourceRequestBase *)(a2 + 168);
  v5 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 168));
  v6 = *(_DWORD **)v5;
  if (*(_QWORD *)v5)
    *v6 += 2;
  *((_QWORD *)this + 7) = v6;
  v7 = *(_OWORD *)(v5 + 24);
  *((_OWORD *)this + 4) = *(_OWORD *)(v5 + 8);
  *((_OWORD *)this + 5) = v7;
  v8 = (WTF::WallTime *)WebCore::ResourceRequestBase::httpMethod(v4);
  v9 = *(_DWORD **)v8;
  if (*(_QWORD *)v8)
    *v9 += 2;
  *((_QWORD *)this + 12) = v9;
  WTF::WallTime::now(v8);
  *((_QWORD *)this + 13) = v10;
  result = WebCore::ResourceResponseBase::source((WebCore::ResourceResponseBase *)(a2 + 3872));
  *((_BYTE *)this + 112) = (result < 9) & (0x1BCu >> result);
  v12 = *(unsigned __int8 *)(a2 + 315) - 2;
  if (v12 < 7 && ((0x63u >> v12) & 1) != 0)
  {
    v13 = 0x10A0D0D0D040DuLL >> (8 * v12);
  }
  else
  {
    LODWORD(v13) = *(unsigned __int8 *)(a2 + 3072) - 1;
    if (v13 > 0x13)
      LOBYTE(v13) = 9;
    else
      LOBYTE(v13) = byte_1978CF6C0[(char)v13];
  }
  *((_BYTE *)this + 113) = v13;
  return result;
}

uint64_t WebKit::NetworkResourceLoader::shouldCaptureExtraNetworkLoadMetrics(WebKit::NetworkResourceLoader *this)
{
  return *((unsigned __int8 *)this + 4328);
}

uint64_t WebKit::NetworkIssueReporter::shouldReport(WebKit::NetworkIssueReporter *this, NSURLSessionTaskMetrics *a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)WebKit::NetworkIssueReporter::isEnabled(this);
  if ((_DWORD)result)
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v4 = (void *)-[WebKit::NetworkIssueReporter transactionMetrics](this, "transactionMetrics", 0);
    result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (result)
    {
      v5 = result;
      v6 = *(_QWORD *)v9;
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v9 != v6)
            objc_enumerationMutation(v4);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "_isUnlistedTracker") & 1) != 0)
            return 1;
        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        result = 0;
        if (v5)
          continue;
        break;
      }
    }
  }
  return result;
}

void *WebKit::NetworkIssueReporter::isEnabled(WebKit::NetworkIssueReporter *this)
{
  void *result;
  void *v2;

  {
    result = ne_tracker_should_save_stacktracePtr(void)::ptr;
  }
  else
  {
    {
      v2 = (void *)libsystem_networkextensionLibrary(void)::dylib;
    }
    else
    {
      v2 = (void *)___ZL33libsystem_networkextensionLibraryv_block_invoke();
      libsystem_networkextensionLibrary(void)::dylib = (uint64_t)v2;
    }
    result = dlsym(v2, "ne_tracker_should_save_stacktrace");
    ne_tracker_should_save_stacktracePtr(void)::ptr = result;
  }
  if (result)
    return (void *)((uint64_t (*)(void))result)();
  return result;
}

uint64_t ___ZL33libsystem_networkextensionLibraryv_block_invoke()
{
  uint64_t result;

  result = (uint64_t)dlopen("/usr/lib/system/libsystem_networkextension.dylib", 2);
  if (!result)
  {
    result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::NetworkLoadClient::shouldCaptureExtraNetworkLoadMetrics(WebKit::NetworkLoadClient *this)
{
  return 0;
}

uint64_t WebKit::NetworkResourceLoader::shouldInterruptLoadForCSPFrameAncestorsOrXFrameOptions(const WebCore::SecurityOrigin ***this, const WebCore::ResourceResponse *a2)
{
  WebCore::PreviewConverter *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const WTF::URL *v14;
  WebCore::SecurityOrigin *v15;
  uint64_t result;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  const WebCore::SecurityOrigin **v22;
  uint64_t v23;
  const WebCore::SecurityOrigin *v24;
  int isSameSchemeHostPort;
  BOOL v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  const WebCore::SecurityOrigin **v35;
  uint64_t v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  const WebCore::SecurityOrigin **v42;
  uint64_t v43;
  void *v44;
  IPC::Encoder *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::URL *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  const WebCore::SecurityOrigin **v55;
  uint64_t v56;
  void *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  __int128 v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[240];
  WTF::StringImpl *v74;
  __int128 v75;
  __int128 v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  char v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  IPC::Encoder *v84;

  v4 = (WebCore::PreviewConverter *)WebCore::ResourceResponseBase::mimeType(a2);
  if ((WebCore::PreviewConverter::supportsMIMEType(v4, v5) & 1) == 0)
  {
    v7 = WebCore::ResourceResponseBase::url(a2);
    v8 = *(WTF::StringImpl **)v7;
    if (*(_QWORD *)v7)
    {
      *(_DWORD *)v8 += 2;
      v9 = *(_OWORD *)(v7 + 8);
      v76 = *(_OWORD *)(v7 + 24);
      v75 = v9;
      *(_DWORD *)v8 += 2;
    }
    else
    {
      v66 = *(_OWORD *)(v7 + 8);
      v76 = *(_OWORD *)(v7 + 24);
      v75 = v66;
    }
    v74 = v8;
    v70 = v8;
    v71 = v75;
    v72 = v76;
    MEMORY[0x19AEB0E58](v73, &v70, this + 3, this + 8);
    v11 = v70;
    v70 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    MEMORY[0x19AEB40D4](&v70, a2);
    WebCore::ResourceRequestBase::httpReferrer((WebCore::ResourceRequestBase *)(this + 21));
    WebCore::ContentSecurityPolicy::didReceiveHeaders();
    v13 = v79;
    v79 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v70, v12);
    if (!WebCore::ContentSecurityPolicy::allowFrameAncestors()
      || (WebKit::NetworkResourceLoader::shouldInterruptNavigationForCrossOriginEmbedderPolicy((WebKit::NetworkResourceLoader *)this, a2) & 1) != 0)
    {
      goto LABEL_15;
    }
    if ((WebCore::ContentSecurityPolicy::overridesXFrameOptions((WebCore::ContentSecurityPolicy *)v73) & 1) == 0)
    {
      WebCore::ResourceResponseBase::httpHeaderField();
      if (v69)
      {
        v15 = (WebCore::SecurityOrigin *)WebCore::ResourceResponseBase::url(a2);
        if (*((_BYTE *)this + 315) != 1 || *((_DWORD *)this + 833))
        {
          switch(WebCore::parseXFrameOptionsHeader())
          {
            case 1u:
              goto LABEL_70;
            case 2u:
              result = WebCore::SecurityOrigin::create(v15, v14);
              v17 = *((unsigned int *)this + 833);
              if (!(_DWORD)v17)
              {
                __break(0xC471u);
                return result;
              }
              v18 = (unsigned int *)this[415][v17 - 1];
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 + 1, v18));
              if (WebCore::SecurityOrigin::isSameSchemeHostPort(v70, (const WebCore::SecurityOrigin *)v18))
              {
                v21 = *((unsigned int *)this + 833);
                if ((_DWORD)v21)
                {
                  v22 = this[415];
                  v23 = 8 * v21 - 8;
                  do
                  {
                    v24 = *v22++;
                    isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort(v70, v24);
                    if (isSameSchemeHostPort)
                      v26 = v23 == 0;
                    else
                      v26 = 1;
                    v23 -= 8;
                  }
                  while (!v26);
                  v27 = isSameSchemeHostPort ^ 1;
                }
                else
                {
                  v27 = 0;
                }
              }
              else
              {
                v27 = 1;
              }
              WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v18, v20);
              v49 = v70;
              v70 = 0;
              if (v49)
              {
                WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v49, v14);
                if (!v27)
                  goto LABEL_91;
              }
              else if (!v27)
              {
                goto LABEL_91;
              }
LABEL_70:
              v50 = (WTF::URL *)WebCore::ResourceResponseBase::url(a2);
              WTF::URL::stringCenterEllipsizedToLength(v50);
              v51 = v69;
              if (v69)
                *(_DWORD *)v69 += 2;
              v67 = v51;
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Refused to display '", 21, (uint64_t *)&v68, (uint64_t)"' in a frame because it set 'X-Frame-Options' to '", 51, (uint64_t *)&v67, (uint64_t)"'.", 3, &v83);
              v53 = v67;
              v67 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, v52);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = v68;
              v68 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, v52);
                else
                  *(_DWORD *)v54 -= 2;
              }
              v79 = (WTF::StringImpl *)this[379];
              v80 = 1;
              v70 = (WTF::StringImpl *)(this + 12);
              LOWORD(v71) = 520;
              *((_QWORD *)&v71 + 1) = &v83;
              *(_QWORD *)&v72 = &v79;
              v55 = this[11];
              v56 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v56 = 2100;
              *(_QWORD *)(v56 + 8) = v55;
              *(_QWORD *)(v56 + 528) = v56 + 16;
              *(_QWORD *)(v56 + 536) = v56 + 16;
              *(_OWORD *)(v56 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v56 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v56);
              v84 = (IPC::Encoder *)v56;
              IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v56, (uint64_t)&v70);
              ((void (*)(char *, IPC::Encoder **, _QWORD))this[2][4])((char *)this + 16, &v84, 0);
              v58 = v84;
              v84 = 0;
              if (v58)
              {
                IPC::Encoder::~Encoder(v58, v57);
                WTF::fastFree(v59, v60);
              }
              v61 = v83;
              v83 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v57);
                else
                  *(_DWORD *)v61 -= 2;
              }
              v62 = v69;
              v69 = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                  WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v57);
                else
                  *(_DWORD *)v62 -= 2;
              }
              break;
            case 4u:
              WTF::URL::stringCenterEllipsizedToLength(v15);
              v28 = v69;
              *(_DWORD *)v69 += 2;
              v77 = v28;
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Invalid 'X-Frame-Options' header encountered when loading '", 60, (uint64_t *)&v78, (uint64_t)"': '", 5, (uint64_t *)&v77, (uint64_t)"' is not a recognized directive. The header will be ignored.", 61, &v83);
              v30 = v77;
              v77 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v29);
                else
                  *(_DWORD *)v30 -= 2;
              }
              v34 = v78;
              v78 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, v29);
                else
                  *(_DWORD *)v34 -= 2;
              }
              v79 = (WTF::StringImpl *)this[379];
              v80 = 1;
              v70 = (WTF::StringImpl *)(this + 12);
              LOWORD(v71) = 513;
              *((_QWORD *)&v71 + 1) = &v83;
              *(_QWORD *)&v72 = &v79;
              v35 = this[11];
              v36 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v36 = 2100;
              *(_QWORD *)(v36 + 8) = v35;
              *(_QWORD *)(v36 + 528) = v36 + 16;
              *(_QWORD *)(v36 + 536) = v36 + 16;
              *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v36 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
              v84 = (IPC::Encoder *)v36;
              IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v36, (uint64_t)&v70);
              ((void (*)(char *, IPC::Encoder **, _QWORD))this[2][4])((char *)this + 16, &v84, 0);
              v37 = v84;
              v84 = 0;
              if (v37)
              {
                IPC::Encoder::~Encoder(v37, v14);
                WTF::fastFree(v38, v39);
              }
              v40 = v83;
              v83 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, v14);
                else
                  *(_DWORD *)v40 -= 2;
              }
              goto LABEL_91;
            case 5u:
              v31 = v69;
              *(_DWORD *)v69 += 2;
              v82 = v31;
              WTF::URL::stringCenterEllipsizedToLength(v15);
              WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Multiple 'X-Frame-Options' headers with conflicting values ('", 62, (uint64_t *)&v82, (uint64_t)"') encountered when loading '", 30, (uint64_t *)&v81, (uint64_t)"'. Falling back to 'DENY'.", 27, &v83);
              v33 = v81;
              v81 = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, v32);
                else
                  *(_DWORD *)v33 -= 2;
              }
              v41 = v82;
              v82 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, v32);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v79 = (WTF::StringImpl *)this[379];
              v80 = 1;
              v70 = (WTF::StringImpl *)(this + 12);
              LOWORD(v71) = 513;
              *((_QWORD *)&v71 + 1) = &v83;
              *(_QWORD *)&v72 = &v79;
              v42 = this[11];
              v43 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v43 = 2100;
              *(_QWORD *)(v43 + 8) = v42;
              *(_QWORD *)(v43 + 528) = v43 + 16;
              *(_QWORD *)(v43 + 536) = v43 + 16;
              *(_OWORD *)(v43 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v43 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v43);
              v84 = (IPC::Encoder *)v43;
              IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,JSC::MessageSource,JSC::MessageLevel,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul,3ul,4ul>((IPC::Encoder *)v43, (uint64_t)&v70);
              ((void (*)(char *, IPC::Encoder **, _QWORD))this[2][4])((char *)this + 16, &v84, 0);
              v45 = v84;
              v84 = 0;
              if (v45)
              {
                IPC::Encoder::~Encoder(v45, v44);
                WTF::fastFree(v46, v47);
              }
              v48 = v83;
              v83 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v44);
                else
                  *(_DWORD *)v48 -= 2;
              }
              goto LABEL_70;
            default:
              goto LABEL_91;
          }
LABEL_15:
          v6 = 1;
          goto LABEL_96;
        }
LABEL_91:
        v63 = v69;
        v69 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, v14);
          else
            *(_DWORD *)v63 -= 2;
        }
      }
    }
    v6 = 0;
LABEL_96:
    MEMORY[0x19AEB0E64](v73);
    v65 = v74;
    v74 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v64);
      else
        *(_DWORD *)v65 -= 2;
    }
    return v6;
  }
  return 0;
}

uint64_t WebKit::NetworkResourceLoader::shouldInterruptNavigationForCrossOriginEmbedderPolicy(WebKit::NetworkResourceLoader *this, const WebCore::ResourceResponse *a2)
{
  WTF *v5;
  WTF::StringImpl *v6;
  int v7;
  BOOL v8;
  WTF::StringImpl *v9;
  WTF::URL *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  IPC::Encoder *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  char v18;
  WTF::StringImpl *v19;
  __int16 v20;
  WTF::StringImpl **v21;
  uint64_t *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _BYTE v25[24];

  if (!*((_WORD *)this + 1616))
    return 0;
  v5 = (WTF *)WebCore::obtainCrossOriginEmbedderPolicy();
  v7 = v25[0];
  if (*((_BYTE *)this + 3233))
    v8 = v25[0] == 0;
  else
    v8 = 0;
  if (v8)
  {
    if ((*((_BYTE *)this + 3160) & 1) == 0)
      WTF::aboutBlankURL(v5);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::sendCOEPInheritenceViolation();
    v9 = v19;
    v19 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    v7 = v25[0];
  }
  if (!*((_BYTE *)this + 3232) || v7)
  {
    WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy((WebCore::CrossOriginEmbedderPolicy *)v25, v6);
    return 0;
  }
  v10 = (WTF::URL *)WebCore::ResourceResponseBase::url(a2);
  WTF::URL::stringCenterEllipsizedToLength(v10);
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Refused to display '", 21, (uint64_t *)&v23, (uint64_t)"' in a frame because of Cross-Origin-Embedder-Policy.", 54, &v24);
  v12 = v23;
  v23 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v17 = *((_QWORD *)this + 379);
  v18 = 1;
  v19 = (WebKit::NetworkResourceLoader *)((char *)this + 96);
  v20 = 520;
  v21 = &v24;
  v22 = &v17;
  v13 = IPC::MessageSender::send<Messages::WebPage::AddConsoleMessage,WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>((uint64_t)this + 16, (uint64_t)&v19, *((_QWORD *)this + 11));
  if ((*((_BYTE *)this + 3160) & 1) == 0)
    WTF::aboutBlankURL(v13);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::sendCOEPInheritenceViolation();
  v15 = v19;
  v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy((WebCore::CrossOriginEmbedderPolicy *)v25, v14);
  return 1;
}

uint64_t WebKit::NetworkResourceLoader::didReceiveMainResourceResponse(WebKit::NetworkResourceLoader *this, const WebCore::ResourceResponse *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  WTF::URL *v16;
  uint64_t v17;
  _BYTE v18[32];
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  _BOOL4 v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _BOOL4 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 10);
    v6 = *((_QWORD *)this + 11);
    v7 = *((_QWORD *)this + 12);
    v8 = *((_QWORD *)this + 379);
    v9 = *((unsigned __int8 *)this + 315) == 1;
    v10 = *((unsigned __int8 *)this + 3072);
    v11 = *((_QWORD *)this + 519) != 0;
    *(_DWORD *)v18 = 134219776;
    *(_QWORD *)&v18[4] = this;
    *(_WORD *)&v18[12] = 2048;
    *(_QWORD *)&v18[14] = v5;
    *(_WORD *)&v18[22] = 2048;
    *(_QWORD *)&v18[24] = v6;
    v19 = 2048;
    v20 = v7;
    v21 = 2048;
    v22 = v8;
    v23 = 1024;
    v24 = v9;
    v25 = 1024;
    v26 = v10;
    v27 = 1024;
    v28 = v11;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, frameID=%llu, resourceID=%llu, isMainResource=%d, destination=%u, isSynchronous=%d] NetworkResourceLoader::didReceiveMainResourceResponse:", v18, 0x46u);
  }
  v12 = *((_QWORD *)this + 532);
  if (v12)
  {
    v14 = *(_QWORD *)(v12 + 32);
    if (v14)
    {
      v15 = *((_OWORD *)this + 6);
      *(_OWORD *)v18 = *((_OWORD *)this + 5);
      *(_OWORD *)&v18[16] = v15;
      WebKit::NetworkCache::SpeculativeLoadManager::registerMainResourceLoadResponse(v14, (const WebCore::ResourceRequest *)v18, (WebKit::NetworkResourceLoader *)((char *)this + 168), a2);
    }
  }
  result = *(_QWORD *)WebCore::ResourceResponseBase::mimeType(a2);
  if (result)
  {
    result = WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>(result, "application/x-webarchive");
    if ((_DWORD)result)
    {
      v16 = (WTF::URL *)WebCore::ResourceResponseBase::url(a2);
      WTF::URL::protocol(v16);
      result = WebCore::LegacySchemeRegistry::shouldTreatURLSchemeAsLocal();
      if ((_DWORD)result)
      {
        v17 = *((_QWORD *)this + 482);
        ++*(_DWORD *)(v17 + 8);
        result = WebKit::NetworkProcess::webProcessWillLoadWebArchive(*(_QWORD *)(v17 + 72), *(_QWORD *)(v17 + 256));
        if (*(_DWORD *)(v17 + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        else
          --*(_DWORD *)(v17 + 8);
      }
    }
  }
  return result;
}

BOOL WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>(uint64_t a1, char *__s)
{
  char *v2;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;

  v2 = __s;
  if (__s)
    __s = (char *)strlen(__s);
  if (__s != (char *)*(unsigned int *)(a1 + 4))
    return 0;
  v4 = *(unsigned __int8 **)(a1 + 8);
  if ((*(_BYTE *)(a1 + 16) & 4) == 0)
    return WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>((_BOOL8)v4, (uint64_t)__s, (uint64_t)v2, (uint64_t)__s, (unint64_t)__s);
  if (!__s)
    return 1;
  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v4) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v2))
    return 0;
  v5 = 1;
  do
  {
    v6 = v5;
    if (__s == (char *)v5)
      break;
    v7 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v4[v5]);
    v8 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v2[v5++]);
  }
  while (v7 == v8);
  return v6 >= (unint64_t)__s;
}

WebKit::ViewGestureController *WebKit::ViewGestureController::ViewGestureController(WebKit::ViewGestureController *this, WebKit::WebPageProxy *a2)
{
  WTF::RunLoop::TimerBase *v4;
  WTF::RunLoop *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E34D8F40;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 28) = 1;
  v4 = (WebKit::ViewGestureController *)((char *)this + 32);
  v5 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34D9000;
  v6[1] = WebKit::ViewGestureController::checkForActiveLoads;
  v6[2] = 0;
  v6[3] = this;
  WTF::RunLoop::TimerBase::TimerBase(v4, v5);
  *((_QWORD *)this + 4) = off_1E34ABE00;
  *((_QWORD *)this + 7) = v6;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 149) = 0u;
  WebKit::ViewGestureController::SnapshotRemovalTracker::SnapshotRemovalTracker((WebKit::ViewGestureController *)((char *)this + 168));
  *((_QWORD *)this + 30) = 0;
  if (!*((_BYTE *)a2 + 729) && *((_BYTE *)a2 + 728))
    WebKit::ViewGestureController::connectToProcess((unsigned int *)this);
  {
    WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers = 0;
  }
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ViewGestureController,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::ViewGestureController&>(&WebKit::viewGestureControllersForAllPages(void)::viewGestureControllers, &v9, (uint64_t)this, (uint64_t)&v8);
  return this;
}

void WebKit::ViewGestureController::installSwipeHandler(WebKit::ViewGestureController *this, UIView *a2, UIView *a3)
{
  WKSwipeTransitionController *v5;
  const void *v6;

  v5 = -[WKSwipeTransitionController initWithViewGestureController:gestureRecognizerView:]([WKSwipeTransitionController alloc], "initWithViewGestureController:gestureRecognizerView:", this, a2);
  v6 = (const void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v5;
  if (v6)
    CFRelease(v6);
  *((_QWORD *)this + 13) = a3;
}

unsigned int *WebKit::ViewGestureController::connectToProcess(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  _QWORD v6[2];

  if (!*((_BYTE *)this + 161))
  {
    v1 = this;
    v2 = *((_QWORD *)this + 2);
    v3 = *(_QWORD *)(v2 + 208);
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 1896);
    v6[0] = 148;
    v6[1] = v4;
    this = WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v3 + 160), (unsigned __int8 *)v6, (uint64_t)this, &v5);
    *((_BYTE *)v1 + 161) = 1;
  }
  return this;
}

void sub_196D392F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

void WebKit::WebChromeClient::pageExtendedBackgroundColorDidChange(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  *(_BYTE *)(v2 + 938) = 1;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(id *this)
{
  WTF *v1;
  void *v2;

  WebKit::RemoteLayerTreeDrawingAreaProxyIOS::~RemoteLayerTreeDrawingAreaProxyIOS(this);
  WTF::fastFree(v1, v2);
}

{
  id v2;

  objc_msgSend(this[28], "invalidate");
  v2 = this[28];
  this[28] = 0;
  if (v2)
    CFRelease(v2);
  WebKit::RemoteLayerTreeDrawingAreaProxy::~RemoteLayerTreeDrawingAreaProxy((WebKit::RemoteLayerTreeDrawingAreaProxy *)this);
}

void sub_196D39520(_Unwind_Exception *a1)
{
  WebKit::RemoteLayerTreeDrawingAreaProxy *v1;
  const void *v3;

  v3 = (const void *)*((_QWORD *)v1 + 28);
  *((_QWORD *)v1 + 28) = 0;
  if (v3)
    CFRelease(v3);
  WebKit::RemoteLayerTreeDrawingAreaProxy::~RemoteLayerTreeDrawingAreaProxy(v1);
  _Unwind_Resume(a1);
}

void WebKit::RemoteLayerTreeDrawingAreaProxy::~RemoteLayerTreeDrawingAreaProxy(WebKit::RemoteLayerTreeDrawingAreaProxy *this)
{
  const void *v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = off_1E34CB4D0;
  *((_QWORD *)this + 2) = &unk_1E34CB678;
  v2 = (const void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
    CFRelease(v3);
  std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100]((WebKit::RemoteLayerTreeHost **)this + 21, 0);
  v5 = *((_QWORD *)this + 16);
  if (v5)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebKit::RemoteLayerTreeDrawingAreaProxy::ProcessState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v5, v4);
  std::unique_ptr<WebKit::RemoteLayerTreeHost>::reset[abi:sn180100]((WebKit::RemoteLayerTreeHost **)this + 9, 0);
  WebKit::DrawingAreaProxy::~DrawingAreaProxy(this, v6);
}

void WebKit::RemoteLayerTreeHost::~RemoteLayerTreeHost(WebKit::RemoteLayerTreeHost *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;

  v4 = (uint64_t *)((char *)this + 48);
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v5 = *(unsigned int *)(v3 - 4);
    v6 = v3 + 24 * v5;
    if (*(_DWORD *)(v3 - 12))
    {
      v7 = *((_QWORD *)this + 6);
      if ((_DWORD)v5)
      {
        v8 = 24 * v5;
        v7 = *((_QWORD *)this + 6);
        while (*(_OWORD *)v7 == 0 || *(_QWORD *)(v7 + 8) == -1)
        {
          v7 += 24;
          v8 -= 24;
          if (!v8)
          {
            v7 = v6;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v7 = v3 + 24 * v5;
  }
  else
  {
    v7 = 0;
    LODWORD(v5) = 0;
  }
  v6 = v3 + 24 * v5;
  if (v3)
  {
LABEL_12:
    v10 = v3 + 24 * *(unsigned int *)(v3 - 4);
    goto LABEL_17;
  }
  v10 = 0;
LABEL_17:
  while (v7 != v10)
  {
    objc_msgSend(*(id *)(v7 + 16), "invalidate");
    v11 = v7 + 24;
    v7 = v6;
    if (v11 != v6)
    {
      v7 = v11;
      while (*(_OWORD *)v7 == 0 || *(_QWORD *)(v7 + 8) == -1)
      {
        v7 += 24;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  v13 = *((_QWORD *)this + 2);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    v15 = (_QWORD *)(v13 + 24 * v14);
    if (*(_DWORD *)(v13 - 12))
    {
      v16 = (_QWORD *)*((_QWORD *)this + 2);
      if ((_DWORD)v14)
      {
        v17 = 24 * v14;
        v16 = (_QWORD *)*((_QWORD *)this + 2);
        while (*(_OWORD *)v16 == 0 || v16[1] == -1)
        {
          v16 += 3;
          v17 -= 24;
          if (!v17)
          {
            v16 = v15;
            goto LABEL_39;
          }
        }
      }
      goto LABEL_39;
    }
    v16 = (_QWORD *)(v13 + 24 * v14);
  }
  else
  {
    v16 = 0;
    LODWORD(v14) = 0;
  }
  v15 = (_QWORD *)(v13 + 24 * v14);
  if (v13)
  {
LABEL_39:
    v19 = (_QWORD *)(v13 + 24 * *(unsigned int *)(v13 - 4));
    goto LABEL_44;
  }
  v19 = 0;
LABEL_44:
  if (v19 == v16)
    goto LABEL_66;
  do
  {
    v20 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v4, v16);
    if (*v4)
    {
      v21 = *v4 + 24 * *(unsigned int *)(*v4 - 4);
      if ((uint64_t *)v21 == v20)
        goto LABEL_52;
    }
    else
    {
      if (!v20)
        goto LABEL_52;
      v21 = 0;
    }
    if ((uint64_t *)v21 != v20)
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v4, (uint64_t)v20);
LABEL_52:
    v22 = v16[2];
    v23 = *(void **)(v22 + 48);
    if (v23)
      objc_msgSend(v23, "removeFromSuperview");
    else
      objc_msgSend(*(id *)(v22 + 40), "removeFromSuperlayer");
    v24 = v16 + 3;
    v16 = v15;
    if (v24 != v15)
    {
      v16 = v24;
      while (*(_OWORD *)v16 == 0 || v16[1] == -1)
      {
        v16 += 3;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  while (v16 != v19);
  v13 = *((_QWORD *)this + 2);
LABEL_66:
  if (v13)
  {
    *((_QWORD *)this + 2) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v13, a2);
  }
  v26 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, a2);
    }
  }
  v29 = *((_QWORD *)this + 7);
  if (v29)
    WTF::fastFree((WTF *)(v29 - 16), a2);
  if (*v4)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(*v4, a2);
  v30 = *((_QWORD *)this + 5);
  if (v30)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v30, a2);
  v31 = *((_QWORD *)this + 4);
  if (v31)
    WTF::fastFree((WTF *)(v31 - 16), a2);
  v32 = *((_QWORD *)this + 3);
  if (v32)
    WTF::fastFree((WTF *)(v32 - 16), a2);
  v33 = *((_QWORD *)this + 2);
  if (v33)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v33, a2);
  v34 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, a2);
    }
  }
  v37 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v37)
  {
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      WTF::fastFree((WTF *)v37, a2);
    }
  }
}

void sub_196D398F0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v5 = *(_QWORD *)(v2 + 56);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  if (*v3)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(*v3, a2);
  v6 = *(_QWORD *)(v2 + 40);
  if (v6)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v6, a2);
  v7 = *(_QWORD *)(v2 + 32);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  v8 = *(_QWORD *)(v2 + 24);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), a2);
  v9 = *(_QWORD *)(v2 + 16);
  if (v9)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::RemoteLayerTreeNode>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteLayerTreeNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v9, a2);
  v10 = *(unsigned int **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = *(unsigned int **)v2;
  *(_QWORD *)v2 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::DrawingAreaProxy::~DrawingAreaProxy(WebKit::DrawingAreaProxy *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E34CF758;
  *((_QWORD *)this + 2) = &unk_1E34CF8B8;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordDrawRect(WTF::ApproximateTime *this, const WebCore::FloatRect *a2, float a3)
{
  uint64_t v3;
  WTF::ApproximateTime *v4;
  unsigned __int8 *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  WebKit::RemoteImageBufferProxy *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  int v54;
  int v55;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  _BYTE *v59;
  const WebCore::FloatRect *v60;
  float v61;
  WebKit::RemoteImageBufferProxy *v62;
  IPC::StreamClientConnection *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int8 v66;
  _BYTE buf[24];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v60 = a2;
  v61 = a3;
  v3 = *((_QWORD *)this + 481);
  if (!v3)
    return this;
  v4 = this;
  this = *(WTF::ApproximateTime **)(v3 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v63);
  if (!v63)
    return this;
  v5 = (unsigned __int8 *)*((_QWORD *)v4 + 479);
  if (v5)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((_QWORD *)v4 + 480), &v62);
    v5 = (unsigned __int8 *)v62;
    if (v62)
      v5 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v62);
  }
  else
  {
    v62 = 0;
  }
  v6 = v63;
  v7 = *((_QWORD *)v4 + 478);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v5);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v6 + 6) == v7)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, &v64, v9);
      if (!v66)
      {
        v54 = 15;
        goto LABEL_86;
      }
      *(_QWORD *)buf = v64;
      *(_QWORD *)&buf[8] = v65;
      *(_QWORD *)&buf[16] = 0;
      v10 = (v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 >= v64;
      v12 = v10 - v64;
      if (v11)
      {
        if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v65)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v64 + v12) = 823;
          *(_QWORD *)&buf[16] = v12 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<WebCore::FloatRect const&,float>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WebCore::FloatRect const&,float>,0ul,1ul>((uint64_t *)buf, (uint64_t)&v60);
      if (*(_QWORD *)&buf[8])
      {
        v16 = *(_QWORD *)&buf[16];
        v17 = *((_QWORD *)v6 + 8);
        v18 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v19 = *((_QWORD *)v6 + 7);
        if (v18 + 16 >= v19)
          v18 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v16 = 16;
        v20 = v18 + v16;
        if (v19 <= v20)
          v21 = 0;
        else
          v21 = v20;
        *((_QWORD *)v6 + 9) = v21;
        v22 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v21, v22));
        if (v23 == 0x80000000 || *((_DWORD *)v6 + 27))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
        goto LABEL_27;
      }
      v34 = v66;
      if (v66)
        break;
      __break(1u);
LABEL_97:
      v38 = 0;
      v37 = v15;
LABEL_57:
      v39 = (v34 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v39 >= v34 + v38)
      {
        v40 = v39 - v34;
        v41 = 17;
        if (v40 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_95;
        v38 = v40 + 8;
        if (v40 + 8 > v37)
          goto LABEL_95;
        *(_QWORD *)(v34 + v40) = v7;
      }
      if (!v37)
      {
        v41 = 17;
        goto LABEL_95;
      }
      v42 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *((_QWORD *)v6 + 7);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v45 = 0;
      else
        v45 = v44;
      *((_QWORD *)v6 + 9) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *((_DWORD *)v6 + 27);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v50 = v48 + 1;
        *((_DWORD *)v6 + 27) = v50;
        if (v50 >= *((_DWORD *)v6 + 26))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v64, v65);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
    v55 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawRect>(*(uint64_t *)buf, (uint64_t)&v60, v7);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
    v54 = v55;
    if (!v55)
      goto LABEL_27;
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
    if (buf[16])
    {
      v34 = *(_QWORD *)buf;
      v15 = *(_QWORD *)&buf[8];
      v35 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v36 = v35 - *(_QWORD *)buf;
      if (v35 < *(_QWORD *)buf)
        goto LABEL_97;
      v37 = 0;
      if (v36 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v38 = 0;
      }
      else
      {
        v38 = 0;
        if (v36 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v36) = 2822;
          v37 = v15;
          v38 = v36 + 2;
        }
      }
      goto LABEL_57;
    }
    v41 = 15;
LABEL_95:
    v54 = v41;
  }
LABEL_86:
  v56 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v57 = IPC::errorAsString(v54);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawRect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v57;
    _os_log_impl(&dword_196BCC000, v56, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v58 = *((_QWORD *)v4 + 481);
  if (v58)
  {
    v59 = *(_BYTE **)(v58 + 8);
    if (v59)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v59);
  }
LABEL_27:
  v24 = v62;
  v62 = 0;
  if (v24)
  {
    v25 = *((_QWORD *)v24 + 1);
    if (__ldaxr((unsigned __int8 *)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v25))
    {
LABEL_31:
      v27 = *(_QWORD *)(v25 + 8);
      v28 = v27 - 1;
      *(_QWORD *)(v25 + 8) = v27 - 1;
      if (v27 == 1)
      {
        v53 = *(_QWORD *)(v25 + 16);
        v29 = *(_QWORD *)(v25 + 24);
        *(_QWORD *)(v25 + 24) = 0;
        v30 = v53 != 0;
      }
      else
      {
        v29 = 0;
        v30 = 1;
      }
      v31 = __ldxr((unsigned __int8 *)v25);
      if (v31 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v25))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_35:
      if (!v28)
      {
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        if (!v30)
          WTF::fastFree((WTF *)v25, v14);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v25);
    goto LABEL_31;
  }
LABEL_36:
  this = v63;
  v63 = 0;
  if (this)
  {
    do
    {
      v32 = __ldaxr((unsigned int *)this);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, (unsigned int *)this));
    if (!v33)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v51, v52);
    }
  }
  return this;
}

void WebKit::WebInspectorUIProxy::~WebInspectorUIProxy(WebKit::WebInspectorUIProxy *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_1E34DCE88;
  *((_QWORD *)this + 2) = &unk_1E34DCEC8;
  *((_QWORD *)this + 4) = &unk_1E34DCF00;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, a2);
}

{
  WebKit::WebInspectorUIProxy::~WebInspectorUIProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::cookieStorageFromIdentifyingData(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  CFDataRef v3;

  v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const UInt8 **)a1, *(unsigned int *)(a1 + 12));
  *a2 = CFHTTPCookieStorageCreateFromIdentifyingData();
  objc_msgSend(MEMORY[0x1E0C92C58], "resourceLoaderRunLoop");
  CFHTTPCookieStorageScheduleWithRunLoop();
  if (v3)
    CFRelease(v3);
}

void sub_196D3A1A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::GPUConnectionToWebProcess::userMediaCaptureManagerProxy(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;

  result = *((_QWORD *)this + 17);
  if (!result)
  {
    WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::GPUProxyForCapture,WebKit::GPUConnectionToWebProcess &>((uint64_t)this, &v7);
    std::make_unique[abi:sn180100]<WebKit::UserMediaCaptureManagerProxy,WTF::UniqueRef<WebKit::GPUProxyForCapture>>((uint64_t *)&v7, &v8);
    v3 = v8;
    v8 = 0;
    v4 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = v8;
      v8 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    v6 = v7;
    v7 = 0;
    if (v6)
      std::default_delete<WebKit::GPUProxyForCapture>::operator()[abi:sn180100]((int)&v7, v6);
    return *((_QWORD *)this + 17);
  }
  return result;
}

uint64_t *WTF::ScopeExit<WTF::CompletionHandler<void ()(void)>>::~ScopeExit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

IPC::Encoder *IPC::MessageSender::send<Messages::GPUProcessProxy::SetHasVP9HardwareDecoder>(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 59;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::GPUProcessConnection::DidInitialize>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 53;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::optional<WebKit::GPUProcessConnectionInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::GPUProcessConnectionInfo> const&>((IPC::Encoder *)v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::GPUProcessConnectionInfo>,void>::encode<IPC::Encoder,std::optional<WebKit::GPUProcessConnectionInfo> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  IPC::Encoder *v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 40);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 40))
    {
      v6 = a1;
      v7 = a2;
    }
    else
    {
      v6 = (IPC::Encoder *)std::__throw_bad_optional_access[abi:sn180100]();
    }
    return IPC::ArgumentCoder<WebKit::GPUProcessConnectionInfo,void>::encode(v6, v7);
  }
  else
  {
    *result = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<WebKit::GPUProcessConnectionInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCAuditToken>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCAuditToken> const&>(a1, a2);
  v4 = *(_BYTE *)(v2 + 36);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *(_BYTE *)(v2 + 37);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = v2;
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCAuditToken>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCAuditToken> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  uint64_t i;
  int v7;
  WebKit::RemoteSampleBufferDisplayLayerManager *v8;
  WebKit::GPUConnectionToWebProcess *v9;

  v4 = *(unsigned __int8 *)(a2 + 32);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 32))
    {
      for (i = 0; i != 32; i += 4)
      {
        v7 = *(_DWORD *)(a2 + i);
        result = IPC::Encoder::grow(a1, 4uLL, 4);
        *(_DWORD *)result = v7;
      }
    }
    else
    {
      v8 = (WebKit::RemoteSampleBufferDisplayLayerManager *)std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)WebKit::RemoteSampleBufferDisplayLayerManager::create(v8, v9);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

void WebKit::RemoteSampleBufferDisplayLayerManager::create(WebKit::RemoteSampleBufferDisplayLayerManager *this, WebKit::GPUConnectionToWebProcess *a2)
{
  WebKit::RemoteSampleBufferDisplayLayerManager *v4;
  WebKit::RemoteSampleBufferDisplayLayerManager *v5;

  v4 = (WebKit::RemoteSampleBufferDisplayLayerManager *)WTF::fastMalloc((WTF *)0x48);
  v5 = (WebKit::RemoteSampleBufferDisplayLayerManager *)WebKit::RemoteSampleBufferDisplayLayerManager::RemoteSampleBufferDisplayLayerManager(v4, a2);
  *(_QWORD *)this = v5;
  WebKit::RemoteSampleBufferDisplayLayerManager::startListeningForIPC(v5);
}

WebKit::RemoteSampleBufferDisplayLayerManager *WebKit::RemoteSampleBufferDisplayLayerManager::RemoteSampleBufferDisplayLayerManager(WebKit::RemoteSampleBufferDisplayLayerManager *this, WebKit::GPUConnectionToWebProcess *a2)
{
  uint64_t v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34B0558;
  *((_QWORD *)this + 1) = 0;
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v4 + 24) = this;
  *((_QWORD *)this + 2) = v4;
  *(_QWORD *)this = off_1E34BBD08;
  v5 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)a2 + 2);
  if (v5)
    v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v5);
  *((_QWORD *)this + 3) = v5;
  *((_QWORD *)this + 4) = a2;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)this + 5, *((unsigned __int8 ***)a2 + 6));
  v6 = WebKit::GPUProcess::videoMediaStreamTrackRendererQueue(*((WebKit::GPUProcess **)a2 + 9));
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  *((_QWORD *)this + 6) = v6;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void WebKit::RemoteSampleBufferDisplayLayerManager::startListeningForIPC(WebKit::RemoteSampleBufferDisplayLayerManager *this)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 3);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v2, *((_QWORD *)this + 4), &v4);
    if (v4)
    {
      IPC::Connection::addWorkQueueMessageReceiver(*(_QWORD *)(v4 + 48), 0x76u, *((_QWORD *)this + 6), (uint64_t)this, 0);
      IPC::Connection::addWorkQueueMessageReceiver(*(_QWORD *)(v4 + 48), 0x77u, *((_QWORD *)this + 6), (uint64_t)this, 0);
      v3 = v4;
      v4 = 0;
      if (v3)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUConnectionToWebProcess,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 16));
    }
  }
}

WebKit::RemoteMediaPlayerManagerProxy *WebKit::RemoteMediaPlayerManagerProxy::RemoteMediaPlayerManagerProxy(WebKit::RemoteMediaPlayerManagerProxy *this, WebKit::GPUConnectionToWebProcess *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E34BA1D0;
  v4 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)a2 + 2);
  if (v4)
    v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  *((_QWORD *)this + 3) = v4;
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = 0;
  return this;
}

uint64_t WebKit::remoteVideoFrameObjectHeapQueue(WebKit *this)
{
  uint64_t result;
  uint64_t v2;

    return WebKit::remoteVideoFrameObjectHeapQueue(void)::queue;
  WTF::WorkQueue::create();
  result = v2;
  WebKit::remoteVideoFrameObjectHeapQueue(void)::queue = v2;
  return result;
}

WebKit::SharedVideoFrameWriter *WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter(WebKit::SharedVideoFrameWriter *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)WTF::fastMalloc((WTF *)8);
  *v2 = 0;
  v2[1] = 0;
  semaphore_create(*MEMORY[0x1E0C83DA0], v2 + 1, 0, 0);
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 1) = 0;
  *(_DWORD *)((char *)this + 15) = 0;
  return this;
}

double WebKit::SharedVideoFrameReader::SharedVideoFrameReader(WebKit::SharedVideoFrameReader *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 9) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  return result;
}

void WebKit::LibWebRTCCodecsProxy::create(WebKit::LibWebRTCCodecsProxy *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v5;

  v5 = (uint64_t *)WTF::fastMalloc((WTF *)0x58);
  WebKit::LibWebRTCCodecsProxy::LibWebRTCCodecsProxy((WebKit::LibWebRTCCodecsProxy *)v5, this);
  *a2 = v5;
  IPC::Connection::addWorkQueueMessageReceiver(v5[3], 0x14u, v5[4], (uint64_t)v5, 0);
}

void sub_196D3A85C(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  _Unwind_Resume(a1);
}

WebKit::LibWebRTCCodecsProxy *WebKit::LibWebRTCCodecsProxy::LibWebRTCCodecsProxy(WebKit::LibWebRTCCodecsProxy *this, WebKit::GPUConnectionToWebProcess *a2)
{
  IPC::WorkQueueMessageReceiver *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = IPC::WorkQueueMessageReceiver::WorkQueueMessageReceiver(this);
  *(_QWORD *)v4 = off_1E34B0288;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v4 + 3, *((unsigned __int8 ***)a2 + 6));
  v5 = WebKit::GPUProcess::libWebRTCCodecsQueue(*((WebKit::GPUProcess **)a2 + 9));
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  *((_QWORD *)this + 4) = v5;
  v6 = WebKit::GPUConnectionToWebProcess::videoFrameObjectHeap(a2);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v6 + 16));
  *((_QWORD *)this + 5) = v6;
  WTF::MachSendRight::MachSendRight((WebKit::LibWebRTCCodecsProxy *)((char *)this + 48), (WebKit::GPUConnectionToWebProcess *)((char *)a2 + 88));
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 0;
  return this;
}

void sub_196D3A91C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  unsigned __int8 ***v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  v6 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v3);
  *(_QWORD *)v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), v7);
  _Unwind_Resume(a1);
}

void sub_196D3A980()
{
  JUMPOUT(0x196D3A95CLL);
}

uint64_t WebKit::GPUConnectionToWebProcess::videoFrameObjectHeap(WebKit::GPUConnectionToWebProcess *this)
{
  return *((_QWORD *)this + 24);
}

uint64_t WebKit::GPUProcess::videoMediaStreamTrackRendererQueue(WebKit::GPUProcess *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = *((_QWORD *)this + 21);
  if (!result)
  {
    WTF::WorkQueue::create();
    v3 = *((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v4;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
    return *((_QWORD *)this + 21);
  }
  return result;
}

uint64_t WebKit::GPUProcess::libWebRTCCodecsQueue(WebKit::GPUProcess *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = *((_QWORD *)this + 23);
  if (!result)
  {
    WTF::WorkQueue::create();
    v3 = *((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v4;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
    return *((_QWORD *)this + 23);
  }
  return result;
}

void sub_196D3AB48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_BYTE *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::NavigationActionData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::NavigationActionData,void>::decode();
  if (!*(_BYTE *)(a2 + 2560))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196D3ABA4(_Unwind_Exception *exception_object)
{
  WebKit::NavigationActionData *v1;

  if (*((_BYTE *)v1 + 2560))
    WebKit::NavigationActionData::~NavigationActionData(v1);
  _Unwind_Resume(exception_object);
}

uint64_t API::NavigationAction::NavigationAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5, uint64_t a6, uint64_t a7, char a8, uint64_t *a9, uint64_t a10)
{
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  __int128 v29;
  uint64_t v30;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D50F0;
  if (a3)
    CFRetain(*(CFTypeRef *)(a3 + 8));
  *(_QWORD *)(a1 + 16) = a3;
  if (a4)
    CFRetain(*(CFTypeRef *)(a4 + 8));
  *(_QWORD *)(a1 + 24) = a4;
  v18 = *a5;
  if (*a5)
    *v18 += 2;
  *(_QWORD *)(a1 + 32) = v18;
  WTF::URL::URL(a1 + 40, (uint64_t *)a6);
  WTF::URL::URL(a1 + 80, (uint64_t *)(a6 + 40));
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a6 + 80);
  v19 = *(_QWORD *)(a6 + 88);
  *(_QWORD *)(a6 + 88) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = v19;
  v20 = *(_QWORD *)(a6 + 96);
  *(_QWORD *)(a6 + 96) = 0;
  *(_QWORD *)(a1 + 136) = v20;
  LODWORD(v20) = *(_DWORD *)(a6 + 104);
  *(_DWORD *)(a6 + 104) = 0;
  *(_DWORD *)(a1 + 144) = v20;
  LODWORD(v20) = *(_DWORD *)(a6 + 108);
  *(_DWORD *)(a6 + 108) = 0;
  *(_DWORD *)(a1 + 148) = v20;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v21 = *(_QWORD *)(a6 + 112);
  *(_QWORD *)(a6 + 112) = 0;
  *(_QWORD *)(a1 + 152) = v21;
  LODWORD(v21) = *(_DWORD *)(a6 + 120);
  *(_DWORD *)(a6 + 120) = 0;
  *(_DWORD *)(a1 + 160) = v21;
  LODWORD(v21) = *(_DWORD *)(a6 + 124);
  *(_DWORD *)(a6 + 124) = 0;
  *(_DWORD *)(a1 + 164) = v21;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v22 = *(_QWORD *)(a6 + 128);
  *(_QWORD *)(a6 + 128) = 0;
  *(_QWORD *)(a1 + 168) = v22;
  LODWORD(v22) = *(_DWORD *)(a6 + 136);
  *(_DWORD *)(a6 + 136) = 0;
  *(_DWORD *)(a1 + 176) = v22;
  LODWORD(v22) = *(_DWORD *)(a6 + 140);
  *(_DWORD *)(a6 + 140) = 0;
  *(_DWORD *)(a1 + 180) = v22;
  LODWORD(v22) = *(_DWORD *)(a6 + 144);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a6 + 148);
  *(_DWORD *)(a1 + 184) = v22;
  v23 = *(_QWORD *)(a6 + 152);
  *(_QWORD *)(a6 + 152) = 0;
  *(_QWORD *)(a1 + 192) = v23;
  v24 = *(_QWORD *)(a6 + 160);
  *(_QWORD *)(a6 + 160) = 0;
  *(_QWORD *)(a1 + 200) = v24;
  v25 = *(_QWORD *)(a6 + 168);
  *(_QWORD *)(a6 + 168) = 0;
  *(_QWORD *)(a1 + 208) = v25;
  v26 = *(_QWORD *)(a6 + 176);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a6 + 184);
  *(_QWORD *)(a1 + 216) = v26;
  v27 = *(_QWORD *)(a6 + 192);
  *(_QWORD *)(a6 + 192) = 0;
  *(_QWORD *)(a1 + 232) = v27;
  v28 = *(_DWORD **)a7;
  if (*(_QWORD *)a7)
    *v28 += 2;
  *(_QWORD *)(a1 + 240) = v28;
  v29 = *(_OWORD *)(a7 + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a7 + 24);
  *(_OWORD *)(a1 + 248) = v29;
  *(_BYTE *)(a1 + 280) = a8;
  *(_BYTE *)(a1 + 281) = 1;
  v30 = *a9;
  *a9 = 0;
  *(_QWORD *)(a1 + 288) = v30;
  WebKit::NavigationActionData::NavigationActionData(a1 + 304, a2);
  if (a10)
    CFRetain(*(CFTypeRef *)(a10 + 8));
  *(_QWORD *)(a1 + 2864) = a10;
  return a1;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::NavigationActionData,void>::decode()
{
  uint64_t *v0;
  uint64_t *v1;
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  __int128 *v8;
  __int16 *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  char v21;
  unsigned __int8 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  unint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  __int16 *v48;
  char v49;
  __int16 *v50;
  unsigned __int16 v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  WTF::RefCountedBase *v71;
  WTF::RefCountedBase *v72;
  WTF::StringImpl *v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *result;
  WTF::StringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  int v160;
  _BYTE *v161;
  int v162;
  char v163;
  int v164;
  char v165;
  int v166;
  char v167;
  int v168;
  char v169;
  int v170;
  unint64_t v171;
  uint64_t v172;
  char v173;
  unsigned __int16 v174;
  int v175;
  uint64_t v176;
  unsigned __int16 ShouldOpenExternalURLs;
  unsigned __int16 v178;
  _OWORD *v179;
  _BYTE *v180;
  WTF::RefCountedBase *v181;
  _BYTE v182[192];
  uint64_t v183;
  char v184;
  _BYTE v185[192];
  uint64_t v186;
  char v187;
  uint64_t v188;
  char v189;
  char v190;
  _BYTE v191[312];
  char v192;
  char v193;
  WTF::StringImpl *v194;
  char v195;
  __int128 v196;
  char v197;
  char v198;
  __int128 v199;
  char v200;
  char v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  _BYTE v220[19];
  uint64_t v221;
  char v222;
  char v223;
  WTF::StringImpl *v224;
  char v225;
  __int128 v226;
  uint64_t v227;
  char v228;
  __int128 v229;
  char v230;
  char v231;
  char v232;
  WTF::StringImpl *v233;
  unint64_t v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  _BYTE v253[19];
  uint64_t v254;
  char v255;
  char v256;
  char v257;
  char v258;
  char v259;
  char v260;
  _BYTE v261[32];
  _OWORD v262[3];
  char v263;
  __int128 v264;
  char v265;
  char v266;
  char v267;
  WTF::StringImpl *v268;
  int v269;
  _BYTE v270[56];
  _BYTE v271[120];
  char v272;
  __int16 v273;
  __int16 v274;
  char v275;
  _BYTE v276[672];
  __int16 v277;
  _QWORD v278[25];
  _QWORD v279[5];
  __int128 v280;
  _OWORD v281[2];
  uint64_t v282;
  char v283;
  __int16 v284;
  _QWORD v285[25];
  _QWORD v286[5];
  __int128 v287;
  _OWORD v288[2];
  uint64_t v289;
  _QWORD v290[25];
  _QWORD v291[26];
  __int16 v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  __int128 v297;
  _OWORD v298[2];
  char v299;
  __int16 v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  __int128 v305;
  _OWORD v306[2];
  char v307;
  _BYTE v308[664];
  char v309;
  char v310;
  _BYTE v311[56];
  char v312;
  _BYTE v313[24];
  int v314;
  char v315;
  _BYTE v316[24];
  int v317;
  char v318;
  __int128 v319;
  char v320;
  char v321;
  _BYTE v322[15];
  uint64_t v323;

  v0 = (uint64_t *)MEMORY[0x1E0C80A78]();
  v1 = v0;
  v3 = v2;
  v323 = *MEMORY[0x1E0C80C00];
  v4 = v0[1];
  v5 = *v0;
  v6 = v0[2] - *v0;
  if (v4 <= v6)
  {
    v94 = 0;
    v95 = 0;
    *v0 = 0;
    v0[1] = 0;
    v96 = v0[3];
    if (v96)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v96 + 16))(v96, v5, v4);
        v95 = *v1;
        v94 = v1[1];
      }
      else
      {
        v94 = 0;
        v95 = 0;
      }
    }
    goto LABEL_149;
  }
  v7 = (_BYTE *)(v5 + v6);
  v0[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    v94 = v4;
    v95 = 0;
LABEL_149:
    *v1 = 0;
    v1[1] = 0;
    v97 = v1[3];
    if (v97 && v94)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v97 + 16))(v97, v95);
    goto LABEL_150;
  }
  if (*v7 < 6u)
  {
    LOBYTE(v179) = *v7;
    LODWORD(v180) = 0;
    goto LABEL_5;
  }
LABEL_150:
  v98 = *v1;
  v99 = v1[1];
  *v1 = 0;
  v1[1] = 0;
  v100 = v1[3];
  if (v100 && v99)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 16))(v100, v98);
  LOBYTE(v179) = 0;
  LODWORD(v180) = 1;
LABEL_5:
  v8 = &v226;
  LOWORD(v9) = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>(v1);
  v178 = IPC::Decoder::decode<WebKit::WebMouseEventButton>(v1);
  ShouldOpenExternalURLs = IPC::Decoder::decode<WebCore::ShouldOpenExternalURLsPolicy>(v1);
  v10 = v1[1];
  v11 = *v1;
  v12 = v1[2] - *v1;
  if (v10 <= v12)
  {
    v101 = 0;
    v102 = 0;
    *v1 = 0;
    v1[1] = 0;
    v103 = v1[3];
    if (v103)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
        v102 = *v1;
        v101 = v1[1];
      }
      else
      {
        v101 = 0;
        v102 = 0;
      }
      v8 = &v226;
    }
    goto LABEL_153;
  }
  v13 = (unsigned __int8 *)(v11 + v12);
  v1[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    v101 = v10;
    v102 = 0;
LABEL_153:
    v10 = 0;
    v11 = 0;
    *v1 = 0;
    v1[1] = 0;
    v104 = v1[3];
    if (v104)
    {
      if (v101)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, v102, v101);
        v11 = *v1;
        v10 = v1[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
      v8 = &v226;
    }
    goto LABEL_154;
  }
  v14 = *v13;
  if (v14 >= 2)
  {
LABEL_154:
    *v1 = 0;
    v1[1] = 0;
    v105 = v1[3];
    if (v105 && v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, v11);
    goto LABEL_155;
  }
  if (!v14)
  {
    v176 = 0;
    v158 = 0;
    goto LABEL_11;
  }
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(v1, (uint64_t)&v226);
  if ((_BYTE)v227)
  {
    v176 = v226;
    *(_QWORD *)v322 = *(_QWORD *)((char *)&v226 + 1);
    *(_QWORD *)&v322[7] = *((_QWORD *)&v226 + 1);
    v158 = 1;
    goto LABEL_11;
  }
LABEL_155:
  v106 = *v1;
  v107 = v1[1];
  *v1 = 0;
  v1[1] = 0;
  v108 = v1[3];
  if (v108 && v107)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v108 + 16))(v108, v106);
  v176 = 0x100000000;
LABEL_11:
  IPC::Decoder::decode<std::optional<WTF::UUID>>(v1, (uint64_t)&v319);
  v15 = v1[1];
  v16 = *v1;
  v17 = v1[2] - *v1;
  if (v15 <= v17)
  {
    v109 = 0;
    v110 = 0;
    *v1 = 0;
    v1[1] = 0;
    v111 = v1[3];
    if (v111)
    {
      if (v15)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v111 + 16))(v111);
        v8 = &v226;
        v110 = *v1;
        v109 = v1[1];
      }
      else
      {
        v109 = 0;
        v110 = 0;
        v8 = &v226;
      }
    }
    goto LABEL_160;
  }
  v18 = (unsigned __int8 *)(v16 + v17);
  v1[2] = (uint64_t)(v18 + 1);
  if (!v16)
  {
    v109 = v15;
    v110 = 0;
LABEL_160:
    *v1 = 0;
    v1[1] = 0;
    v112 = v1[3];
    if (v112)
    {
      if (v109)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v112 + 16))(v112, v110, v109);
        v8 = &v226;
        v19 = 0;
        v16 = *v1;
        v15 = v1[1];
      }
      else
      {
        v15 = 0;
        v16 = 0;
        v19 = 0;
        v8 = &v226;
      }
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v19 = 0;
    }
    goto LABEL_162;
  }
  v19 = *v18;
  if (v19 < 2)
  {
    v175 = 0;
    v20 = 1;
    goto LABEL_15;
  }
LABEL_162:
  *v1 = 0;
  v1[1] = 0;
  v113 = v1[3];
  if (!v113)
  {
LABEL_163:
    v20 = 0;
    v175 = 1;
    goto LABEL_15;
  }
  if (v15)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v113 + 16))(v113, v16);
    v8 = &v226;
    goto LABEL_163;
  }
  v20 = 0;
  v175 = 1;
  v8 = &v226;
LABEL_15:
  if (v19)
    v21 = v20;
  else
    v21 = 0;
  v174 = IPC::Decoder::decode<WebCore::ShouldOpenExternalURLsPolicy>(v1);
  IPC::Decoder::decode<WTF::String>(v1, &v224);
  v171 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)v1);
  v172 = v22;
  if (!v22)
  {
    v114 = *v1;
    v115 = v1[1];
    *v1 = 0;
    v1[1] = 0;
    v116 = v1[3];
    if (v116)
    {
      if (v115)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v116 + 16))(v116, v114);
    }
  }
  IPC::Decoder::decode<WebCore::ResourceResponse>(v1, &v202);
  v23 = v1[1];
  v24 = *v1;
  v25 = v1[2] - *v1;
  v173 = v21;
  v161 = v3;
  if (v23 <= v25)
  {
    v117 = 0;
    v118 = 0;
    *v1 = 0;
    v1[1] = 0;
    v119 = v1[3];
    if (v119)
    {
      if (v23)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 16))(v119);
        v118 = *v1;
        v117 = v1[1];
      }
      else
      {
        v117 = 0;
        v118 = 0;
      }
      v8 = &v226;
    }
    goto LABEL_168;
  }
  v26 = (unsigned __int8 *)(v24 + v25);
  v27 = v24 + v25 + 1;
  v1[2] = v27;
  if (!v24)
  {
    v117 = v23;
    v118 = 0;
LABEL_168:
    *v1 = 0;
    v1[1] = 0;
    v120 = v1[3];
    if (v120)
    {
      if (v117)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v120 + 16))(v120, v118, v117);
        v28 = 0;
        v24 = *v1;
        v23 = v1[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v28 = 0;
      }
      v8 = &v226;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v28 = 0;
    }
    goto LABEL_170;
  }
  v28 = *v26;
  if (v28 < 2)
  {
    v170 = 0;
    v29 = 1;
    goto LABEL_23;
  }
LABEL_170:
  *v1 = 0;
  v1[1] = 0;
  v121 = v1[3];
  if (!v121)
  {
    v122 = 0;
    v24 = 0;
    v169 = 0;
    v170 = 1;
    goto LABEL_172;
  }
  if (!v23)
  {
    v122 = 0;
    v24 = 0;
    v169 = 0;
    v170 = 1;
LABEL_288:
    v8 = &v226;
    goto LABEL_172;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v121 + 16))(v121, v24);
  v29 = 0;
  v24 = *v1;
  v23 = v1[1];
  v170 = 1;
  v27 = v1[2];
  v8 = &v226;
LABEL_23:
  if (!v28)
    v29 = 0;
  v169 = v29;
  v30 = v27 - v24;
  if (v23 <= v30)
  {
    v122 = 0;
    v157 = v1[3];
    *v1 = 0;
    v1[1] = 0;
    if (v157 && v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v157 + 16))(v157);
      v24 = *v1;
      v122 = v1[1];
    }
    else
    {
      v24 = 0;
    }
    goto LABEL_288;
  }
  v31 = (unsigned __int8 *)(v24 + v30);
  v32 = v24 + v30 + 1;
  v1[2] = v32;
  if (!v24)
  {
    v122 = v23;
LABEL_172:
    *v1 = 0;
    v1[1] = 0;
    v123 = v1[3];
    if (v123)
    {
      if (v122)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v123 + 16))(v123, v24, v122);
        v33 = 0;
        v24 = *v1;
        v23 = v1[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v33 = 0;
      }
      v8 = &v226;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v33 = 0;
    }
    goto LABEL_174;
  }
  v33 = *v31;
  if (v33 < 2)
  {
    v168 = 0;
    v34 = 1;
    goto LABEL_29;
  }
LABEL_174:
  *v1 = 0;
  v1[1] = 0;
  v124 = v1[3];
  if (!v124)
  {
    v125 = 0;
    v24 = 0;
    v167 = 0;
    v168 = 1;
    goto LABEL_176;
  }
  if (!v23)
  {
    v125 = 0;
    v24 = 0;
    v167 = 0;
    v168 = 1;
LABEL_284:
    v8 = &v226;
    goto LABEL_176;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v124 + 16))(v124, v24);
  v34 = 0;
  v24 = *v1;
  v23 = v1[1];
  v168 = 1;
  v32 = v1[2];
  v8 = &v226;
LABEL_29:
  if (!v33)
    v34 = 0;
  v167 = v34;
  v35 = v32 - v24;
  if (v23 <= v35)
  {
    v125 = 0;
    v156 = v1[3];
    *v1 = 0;
    v1[1] = 0;
    if (v156 && v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v156 + 16))(v156);
      v24 = *v1;
      v125 = v1[1];
    }
    else
    {
      v24 = 0;
    }
    goto LABEL_284;
  }
  v36 = (unsigned __int8 *)(v24 + v35);
  v37 = v24 + v35 + 1;
  v1[2] = v37;
  if (!v24)
  {
    v125 = v23;
LABEL_176:
    *v1 = 0;
    v1[1] = 0;
    v126 = v1[3];
    if (v126)
    {
      if (v125)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v126 + 16))(v126, v24, v125);
        v38 = 0;
        v24 = *v1;
        v23 = v1[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v38 = 0;
      }
      v8 = &v226;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v38 = 0;
    }
    goto LABEL_178;
  }
  v38 = *v36;
  if (v38 < 2)
  {
    v166 = 0;
    v39 = 1;
    goto LABEL_35;
  }
LABEL_178:
  *v1 = 0;
  v1[1] = 0;
  v127 = v1[3];
  if (!v127)
  {
    v128 = 0;
    v24 = 0;
    v165 = 0;
    v166 = 1;
    goto LABEL_180;
  }
  if (!v23)
  {
    v128 = 0;
    v24 = 0;
    v165 = 0;
    v166 = 1;
LABEL_280:
    v8 = &v226;
    goto LABEL_180;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v127 + 16))(v127, v24);
  v39 = 0;
  v24 = *v1;
  v23 = v1[1];
  v166 = 1;
  v37 = v1[2];
  v8 = &v226;
LABEL_35:
  if (!v38)
    v39 = 0;
  v165 = v39;
  v40 = v37 - v24;
  if (v23 <= v40)
  {
    v128 = 0;
    v155 = v1[3];
    *v1 = 0;
    v1[1] = 0;
    if (v155 && v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v155 + 16))(v155);
      v24 = *v1;
      v128 = v1[1];
    }
    else
    {
      v24 = 0;
    }
    goto LABEL_280;
  }
  v41 = (unsigned __int8 *)(v24 + v40);
  v42 = v24 + v40 + 1;
  v1[2] = v42;
  if (!v24)
  {
    v128 = v23;
LABEL_180:
    *v1 = 0;
    v1[1] = 0;
    v129 = v1[3];
    if (v129)
    {
      if (v128)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v129 + 16))(v129, v24, v128);
        v43 = 0;
        v24 = *v1;
        v23 = v1[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v43 = 0;
      }
      v8 = &v226;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v43 = 0;
    }
    goto LABEL_182;
  }
  v43 = *v41;
  if (v43 < 2)
  {
    v164 = 0;
    v44 = 1;
    goto LABEL_41;
  }
LABEL_182:
  *v1 = 0;
  v1[1] = 0;
  v130 = v1[3];
  if (!v130)
  {
    v131 = 0;
    v24 = 0;
    v163 = 0;
    v164 = 1;
    goto LABEL_184;
  }
  if (!v23)
  {
    v131 = 0;
    v24 = 0;
    v163 = 0;
    v164 = 1;
LABEL_276:
    v8 = &v226;
    goto LABEL_184;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v130 + 16))(v130, v24);
  v44 = 0;
  v24 = *v1;
  v23 = v1[1];
  v164 = 1;
  v42 = v1[2];
  v8 = &v226;
LABEL_41:
  if (!v43)
    v44 = 0;
  v163 = v44;
  v45 = v42 - v24;
  if (v23 <= v45)
  {
    v131 = 0;
    v154 = v1[3];
    *v1 = 0;
    v1[1] = 0;
    if (v154 && v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v154 + 16))(v154);
      v24 = *v1;
      v131 = v1[1];
    }
    else
    {
      v24 = 0;
    }
    goto LABEL_276;
  }
  v46 = (unsigned __int8 *)(v24 + v45);
  v1[2] = (uint64_t)(v46 + 1);
  if (!v24)
  {
    v131 = v23;
LABEL_184:
    *v1 = 0;
    v1[1] = 0;
    v132 = v1[3];
    if (v132)
    {
      if (v131)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132 + 16))(v132, v24, v131);
        v47 = 0;
        v24 = *v1;
        v23 = v1[1];
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v47 = 0;
      }
      v8 = &v226;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v47 = 0;
    }
    goto LABEL_186;
  }
  v47 = *v46;
  if (v47 < 2)
  {
    v48 = (__int16 *)v322;
    v162 = 0;
    v49 = 1;
    goto LABEL_47;
  }
LABEL_186:
  *v1 = 0;
  v1[1] = 0;
  v133 = v1[3];
  if (v133)
  {
    v48 = (__int16 *)v322;
    if (v23)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, v24);
    v49 = 0;
    v162 = 1;
    v8 = &v226;
  }
  else
  {
    v48 = (__int16 *)v322;
    v49 = 0;
    v162 = 1;
  }
LABEL_47:
  if (v47)
    LOBYTE(v50) = v49;
  else
    LOBYTE(v50) = 0;
  IPC::Decoder::decode<WebCore::SecurityOriginData>(v1, v316);
  IPC::Decoder::decode<WebCore::SecurityOriginData>(v1, v313);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v1, (uint64_t)&v199);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v1, (uint64_t)&v196);
  v51 = IPC::Decoder::decode<WebCore::LockHistory>(v1);
  LOWORD(v52) = IPC::Decoder::decode<WebCore::ShouldRelaxThirdPartyCookieBlocking>(v1);
  IPC::Decoder::decode<WTF::String>(v1, &v194);
  v53 = IPC::Decoder::decode<unsigned int>(v1);
  IPC::Decoder::decode<std::optional<WebCore::OwnerPermissionsPolicyData>>(v311, v1);
  v54 = v1[1];
  v55 = *v1;
  v56 = v1[2] - *v1;
  if (v54 <= v56)
  {
    v134 = 0;
    v135 = 0;
    *v1 = 0;
    v1[1] = 0;
    v136 = v1[3];
    if (v136)
    {
      if (v54)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v136 + 16))(v136);
        v8 = &v226;
        v135 = *v1;
        v134 = v1[1];
      }
      else
      {
        v134 = 0;
        v135 = 0;
        v8 = &v226;
      }
    }
    goto LABEL_189;
  }
  v57 = (unsigned __int8 *)(v55 + v56);
  v1[2] = (uint64_t)(v57 + 1);
  if (!v55)
  {
    v134 = v54;
    v135 = 0;
LABEL_189:
    v54 = 0;
    v55 = 0;
    *v1 = 0;
    v1[1] = 0;
    v137 = v1[3];
    if (v137)
    {
      if (v134)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v137 + 16))(v137, v135, v134);
        v8 = &v226;
        v55 = *v1;
        v54 = v1[1];
      }
      else
      {
        v54 = 0;
        v55 = 0;
        v8 = &v226;
      }
    }
    goto LABEL_190;
  }
  v58 = *v57;
  if (v58 >= 2)
  {
LABEL_190:
    *v1 = 0;
    v1[1] = 0;
    v138 = v1[3];
    if (v138 && v54)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v138 + 16))(v138, v55);
    goto LABEL_191;
  }
  if (v58)
    goto LABEL_144;
  LOBYTE(v226) = 0;
  v253[8] = 0;
  std::__optional_move_base<WebCore::PrivateClickMeasurement,false>::__optional_move_base[abi:sn180100]((uint64_t)v191, (uint64_t)&v226);
LABEL_55:
  v193 = 1;
  if (v253[8])
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&v226, v59);
  while (1)
  {
    if (!v193)
    {
      v139 = *v1;
      v140 = v1[1];
      *v1 = 0;
      v1[1] = 0;
      v141 = v1[3];
      if (v141)
      {
        if (v140)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v141 + 16))(v141, v139);
      }
    }
    v60 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(v1);
    v61 = IPC::Decoder::decode<std::optional<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>>(v1);
    v62 = v1[1];
    v63 = *v1;
    v64 = v1[2] - *v1;
    if (v62 <= v64)
    {
      v142 = 0;
      v143 = 0;
      *v1 = 0;
      v1[1] = 0;
      v144 = v1[3];
      if (v144)
      {
        if (v62)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v144 + 16))(v144);
          v8 = &v226;
          v143 = *v1;
          v142 = v1[1];
        }
        else
        {
          v142 = 0;
          v143 = 0;
          v8 = &v226;
        }
      }
LABEL_196:
      v62 = 0;
      v63 = 0;
      *v1 = 0;
      v1[1] = 0;
      v145 = v1[3];
      if (v145)
      {
        if (v142)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145 + 16))(v145, v143, v142);
          v8 = &v226;
          v63 = *v1;
          v62 = v1[1];
        }
        else
        {
          v62 = 0;
          v63 = 0;
          v8 = &v226;
        }
      }
LABEL_197:
      *v1 = 0;
      v1[1] = 0;
      v146 = v1[3];
      if (v146 && v62)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v146 + 16))(v146, v63);
LABEL_198:
      v308[0] = 0;
      v310 = 0;
      goto LABEL_65;
    }
    v65 = (unsigned __int8 *)(v63 + v64);
    v1[2] = (uint64_t)(v65 + 1);
    if (!v63)
    {
      v142 = v62;
      v143 = 0;
      goto LABEL_196;
    }
    v66 = *v65;
    if (v66 >= 2)
      goto LABEL_197;
    if (v66)
    {
      IPC::Decoder::decode<WebKit::WebHitTestResultData>(v1, &v226);
      if (!v272)
        goto LABEL_198;
      WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)v308, (uint64_t *)&v226);
      v309 = 1;
    }
    else
    {
      LOBYTE(v226) = 0;
      v272 = 0;
      std::__optional_move_base<WebKit::WebHitTestResultData,false>::__optional_move_base[abi:sn180100](v308, (uint64_t)&v226);
    }
    v310 = 1;
    if (v272)
      WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)&v226);
LABEL_65:
    if (!v310)
    {
      v147 = *v1;
      v148 = v1[1];
      *v1 = 0;
      v1[1] = 0;
      v149 = v1[3];
      if (v149)
      {
        if (v148)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v149 + 16))(v149, v147);
      }
    }
    IPC::Decoder::decode<WebKit::FrameInfoData>(v1, (uint64_t)&v300);
    IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v1, &v188);
    IPC::Decoder::decode<WebKit::FrameInfoData>(v1, (uint64_t)&v292);
    v67 = *v1;
    v68 = v1[1];
    v69 = ((v1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v1;
    if (v68 < v69 || v68 - v69 <= 7)
    {
      v150 = 0;
      v151 = 0;
      *v1 = 0;
      v1[1] = 0;
      v152 = v1[3];
      if (v152)
      {
        if (v68)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v152 + 16))(v152);
          v151 = *v1;
          v150 = v1[1];
        }
        else
        {
          v150 = 0;
          v151 = 0;
        }
        v8 = &v226;
      }
    }
    else
    {
      v70 = (uint64_t *)(v67 + v69);
      v1[2] = (uint64_t)(v70 + 1);
      if (v67)
      {
        v160 = 0;
        v159 = *v70;
        goto LABEL_70;
      }
      v150 = v68;
      v151 = 0;
    }
    *v1 = 0;
    v1[1] = 0;
    v153 = v1[3];
    if (v153)
    {
      if (v150)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v153 + 16))(v153, v151);
      v159 = 0;
      v160 = 1;
      v8 = &v226;
    }
    else
    {
      v159 = 0;
      v160 = 1;
    }
LABEL_70:
    IPC::Decoder::decode<WebCore::ResourceRequest>(v1, (uint64_t)v185);
    IPC::Decoder::decode<WebCore::ResourceRequest>(v1, (uint64_t)v182);
    if (v184)
    {
      IPC::Decoder::decode<IPC::FormDataReference>(v1, &v226);
      if (BYTE8(v226))
      {
        if (!v184)
          goto LABEL_143;
        v71 = (WTF::RefCountedBase *)v226;
        *(_QWORD *)&v226 = 0;
        v181 = v71;
        WebCore::ResourceRequestBase::setHTTPBody();
        if (v181)
          WTF::RefCounted<WebCore::FormData>::deref(v181);
        if (BYTE8(v226))
        {
          v72 = (WTF::RefCountedBase *)v226;
          *(_QWORD *)&v226 = 0;
          if (v72)
            WTF::RefCounted<WebCore::FormData>::deref(v72);
        }
      }
    }
    if (!*v1)
      break;
    if (!(_DWORD)v180)
    {
      LOBYTE(v226) = (_BYTE)v179;
      if ((unsigned __int16)v9 > 0xFFu)
      {
        BYTE1(v226) = (_BYTE)v9;
        LOWORD(v9) = v178;
        if (v178 > 0xFFu)
        {
          BYTE2(v226) = v178;
          LOWORD(v9) = ShouldOpenExternalURLs;
          if (ShouldOpenExternalURLs > 0xFFu)
          {
            BYTE3(v226) = ShouldOpenExternalURLs;
            if (!HIDWORD(v176))
            {
              BYTE8(v226) = v176;
              *(_QWORD *)((char *)v8 + 9) = *(_QWORD *)v322;
              v227 = *(_QWORD *)((char *)v48 + 7);
              v228 = v158;
              v1 = (uint64_t *)&v300;
              if (v321)
              {
                v229 = v319;
                v230 = v320;
                if (!v175)
                {
                  v231 = v173;
                  if (v174 > 0xFFu)
                  {
                    v232 = v174;
                    if (v225)
                    {
                      v73 = v224;
                      v224 = 0;
                      v233 = v73;
                      if (v172)
                      {
                        v234 = v171;
                        if (v223)
                        {
                          v8 = &v196;
                          v236 = v203;
                          v237 = v204;
                          v74 = v207;
                          v207 = 0u;
                          v75 = v208;
                          v208 = 0u;
                          v76 = v205;
                          v235 = v202;
                          v202 = 0;
                          LODWORD(v203) = v203 & 0xFFFFFFFE;
                          v205 = 0;
                          v238 = v76;
                          v239 = v206;
                          v240 = v74;
                          v241 = v75;
                          *(_QWORD *)&v74 = v209;
                          v209 = 0;
                          v242 = v74;
                          v77 = v210;
                          v210 = 0;
                          v243 = v77;
                          *(_QWORD *)&v74 = v211;
                          v211 = 0;
                          v244 = v74;
                          v78 = v212;
                          v212 = 0;
                          v245 = v78;
                          LOBYTE(v246) = 0;
                          v247 = 0;
                          if (v214)
                          {
                            v79 = v213;
                            v213 = 0;
                            v246 = v79;
                            v247 = 1;
                          }
                          *(_DWORD *)&v253[15] = *(_DWORD *)&v220[15];
                          v252 = v219;
                          *(_OWORD *)v253 = *(_OWORD *)v220;
                          v248 = v215;
                          v249 = v216;
                          v251 = v218;
                          v250 = v217;
                          v80 = v221;
                          v221 = 0;
                          v254 = v80;
                          v255 = v222;
                          if (!v170)
                          {
                            v256 = v169;
                            if (!v168)
                            {
                              v257 = v167;
                              if (!v166)
                              {
                                v258 = v165;
                                if (!v164)
                                {
                                  v259 = v163;
                                  if (!v162)
                                  {
                                    v260 = (char)v50;
                                    if (v318)
                                    {
                                      v50 = (__int16 *)v261;
                                      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v261, (uint64_t)v316);
                                      if (v315)
                                      {
                                        v48 = (__int16 *)v262;
                                        v180 = v261;
                                        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v262, (uint64_t)v313);
                                        if (v201)
                                        {
                                          v262[2] = v199;
                                          v263 = v200;
                                          if (v198)
                                          {
                                            v264 = v196;
                                            v265 = v197;
                                            if (v51 > 0xFFu)
                                            {
                                              v266 = v51;
                                              if ((unsigned __int16)v52 > 0xFFu)
                                              {
                                                v267 = (char)v52;
                                                if (v195)
                                                {
                                                  v81 = v194;
                                                  v194 = 0;
                                                  v268 = v81;
                                                  if ((v53 & 0xFF00000000) != 0)
                                                  {
                                                    v269 = v53;
                                                    if (v312)
                                                    {
                                                      v8 = (__int128 *)v270;
                                                      v179 = v262;
                                                      std::__optional_move_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_move_base[abi:sn180100]((uint64_t)v270, (uint64_t)v311);
                                                      if (v193)
                                                      {
                                                        v52 = v271;
                                                        std::__optional_move_base<WebCore::PrivateClickMeasurement,false>::__optional_move_base[abi:sn180100]((uint64_t)v271, (uint64_t)v191);
                                                        if ((v60 & 0xFF0000) != 0)
                                                        {
                                                          v273 = v60;
                                                          if (WORD2(v61))
                                                          {
                                                            v274 = v61;
                                                            v275 = BYTE2(v61);
                                                            if (v310)
                                                            {
                                                              v53 = (uint64_t)v276;
                                                              std::__optional_move_base<WebKit::WebHitTestResultData,false>::__optional_move_base[abi:sn180100](v276, (uint64_t)v308);
                                                              v48 = &v292;
                                                              if (v307)
                                                              {
                                                                v1 = (uint64_t *)&v226;
                                                                v51 = (unsigned __int16)v161;
                                                                v277 = v300;
                                                                v50 = &v300;
                                                                WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v278, (uint64_t)&v301);
                                                                v82 = v302;
                                                                v302 = 0;
                                                                v278[24] = v82;
                                                                v9 = (__int16 *)&v226;
                                                                std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v279, (uint64_t)&v303);
                                                                v83 = v304;
                                                                v304 = 0;
                                                                v279[4] = v83;
                                                                *(_OWORD *)((char *)v281 + 14) = *(_OWORD *)((char *)v306 + 14);
                                                                v280 = v305;
                                                                v281[0] = v306[0];
                                                                if (v190)
                                                                {
                                                                  v282 = v188;
                                                                  v283 = v189;
                                                                  if (v299)
                                                                  {
                                                                    v50 = (__int16 *)&v226;
                                                                    v284 = v292;
                                                                    v9 = &v292;
                                                                    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v285, (uint64_t)&v293);
                                                                    v84 = v294;
                                                                    v294 = 0;
                                                                    v285[24] = v84;
                                                                    v1 = (uint64_t *)&v226;
                                                                    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v286, (uint64_t)&v295);
                                                                    v85 = v296;
                                                                    v296 = 0;
                                                                    v286[4] = v85;
                                                                    v287 = v297;
                                                                    v288[0] = v298[0];
                                                                    *(_OWORD *)((char *)v288 + 14) = *(_OWORD *)((char *)v298 + 14);
                                                                    if (!v160)
                                                                    {
                                                                      v289 = v159;
                                                                      if (v187)
                                                                      {
                                                                        WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v290, (uint64_t)v185);
                                                                        v86 = v186;
                                                                        v186 = 0;
                                                                        v290[24] = v86;
                                                                        v1 = (uint64_t *)&v300;
                                                                        if (v184)
                                                                        {
                                                                          WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v291, (uint64_t)v182);
                                                                          v87 = v183;
                                                                          v183 = 0;
                                                                          v291[24] = v87;
                                                                          WebKit::NavigationActionData::NavigationActionData((uint64_t)v161, (uint64_t)&v226);
                                                                          v161[2560] = 1;
                                                                          WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v226);
                                                                          goto LABEL_117;
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_143:
    __break(1u);
LABEL_144:
    IPC::Decoder::decode<WebCore::PrivateClickMeasurement>(v1, (uint64_t)&v226);
    if (v253[8])
    {
      WebCore::PrivateClickMeasurement::PrivateClickMeasurement((uint64_t)v191, (uint64_t)&v226);
      v192 = 1;
      goto LABEL_55;
    }
LABEL_191:
    v191[0] = 0;
    v193 = 0;
  }
  *v161 = 0;
  v161[2560] = 0;
LABEL_117:
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v182);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v185);
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v292, v88);
  std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v300, v89);
  if (v310 && v309)
    WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v308);
  if (v193 && v192)
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v191, v90);
  if (v312)
    std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v311, v90);
  if (v195)
  {
    v91 = v194;
    v194 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2)
        WTF::StringImpl::destroy(v91, v90);
      else
        *(_DWORD *)v91 -= 2;
    }
  }
  if (v315 && v314 != -1)
    ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v314])(&v226, v313);
  if (v318 && v317 != -1)
    ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v317])(&v226, v316);
  result = std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v202, v90);
  if (v225)
  {
    result = v224;
    v224 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v93);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196D3C340(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  if (LOBYTE(STACK[0x1408]) && LOBYTE(STACK[0x1400]))
    WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)&STACK[0x1168]);
  if (LOBYTE(STACK[0x390]) && LOBYTE(STACK[0x388]))
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)&STACK[0x250], a2);
  if (LOBYTE(STACK[0x1448]))
    std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x1410], a2);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x398], a2);
  if (LOBYTE(STACK[0x1470]))
  {
    v4 = *(unsigned int *)(v2 - 232);
    if ((_DWORD)v4 != -1)
      ((void (*)(unint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&STACK[0x1168], v2 - 256);
  }
  if (LOBYTE(STACK[0x1498]))
  {
    v5 = *(unsigned int *)(v2 - 192);
    if ((_DWORD)v5 != -1)
      ((void (*)(unint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&STACK[0x1168], v2 - 216);
  }
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&STACK[0x3E8], v3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x4F0], v6);
  _Unwind_Resume(a1);
}

void sub_196D3C674()
{
  JUMPOUT(0x196D3C4B8);
}

void sub_196D3C680()
{
  JUMPOUT(0x196D3C4ECLL);
}

void sub_196D3C68C()
{
  JUMPOUT(0x196D3C4F4);
}

void sub_196D3C6A4()
{
  JUMPOUT(0x196D3C52CLL);
}

void sub_196D3C6B4()
{
  JUMPOUT(0x196D3C56CLL);
}

void sub_196D3C6C0()
{
  JUMPOUT(0x196D3C574);
}

uint64_t WebKit::NavigationActionData::NavigationActionData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  WTF::URL::URL(a1 + 88, (uint64_t *)(a2 + 88));
  v8 = *(_QWORD *)(a2 + 128);
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = v9;
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 144) = v10;
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 152) = v11;
  v12 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = v12;
  v13 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 168) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = 0;
  *(_DWORD *)(a1 + 176) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a2 + 180) = 0;
  *(_DWORD *)(a1 + 180) = v13;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v14 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a1 + 184) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a2 + 192) = 0;
  *(_DWORD *)(a1 + 192) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a2 + 196) = 0;
  *(_DWORD *)(a1 + 196) = v14;
  v15 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a1 + 200) = v15;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    v16 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a1 + 208) = v16;
    *(_BYTE *)(a1 + 216) = 1;
  }
  v17 = *(_OWORD *)(a2 + 224);
  v18 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 224) = v17;
  v19 = *(_OWORD *)(a2 + 272);
  v20 = *(_OWORD *)(a2 + 288);
  v21 = *(_OWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 319) = *(_DWORD *)(a2 + 319);
  *(_OWORD *)(a1 + 288) = v20;
  *(_OWORD *)(a1 + 304) = v21;
  *(_OWORD *)(a1 + 272) = v19;
  v22 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a1 + 328) = v22;
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  LODWORD(v22) = *(_DWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 348) = *(_BYTE *)(a2 + 348);
  *(_DWORD *)(a1 + 344) = v22;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 352, a2 + 352);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 384, a2 + 384);
  v23 = *(_OWORD *)(a2 + 416);
  v24 = *(_OWORD *)(a2 + 432);
  v25 = *(_OWORD *)(a2 + 448);
  *(_WORD *)(a1 + 464) = *(_WORD *)(a2 + 464);
  *(_OWORD *)(a1 + 432) = v24;
  *(_OWORD *)(a1 + 448) = v25;
  *(_OWORD *)(a1 + 416) = v23;
  v26 = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a2 + 472) = 0;
  *(_QWORD *)(a1 + 472) = v26;
  *(_DWORD *)(a1 + 480) = *(_DWORD *)(a2 + 480);
  std::__optional_move_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_move_base[abi:sn180100](a1 + 488, a2 + 488);
  std::__optional_move_base<WebCore::PrivateClickMeasurement,false>::__optional_move_base[abi:sn180100](a1 + 544, a2 + 544);
  v27 = *(_DWORD *)(a2 + 864);
  *(_BYTE *)(a1 + 868) = *(_BYTE *)(a2 + 868);
  *(_DWORD *)(a1 + 864) = v27;
  std::__optional_move_base<WebKit::WebHitTestResultData,false>::__optional_move_base[abi:sn180100]((_BYTE *)(a1 + 872), a2 + 872);
  *(_WORD *)(a1 + 1544) = *(_WORD *)(a2 + 1544);
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 1552, a2 + 1552);
  v28 = *(_QWORD *)(a2 + 1744);
  *(_QWORD *)(a2 + 1744) = 0;
  *(_QWORD *)(a1 + 1744) = v28;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 1752, a2 + 1752);
  v29 = *(_QWORD *)(a2 + 1784);
  *(_QWORD *)(a2 + 1784) = 0;
  *(_QWORD *)(a1 + 1784) = v29;
  v30 = *(_OWORD *)(a2 + 1792);
  v31 = *(_OWORD *)(a2 + 1808);
  *(_OWORD *)(a1 + 1822) = *(_OWORD *)(a2 + 1822);
  *(_OWORD *)(a1 + 1808) = v31;
  *(_OWORD *)(a1 + 1792) = v30;
  *(_OWORD *)(a1 + 1840) = *(_OWORD *)(a2 + 1840);
  *(_WORD *)(a1 + 1856) = *(_WORD *)(a2 + 1856);
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 1864, a2 + 1864);
  v32 = *(_QWORD *)(a2 + 2056);
  *(_QWORD *)(a2 + 2056) = 0;
  *(_QWORD *)(a1 + 2056) = v32;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 2064, a2 + 2064);
  v33 = *(_QWORD *)(a2 + 2096);
  *(_QWORD *)(a2 + 2096) = 0;
  *(_QWORD *)(a1 + 2096) = v33;
  v34 = *(_OWORD *)(a2 + 2104);
  v35 = *(_OWORD *)(a2 + 2120);
  *(_OWORD *)(a1 + 2134) = *(_OWORD *)(a2 + 2134);
  *(_OWORD *)(a1 + 2104) = v34;
  *(_OWORD *)(a1 + 2120) = v35;
  *(_QWORD *)(a1 + 2152) = *(_QWORD *)(a2 + 2152);
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 2160, a2 + 2160);
  v36 = *(_QWORD *)(a2 + 2352);
  *(_QWORD *)(a2 + 2352) = 0;
  *(_QWORD *)(a1 + 2352) = v36;
  WebCore::ResourceRequestBase::ResourceRequestBase(a1 + 2360, a2 + 2360);
  v37 = *(_QWORD *)(a2 + 2552);
  *(_QWORD *)(a2 + 2552) = 0;
  *(_QWORD *)(a1 + 2552) = v37;
  return a1;
}

void sub_196D3C9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebCore::ResourceResponseBase *a11, int a12, char a13, char a14, char a15, char a16)
{
  uint64_t v16;
  WebCore::ResourceRequestBase *v17;
  uint64_t v18;
  WebCore::ResourceRequestBase *v19;
  uint64_t v20;
  WebCore::PrivateClickMeasurement *v21;
  WebKit::WebHitTestResultData *v22;
  WebCore::ResourceRequestBase *v23;
  uint64_t v24;
  const void *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  const void *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  const void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;

  v26 = *(const void **)(v16 + 2352);
  *(_QWORD *)(v16 + 2352) = 0;
  if (v26)
    CFRelease(v26);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v19);
  v28 = *(WTF::StringImpl **)(v16 + 2096);
  *(_QWORD *)(v16 + 2096) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = *(unsigned int *)(v16 + 2088);
  if ((_DWORD)v29 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v29])(&a13, v18);
  *(_DWORD *)(v16 + 2088) = -1;
  v30 = *(const void **)(v16 + 2056);
  *(_QWORD *)(v16 + 2056) = 0;
  if (v30)
    CFRelease(v30);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v17);
  v32 = *(WTF::StringImpl **)(v16 + 1784);
  *(_QWORD *)(v16 + 1784) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = *(unsigned int *)(v16 + 1776);
  if ((_DWORD)v33 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v33])(&a14, v24);
  *(_DWORD *)(v16 + 1776) = -1;
  v34 = *(const void **)(v16 + 1744);
  *(_QWORD *)(v16 + 1744) = 0;
  if (v34)
    CFRelease(v34);
  WebCore::ResourceRequestBase::~ResourceRequestBase(v23);
  if (*(_BYTE *)(v16 + 1536))
    WebKit::WebHitTestResultData::~WebHitTestResultData(v22);
  if (*(_BYTE *)(v16 + 856))
    WebCore::PrivateClickMeasurement::~PrivateClickMeasurement(v21, v35);
  std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100](v20, v35);
  v37 = *(WTF::StringImpl **)(v16 + 472);
  *(_QWORD *)(v16 + 472) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v36);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = *(unsigned int *)(v16 + 408);
  if ((_DWORD)v38 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v38])(&a15, a9);
  *(_DWORD *)(v16 + 408) = -1;
  v39 = *(unsigned int *)(v16 + 376);
  if ((_DWORD)v39 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v39])(&a16, a10);
  *(_DWORD *)(v16 + 376) = -1;
  v40 = *(const void **)(v16 + 328);
  *(_QWORD *)(v16 + 328) = 0;
  if (v40)
    CFRelease(v40);
  WebCore::ResourceResponseBase::~ResourceResponseBase(a11, v36);
  v42 = *(WTF::StringImpl **)(v16 + 72);
  *(_QWORD *)(v16 + 72) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v41);
    else
      *(_DWORD *)v42 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_196D3CC04()
{
  JUMPOUT(0x196D3CB40);
}

void sub_196D3CC0C()
{
  JUMPOUT(0x196D3CB90);
}

void sub_196D3CC14()
{
  JUMPOUT(0x196D3CBBCLL);
}

void sub_196D3CC1C()
{
  JUMPOUT(0x196D3CBD0);
}

uint64_t IPC::Decoder::decode<WebKit::WebMouseEventButton>(uint64_t *a1)
{
  unsigned __int16 v2;
  char v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v2 = IPC::Decoder::decode<signed char>(a1);
  v3 = v2 + 2;
  v4 = v2 < 0x100u || (v2 + 2) >= 5u;
  if (!v4 && ((0x1Du >> v3) & 1) != 0)
  {
    v8 = 0x2010000FEuLL >> (8 * v3);
    v9 = 256;
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
    LOBYTE(v8) = 0;
    v9 = 0;
  }
  return v9 | v8;
}

uint64_t IPC::Decoder::decode<signed char>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 > v3)
  {
    v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      LODWORD(v4) = *v4;
      v5 = 1;
      goto LABEL_4;
    }
    LODWORD(v4) = 0;
LABEL_7:
    v5 = 0;
    goto LABEL_4;
  }
  *a1 = 0;
  a1[1] = 0;
  v4 = (unsigned __int8 *)a1[3];
  if (!v4)
    goto LABEL_7;
  v11 = a1;
  if (v1)
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v4 + 16))(v4);
  LODWORD(v4) = 0;
  v5 = 0;
  a1 = v11;
LABEL_4:
  v6 = v4 | (v5 << 8);
  if (v6 <= 0xFF)
  {
    v8 = *a1;
    v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      if (v9)
      {
        v12 = v6;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
        return v12;
      }
    }
  }
  return v6;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebKit::WebEventModifier>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::decode<IPC::Decoder>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  _BOOL4 v7;
  unsigned int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v2, v1);
        a1 = v14;
        v11 = *v14;
        v10 = v14[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  else
  {
    v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      v5 = *v4;
      v6 = 1;
      goto LABEL_4;
    }
    v10 = v1;
    v11 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13 && v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
  v5 = 0;
  v6 = 0;
LABEL_4:
  v7 = v5 < 0x20;
  v8 = v5 | 0x100;
  if ((v6 & v7) != 0)
    return v8;
  else
    return 0;
}

uint64_t WebKit::WebDeviceOrientationAndMotionAccessController::cachedDeviceOrientationPermission(WebKit::WebDeviceOrientationAndMotionAccessController *this, const WebCore::SecurityOriginData *a2)
{
  char v4;
  uint64_t v7;
  uint64_t v8;

  WebCore::SecurityOriginData::isHashTableDeletedValue(a2);
  if ((v4 & 1) != 0 || (WebCore::SecurityOriginData::isNull(a2) & 1) != 0)
  {
    return 1;
  }
  else
  {
    v7 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)this + 1, (uint64_t)a2);
    v8 = *((_QWORD *)this + 1);
    if (v8)
      v8 += 40 * *(unsigned int *)(v8 - 4);
    if (v8 == v7)
      return 2;
    else
      return (*(_BYTE *)(v7 + 32) ^ 1);
  }
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned int v5;
  WebCore::SecurityOriginData *v6;
  int v7;
  char v8;
  int v10;
  __int16 v11;
  char v12;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v10 = -1640531527;
  v11 = 0;
  v12 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(&v10, a2);
  v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v10) & v4;
  v6 = (WebCore::SecurityOriginData *)(v2 + 40 * v5);
  if ((WebCore::SecurityOriginData::isNull(v6) & 1) != 0)
  {
LABEL_7:
    if (*a1)
      return *a1 + 40 * *(unsigned int *)(*a1 - 4);
    else
      return 0;
  }
  else
  {
    v7 = 1;
    while (1)
    {
      WebCore::SecurityOriginData::isHashTableDeletedValue(v6);
      if ((v8 & 1) == 0 && (WebCore::operator==() & 1) != 0)
        break;
      v5 = (v5 + v7) & v4;
      v6 = (WebCore::SecurityOriginData *)(v2 + 40 * v5);
      ++v7;
      if (WebCore::SecurityOriginData::isNull(v6))
        goto LABEL_7;
    }
  }
  return (uint64_t)v6;
}

void WebKit::PageClientImpl::clearSafeBrowsingWarning(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "_clearSafeBrowsingWarning");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196D3D080(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::effectiveContentModeAfterAdjustingPolicies(WebKit::WebPageProxy *this, API::WebsitePolicies *a2, const WebCore::ResourceRequest *a3)
{
  uint64_t v6;
  WebCore::Quirks *v7;
  const WTF::URL *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v6 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key, a3))*((_BYTE *)a2 + 123) = 2;
  v7 = (WebCore::Quirks *)WebCore::ResourceRequestBase::url(a3);
  if (WebCore::Quirks::needsIPhoneUserAgent(v7, v8))
  {
    WebCore::standardUserAgentWithApplicationName();
    if (v24)
    {
      WTF::StringImpl::replace();
      v25 = v26;
    }
    else
    {
      v25 = 0;
    }
    WTF::String::operator=((WTF::StringImpl **)a2 + 8, (WTF::StringImpl *)&v25);
    v10 = v25;
    v25 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v9);
      else
        *(_DWORD *)v24 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::String::operator=((WTF::StringImpl **)a2 + 10, (WTF::StringImpl *)&v26);
    v19 = v26;
    v26 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    return 1;
  }
  v11 = WebKit::WebPageProxy::useDesktopClassBrowsing((uint64_t)this, (const WebCore::ResourceRequest *)*((unsigned __int8 *)a2 + 130), *((_BYTE *)a2 + 134), a3);
  *((_BYTE *)this + 1050) = 0;
  if ((v11 & 1) == 0)
  {
    result = 1;
    *((_BYTE *)a2 + 132) = 1;
    return result;
  }
  v12 = *((_QWORD *)a2 + 8);
  if (!v12 || !*(_DWORD *)(v12 + 4))
  {
    v13 = *((_QWORD *)this + 41);
    if (!v13 || !*(_DWORD *)(v13 + 4))
    {
      v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
      if (v14)
      {
        *(_DWORD *)v14 += 2;
        v26 = v14;
        if (*((_DWORD *)v14 + 1))
        {
LABEL_19:
          WebCore::standardUserAgentWithApplicationName();
          WTF::String::operator=((WTF::StringImpl **)a2 + 8, (WTF::StringImpl *)&v25);
          v16 = v25;
          v25 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v15);
            else
              *(_DWORD *)v16 -= 2;
          }
          v20 = v26;
          v26 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v15);
            else
              *(_DWORD *)v20 -= 2;
          }
          goto LABEL_38;
        }
      }
      else
      {
        v26 = 0;
      }
      WTF::String::operator=(&v26, (WebKit::WebPageProxy *)((char *)this + 320));
      goto LABEL_19;
    }
  }
LABEL_38:
  v21 = *((_QWORD *)a2 + 10);
  if (!v21 || !*(_DWORD *)(v21 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::String::operator=((WTF::StringImpl **)a2 + 10, (WTF::StringImpl *)&v26);
    v23 = v26;
    v26 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  if (qword_1EE341968 != -1)
    dispatch_once(&qword_1EE341968, &__block_literal_global_325);
  if (byte_1EE341943)
  {
    *(_DWORD *)((char *)a2 + 122) = 16843266;
    *((_BYTE *)this + 1050) = 1;
  }
  return 2;
}

void sub_196D3D3BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::useDesktopClassBrowsing(uint64_t a1, const WebCore::ResourceRequest *a2, char a3, WebKit *this)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD block[5];

  if (a2 == 2)
  {
    if (!a3)
      return 1;
    v8 = WebKit::desktopClassBrowsingRecommendedForRequest(this, a2) == 0;
    return !v8;
  }
  if ((_BYTE)a2)
    return 0;
  result = WebKit::desktopClassBrowsingRecommendedForRequest(this, a2);
  if (result < 2)
    return result;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1584))(v7);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1464))(v7) & 1) != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
    goto LABEL_18;
  }
  v9 = *(_QWORD *)(a1 + 40);
  v10 = v9 ? *(_QWORD *)(v9 + 8) : 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1584))(v10);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1592))(v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1592))(v7);
  if ((v11 - 1) <= 0x176 && v11 > 0)
    return 0;
LABEL_18:
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZNK6WebKit12WebPageProxy33isDesktopClassBrowsingRecommendedERKN7WebCore15ResourceRequestE_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  if (qword_1EE341950 != -1)
    dispatch_once(&qword_1EE341950, block);
  v8 = byte_1EE341941 == 0;
  return !v8;
}

void sub_196D3D5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::desktopClassBrowsingRecommendedForRequest(WebKit *this, const WebCore::ResourceRequest *a2)
{
  WebCore::Quirks *v3;
  const WTF::URL *v4;
  WebCore::Quirks *v5;
  const WTF::URL *v6;
  WebCore::Quirks *v8;
  const WTF::URL *v9;

  v3 = (WebCore::Quirks *)WebCore::ResourceRequestBase::url(this);
  if ((WebCore::Quirks::needsIPadMiniUserAgent(v3, v4) & 1) != 0)
    return 0;
  v5 = (WebCore::Quirks *)WebCore::ResourceRequestBase::url(this);
  if ((WebCore::Quirks::needsIPhoneUserAgent(v5, v6) & 1) != 0)
    return 0;
  v8 = (WebCore::Quirks *)WebCore::ResourceRequestBase::url(this);
  if (WebCore::Quirks::needsDesktopUserAgent(v8, v9))
    return 1;
  else
    return 2;
}

double WebKit::WebPageProxy::sendCachedLinkDecorationFilteringData(WebKit::WebPageProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  double result;
  uint64_t v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  char v11;
  IPC::Encoder *v12;

  if (!*((_BYTE *)this + 729) && *((_BYTE *)this + 728))
  {
    {
      if (dword_1ECE7350C)
      {
        *((_BYTE *)this + 1304) = 0;
        v1 = *((_QWORD *)this + 26);
        v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 1896);
        v3 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v3 = 2403;
        *(_QWORD *)(v3 + 8) = v2;
        *(_QWORD *)(v3 + 528) = v3 + 16;
        *(_QWORD *)(v3 + 536) = v3 + 16;
        *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v3 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
        v12 = (IPC::Encoder *)v3;
        IPC::VectorArgumentCoder<false,WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v3, (uint64_t)&WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance + 8);
        LOBYTE(v10) = 0;
        v11 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v1, &v12, 0, (uint64_t)&v10, 1);
        if (v11)
        {
          v6 = v10;
          v10 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        }
        v7 = v12;
        v12 = 0;
        if (v7)
        {
          IPC::Encoder::~Encoder(v7, v4);
          WTF::fastFree(v8, v9);
        }
      }
    }
    else
    {
      qword_1ECE73518 = 0;
      result = 0.0;
      WebKit::LinkDecorationFilteringController::shared(void)::sharedInstance = 0u;
      unk_1ECE73508 = 0u;
    }
  }
  return result;
}

void sub_196D3D7D8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPageProxy::listenForLayoutMilestones(uint64_t result, unsigned __int16 a2)
{
  uint64_t v2;
  __int16 *v3;
  unsigned __int16 v4;

  v4 = a2;
  v2 = *(_QWORD *)(result + 32);
  if (*(unsigned __int16 *)(v2 + 904) != a2)
  {
    *(_WORD *)(v2 + 904) = a2;
    if (!*(_BYTE *)(result + 729))
    {
      if (*(_BYTE *)(result + 728))
      {
        v3 = (__int16 *)&v4;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ListenForLayoutMilestones>(*(_QWORD *)(result + 208), &v3, *(_QWORD *)(v2 + 1896), 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::PlatformCALayerRemote::animationForKey@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;

  v5 = *(_QWORD *)(this + 816);
  if (v5)
  {
    v8 = *(_DWORD *)(v5 - 8);
    v9 = *((_DWORD *)*a2 + 4);
    if (v9 >= 0x100)
      v10 = v9 >> 8;
    else
      v10 = WTF::StringImpl::hashSlowCase(*a2);
    for (i = 0; ; v10 = i + v12)
    {
      v12 = v10 & v8;
      this = *(_QWORD *)(v5 + 16 * v12);
      if (!this)
        break;
      if (this != -1)
      {
        this = WTF::equal((WTF *)this, *a2, a3);
        if ((this & 1) != 0)
        {
          v6 = *(_QWORD *)(v5 + 16 * v12 + 8);
          if (v6)
            ++*(_DWORD *)(v6 + 8);
          goto LABEL_3;
        }
      }
      ++i;
    }
  }
  v6 = 0;
LABEL_3:
  *a4 = v6;
  return this;
}

WebCore::Page *WebKit::WebPage::applicationDidBecomeActive(WebKit::WebPage *this)
{
  void *v2;
  WebCore::PlatformMediaSessionManager *v3;
  WebCore::Page *result;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists((WebCore::PlatformMediaSessionManager *)objc_msgSend(v2, "postNotificationName:object:", *MEMORY[0x1E0DCDE70], 0));
  if (v3)
    WebCore::PlatformMediaSessionManager::applicationDidBecomeActive(v3);
  result = (WebCore::Page *)*((_QWORD *)this + 6);
  if (result)
    return (WebCore::Page *)WebCore::Page::applicationDidBecomeActive(result);
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::WebPreferencesStore>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;

  IPC::Decoder::decode<WebKit::WebPreferencesStore>(a1, (uint64_t)&v9);
  v3 = v17;
  if (v17)
  {
    v4 = v9;
    v9 = 0;
    *(_QWORD *)a2 = v4;
    v5 = v10;
    v10 = 0;
    *(_QWORD *)(a2 + 8) = v5;
    LODWORD(v4) = v11;
    v11 = 0;
    *(_DWORD *)(a2 + 16) = v4;
    LOBYTE(v4) = v12;
    v12 = 0;
    *(_BYTE *)(a2 + 20) = v4;
    v6 = v13;
    v13 = 0;
    *(_QWORD *)(a2 + 24) = v6;
    v7 = v14;
    v14 = 0;
    *(_QWORD *)(a2 + 32) = v7;
    LODWORD(v6) = v15;
    v15 = 0;
    *(_DWORD *)(a2 + 40) = v6;
    *(_BYTE *)(a2 + 44) = v16;
    v3 = 1;
    v16 = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 48) = v3;
  return std::__optional_destruct_base<WebKit::WebPreferencesStore,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v9);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;
  _QWORD v5[2];
  char v6;

  result = IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v5);
  v4 = v6;
  if (v6)
  {
    *(_QWORD *)a2 = v5[0];
    *(_QWORD *)(a2 + 8) = v5[1];
    v4 = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v4;
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<true,unsigned int,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196D3DAB0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<true,unsigned int,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  char v4;
  int *v5[2];
  char v6;

  result = IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>(a1, (uint64_t)v5);
  v4 = v6;
  if (v6)
  {
    result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned int const,18446744073709551615ul>((uint64_t)a2, v5[0], (unint64_t)v5[1]);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[16] = v4;
  return result;
}

unint64_t IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!v5)
    goto LABEL_15;
  if (!result)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    goto LABEL_11;
  }
  if (result >> 62)
    goto LABEL_15;
  v6 = a1[1];
  v7 = *a1;
  v8 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  v9 = 4 * result;
  if (v6 < v8 || v6 - v8 < v9)
  {
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result && v6)
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 16))(result);
    goto LABEL_15;
  }
  v11 = v7 + v8;
  a1[2] = v11 + v9;
  if (!v7)
  {
LABEL_15:
    v12 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_12;
  }
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = result;
LABEL_11:
  v12 = 1;
LABEL_12:
  *(_BYTE *)(a2 + 16) = v12;
  return result;
}

uint64_t WebKit::WebUserContentController::forEachUserScript(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(result + 72);
  if (!v3)
  {
    v4 = 0;
    LODWORD(v5) = 0;
LABEL_3:
    v6 = v3 + 24 * v5;
    goto LABEL_4;
  }
  v5 = *(unsigned int *)(v3 - 4);
  v6 = v3 + 24 * v5;
  if (!*(_DWORD *)(v3 - 12))
  {
    v4 = v3 + 24 * v5;
    goto LABEL_3;
  }
  v4 = *(_QWORD *)(result + 72);
  if ((_DWORD)v5)
  {
    v8 = 24 * v5;
    v4 = *(_QWORD *)(result + 72);
    while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
    {
      v4 += 24;
      v8 -= 24;
      if (!v8)
      {
        v4 = v6;
        break;
      }
    }
  }
LABEL_4:
  if (v3)
    v7 = v3 + 24 * *(unsigned int *)(v3 - 4);
  else
    v7 = 0;
  while (v4 != v7)
  {
    v9 = *(_DWORD *)(v4 + 20);
    if (v9)
    {
      v10 = *(_QWORD *)(*(_QWORD *)v4 + 24);
      v11 = 104 * v9;
      v12 = *(_QWORD *)(v4 + 8) + 16;
      do
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v10, v12);
        v12 += 104;
        v11 -= 104;
      }
      while (v11);
    }
    v13 = v4 + 24;
    v4 = v6;
    if (v13 != v6)
    {
      v4 = v13;
      while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
      {
        v4 += 24;
        if (v4 == v6)
        {
          v4 = v6;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::setValues(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[2];

  if (*(_BYTE *)(result + 24) == 2)
  {
    v2 = result;
    WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebKit::toKeyframeValueVector<float>(WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(float&)#1}>(v4, a2);
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v2 + 88, v4);
    return WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v3);
  }
  return result;
}

{
  uint64_t v2;
  void *v3;
  _QWORD v4[2];

  if (*(_BYTE *)(result + 24) == 2)
  {
    v2 = result;
    WTF::Vector<WebCore::TransformationMatrix,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebKit::toKeyframeValueVector<WebCore::TransformationMatrix>(WTF::Vector<WebCore::TransformationMatrix,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebCore::TransformationMatrix&)#1}>(v4, a2);
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v2 + 88, v4);
    return WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v3);
  }
  return result;
}

{
  uint64_t v2;
  void *v3;
  _QWORD v4[2];

  if (*(_BYTE *)(result + 24) == 2)
  {
    v2 = result;
    WTF::Vector<WebCore::FloatPoint3D,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WebKit::toKeyframeValueVector<WebCore::FloatPoint3D>(WTF::Vector<WebCore::FloatPoint3D,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WebCore::FloatPoint3D&)#1}>(v4, a2);
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v2 + 88, v4);
    return WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v3);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[128];
  int v13;
  char v14;

  if (*(_BYTE *)(result + 24) == 2)
  {
    v3 = result;
    v10 = 0;
    v11 = 0;
    v4 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v4)
    {
      if (v4 >= 0x1E1E1E2)
      {
        __break(0xC471u);
        return result;
      }
      v5 = 136 * v4;
      v6 = WTF::fastMalloc((WTF *)(136 * v4));
      LODWORD(v11) = v5 / 0x88;
      v10 = v6;
      if (*(_DWORD *)(a2 + 12))
      {
        v7 = 0;
        v8 = 0;
        do
        {
          WebCore::Color::Color((WebCore::Color *)v12, (const Color *)(*(_QWORD *)a2 + v7));
          v13 = 1;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v6, (uint64_t)v12);
          if (v13 != -1)
            ((void (*)(char *, _BYTE *))off_1E34D6CA8[v13])(&v14, v12);
          ++v8;
          v6 += 136;
          v7 += 8;
        }
        while (v8 < *(unsigned int *)(a2 + 12));
        HIDWORD(v11) = v8;
      }
    }
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 88, &v10);
    return WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v9);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[16];
  int v13;
  char v14;

  if (*(_BYTE *)(result + 24) == 2)
  {
    v3 = result;
    v10 = 0;
    v11 = 0;
    v4 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v4)
    {
      if (v4 >= 0x1E1E1E2)
      {
        __break(0xC471u);
        return result;
      }
      LODWORD(v11) = 136 * (int)v4 / 0x88u;
      v10 = WTF::fastMalloc((WTF *)(136 * v4));
      if (*(_DWORD *)(a2 + 12))
      {
        v5 = 0;
        do
        {
          v6 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v5);
          v7 = (unsigned int *)(v6 + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
          v12[0] = v6;
          v13 = 4;
          std::__variant_detail::__move_constructor<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>::__move_constructor(v10 + 136 * HIDWORD(v11), (uint64_t)v12);
          ++HIDWORD(v11);
          if (v13 != -1)
            ((void (*)(char *, _QWORD *))off_1E34D6CA8[v13])(&v14, v12);
          ++v5;
        }
        while (v5 < *(unsigned int *)(a2 + 12));
      }
    }
    WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 88, &v10);
    return WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v9);
  }
  return result;
}

void sub_196D3DDB8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::setInspectable(WebKit::WebPageProxy *this, int a2)
{
  Inspector::RemoteInspectionTarget *v3;
  CFTypeRef *v4;
  void *v5;

  v3 = (Inspector::RemoteInspectionTarget *)*((_QWORD *)this + 135);
  if (v3)
  {
    if (Inspector::RemoteInspectionTarget::inspectable(v3) != a2)
    {
      Inspector::RemoteInspectionTarget::setInspectable(*((Inspector::RemoteInspectionTarget **)this + 135));
      v4 = (CFTypeRef *)*((_QWORD *)this + 33);
      CFRetain(v4[1]);
      WebKit::WebsiteDataStore::updateServiceWorkerInspectability((WebKit::WebsiteDataStore *)v4, v5);
      CFRelease(v4[1]);
    }
  }
}

_QWORD *WebKit::PCM::Database::interruptAllDatabases(WebKit::PCM::Database *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  if ((byte_1ECE729B1 & 1) == 0)
  {
    *(_QWORD *)&dword_1ECE729C0 = 0;
    qword_1ECE729B8 = 0;
    byte_1ECE729B1 = 1;
  }
  v14 = &qword_1ECE729B8;
  v15 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&qword_1ECE729B8);
  v16 = v1;
  v2 = qword_1ECE729B8;
  if (qword_1ECE729B8)
  {
    v3 = *(unsigned int *)(qword_1ECE729B8 - 4);
    v4 = qword_1ECE729B8 + 8 * v3;
    v17 = v4;
    v18 = v4;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  }
  else
  {
    v17 = 0;
    v18 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
    v4 = 0;
    v3 = 0;
  }
  v9 = &qword_1ECE729B8;
  v10 = v4;
  v11 = v4;
  v12 = v4;
  v13 = v2 + 8 * v3;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  v6 = v15;
  v7 = (_QWORD *)v10;
  while (v6 != v7)
  {
    if (*(_QWORD *)(*(_QWORD *)(*v6 + 8) + 24))
      WebCore::SQLiteDatabase::interrupt();
    v8 = v6 + 1;
    v15 = v6 + 1;
    if (v6 + 1 != v16)
    {
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        if (++v8 == v16)
        {
          v8 = v16;
          break;
        }
      }
      v15 = v8;
    }
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
    v6 = v15;
    ++*((_DWORD *)v14 + 2);
  }
  return result;
}

uint64_t ___ZNK6WebKit12WebPageProxy33isDesktopClassBrowsingRecommendedERKN7WebCore15ResourceRequestE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  if (MGGetSInt32Answer() - 8 > 0xFFFFFFFD)
  {
    v2 = 0;
  }
  else
  {
    if (qword_1EE341968 != -1)
      dispatch_once(&qword_1EE341968, &__block_literal_global_325);
    v2 = byte_1EE341943 != 0;
  }
  byte_1EE341941 = v2;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 240))(*(_QWORD *)(v1 + 72));
  if ((result & 1) == 0)
  {
    result = WTF::linkedOnOrAfterSDKWithBehavior();
    if ((result & 1) == 0)
      byte_1EE341941 = 0;
  }
  return result;
}

unint64_t WebKit::NavigationState::NavigationClient::shouldBypassContentModeSafeguards(WebKit::NavigationState::NavigationClient *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(unsigned int *)(v2 + 32) | ((unint64_t)*(unsigned __int8 *)(v2 + 36) << 32);
  if ((v3 & 2) != 0)
    return 1;
  else
    return (v3 >> 2) & 1;
}

void sub_196D3E3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  const void *v13;

  if (v13)
    CFRelease(v13);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::URL::URL(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  v3 = *a2;
  if (*a2)
    *(_DWORD *)v3 += 2;
  v7 = v3;
  MEMORY[0x19AEABB0C](a1, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

void sub_196D3E4DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPageProxy::currentResourceDirectoryURL(WebKit::WebPageProxy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  __int128 v5;
  WTF::StringImpl *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  __int128 v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;

  v3 = *((_QWORD *)this + 4);
  v4 = *(WTF::StringImpl **)(v3 + 1064);
  if (v4)
  {
    *(_DWORD *)v4 += 2;
    v14 = v4;
    v5 = *(_OWORD *)(v3 + 1088);
    v15 = *(_OWORD *)(v3 + 1072);
    v16 = v5;
    if (*((_DWORD *)v4 + 1))
    {
      WTF::URL::URL(a2, (uint64_t *)&v14);
      v4 = v14;
      goto LABEL_14;
    }
  }
  else
  {
    v7 = *(_OWORD *)(v3 + 1088);
    v15 = *(_OWORD *)(v3 + 1072);
    v16 = v7;
  }
  v8 = *((_QWORD *)this + 74);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9 || !*(_QWORD *)(v9 + 8) || !*(_BYTE *)(v8 + 48))
    goto LABEL_13;
  v10 = *(_QWORD *)(v8 + 40);
  if (v10 >= *(unsigned int *)(v8 + 36))
  {
    __break(0xC471u);
    return;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v10);
  if (v11)
  {
    CFRetain(*(CFTypeRef *)(v11 + 8));
    v12 = *(_DWORD **)(v11 + 344);
    if (v12)
      *v12 += 2;
    *(_QWORD *)a2 = v12;
    v13 = *(_OWORD *)(v11 + 352);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v11 + 368);
    *(_OWORD *)(a2 + 8) = v13;
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
LABEL_13:
    *(_QWORD *)a2 = 0;
    WTF::URL::invalidate((WTF::URL *)a2);
  }
LABEL_14:
  v14 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v6);
    else
      *(_DWORD *)v4 -= 2;
  }
}

void WebKit::WebProcessProxy::updateBackForwardItem(WebKit::WebProcessProxy *this, BackForwardListItemState *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebKit::WebBackForwardCache *v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37[31];
  char v38;
  unsigned int *v39;
  char v40;
  WebCore::SerializedScriptValue *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;

  v4 = WebKit::WebBackForwardListItem::allItems(this);
  v5 = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v4, a2);
  if (v5)
  {
    v6 = v5;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    v7 = *(_QWORD *)(v6 + 384);
    if ((WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*((_QWORD *)this + 69), v7) & 1) == 0)
    {
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v36, (_QWORD **)this + 72);
      v14 = *((_QWORD *)this + 72);
      if (v14)
      {
        v15 = *(unsigned int *)(v14 - 4);
        v16 = (WTF::StringImpl *)(v14 + 8 * v15);
      }
      else
      {
        v16 = 0;
        v15 = 0;
      }
      v41 = (WebKit::WebProcessProxy *)((char *)this + 576);
      v42 = v16;
      v43 = v16;
      v44 = v16;
      v45 = v14 + 8 * v15;
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v41);
      v27 = v37[0];
      v28 = v42;
      while (v27 != v28)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v27 + 8) + 24) + 8);
        if (v29)
          v30 = v29 - 16;
        else
          v30 = 0;
        if (*(_QWORD *)(*(_QWORD *)(v30 + 32) + 744) == v7)
          goto LABEL_3;
        WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v36);
        v27 = v37[0];
      }
      v31 = *(_QWORD *)(v6 + 416);
      if (!v31)
        goto LABEL_51;
      v32 = *(_QWORD *)(v31 + 32);
      if (!v32)
        goto LABEL_51;
      v33 = *(_QWORD *)(*(_QWORD *)(v32 + 24) + 8);
      v34 = v33 ? v33 - 16 : 0;
      if (*(_QWORD *)(*(_QWORD *)(v34 + 32) + 744) != *(_QWORD *)(v6 + 384)
        || *(WebKit::WebProcessProxy **)(v32 + 40) != this)
      {
        goto LABEL_51;
      }
    }
LABEL_3:
    v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
    if (v8)
      *(_DWORD *)v8 += 2;
    v36 = v8;
    WebKit::FrameState::FrameState((WebKit::FrameState *)v37, (const WebKit::FrameState *)((char *)a2 + 24));
    v38 = *((_BYTE *)a2 + 272);
    v10 = (unsigned int *)*((_QWORD *)a2 + 35);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v40 = *((_BYTE *)a2 + 288);
    v12 = v36;
    v39 = v10;
    v36 = 0;
    v13 = *(WTF::StringImpl **)(v6 + 48);
    *(_QWORD *)(v6 + 48) = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
    WebKit::FrameState::operator=(v6 + 56, (uint64_t)v37);
    *(_BYTE *)(v6 + 304) = v38;
    WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>::operator=((unsigned int **)(v6 + 312), &v39);
    *(_BYTE *)(v6 + 320) = v40;
    v17 = v39;
    v39 = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        v41 = (WebCore::SerializedScriptValue *)v17;
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v41);
      }
    }
    WebKit::FrameState::~FrameState(v37);
    v21 = v36;
    v36 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = *(_QWORD *)(v6 + 416);
    if (*((_BYTE *)a2 + 296) != (v22 != 0))
    {
      if (*((_BYTE *)a2 + 296))
      {
        v23 = *(_QWORD *)(*((_QWORD *)this + 64) + 8);
        if (v23)
          v24 = v23 - 16;
        else
          v24 = 0;
        CFRetain(*(CFTypeRef *)(v24 + 8));
        v25 = *(WebKit::WebBackForwardCache **)(v24 + 760);
        ++*(_DWORD *)v25;
        WebKit::WebBackForwardCache::addEntry((uint64_t)v25, v6, *((_QWORD *)this + 22));
        v26 = *(_DWORD *)v25;
        if (!*(_DWORD *)v25)
          goto LABEL_53;
      }
      else
      {
        if (v22 && *(_QWORD *)(v22 + 32))
          goto LABEL_51;
        v23 = *(_QWORD *)(*((_QWORD *)this + 64) + 8);
        if (v23)
          v35 = v23 - 16;
        else
          v35 = 0;
        CFRetain(*(CFTypeRef *)(v35 + 8));
        v25 = *(WebKit::WebBackForwardCache **)(v35 + 760);
        ++*(_DWORD *)v25;
        WebKit::WebBackForwardCache::removeEntry(v25, (WebKit::WebBackForwardListItem *)v6);
        v26 = *(_DWORD *)v25;
        if (!*(_DWORD *)v25)
        {
LABEL_53:
          __break(0xC471u);
          JUMPOUT(0x196D3E81CLL);
        }
      }
      *(_DWORD *)v25 = v26 - 1;
      CFRelease(*(CFTypeRef *)(v23 - 8));
    }
LABEL_51:
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

uint64_t *WebKit::WebBackForwardListItem::allItems(WebKit::WebBackForwardListItem *this)
{
  WTF::RunLoop *v1;

  v1 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196D3E9D4);
  }
  {
    WebKit::WebBackForwardListItem::allItems(void)::items = 0;
  }
  return &WebKit::WebBackForwardListItem::allItems(void)::items;
}

uint64_t WebKit::WebBackForwardList::forwardItem(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(this + 16);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 8))
    return 0;
  if (!*(_BYTE *)(this + 48))
    return 0;
  v2 = *(unsigned int *)(this + 36);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(_QWORD *)(this + 40);
  if (v3 >= v2 - 1)
    return 0;
  v4 = v3 + 1;
  if (v4 < v2)
    return *(_QWORD *)(*(_QWORD *)(this + 24) + 8 * v4);
  __break(0xC471u);
  return this;
}

void WebKit::WebCookieJar::cookies(WebKit::WebCookieJar *this@<X0>, WebCore::Document *a2@<X1>, const WTF::URL *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WebKit::WebFrame *v17;
  const WTF::URL *v18;
  char shouldIncludeSecureCookies;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const WTF::URL *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int *shouldRelaxThirdPartyCookieBlocking;
  uint64_t v32;
  unint64_t v33;
  WebKit::WebProcess *v34;
  int v35;
  WebKit::WebProcess *v36;
  uint64_t *v37;
  int v38;
  int v39;
  WebKit::WebProcess *v40;
  const WebKit::WebFrame *v41;
  IPC::Encoder *v42;
  int v43;
  int v44;
  void *v45;
  uint64_t *v46;
  void *v47;
  const WTF::StringImpl *v48;
  uint64_t *v49;
  int v50;
  IPC::Decoder *v51;
  WTF *v52;
  void *v53;
  IPC::Encoder *v54;
  WTF *v55;
  void *v56;
  int v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  WTF::StringImpl **v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  int i;
  uint64_t *v84;
  uint64_t v85;
  WebKit::WebProcess *v86;
  WebKit::WebProcess *v87;
  WebKit::WebProcess *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned int v91;
  WTF::StringImpl *v92;
  int v93;
  uint64_t v94[2];
  unsigned __int8 v95;
  __int16 v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  int v101;
  int v102;
  int v103;
  WTF::StringImpl *v104;
  uint64_t *v105;
  uint64_t v106;
  char v107;
  uint64_t *v108;
  int v109;
  IPC::Encoder *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[2];

  v5 = *((_QWORD *)a2 + 66);
  if (!v5 || (v7 = *(_QWORD *)(v5 + 8)) == 0)
  {
    v10 = 0;
    goto LABEL_14;
  }
  WebKit::WebFrame::fromCoreFrame(v7, &v98);
  v10 = v98;
  if (!v98
    || (v11 = *(_QWORD *)(v98 + 24)) == 0
    || (v12 = *(_QWORD *)(v11 + 8)) == 0
    || (v13 = *(_QWORD *)(v12 + 24)) == 0
    || (v14 = *(_QWORD *)(v13 + 8)) == 0
    || (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) != 0)
    || !*(_QWORD *)(v15[2] + 8))
  {
LABEL_14:
    *a4 = 0;
    if (!v10)
      return;
    goto LABEL_15;
  }
  v16 = WebCore::CookieJar::sameSiteInfo();
  v96 = v16;
  v97 = BYTE2(v16);
  v95 = 0;
  v17 = (WebCore::Document *)((char *)a2 + 1008);
  if (WebKit::shouldBlockCookies((WebCore::DeprecatedGlobalSettings *)v10, (WebCore::Document *)((char *)a2 + 1008), a3, &v95))
  {
    WebKit::WebCookieJar::cookiesInPartitionedCookieStorage(a2, a3, (uint64_t)this, &v96, a4);
    if (!v10)
      return;
    goto LABEL_15;
  }
  shouldIncludeSecureCookies = WebCore::CookieJar::shouldIncludeSecureCookies(a2, a3, v18);
  v21 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  v94[0] = v21;
  v94[1] = v20;
  v22 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(_QWORD *))(*v22 + 1368))(v22);
  v24 = *(_QWORD *)(v22[2] + 8);
  if (v24)
    v25 = v24 - 16;
  else
    v25 = 0;
  v26 = *(_QWORD *)(v25 + 40);
  if (WebKit::WebCookieJar::isEligibleForCache((WebKit::WebCookieJar *)v10, v17, a3, v23))
  {
    v92 = (WTF::StringImpl *)v20;
    v93 = v26;
    v27 = WTF::URL::host(a3);
    v30 = (uint64_t *)((char *)this + 48);
    v29 = *((_QWORD *)this + 6);
    shouldRelaxThirdPartyCookieBlocking = (unsigned int *)((char *)this + 32);
    if (!v29)
    {
LABEL_22:
      WTF::URL::host(a3);
      if ((v32 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      v33 = (unint64_t)&_MergedGlobals_106;
        goto LABEL_145;
      v34 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      while (1)
      {
        WebKit::WebCookieJar::addChangeListener(*((_QWORD *)v34 + 51), &v104, shouldRelaxThirdPartyCookieBlocking);
        v35 = 0;
LABEL_27:
        v33 = (unint64_t)&_MergedGlobals_106;
        {
          v36 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v87 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v36 = WebKit::WebProcess::WebProcess(v87);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v36;
        }
        v37 = *(uint64_t **)(WebKit::WebProcess::ensureNetworkProcessConnection(v36) + 24);
        v114[0] = 0;
        IPC::Connection::createSyncMessageEncoder(3521, 0, v114, (uint64_t *)&v110);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v110, (uint64_t *)a3);
        IPC::Connection::sendSyncMessage((uint64_t)v37, v114[0], (uint64_t *)&v110, 0, (uint64_t)&v108, INFINITY);
        if (v109)
        {
          if (v109 == 1)
          {
            LOBYTE(v99) = (_BYTE)v108;
            v38 = 1;
            v103 = 1;
            v39 = 1;
            goto LABEL_59;
          }
        }
        else
        {
          LOBYTE(v105) = 0;
          v107 = 0;
          IPC::Decoder::operator>><std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v108, &v105);
          if (!v107)
          {
            LOBYTE(v99) = 13;
            v38 = 1;
            v103 = 1;
            goto LABEL_58;
          }
          if (!v109)
          {
            v49 = v108;
            v108 = 0;
            v37 = v105;
            v105 = 0;
            v50 = v106;
            LODWORD(v26) = HIDWORD(v106);
            v106 = 0;
            v111 = 0;
            v112 = 0;
            v99 = (uint64_t)v49;
            v100 = (WTF::StringImpl *)v37;
            v113 = 0;
            v101 = v50;
            v102 = v26;
            v103 = 0;
            WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v112, v47);
            v51 = v111;
            v111 = 0;
            if (v51)
            {
              IPC::Decoder::~Decoder(v51);
              WTF::fastFree(v52, v53);
            }
            if (v107)
              WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v105, v47);
            v38 = 0;
LABEL_58:
            v39 = v109;
            if (v109 != -1)
LABEL_59:
              ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34F16D0[v39])(&v111, &v108);
            v58 = v110;
            v110 = 0;
            if (v58)
            {
              IPC::Encoder::~Encoder(v58, v47);
              WTF::fastFree(v59, v60);
            }
            if (v38)
            {
              *a4 = 0;
              LODWORD(v61) = 1;
              v62 = 1;
              goto LABEL_124;
            }
            if (!v35)
            {
              while (*v30 && *(_DWORD *)(*v30 - 12) >= 5u)
              {
                v78 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::random(v30);
                WebKit::WebCookieCache::clearForHost((WebKit::WebCookieCache *)shouldRelaxThirdPartyCookieBlocking, v78);
              }
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v30, &v104, v48, (uint64_t)&v111);
              if ((_DWORD)v26)
              {
                v61 = 136 * v26;
                do
                {
                  WebKit::WebCookieCache::inMemoryStorageSession((WebKit::WebCookieCache *)shouldRelaxThirdPartyCookieBlocking);
                  WebCore::NetworkStorageSession::setCookie();
                  v37 += 17;
                  v61 -= 136;
                }
                while (v61);
              }
              else
              {
                LODWORD(v61) = 0;
              }
              goto LABEL_123;
            }
            v111 = 0;
            v112 = 0;
            LODWORD(v113) = 0;
            BYTE4(v113) = 1;
            if (!(_DWORD)v26)
              goto LABEL_111;
            v63 = 136 * v26;
            while (2)
            {
              v64 = *v37;
              if (*v37)
              {
                v65 = *(unsigned int *)(v64 + 4);
                if ((_DWORD)v65)
                {
                  if (!*((_BYTE *)v37 + 56))
                  {
                    if ((_DWORD)v113)
                    {
                      WTF::StringBuilder::append();
                      if ((_DWORD)v113 || v112)
                      {
                        v64 = *v37;
                        if (*v37)
                        {
                          v65 = *(unsigned int *)(v64 + 4);
                          goto LABEL_75;
                        }
                        v66 = 0;
                        v67 = 0x100000000;
LABEL_76:
                        WTF::StringBuilder::append((uint64_t)&v111, v66, v67);
LABEL_81:
                        LOBYTE(v105) = 61;
                        if (!v112
                          || ((v69 = v113, v113 < *(_DWORD *)(v112 + 4))
                            ? (v70 = v111 == 0)
                            : (v70 = 0),
                              !v70))
                        {
                          WTF::StringBuilder::append();
                          goto LABEL_89;
                        }
                        v71 = *(_DWORD *)(v112 + 16);
                        v72 = *(_QWORD *)(v112 + 8);
                        LODWORD(v113) = v113 + 1;
                        if ((v71 & 4) != 0)
                        {
                          *(_BYTE *)(v72 + v69) = 61;
LABEL_89:
                          v73 = v37 + 1;
                          if (!(_DWORD)v113 && !v112)
                          {
                            WTF::String::operator=(&v111, (WTF::StringImpl *)(v37 + 1));
                            v74 = *v73;
                            if (*v73)
                              LODWORD(v74) = *(_DWORD *)(v74 + 4);
                            LODWORD(v113) = v74;
                            goto LABEL_94;
                          }
                        }
                        else
                        {
                          *(_WORD *)(v72 + 2 * v69) = 61;
                          v73 = v37 + 1;
                        }
                        v75 = *v73;
                        if (*v73)
                        {
                          v76 = *(_QWORD *)(v75 + 8);
                          v77 = *(unsigned int *)(v75 + 4) | ((unint64_t)((*(_DWORD *)(v75 + 16) >> 2) & 1) << 32);
                        }
                        else
                        {
                          v76 = 0;
                          v77 = 0x100000000;
                        }
                        WTF::StringBuilder::append((uint64_t)&v111, v76, v77);
                        goto LABEL_94;
                      }
                    }
                    else if (v112)
                    {
LABEL_75:
                      v66 = *(_QWORD *)(v64 + 8);
                      v67 = v65 | ((unint64_t)((*(_DWORD *)(v64 + 16) >> 2) & 1) << 32);
                      goto LABEL_76;
                    }
                    WTF::String::operator=(&v111, (WTF::StringImpl *)v37);
                    v68 = *v37;
                    if (*v37)
                      LODWORD(v68) = *(_DWORD *)(v68 + 4);
                    LODWORD(v113) = v68;
                    goto LABEL_81;
                  }
                }
              }
LABEL_94:
              v37 += 17;
              v63 -= 136;
              if (!v63)
              {
                v79 = v111;
                if (v111)
                  goto LABEL_112;
LABEL_111:
                WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v111);
                WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v111);
                v79 = v111;
                if (v111)
LABEL_112:
                  *(_DWORD *)v79 += 2;
                *a4 = v79;
                v80 = (WTF::StringImpl *)v112;
                v112 = 0;
                if (v80)
                {
                  if (*(_DWORD *)v80 == 2)
                  {
                    WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v47);
                    v79 = v111;
                  }
                  else
                  {
                    *(_DWORD *)v80 -= 2;
                  }
                }
                v111 = 0;
                if (v79)
                {
                  if (*(_DWORD *)v79 == 2)
                    WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v47);
                  else
                    *(_DWORD *)v79 -= 2;
                }
                LODWORD(v61) = 1;
LABEL_123:
                v62 = v103;
                if (v103 != -1)
LABEL_124:
                  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E34F1658[v62])(&v111, &v99);
                v81 = v104;
                v104 = 0;
                if (v81)
                {
                  if (*(_DWORD *)v81 == 2)
                    WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v47);
                  else
                    *(_DWORD *)v81 -= 2;
                }
                if (!(_DWORD)v61)
                {
LABEL_130:
                  WebKit::WebCookieCache::inMemoryStorageSession((WebKit::WebCookieCache *)shouldRelaxThirdPartyCookieBlocking);
                  v99 = v21;
                  v100 = v92;
                  LOBYTE(v101) = 1;
                  WebCore::NetworkStorageSession::cookiesForDOM();
                  *a4 = v111;
                }
                goto LABEL_131;
              }
              continue;
            }
          }
        }
LABEL_144:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
        v86 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v34 = WebKit::WebProcess::WebProcess(v86);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v34;
        *(_BYTE *)(v33 + 2488) = 1;
      }
    }
    v91 = *(_DWORD *)(v29 - 8);
    v89 = v28;
    v90 = (unsigned __int8 *)v27;
    v82 = WTF::StringViewHashTranslator::hash(v27, v28);
    for (i = 0; ; v82 = i + v26)
    {
      LODWORD(v26) = v82 & v91;
      v84 = (uint64_t *)(v29 + 8 * (v82 & v91));
      if (*v84 != -1)
      {
        if (!*v84)
          goto LABEL_22;
        if (WTF::StringViewHashTranslator::equal(v84, v90, v89))
        {
          LODWORD(v26) = v93;
          if (!*(_QWORD *)(*((_QWORD *)this + 9) + 8))
            goto LABEL_130;
          WTF::URL::host(a3);
          if ((v85 & 0xFF00000000) != 0)
            WTF::String::String();
          else
            WTF::String::String();
          v35 = 1;
          goto LABEL_27;
        }
      }
      ++i;
    }
  }
  {
    v40 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v88 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v40 = WebKit::WebProcess::WebProcess(v88);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v40;
  }
  v30 = *(uint64_t **)(WebKit::WebProcess::ensureNetworkProcessConnection(v40) + 24);
  v33 = v95;
  shouldRelaxThirdPartyCookieBlocking = (unsigned int *)WebKit::shouldRelaxThirdPartyCookieBlocking((WebKit *)v10, v41);
  v108 = 0;
  IPC::Connection::createSyncMessageEncoder(3520, 0, (uint64_t *)&v108, v114);
  v42 = (IPC::Encoder *)v114[0];
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v114[0], (uint64_t *)v17);
  IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::encode(v42, (char *)&v96);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v42, (uint64_t *)a3);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(v42, v94);
  *(_QWORD *)IPC::Encoder::grow(v42, 8uLL, 8) = v26;
  *IPC::Encoder::grow(v42, 1uLL, 1) = shouldIncludeSecureCookies;
  *IPC::Encoder::grow(v42, 1uLL, 1) = v33;
  *IPC::Encoder::grow(v42, 1uLL, 1) = (char)shouldRelaxThirdPartyCookieBlocking;
  IPC::Connection::sendSyncMessage((uint64_t)v30, (uint64_t)v108, v114, 0, (uint64_t)&v105, INFINITY);
  if ((_DWORD)v106)
  {
    if ((_DWORD)v106 != 1)
      goto LABEL_144;
    LOBYTE(v99) = (_BYTE)v105;
    v43 = 1;
    v103 = 1;
    v44 = 1;
    goto LABEL_48;
  }
  LOBYTE(v111) = 0;
  LOBYTE(v113) = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String,BOOL>>(v105, (uint64_t)&v111);
  if ((_BYTE)v113)
  {
    v44 = v106;
    if ((_DWORD)v106)
      goto LABEL_144;
    v43 = 0;
    v46 = v105;
    v105 = 0;
    a3 = v111;
    v99 = (uint64_t)v46;
    v100 = v111;
    LOBYTE(v101) = v112;
    v103 = 0;
    goto LABEL_48;
  }
  LOBYTE(v99) = 13;
  v43 = 1;
  v103 = 1;
  v44 = v106;
  if ((_DWORD)v106 != -1)
LABEL_48:
    ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34F16D0[v44])(&v111, &v105);
  v54 = (IPC::Encoder *)v114[0];
  v114[0] = 0;
  if (v54)
  {
    IPC::Encoder::~Encoder(v54, v45);
    WTF::fastFree(v55, v56);
  }
  if (v43 || (v100 = 0, !a3))
  {
    *a4 = 0;
  }
  else
  {
    v57 = *(_DWORD *)a3;
    *(_DWORD *)a3 += 2;
    *a4 = a3;
    if (v57)
    {
      v43 = 0;
      *(_DWORD *)a3 = v57;
    }
    else
    {
      WTF::StringImpl::destroy(a3, (WTF::StringImpl *)v45);
      v43 = v103;
      if (v103 == -1)
        goto LABEL_131;
    }
  }
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E34F1690[v43])(&v111, &v99);
LABEL_131:
  v10 = v98;
  if (v98)
LABEL_15:
    CFRelease(*(CFTypeRef *)(v10 + 8));
}

uint64_t WebKit::WebCookieJar::isEligibleForCache(WebKit::WebCookieJar *this, WebKit::WebFrame *a2, const WTF::URL *a3, const WTF::URL *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v4 = *((_QWORD *)this + 3);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return 0;
  v11 = *(_QWORD **)(*(_QWORD *)(v7 + 48) + 16);
  if (((*(uint64_t (**)(_QWORD *, WebKit::WebFrame *, const WTF::URL *, const WTF::URL *))(*v11 + 1368))(v11, a2, a3, a4) & 1) != 0|| !*(_QWORD *)(v11[2] + 8))
  {
    return 0;
  }
  v12 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(_QWORD *))(*v12 + 1368))(v12);
  v13 = *(_QWORD *)(v12[2] + 8);
  v14 = v13 ? v13 - 16 : 0;
  if (!*(_QWORD *)(v14 + 48))
    return 0;
  WebCore::RegistrableDomain::RegistrableDomain(&v24, a3);
  if (!v24)
    return 0;
  if (*((_DWORD *)v24 + 1) && (MEMORY[0x19AEABBCC]() & 1) == 0)
  {
    v18 = *((_QWORD *)this + 3);
    if (v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0 && *(_QWORD *)(*(_QWORD *)(v19 + 128) + 8) == v19)
    {
      v16 = 1;
    }
    else
    {
      WebCore::RegistrableDomain::RegistrableDomain(&v23, a2);
      v16 = WTF::equal(v23, v24, v20);
      v21 = v23;
      v23 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v15);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
  }
  else
  {
    v16 = 0;
  }
  v22 = v24;
  v24 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v15);
    else
      *(_DWORD *)v22 -= 2;
  }
  return v16;
}

uint64_t WebKit::shouldBlockCookies(WebCore::DeprecatedGlobalSettings *a1, const WTF::URL *a2, const WTF::URL *a3, _BYTE *a4)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WebKit::WebProcess *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebKit::WebProcess *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  if (!*(_BYTE *)(WebCore::DeprecatedGlobalSettings::shared(a1) + 19))
    return 0;
  WebCore::RegistrableDomain::RegistrableDomain(&v24, a2);
  if (!v24)
    return 0;
  if (*((_DWORD *)v24 + 1))
  {
    if ((MEMORY[0x19AEABBCC]() & 1) == 0)
    {
      WebCore::RegistrableDomain::RegistrableDomain(&v23, a3);
      if (v23)
      {
        if (*((_DWORD *)v23 + 1))
        {
          if ((MEMORY[0x19AEABBCC]() & 1) == 0 && (WTF::equal(v24, v23, v10) & 1) == 0)
          {
            if (!a1
              || !*(_BYTE *)(WebKit::WebFrame::localFrameLoaderClient(a1) + 80)
              && ((v11 = *((_QWORD *)a1 + 3)) == 0
               || (v12 = *(_QWORD *)(v11 + 8)) == 0
               || (v13 = *(_QWORD *)(v12 + 24)) == 0
               || (v14 = *(_QWORD *)(v13 + 8)) == 0
               || (v15 = *(_QWORD **)(*(_QWORD *)(v14 + 48) + 16),
                   ((*(uint64_t (**)(_QWORD *))(*v15 + 1368))(v15) & 1) != 0)
               || (v16 = *(_QWORD *)(v15[2] + 8)) == 0
               || (WebKit::WebPage::hasPageLevelStorageAccess((WebKit::WebPage *)(v16 - 16), &v24, &v23) & 1) == 0
               && ((v17 = *(_QWORD *)(v16 + 32)) == 0 || !*(_BYTE *)(v17 + 1683))))
            {
              {
                v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
              }
              else
              {
                v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                v18 = WebKit::WebProcess::WebProcess(v22);
                WebKit::WebProcess::singleton(void)::process = (uint64_t)v18;
              }
              v9 = 1;
              if (!*((_BYTE *)v18 + 680))
              {
LABEL_27:
                v19 = v23;
                v23 = 0;
                if (v19)
                {
                  if (*(_DWORD *)v19 == 2)
                    WTF::StringImpl::destroy(v19, v8);
                  else
                    *(_DWORD *)v19 -= 2;
                }
                goto LABEL_31;
              }
              *a4 = 1;
            }
          }
        }
        v9 = 0;
        goto LABEL_27;
      }
    }
  }
  v9 = 0;
LABEL_31:
  v20 = v24;
  v24 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v8);
    else
      *(_DWORD *)v20 -= 2;
  }
  return v9;
}

uint64_t WebKit::WebCookieCache::inMemoryStorageSession(WebKit::WebCookieCache *this)
{
  uint64_t result;
  WebKit::WebProcess *v3;
  CFTypeRef v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  WTF::StringImpl *v11;
  WebKit::WebProcess *v12;
  WebKit::WebProcess *v13;
  CFTypeRef cf;
  WTF::StringImpl *v15;
  CFTypeRef v16[2];

  result = *((_QWORD *)this + 3);
  if (result)
    return result;
  v16[0] = "WebKitInProcessStorage-";
  v16[1] = (CFTypeRef)24;
  LODWORD(cf) = getpid();
  result = WTF::tryMakeString<WTF::ASCIILiteral,int>((uint64_t *)v16, (int *)&cf, &v15);
  if (!v15)
  {
    __break(0xC471u);
LABEL_25:
    __break(1u);
    return result;
  }
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  WebKit::WebProcess::ensureNetworkProcessConnection(v3);
  WTF::String::createCFString((WTF::String *)&v15);
  WebCore::createPrivateStorageSession();
  v4 = cf;
  cf = 0;
  if (v4)
    CFRelease(v4);
  cf = (CFTypeRef)_CFURLStorageSessionCopyCookieStorage();
  {
    result = WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    result = (uint64_t)WebKit::WebProcess::WebProcess(v13);
    WebKit::WebProcess::singleton(void)::process = result;
  }
  if (!*(_BYTE *)(result + 672))
    goto LABEL_25;
  v5 = *(_QWORD *)(result + 664);
  v6 = WTF::fastMalloc((WTF *)0x128);
  MEMORY[0x19AEB13A4](v6, v5, v16, &cf, 1);
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v6;
  if (v8)
    WebCore::NetworkStorageSession::operator delete(v8, 0x128uLL);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  v10 = v16[0];
  v16[0] = 0;
  if (v10)
    CFRelease(v10);
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  return *((_QWORD *)this + 3);
}

void sub_196D3F930(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, WTF::StringImpl *a10, CFTypeRef a11)
{
  WTF *v11;
  WTF::StringImpl *v13;

  WTF::fastFree(v11, a2);
  if (cf)
    CFRelease(cf);
  if (a11)
    CFRelease(a11);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

BOOL WTF::StringViewHashTranslator::equal(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(unsigned __int8 **)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v6 = 0;
    v7 = 0x100000000;
  }
  return WTF::operator==(v6, v7, a2, a3);
}

uint64_t WTF::StringViewHashTranslator::hash(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  if ((a2 & 0xFF00000000) == 0)
    return WTF::StringHasher::computeHashAndMaskTop8Bits<char16_t,WTF::StringHasher::DefaultConverter>(a1, a2);
  v2 = WTF::SuperFastHash::computeHashImpl<unsigned char,WTF::StringHasher::DefaultConverter>(a1, a2);
  v3 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v4 = (v3 ^ (4 * v3)) + ((v3 ^ (4 * v3)) >> 15);
  v5 = (v4 ^ (v4 << 10)) & 0xFFFFFF;
  if (v5)
    return v5;
  else
    return 0x800000;
}

void WebKit::WebLocalFrameLoaderClient::willInjectUserScript(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v8 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v8 + 1368))(v8) & 1) == 0)
          {
            v9 = *(_QWORD *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v9 + 344) + 240))(*(_QWORD *)(v9 + 344), v9 - 16, *(_QWORD *)(a1 + 16), a2);
              CFRelease(*(CFTypeRef *)(v9 - 8));
            }
          }
        }
      }
    }
  }
}

void API::PageConfiguration::setDelaysWebProcessLaunchUntilFirstLoad(API::PageConfiguration *this, int a2)
{
  NSObject *v4;
  int v5;
  API::PageConfiguration *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 134218240;
    v6 = this;
    v7 = 1024;
    v8 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - PageConfiguration::setDelaysWebProcessLaunchUntilFirstLoad(%d)", (uint8_t *)&v5, 0x12u);
  }
  *(_WORD *)((char *)this + 201) = a2 | 0x100;
}

void IPC::ArgumentCoder<WebKit::UserContentControllerParameters,void>::decode(_BYTE *a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  char v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14[11];
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  v6 = v5;
  IPC::Decoder::decode<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v27);
  IPC::Decoder::decode<WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v24);
  IPC::Decoder::decode<WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v21);
  IPC::Decoder::decode<WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v18);
  IPC::Decoder::decode<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)&v15);
  if (*a2)
  {
    if (v6)
    {
      v14[0] = v4;
      if (v29)
      {
        v14[1] = v27;
        v8 = v28;
        v27 = 0;
        v28 = 0;
        v14[2] = v8;
        if (v26)
        {
          v14[3] = v24;
          v9 = v25;
          v24 = 0;
          v25 = 0;
          v14[4] = v9;
          if (v23)
          {
            v14[5] = v21;
            v10 = v22;
            v21 = 0;
            v22 = 0;
            v14[6] = v10;
            if (v20)
            {
              v14[7] = v18;
              v11 = v19;
              v18 = 0;
              v19 = 0;
              v14[8] = v11;
              if (v17)
              {
                v14[9] = v15;
                v12 = v16;
                v15 = 0;
                v16 = 0;
                v14[10] = v12;
                std::__optional_destruct_base<WebKit::UserContentControllerParameters,false>::__optional_destruct_base[abi:sn180100]<WebKit::UserContentControllerParameters>((uint64_t)a1, v14);
                WebKit::UserContentControllerParameters::~UserContentControllerParameters((WebKit::UserContentControllerParameters *)v14, v13);
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  *a1 = 0;
  a1[88] = 0;
LABEL_9:
  if (v17)
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v7);
  if (v20)
    WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v7);
  if (v23)
    WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v7);
  if (v26)
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v24, v7);
  if (v29)
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v7);
}

void sub_196D3FE18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (a25)
    WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, a2);
  if (*(_BYTE *)(v25 - 104))
    WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25 - 120, a2);
  if (*(_BYTE *)(v25 - 80))
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)(v25 - 96), a2);
  if (*(_BYTE *)(v25 - 56))
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25 - 72, a2);
  _Unwind_Resume(exception_object);
}

void sub_196D3FE74()
{
  JUMPOUT(0x196D3FE5CLL);
}

void WebKit::UserContentControllerParameters::~UserContentControllerParameters(WebKit::UserContentControllerParameters *this, WTF::StringImpl *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, a2);
  WTF::Vector<WebKit::WebScriptMessageHandlerData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, v3);
  WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v4);
  WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)this + 6, v5);
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::RegistrableDomain>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, v6);
}

unint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196D3FF18(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196D3FF88(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13[15];
  char v14;
  uint64_t v15;
  uint64_t v16;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  v6 = result;
  v15 = 0;
  v16 = 0;
  if (result >= 0x2222)
  {
    while (1)
    {
      IPC::Decoder::decode<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>(a1, v13);
      if (!v14)
        break;
      if (HIDWORD(v16) == (_DWORD)v16)
      {
        WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>::pair[abi:sn180100](v15 + 120 * HIDWORD(v16), v13);
        ++HIDWORD(v16);
      }
      std::__optional_destruct_base<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v11);
      if (!--v6)
      {
        WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v15, HIDWORD(v16));
        *(_QWORD *)a2 = v15;
        v12 = v16;
        v15 = 0;
        v16 = 0;
        *(_QWORD *)(a2 + 8) = v12;
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (!result)
    {
      v9 = 0;
      v10 = 0;
LABEL_12:
      v15 = 0;
      v16 = 0;
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v10;
LABEL_13:
      *(_BYTE *)(a2 + 16) = 1;
      return WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
    }
    LODWORD(v16) = 120 * (int)result / 0x78u;
    v15 = WTF::fastMalloc((WTF *)(120 * result));
    while (1)
    {
      IPC::Decoder::decode<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>(a1, v13);
      if (!v14)
        break;
      if (HIDWORD(v16) == (_DWORD)v16)
      {
        WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>::pair[abi:sn180100](v15 + 120 * HIDWORD(v16), v13);
        ++HIDWORD(v16);
      }
      std::__optional_destruct_base<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v8);
      if (!--v6)
      {
        v9 = v15;
        v10 = v16;
        goto LABEL_12;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  std::__optional_destruct_base<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v7);
  return WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
}

void sub_196D40160(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  WTF::StringImpl *v11;

  std::__optional_destruct_base<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 - 48, v11);
  _Unwind_Resume(a1);
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[120];
  char v14;
  uint64_t v15;
  uint64_t v16;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  v6 = result;
  v15 = 0;
  v16 = 0;
  if (result >= 0x2222)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebUserStyleSheetData>(a1, (uint64_t)v13);
      if (!v14)
        break;
      if (HIDWORD(v16) == (_DWORD)v16)
      {
        WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserStyleSheetData>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        WebKit::WebUserStyleSheetData::WebUserStyleSheetData(v15 + 120 * HIDWORD(v16), (uint64_t)v13);
        ++HIDWORD(v16);
      }
      std::__optional_destruct_base<WebKit::WebUserStyleSheetData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v11);
      if (!--v6)
      {
        WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v15, HIDWORD(v16));
        *(_QWORD *)a2 = v15;
        v12 = v16;
        v15 = 0;
        v16 = 0;
        *(_QWORD *)(a2 + 8) = v12;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      v7 = 0;
      v8 = 0;
LABEL_5:
      v15 = 0;
      v16 = 0;
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = v8;
LABEL_6:
      *(_BYTE *)(a2 + 16) = 1;
      return WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
    }
    LODWORD(v16) = 120 * (int)result / 0x78u;
    v15 = WTF::fastMalloc((WTF *)(120 * result));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebUserStyleSheetData>(a1, (uint64_t)v13);
      if (!v14)
        break;
      if (HIDWORD(v16) == (_DWORD)v16)
      {
        WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserStyleSheetData>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        WebKit::WebUserStyleSheetData::WebUserStyleSheetData(v15 + 120 * HIDWORD(v16), (uint64_t)v13);
        ++HIDWORD(v16);
      }
      std::__optional_destruct_base<WebKit::WebUserStyleSheetData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v10);
      if (!--v6)
      {
        v7 = v15;
        v8 = v16;
        goto LABEL_5;
      }
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  std::__optional_destruct_base<WebKit::WebUserStyleSheetData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v9);
  return WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
}

void sub_196D40344(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  std::__optional_destruct_base<WebKit::WebUserStyleSheetData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebKit::WebUserStyleSheetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 - 48, v11);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[120])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196D403C8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::ArgumentCoder<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8[5];
  char v9;
  uint64_t v10[10];
  char v11;

  IPC::Decoder::decode<WebKit::WebCompiledContentRuleListData>(a1, (uint64_t)v10);
  if (!v11)
  {
    *a2 = 0;
    a2[120] = 0;
    return (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebCompiledContentRuleListData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v4);
  }
  result = IPC::Decoder::decode<WTF::URL>(a1, v8);
  v7 = v9;
  if (!v9)
  {
    *a2 = 0;
    goto LABEL_5;
  }
  if (v11)
  {
    std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>::pair[abi:sn180100]<WebKit::WebCompiledContentRuleListData,WTF::URL,0>((uint64_t)a2, v10, v8);
    v7 = 1;
LABEL_5:
    a2[120] = v7;
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v6);
    return (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebCompiledContentRuleListData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v4);
  }
  __break(1u);
  return result;
}

void sub_196D40470(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  std::__optional_destruct_base<WebKit::WebCompiledContentRuleListData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1, v4);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::WebCompiledContentRuleListData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebCompiledContentRuleListData,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 80))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196D404E8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::WebCompiledContentRuleListData,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebKit::WebCompiledContentRuleListData,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  WTF::StringImpl *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[5];
  _BYTE v33[24];
  char v34;
  uint64_t v35;
  char v36;

  IPC::Decoder::decode<WTF::String>(a1, &v35);
  IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(a1, (uint64_t)v33);
  v31 = IPC::Decoder::decode<unsigned long long>(a1);
  v5 = v4;
  v30 = IPC::Decoder::decode<unsigned long long>(a1);
  v7 = v6;
  v29 = IPC::Decoder::decode<unsigned long long>(a1);
  v9 = v8;
  v28 = IPC::Decoder::decode<unsigned long long>(a1);
  v11 = v10;
  v27 = IPC::Decoder::decode<unsigned long long>(a1);
  v13 = v12;
  v26 = IPC::Decoder::decode<unsigned long long>(a1);
  v15 = v14;
  v16 = IPC::Decoder::decode<unsigned long long>(a1);
  v18 = v17;
  v19 = IPC::Decoder::decode<unsigned long long>(a1);
  if (!*a1)
    goto LABEL_18;
  if (!v36 || !v34 || !v5 || !v7 || !v9 || !v11 || !v13 || !v15 || !v18 || !(_BYTE)v20)
  {
    __break(1u);
LABEL_18:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    goto LABEL_13;
  }
  WebKit::WebCompiledContentRuleListData::WebCompiledContentRuleListData(v32, &v35, (uint64_t)v33, v31, v30, v29, v28, v27, v26, v16, v19);
  v21 = v32[0];
  v22 = v32[1];
  v32[0] = 0uLL;
  *(_OWORD *)a2 = v21;
  *(_OWORD *)(a2 + 16) = v22;
  v23 = v32[3];
  *(_OWORD *)(a2 + 32) = v32[2];
  *(_OWORD *)(a2 + 48) = v23;
  *(_OWORD *)(a2 + 64) = v32[4];
  *(_BYTE *)(a2 + 80) = 1;
  WebKit::WebCompiledContentRuleListData::~WebCompiledContentRuleListData((WebKit::WebCompiledContentRuleListData *)v32, v24);
LABEL_13:
  if (v34 && v33[16])
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v33);
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35, v20);
}

void sub_196D406A8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 - 112))
  {
    if (*(_BYTE *)(v2 - 120))
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v2 - 136));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2 - 104, a2);
  _Unwind_Resume(a1);
}

void sub_196D406F4()
{
  JUMPOUT(0x196D406E4);
}

void WebKit::WebCompiledContentRuleListData::~WebCompiledContentRuleListData(WebKit::WebCompiledContentRuleListData *this, WTF::StringImpl *a2)
{
  unsigned int *v3;
  WTF::StringImpl *v4;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

uint64_t WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, const void **a2)
{
  unsigned int v4;
  uint64_t v5;

  if (a2 != (const void **)a1)
  {
    v4 = *((_DWORD *)a2 + 3);
    if (*(_DWORD *)(a1 + 12) > v4)
    {
      *(_DWORD *)(a1 + 12) = v4;
    }
    else
    {
      if (v4 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<std::array<unsigned char,20ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, a2);
        WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, *((unsigned int *)a2 + 3));
      }
      v4 = *(_DWORD *)(a1 + 12);
    }
    if (v4)
    {
      memmove(*(void **)a1, *a2, 4 * v4);
      v5 = *(unsigned int *)(a1 + 12);
    }
    else
    {
      v5 = 0;
    }
    memcpy((void *)(*(_QWORD *)a1 + 4 * v5), (char *)*a2 + 4 * v5, (_BYTE *)*a2 + 4 * *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + 4 * v5));
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  }
  return a1;
}

void **WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  int v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *result;
      v5 = *((unsigned int *)result + 3);
      v6 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *v3 = v6;
      result = (void **)memcpy(v6, v4, 4 * v5);
      if (v4)
      {
        if (*v3 == v4)
        {
          *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setTelephoneNumberParsingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setShouldSuppressTextInputFromEditingDuringProvisionalNavigation(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setShouldIgnoreMetaViewport(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setShouldAllowUserInstalledFonts(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setNeedsSiteSpecificQuirks(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setMediaSourceEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setMediaDevicesEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setDiagnosticLoggingEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setApplePayCapabilityDisclosureAllowed(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setJavaScriptEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setJavaScriptCanOpenWindowsAutomatically(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

_QWORD *WebKit::WebPreferences::setFullScreenEnabled(WebKit::WebPreferences *this, const BOOL *a2)
{
  WebKit::WebPreferencesStore *v4;
  _QWORD *result;

  v4 = (WebKit::WebPreferences *)((char *)this + 40);
  {
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = (_QWORD *)WebKit::WebPreferencesStore::setBoolValueForKey(v4, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key, *(unsigned __int8 *)a2);
  if ((_DWORD)result)
  {
    {
      WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    return WebKit::WebPreferences::updateBoolValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key, (const WTF::StringImpl *)*(unsigned __int8 *)a2, 0);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::getResourceLoadStatisticsDataSummary(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 && *(_BYTE *)(v3 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(a1, v7, a3, 0, 0, 1);
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0;
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v5 + 16))(v5, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v6);
  }
}

void sub_196D41540(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

WTF **WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(uint64_t a1, uint64_t *a2)
{
  WTF *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;

  v4 = (WTF *)WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v4 = 1;
  v5 = *a2;
  *a2 = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 1) = v5;
  v22 = v4;
  v19 = a1;
  CFRetain(*(CFTypeRef *)(a1 + 8));
  ++*(_DWORD *)v4;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34DF9C8;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = v4;
  v20 = 0;
  v21 = 0;
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = v6;
  WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(&v21);
  v8 = v20;
  v20 = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v19);
  if (HIDWORD(v20))
  {
    v10 = v19;
    v11 = v19 + 8 * HIDWORD(v20);
    do
    {
      v12 = *(_QWORD *)v10;
      CFRetain(*(CFTypeRef *)(*(_QWORD *)v10 + 8));
      do
        v13 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v13 + 1, (unsigned int *)v7));
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = off_1E34DFA18;
      v14[1] = v7;
      v18 = v14;
      WebKit::WebProcessPool::sendResourceLoadStatisticsDataImmediately(v12, (uint64_t *)&v18);
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
      CFRelease(*(CFTypeRef *)(v12 + 8));
      v10 += 8;
    }
    while (v10 != v11);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v9);
  do
  {
    v15 = __ldaxr((unsigned int *)v7);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)v7));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)v7);
    v19 = v7;
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v19);
  }
  return WTF::Ref<WebKit::WebsiteDataStore::getResourceLoadStatisticsDataSummary(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::LocalCallbackAggregator,WTF::RawPtrTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>,WTF::DefaultRefDerefTraits<WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &>>::~Ref(&v22);
}

uint64_t WebKit::WebProcessPool::sendResourceLoadStatisticsDataImmediately(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25[2];
  char v26;
  IPC::Encoder *v27;

  result = WTF::fastMalloc((WTF *)0x10);
  v5 = (unsigned int *)result;
  *(_DWORD *)result = 1;
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v6;
  v7 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)(a1 + 72);
    v9 = &v8[v7];
    do
    {
      v10 = *v8;
      v11 = (unsigned int *)(*v8 + 16);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v13 = *(_QWORD *)(v10 + 552);
      if (v13 && *(_DWORD *)(v13 - 12) && (!*(_BYTE *)(v10 + 389) || *(_QWORD *)(v10 + 224)))
      {
        do
          v14 = __ldaxr(v5);
        while (__stlxr(v14 + 1, v5));
        v15 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v15 = 2623;
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 528) = v15 + 16;
        *(_QWORD *)(v15 + 536) = v15 + 16;
        *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v15 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
        v27 = (IPC::Encoder *)v15;
        v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v16 = off_1E34D7AD8;
        v16[1] = v5;
        v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v25[0] = (uint64_t)v16;
        v25[1] = v17;
        v26 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v10, &v27, 0, (uint64_t)v25, 1);
        if (v26)
        {
          v19 = v25[0];
          v25[0] = 0;
          if (v19)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        v20 = v27;
        v27 = 0;
        if (v20)
        {
          IPC::Encoder::~Encoder(v20, v18);
          WTF::fastFree(v21, v22);
        }
      }
      result = (uint64_t)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
      ++v8;
    }
    while (v8 != v9);
  }
  do
  {
    v23 = __ldaxr(v5);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v5));
  if (!v24)
  {
    atomic_store(1u, v5);
    v25[0] = (uint64_t)v5;
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v25);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::ITPThirdPartyData>::destruct(*(WTF::StringImpl **)a1, (void *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebKit::WebLocalFrameLoaderClient::broadcastMainFrameURLChangeToOtherProcesses(WebKit::WebLocalFrameLoaderClient *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v15;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v7 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v7 + 1368))(v7) & 1) == 0)
          {
            v8 = *(_QWORD *)(v7[2] + 8);
            if (v8)
            {
              CFRetain(*(CFTypeRef *)(v8 - 8));
              v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 16) + 56))(v8 + 16);
              v10 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v10 = 1841;
              *(_QWORD *)(v10 + 8) = v9;
              *(_QWORD *)(v10 + 528) = v10 + 16;
              *(_QWORD *)(v10 + 536) = v10 + 16;
              *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v10 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
              v15 = (IPC::Encoder *)v10;
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)a2);
              (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v8 + 16) + 32))(v8 + 16, &v15, 0);
              v12 = v15;
              v15 = 0;
              if (v12)
              {
                IPC::Encoder::~Encoder(v12, v11);
                WTF::fastFree(v13, v14);
              }
              CFRelease(*(CFTypeRef *)(v8 - 8));
            }
          }
        }
      }
    }
  }
}

void sub_196D41A8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebPageProxy *WebKit::WebPageProxy::setUnderPageBackgroundColorOverride(WebKit::WebPageProxy *this, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void *v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  BOOL v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;

  v2 = (uint64_t)this;
  v3 = *a2;
  v4 = *(_QWORD *)(*((_QWORD *)this + 4) + 1784);
  if ((*a2 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) != 0)
    {
      v28 = 0;
      v29 = 0;
      v34 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
      v33 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      do
      {
        if (*((float *)&v34 + v29) != *((float *)&v33 + v29))
          break;
        v28 = v29++ > 2;
      }
      while (v29 != 4);
      if (v28 && HIBYTE(v3) == HIBYTE(v4) && BYTE6(v3) == BYTE6(v4))
        return this;
    }
  }
  else if (v3 == v4 && (v4 & 0x8000000000000) == 0)
  {
    return this;
  }
  WebKit::WebPageProxy::underPageBackgroundColor(this, (uint64_t *)&v32);
  WebCore::Color::Color();
  WebCore::Color::operator=();
  WebKit::WebPageProxy::underPageBackgroundColor((WebKit::WebPageProxy *)v2, (uint64_t *)&v30);
  if ((v32 & 0x8000000000000) != 0)
  {
    if ((v30 & 0x8000000000000) == 0)
    {
      WebCore::Color::operator=();
      goto LABEL_28;
    }
    v9 = 0;
    v10 = 0;
    v34 = *(_OWORD *)((v32 & 0xFFFFFFFFFFFFLL) + 4);
    v33 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFLL) + 4);
    do
    {
      if (*((float *)&v34 + v10) != *((float *)&v33 + v10))
        break;
      v9 = v10++ > 2;
    }
    while (v10 != 4);
    v12 = ((v30 ^ v32) & 0xFE000000000000) == 0 && HIBYTE(v32) == HIBYTE(v30);
    v7 = v9 && v12;
    goto LABEL_25;
  }
  v7 = 0;
  if ((v30 & 0x8000000000000) != 0 || (_DWORD)v32 != (_DWORD)v30)
  {
LABEL_25:
    if ((v30 & 0x8000000000000) != 0)
    {
      v21 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v6);
      }
    }
    WebCore::Color::operator=();
    if (v7)
      goto LABEL_27;
LABEL_28:
    v14 = *(_QWORD *)(v2 + 40);
    if (v14)
      v15 = *(_QWORD *)(v14 + 8);
    else
      v15 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 1584))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 1328))(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 1592))(v15);
    WebCore::Color::operator=();
    v16 = *(_QWORD *)(v2 + 40);
    if (v16)
      v17 = *(_QWORD *)(v16 + 8);
    else
      v17 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1584))(v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1336))(v17);
    this = (WebKit::WebPageProxy *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 1592))(v17);
    goto LABEL_35;
  }
  v8 = (v30 ^ v32) & 0xFE000000000000;
  WebCore::Color::operator=();
  if (v8)
    goto LABEL_28;
LABEL_27:
  this = (WebKit::WebPageProxy *)WebCore::Color::operator=();
LABEL_35:
  if (!*(_BYTE *)(v2 + 704))
  {
    *(_BYTE *)(v2 + 704) = 1;
    WTF::RunLoop::main(this);
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v2 + 24), v2 + 16);
    v18 = *(unsigned int **)(v2 + 24);
    if (v18)
    {
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v20 = &off_1E34D46B8;
    v20[1] = v2;
    v20[2] = v18;
    *(_QWORD *)&v34 = v20;
    WTF::RunLoop::dispatch();
    this = (WebKit::WebPageProxy *)v34;
    *(_QWORD *)&v34 = 0;
    if (this)
      this = (WebKit::WebPageProxy *)(*(uint64_t (**)(WebKit::WebPageProxy *))(*(_QWORD *)this + 8))(this);
  }
  if ((v31 & 0x8000000000000) != 0)
  {
    this = (WebKit::WebPageProxy *)(v31 & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr((unsigned int *)this);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)this));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)this);
      this = (WebKit::WebPageProxy *)WTF::fastFree(this, v13);
    }
  }
  if ((v32 & 0x8000000000000) != 0)
  {
    this = (WebKit::WebPageProxy *)(v32 & 0xFFFFFFFFFFFFLL);
    do
    {
      v26 = __ldaxr((unsigned int *)this);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)this));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)this);
      return (WebKit::WebPageProxy *)WTF::fastFree(this, v13);
    }
  }
  return this;
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillChangeDocument(WebKit::WebLocalFrameLoaderClient *this, const WTF::URL *a2, const WTF::URL *a3)
{
  WebKit::WebFrame *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::URL *v11;
  WebKit::WebProcess *v12;
  WebKit::WebProcess *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16[2];

  v6 = (WebKit::WebFrame *)*((_QWORD *)this + 2);
  v7 = *((_QWORD *)v6 + 3);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0 || *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8) != v8)
  {
    v9 = WebKit::WebFrame::page(v6);
    if (v9)
    {
      v10 = v9;
      CFRetain(*(CFTypeRef *)(v9 + 8));
      if (!*((_BYTE *)this + 80))
        goto LABEL_6;
      v12 = (WebKit::WebProcess *)WebCore::areRegistrableDomainsEqual(a2, a3, v11);
      if ((v12 & 1) != 0)
        goto LABEL_6;
      v13 = WebKit::WebProcess::singleton(v12);
      v14 = WebKit::WebProcess::ensureNetworkProcessConnection(v13);
      if (*((_BYTE *)this + 80))
      {
        v15 = *(_QWORD *)(v14 + 24);
        v16[0] = (uint64_t *)((char *)this + 56);
        v16[1] = (uint64_t *)((char *)this + 72);
        IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RemoveStorageAccessForFrame>(v15, v16);
        if (*((_BYTE *)this + 80))
          *((_BYTE *)this + 80) = 0;
LABEL_6:
        CFRelease(*(CFTypeRef *)(v10 + 8));
        return;
      }
      __break(1u);
    }
  }
}

void sub_196D41FBC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::Close>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2135;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t IPC::Decoder::decode<WebCore::StoredCredentialsPolicy>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebCore::StoredCredentialsPolicy,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

_QWORD *WebKit::WebMediaStrategy::createNowPlayingManager@<X0>(WebKit::WebMediaStrategy *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v3;
  _QWORD *result;
  WebCore::NowPlayingManager *v5;

  v3 = atomic_load((unsigned __int8 *)this + 9);
  if ((v3 & 1) == 0)
    return (_QWORD *)WebCore::MediaStrategy::createNowPlayingManager(this);
  v5 = (WebCore::NowPlayingManager *)WTF::fastMalloc((WTF *)0xB0);
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  result = (_QWORD *)WebCore::NowPlayingManager::NowPlayingManager(v5);
  *result = off_1E34E8930;
  *a2 = result;
  return result;
}

void sub_196D42308(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebSWClientConnection::didReceiveMessage(WebKit::WebSWClientConnection *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;
  char v12;

  ++*((_DWORD *)this + 2);
  switch(*((_WORD *)a3 + 25))
  {
    case 0xA73:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if ((_BYTE)a2)
        WebCore::SWClientConnection::fireUpdateFoundEvent();
      break;
    case 0xA74:
      IPC::handleMessageAsync<Messages::WebSWClientConnection::FocusServiceWorkerClient,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)>(a2, (uint64_t *)a3, this);
      break;
    case 0xA75:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ExceptionData>>((uint64_t)&v5, (uint64_t *)a3);
      if (v8)
      {
        WebCore::SWClientConnection::jobRejectedInServer();
        if (v8)
        {
          v4 = v7;
          v7 = 0;
          if (v4)
            goto LABEL_9;
        }
      }
      break;
    case 0xA76:
      IPC::handleMessage<Messages::WebSWClientConnection::NotifyClientsOfControllerChange,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::HashSet<WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits> const&,std::optional<WebCore::ServiceWorkerData> &&)>((uint64_t *)a3);
      break;
    case 0xA77:
      IPC::handleMessage<Messages::WebSWClientConnection::NotifyRecordResponseBodyChunk,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::SharedBufferReference &&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0xA78:
      IPC::handleMessage<Messages::WebSWClientConnection::NotifyRecordResponseBodyEnd,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ResourceError &&)>((uint64_t *)a3, (uint64_t)this);
      break;
    case 0xA79:
      IPC::handleMessage<Messages::WebSWClientConnection::PostMessageToServiceWorkerClient,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WebCore::ProcessQualified<WTF::UUID>,WebCore::MessageWithMessagePorts &&,WebCore::ServiceWorkerData &&,WTF::String &&)>((uint64_t *)a3);
      break;
    case 0xA7A:
      IPC::handleMessage<Messages::WebSWClientConnection::RegistrationJobResolvedInServer,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationData &&,WebCore::ShouldNotifyWhenResolved)>((uint64_t *)a3);
      break;
    case 0xA7B:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WallTime>>((uint64_t *)a3, (uint64_t)&v5);
      if ((_BYTE)v7)
        WebCore::SWClientConnection::setRegistrationLastUpdateTime();
      break;
    case 0xA7C:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerUpdateViaCache>>((uint64_t *)a3, (uint64_t)&v5);
      if ((_BYTE)v7)
        WebCore::SWClientConnection::setRegistrationUpdateViaCache();
      break;
    case 0xA7D:
      WebKit::WebSWClientConnection::setSWOriginTableIsImported(this);
      break;
    case 0xA7E:
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)&v5);
      if ((_BYTE)v7)
      {
        WebKit::WebSWClientConnection::setSWOriginTableSharedMemory((uint64_t)this);
        if ((_BYTE)v7)
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v5);
      }
      break;
    case 0xA7F:
      IPC::handleMessageAsync<Messages::WebSWClientConnection::SetServiceWorkerClientIsControlled,WebKit::WebSWClientConnection,WebKit::WebSWClientConnection,void ()(WebCore::ProcessQualified<WTF::UUID>,WebCore::ServiceWorkerRegistrationData &&,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, (uint64_t)this);
      break;
    case 0xA80:
      IPC::handleMessage<Messages::WebSWClientConnection::StartScriptFetchForServer,WebKit::WebSWClientConnection,WebCore::SWClientConnection,void ()(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerJobIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationKey &&,WebCore::FetchOptionsCache)>((uint64_t *)a3);
      break;
    case 0xA81:
      IPC::Decoder::decode<std::tuple<WebCore::BackgroundFetchInformation>>((uint64_t)&v5, (uint64_t *)a3);
      if (v10)
      {
        WebCore::SWClientConnection::updateBackgroundFetchRegistration();
        if (v10)
        {
          v4 = v6;
          v6 = 0;
          if (v4)
            goto LABEL_9;
        }
      }
      break;
    case 0xA82:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerRegistrationState,std::optional<WebCore::ServiceWorkerData>>>((uint64_t *)a3, &v5);
      if (v12)
      {
        WebCore::SWClientConnection::updateRegistrationState();
        if (v12)
        {
          if (v11)
          {
            v4 = v9;
            v9 = 0;
            if (v4)
            {
LABEL_9:
              if (*(_DWORD *)v4 == 2)
                WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v4 -= 2;
            }
          }
        }
      }
      break;
    case 0xA83:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WebCore::ServiceWorkerState>>((uint64_t *)a3, (uint64_t)&v5);
      if ((_BYTE)v7)
        WebCore::SWClientConnection::updateWorkerState();
      break;
    default:
      break;
  }
  if (*((_DWORD *)this + 2) == 1)
    (*(void (**)(WebKit::WebSWClientConnection *, unsigned __int8 **))(*(_QWORD *)this + 8))(this, a2);
  else
    --*((_DWORD *)this + 2);
}

_QWORD *WebKit::WebSWClientConnection::setSWOriginTableIsImported(_QWORD *this)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = this + 8;
  v1 = this[8];
  *(_BYTE *)(this[7] + 24) = 1;
  if (v1 != this[9])
  {
    v3 = this;
    do
    {
      WTF::Deque<WTF::Function<void ()(void)>,0ul>::takeFirst(&v5, v2);
      v4 = v5;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    while (v3[8] != v3[9]);
  }
  return this;
}

_DWORD *WebKit::PlatformCAAnimationRemote::setTimingFunction(uint64_t a1, void (***a2)(uint64_t *__return_ptr, _QWORD))
{
  _DWORD *result;
  uint64_t v4;

  (**a2)(&v4, a2);
  result = *(_DWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebKit::get_TCC_kTCCServiceWebKitIntelligentTrackingPrevention(WebKit *this)
{
  if (qword_1ECE72158 != -1)
    dispatch_once(&qword_1ECE72158, &__block_literal_global_10_1);
  return qword_1ECE72150;
}

void WebKit::WebLocalFrameLoaderClient::dispatchGlobalObjectAvailable(WebKit::WebLocalFrameLoaderClient *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int **v11;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v8 = *(_QWORD **)(*(_QWORD *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(_QWORD *))(*v8 + 1368))(v8) & 1) == 0)
          {
            v9 = *(_QWORD *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              v10 = *(unsigned int ***)(v9 + 616);
              if (v10)
              {
                v11 = v10 + 2;
                ++*((_DWORD *)v10 + 4);
                WebKit::WebExtensionControllerProxy::globalObjectIsAvailableForFrame((WebKit::WebExtensionControllerProxy *)v10, (WebKit::WebPage *)(v9 - 16), *((WebKit::WebFrame **)this + 2), a2);
                WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v11);
              }
              (*(void (**)(_QWORD, uint64_t, _QWORD, WebCore::DOMWrapperWorld *))(**(_QWORD **)(v9 + 344)
                                                                                          + 200))(*(_QWORD *)(v9 + 344), v9 - 16, *((_QWORD *)this + 2), a2);
              CFRelease(*(CFTypeRef *)(v9 - 8));
            }
          }
        }
      }
    }
  }
}

uint64_t WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 27))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)a2;
      v8 = 32 * v6;
      do
      {
        v5 = WebCore::MimeClassInfo::MimeClassInfo(v5, v7) + 4;
        v7 += 32;
        v8 -= 32;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::MimeClassInfo::MimeClassInfo(_QWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *a1 = v3;
  v4 = *(_DWORD **)(a2 + 8);
  if (v4)
    *v4 += 2;
  a1[1] = v4;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 2), a2 + 16);
  return a1;
}

void sub_196D428F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v4 = v2[1];
  v2[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebProcessPool::registerNotificationObservers(void)::$_0,void,BOOL>::call(IPC::Encoder *result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  char v15;
  IPC::Encoder *v16;

  v2 = *((_QWORD *)result + 1);
  v3 = *(unsigned int *)(v2 + 84);
  if ((_DWORD)v3)
  {
    v5 = *(uint64_t **)(v2 + 72);
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      v8 = *(_QWORD *)(*v5 + 136);
      if (v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(v7 + 144))
      {
        v9 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v9 = 2602;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 528) = v9 + 16;
        *(_QWORD *)(v9 + 536) = v9 + 16;
        *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v9 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
        v16 = (IPC::Encoder *)v9;
        *IPC::Encoder::grow((IPC::Encoder *)v9, 1uLL, 1) = a2;
        LOBYTE(v14) = 0;
        v15 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v16, 0, (uint64_t)&v14, 1);
        if (v15)
        {
          v11 = v14;
          v14 = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        }
        result = v16;
        v16 = 0;
        if (result)
        {
          IPC::Encoder::~Encoder(result, v10);
          result = (IPC::Encoder *)WTF::fastFree(v12, v13);
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void sub_196D42A64(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a13 && a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_196D42CCC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebPageProxy::close(unsigned int *this)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  CFTypeRef *v16;
  CFTypeRef *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef *v22;
  WebKit::WebPageProxy *v23;
  CFTypeRef *v24;
  void *v25;
  Inspector::FrontendRouter **v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::RunLoop *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  const char *v62;
  WTF *v63;
  uint64_t v64;
  void *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  const WTF::StringImpl *v69;
  uint64_t v70;
  _BYTE v71[22];
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  __int16 v78;
  CFTypeRef cf;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 729))
  {
    v1 = (uint64_t)this;
    v2 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(v1 + 32);
      v5 = *(_QWORD *)(v4 + 744);
      v6 = *(_QWORD *)(v4 + 1896);
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 136);
      if (v7)
        LODWORD(v7) = *(_DWORD *)(v7 + 108);
      *(_DWORD *)v71 = 134218752;
      *(_QWORD *)&v71[4] = v1;
      *(_WORD *)&v71[12] = 2048;
      *(_QWORD *)&v71[14] = v5;
      v72 = 2048;
      v73 = v6;
      v74 = 1024;
      v75 = v7;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::close:", v71, 0x26u);
    }
    *(_BYTE *)(v1 + 729) = 1;
    v8 = *(_QWORD *)(v1 + 32);
    v9 = *(_QWORD *)(v8 + 1968);
    if (v9)
    {
      *(_QWORD *)(v8 + 1968) = 0;
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SleepDisabler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SleepDisabler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SleepDisablerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v9, v3);
    }
    *(_QWORD *)v71 = 0;
    *(_QWORD *)&v71[8] = 0;
    WTF::URL::invalidate((WTF::URL *)&v71[8]);
    v76 = 0;
    v77 = 0;
    v78 = 3;
    cf = 0;
    v80 = 1;
    WebKit::WebPageProxy::reportPageLoadResult((WebCore::DiagnosticLoggingKeys *)v1, (const WebCore::ResourceError *)v71);
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    v12 = v76;
    v76 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *(WTF::StringImpl **)&v71[8];
    *(_QWORD *)&v71[8] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *(WTF::StringImpl **)v71;
    *(_QWORD *)v71 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *(_DWORD **)(v1 + 472);
    if (v15)
    {
      ++v15[2];
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 32))(v15);
      if (v15[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      else
        --v15[2];
    }
    if (*(_BYTE *)(v1 + 826))
    {
      v16 = (CFTypeRef *)*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(v1 + 48) + 24))
                         + 40);
      if (v16)
      {
        CFRetain(v16[1]);
        WebKit::WebAutomationSession::willClosePage((WebKit::WebAutomationSession *)v16, (const WebKit::WebPageProxy *)v1);
        CFRelease(v16[1]);
      }
    }
    v17 = *(CFTypeRef **)(v1 + 240);
    if (v17)
    {
      CFRetain(v17[1]);
      WebKit::WebExtensionController::removePage((WebKit::WebExtensionController *)v17, (WebKit::WebPageProxy *)v1);
      CFRelease(v17[1]);
    }
    v18 = *(_QWORD *)(v1 + 248);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        CFRetain(*(CFTypeRef *)(v19 - 8));
        WebKit::WebExtensionController::removePage((WebKit::WebExtensionController *)(v19 - 16), (WebKit::WebPageProxy *)v1);
        CFRelease(*(CFTypeRef *)(v19 - 8));
      }
    }
    v20 = *(_QWORD *)(v1 + 1120);
    *(_QWORD *)(v1 + 1120) = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = *(_QWORD *)(v1 + 1448);
    *(_QWORD *)(v1 + 1448) = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = *(CFTypeRef **)(v1 + 352);
    if (v22)
    {
      CFRetain(v22[1]);
      WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow((WebKit::WebInspectorUIProxy *)v22, v23);
      WebKit::WebInspectorUIProxy::reset((uint64_t)v22);
      CFRelease(v22[1]);
    }
    else
    {
      WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow(0, v10);
      WebKit::WebInspectorUIProxy::reset(0);
    }
    v24 = *(CFTypeRef **)(v1 + 592);
    CFRetain(v24[1]);
    WebKit::WebBackForwardList::pageClosed((WebKit::WebBackForwardList *)v24, v25);
    CFRelease(v24[1]);
    v26 = *(Inspector::FrontendRouter ***)(v1 + 1072);
    WebKit::WebPageInspectorController::disconnectAllFrontends(v26);
    Inspector::AgentRegistry::discardValues((Inspector::AgentRegistry *)(v26 + 2));
    v28 = *(_QWORD *)(v1 + 1080);
    *(_QWORD *)(v1 + 1080) = 0;
    if (v28)
    {
      *(_QWORD *)(v28 + 40) = 0;
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v28 + 8), v27);
    }
    v29 = *(_QWORD *)(v1 + 40);
    if (v29)
      v30 = *(_QWORD *)(v29 + 8);
    else
      v30 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 1584))(v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 160))(v30);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 1592))(v30);
    WebKit::WebPageProxy::disconnectFramesFromPage((WebKit::WebPageProxy *)v1, v31);
    v32 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v33 = off_1E34D43D8;
    v34 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 72) = v33;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = *(_QWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 64) = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v36 = &unk_1E34D4040;
    v37 = *(_QWORD *)(v1 + 88);
    *(_QWORD *)(v1 + 88) = v36;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v38 = off_1E34D4068;
    v39 = *(_QWORD *)(v1 + 96);
    *(_QWORD *)(v1 + 96) = v38;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v40 = off_1E34DA170;
    v41 = *(_QWORD *)(v1 + 104);
    *(_QWORD *)(v1 + 104) = v40;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v42 = off_1E34D4090;
    v43 = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 112) = v42;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    v44 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v44 = off_1E34D40D8;
    v45 = *(_QWORD *)(v1 + 120);
    *(_QWORD *)(v1 + 120) = v44;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    v46 = *(_QWORD *)(v1 + 128);
    *(_QWORD *)(v1 + 128) = 0;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    v47 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v47 = &off_1E34D4108;
    v48 = *(_QWORD *)(v1 + 368);
    *(_QWORD *)(v1 + 368) = v47;
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
    WebKit::WebPageProxy::resetState(v1, 0);
    v49 = *(_QWORD *)(v1 + 208);
    v50 = (unsigned int *)(v49 + 16);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 + 1, v50));
    v52 = *(_QWORD *)(v49 + 512);
    if (v52)
    {
      v53 = *(_QWORD *)(v52 + 8);
      if (v53)
        v54 = v53 - 16;
      else
        v54 = 0;
    }
    else
    {
      v54 = 0;
    }
    CFRetain(*(CFTypeRef *)(v54 + 8));
    v55 = (WTF::RunLoop *)WebKit::WebBackForwardCache::removeEntriesForPage(*(WebKit::WebBackForwardCache **)(v54 + 760), (WebKit::WebPageProxy *)v1);
    WTF::RunLoop::current(v55);
    v56 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 1896);
    do
      v57 = __ldaxr(v50);
    while (__stlxr(v57 + 1, v50));
    v58 = *(_QWORD *)(v49 + 1016);
    if (v58)
    {
      v59 = *(_QWORD **)v58;
      ++*(_QWORD *)(v58 + 8);
      if (v59)
      {
        if (*v59)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v59 + 16))(*v59, 1);
      }
    }
    v60 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v60 = &off_1E34D4640;
    v60[1] = v56;
    v60[2] = v49;
    v60[3] = v58;
    *(_QWORD *)v71 = v60;
    WTF::RunLoop::dispatch();
    v61 = *(_QWORD *)v71;
    *(_QWORD *)v71 = 0;
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
    WebKit::WebProcessProxy::removeWebPage(v49, (WebKit::WebPageProxy *)v1, 1);
    WebKit::WebPageProxy::removeAllMessageReceivers((WebKit::WebPageProxy *)v1);
    *(_QWORD *)v71 = "WebNotificationManagerProxy";
    *(_QWORD *)&v71[8] = 28;
    v62 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v54 + 456), (WTF::ASCIILiteralHash *)v71);
    if (v62)
      v63 = (WTF *)(v62 - 16);
    else
      v63 = 0;
    *(_QWORD *)v71 = 0;
    *(_QWORD *)&v71[8] = 0;
    WebKit::WebNotificationManagerProxy::clearNotifications(v63, v1, (uint64_t)v71);
    v64 = *(_QWORD *)(v1 + 48);
    CFRetain(*(CFTypeRef *)(v64 + 8));
    v66 = *(unsigned int **)(v64 + 136);
    *(_QWORD *)(v64 + 136) = 0;
    if (v66)
    {
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        atomic_store(1u, v66);
        WTF::fastFree((WTF *)v66, v65);
      }
    }
    CFRelease(*(CFTypeRef *)(v64 + 8));
    WebKit::WebPageProxy::ProcessActivityState::reset((WebKit::ProcessThrottlerActivity **)(v1 + 528));
    WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(*(_QWORD *)(v1 + 32) + 56));
    WebKit::WebPageProxy::stopAllURLSchemeTasks((WebKit::WebPageProxy *)v1, 0);
    WebKit::WebPageProxy::updatePlayingMediaDidChange((WebKit::WebPageProxy *)v1, 0, 0);
    PAL::HysteresisActivity::cancel((PAL::HysteresisActivity *)(v1 + 1392));
    v70 = *(_QWORD *)(v1 + 224);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v70 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v69))WebKit::BrowsingContextGroup::removePage(*(WebKit::BrowsingContextGroup **)(v1 + 1344), (WebKit::WebPageProxy *)v1);
    CFRelease(*(CFTypeRef *)(v54 + 8));
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v50);
  }
  return this;
}

void WebKit::NavigationState::NavigationClient::~NavigationClient(WebKit::NavigationState::NavigationClient *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

WTF *WebKit::WebNotificationManagerProxy::clearNotifications(WTF *result, uint64_t a2, uint64_t a3)
{
  WTF *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  uint64_t i;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v36[2];
  WTF *v37;
  uint64_t v38;

  v4 = result;
  v37 = 0;
  v38 = 0;
  v6 = (uint64_t *)((char *)result + 40);
  v5 = *((_QWORD *)result + 5);
  if (v5 && (v7 = *(unsigned int *)(v5 - 12), (_DWORD)v7))
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v38) = v7;
    v37 = v8;
    if (!a2)
      goto LABEL_5;
  }
  else
  {
    v8 = 0;
    if (!a2)
    {
LABEL_5:
      v34 = 0;
      goto LABEL_8;
    }
  }
  v34 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 744);
LABEL_8:
  v10 = (uint64_t *)((char *)v4 + 48);
  v9 = *((_QWORD *)v4 + 6);
  if (v9)
  {
    v11 = *(unsigned int *)(v9 - 4);
    v12 = (_QWORD *)(v9 + 32 * v11);
    if (*(_DWORD *)(v9 - 12))
    {
      v13 = (_QWORD *)*((_QWORD *)v4 + 6);
      if ((_DWORD)v11)
      {
        v14 = 32 * v11;
        v13 = (_QWORD *)*((_QWORD *)v4 + 6);
        while (*v13 <= 1uLL)
        {
          v13 += 4;
          v14 -= 32;
          if (!v14)
          {
            v13 = v12;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    v13 = (_QWORD *)(v9 + 32 * v11);
  }
  else
  {
    v13 = 0;
    v11 = 0;
  }
  v12 = (_QWORD *)(v9 + 32 * v11);
  if (!v9)
  {
    v15 = 0;
    goto LABEL_20;
  }
LABEL_15:
  v15 = (_QWORD *)(v9 + 32 * *(unsigned int *)(v9 - 4));
LABEL_20:
  if (v15 == v13)
    goto LABEL_59;
  v33 = v4;
  v16 = 0;
  v17 = *(_DWORD *)(a3 + 12);
  do
  {
    v18 = v13[2];
    CFRetain(*(CFTypeRef *)(v18 + 8));
    if (!v17)
      goto LABEL_32;
    v19 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD **)a3;
      while (v20[1] != *(_QWORD *)(v18 + 184) || *v20 != *(_QWORD *)(v18 + 176))
      {
        v20 += 2;
        if (!--v19)
        {
          if (v18)
            goto LABEL_37;
          goto LABEL_38;
        }
      }
LABEL_32:
      if (v34 == *(_QWORD *)(v18 + 280))
      {
        v22 = *(_QWORD *)(v18 + 16);
        v36[0] = v22;
        if (v16 == (_DWORD)v38)
        {
          v23 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, v16 + 1, (unint64_t)v36);
          v24 = HIDWORD(v38);
          v8 = v37;
          *((_QWORD *)v37 + HIDWORD(v38)) = *v23;
        }
        else
        {
          *((_QWORD *)v8 + v16) = v22;
          v24 = HIDWORD(v38);
        }
        v16 = v24 + 1;
        HIDWORD(v38) = v24 + 1;
      }
    }
LABEL_37:
    CFRelease(*(CFTypeRef *)(v18 + 8));
LABEL_38:
    v25 = v13 + 4;
    v13 = v12;
    if (v25 != v12)
    {
      v13 = v25;
      while (*v13 <= 1uLL)
      {
        v13 += 4;
        if (v13 == v12)
        {
          v13 = v12;
          break;
        }
      }
    }
  }
  while (v13 != v15);
  v4 = v33;
  if (v16)
  {
    for (i = 8 * v16; i; i -= 8)
    {
      v27 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v6, v8);
      if (*v6)
      {
        if ((_QWORD *)(*v6 + 32 * *(unsigned int *)(*v6 - 4)) != v27)
          goto LABEL_48;
      }
      else if (v27)
      {
LABEL_48:
        v28 = v27[2];
        v29 = v27[3];
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UUID,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UUID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebNotificationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v6, v27);
        goto LABEL_51;
      }
      v28 = 0;
      v29 = 0;
LABEL_51:
      v36[0] = v28;
      v36[1] = v29;
      v30 = (_QWORD *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v10, v36);
      if (*v10)
      {
        v31 = *v10 + 32 * *(unsigned int *)(*v10 - 4);
        if ((_QWORD *)v31 != v30)
          goto LABEL_56;
      }
      else if (v30)
      {
        v31 = 0;
LABEL_56:
        if ((_QWORD *)v31 != v30)
          WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(v10, v30);
      }
      v8 = (WTF *)((char *)v8 + 8);
    }
  }
LABEL_59:
  (*(void (**)(_QWORD, WTF **))(**((_QWORD **)v4 + 4) + 40))(*((_QWORD *)v4 + 4), &v37);
  result = v37;
  if (v37)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    return (WTF *)WTF::fastFree(result, v32);
  }
  return result;
}

void WebKit::WebPageInspectorController::disconnectAllFrontends(Inspector::FrontendRouter **this)
{
  uint64_t v2;
  uint64_t v3;
  Inspector::RemoteControllableTarget *v4;

  if (*((_DWORD *)*this + 5))
  {
    Inspector::AgentRegistry::willDestroyFrontendAndBackend();
    Inspector::FrontendRouter::disconnectAllFrontends(*this);
    v2 = *((_QWORD *)this[4] + 1);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    *(_DWORD *)(v3 + 828) = *((_DWORD *)*this + 5);
    v4 = *(Inspector::RemoteControllableTarget **)(v3 + 1080);
    if (v4)
      Inspector::RemoteControllableTarget::update(v4);
    if (v2)
      CFRelease(*(CFTypeRef *)(v2 - 8));
  }
}

void WebKit::DiagnosticLoggingClient::~DiagnosticLoggingClient(id *this)
{
  void *v2;

  objc_destroyWeak(this + 2);
  WTF::fastFree((WTF *)this, v2);
}

{
  objc_destroyWeak(this + 2);
}

void WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow(WebKit::WebInspectorUIProxy *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;

  v2 = *((_QWORD *)this + 6);
  if (!v2 || !*(_QWORD *)(v2 + 8) || *((_BYTE *)this + 83))
    return;
  *((_BYTE *)this + 83) = 1;
  v4 = *((_QWORD *)this + 5);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    (*(void (**)(_QWORD, uint64_t, WebKit::WebInspectorUIProxy *))(**(_QWORD **)(v5 + 88) + 576))(*(_QWORD *)(v5 + 88), v5 - 16, this);
    CFRelease(*(CFTypeRef *)(v5 - 8));
    v2 = *((_QWORD *)this + 6);
    *((_BYTE *)this + 73) = 0;
    *((_WORD *)this + 38) = 0;
    *((_BYTE *)this + 78) = 0;
    if (!v2)
      goto LABEL_11;
  }
  else
  {
    *((_BYTE *)this + 73) = 0;
    *((_WORD *)this + 38) = 0;
    *((_BYTE *)this + 78) = 0;
  }
  v6 = *(_QWORD *)(v2 + 8);
  if (v6)
  {
    v7 = v6 - 16;
    CFRetain(*(CFTypeRef *)(v6 - 8));
    goto LABEL_12;
  }
LABEL_11:
  v7 = 0;
LABEL_12:
  WebKit::untrackInspectorPage((WebKit *)v7, a2);
  v8 = *(_QWORD *)(v7 + 208);
  v15 = *((_BYTE *)this + 73);
  WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetIsVisible>(v8, &v15, *(_QWORD *)(*(_QWORD *)(v7 + 32) + 1896), 0);
  IPC::MessageReceiverMap::removeMessageReceiver(*(_QWORD *)(v7 + 208) + 152, 0xAFu, *((_QWORD *)this + 8));
  v10 = *((_QWORD *)this + 5);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      CFRetain(*(CFTypeRef *)(v11 - 8));
      if (*((_BYTE *)this + 81))
        WebKit::WebPageInspectorController::disconnectFrontend(*(_QWORD **)(v11 + 1056));
      CFRelease(*(CFTypeRef *)(v11 - 8));
    }
  }
  *((_BYTE *)this + 81) = 0;
  v12 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v9);
    }
  }
  *((_WORD *)this + 37) = 0;
  *((_BYTE *)this + 72) = 0;
  CFRelease(*(CFTypeRef *)(v7 + 8));
  *((_BYTE *)this + 83) = 0;
}

uint64_t WebKit::WebBackForwardCache::removeEntriesForPage(WebKit::WebBackForwardCache *this, WebKit::WebPageProxy *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34D26A0;
  v4[1] = v3;
  v6 = v4;
  WebKit::WebBackForwardCache::removeEntriesMatching((uint64_t)this, &v6);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t WebKit::PageClientImplCocoa::pageClosed(WebCore::AlternativeTextUIController **this)
{
  return WebCore::AlternativeTextUIController::clear(this[3]);
}

void WebKit::WebBackForwardList::pageClosed(WebKit::WebBackForwardList *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unsigned int v6;
  unsigned int v7;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8) && (v4 = *((unsigned int *)this + 9), (_DWORD)v4))
    {
      for (i = 0; i != v4; ++i)
      {
        if (i >= *((unsigned int *)this + 9))
        {
          __break(0xC471u);
          return;
        }
        WebKit::WebBackForwardList::didRemoveItem(this, *(WebKit::WebBackForwardListItem **)(*((_QWORD *)this + 3) + 8 * i));
      }
      v3 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0;
      if (v3)
        goto LABEL_10;
    }
    else
    {
      *((_QWORD *)this + 2) = 0;
      do
      {
LABEL_10:
        v6 = __ldaxr((unsigned int *)v3);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v3));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::Vector<WTF::Ref<WebKit::WebBackForwardListItem,WTF::RawPtrTraits<WebKit::WebBackForwardListItem>,WTF::DefaultRefDerefTraits<WebKit::WebBackForwardListItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 24, 0);
  if (*((_BYTE *)this + 48))
    *((_BYTE *)this + 48) = 0;
}

void WebKit::WebPageDebuggable::~WebPageDebuggable(WebKit::WebPageDebuggable *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = MEMORY[0x1E0CC10E8] + 16;
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  Inspector::RemoteControllableTarget::~RemoteControllableTarget(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebPageDebuggable::~WebPageDebuggable(this, a2);
  WTF::fastFree(v2, v3);
}

void WebKit::FullscreenClient::~FullscreenClient(id *this)
{
  void *v2;

  objc_destroyWeak(this + 2);
  WTF::fastFree((WTF *)this, v2);
}

{
  objc_destroyWeak(this + 2);
}

unsigned __int8 *WebKit::WebPageProxy::removeAllMessageReceivers(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned __int8 *result;

  WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages((unsigned __int8 *)(*((_QWORD *)this + 4)
                                                                                           + 1928));
  v2 = *((_QWORD *)this + 26);
  v3 = (unsigned int *)(v2 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  result = IPC::MessageReceiverMap::removeMessageReceiver(v2 + 152, 0x2Cu, *(_QWORD *)(*((_QWORD *)this + 4) + 1896));
  if (v2)
    return (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  return result;
}

void WebKit::WebPageProxy::disconnectFramesFromPage(WebKit::WebPageProxy *this, void *a2)
{
  CFTypeRef *v2;

  v2 = (CFTypeRef *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v2)
  {
    WebKit::WebFrameProxy::webProcessWillShutDown((WebKit::WebFrameProxy *)v2, a2);
    CFRelease(v2[1]);
  }
}

WebKit::WebURLSchemeHandler **WebKit::WebPageProxy::stopAllURLSchemeTasks(WebKit::WebPageProxy *this, WebKit::WebProcessProxy *a2)
{
  WebKit::WebURLSchemeHandler **v4;
  WebKit::WebURLSchemeHandler **result;
  WebKit::WebURLSchemeHandler **v6;
  WebKit::WebURLSchemeHandler **v7;
  WebKit::WebURLSchemeHandler **v8;
  WebKit::WebURLSchemeHandler **v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  WebKit::WebURLSchemeHandler *v14;
  uint64_t v15;
  WebKit::WebURLSchemeHandler **v16;
  WebKit::WebURLSchemeHandler *v17;
  uint64_t v18;
  WebKit::WebURLSchemeHandler **v19;

  v4 = (WebKit::WebURLSchemeHandler **)*((_QWORD *)this + 132);
  result = (WebKit::WebURLSchemeHandler **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4);
  v7 = result;
  v8 = v6;
  if (v4)
  {
    v9 = &v4[2 * *((unsigned int *)v4 - 1)];
    v10 = *((unsigned int *)v4 - 3);
    if ((_DWORD)v10)
    {
      if (v10 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = (WebKit::WebURLSchemeHandler **)WTF::fastMalloc((WTF *)(8 * v10));
      v4 = result;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v9 != v7)
  {
    v11 = 0;
    v12 = 1;
    do
    {
      v13 = v12;
      v14 = v7[1];
      ++*((_DWORD *)v14 + 2);
      v4[v11] = v14;
      while (1)
      {
        v7 += 2;
        if (v7 == v8)
          break;
        if ((unint64_t)*v7 + 1 > 1)
          goto LABEL_14;
      }
      v7 = v8;
LABEL_14:
      ++v11;
      v12 = v13 + 1;
    }
    while (v7 != v9);
    if (v11)
    {
      v15 = 8 * v13;
      v16 = v4;
      do
      {
        v17 = *v16++;
        WebKit::WebURLSchemeHandler::stopAllTasksForPage(v17, this, a2);
        v15 -= 8;
      }
      while (v15);
      v18 = 8 * v13;
      v19 = v4;
      do
      {
        result = (WebKit::WebURLSchemeHandler **)*v19;
        *v19 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
            result = (WebKit::WebURLSchemeHandler **)(*((uint64_t (**)(WebKit::WebURLSchemeHandler **))*result
                                                      + 1))(result);
          else
            --*((_DWORD *)result + 2);
        }
        ++v19;
        v18 -= 8;
      }
      while (v18);
    }
  }
  if (v4)
    return (WebKit::WebURLSchemeHandler **)WTF::fastFree((WTF *)v4, v6);
  return result;
}

WebKit::ProcessThrottlerActivity *WebKit::WebPageProxy::ProcessActivityState::reset(WebKit::ProcessThrottlerActivity **this)
{
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](this + 1, 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](this + 2, 0);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](this + 3, 0);
  return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](this + 4, 0);
}

void WebKit::FindClient::~FindClient(id *this)
{
  void *v2;

  objc_destroyWeak(this + 2);
  WTF::fastFree((WTF *)this, v2);
}

{
  objc_destroyWeak(this + 2);
}

unsigned int *WebKit::WebProcessPool::disconnectProcess(WebKit::WebProcessPool *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  WebKit::WebBackForwardCache *v28;
  const char *v29;
  const WTF::StringImpl *v30;
  WebKit::WebGeolocationManagerProxy *v31;
  uint64_t v32;
  WebKit::WebProcessProxy **v33;
  WebKit::WebProcessProxy **v34;
  const WTF::StringImpl *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  WTF **v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t *v45;
  WebKit::WebProcessProxy *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  double v57;
  double v58;
  double v59;
  unsigned int v60;
  WebKit *v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned int v64;
  _QWORD *v65;
  void *v66;
  WTF::StringImpl *v67;
  _QWORD *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD v75[2];

  v4 = *((_QWORD *)this + 11);
  if (v4 && *(WebKit::WebProcessProxy **)(v4 + 8) == a2)
  {
    *((_QWORD *)this + 11) = 0;
    do
    {
      v15 = __ldaxr((unsigned int *)v4);
      v16 = --v15 == 0;
    }
    while (__stlxr(v15, (unsigned int *)v4));
LABEL_30:
    if (v16)
    {
      atomic_store(1u, (unsigned int *)v4);
      WTF::fastFree((WTF *)v4, a2);
    }
    goto LABEL_32;
  }
  if (WebKit::WebProcessProxy::isDummyProcessProxy(a2))
  {
    v5 = (uint64_t *)((char *)this + 96);
    v6 = *((_QWORD *)this + 12);
    if (v6)
    {
      v7 = *(_QWORD *)(*((_QWORD *)a2 + 94) + 24);
      v8 = *(_DWORD *)(v6 - 8);
      v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(_QWORD *)(v6 + 16 * v12);
      if (v13 != v7)
      {
        v14 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v14) & v8;
          v13 = *(_QWORD *)(v6 + 16 * v12);
          ++v14;
          if (v13 == v7)
            goto LABEL_14;
        }
        v12 = *(unsigned int *)(v6 - 4);
      }
LABEL_14:
      if (v12 != *(_DWORD *)(v6 - 4))
      {
        v17 = (_QWORD *)(v6 + 16 * v12);
        v4 = v17[1];
        v17[1] = 0;
        v18 = *v5;
        if (!*v5 || (v18 += 16 * *(unsigned int *)(v18 - 4), (_QWORD *)v18 != v17))
        {
          if ((_QWORD *)v18 != v17)
          {
            *v17 = -1;
            v17[1] = 0;
            ++*(_DWORD *)(*v5 - 16);
            v19 = *v5;
            v20 = *v5 ? *(_DWORD *)(v19 - 12) - 1 : -1;
            *(_DWORD *)(v19 - 12) = v20;
            v21 = *v5;
            if (*v5)
            {
              v22 = 6 * *(_DWORD *)(v21 - 12);
              v23 = *(_DWORD *)(v21 - 4);
              if (v22 < v23 && v23 >= 9)
                WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v5, v23 >> 1);
            }
          }
        }
        if (v4)
        {
          do
          {
            v25 = __ldaxr((unsigned int *)v4);
            v16 = --v25 == 0;
          }
          while (__stlxr(v25, (unsigned int *)v4));
          goto LABEL_30;
        }
      }
    }
  }
LABEL_32:
  v26 = (unsigned int *)((char *)a2 + 16);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  v28 = (WebKit::WebBackForwardCache *)*((_QWORD *)this + 95);
  ++*(_DWORD *)v28;
  WebKit::WebBackForwardCache::removeEntriesForProcess(v28, a2);
  if (!*(_DWORD *)v28)
  {
    __break(0xC471u);
    JUMPOUT(0x196D44360);
  }
  --*(_DWORD *)v28;
  if (*((unsigned __int8 *)a2 + 952) | *((unsigned __int8 *)a2 + 872))
    WebKit::WebProcessProxy::disableRemoteWorkers((uint64_t)a2, 3);
  v70 = "WebGeolocationManagerProxy";
  v71 = 27;
  v29 = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)this + 57, (WTF::ASCIILiteralHash *)&v70);
  if (v29)
    v31 = (WebKit::WebGeolocationManagerProxy *)(v29 - 16);
  else
    v31 = 0;
  WebKit::WebGeolocationManagerProxy::webProcessIsGoingAway(v31, a2, v30);
  v32 = *((unsigned int *)this + 21);
  if ((_DWORD)v32)
  {
    v33 = (WebKit::WebProcessProxy **)*((_QWORD *)this + 9);
    v34 = v33 + 1;
    while (*v33 != a2)
    {
      ++v33;
      ++v34;
      if (!--v32)
        goto LABEL_46;
    }
    *v33 = 0;
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)a2 + 4);
    memmove(v33, v33 + 1, *((_QWORD *)this + 9) + 8 * *((unsigned int *)this + 21) - (_QWORD)v34);
    --*((_DWORD *)this + 21);
  }
LABEL_46:
  if (WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessProxy>((uint64_t)this + 664, (uint64_t)a2))WebKit::WebProcessPool::processStoppedUsingGamepads(this, a2);
  v36 = *((_QWORD *)this + 97);
  if (v36)
  {
    v37 = *(_DWORD *)(v36 - 4);
    if (v37)
    {
      v38 = 0;
      v39 = (uint64_t *)((char *)this + 776);
      v40 = v37 - 1;
      do
      {
        v41 = v40;
        v42 = (WTF **)(v36 + 16 * v40);
        if ((WTF::equal(*v42, 0, v35) & 1) == 0 && *v42 != (WTF *)-1)
        {
          v44 = v36 + 16 * v40;
          v46 = *(WebKit::WebProcessProxy **)(v44 + 8);
          v45 = (uint64_t *)(v44 + 8);
          if (v46 == a2)
          {
            WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>((WTF::StringImpl **)(v36 + 16 * v40), v43);
            v47 = *v45;
            *v45 = 0;
            if (v47)
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v47 + 16));
            ++v38;
          }
        }
        --v40;
      }
      while (v41);
      v48 = *v39;
      if (v38)
      {
        *(_DWORD *)(v48 - 16) += v38;
        v49 = *v39;
        if (*v39)
          v50 = *(_DWORD *)(v49 - 12);
        else
          v50 = 0;
        *(_DWORD *)(v49 - 12) = v50 - v38;
        v48 = *v39;
      }
      if (v48)
      {
        v51 = *(_DWORD *)(v48 - 4);
        v52 = *(unsigned int *)(v48 - 12);
        if (v51 >= 9 && 6 * (int)v52 < v51)
        {
          v54 = (v52 - 1) | ((v52 - 1) >> 1) | ((((_DWORD)v52 - 1) | ((v52 - 1) >> 1)) >> 2);
          v55 = v54 | (v54 >> 4) | ((v54 | (v54 >> 4)) >> 8);
          v56 = (v55 | HIWORD(v55)) + 1;
          if (v56 > 0x400)
          {
            if (v56 > 2 * v52)
              goto LABEL_73;
          }
          else if (3 * v56 > 4 * v52)
          {
LABEL_71:
            v57 = (double)v52;
            v58 = (double)v56;
            v59 = 0.604166667;
LABEL_74:
            if (v58 * v59 <= v57)
              LODWORD(v56) = 2 * v56;
            if (v56 <= 8)
              v60 = 8;
            else
              v60 = v56;
            WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::RefPtr<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash((uint64_t *)this + 97, v60);
            goto LABEL_80;
          }
          LODWORD(v56) = 2 * v56;
          if (v56 <= 0x400)
            goto LABEL_71;
LABEL_73:
          v57 = (double)v52;
          v58 = (double)v56;
          v59 = 0.416666667;
          goto LABEL_74;
        }
      }
    }
  }
LABEL_80:
  v61 = (WebKit *)WebKit::WebProcessPool::extensionCapabilityGranter(this);
  v69 = (_QWORD *)*((_QWORD *)a2 + 49);
  *((_QWORD *)a2 + 49) = 0;
  v62 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(&v69);
  if (v69)
  {
    v64 = *((_DWORD *)v69 - 1);
    v65 = &v69[3 * v64];
  }
  else
  {
    v65 = 0;
    v64 = 0;
  }
  v70 = (const char *)&v69;
  v71 = (uint64_t)v62;
  v72 = v63;
  v73 = v65;
  v74 = &v69[3 * v64];
  v75[0] = 0;
  v75[1] = 0;
  WTF::Mapper<WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::moveToVectorOf<WebKit::ExtensionCapabilityGrant,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &>(WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &)::{lambda(WebKit::ExtensionCapabilityGrant&&)#1},WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &,void>::map((uint64_t)v75, (uint64_t **)&v70);
  WebKit::ExtensionCapabilityGranter::invalidateGrants(v61, (uint64_t)v75);
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v75, v66);
  if (v69)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v69, v67);
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v26);
}

uint64_t WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessProxy>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  ++*(_DWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a2 + 8);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return 0;
  v4 = *(_QWORD *)(a2 + 8);
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v4);
}

uint64_t WebKit::WebGeolocationManagerProxy::webProcessIsGoingAway(WebKit::WebGeolocationManagerProxy *this, WebKit::WebProcessProxy *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::RegistrableDomain *v13;
  _DWORD *v14;
  WTF::ASCIICaseInsensitiveHash **v15;
  uint64_t v16;
  _QWORD v18[2];
  WebCore::RegistrableDomain *v19;
  uint64_t v20;

  v19 = 0;
  v20 = 0;
  v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)this + 7, (uint64_t)a2, a3);
  v7 = (_QWORD *)v5;
  v18[0] = v5;
  v18[1] = v6;
  v8 = *((_QWORD *)this + 7);
  if (v8)
    v9 = v8 + 16 * *(unsigned int *)(v8 - 4);
  else
    v9 = 0;
  if (v9 != v5)
  {
    do
    {
      if (WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessProxy>(v7[1], (uint64_t)a2))
      {
        v12 = HIDWORD(v20);
        if (HIDWORD(v20) == (_DWORD)v20)
        {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v19, (unint64_t)v7);
        }
        else
        {
          v13 = v19;
          v14 = (_DWORD *)*v7;
          if (*v7)
            *v14 += 2;
          *((_QWORD *)v13 + v12) = v14;
          HIDWORD(v20) = v12 + 1;
        }
      }
      v18[0] += 16;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v18, v10, v11);
      v7 = (_QWORD *)v18[0];
    }
    while (v18[0] != v9);
    if (HIDWORD(v20))
    {
      v15 = (WTF::ASCIICaseInsensitiveHash **)v19;
      v16 = 8 * HIDWORD(v20);
      do
      {
        WebKit::WebGeolocationManagerProxy::stopUpdatingWithProxy(this, a2, v15++);
        v16 -= 8;
      }
      while (v16);
    }
  }
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v6);
}

uint64_t WebKit::ExtensionCapabilityGranter::invalidateGrants(WebKit *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = WebKit::granterQueue(a1);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(a2, (uint64_t)&v9);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E34C7768;
  v4[1] = v9;
  v5 = v10;
  v9 = 0;
  v10 = 0;
  v4[2] = v5;
  v11 = v4;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 32))(v3, &v11);
  v7 = v11;
  v11 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v6);
}

void sub_196D44560(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::ExtensionCapabilityGrant *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebKit::ExtensionCapabilityGrant **)a1;
    v5 = 16 * v3;
    do
    {
      WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v4);
      v4 = (WebKit::ExtensionCapabilityGrant *)(v6 + 16);
      v5 -= 16;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WebKit::granterQueue(WebKit *this)
{
  uint64_t result;
  uint64_t v2;

    return WebKit::granterQueue(void)::queue;
  WTF::WorkQueue::create();
  result = v2;
  WebKit::granterQueue(void)::queue = v2;
  return result;
}

uint64_t WebKit::WebBackForwardCache::removeEntriesForProcess(WebKit::WebBackForwardCache *this, WebKit::WebProcessProxy *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = *((_QWORD *)a2 + 22);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34D2650;
  v4[1] = v3;
  v6 = v4;
  WebKit::WebBackForwardCache::removeEntriesMatching((uint64_t)this, &v6);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t WebKit::WebBackForwardCache::removeEntriesMatching(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
  {
    v5 = a1 + 24;
    while (1)
    {
      v6 = *(_QWORD *)(*v2 + 8);
      if (v6)
        break;
      v2 = (_QWORD *)v2[2];
      if (!v2)
        return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, a2);
    }
LABEL_6:
    if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v6))
    {
      v7 = HIDWORD(v17);
      if (HIDWORD(v17) == (_DWORD)v17)
      {
        v8 = HIDWORD(v17) + ((unint64_t)HIDWORD(v17) >> 2);
        if (v8 >= 0x10)
          v9 = v8 + 1;
        else
          v9 = 16;
        if (v9 <= (unint64_t)HIDWORD(v17) + 1)
          v10 = HIDWORD(v17) + 1;
        else
          v10 = v9;
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v16, v10);
        v7 = HIDWORD(v17);
      }
      v11 = &v16[v7];
      CFRetain(*(CFTypeRef *)(v6 + 8));
      *v11 = v6;
      ++HIDWORD(v17);
    }
    while (1)
    {
      v2 = (_QWORD *)v2[2];
      if (!v2)
        break;
      v6 = *(_QWORD *)(*v2 + 8);
      if (v6)
      {
        ++*(_DWORD *)(a1 + 48);
        goto LABEL_6;
      }
    }
    ++*(_DWORD *)(a1 + 48);
    if (HIDWORD(v17))
    {
      v12 = v16;
      v13 = 8 * HIDWORD(v17);
      do
      {
        WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebBackForwardListItem>(v5, *v12);
        v14 = *v12++;
        std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100]((WebKit::WebBackForwardCacheEntry **)(v14 + 416), 0);
        v13 -= 8;
      }
      while (v13);
    }
  }
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, a2);
}

uint64_t WebKit::WebProcessPool::extensionCapabilityGranter(WebKit::WebProcessPool *this)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  result = *((_QWORD *)this + 117);
  if (!result)
  {
    WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::ExtensionCapabilityGranter,WebKit::ExtensionCapabilityGranterClient &>((uint64_t)this + 32, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (_QWORD *)*((_QWORD *)this + 117);
    *((_QWORD *)this + 117) = v3;
    if (v4)
    {
      std::default_delete<WebKit::ExtensionCapabilityGranter>::operator()[abi:sn180100]((uint64_t)this + 936, v4);
      v5 = v6;
      v6 = 0;
      if (v5)
        std::default_delete<WebKit::ExtensionCapabilityGranter>::operator()[abi:sn180100]((uint64_t)&v6, v5);
    }
    return *((_QWORD *)this + 117);
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[3 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v2];
  if ((_DWORD)v2)
  {
    v4 = 24 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v4 -= 24;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;

  v3 = *a1;
  if (!*a1)
    return 0;
  if (*(_DWORD *)(v3 - 12))
    return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeIterator(a1, v3, a3);
  return v3 + 16 * *(unsigned int *)(v3 - 4);
}

void WTF::Mapper<WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::moveToVectorOf<WebKit::ExtensionCapabilityGrant,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &>(WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &)::{lambda(WebKit::ExtensionCapabilityGrant&&)#1},WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &,void>::map(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = **a2;
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 12);
    if ((_DWORD)v5)
    {
      if (v5 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v6 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v6;
    }
  }
  v7 = a2[1];
  v8 = a2[3];
  if (v7 != v8)
  {
    v9 = a2[2];
    do
    {
      v10 = v7[1];
      v11 = v7[2];
      v7[1] = 0;
      v7[2] = 0;
      v12 = *(unsigned int *)(a1 + 12);
      v13 = (_QWORD *)(*(_QWORD *)a1 + 16 * v12);
      v15 = 0;
      v16 = v11;
      *v13 = v10;
      v14 = v16;
      v16 = 0;
      v13[1] = v14;
      *(_DWORD *)(a1 + 12) = v12 + 1;
      WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)&v15);
      while (1)
      {
        v7 += 3;
        if (v7 == v9)
          break;
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_12;
      }
      v7 = v9;
LABEL_12:
      ;
    }
    while (v7 != v8);
  }
}

void WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v9[3];

  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5)
  {
    v6 = v4 + 16 * v5;
    do
    {
      WTF::String::isolatedCopy();
      v9[0] = v9[2];
      v7 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      v9[1] = v7;
      WebKit::ExtensionCapabilityGrant::operator=(v4, (WTF::StringImpl *)v9);
      WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)v9);
      v4 += 16;
    }
    while (v4 < v6);
    v4 = *(_QWORD *)a1;
    LODWORD(v5) = *(_DWORD *)(a1 + 12);
  }
  *(_QWORD *)a2 = v4;
  v8 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 12) = v5;
}

void sub_196D44A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant((WebKit::ExtensionCapabilityGrant *)va);
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>,NSObject  {objcproto13OS_xpc_object} const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 == *a2)
    return v2 + 16 * v7;
  v9 = 1;
  while (v8)
  {
    v7 = ((_DWORD)v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 16 * v7);
    ++v9;
    if (v8 == *a2)
      return v2 + 16 * v7;
  }
  return v2 + 16 * *(unsigned int *)(v2 - 4);
}

void sub_196D44C40(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPageProxy::setFormClient(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E34D4068;
  }
  result = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPageProxy::setIconLoadingClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  BOOL v6;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    result = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v3;
    if (!result)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v5 = &unk_1E34D4040;
  result = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v5;
  if (result)
LABEL_3:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
LABEL_4:
  if (!*(_BYTE *)(a1 + 729))
  {
    if (*(_BYTE *)(a1 + 728))
    {
      v6 = v3 != 0;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetUseIconLoadingClient>(*(_QWORD *)(a1 + 208), &v6, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896), 0);
    }
  }
  return result;
}

void sub_196D45648(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,WTF::StringImpl *a41,uint64_t a42,uint64_t a43,uint64_t a44,WTF::StringImpl *a45,uint64_t a46,WTF::StringImpl *a47)
{
  WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_196D457E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v14;
  void *v15;

  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a13, a2);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v14);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v15);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  WTF::RunLoop *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned __int8 **v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23[2];
  _QWORD v24[8];
  uint64_t v25;
  WTF::StringImpl *v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[12];
  int v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  WebCore::SQLiteDatabase::prepareStatement();
  v4 = v24[0];
  if (!LODWORD(v24[0]))
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v23) == 100)
    {
      if (!LODWORD(v24[0]))
      {
        WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v23);
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v33, v26);
        v19 = HIDWORD(v36);
        if (HIDWORD(v36) == (_DWORD)v36)
        {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain>((uint64_t)&v35, (unint64_t)v26);
        }
        else
        {
          v20 = v26[0];
          v26[0] = 0;
          *(_QWORD *)(v35 + 8 * HIDWORD(v36)) = v20;
          HIDWORD(v36) = v19 + 1;
        }
        v21 = v26[0];
        v26[0] = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 != 2)
          {
            *(_DWORD *)v21 -= 2;
            goto LABEL_29;
          }
          goto LABEL_34;
        }
        goto LABEL_29;
      }
      do
      {
        v21 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_34:
        WTF::StringImpl::destroy(v21, v18);
LABEL_29:
        v22 = v33;
        v33 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v18);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      while (LODWORD(v24[0]));
    }
    v4 = v24[0];
  }
  if (v4 != -1)
    (*(&off_1E34C0CF8 + v4))((int)v26, (WebCore::SQLiteStatement *)v23);
  WebKit::ResourceLoadStatisticsStore::domainsToBlockButKeepCookiesFor((WebKit::ResourceLoadStatisticsStore *)&v33);
  WebKit::ResourceLoadStatisticsStore::domainsWithUserInteractionAsFirstParty((WebKit::ResourceLoadStatisticsStore *)v31);
  WebKit::ResourceLoadStatisticsStore::domainsWithStorageAccess((WebKit::ResourceLoadStatisticsStore *)&v30);
  if (HIDWORD(v36) || v34 || v32 || v30 && *(_DWORD *)(v30 - 12))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v26, (uint64_t)&v35);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v27, (uint64_t)&v33);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v28, (uint64_t)v31);
    v10 = (WTF::RunLoop *)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(&v29, &v30);
    if (*(_BYTE *)(a1 + 708) && HIDWORD(v36) | v34)
      v10 = (WTF::RunLoop *)WebKit::ResourceLoadStatisticsStore::debugLogDomainsInBatches(a1, (uint64_t)v26);
    WTF::RunLoop::main(v10);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 96), a1);
    v11 = *(unsigned int **)(a1 + 96);
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    v23[0] = (uint64_t)v11;
    v13 = *(unsigned __int8 ***)(a1 + 104);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v13);
    v23[1] = (uint64_t)v13;
    WebKit::RegistrableDomainsToBlockCookiesFor::isolatedCopy(v24, (uint64_t)v26);
    v14 = *a2;
    *a2 = 0;
    v24[7] = v14;
    WTF::Function<void ()(void)>::Function<WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(&v25, v23);
    WTF::RunLoop::dispatch();
    v16 = v25;
    v25 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    WebKit::ResourceLoadStatisticsStore::updateCookieBlocking(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v23, v15);
    WebKit::RegistrableDomainsToBlockCookiesFor::~RegistrableDomainsToBlockCookiesFor((WebKit::RegistrableDomainsToBlockCookiesFor *)v26, v17);
  }
  else
  {
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  if (v30)
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v30, v6);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v6);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v7);
  return WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v8);
}

uint64_t WebKit::ResourceLoadStatisticsStore::domainsWithUserInteractionAsFirstParty(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t result;
  unsigned int v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _BYTE v12[16];
  unsigned int v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  result = WebCore::SQLiteDatabase::prepareStatement();
  v3 = v13;
  if (!v13)
  {
    while (1)
    {
      result = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v12);
      if ((_DWORD)result != 100)
        break;
      if (!v13)
      {
        WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v12);
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v10, &v11);
        v5 = *((unsigned int *)this + 3);
        if ((_DWORD)v5 == *((_DWORD *)this + 2))
        {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain>((uint64_t)this, (unint64_t)&v11);
        }
        else
        {
          v6 = *(_QWORD *)this;
          v7 = v11;
          v11 = 0;
          *(_QWORD *)(v6 + 8 * v5) = v7;
          *((_DWORD *)this + 3) = v5 + 1;
        }
        v8 = v11;
        v11 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 != 2)
          {
            *(_DWORD *)v8 -= 2;
            goto LABEL_13;
          }
          goto LABEL_18;
        }
        goto LABEL_13;
      }
      do
      {
        v8 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
        WTF::StringImpl::destroy(v8, v4);
LABEL_13:
        v9 = v10;
        v10 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v4);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
      while (v13);
    }
    v3 = v13;
  }
  if (v3 != -1)
    return (*(&off_1E34C0CF8 + v3))((int)&v11, (WebCore::SQLiteStatement *)v12);
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::domainsToBlockButKeepCookiesFor(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t result;
  unsigned int v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _BYTE v12[16];
  unsigned int v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  result = WebCore::SQLiteDatabase::prepareStatement();
  v3 = v13;
  if (!v13)
  {
    while (1)
    {
      result = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v12);
      if ((_DWORD)result != 100)
        break;
      if (!v13)
      {
        WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v12);
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v10, &v11);
        v5 = *((unsigned int *)this + 3);
        if ((_DWORD)v5 == *((_DWORD *)this + 2))
        {
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain>((uint64_t)this, (unint64_t)&v11);
        }
        else
        {
          v6 = *(_QWORD *)this;
          v7 = v11;
          v11 = 0;
          *(_QWORD *)(v6 + 8 * v5) = v7;
          *((_DWORD *)this + 3) = v5 + 1;
        }
        v8 = v11;
        v11 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 != 2)
          {
            *(_DWORD *)v8 -= 2;
            goto LABEL_13;
          }
          goto LABEL_18;
        }
        goto LABEL_13;
      }
      do
      {
        v8 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
        WTF::StringImpl::destroy(v8, v4);
LABEL_13:
        v9 = v10;
        v10 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v4);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
      while (v13);
    }
    v3 = v13;
  }
  if (v3 != -1)
    return (*(&off_1E34C0CF8 + v3))((int)&v11, (WebCore::SQLiteStatement *)v12);
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::domainsWithStorageAccess(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _QWORD v16[2];
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _QWORD v19[3];
  _BYTE v20[16];
  unsigned int v21;

  *(_QWORD *)this = 0;
  result = WebCore::SQLiteDatabase::prepareStatement();
  v3 = v21;
  if (!v21)
  {
    while (1)
    {
      result = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v20);
      if ((_DWORD)result != 100)
        break;
      if (!v21)
      {
        WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v20);
        WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v17, &v18);
        v16[0] = 0;
        v16[1] = 0;
        WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)this, &v18, v16, (uint64_t)v19);
        if (!v21)
        {
          v4 = v19[0];
          WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v20);
          WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v14, &v15);
          v6 = *(unsigned int *)(v4 + 20);
          if ((_DWORD)v6 == *(_DWORD *)(v4 + 16))
          {
            WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain>(v4 + 8, (unint64_t)&v15);
          }
          else
          {
            v7 = *(_QWORD *)(v4 + 8);
            v8 = v15;
            v15 = 0;
            *(_QWORD *)(v7 + 8 * v6) = v8;
            *(_DWORD *)(v4 + 20) = v6 + 1;
          }
          v9 = v15;
          v15 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 != 2)
            {
              *(_DWORD *)v9 -= 2;
              goto LABEL_14;
            }
            goto LABEL_25;
          }
          goto LABEL_14;
        }
      }
      do
      {
        v9 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_25:
        WTF::StringImpl::destroy(v9, v5);
LABEL_14:
        v10 = v14;
        v14 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v5);
          else
            *(_DWORD *)v10 -= 2;
        }
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v5);
        v12 = v18;
        v18 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = v17;
        v17 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v11);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      while (v21);
    }
    v3 = v21;
  }
  if (v3 != -1)
    return (*(&off_1E34C0CF8 + v3))((int)v19, (WebCore::SQLiteStatement *)v20);
  return result;
}

uint64_t WebKit::RemoteAudioSessionProxy::configuration@<X0>(WebKit::RemoteAudioSessionProxy *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::AudioSession *v4;
  uint64_t v5;
  uint64_t result;
  _DWORD *v7;

  v4 = (WebCore::AudioSession *)WebKit::RemoteAudioSessionProxy::audioSessionManager(this);
  v5 = WebCore::AudioSession::sharedSession(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
  *(float *)(a2 + 8) = (*(float (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
  *(_QWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
  *(_QWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
  *(_QWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
  *(_QWORD *)(a2 + 40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 152))(v5);
  *(_BYTE *)(a2 + 48) = result;
  *(_BYTE *)(a2 + 49) = *((_BYTE *)this + 56);
  v7 = (_DWORD *)*((_QWORD *)this + 5);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a2 + 56) = v7;
  *(_BYTE *)(a2 + 64) = *((_BYTE *)this + 35);
  return result;
}

uint64_t WebKit::GPUConnectionToWebProcess::audioSessionProxy(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  WebKit::RemoteAudioSessionProxyManager *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  _BYTE v18[31];
  char v19;
  __int16 v20;
  char v21;
  _BYTE v22[32];
  _OWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  result = *((_QWORD *)this + 35);
  if (!result)
  {
    WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::RemoteAudioSessionProxy,WebKit::GPUConnectionToWebProcess &>((uint64_t)this, (uint64_t *)v22);
    v3 = *(_QWORD *)v22;
    *(_QWORD *)v22 = 0;
    v4 = *((_QWORD *)this + 35);
    *((_QWORD *)this + 35) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = *(_QWORD *)v22;
      *(_QWORD *)v22 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    v6 = *((_QWORD *)this + 9);
    v7 = *(_QWORD *)(v6 + 32);
    if (v7)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(*(unsigned __int8 ***)(v6 + 32));
      if (*(_QWORD *)(v7 + 352))
      {
        xpc_connection_get_audit_token();
        v8 = v22[0];
        v23[0] = *(_OWORD *)&v22[1];
        *(_OWORD *)((char *)v23 + 15) = *(_OWORD *)&v22[16];
        v9 = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref((unsigned __int8 **)v7);
    }
    else if (MEMORY[0x160])
    {
      xpc_connection_get_audit_token();
      v8 = v22[0];
      v23[0] = *(_OWORD *)&v22[1];
      *(_OWORD *)((char *)v23 + 15) = *(_OWORD *)&v22[16];
      v9 = 1;
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    v10 = (unsigned int *)*((_QWORD *)this + 9);
    v11 = v10 + 28;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = (WebKit::RemoteAudioSessionProxyManager *)WebKit::GPUProcess::audioSessionManager((WebKit::GPUProcess *)v10);
    v14 = (unsigned int *)*((_QWORD *)this + 35);
    v17 = v8;
    *(_OWORD *)v18 = v23[0];
    *(_OWORD *)&v18[15] = *(_OWORD *)((char *)v23 + 15);
    v19 = v9;
    v20 = *(_WORD *)v22;
    v21 = v22[2];
    WebKit::RemoteAudioSessionProxyManager::addProxy(v13, v14, (uint64_t)&v17);
    if (v10)
    {
      do
      {
        v15 = __ldaxr(v11);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v11));
      if (!v16)
      {
        atomic_store(1u, v10 + 28);
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    return *((_QWORD *)this + 35);
  }
  return result;
}

uint64_t WebKit::GPUProcess::audioSessionManager(WebKit::GPUProcess *this)
{
  uint64_t result;
  WebKit::RemoteAudioSessionProxyManager *v3;
  uint64_t v4;

  result = *((_QWORD *)this + 34);
  if (!result)
  {
    v3 = (WebKit::RemoteAudioSessionProxyManager *)WTF::fastMalloc((WTF *)0x38);
    result = WebKit::RemoteAudioSessionProxyManager::RemoteAudioSessionProxyManager(v3, this);
    v4 = *((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = result;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      return *((_QWORD *)this + 34);
    }
  }
  return result;
}

WebKit::RemoteAudioSessionProxyManager *WebKit::RemoteAudioSessionProxyManager::RemoteAudioSessionProxyManager(WebKit::RemoteAudioSessionProxyManager *this, WebKit::GPUProcess *a2)
{
  char *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::AudioSession *v9;
  uint64_t v10;

  *((_QWORD *)this + 2) = &unk_1E34B9680;
  v4 = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = off_1E34B9630;
  *((_QWORD *)this + 1) = 0;
  v5 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v6 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = v6;
  v8 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v5);
  v9 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t, WebKit::RemoteAudioSessionProxyManager *))(*(_QWORD *)v8 + 208))(v8, this);
  v10 = WebCore::AudioSession::sharedSession(v9);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 120))(v10, v4);
  return this;
}

WebCore::AudioSession *WebKit::RemoteAudioSessionProxyManager::addProxy(WebKit::RemoteAudioSessionProxyManager *a1, unsigned int *a2, uint64_t a3)
{
  WebCore::AudioSession *result;
  __int128 v6;
  _OWORD v7[2];
  _BYTE v8[24];

  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteAudioSessionProxy>((uint64_t)a1 + 40, a2, (uint64_t)v8);
  result = (WebCore::AudioSession *)WebKit::RemoteAudioSessionProxyManager::updateCategory(a1);
  if (*(_BYTE *)(a3 + 32))
  {
    result = (WebCore::AudioSession *)WebCore::AudioSession::sharedSession(result);
    if (*(_BYTE *)(a3 + 32))
    {
      v6 = *(_OWORD *)(a3 + 16);
      v7[0] = *(_OWORD *)a3;
      v7[1] = v6;
      return (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::AudioSession *, _OWORD *))(*(_QWORD *)result + 240))(result, v7);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t WebKit::RemoteAudioSessionProxyManager::updateCategory(WebKit::RemoteAudioSessionProxyManager *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  void *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v69 = 0;
  v70 = 0;
  v68 = 0;
  v2 = (char *)this + 40;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v66, (_QWORD **)this + 5);
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 8 * v4;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v61 = v2;
  v62 = v5;
  v63 = v5;
  v64 = v5;
  v65 = v3 + 8 * v4;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v61);
  v6 = v67;
  v7 = v62;
  if (v67 == v62)
  {
    v51 = 0;
    goto LABEL_68;
  }
  do
  {
    v8 = *(unsigned __int8 **)(*(_QWORD *)v6 + 8);
    v9 = v8[32];
    v10 = v70;
    if (v70
      || (WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(&v70, 0), (v10 = v70) != 0))
    {
      v11 = *(_DWORD *)(v10 - 8);
    }
    else
    {
      v11 = 0;
    }
    v12 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
    v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
    v14 = v11 & (v13 ^ HIWORD(v13));
    v15 = (_QWORD *)(v10 + 8 * v14);
    v16 = *(unsigned __int8 *)v15;
    if (v16 == 255)
    {
LABEL_16:
      *(_BYTE *)v15 = v9;
      *((_DWORD *)v15 + 1) = 0;
      v19 = v70;
      if (v70)
        v20 = *(_DWORD *)(v70 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(v70 - 12) = v20;
      v21 = (*(_DWORD *)(v19 - 16) + v20);
      v22 = *(unsigned int *)(v19 - 4);
      if (v22 > 0x400)
      {
        if (v22 > 2 * v21)
          goto LABEL_22;
LABEL_21:
        v15 = WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(&v70, v15);
        goto LABEL_22;
      }
      if (3 * v22 <= 4 * v21)
        goto LABEL_21;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      while (v16 != v9)
      {
        if (v16 == 254)
          v17 = v15;
        v14 = (v14 + v18) & v11;
        v15 = (_QWORD *)(v10 + 8 * v14);
        v16 = *(unsigned __int8 *)v15;
        ++v18;
        if (v16 == 255)
        {
          if (v17)
          {
            *(_BYTE *)v17 = -1;
            *((_DWORD *)v17 + 1) = 0;
            --*(_DWORD *)(v70 - 16);
            v15 = v17;
          }
          goto LABEL_16;
        }
      }
    }
LABEL_22:
    ++*((_DWORD *)v15 + 1);
    v23 = v8[33];
    v24 = v69;
    if (v69
      || (WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(&v69, 0), (v24 = v69) != 0))
    {
      v25 = *(_DWORD *)(v24 - 8);
    }
    else
    {
      v25 = 0;
    }
    v26 = 9 * ((~(v23 << 15) + v23) ^ ((~(v23 << 15) + v23) >> 10));
    v27 = (v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11);
    v28 = v25 & (v27 ^ HIWORD(v27));
    v29 = (_QWORD *)(v24 + 8 * v28);
    v30 = *(unsigned __int8 *)v29;
    if (v30 == 255)
    {
LABEL_33:
      *(_BYTE *)v29 = v23;
      *((_DWORD *)v29 + 1) = 0;
      v33 = v69;
      if (v69)
        v34 = *(_DWORD *)(v69 - 12) + 1;
      else
        v34 = 1;
      *(_DWORD *)(v69 - 12) = v34;
      v35 = (*(_DWORD *)(v33 - 16) + v34);
      v36 = *(unsigned int *)(v33 - 4);
      if (v36 > 0x400)
      {
        if (v36 > 2 * v35)
          goto LABEL_39;
LABEL_38:
        v29 = WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(&v69, v29);
        goto LABEL_39;
      }
      if (3 * v36 <= 4 * v35)
        goto LABEL_38;
    }
    else
    {
      v31 = 0;
      v32 = 1;
      while (v30 != v23)
      {
        if (v30 == 254)
          v31 = v29;
        v28 = (v28 + v32) & v25;
        v29 = (_QWORD *)(v24 + 8 * v28);
        v30 = *(unsigned __int8 *)v29;
        ++v32;
        if (v30 == 255)
        {
          if (v31)
          {
            *(_BYTE *)v31 = -1;
            *((_DWORD *)v31 + 1) = 0;
            --*(_DWORD *)(v69 - 16);
            v29 = v31;
          }
          goto LABEL_33;
        }
      }
    }
LABEL_39:
    ++*((_DWORD *)v29 + 1);
    v37 = v8[34];
    v38 = v68;
    if (v68
      || (WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(&v68, 0), (v38 = v68) != 0))
    {
      v39 = *(_DWORD *)(v38 - 8);
    }
    else
    {
      v39 = 0;
    }
    v40 = 9 * ((~(v37 << 15) + v37) ^ ((~(v37 << 15) + v37) >> 10));
    v41 = (v40 ^ (v40 >> 6)) + ~((v40 ^ (v40 >> 6)) << 11);
    v42 = v39 & (v41 ^ HIWORD(v41));
    v43 = (_QWORD *)(v38 + 8 * v42);
    v44 = *(unsigned __int8 *)v43;
    if (v44 == 255)
    {
LABEL_50:
      *(_BYTE *)v43 = v37;
      *((_DWORD *)v43 + 1) = 0;
      v47 = v68;
      if (v68)
        v48 = *(_DWORD *)(v68 - 12) + 1;
      else
        v48 = 1;
      *(_DWORD *)(v68 - 12) = v48;
      v49 = (*(_DWORD *)(v47 - 16) + v48);
      v50 = *(unsigned int *)(v47 - 4);
      if (v50 <= 0x400)
      {
        if (3 * v50 > 4 * v49)
          goto LABEL_56;
LABEL_55:
        v43 = WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(&v68, v43);
        goto LABEL_56;
      }
      if (v50 <= 2 * v49)
        goto LABEL_55;
    }
    else
    {
      v45 = 0;
      v46 = 1;
      while (v44 != v37)
      {
        if (v44 == 254)
          v45 = v43;
        v42 = (v42 + v46) & v39;
        v43 = (_QWORD *)(v38 + 8 * v42);
        v44 = *(unsigned __int8 *)v43;
        ++v46;
        if (v44 == 255)
        {
          if (v45)
          {
            *(_BYTE *)v45 = -1;
            *((_DWORD *)v45 + 1) = 0;
            --*(_DWORD *)(v68 - 16);
            v43 = v45;
          }
          goto LABEL_50;
        }
      }
    }
LABEL_56:
    ++*((_DWORD *)v43 + 1);
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v66);
    v6 = v67;
  }
  while (v67 != v7);
  v51 = v70;
LABEL_68:
  v52 = 5;
  if ((WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v51, 5u) & 1) == 0)
  {
    v52 = 4;
    if ((WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v51, 4u) & 1) == 0)
    {
      v52 = 3;
      if ((WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v51, 3u) & 1) == 0)
      {
        v52 = 2;
        if ((WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v51, 2u) & 1) == 0)
        {
          v52 = 1;
          if ((WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v51, 1u) & 1) == 0)
          {
            if (WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v51, 6u))v52 = 6;
            else
              v52 = 0;
          }
        }
      }
    }
  }
  v53 = v69;
  v54 = 2;
  if ((WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v69, 2u) & 1) == 0)v54 = WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v53, 1u);
  v55 = v68;
  v56 = 3;
  v57 = WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v68, 3u);
  if ((v57 & 1) == 0)
  {
    v57 = WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(v55, 1u);
    v56 = v57;
  }
  v58 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v57);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58 + 32))(v58, v52, v54, v56);
  if (v55)
    result = WTF::fastFree((WTF *)(v55 - 16), v60);
  if (v53)
    result = WTF::fastFree((WTF *)(v53 - 16), v60);
  if (v51)
    return WTF::fastFree((WTF *)(v51 - 16), v60);
  return result;
}

uint64_t WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::AudioSessionCategory>>,WebCore::AudioSessionCategory>(uint64_t a1, unsigned __int8 a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  int v7;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v4 = v2 & (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) ^ (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) >> 16));
  v5 = *(unsigned __int8 *)(a1 + 8 * v4);
  if (v5 == a2)
    return 1;
  v7 = 1;
  do
  {
    v6 = v5 != 255;
    if (v5 == 255)
      break;
    LODWORD(v4) = (v4 + v7) & v2;
    v5 = *(unsigned __int8 *)(a1 + 8 * v4);
    ++v7;
  }
  while (v5 != a2);
  return v6;
}

_QWORD *WTF::HashTable<WebCore::AudioSessionCategory,WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::AudioSessionCategory,unsigned int>>,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::HashMap<WebCore::AudioSessionCategory,unsigned int,WTF::IntHash<WebCore::AudioSessionCategory>,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::AudioSessionCategory>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastMalloc((WTF *)(8 * v7 + 16));
  if (v7)
  {
    v10 = v7;
    v11 = (_DWORD *)(v8 + 20);
    do
    {
      *((_BYTE *)v11 - 4) = -1;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (_QWORD *)(v4 + 8 * v12);
      v15 = *(unsigned __int8 *)v14;
      if (v15 <= 0xFD)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = 0;
        v19 = 9 * ((~(v15 << 15) + v15) ^ ((~(v15 << 15) + v15) >> 10));
        v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
        do
        {
          v21 = v20 & v17;
          v20 = ++v18 + v21;
        }
        while (*(unsigned __int8 *)(v16 + 8 * v21) != 255);
        v22 = (_QWORD *)(v16 + 8 * v21);
        *v22 = *v14;
        if (v14 == a2)
          v13 = v22;
      }
      ++v12;
    }
    while (v12 != v5);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v13;
}

void WebKit::WebChromeClient::allowedQueryParametersForAdvancedPrivacyProtections(WebKit::WebChromeClient *this@<X0>, const WTF::URL *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  CFTypeRef *v6;

  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v5)
    v6 = (CFTypeRef *)(v5 - 16);
  else
    v6 = 0;
  CFRetain(v6[1]);
  WebKit::WebPage::allowedQueryParametersForAdvancedPrivacyProtections((WebKit::WebPage *)v6, a2, a3);
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

__n128 WebKit::WebPage::allowedQueryParametersForAdvancedPrivacyProtections@<Q0>(WebKit::WebPage *this@<X0>, const WTF::URL *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  NSObject *v6;
  _DWORD *v7;
  __n128 result;
  unsigned int v10;
  _DWORD *v11;
  __n128 *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  BOOL v18;
  _QWORD *v19;
  void *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  __int128 v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl **v26;
  uint8_t buf[8];

  v5 = *((_QWORD *)this + 305);
  if (v5 && *(_DWORD *)(v5 - 12))
  {
    v10 = *((_DWORD *)a2 + 9);
    v11 = *(_DWORD **)a2;
    if (v10 > *((_DWORD *)a2 + 8))
    {
      if (!v11)
        goto LABEL_16;
      goto LABEL_15;
    }
    v12 = (__n128 *)((char *)a2 + 8);
    if ((*((_BYTE *)a2 + 8) & 1) != 0)
    {
      if (v11)
      {
        if (v11[1] > v10)
        {
LABEL_15:
          *v11 += 2;
LABEL_16:
          *(_QWORD *)a3 = v11;
          *(_OWORD *)(a3 + 8) = *(_OWORD *)((char *)a2 + 8);
          *(_OWORD *)(a3 + 24) = *(_OWORD *)((char *)a2 + 24);
          WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, (const WTF::URL *)a3);
          WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t)&v26, *((const WTF::StringImpl **)this + 305), (const WTF::StringImpl **)buf);
          v14 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v13);
            else
              *(_DWORD *)v14 -= 2;
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v17 = *(WTF::StringImpl **)buf;
          v25 = *(WTF::StringImpl **)buf;
          if (v26)
          {
            v18 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)&v26, &v25, v16) != 0;
            v17 = v25;
          }
          else
          {
            v18 = 0;
          }
          v25 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v15);
            else
              *(_DWORD *)v17 -= 2;
          }
          if (!v18)
            WTF::URL::removeFragmentIdentifier((WTF::URL *)a3);
          v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v19 = off_1E34D6E78;
          v19[1] = &v26;
          *(_QWORD *)buf = v19;
          WTF::removeQueryParameters();
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v20);
          v22 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v22)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
          if (v26)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v21);
          return result;
        }
        goto LABEL_34;
      }
    }
    else if (v11)
    {
LABEL_34:
      *v11 += 2;
    }
    *(_QWORD *)a3 = v11;
    result = *v12;
    v23 = *(_OWORD *)((char *)a2 + 24);
    *(__n128 *)(a3 + 8) = *v12;
    *(_OWORD *)(a3 + 24) = v23;
    return result;
  }
  v6 = qword_1ECE71758;
  if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "Unable to hide query parameters from script (missing data)", buf, 2u);
  }
  v7 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v7 += 2;
  *(_QWORD *)a3 = v7;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)((char *)a2 + 8);
  result = *(__n128 *)((char *)a2 + 24);
  *(__n128 *)(a3 + 24) = result;
  return result;
}

void sub_196D46D14(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl **a12, uint64_t a13)
{
  WTF::URL *v13;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a12, a2);
  WTF::URL::~URL(v13);
  _Unwind_Resume(a1);
}

void sub_196D46D8C(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  JUMPOUT(0x196D46D74);
}

void sub_196D46DB8()
{
  JUMPOUT(0x196D46D74);
}

void API::WebsitePolicies::~WebsitePolicies(API::WebsitePolicies *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  WebKit::WebsitePoliciesData::~WebsitePoliciesData((API::WebsitePolicies *)((char *)this + 24), a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v6);
}

{
  API::WebsitePolicies::~WebsitePolicies(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebSWServerConnection::updateThrottleState(WebKit::WebSWServerConnection *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  WebCore::SecurityOriginData *v9;
  WebCore::SecurityOriginData *v10;
  uint64_t result;
  WebCore::SecurityOriginData *v12;
  _DWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  WTF::StringImpl *v20;
  WebCore::SecurityOriginData *v21[3];
  WebCore::SecurityOriginData *v22;

  v22 = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  v3 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(v2);
  v4 = v3;
  v6 = v5;
  if (v2)
    v2 += 12 * *((unsigned int *)v2 - 1);
  if (v2 != v3)
  {
    do
    {
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v22, (uint64_t)(v4 + 8), (uint64_t)v21);
      while (1)
      {
        v4 += 12;
        if (v4 == v6)
          break;
        v7 = v4[2];
        if (*v4 | v4[1] | v7)
          v8 = v7 == -1;
        else
          v8 = 1;
        if (!v8)
          goto LABEL_12;
      }
      v4 = v6;
LABEL_12:
      ;
    }
    while (v4 != v2);
  }
  v10 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)&v22);
  v21[0] = v10;
  v21[1] = v9;
  result = (uint64_t)v22;
  if (v22)
    v12 = (WebCore::SecurityOriginData *)((char *)v22 + 32 * *((unsigned int *)v22 - 1));
  else
    v12 = 0;
  if (v12 != v10)
  {
    while (1)
    {
      v13 = *(_DWORD **)(*((_QWORD *)this + 3) + 8);
      ++*v13;
      WebCore::RegistrableDomain::RegistrableDomain(&v20, v10);
      v14 = WebCore::SWServer::contextConnectionForRegistrableDomain();
      v16 = v14;
      if (v14)
        ++*(_DWORD *)(v14 + 16);
      v17 = v20;
      v20 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v15);
        else
          *(_DWORD *)v17 -= 2;
      }
      WTF::RefCounted<WebCore::SWServer>::deref(v13);
      if (v16)
      {
        if (*((unsigned __int8 *)this + 112) != *(unsigned __int8 *)(v16 + 152))
        {
          v18 = WebKit::WebSWServerConnection::computeThrottleState(*(WebKit::WebSWServerConnection **)(*((_QWORD *)this + 3) + 8), (const WebCore::RegistrableDomain *)(v16 + 40));
          if (v18 != (*(_BYTE *)(v16 + 152) != 0))
            WebKit::WebSWServerToContextConnection::setThrottleState((WebKit::WebSWServerToContextConnection *)v16, v18);
        }
        v19 = *(_DWORD *)(v16 + 16);
        if (!v19)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        *(_DWORD *)(v16 + 16) = v19 - 1;
      }
      v21[0] = (WebCore::SecurityOriginData *)((char *)v21[0] + 32);
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v21);
      v10 = v21[0];
      if (v21[0] == v12)
      {
        result = (uint64_t)v22;
        break;
      }
    }
  }
  if (result)
    return WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((WebCore::SecurityOriginData *)result, v9);
  return result;
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(uint64_t *a1)
{
  WebCore::SecurityOriginData *v1;

  v1 = (WebCore::SecurityOriginData *)*a1;
  if (!*a1)
    return 0;
  if (*((_DWORD *)v1 - 3))
    return WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::makeConstIterator(a1, v1);
  return (WebCore::SecurityOriginData *)((char *)v1 + 32 * *((unsigned int *)v1 - 1));
}

_QWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ClientOrigin,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ClientOrigin>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[12 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[12 * v1];
  if ((_DWORD)v1)
  {
    v3 = 96 * v1;
    while (1)
    {
      v4 = result[2];
      if (*result | result[1] | v4 && v4 != -1)
        break;
      result += 12;
      v3 -= 96;
      if (!v3)
        return v2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#4},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34D9568;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 12);
  if (v4)
    os_release(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WebKit::WebCacheStorageProvider::createCacheStorageConnection@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v2 = this;
  if (!*(_QWORD *)(this + 16))
  {
    v4 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = off_1E34E00A0;
    *(_BYTE *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    this = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = v4;
    if (this)
    {
      v5 = (unsigned int *)(this + 8);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)(this + 8));
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  v8 = *(_QWORD *)(v2 + 16);
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *a2 = v8;
  return this;
}

WebKit::InjectedBundleScriptWorld *WebKit::InjectedBundleScriptWorld::normalWorld(WebKit::InjectedBundleScriptWorld *this)
{
  WebKit::InjectedBundleScriptWorld *result;
  WebCore *v2;
  WebCore::DOMWrapperWorld *v3;
  uint64_t v4;

    return (WebKit::InjectedBundleScriptWorld *)WebKit::InjectedBundleScriptWorld::normalWorld(void)::world;
  v2 = (WebCore *)API::Object::newObject(0x28uLL, 141);
  v3 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(v2);
  v4 = 0;
  result = WebKit::InjectedBundleScriptWorld::InjectedBundleScriptWorld(v2, v3, (const WTF::String *)&v4);
  WebKit::InjectedBundleScriptWorld::normalWorld(void)::world = (uint64_t)v2;
  return result;
}

WebKit::InjectedBundleScriptWorld *WebKit::InjectedBundleScriptWorld::InjectedBundleScriptWorld(WebKit::InjectedBundleScriptWorld *this, WebCore::DOMWrapperWorld *a2, const WTF::String *a3)
{
  _DWORD *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  uint64_t v11;
  WTF *v12;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E34EA0C8;
  ++*(_DWORD *)a2;
  *((_QWORD *)this + 3) = a2;
  v6 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v6 += 2;
  *((_QWORD *)this + 4) = v6;
  {
    WebKit::allWorlds(void)::map = 0;
  }
  WTF::WeakPtrFactory<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded((WebCore::DOMWrapperWorld *)((char *)a2 + 8), (uint64_t)a2);
  v7 = (WTF *)*((_QWORD *)a2 + 1);
  ++*(_DWORD *)v7;
  v12 = v7;
  WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleScriptWorld&>(&WebKit::allWorlds(void)::map, (uint64_t *)&v12, (uint64_t)this, (uint64_t)&v11);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, v8);
    else
      --*(_DWORD *)v9;
  }
  return this;
}

WTF *WTF::WeakPtrFactory<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded(WTF *result, uint64_t a2)
{
  WTF **v3;
  void *v4;
  uint64_t v5;

  if (!*(_QWORD *)result)
  {
    v3 = (WTF **)result;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    result = *v3;
    *v3 = (WTF *)v5;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF *)WTF::fastFree(result, v4);
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleScriptWorld&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t *v20;
  WTF *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a2;
  v13 = *(_QWORD *)(*a2 + 8);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (uint64_t *)(v8 + 16 * v19);
    v21 = (WTF *)*v20;
    if (!*v20)
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        v12 = *a2;
        v20 = v11;
      }
      *a2 = 0;
      v25 = (WTF *)*v20;
      *v20 = v12;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
          WTF::fastFree(v25, a2);
        else
          --*(_DWORD *)v25;
      }
      if (!*(_QWORD *)(a3 + 16))
      {
        v26 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v26 = 1;
        *(_QWORD *)(v26 + 8) = a3;
        v27 = *(unsigned int **)(a3 + 16);
        *(_QWORD *)(a3 + 16) = v26;
        if (v27)
        {
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v27);
            WTF::fastFree((WTF *)v27, a2);
          }
        }
      }
      v30 = *(unsigned int **)(a3 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
      result = (uint64_t *)v20[1];
      v20[1] = (uint64_t)v30;
      if (result)
      {
        do
        {
          v38 = __ldaxr((unsigned int *)result);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, (unsigned int *)result));
        if (!v39)
        {
          atomic_store(1u, (unsigned int *)result);
          result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        }
      }
      v32 = *v6;
      if (*v6)
        v33 = *(_DWORD *)(v32 - 12) + 1;
      else
        v33 = 1;
      *(_DWORD *)(v32 - 12) = v33;
      v34 = *v6;
      if (*v6)
        v35 = *(_DWORD *)(v34 - 12);
      else
        v35 = 0;
      v36 = (*(_DWORD *)(v34 - 16) + v35);
      v37 = *(unsigned int *)(v34 - 4);
      if (v37 > 0x400)
      {
        if (v37 > 2 * v36)
          goto LABEL_29;
      }
      else if (3 * v37 > 4 * v36)
      {
LABEL_29:
        v24 = v34 + 16 * v37;
        v23 = 1;
        goto LABEL_30;
      }
      result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::expand(v6, (WTF **)v20);
      v20 = result;
      v34 = *v6;
      if (*v6)
        v37 = *(unsigned int *)(v34 - 4);
      else
        v37 = 0;
      goto LABEL_29;
    }
    if (v21 == (WTF *)-1)
    {
      v11 = (uint64_t *)(v8 + 16 * v19);
      goto LABEL_7;
    }
    if (*((_QWORD *)v21 + 1) == v13)
      break;
LABEL_7:
    v17 = i + v19;
  }
  if ((v9 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v8 - 4);
  v23 = 0;
  v24 = v8 + 16 * v22;
LABEL_30:
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v23;
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  unsigned int *v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  WTF *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t result;
  int v38;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (WTF *)-1)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = ~(*((_QWORD *)v14 + 1) << 32) + *((_QWORD *)v14 + 1);
          v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
          v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
          v24 = v20 & (((v23 + ~(v23 << 27)) >> 31) ^ ((_DWORD)v23 + ~((_DWORD)v23 << 27)));
          if (*(_QWORD *)(v19 + 16 * v24))
          {
            v38 = 1;
            do
              v24 = ((_DWORD)v24 + v38++) & v20;
            while (*(_QWORD *)(v19 + 16 * v24));
          }
          v25 = v19 + 16 * v24;
          v26 = *(unsigned int **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v26)
          {
            do
            {
              v33 = __ldaxr(v26);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v26));
            if (!v34)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          v27 = *(WTF **)v25;
          *(_QWORD *)v25 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 1)
              WTF::fastFree(v27, v10);
            else
              --*(_DWORD *)v27;
          }
          v28 = *v13;
          *v13 = 0;
          *(_QWORD *)v25 = v28;
          v29 = v6 + 16 * v11;
          v30 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          *(_QWORD *)(v25 + 8) = v30;
          v31 = *(unsigned int **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            do
            {
              v35 = __ldaxr(v31);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v31));
            if (!v36)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, v10);
            }
          }
          v32 = *v13;
          *v13 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 1)
              WTF::fastFree(v32, v10);
            else
              --*(_DWORD *)v32;
          }
          if (v13 == a3)
            v12 = v25;
        }
      }
      else
      {
        v15 = (unsigned int *)v13[1];
        v13[1] = 0;
        if (v15)
        {
          do
          {
            v17 = __ldaxr(v15);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v15));
          if (!v18)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v10);
          }
        }
        v16 = *v13;
        *v13 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
            WTF::fastFree(v16, v10);
          else
            --*(_DWORD *)v16;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v5, a2);
}

void WebKit::PlaybackSessionManagerProxy::~PlaybackSessionManagerProxy(WebKit::PlaybackSessionManagerProxy *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebKit::PlaybackSessionManagerProxy::~PlaybackSessionManagerProxy(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  _QWORD v16[4];

  *(_QWORD *)this = off_1E34C8800;
  v3 = *((_QWORD *)this + 8);
  v4 = *((_QWORD *)this + 9);
  v16[0] = "VideoPresentationManagerProxy";
  v16[1] = 30;
  v16[2] = "~PlaybackSessionManagerProxy";
  v16[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v16);
  v5 = *((_QWORD *)this + 4);
  if (v5 && *(_QWORD *)(v5 + 8))
    WebKit::PlaybackSessionManagerProxy::invalidate(this, a2);
  v6 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v10 = *((_QWORD *)this + 7);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = *((_QWORD *)this + 5);
  if (v11)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v11, a2);
  v12 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v15);
}

void sub_196D47AC8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;

  v4 = *(unsigned int **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v8 = *(_QWORD *)(v2 + 56);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 16), a2);
  v9 = *(_QWORD *)(v2 + 40);
  if (v9)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebKit::PlaybackSessionModelContext,WTF::RawPtrTraits<WebKit::PlaybackSessionModelContext>,WTF::DefaultRefDerefTraits<WebKit::PlaybackSessionModelContext>>,WTF::Ref<WebCore::PlaybackSessionInterfaceAVKit,WTF::RawPtrTraits<WebCore::PlaybackSessionInterfaceAVKit>,WTF::DefaultRefDerefTraits<WebCore::PlaybackSessionInterfaceAVKit>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v9, a2);
  v10 = *(unsigned int **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  *(_QWORD *)v2 = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 24), v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::FullscreenClient::setDelegate(uint64_t a1, void *a2)
{
  char v3;
  char v4;
  char v5;
  uint64_t result;
  char v7;

  objc_storeWeak((id *)(a1 + 16), a2);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xFE | objc_opt_respondsToSelector() & 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v3 = 2;
  else
    v3 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xFD | v3;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v4 = 4;
  else
    v4 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xFB | v4;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v5 = 8;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xF7 | v5;
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    v7 = 16;
  else
    v7 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xEF | v7;
  return result;
}

uint64_t WebKit::NavigationState::setHistoryDelegate(uint64_t a1, void *a2)
{
  char v3;
  char v4;
  uint64_t result;
  char v6;

  objc_storeWeak((id *)(a1 + 40), a2);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a1 + 48) & 0xFE | objc_opt_respondsToSelector() & 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v3 = 2;
  else
    v3 = 0;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a1 + 48) & 0xFD | v3;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v4 = 4;
  else
    v4 = 0;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a1 + 48) & 0xFB | v4;
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    v6 = 8;
  else
    v6 = 0;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a1 + 48) & 0xF7 | v6;
  return result;
}

void WebKit::RemoteDisplayListRecorderProxy::recordFillRectWithColor(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::FloatRect *a2, const WebCore::Color *a3)
{
  uint64_t v3;
  WebKit::RemoteRenderingBackendProxy *v5;
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  uint64_t v8;
  double v9;
  double v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  WebKit::RemoteImageBufferProxy *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  char *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v52;
  uint64_t v53;
  NSObject *v54;
  const char *v55;
  uint64_t v56;
  _BYTE *v57;
  _DWORD *v58;
  WebCore::Color *v59;
  WebKit::RemoteImageBufferProxy *v60;
  unsigned int *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  _BYTE buf[24];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v58 = a2;
  v59 = a3;
  v3 = *((_QWORD *)this + 481);
  if (!v3)
    return;
  v5 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
  if (!v5)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v5, &v61);
  if (!v61)
    return;
  v6 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v6)
    goto LABEL_93;
  v60 = 0;
  while (1)
  {
    v7 = v61;
    v8 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v6);
    v10 = v9 + 15.0;
    if (*((_QWORD *)v7 + 6) != v8)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v9 + 15.0);
      if (!buf[16])
      {
LABEL_83:
        v43 = 15;
        goto LABEL_86;
      }
      v35 = *(_QWORD *)buf;
      v36 = *(_QWORD *)&buf[8];
      v37 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - *(_QWORD *)buf;
      if (v37 < *(_QWORD *)buf)
      {
        v40 = 0;
        v39 = *(_QWORD *)&buf[8];
      }
      else
      {
        v39 = 0;
        if (v38 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          if (v38 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v38) = 2822;
            v39 = v36;
            v40 = v38 + 2;
          }
        }
      }
      v41 = (_QWORD *)((v35 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v41 >= v35 + v40)
      {
        v42 = (char *)v41 - v35;
        v43 = 17;
        if ((unint64_t)v41 - v35 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_86;
        v40 = (unint64_t)(v42 + 8);
        if ((unint64_t)(v42 + 8) > v39)
          goto LABEL_86;
        *v41 = v8;
      }
      if (!v39)
      {
        v43 = 17;
        goto LABEL_86;
      }
      v44 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v45 = *((_QWORD *)v7 + 7);
      if (v44 + 16 >= v45)
        v44 = 0;
      if (v40 <= 0x10)
        v40 = 16;
      v46 = v44 + v40;
      if (v45 <= v46)
        v47 = 0;
      else
        v47 = v46;
      *((_QWORD *)v7 + 9) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = v7[27];
      if (v49 == 0x80000000 || v50 != 0)
      {
        v52 = v50 + 1;
        v7[27] = v52;
        if (v52 >= v7[26])
        {
          if (*((_BYTE *)v7 + 96))
            MEMORY[0x19AEBA1A0](v7[21]);
          v7[27] = 0;
        }
      }
      *((_QWORD *)v7 + 6) = v8;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), &v62, v10);
    if (!v64)
      goto LABEL_83;
    *(_QWORD *)buf = v62;
    *(_QWORD *)&buf[8] = v63;
    *(_QWORD *)&buf[16] = 0;
    v11 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v12 = v11 >= v62;
    v13 = v11 - v62;
    if (v12)
    {
      if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v63)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v62 + v13) = 836;
        *(_QWORD *)&buf[16] = v13 + 2;
      }
    }
    IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v58);
    v6 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)buf, v59);
    if (*(_QWORD *)&buf[8])
    {
      v16 = *(_QWORD *)&buf[16];
      v17 = *((_QWORD *)v7 + 8);
      v18 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v19 = *((_QWORD *)v7 + 7);
      if (v18 + 16 >= v19)
        v18 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v16 = 16;
      v20 = v18 + v16;
      if (v19 <= v20)
        v21 = 0;
      else
        v21 = v20;
      *((_QWORD *)v7 + 9) = v21;
      v22 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v21, v22));
      if (v23 == 0x80000000 || v7[27])
      {
        if (*((_BYTE *)v7 + 96))
          MEMORY[0x19AEBA1A0](v7[21]);
        v7[27] = 0;
      }
      goto LABEL_27;
    }
    if (v64)
      break;
    __break(1u);
LABEL_93:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v6, *((_QWORD *)this + 480), &v60);
    v6 = v60;
    if (v60)
      v6 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v60);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, v62, v63);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v7 + 1);
  v43 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRectWithColor>(*(uint64_t *)buf, (uint64_t)&v58, v8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (!v43)
    goto LABEL_27;
LABEL_86:
  v54 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v55 = IPC::errorAsString(v43);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillRectWithColor";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v55;
    _os_log_impl(&dword_196BCC000, v54, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v56 = *((_QWORD *)this + 481);
  if (v56)
  {
    v57 = *(_BYTE **)(v56 + 8);
    if (v57)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v57);
  }
LABEL_27:
  v24 = v60;
  v60 = 0;
  if (v24)
  {
    v25 = *((_QWORD *)v24 + 1);
    if (__ldaxr((unsigned __int8 *)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v25))
    {
LABEL_31:
      v27 = *(_QWORD *)(v25 + 8);
      v28 = v27 - 1;
      *(_QWORD *)(v25 + 8) = v27 - 1;
      if (v27 == 1)
      {
        v53 = *(_QWORD *)(v25 + 16);
        v29 = *(_QWORD *)(v25 + 24);
        *(_QWORD *)(v25 + 24) = 0;
        v30 = v53 != 0;
      }
      else
      {
        v29 = 0;
        v30 = 1;
      }
      v31 = __ldxr((unsigned __int8 *)v25);
      if (v31 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v25))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_35:
      if (!v28)
      {
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        if (!v30)
          WTF::fastFree((WTF *)v25, v15);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v25);
    goto LABEL_31;
  }
LABEL_36:
  v32 = v61;
  v61 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      *(_QWORD *)buf = v32;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

_QWORD *WebKit::ResourceLoadStatisticsStore::interruptAllDatabases(WebKit::ResourceLoadStatisticsStore *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  if ((byte_1ECE7295A & 1) == 0)
  {
    *(_QWORD *)&dword_1ECE72970 = 0;
    qword_1ECE72968 = 0;
    byte_1ECE7295A = 1;
  }
  v14 = &qword_1ECE72968;
  v15 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&qword_1ECE72968);
  v16 = v1;
  v2 = qword_1ECE72968;
  if (qword_1ECE72968)
  {
    v3 = *(unsigned int *)(qword_1ECE72968 - 4);
    v4 = qword_1ECE72968 + 8 * v3;
    v17 = v4;
    v18 = v4;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  }
  else
  {
    v17 = 0;
    v18 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
    v4 = 0;
    v3 = 0;
  }
  v9 = &qword_1ECE72968;
  v10 = v4;
  v11 = v4;
  v12 = v4;
  v13 = v2 + 8 * v3;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v9);
  v6 = v15;
  v7 = (_QWORD *)v10;
  while (v6 != v7)
  {
    if (*(_QWORD *)(*(_QWORD *)(*v6 + 8) + 24))
      WebCore::SQLiteDatabase::interrupt();
    v8 = v6 + 1;
    v15 = v6 + 1;
    if (v6 + 1 != v16)
    {
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        if (++v8 == v16)
        {
          v8 = v16;
          break;
        }
      }
      v15 = v8;
    }
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
    v6 = v15;
    ++*((_DWORD *)v14 + 2);
  }
  return result;
}

void sub_196D48564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  CFTypeRef v37;

  CFRelease(*(CFTypeRef *)(v33 + 8));
  v36 = *(_QWORD *)(v34 - 56);
  *(_QWORD *)(v34 - 56) = 0;
  if (v36)
    CFRelease(*(CFTypeRef *)(v36 + 8));
  v37 = cf;
  cf = 0;
  if (v37)
    CFRelease(v37);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  _Unwind_Resume(a1);
}

void WebKit::WebPageProxy::loadRequest(uint64_t a1@<X0>, WebCore::ResourceRequestBase *a2@<X1>, char a3@<W2>, const void *a4@<X3>, uint64_t *a5@<X8>)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::URL *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;
  char v34;
  WebKit::WebProcessProxy *v35;
  uint64_t v36;
  _BYTE buf[12];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  CFTypeRef cf;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 729))
  {
    *a5 = 0;
  }
  else
  {
    v10 = qword_1ECE71320;
    if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(v11 + 744);
      v13 = *(_QWORD *)(v11 + 1896);
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
      if (v14)
        LODWORD(v14) = *(_DWORD *)(v14 + 108);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = a1;
      v38 = 2048;
      v39 = v12;
      v40 = 2048;
      v41 = v13;
      v42 = 1024;
      v43 = v14;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::loadRequest:", buf, 0x26u);
      if (*(_BYTE *)(a1 + 729))
        goto LABEL_8;
    }
    if (!*(_BYTE *)(a1 + 728))
    {
LABEL_8:
      v15 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a2);
      WebCore::RegistrableDomain::RegistrableDomain((WTF::StringImpl **)buf, v15);
      WebKit::WebPageProxy::launchProcess(a1, buf, 0);
      v17 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    v18 = *(_QWORD *)(a1 + 160);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 176);
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)buf, a2);
    WebKit::WebBackForwardList::protectedCurrentItem(*(_QWORD **)(a1 + 592), &v32);
    WebKit::WebNavigationState::createLoadRequestNavigation(&v36, v18, v19, (uint64_t)buf, &v32);
    if (v32)
      CFRelease(*(CFTypeRef *)(v32 + 8));
    v20 = cf;
    cf = 0;
    if (v20)
      CFRelease(v20);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)buf);
    v21 = v36;
    v22 = v36 + 512;
    WebKit::NavigationActionData::NavigationActionData((WebKit::NavigationActionData *)buf, (const WebKit::NavigationActionData *)(v36 + 512));
    v45 = 1;
    WebKit::NavigationActionData::operator=(v22, (uint64_t)buf);
    if (WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation((WebKit::WebPageProxy *)a1))
    {
      v23 = *(_QWORD *)(a1 + 208) + 200;
      v24 = WTF::fastMalloc((WTF *)0x28);
      v32 = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v24, v23, "Client navigation", 18, 1, 0);
      v33 = 1;
      std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(v21 + 3448, (uint64_t)&v32);
      WebKit::ProcessThrottlerTimedActivity::updateTimer((WebKit::ProcessThrottlerTimedActivity *)(v21 + 3408));
      if (v33 != -1)
        ((void (*)(WebKit::WebProcessProxy **, uint64_t *))off_1E34D4170[v33])(&v35, &v32);
    }
    WebKit::WebPageProxy::setLastNavigationWasAppInitiated((WebKit::WebPageProxy *)a1, a2);
    v25 = *(unsigned int **)(a1 + 208);
    v26 = v25 + 4;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    v35 = (WebKit::WebProcessProxy *)v25;
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1896);
    v29 = v36;
    v30 = *(_WORD *)(a1 + 1256);
    LOBYTE(v32) = 0;
    v34 = 0;
    WebKit::WebPageProxy::loadRequestWithNavigationShared((WebKit::WebPageProxy *)a1, &v35, v28, v36, (uint64_t)a2, a3, a4, 0, v30, (uint64_t)&v32, 0, 0);
    if (v34)
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v32, v31);
    if (v25)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v25 + 4);
    *a5 = v29;
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)buf);
  }
}

_QWORD *WebKit::WebBackForwardList::protectedCurrentItem@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = this[2];
  if (!v3 || !*(_QWORD *)(v3 + 8) || !*((_BYTE *)this + 48))
  {
    v5 = 0;
LABEL_8:
    *a2 = v5;
    return this;
  }
  v4 = this[5];
  if (v4 < *((unsigned int *)this + 9))
  {
    v5 = *(_QWORD *)(this[3] + 8 * v4);
    if (v5)
      this = CFRetain(*(CFTypeRef *)(v5 + 8));
    goto LABEL_8;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebKit::WebPageProxy::shouldForceForegroundPriorityForClientNavigation(WebKit::WebPageProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WebKit::WebPageProxy *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*((_QWORD *)this + 6) + 272) || (*(_WORD *)(*((_QWORD *)this + 4) + 48) & 4) != 0)
    return 0;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1584))(v3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1592))(v3);
  v6 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((_QWORD *)this + 4);
    v8 = *(_QWORD *)(v7 + 744);
    v9 = *(_QWORD *)(v7 + 1896);
    v10 = *(_QWORD *)(*((_QWORD *)this + 26) + 136);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    v11 = 134219008;
    v12 = this;
    v13 = 2048;
    v14 = v8;
    v15 = 2048;
    v16 = v9;
    v17 = 1024;
    v18 = v10;
    v19 = 1024;
    v20 = v4;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::WebPageProxy::shouldForceForegroundPriorityForClientNavigation() returns %d based on PageClient::canTakeForegroundAssertions()", (uint8_t *)&v11, 0x2Cu);
  }
  return v4;
}

void sub_196D48A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 1592))(v1);
  _Unwind_Resume(a1);
}

void WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::inlineSet<unsigned long long,API::Navigation*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *v16 = v11;
    v20 = *a4;
    if (v20)
      CFRetain(*(CFTypeRef *)(v20 + 8));
    v21 = v16[1];
    v16[1] = v20;
    if (v21)
      CFRelease(*(CFTypeRef *)(v21 + 8));
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v25 = *a2;
    if (*a2)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_26:
        v16 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a2, v16);
        v25 = *a2;
        if (*a2)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_26;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v25 + 16 * v28;
    *(_BYTE *)(a1 + 16) = 1;
    return;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v8 + 16 * v24;
  *(_BYTE *)(a1 + 16) = 0;
  v29 = *a4;
  if (*a4)
    CFRetain(*(CFTypeRef *)(v29 + 8));
  v30 = v16[1];
  v16[1] = v29;
  if (v30)
    CFRelease(*(CFTypeRef *)(v30 + 8));
}

uint64_t WebKit::WebPageProxy::setLastNavigationWasAppInitiated(WebKit::WebPageProxy *this, WebCore::ResourceRequest *a2)
{
  BOOL v4;
  BOOL v5;
  uint64_t result;

  v4 = objc_msgSend((id)WebCore::ResourceRequest::nsURLRequest(), "attribution") == 0;
  if (*(_BYTE *)(*((_QWORD *)this + 6) + 169))
    v5 = *(_BYTE *)(*((_QWORD *)this + 6) + 169) == 2;
  else
    v5 = v4;
  result = WebCore::ResourceRequestBase::setIsAppInitiated(a2);
  *((_BYTE *)this + 1288) = v5;
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadRequest>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2272;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::LoadParameters,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(WebKit::WebPageProxy *this, WebKit::WebProcessProxy *a2, const WTF::URL *a3, const WTF::URL *a4, const char ***a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  WebKit::SandboxExtensionImpl *v14;
  unsigned int v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  const char **v21;
  const char ***v22;
  const char **v23;
  uint64_t v24;
  const char **v25;
  const char ***v26;
  const char **v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WebKit::SandboxExtensionImpl *v30;
  uint64_t v31;
  unint64_t v32;
  const char **v33;
  const char ***v34;
  const char **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  char v38;
  _BYTE v39[31];
  WTF::StringImpl *v40;
  char v41;
  WTF::StringImpl *v42;
  _BYTE v43[32];
  char v44;
  _BYTE v45[31];
  char v46;
  _BYTE v47[31];
  _BYTE v48[32];

  if (WTF::URL::protocolIs())
  {
    v12 = *((_QWORD *)a2 + 17);
    if ((!v12 || !*(_BYTE *)(v12 + 104)) && (WebKit::AuxiliaryProcessProxy::wasTerminated(a2) & 1) == 0)
    {
      if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
      {
        if (a6 && WebKit::WebProcessProxy::hasAssumedReadAccessToURL(a2, a4))
          return;
        v13 = *((_QWORD *)a2 + 18);
        if (v13 && *(_QWORD *)(v13 + 352))
        {
          xpc_connection_get_audit_token();
          WTF::URL::fileSystemPath(a4);
          if (v40)
          {
            v14 = (WebKit::SandboxExtensionImpl *)*((_QWORD *)v40 + 1);
            v15 = *((_DWORD *)v40 + 1);
            v16 = ((unint64_t)*((unsigned int *)v40 + 4) >> 2) & 1;
          }
          else
          {
            v14 = 0;
            v15 = 0;
            v16 = 1;
          }
          if (!*(_QWORD *)(*((_QWORD *)a2 + 18) + 352))
            goto LABEL_68;
          xpc_connection_get_audit_token();
          *(_OWORD *)v47 = *(_OWORD *)&v43[1];
          *(_OWORD *)&v47[15] = *(_OWORD *)&v43[16];
          v46 = v43[0];
          WebKit::SandboxExtension::createHandleForReadByAuditToken(v14, (WebKit::SandboxExtensionImpl *)(v15 | (v16 << 32)), &v46, (uint64_t)v48);
          v18 = v40;
          v40 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v17);
            else
              *(_DWORD *)v18 -= 2;
          }
          if (v48[8])
          {
            v21 = *(const char ***)v48;
            *(_QWORD *)v48 = 0;
            std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a5, v21);
            if (!v48[8])
            {
LABEL_28:
              WebKit::WebProcessProxy::assumeReadAccessToBaseURL(a2, this, (WTF::StringImpl **)a4);
              return;
            }
            v22 = (const char ***)v48;
LABEL_27:
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v22);
            goto LABEL_28;
          }
        }
        else
        {
          WTF::URL::fileSystemPath(a4);
          WebKit::SandboxExtension::createHandle(0, (uint64_t)v43);
          v20 = *(WTF::StringImpl **)v48;
          *(_QWORD *)v48 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v19);
            else
              *(_DWORD *)v20 -= 2;
          }
          if (v43[8])
          {
            v23 = *(const char ***)v43;
            *(_QWORD *)v43 = 0;
            std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a5, v23);
            v22 = (const char ***)v43;
            goto LABEL_27;
          }
        }
      }
      if (WebKit::WebProcessProxy::hasAssumedReadAccessToURL(a2, a3))
        return;
      {
        WebKit::pageLevelMap(void)::map = 0;
      }
      *(_QWORD *)v43 = this;
      if (WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::WebPageProxy *>>,WebKit::WebPageProxy *>(&WebKit::pageLevelMap(void)::map, v43))
      {
        __break(0xC471u);
        JUMPOUT(0x196D492C0);
      }
      v24 = *((_QWORD *)a2 + 18);
      if (v24 && *(_QWORD *)(v24 + 352))
      {
        xpc_connection_get_audit_token();
        if (!*(_QWORD *)(*((_QWORD *)a2 + 18) + 352))
          goto LABEL_68;
        xpc_connection_get_audit_token();
        *(_OWORD *)v45 = *(_OWORD *)&v43[1];
        *(_OWORD *)&v45[15] = *(_OWORD *)&v43[16];
        v44 = v43[0];
        WebKit::SandboxExtension::createHandleForReadByAuditToken((WebKit::SandboxExtensionImpl *)"/", (WebKit::SandboxExtensionImpl *)0x100000001, &v44, (uint64_t)v48);
        if (v48[8])
        {
          v25 = *(const char ***)v48;
          *(_QWORD *)v48 = 0;
          std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a5, v25);
          if (!v48[8])
          {
LABEL_42:
            *((_BYTE *)this + 1117) = 1;
            *((_BYTE *)a2 + 528) = 1;
            return;
          }
          v26 = (const char ***)v48;
LABEL_41:
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v26);
          goto LABEL_42;
        }
      }
      else
      {
        WebKit::SandboxExtension::createHandle(0, (uint64_t)v43);
        if (v43[8])
        {
          v27 = *(const char ***)v43;
          *(_QWORD *)v43 = 0;
          std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a5, v27);
          v26 = (const char ***)v43;
          goto LABEL_41;
        }
      }
      if ((WTF::linkedOnOrAfterSDKWithBehavior() & 1) == 0)
      {
        *((_BYTE *)this + 1117) = 1;
        *((_BYTE *)a2 + 528) = 1;
      }
      WTF::URL::truncatedForUseAsBase(a3);
      WTF::URL::fileSystemPath((WTF::URL *)v43);
      if (!v42)
        goto LABEL_62;
      v29 = *((_QWORD *)a2 + 18);
      if (v29 && *(_QWORD *)(v29 + 352))
      {
        xpc_connection_get_audit_token();
        v30 = (WebKit::SandboxExtensionImpl *)*((_QWORD *)v42 + 1);
        v31 = *((unsigned int *)v42 + 1);
        v32 = (unint64_t)((*((_DWORD *)v42 + 4) >> 2) & 1) << 32;
        while (!*(_QWORD *)(*((_QWORD *)a2 + 18) + 352))
        {
LABEL_68:
          __break(1u);
          v30 = 0;
          v31 = 0;
          v32 = 0x100000000;
        }
        xpc_connection_get_audit_token();
        *(_OWORD *)v39 = *(_OWORD *)&v48[1];
        *(_OWORD *)&v39[15] = *(_OWORD *)&v48[16];
        v38 = v48[0];
        WebKit::SandboxExtension::createHandleForReadByAuditToken(v30, (WebKit::SandboxExtensionImpl *)(v32 | v31), &v38, (uint64_t)&v40);
        if (!v41)
          goto LABEL_58;
        v33 = (const char **)v40;
        v40 = 0;
        std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a5, v33);
        if (!v41)
          goto LABEL_57;
        v34 = (const char ***)&v40;
      }
      else
      {
        WebKit::SandboxExtension::createHandle(0, (uint64_t)v48);
        if (!v48[8])
          goto LABEL_58;
        v35 = *(const char ***)v48;
        *(_QWORD *)v48 = 0;
        std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100](a5, v35);
        v34 = (const char ***)v48;
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v34);
LABEL_57:
      WebKit::WebProcessProxy::assumeReadAccessToBaseURL(a2, this, (WTF::StringImpl **)v43);
LABEL_58:
      v36 = v42;
      v42 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v28);
        else
          *(_DWORD *)v36 -= 2;
      }
LABEL_62:
      v37 = *(WTF::StringImpl **)v43;
      *(_QWORD *)v43 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v28);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
  }
}

WebKit::NetworkIssueReporter *WebKit::WebPageProxy::prepareToLoadWebPage(uint64_t a1, uint64_t a2)
{
  WebKit::NetworkIssueReporter *v4;
  char v5;
  WebKit::NetworkIssueReporter *result;
  WebKit::NetworkIssueReporter *v7;

  v4 = (WebKit::NetworkIssueReporter *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 496))(*(_QWORD *)(a1 + 104));
  *(_QWORD *)(a2 + 552) = v4;
  *(_BYTE *)(a2 + 560) = v5;
  result = (WebKit::NetworkIssueReporter *)WebKit::NetworkIssueReporter::isEnabled(v4);
  if ((_DWORD)result)
  {
    v7 = (WebKit::NetworkIssueReporter *)WTF::fastMalloc((WTF *)0x18);
    WebKit::NetworkIssueReporter::NetworkIssueReporter(v7);
    return std::unique_ptr<WebKit::NetworkIssueReporter>::reset[abi:sn180100]((WebKit::NetworkIssueReporter **)(a1 + 1328), v7);
  }
  return result;
}

uint64_t WebKit::WebPageProxy::preconnectTo(uint64_t result, WebCore::ResourceRequestBase *this)
{
  uint64_t v3;
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const WTF::URL *v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 264) + 208) + 417))
  {
    v3 = result;
    v4 = *(_BYTE *)(result + 1264);
    WebCore::ResourceRequestBase::setIsAppInitiated(this);
    WebCore::ResourceRequestBase::httpUserAgent(this);
    v6 = v12;
    if (v12)
    {
      v7 = *((_DWORD *)v12 + 1);
      v12 = 0;
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v5);
        if (v7)
          goto LABEL_15;
      }
      else
      {
        *(_DWORD *)v6 -= 2;
        if (v7)
          goto LABEL_15;
      }
    }
    WebKit::WebPageProxy::predictedUserAgentForRequest(v3, this, &v12);
    v9 = v12;
    if (v12)
    {
      if (*((_DWORD *)v12 + 1))
      {
        WebCore::ResourceRequestBase::setHTTPUserAgent(this, (const WTF::String *)&v12);
        v9 = v12;
        v12 = 0;
        if (!v9)
          goto LABEL_15;
      }
      else
      {
        v12 = 0;
      }
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
LABEL_15:
    v10 = (const WTF::URL *)WebCore::ResourceRequestBase::url(this);
    WebCore::ResourceRequestBase::setFirstPartyForCookies(this, v10);
    WebCore::ResourceRequestBase::setPriority();
    v11 = WebKit::WebsiteDataStore::networkProcess(*(WebKit::WebsiteDataStore **)(v3 + 264));
    return WebKit::NetworkProcessProxy::preconnectTo(v11, *(_QWORD *)(*(_QWORD *)(v3 + 264) + 24), *(_QWORD *)(*(_QWORD *)(v3 + 32) + 744), *(_QWORD *)(*(_QWORD *)(v3 + 32) + 1896), this, v4, *(_WORD *)(v3 + 1256));
  }
  return result;
}

uint64_t WebKit::WebPageProxy::predictedUserAgentForRequest@<X0>(uint64_t this@<X0>, const WebCore::ResourceRequest *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _DWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v4 = this;
  v6 = *(_DWORD **)(this + 328);
  if (v6 && v6[1])
    goto LABEL_17;
  this = (uint64_t)API::PageConfiguration::Data::LazyInitializedRef<API::WebsitePolicies,&API::PageConfiguration::Data::createWebsitePolicies>::get((API::WebsitePolicies **)(*(_QWORD *)(this + 48) + 56));
  v8 = this;
  v6 = *(_DWORD **)(this + 64);
  if (v6)
  {
    if (v6[1])
      goto LABEL_17;
  }
  this = *(_QWORD *)(this + 88);
  if (!this)
  {
LABEL_16:
    v6 = *(_DWORD **)(v4 + 304);
    if (!v6)
    {
LABEL_18:
      *a3 = v6;
      return this;
    }
LABEL_17:
    *v6 += 2;
    goto LABEL_18;
  }
  v9 = *(_DWORD *)this;
  v10 = *(_DWORD *)(this + 4);
  *(_DWORD *)this += 2;
  if (v9)
  {
    *(_DWORD *)this = v9;
    if (!v10)
      goto LABEL_16;
  }
  else
  {
    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
    if (!v10)
      goto LABEL_16;
  }
  this = WebKit::WebPageProxy::useDesktopClassBrowsing(v4, (const WebCore::ResourceRequest *)*(unsigned __int8 *)(v8 + 130), *(_BYTE *)(v8 + 134), a2);
  if ((this & 1) == 0)
    goto LABEL_16;
  v11 = *(WTF::StringImpl **)(v8 + 88);
  if (v11)
    *(_DWORD *)v11 += 2;
  v13 = v11;
  WebCore::standardUserAgentWithApplicationName();
  this = (uint64_t)v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      return WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  return this;
}

void sub_196D4958C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::PreconnectTo>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 417;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceRequest const&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceRequest const&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain> const&>,0ul,1ul,2ul,3ul,4ul,5ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

unint64_t WebKit::UIDelegate::UIClient::dataDetectionReferenceDate(WebKit::UIDelegate::UIClient *this)
{
  uint64_t v1;
  uint64_t v2;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  id v7;
  WebCore::DataDetection *v8;
  NSDictionary *v9;
  uint64_t ReferenceDate;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;

  v1 = *((_QWORD *)this + 2);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0)
  {
    v12 = 0;
LABEL_12:
    v13 = 0;
    return v13 | v12;
  }
  if (((*(unsigned int *)(v2 + 24) | ((unint64_t)(*(unsigned __int16 *)(v2 + 28) | (*(unsigned __int8 *)(v2 + 30) << 16)) << 32)) & 0x1000000000) == 0
    || (WeakRetained = objc_loadWeakRetained((id *)(v2 + 16))) == 0)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v5 = WeakRetained;
  v6 = *((_QWORD *)this + 2);
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  v7 = objc_loadWeakRetained((id *)(v6 + 8));
  v8 = (WebCore::DataDetection *)objc_msgSend(v5, "_dataDetectionContextForWebView:", v7);
  ReferenceDate = WebCore::DataDetection::extractReferenceDate(v8, v9);
  v11 = ReferenceDate;
  v12 = ReferenceDate & 0xFFFFFFFFFFFFFF00;
  if (v7)
    CFRelease(v7);
  CFRelease(v5);
  v13 = v11;
  return v13 | v12;
}

void sub_196D49780(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
            CFRelease(*(CFTypeRef *)(v27 + 8));
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            CFRelease(*(CFTypeRef *)(v30 + 8));
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            CFRelease(*(CFTypeRef *)(v16 + 8));
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

void WebKit::LoadParameters::~LoadParameters(WebKit::LoadParameters *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 464, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  if (*((_BYTE *)this + 416))
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::LoadParameters *)((char *)this + 304), v3);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v3);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v3);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)this + 30);
  v11 = (const void *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v11)
    CFRelease(v11);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::LoadParameters *)((char *)this + 40));
  v13 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
}

void WebKit::WebPage::loadRequest(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  WebKit::WebProcess *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  WebCore::PublicSuffixStore *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  const void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int *v28;
  __int16 v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  void *v35;
  WebKit::WebProcess *v36;
  uint64_t v37;
  WebKit::WebProcess *v38;
  WebKit::WebProcess *v39;
  WebKit::WebProcess *v40;
  WebKit::WebProcess *v41;
  _BYTE v42[56];
  WTF::StringImpl *v43[2];
  __int128 v44;
  __int128 v45;
  _OWORD v46[15];
  __int128 cf;
  uint64_t v48;
  _BYTE buf[12];
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  char v61;
  __int16 v62;
  char v63;
  char v64;
  __int16 v65;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(unsigned __int8 *)(a2 + 425);
    v8 = (*(unsigned __int8 *)(a2 + 188) >> 2) & 1;
    if (*(_BYTE *)(a2 + 536))
      v9 = *(_QWORD *)(a2 + 528);
    else
      v9 = 0;
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)&buf[4] = a1;
    v50 = 2048;
    v51 = v5;
    v52 = 2048;
    v53 = v6;
    v54 = 1024;
    v55 = v7;
    v56 = 1024;
    v57 = v8;
    v58 = 2048;
    v59 = v9;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::loadRequest: navigationID=%llu, shouldTreatAsContinuingLoad=%u, lastNavigationWasAppInitiated=%d, existingNetworkResourceLoadIdentifierToResume=%llu", buf, 0x36u);
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v11 = *(_QWORD *)(a1 + 88);
    if (!v11)
      return;
    goto LABEL_11;
  }
  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v41 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = WebKit::WebProcess::WebProcess(v41);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
    if (!*(_BYTE *)(a2 + 32))
      __break(1u);
  }
  v11 = WebKit::WebProcess::webFrame((uint64_t)v10, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (v11)
  {
LABEL_11:
    CFRetain(*(CFTypeRef *)(v11 + 8));
    v12 = *(_QWORD *)(v11 + 24);
    if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0 && !*(_BYTE *)(v13 + 144) || (v13 = *(_QWORD *)(v11 + 40)) != 0)
    {
      v14 = (unsigned int *)(v13 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      *(_BYTE *)(a1 + 2251) = (*(_BYTE *)(a2 + 188) & 4) != 0;
      *(_WORD *)(v11 + 104) = *(_WORD *)(a2 + 520);
      *(_BYTE *)(a1 + 2250) = 1;
      {
        v16 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v38 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v16 = WebKit::WebProcess::WebProcess(v38);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v16;
      }
      v17 = *((_QWORD *)v16 + 40);
      v18 = *(_QWORD *)(a2 + 536);
      *(_QWORD *)(v17 + 96) = *(_QWORD *)(a2 + 528);
      *(_BYTE *)(v17 + 104) = v18;
      *(_QWORD *)(a1 + 1896) = *(_QWORD *)(a2 + 8);
      std::__optional_storage_base<WebKit::WebsitePoliciesData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::WebsitePoliciesData,false>>((WebKit::WebsitePoliciesData *)(a1 + 1904), a2 + 304);
      WebKit::WebPage::SandboxExtensionTracker::beginLoad((const char ****)(a1 + 688), (const char ***)(a2 + 240));
      v19 = *(_QWORD *)(a1 + 360);
      {
        v39 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v39);
      }
      v20 = *(const void **)(a2 + 432);
      *(_QWORD *)buf = &off_1E34E0668;
      WebKit::UserData::transform(v20, (uint64_t)buf, v43);
      v21 = (WebCore::PublicSuffixStore *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl *))(*(_QWORD *)v19 + 16))(v19, a1, a2 + 40, v43[0]);
      v22 = v43[0];
      v43[0] = 0;
      if (v22)
        CFRelease(*((CFTypeRef *)v22 + 1));
      WebCore::PublicSuffixStore::singleton(v21);
      WebCore::PublicSuffixStore::addPublicSuffix();
      v23 = *(_QWORD *)(a2 + 552);
      *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 560);
      *(_QWORD *)(a1 + 280) = v23;
      v48 = 0;
      cf = 0u;
      memset(v46, 0, sizeof(v46));
      v44 = 0u;
      v45 = 0u;
      *(_OWORD *)v43 = 0u;
      WebCore::SubstituteData::SubstituteData((WebCore::SubstituteData *)v43);
      MEMORY[0x19AEAF100](buf, v13, a2 + 40, v43);
      v25 = (const void *)cf;
      *(_QWORD *)&cf = 0;
      if (v25)
        CFRelease(v25);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v46, v24);
      v27 = v43[1];
      v43[1] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = (unsigned int *)v43[0];
      v43[0] = 0;
      if (v28)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v28, v26);
      v63 = *(_BYTE *)(a2 + 424);
      v61 = *(_BYTE *)(a2 + 425);
      v62 = *(_WORD *)(a2 + 440);
      WTF::String::operator=(&v60, (WTF::StringImpl *)(a2 + 448));
      if (*(_BYTE *)(a2 + 568))
        v64 = 1;
      if (*(_BYTE *)(a2 + 572))
      {
        v29 = *(_WORD *)(a2 + 570);
        if (!v66)
          v66 = 1;
        v65 = v29;
      }
      if (*(_DWORD *)(a2 + 456))
      {
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 160);
        if (v30)
        {
          if (!*(_BYTE *)(v30 + 144))
          {
            v31 = (unsigned int *)(v30 + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 + 1, v31));
            *(_DWORD *)(*(_QWORD *)(v30 + 280) + 328) |= *(_DWORD *)(a2 + 456);
            WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v31);
          }
        }
      }
      v33 = a2 + 464;
      v42[0] = 0;
      v42[48] = 0;
      std::__optional_copy_assign_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)v43, v33);
      std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OwnerPermissionsPolicyData,false>>(v33, (uint64_t)v42);
      std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v34);
      if (LOBYTE(v46[0]))
        WebCore::Frame::setOwnerPermissionsPolicy();
      std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v43, v35);
      WebCore::FrameLoader::load();
      MEMORY[0x19AEAF10C](buf);
      WebKit::SendStopResponsivenessTimer::~SendStopResponsivenessTimer((WebKit::SendStopResponsivenessTimer *)buf);
      {
        v36 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v40 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v36 = WebKit::WebProcess::WebProcess(v40);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v36;
      }
      v37 = *((_QWORD *)v36 + 40);
      *(_QWORD *)(v37 + 96) = 0;
      *(_BYTE *)(v37 + 104) = 0;
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v13 + 8));
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
}

WebCore::SubstituteData *WebCore::SubstituteData::SubstituteData(WebCore::SubstituteData *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  WTF::URL::invalidate((WebCore::SubstituteData *)((char *)this + 8));
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::SubstituteData *)((char *)this + 48));
  *((_QWORD *)this + 36) = 0;
  *((_BYTE *)this + 296) = 0;
  *((_BYTE *)this + 186) = *((_BYTE *)this + 186) & 0xF1 | 4;
  *((_BYTE *)this + 304) = 1;
  return this;
}

void WebKit::SendStopResponsivenessTimer::~SendStopResponsivenessTimer(WebKit::SendStopResponsivenessTimer *this)
{
  uint64_t v1;
  char v2;

  v1 = *((_QWORD *)WebKit::WebProcess::singleton(this) + 4);
  v2 = 0;
  IPC::Connection::send<Messages::WebProcessProxy::StopResponsivenessTimer>(v1, (uint64_t)&v2, 0, 0, 0);
}

void IPC::Decoder::decode<std::tuple<WebKit::LoadParameters>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebKit::LoadParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[576])
  {
    v4 = *a2;
    v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v6 = a2[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::LoadParameters>,void>::decode<IPC::Decoder>(_BYTE *a1, uint64_t *a2)
{
  void *v3;
  int v4;
  uint64_t v5[72];
  unsigned __int8 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::LoadParameters>(a2, v5);
  if (v6)
  {
    WebKit::LoadParameters::LoadParameters((uint64_t)a1, v5);
    v4 = v6;
    a1[576] = 1;
    if (v4)
      WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)v5, v3);
  }
  else
  {
    *a1 = 0;
    a1[576] = 0;
  }
}

uint64_t IPC::Decoder::decode<WebKit::LoadParameters>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::LoadParameters,void>::decode(a1, a2);
  if (!a2[576])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::RefCountedBase *IPC::ArgumentCoder<WebKit::LoadParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  WTF::RefCountedBase *v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;
  char *v13;
  char v14;
  char v15;
  int v16;
  char *v17;
  __int16 v18;
  WTF::RefCountedBase *result;
  WTF::RefCountedBase *v20;
  WTF::RefCountedBase *v21;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, (uint64_t *)(a2 + 16));
  WebCore::ResourceRequestBase::httpBody((WebCore::ResourceRequestBase *)(a2 + 40));
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 40));
  v5 = v21;
  v20 = v21;
  v21 = 0;
  IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(a1, (_DWORD **)&v20);
  if (v5)
    WTF::RefCounted<WebCore::FormData>::deref(v5);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, (const char ***)(a2 + 240));
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((uint64_t)a1, *(const void **)(a2 + 248), *(_QWORD *)(a2 + 256));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 264));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 272));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 280));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 288));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 296));
  IPC::ArgumentCoder<std::optional<WebKit::WebsitePoliciesData>,void>::encode<IPC::Encoder,std::optional<WebKit::WebsitePoliciesData>>(a1, a2 + 304);
  v6 = *(_BYTE *)(a2 + 424);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = *(_BYTE *)(a2 + 425);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(a1, (uint64_t *)(a2 + 432));
  v8 = *(_BYTE *)(a2 + 440);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  v9 = *(_BYTE *)(a2 + 441);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *(_BYTE *)(a2 + 442);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)(a2 + 448));
  v11 = *(_DWORD *)(a2 + 456);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  v12 = *(unsigned __int8 *)(a2 + 512);
  v13 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v12)
  {
    *v13 = 1;
    if (!*(_BYTE *)(a2 + 512))
      goto LABEL_14;
    IPC::ArgumentCoder<WebCore::OwnerPermissionsPolicyData,void>::encode(a1, a2 + 464);
  }
  else
  {
    *v13 = 0;
  }
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)(a2 + 520));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 528));
  v14 = *(_BYTE *)(a2 + 544);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v14;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t *)(a2 + 552));
  v15 = *(_BYTE *)(a2 + 568);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v15;
  v16 = *(unsigned __int8 *)(a2 + 572);
  v17 = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v16)
  {
    *v17 = 1;
    if (*(_BYTE *)(a2 + 572))
    {
      v18 = *(_WORD *)(a2 + 570);
      *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v18;
      goto LABEL_11;
    }
LABEL_14:
    result = (WTF::RefCountedBase *)std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  *v17 = 0;
LABEL_11:
  result = v21;
  v21 = 0;
  if (result)
    return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
  return result;
}

void sub_196D4A448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::RefCountedBase *a10)
{
  WTF::RefCountedBase *v10;

  if (v10)
    WTF::RefCounted<WebCore::FormData>::deref(v10);
  if (a10)
    WTF::RefCounted<WebCore::FormData>::deref(a10);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, (char *)a2);
  v4 = *(_BYTE *)(a2 + 2);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<std::optional<WebKit::WebsitePoliciesData>,void>::encode<IPC::Encoder,std::optional<WebKit::WebsitePoliciesData>>(a1, a2 + 32);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, a2 + 152);
  IPC::ArgumentCoder<std::optional<WebKit::PolicyDecisionConsoleMessage>,void>::encode<IPC::Encoder,std::optional<WebKit::PolicyDecisionConsoleMessage>>(a1, a2 + 168);
}

char *IPC::ArgumentCoder<std::optional<WebKit::WebsitePoliciesData>,void>::encode<IPC::Encoder,std::optional<WebKit::WebsitePoliciesData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  id v6;

  v4 = *(unsigned __int8 *)(a2 + 112);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 112))
    {
      return IPC::ArgumentCoder<WebKit::WebsitePoliciesData,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)IPC::Connection::send<Messages::WebProcessProxy::StopResponsivenessTimer>(v6);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::WebProcessProxy::StopResponsivenessTimer>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v16;

  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 2565;
  *(_QWORD *)(v9 + 8) = a3;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v13, v14);
  }
  return v11;
}

void WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0::operator()(void)::{lambda(void)#4},void>::call(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + 128);
  API::createExtension(&v2, (uint64_t *)(a1 + 16), a1 + 24);
  std::system_category();
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()(v1, &v2);
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v6 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

unsigned int *API::createExtension(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  unsigned int *result;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;

  WebKit::NetworkCache::Data::tryCreateSharedMemory((WebKit::NetworkCache::Data *)(a3 + 72), &v19);
  if (v19)
  {
    v18 = v19;
    v6 = 64;
    if (*(_DWORD *)a3 < 0xCu)
      v6 = 48;
    v7 = *(_QWORD *)(a3 + 16);
    v8 = v6 + *(_QWORD *)(a3 + 8);
    v9 = *(_QWORD *)(a3 + 24);
    v10 = *(_QWORD *)(a3 + 32);
    v19 = 0;
    v17 = *(_QWORD *)(a3 + 40);
    v11 = *a2;
    *a2 = 0;
    v12 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(v12 + 8) = 1;
    *(_QWORD *)v12 = off_1E34CB390;
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(v12 + 24) = v18;
    *(_QWORD *)(v12 + 32) = v8;
    *(_QWORD *)(v12 + 40) = v7;
    *(_QWORD *)(v12 + 48) = v8 + v7;
    *(_QWORD *)(v12 + 56) = v9;
    *(_QWORD *)(v12 + 64) = v8 + v7 + v9;
    *(_QWORD *)(v12 + 72) = v10;
    *(_QWORD *)(v12 + 80) = v8 + v7 + v9 + v10;
    *(_QWORD *)(v12 + 88) = v17;
    v13 = API::Object::newObject(0x38uLL, 47);
    *(_QWORD *)v13 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v13);
    *(_QWORD *)v13 = &off_1E34D9208;
    v14 = *(void **)(a3 + 72);
    *(_QWORD *)(v13 + 16) = v12;
    *(_QWORD *)(v13 + 24) = v14;
    if (v14)
      os_retain(v14);
    v15 = *(_OWORD *)(a3 + 80);
    *(_BYTE *)(v13 + 48) = *(_BYTE *)(a3 + 96);
    *(_OWORD *)(v13 + 32) = v15;
    result = v19;
    *a1 = v13;
    v19 = 0;
    if (result)
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  }
  else
  {
    result = (unsigned int *)417;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<API::ContentRuleListStore::lookupContentRuleListFile(WTF::String &&,WTF::String &,WTF::CompletionHandler<void ()(WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::error_code)>)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34D94C8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return WTF::fastFree(this, a2);
}

void WebKit::NetworkProcessProxy::didReceiveNetworkProcessProxyMessage(WebKit::NetworkProcessProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v9;
  _BYTE *v10;
  unsigned int *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  char v14;
  unint64_t v15;
  char v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _BYTE *v23;
  WTF::StringImpl *v24;
  char v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  __int128 v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  char v50;
  WTF::StringImpl **v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  WTF::StringImpl *v69;
  unsigned __int16 v70;
  char v71;
  unsigned __int16 v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  char v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  unint64_t v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  char v104;
  unint64_t v105;
  WTF::StringImpl *v106;
  char v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  char v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  unint64_t v116;
  char v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned __int8 *v121;
  unsigned int v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  unint64_t v128;
  WTF::StringImpl *v129;
  unint64_t v130;
  unsigned __int8 *v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  WTF::StringImpl *v138;
  __int128 v139;
  uint64_t v140;
  const void *v141;
  WTF::StringImpl *v142;
  unsigned __int16 v143;
  unsigned __int8 v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unsigned int v149;
  unint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  unint64_t v154;
  char v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  unsigned __int16 v162;
  void *v163;
  char v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void *v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  unint64_t v173;
  char v174;
  unint64_t v175;
  char v176;
  unint64_t v177;
  char v178;
  unint64_t v179;
  char v180;
  uint64_t v181;
  unint64_t v182;
  char v183;
  _QWORD *v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  unint64_t v188;
  WTF::StringImpl *v189;
  char v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  _BYTE *v194;
  unsigned int v195;
  WTF::RefCountedBase *v196;
  unint64_t v197;
  char v198;
  unint64_t v199;
  WTF::StringImpl *v200;
  unint64_t v201;
  unint64_t v202;
  int *v203;
  int v204;
  int v205;
  unint64_t v206;
  char v207;
  unint64_t v208;
  WTF::StringImpl *v209;
  char v210;
  __int128 v211;
  unint64_t v212;
  char v213;
  unint64_t v214;
  WTF::StringImpl *v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t *v218;
  unint64_t v219;
  uint64_t v221;
  int v222;
  int v223;
  unint64_t v224;
  char v225;
  unint64_t v226;
  unint64_t v227;
  char v228;
  unint64_t v229;
  WTF::StringImpl *v230;
  char v231;
  unint64_t v232;
  unint64_t v233;
  unsigned __int8 *v234;
  unsigned int v235;
  BOOL v236;
  uint64_t v237;
  __int128 v238;
  unint64_t v239;
  char v240;
  unint64_t v241;
  WTF::StringImpl *v242;
  char v243;
  unint64_t v244;
  char v245;
  unint64_t v246;
  char v247;
  char v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t *v252;
  unint64_t v253;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t *v259;
  uint64_t v260;
  _BYTE *v261;
  uint64_t v262;
  int v263;
  char v264;
  unint64_t v265;
  char v266;
  unint64_t v267;
  char v268;
  _BYTE *v269;
  unsigned __int16 v270;
  char v271;
  unint64_t v272;
  char v273;
  unint64_t v274;
  char v275;
  unint64_t v276;
  char v277;
  unint64_t v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  char v281;
  uint64_t v282;
  WTF::StringImpl *v283;
  __int128 v284;
  unint64_t v285;
  char v286;
  unint64_t v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  int v290;
  unint64_t v291;
  void *v292;
  WTF::StringImpl *v293;
  uint64_t v294;
  WTF::StringImpl *v295;
  WTF::StringImpl *v296;
  unint64_t v297;
  WTF::StringImpl *v298;
  uint64_t v299;
  WTF::StringImpl *v300;
  unint64_t v301;
  char v302;
  unint64_t v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  unint64_t v306;
  char v307;
  unint64_t v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  char v311;
  uint64_t v312;
  unint64_t v313;
  char v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  char v322;
  WTF::StringImpl *v323;
  uint64_t v324;
  WTF::StringImpl *v325;
  unint64_t v326;
  char v327;
  WTF::StringImpl *v328;
  uint64_t v329;
  WTF::StringImpl *v330;
  unint64_t v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  uint64_t v334;
  WTF::StringImpl *v335;
  unint64_t v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  uint64_t v339;
  WTF::StringImpl *v340;
  const void *v341;
  const void *v342;
  WTF::StringImpl *v343;
  WTF::StringImpl *v344;
  unint64_t v345;
  char v346;
  WTF::StringImpl *v347;
  uint64_t v348;
  WTF::StringImpl *v349;
  CFTypeRef v350;
  CFTypeRef v351;
  WTF::StringImpl *v352;
  CFTypeRef v353;
  CFTypeRef v354;
  WTF::StringImpl *v355;
  unint64_t v356;
  char v357;
  WTF::StringImpl *v358;
  uint64_t v359;
  WTF::StringImpl *v360;
  WTF::StringImpl *v361;
  WTF::StringImpl *v362;
  WTF::StringImpl *v363;
  CFTypeRef v364;
  WTF::StringImpl *v365;
  CFTypeRef v366;
  WTF::StringImpl *v367;
  CFTypeRef v368;
  uint64_t v369;
  WTF::StringImpl *v370;
  WTF::StringImpl *v371;
  WTF::StringImpl *v372;
  unint64_t v373;
  WTF::StringImpl *v374;
  uint64_t v375;
  WTF::StringImpl *v376;
  int v377;
  WTF::StringImpl *v378;
  WTF::StringImpl *v379;
  uint64_t v380;
  WTF::StringImpl *v381;
  WTF::StringImpl *v382;
  uint64_t v383;
  WTF::StringImpl *v384;
  WTF::StringImpl *v385;
  WTF::StringImpl *v386;
  int v387;
  int v388;
  WTF::StringImpl *v389;
  WTF::StringImpl *v390;
  WTF::StringImpl *v391;
  uint64_t v392;
  WTF::StringImpl *v393;
  WTF::StringImpl *v394;
  uint64_t v395;
  uint64_t v396;
  WTF::StringImpl *v397;
  WTF::StringImpl *v398;
  unint64_t v399;
  void *v400;
  WTF::StringImpl *v401;
  uint64_t v402;
  WTF::StringImpl *v403;
  WTF::StringImpl *v404;
  WTF::StringImpl *v405;
  WTF::StringImpl *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  WTF::StringImpl *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  WTF::RefCountedBase *v484;
  CFTypeRef v485;
  WTF::StringImpl *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  _BYTE *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  WTF::StringImpl *v498;
  const void *v499;
  const void *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  WTF::StringImpl *v508;
  unint64_t v509;
  WTF::StringImpl *v510;
  uint64_t v511;
  WTF::StringImpl *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  WTF::StringImpl *v535;
  char v536;
  WTF::StringImpl *v537[2];
  __int128 v538;
  __int128 v539;
  uint64_t v540;
  uint64_t v541;
  __int128 v542;
  __int128 v543;
  WTF::StringImpl *v544;
  uint64_t v545;
  __int16 v546;
  char v547;
  _BYTE v548[88];
  __int128 v549;
  WTF::StringImpl *v550;
  uint64_t v551;
  __int16 v552;
  id v553[15];
  CFTypeRef v554;
  _BYTE v555[56];
  CFTypeRef v556;
  WTF::RefCountedBase *v557;
  char v558;
  char v559;
  CFTypeRef v560;
  WTF::StringImpl *v561[2];
  __int128 v562;
  _BYTE v563[24];
  int v564;
  __int16 v565;
  CFTypeRef v566;
  CFTypeRef v567;
  char v568;
  __int128 v569;
  BOOL v570;
  uint64_t v571;
  char v572;
  CFTypeRef v573[2];
  char v574;
  CFTypeRef v575;
  char v576;
  _BYTE v577[48];
  uint64_t v578;
  int v579;
  __int16 v580;
  uint64_t v581;
  char v582;
  char v583;
  char v584;
  char v585;
  __int128 v586;
  char v587;
  WTF::StringImpl *v588[2];
  __int128 v589;
  __int128 v590;
  char v591;
  uint64_t v592;
  __int128 v593;
  __int128 v594;
  WTF::StringImpl *v595;
  uint64_t v596;
  __int16 v597;
  char v598;
  char v599;
  uint64_t v600;

  v6 = (uint64_t *)a3;
  v9 = (unint64_t)v577;
  v10 = v548;
  v600 = *MEMORY[0x1E0C80C00];
  v11 = (unsigned int *)((char *)this + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  switch(*((_WORD *)a3 + 25))
  {
    case 0x12C:
      v13 = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v14)
        WebKit::NetworkProcessProxy::contentExtensionRules((unsigned int *)this, v13);
      goto LABEL_773;
    case 0x12D:
      v173 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v174)
        WebKit::NetworkProcessProxy::cookiesDidChange(this, v173);
      goto LABEL_773;
    case 0x12E:
      v135 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v136)
        goto LABEL_686;
      v137 = v135;
      IPC::Decoder::decode<WebCore::ResourceError>(v6, (uint64_t)v577);
      if (!v583)
      {
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v577, v138);
        goto LABEL_686;
      }
      v139 = *(_OWORD *)v577;
      *(_QWORD *)v577 = 0;
      *(_QWORD *)&v577[8] = 0;
      *(_OWORD *)&v548[8] = v139;
      *(_OWORD *)&v548[24] = *(_OWORD *)&v577[16];
      *(_OWORD *)&v548[40] = *(_OWORD *)&v577[32];
      *(_DWORD *)&v577[16] &= ~1u;
      *(_QWORD *)v548 = v137;
      *(_QWORD *)&v548[56] = v578;
      *(_DWORD *)&v548[64] = v579;
      *(_WORD *)&v548[68] = v580;
      v140 = v581;
      v578 = 0;
      v581 = 0;
      *(_QWORD *)&v548[72] = v140;
      v548[80] = v582;
      LOBYTE(v549) = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v577, v138);
      WebKit::NetworkProcessProxy::dataTaskDidCompleteWithError((uint64_t)this, *(uint64_t *)v548, (uint64_t)&v548[8]);
      if ((_BYTE)v549)
      {
        v141 = *(const void **)&v548[72];
        *(_QWORD *)&v548[72] = 0;
        if (v141)
          CFRelease(v141);
        v142 = *(WTF::StringImpl **)&v548[56];
        *(_QWORD *)&v548[56] = 0;
        if (v142)
        {
          if (*(_DWORD *)v142 == 2)
            WTF::StringImpl::destroy(v142, v48);
          else
            *(_DWORD *)v142 -= 2;
        }
        v371 = *(WTF::StringImpl **)&v548[16];
        *(_QWORD *)&v548[16] = 0;
        if (v371)
        {
          if (*(_DWORD *)v371 == 2)
            WTF::StringImpl::destroy(v371, v48);
          else
            *(_DWORD *)v371 -= 2;
        }
        goto LABEL_482;
      }
      goto LABEL_773;
    case 0x12F:
      v154 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v155)
        goto LABEL_674;
      v156 = v154;
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v6, (uint64_t)v548);
      if (!v548[16])
        goto LABEL_674;
      WebKit::NetworkProcessProxy::dataTaskDidReceiveData((uint64_t)this, v156, *(uint64_t *)v548, *(uint64_t *)&v548[8]);
      goto LABEL_773;
    case 0x130:
      v103 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v104)
      {
        v105 = v103;
        IPC::Decoder::decode<WebCore::ResourceResponse>(v6, v577);
        v107 = v585;
        if (v585)
        {
          *(_QWORD *)v548 = v105;
          std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v548[8], (uint64_t)v577);
          v107 = 1;
        }
        else
        {
          v548[0] = 0;
        }
        v555[0] = v107;
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v577, v106);
        if (v555[0])
          goto LABEL_330;
      }
      else
      {
        v548[0] = 0;
        v555[0] = 0;
      }
      v419 = *v6;
      v420 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v421 = v6[3];
      if (!v421)
        goto LABEL_773;
      if (!v420)
        goto LABEL_773;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v421 + 16))(v421, v419);
      if (!v555[0])
        goto LABEL_773;
LABEL_330:
      v331 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if ((_BYTE)v332)
      {
        *(_QWORD *)v577 = v331;
        v6 = (uint64_t *)&v577[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
        v333 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v333 = off_1E34B21D0;
        *((_QWORD *)v333 + 1) = *(_QWORD *)v577;
        v334 = *(_QWORD *)&v577[8];
        *(_QWORD *)&v577[8] = 0;
        *((_QWORD *)v333 + 2) = v334;
        v588[0] = v333;
        v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
        if (!v555[0])
          goto LABEL_590;
        WebKit::NetworkProcessProxy::dataTaskDidReceiveResponse((uint64_t)this, *(uint64_t *)v548, (uint64_t)&v548[8], (uint64_t *)v588);
        v335 = v588[0];
        v588[0] = 0;
        if (v335)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v335 + 8))(v335);
      }
      if (v555[0])
        goto LABEL_383;
      goto LABEL_773;
    case 0x131:
      v206 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v207)
      {
        v208 = v206;
        IPC::Decoder::decode<WebCore::AuthenticationChallenge>(v6, (uint64_t)v577);
        v210 = v587;
        if (v587)
        {
          *(_QWORD *)v548 = v208;
          WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)&v548[8], (uint64_t)v577);
          v211 = v586;
          v586 = 0uLL;
          *(_OWORD *)&v563[8] = v211;
          v210 = 1;
        }
        else
        {
          v548[0] = 0;
        }
        LOBYTE(v564) = v210;
        std::__optional_destruct_base<WebCore::AuthenticationChallenge,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationChallengeBase *)v577, v209);
        if ((_BYTE)v564)
          goto LABEL_341;
      }
      else
      {
        v548[0] = 0;
        LOBYTE(v564) = 0;
      }
      v428 = *v6;
      v429 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v430 = v6[3];
      if (!v430)
        goto LABEL_773;
      if (!v429)
        goto LABEL_773;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v430 + 16))(v430, v428);
      if (!(_BYTE)v564)
        goto LABEL_773;
LABEL_341:
      v336 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if ((_BYTE)v337)
      {
        *(_QWORD *)v577 = v336;
        v6 = (uint64_t *)&v577[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
        v338 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v338 = off_1E34B2180;
        *((_QWORD *)v338 + 1) = *(_QWORD *)v577;
        v339 = *(_QWORD *)&v577[8];
        *(_QWORD *)&v577[8] = 0;
        *((_QWORD *)v338 + 2) = v339;
        v588[0] = v338;
        v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
        if (!(_BYTE)v564)
          goto LABEL_590;
        WebKit::NetworkProcessProxy::dataTaskReceivedChallenge((uint64_t)this, *(uint64_t *)v548, (uint64_t)&v548[8], (uint64_t *)v588);
        v340 = v588[0];
        v588[0] = 0;
        if (v340)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v340 + 8))(v340);
      }
      if ((_BYTE)v564)
      {
        v341 = *(const void **)&v563[16];
        *(_QWORD *)&v563[16] = 0;
        if (v341)
          CFRelease(v341);
        v342 = *(const void **)&v563[8];
        *(_QWORD *)&v563[8] = 0;
        if (v342)
          CFRelease(v342);
        WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v548[8], v337);
      }
      goto LABEL_773;
    case 0x132:
      v239 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v240)
      {
        v241 = v239;
        IPC::Decoder::decode<WebCore::ResourceResponse>(v6, v577);
        if (v585)
        {
          IPC::Decoder::decode<WebCore::ResourceRequest>(v6, (uint64_t)v588);
          v243 = v599;
          if (v599)
          {
            if (!v585)
              goto LABEL_590;
            *(_QWORD *)v548 = v241;
            std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v548[8], (uint64_t)v577);
            std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v555, (uint64_t)v588);
            v243 = 1;
          }
          else
          {
            v548[0] = 0;
          }
          v568 = v243;
          std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v588);
        }
        else
        {
          v548[0] = 0;
          v568 = 0;
        }
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v577, v242);
        if (v568)
          goto LABEL_375;
      }
      else
      {
        v548[0] = 0;
        v568 = 0;
      }
      v431 = *v6;
      v432 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v433 = v6[3];
      if (!v433)
        goto LABEL_773;
      if (!v432)
        goto LABEL_773;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v433 + 16))(v433, v431);
      if (!v568)
        goto LABEL_773;
LABEL_375:
      v345 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if (v346)
      {
        *(_QWORD *)v577 = v345;
        v6 = (uint64_t *)&v577[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
        v347 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v347 = off_1E34B21A8;
        *((_QWORD *)v347 + 1) = *(_QWORD *)v577;
        v348 = *(_QWORD *)&v577[8];
        *(_QWORD *)&v577[8] = 0;
        *((_QWORD *)v347 + 2) = v348;
        v588[0] = v347;
        v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
        if (!v568)
          goto LABEL_590;
        WebKit::NetworkProcessProxy::dataTaskWillPerformHTTPRedirection((uint64_t)this, *(uint64_t *)v548, (uint64_t)&v548[8], (uint64_t)v555, (uint64_t)v588);
        v349 = v588[0];
        v588[0] = 0;
        if (v349)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v349 + 8))(v349);
      }
      if (v568)
      {
        v350 = v567;
        v567 = 0;
        if (v350)
          CFRelease(v350);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v555);
LABEL_383:
        v351 = v554;
        v554 = 0;
        if (v351)
          CFRelease(v351);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v548[8], v332);
      }
      goto LABEL_773;
    case 0x133:
      v157 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v158
        && (v159 = v157,
            v160 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>(v6),
            (v160 & 0xFF00000000) != 0)
        && (v161 = v160, v162 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataFetchOption>>(v6), v162 >= 0x100u)
        && (v164 = v162,
            IPC::Decoder::decode<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v6, v163, (uint64_t)v577), v577[16]))
      {
        *(_QWORD *)v548 = v159;
        *(_DWORD *)&v548[8] = v161;
        v548[12] = v164;
        v166 = *(_QWORD *)v577;
        *(_QWORD *)v577 = 0;
        *(_QWORD *)&v548[16] = v166;
        v167 = *(_QWORD *)&v577[8];
        *(_QWORD *)&v577[8] = 0;
        *(_QWORD *)&v548[24] = v167;
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v577, v165);
        v548[32] = 1;
        v168 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
        if (!(_BYTE)v169)
          goto LABEL_145;
        *(_QWORD *)v577 = v168;
        v6 = (uint64_t *)&v577[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
        v170 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v170 = off_1E34B2068;
        *((_QWORD *)v170 + 1) = *(_QWORD *)v577;
        v171 = *(_QWORD *)&v577[8];
        *(_QWORD *)&v577[8] = 0;
        *((_QWORD *)v170 + 2) = v171;
        v588[0] = v170;
        v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
        if (!v548[32])
          goto LABEL_590;
        WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(this, *(WTF::StringImpl ***)v548, *(int *)&v548[8], v548[12], (uint64_t)&v548[16], (uint64_t *)v588);
        v172 = v588[0];
        v588[0] = 0;
        if (v172)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v172 + 8))(v172);
        if (v548[32])
LABEL_145:
          WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v548[16], v169);
      }
      else
      {
        v315 = *v6;
        v316 = v6[1];
        *v6 = 0;
        v6[1] = 0;
        v317 = v6[3];
        if (v317)
          goto LABEL_777;
      }
      goto LABEL_773;
    case 0x134:
      v262 = IPC::Decoder::decode<WTF::OptionSet<WebKit::WebsiteDataType>>((uint64_t *)a3);
      if ((v262 & 0xFF00000000) == 0)
      {
        v548[0] = 0;
        LOBYTE(v549) = 0;
        goto LABEL_643;
      }
      v263 = v262;
      IPC::Decoder::decode<WebCore::ClientOrigin>(v6, v577);
      v264 = v581;
      if (!(_BYTE)v581)
        goto LABEL_304;
      v265 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if (v266
        && (v267 = v265,
            v23 = (_BYTE *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6),
            v268))
      {
        if (!(_BYTE)v581)
          goto LABEL_590;
        v269 = v23;
        *(_DWORD *)v548 = v263;
        v548[8] = 0;
        *(_DWORD *)&v548[32] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v548[8], (uint64_t)v577);
        v548[40] = 0;
        *(_DWORD *)&v548[64] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v548[40], (uint64_t)&v577[32]);
        *(_QWORD *)&v548[72] = v267;
        *(_QWORD *)&v548[80] = v269;
        v264 = 1;
      }
      else
      {
        v264 = 0;
LABEL_304:
        v548[0] = 0;
      }
      LOBYTE(v549) = v264;
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v577);
      if ((_BYTE)v549)
        goto LABEL_306;
LABEL_643:
      v437 = *v6;
      v438 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v439 = v6[3];
      if (!v439)
        goto LABEL_773;
      if (!v438)
        goto LABEL_773;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v439 + 16))(v439, v437);
      if (!(_BYTE)v549)
        goto LABEL_773;
LABEL_306:
      v321 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if (v322)
      {
        *(_QWORD *)v577 = v321;
        v6 = (uint64_t *)&v577[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
        v323 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v323 = off_1E34B2248;
        *((_QWORD *)v323 + 1) = *(_QWORD *)v577;
        v324 = *(_QWORD *)&v577[8];
        *(_QWORD *)&v577[8] = 0;
        *((_QWORD *)v323 + 2) = v324;
        v588[0] = v323;
        v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
        if (!(_BYTE)v549)
          goto LABEL_590;
        WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin((uint64_t)this, *(int *)v548, (const WebCore::SecurityOriginData *)&v548[8], *(uint64_t *)&v548[72], *(uint64_t *)&v548[80], (uint64_t *)v588);
        v325 = v588[0];
        v588[0] = 0;
        if (v325)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v325 + 8))(v325);
      }
      if ((_BYTE)v549)
      {
        if (*(_DWORD *)&v548[64] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E34B2020[*(unsigned int *)&v548[64]])(v577, &v548[40]);
        *(_DWORD *)&v548[64] = -1;
        if (*(_DWORD *)&v548[32] != -1)
          goto LABEL_314;
      }
      goto LABEL_773;
    case 0x135:
      v116 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v117)
        goto LABEL_686;
      v118 = v6[1];
      v119 = *v6;
      v120 = v6[2] - *v6;
      if (v118 <= v120)
      {
        v461 = 0;
        v462 = 0;
        *v6 = 0;
        v6[1] = 0;
        v463 = v6[3];
        if (v463)
        {
          if (v118)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v463 + 16))(v463);
            v462 = *v6;
            v461 = v6[1];
          }
          else
          {
            v461 = 0;
            v462 = 0;
          }
        }
      }
      else
      {
        v121 = (unsigned __int8 *)(v119 + v120);
        v6[2] = (uint64_t)(v121 + 1);
        if (v119)
        {
          v122 = *v121;
          if (v122 < 2)
          {
            v123 = v116;
            IPC::Decoder::decode<WTF::URL>(v6, v577);
            if (!v577[40])
              goto LABEL_686;
            *(_QWORD *)v548 = v123;
            v548[8] = v122 != 0;
            *(_QWORD *)&v548[16] = *(_QWORD *)v577;
            *(_OWORD *)&v548[24] = *(_OWORD *)&v577[8];
            *(_OWORD *)&v548[40] = *(_OWORD *)&v577[24];
            v548[56] = 1;
            WebKit::NetworkProcessProxy::didAllowPrivateTokenUsageByThirdPartyForTesting(this, v123, v122 != 0, (uint64_t)&v548[16]);
            if (!v548[56])
              goto LABEL_773;
            v124 = *(WTF::StringImpl **)&v548[16];
            *(_QWORD *)&v548[16] = 0;
            if (!v124)
              goto LABEL_773;
            goto LABEL_483;
          }
LABEL_678:
          *v6 = 0;
          v6[1] = 0;
          v465 = v6[3];
          if (v465 && v118)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v465 + 16))(v465, v119);
          goto LABEL_686;
        }
        v461 = v118;
        v462 = 0;
      }
      v118 = 0;
      v119 = 0;
      *v6 = 0;
      v6[1] = 0;
      v464 = v6[3];
      if (v464)
      {
        if (v461)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v464 + 16))(v464, v462, v461);
          v119 = *v6;
          v118 = v6[1];
        }
        else
        {
          v118 = 0;
          v119 = 0;
        }
      }
      goto LABEL_678;
    case 0x136:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL>>(v548, (uint64_t *)a3);
      if (!v548[48])
        goto LABEL_773;
      WebKit::NetworkProcessProxy::didBlockLoadToKnownTracker((uint64_t)this, *(uint64_t *)v548, (uint64_t)&v548[8]);
      if (!v548[48])
        goto LABEL_773;
      goto LABEL_769;
    case 0x137:
      v101 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v102)
        WebKit::NetworkProcessProxy::didCommitCrossSiteLoadWithDataTransferFromPrevalentResource((uint64_t)this, v101);
      goto LABEL_773;
    case 0x138:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL>>(v548, (uint64_t *)a3);
      if (!v548[48])
        goto LABEL_773;
      WebKit::NetworkProcessProxy::didNegotiateModernTLS((uint64_t)this, *(uint64_t *)v548, (uint64_t)&v548[8]);
      if (!v548[48])
        goto LABEL_773;
      goto LABEL_769;
    case 0x139:
      v224 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v225
        || (v226 = v224,
            v227 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6),
            !v228))
      {
        v548[0] = 0;
        v572 = 0;
        goto LABEL_593;
      }
      v229 = v227;
      IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>(v6, (uint64_t)v588);
      if (!BYTE8(v590))
      {
        v548[0] = 0;
        v572 = 0;
        goto LABEL_744;
      }
      IPC::Decoder::decode<WebCore::AuthenticationChallenge>(v6, (uint64_t)v577);
      v231 = v587;
      if (!v587)
        goto LABEL_739;
      v232 = v6[1];
      v230 = (WTF::StringImpl *)*v6;
      v233 = v6[2] - *v6;
      if (v232 <= v233)
      {
        v493 = 0;
        v494 = 0;
        *v6 = 0;
        v6[1] = 0;
        v495 = v6[3];
        if (v495)
        {
          if (v232)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v495 + 16))(v495);
            v494 = *v6;
            v493 = v6[1];
          }
          else
          {
            v493 = 0;
            v494 = 0;
          }
        }
      }
      else
      {
        v234 = (unsigned __int8 *)v230 + v233;
        v6[2] = (uint64_t)(v234 + 1);
        if (v230)
        {
          v235 = *v234;
          if (v235 < 2)
          {
            v236 = v235 != 0;
            v23 = (_BYTE *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v6);
            if ((_BYTE)v230)
            {
              if (!BYTE8(v590) || !v587)
                goto LABEL_590;
              v237 = (uint64_t)v23;
              *(_QWORD *)v548 = v226;
              *(_QWORD *)&v548[8] = v229;
              v548[16] = 0;
              v548[48] = 0;
              if ((_BYTE)v590)
              {
                *(_DWORD *)&v548[40] = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v548[16], (uint64_t)v588);
                v548[48] = 1;
              }
              WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)&v548[56], (uint64_t)v577);
              v238 = v586;
              v586 = 0uLL;
              v569 = v238;
              v570 = v236;
              v571 = v237;
              v231 = 1;
              goto LABEL_740;
            }
LABEL_738:
            v231 = 0;
LABEL_739:
            v548[0] = 0;
LABEL_740:
            v572 = v231;
            std::__optional_destruct_base<WebCore::AuthenticationChallenge,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationChallengeBase *)v577, v230);
            if (BYTE8(v590) && (_BYTE)v590 && DWORD2(v589) != -1)
              ((void (*)(_BYTE *, WTF::StringImpl **))off_1E34B2020[DWORD2(v589)])(v577, v588);
LABEL_744:
            if (v572)
              goto LABEL_745;
LABEL_593:
            v407 = *v6;
            v408 = v6[1];
            *v6 = 0;
            v6[1] = 0;
            v409 = v6[3];
            if (!v409)
              goto LABEL_773;
            if (!v408)
              goto LABEL_773;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v409 + 16))(v409, v407);
            if (!v572)
              goto LABEL_773;
LABEL_745:
            v491 = &v548[16];
            WebKit::NetworkProcessProxy::didReceiveAuthenticationChallenge((uint64_t)this, *(WTF::StringImpl **)v548, *(uint64_t *)&v548[8], (uint64_t)&v548[16], (WebCore::AuthenticationChallengeBase *)&v548[56], v570, v571);
            if (v572)
            {
              v499 = (const void *)*((_QWORD *)&v569 + 1);
              *((_QWORD *)&v569 + 1) = 0;
              if (v499)
                CFRelease(v499);
              v500 = (const void *)v569;
              *(_QWORD *)&v569 = 0;
              if (v500)
                CFRelease(v500);
              WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v548[56], v498);
              if (v548[48])
              {
                v492 = *(unsigned int *)&v548[40];
                goto LABEL_752;
              }
            }
            goto LABEL_773;
          }
LABEL_737:
          *v6 = 0;
          v6[1] = 0;
          v497 = v6[3];
          if (v497 && v232)
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v497 + 16))(v497, v230);
          goto LABEL_738;
        }
        v493 = v232;
        v494 = 0;
      }
      v232 = 0;
      v230 = 0;
      *v6 = 0;
      v6[1] = 0;
      v496 = v6[3];
      if (v496)
      {
        if (v493)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v496 + 16))(v496, v494, v493);
          v230 = (WTF::StringImpl *)*v6;
          v232 = v6[1];
        }
        else
        {
          v232 = 0;
          v230 = 0;
        }
      }
      goto LABEL_737;
    case 0x13A:
      v64 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v65)
        WebKit::NetworkProcessProxy::endServiceWorkerBackgroundProcessing((uint64_t)this, v64);
      goto LABEL_773;
    case 0x13B:
      v143 = IPC::Decoder::decode<WebKit::RemoteWorkerType>((uint64_t *)a3);
      if (v143 < 0x100u)
        goto LABEL_776;
      v144 = v143;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v6, (uint64_t)v588);
      if (!LOBYTE(v588[1]))
        goto LABEL_776;
      v145 = v6[1];
      v146 = *v6;
      v147 = v6[2] - *v6;
      if (v145 <= v147)
      {
        v501 = 0;
        v502 = 0;
        *v6 = 0;
        v6[1] = 0;
        v503 = v6[3];
        if (v503)
        {
          if (v145)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v503 + 16))(v503);
            v502 = *v6;
            v501 = v6[1];
          }
          else
          {
            v501 = 0;
            v502 = 0;
          }
        }
      }
      else
      {
        v148 = (unsigned __int8 *)(v146 + v147);
        v6[2] = (uint64_t)(v148 + 1);
        if (v146)
        {
          v149 = *v148;
          if (v149 < 2)
          {
            if (!v149)
            {
              v152 = 0;
              v9 = 0;
              v153 = 0;
              goto LABEL_503;
            }
            v150 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
            if (v151)
            {
              v9 = v150 & 0xFFFFFFFFFFFFFF00;
              v152 = v150;
              v153 = 1;
LABEL_503:
              IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::UUID>>>(v6, (uint64_t)v577);
              if ((_BYTE)v578
                && (v23 = (_BYTE *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6),
                    (_BYTE)v385))
              {
                if (!LOBYTE(v588[1]) || !(_BYTE)v578)
                  goto LABEL_590;
                v10 = v23;
                v548[0] = v144;
                v386 = v588[0];
                v588[0] = 0;
                v9 |= v152;
                *(_QWORD *)&v548[8] = v386;
                *(_QWORD *)&v548[16] = v9;
                v548[24] = v153;
                *(_OWORD *)&v548[32] = *(_OWORD *)v577;
                *(_OWORD *)&v548[48] = *(_OWORD *)&v577[16];
                *(_OWORD *)&v548[64] = *(_OWORD *)&v577[32];
                v387 = 1;
                *(_QWORD *)&v548[80] = v23;
              }
              else
              {
                v144 = 0;
                v387 = 0;
                v548[0] = 0;
              }
              BYTE8(v549) = v387;
LABEL_759:
              if (LOBYTE(v588[1]))
              {
                v508 = v588[0];
                v588[0] = 0;
                if (v508)
                {
                  if (*(_DWORD *)v508 == 2)
                    WTF::StringImpl::destroy(v508, v385);
                  else
                    *(_DWORD *)v508 -= 2;
                }
              }
              if (v387)
              {
                v509 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
                if ((_BYTE)v48)
                {
                  *(_QWORD *)v577 = v509;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
                  v510 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                  *(_QWORD *)v510 = off_1E34B20E0;
                  *((_QWORD *)v510 + 1) = *(_QWORD *)v577;
                  v511 = *(_QWORD *)&v577[8];
                  *(_QWORD *)&v577[8] = 0;
                  *((_QWORD *)v510 + 2) = v511;
                  v588[0] = v510;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
                  *(_OWORD *)v577 = *(_OWORD *)&v548[32];
                  *(_OWORD *)&v577[16] = *(_OWORD *)&v548[48];
                  *(_OWORD *)&v577[32] = *(_OWORD *)&v548[64];
                  WebKit::NetworkProcessProxy::establishRemoteWorkerContextConnectionToNetworkProcess((uint64_t)this, (WebKit *)v144, (const WTF::StringImpl **)&v548[8], (WebKit::WebsiteDataStore *)v9, v548[24], v577, (uint64_t)v10, (uint64_t)v588);
                  v512 = v588[0];
                  v588[0] = 0;
                  if (v512)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v512 + 8))(v512);
                  if (!BYTE8(v549))
                    goto LABEL_773;
                }
                goto LABEL_769;
              }
LABEL_776:
              v315 = *v6;
              v316 = v6[1];
              *v6 = 0;
              v6[1] = 0;
              v317 = v6[3];
              if (!v317)
                goto LABEL_773;
              goto LABEL_777;
            }
LABEL_757:
            v385 = (WTF::StringImpl *)*v6;
            v506 = v6[1];
            *v6 = 0;
            v6[1] = 0;
            v507 = v6[3];
            if (v507 && v506)
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v507 + 16))(v507, v385);
            v144 = 0;
            v387 = 0;
            v548[0] = 0;
            BYTE8(v549) = 0;
            goto LABEL_759;
          }
LABEL_756:
          *v6 = 0;
          v6[1] = 0;
          v505 = v6[3];
          if (v505 && v145)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v505 + 16))(v505, v146);
          goto LABEL_757;
        }
        v501 = v145;
        v502 = 0;
      }
      v145 = 0;
      v146 = 0;
      *v6 = 0;
      v6[1] = 0;
      v504 = v6[3];
      if (v504)
      {
        if (v501)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v504 + 16))(v504, v502, v501);
          v146 = *v6;
          v145 = v6[1];
        }
        else
        {
          v145 = 0;
          v146 = 0;
        }
      }
      goto LABEL_756;
    case 0x13C:
      v49 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (!v50)
        goto LABEL_773;
      v51 = (WTF::StringImpl **)v49;
      v52 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if (!v53)
        goto LABEL_773;
      *(_QWORD *)v548 = v52;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v548[8], a2);
      v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v54 = off_1E34B2108;
      v54[1] = *(_QWORD *)v548;
      v55 = *(_QWORD *)&v548[8];
      *(_QWORD *)&v548[8] = 0;
      v54[2] = v55;
      *(_QWORD *)v577 = v54;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v548[8]);
      WebKit::NetworkProcessProxy::getAppBoundDomains(this, v51, (uint64_t *)v577);
      v56 = *(_QWORD *)v577;
      *(_QWORD *)v577 = 0;
      if (!v56)
        goto LABEL_773;
      goto LABEL_156;
    case 0x13D:
      v179 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v180)
      {
        v181 = v179;
        v182 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
        if (v183)
        {
          *(_QWORD *)v548 = v182;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v548[8], a2);
          v184 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v184 = off_1E34B2158;
          v184[1] = *(_QWORD *)v548;
          v185 = *(_QWORD *)&v548[8];
          *(_QWORD *)&v548[8] = 0;
          v184[2] = v185;
          *(_QWORD *)v577 = v184;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v548[8]);
          WebKit::NetworkProcessProxy::getPaymentCoordinatorEmbeddingUserAgent((uint64_t)this, v181, (WTF::RefCountedBase *)v577);
          v56 = *(_QWORD *)v577;
          *(_QWORD *)v577 = 0;
          if (v56)
LABEL_156:
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
        }
      }
      goto LABEL_773;
    case 0x13E:
      v244 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v245)
      {
        v548[0] = 0;
        LOBYTE(v550) = 0;
        goto LABEL_638;
      }
      v246 = v244;
      IPC::Decoder::decode<WebCore::ClientOrigin>(v6, v577);
      v247 = v581;
      if (!(_BYTE)v581)
        goto LABEL_729;
      v23 = (_BYTE *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if (!v248)
        goto LABEL_728;
      v249 = v6[1];
      v250 = *v6;
      v251 = ((v6[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v6;
      if (v249 < v251 || v249 - v251 <= 7)
      {
        v487 = 0;
        v488 = 0;
        *v6 = 0;
        v6[1] = 0;
        v489 = v6[3];
        if (v489)
        {
          if (v249)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v489 + 16))(v489);
            v488 = *v6;
            v487 = v6[1];
          }
          else
          {
            v487 = 0;
            v488 = 0;
          }
        }
      }
      else
      {
        v252 = (uint64_t *)(v250 + v251);
        v6[2] = (uint64_t)(v252 + 1);
        if (v250)
        {
          v253 = (((unint64_t)v252 + 15) & 0xFFFFFFFFFFFFFFF8) - v250;
          if (v249 >= v253 && v249 - v253 > 7)
          {
            v255 = *v252;
            v6[2] = (((unint64_t)v252 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
            v256 = *(_QWORD *)(((unint64_t)v252 + 15) & 0xFFFFFFFFFFFFFFF8);
            v257 = (((((unint64_t)v252 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) - v250;
            if (v249 >= v257 && v249 - v257 > 7)
            {
              v259 = (uint64_t *)(v250 + v257);
              v260 = *v259;
              v6[2] = (uint64_t)(v259 + 1);
              if (!(_BYTE)v581)
                goto LABEL_590;
              v261 = v23;
              *(_QWORD *)v548 = v246;
              v548[8] = 0;
              *(_DWORD *)&v548[32] = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v548[8], (uint64_t)v577);
              v548[40] = 0;
              *(_DWORD *)&v548[64] = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v548[40], (uint64_t)&v577[32]);
              *(_QWORD *)&v548[72] = v261;
              *(_QWORD *)&v548[80] = v255;
              v247 = 1;
              *(_QWORD *)&v549 = v256;
              *((_QWORD *)&v549 + 1) = v260;
              goto LABEL_730;
            }
          }
          *v6 = 0;
          v6[1] = 0;
          v452 = v6[3];
          if (v452)
          {
            if (v249)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v452 + 16))(v452);
              v453 = *v6;
              v454 = v6[1];
              v455 = v6[3];
              *v6 = 0;
              v6[1] = 0;
              if (v455)
              {
                if (v454)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v455 + 16))(v455, v453);
              }
            }
          }
LABEL_728:
          v247 = 0;
LABEL_729:
          v548[0] = 0;
LABEL_730:
          LOBYTE(v550) = v247;
          std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v577);
          if ((_BYTE)v550)
            goto LABEL_731;
LABEL_638:
          v434 = *v6;
          v435 = v6[1];
          *v6 = 0;
          v6[1] = 0;
          v436 = v6[3];
          if (!v436)
            goto LABEL_773;
          if (!v435)
            goto LABEL_773;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v436 + 16))(v436, v434);
          if (!(_BYTE)v550)
            goto LABEL_773;
LABEL_731:
          v491 = &v548[8];
          WebKit::NetworkProcessProxy::increaseQuota((uint64_t)this, *(uint64_t *)v548, (uint64_t)&v548[8], *(uint64_t *)&v548[72], *(uint64_t *)&v548[80], v549, *((uint64_t *)&v549 + 1));
          if ((_BYTE)v550)
          {
            if (*(_DWORD *)&v548[64] != -1)
              ((void (*)(_BYTE *, _BYTE *))off_1E34B2020[*(unsigned int *)&v548[64]])(v577, &v548[40]);
            *(_DWORD *)&v548[64] = -1;
            v492 = *(unsigned int *)&v548[32];
LABEL_752:
            if ((_DWORD)v492 != -1)
              ((void (*)(_BYTE *, _BYTE *))off_1E34B2020[v492])(v577, v491);
          }
          goto LABEL_773;
        }
        v487 = v249;
        v488 = 0;
      }
      *v6 = 0;
      v6[1] = 0;
      v490 = v6[3];
      if (v490 && v487)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v490 + 16))(v490, v488, v487);
      goto LABEL_728;
    case 0x13F:
      v285 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v286 || (v287 = v285, IPC::Decoder::decode<WTF::String>(v6, v588), !LOBYTE(v588[1])))
      {
        v290 = 0;
        v548[0] = 0;
        v548[32] = 0;
        goto LABEL_300;
      }
      IPC::Decoder::decode<WTF::String>(v6, v577);
      if (v577[8])
      {
        v23 = (_BYTE *)IPC::Decoder::decode<std::tuple<BOOL>>(v6);
        if ((unsigned __int16)v23 >= 0x100u)
        {
          if (!LOBYTE(v588[1]) || !v577[8])
            goto LABEL_590;
          v377 = 0;
          v378 = v588[0];
          v588[0] = 0;
          *(_QWORD *)v548 = v287;
          *(_QWORD *)&v548[8] = v378;
          *(_QWORD *)&v548[16] = *(_QWORD *)v577;
          v548[24] = (_BYTE)v23;
          v290 = 1;
          v548[32] = 1;
LABEL_575:
          if (LOBYTE(v588[1]))
          {
            v405 = v588[0];
            v588[0] = 0;
            if (v405)
            {
              if (*(_DWORD *)v405 == 2)
                WTF::StringImpl::destroy(v405, v288);
              else
                *(_DWORD *)v405 -= 2;
            }
          }
          if (!v377)
          {
LABEL_581:
            if (!v290)
              goto LABEL_773;
            WebKit::NetworkProcessProxy::logDiagnosticMessage((uint64_t)this, *(uint64_t *)v548, (uint64_t)&v548[8], (uint64_t)&v548[16], v548[24]);
            if (!v548[32])
              goto LABEL_773;
LABEL_583:
            v406 = *(WTF::StringImpl **)&v548[16];
            *(_QWORD *)&v548[16] = 0;
            if (v406)
            {
              if (*(_DWORD *)v406 == 2)
                WTF::StringImpl::destroy(v406, v48);
              else
                *(_DWORD *)v406 -= 2;
            }
LABEL_769:
            v124 = *(WTF::StringImpl **)&v548[8];
            *(_QWORD *)&v548[8] = 0;
            if (!v124)
              goto LABEL_773;
LABEL_770:
            if (*(_DWORD *)v124 != 2)
            {
              *(_DWORD *)v124 -= 2;
              goto LABEL_773;
            }
            goto LABEL_772;
          }
LABEL_300:
          v318 = *v6;
          v319 = v6[1];
          *v6 = 0;
          v6[1] = 0;
          v320 = v6[3];
          if (v320 && v319)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v320 + 16))(v320, v318);
          goto LABEL_581;
        }
        v548[0] = 0;
        v548[32] = 0;
        if (v577[8])
        {
          v289 = *(WTF::StringImpl **)v577;
          *(_QWORD *)v577 = 0;
          if (v289)
          {
            if (*(_DWORD *)v289 != 2)
            {
              v290 = 0;
              *(_DWORD *)v289 -= 2;
LABEL_574:
              v377 = 1;
              goto LABEL_575;
            }
            WTF::StringImpl::destroy(v289, v288);
          }
        }
        v290 = 0;
        goto LABEL_574;
      }
      v290 = 0;
      v548[0] = 0;
      v548[32] = 0;
      goto LABEL_574;
    case 0x140:
      v197 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v198)
        goto LABEL_542;
      v199 = v197;
      IPC::Decoder::decode<WTF::String>(v6, v588);
      if (!LOBYTE(v588[1]))
        goto LABEL_542;
      IPC::Decoder::decode<WTF::String>(v6, v577);
      if (!v577[8])
      {
        v205 = 0;
        v548[0] = 0;
        v548[32] = 0;
        goto LABEL_534;
      }
      v201 = v6[1];
      v200 = (WTF::StringImpl *)*v6;
      v202 = ((v6[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v6;
      if (v201 < v202 || v201 - v202 <= 3)
      {
        v513 = 0;
        v514 = 0;
        *v6 = 0;
        v6[1] = 0;
        v515 = v6[3];
        if (v515)
        {
          if (v201)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v515 + 16))(v515);
            v514 = *v6;
            v513 = v6[1];
          }
          else
          {
            v513 = 0;
            v514 = 0;
          }
        }
      }
      else
      {
        v203 = (int *)((char *)v200 + v202);
        v6[2] = (uint64_t)(v203 + 1);
        if (v200)
        {
          v204 = *v203;
          v23 = (_BYTE *)IPC::Decoder::decode<std::tuple<BOOL>>(v6);
          if ((unsigned __int16)v23 > 0xFFu)
          {
            if (!LOBYTE(v588[1]) || !v577[8])
              goto LABEL_590;
            v379 = v588[0];
            v588[0] = 0;
            *(_QWORD *)v548 = v199;
            *(_QWORD *)&v548[8] = v379;
            v380 = *(_QWORD *)v577;
            *(_QWORD *)v577 = 0;
            *(_QWORD *)&v548[16] = v380;
            *(_DWORD *)&v548[24] = v204;
            v548[28] = (_BYTE)v23;
            v205 = 1;
LABEL_491:
            v548[32] = v205;
            if (v577[8])
            {
              v381 = *(WTF::StringImpl **)v577;
              *(_QWORD *)v577 = 0;
              if (v381)
              {
                if (*(_DWORD *)v381 == 2)
                  WTF::StringImpl::destroy(v381, v200);
                else
                  *(_DWORD *)v381 -= 2;
              }
            }
LABEL_534:
            if (LOBYTE(v588[1]))
            {
              v394 = v588[0];
              v588[0] = 0;
              if (v394)
              {
                if (*(_DWORD *)v394 == 2)
                  WTF::StringImpl::destroy(v394, v200);
                else
                  *(_DWORD *)v394 -= 2;
              }
            }
            if (v205)
            {
              WebKit::NetworkProcessProxy::logDiagnosticMessageWithResult((uint64_t)this, *(uint64_t *)v548, (uint64_t)&v548[8], (uint64_t)&v548[16], v548[24], v548[28]);
              if (v548[32])
                goto LABEL_583;
              goto LABEL_773;
            }
LABEL_542:
            v315 = *v6;
            v316 = v6[1];
            *v6 = 0;
            v6[1] = 0;
            v317 = v6[3];
            if (!v317)
              goto LABEL_773;
            goto LABEL_777;
          }
LABEL_173:
          v205 = 0;
          v548[0] = 0;
          goto LABEL_491;
        }
        v513 = v201;
        v514 = 0;
      }
      *v6 = 0;
      v6[1] = 0;
      v516 = v6[3];
      if (v516 && v513)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v516 + 16))(v516, v514);
      goto LABEL_173;
    case 0x141:
      v212 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v213)
        goto LABEL_531;
      v214 = v212;
      IPC::Decoder::decode<WTF::String>(v6, v588);
      if (!LOBYTE(v588[1]))
        goto LABEL_531;
      IPC::Decoder::decode<WTF::String>(v6, v577);
      if (!v577[8])
      {
        v222 = 0;
        v223 = 0;
        v548[0] = 0;
        v548[40] = 0;
        goto LABEL_523;
      }
      v216 = v6[1];
      v215 = (WTF::StringImpl *)*v6;
      v217 = ((v6[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v6;
      if (v216 < v217 || v216 - v217 <= 7)
      {
        v517 = 0;
        v518 = 0;
        *v6 = 0;
        v6[1] = 0;
        v519 = v6[3];
        if (v519)
        {
          if (v216)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v519 + 16))(v519);
            v518 = *v6;
            v517 = v6[1];
          }
          else
          {
            v517 = 0;
            v518 = 0;
          }
        }
      }
      else
      {
        v218 = (uint64_t *)((char *)v215 + v217);
        v6[2] = (uint64_t)(v218 + 1);
        if (v215)
        {
          v219 = (((unint64_t)v218 + 11) & 0xFFFFFFFFFFFFFFFCLL) - (_QWORD)v215;
          if (v216 >= v219 && v216 - v219 > 3)
          {
            v221 = *v218;
            a2 = (unsigned __int8 **)*(unsigned int *)(((unint64_t)v218 + 11) & 0xFFFFFFFFFFFFFFFCLL);
            v6[2] = (((unint64_t)v218 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
            v23 = (_BYTE *)IPC::Decoder::decode<std::tuple<BOOL>>(v6);
            if ((unsigned __int16)v23 > 0xFFu)
            {
              if (!LOBYTE(v588[1]) || !v577[8])
                goto LABEL_590;
              v222 = v23;
              v382 = v588[0];
              v588[0] = 0;
              *(_QWORD *)v548 = v214;
              *(_QWORD *)&v548[8] = v382;
              v383 = *(_QWORD *)v577;
              *(_QWORD *)v577 = 0;
              *(_QWORD *)&v548[16] = v383;
              *(_QWORD *)&v548[24] = v221;
              *(_DWORD *)&v548[32] = (_DWORD)a2;
              v548[36] = (_BYTE)v23;
              v223 = 1;
LABEL_498:
              v548[40] = v223;
              if (v577[8])
              {
                v384 = *(WTF::StringImpl **)v577;
                *(_QWORD *)v577 = 0;
                if (v384)
                {
                  if (*(_DWORD *)v384 == 2)
                    WTF::StringImpl::destroy(v384, v215);
                  else
                    *(_DWORD *)v384 -= 2;
                }
              }
LABEL_523:
              if (LOBYTE(v588[1]))
              {
                v393 = v588[0];
                v588[0] = 0;
                if (v393)
                {
                  if (*(_DWORD *)v393 == 2)
                    WTF::StringImpl::destroy(v393, v215);
                  else
                    *(_DWORD *)v393 -= 2;
                }
              }
              if (v223)
              {
                WebKit::NetworkProcessProxy::logDiagnosticMessageWithValue((uint64_t)this, *(uint64_t *)v548, (uint64_t)&v548[8], (uint64_t)&v548[16], (uint64_t)a2, v222 != 0);
                if (v548[40])
                  goto LABEL_583;
                goto LABEL_773;
              }
LABEL_531:
              v315 = *v6;
              v316 = v6[1];
              *v6 = 0;
              v6[1] = 0;
              v317 = v6[3];
              if (!v317)
                goto LABEL_773;
              goto LABEL_777;
            }
          }
          else
          {
            *v6 = 0;
            v6[1] = 0;
            v521 = v6[3];
            if (v521)
            {
              if (v216)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v521 + 16))(v521);
                v215 = (WTF::StringImpl *)*v6;
                v522 = v6[1];
                v523 = v6[3];
                *v6 = 0;
                v6[1] = 0;
                if (v523)
                {
                  if (v522)
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v523 + 16))(v523, v215);
                }
              }
            }
          }
LABEL_189:
          v222 = 0;
          v223 = 0;
          v548[0] = 0;
          goto LABEL_498;
        }
        v517 = v216;
        v518 = 0;
      }
      *v6 = 0;
      v6[1] = 0;
      v520 = v6[3];
      if (v520 && v517)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v520 + 16))(v520, v518, v517);
      goto LABEL_189;
    case 0x142:
      IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::String>>((uint64_t *)a3, v548);
      if (!v548[16])
        goto LABEL_773;
      WebKit::NetworkProcessProxy::logTestingEvent(this, *(uint64_t *)v548, (uint64_t)&v548[8]);
      if (!v548[16])
        goto LABEL_773;
      goto LABEL_769;
    case 0x143:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, (uint64_t)v537);
      if (!(_BYTE)v538)
        goto LABEL_686;
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(v6, (uint64_t)v588);
      if (!(_BYTE)v590)
        goto LABEL_686;
      v23 = IPC::Decoder::decode<WTF::URL>(v6, v577);
      if (!v577[40])
        goto LABEL_686;
      if (!(_BYTE)v538 || !(_BYTE)v590)
        goto LABEL_590;
      *(_OWORD *)v548 = *(_OWORD *)v537;
      *(_OWORD *)&v548[16] = *(_OWORD *)v588;
      *(_OWORD *)&v548[32] = v589;
      v296 = *(WTF::StringImpl **)v577;
      *(_QWORD *)&v548[48] = *(_QWORD *)v577;
      *(_OWORD *)&v548[56] = *(_OWORD *)&v577[8];
      *(_OWORD *)&v548[72] = *(_OWORD *)&v577[24];
      BYTE8(v549) = 1;
      v297 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if (!(_BYTE)v48)
        goto LABEL_276;
      *(_QWORD *)v577 = v297;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
      v298 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v298 = off_1E34B2220;
      *((_QWORD *)v298 + 1) = *(_QWORD *)v577;
      v299 = *(_QWORD *)&v577[8];
      *(_QWORD *)&v577[8] = 0;
      *((_QWORD *)v298 + 2) = v299;
      v588[0] = v298;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
      *(_OWORD *)v577 = *(_OWORD *)&v548[16];
      *(_OWORD *)&v577[16] = *(_OWORD *)&v548[32];
      WebKit::NetworkProcessProxy::navigateServiceWorkerClient((uint64_t)this, *(uint64_t *)v548, *(uint64_t *)&v548[8], (uint64_t)v577, (uint64_t)&v548[48], (uint64_t *)v588);
      v300 = v588[0];
      v588[0] = 0;
      if (v300)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v300 + 8))(v300);
      if (!BYTE8(v549))
        goto LABEL_773;
      v296 = *(WTF::StringImpl **)&v548[48];
LABEL_276:
      *(_QWORD *)&v548[48] = 0;
      if (!v296)
        goto LABEL_773;
      if (*(_DWORD *)v296 != 2)
      {
        *(_DWORD *)v296 -= 2;
        goto LABEL_773;
      }
      v124 = v296;
      goto LABEL_772;
    case 0x144:
      v133 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v134)
        WebKit::NetworkProcessProxy::negotiatedLegacyTLS((uint64_t)this, v133);
      goto LABEL_773;
    case 0x145:
      v125 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v126)
        goto LABEL_699;
      v127 = v125;
      IPC::Decoder::decode<WTF::String>(v6, v577);
      if (!v577[8])
      {
        v548[0] = 0;
        goto LABEL_699;
      }
      v128 = v6[1];
      v129 = (WTF::StringImpl *)*v6;
      v130 = v6[2] - *v6;
      if (v128 <= v130)
      {
        v470 = 0;
        v471 = 0;
        *v6 = 0;
        v6[1] = 0;
        v472 = v6[3];
        if (v472)
        {
          if (v128)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v472 + 16))(v472);
            v471 = *v6;
            v470 = v6[1];
          }
          else
          {
            v470 = 0;
            v471 = 0;
          }
        }
      }
      else
      {
        v131 = (unsigned __int8 *)v129 + v130;
        v6[2] = (uint64_t)(v131 + 1);
        if (v129)
        {
          v132 = *v131;
          if (v132 < 3)
          {
            *(_QWORD *)v548 = v127;
            *(_QWORD *)&v548[8] = *(_QWORD *)v577;
            v548[16] = v132;
            v548[24] = 1;
            WebKit::NetworkProcessProxy::notifyBackgroundFetchChange(this, v127, (uint64_t)&v548[8], v132);
            if (v548[24])
              goto LABEL_769;
            goto LABEL_773;
          }
LABEL_693:
          *v6 = 0;
          v6[1] = 0;
          v474 = v6[3];
          if (v474 && v128)
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v474 + 16))(v474, v129);
          v548[0] = 0;
          if (v577[8])
          {
            v475 = *(WTF::StringImpl **)v577;
            *(_QWORD *)v577 = 0;
            if (v475)
            {
              if (*(_DWORD *)v475 == 2)
                WTF::StringImpl::destroy(v475, v129);
              else
                *(_DWORD *)v475 -= 2;
            }
          }
LABEL_699:
          v315 = *v6;
          v316 = v6[1];
          *v6 = 0;
          v6[1] = 0;
          v317 = v6[3];
          if (!v317)
            goto LABEL_773;
          goto LABEL_777;
        }
        v470 = v128;
        v471 = 0;
      }
      v128 = 0;
      v129 = 0;
      *v6 = 0;
      v6[1] = 0;
      v473 = v6[3];
      if (v473)
      {
        if (v470)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v473 + 16))(v473, v471, v470);
          v129 = (WTF::StringImpl *)*v6;
          v128 = v6[1];
        }
        else
        {
          v128 = 0;
          v129 = 0;
        }
      }
      goto LABEL_693;
    case 0x146:
    case 0x148:
      WebKit::WebProcessProxy::notifyPageStatisticsAndDataRecordsProcessed(this);
      goto LABEL_773;
    case 0x147:
      WebKit::WebProcessProxy::notifyWebsiteDataDeletionForRegistrableDomainsFinished(this);
      goto LABEL_773;
    case 0x149:
      v301 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v302)
      {
        v303 = v301;
        IPC::Decoder::decode<WTF::String>(v6, v588);
        if (LOBYTE(v588[1]))
        {
          v23 = (_BYTE *)IPC::Decoder::decode<WebCore::SecurityOriginData>(v6, v577);
          if (v577[32])
          {
            if (!LOBYTE(v588[1]))
              goto LABEL_590;
            v305 = v588[0];
            v588[0] = 0;
            *(_QWORD *)v548 = v303;
            *(_QWORD *)&v548[8] = v305;
            v548[16] = 0;
            *(_DWORD *)&v548[40] = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v548[16], (uint64_t)v577);
            v548[48] = 1;
            if (v577[32] && *(_DWORD *)&v577[24] != -1)
              ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34B2020[*(unsigned int *)&v577[24]])(v537, v577);
          }
          else
          {
            v548[0] = 0;
            v548[48] = 0;
          }
          if (LOBYTE(v588[1]))
          {
            v355 = v588[0];
            v588[0] = 0;
            if (v355)
            {
              if (*(_DWORD *)v355 == 2)
                WTF::StringImpl::destroy(v355, v304);
              else
                *(_DWORD *)v355 -= 2;
            }
          }
        }
        else
        {
          v548[0] = 0;
          v548[48] = 0;
        }
        if (v548[48])
          goto LABEL_474;
      }
      else
      {
        v548[0] = 0;
        v548[48] = 0;
      }
      v443 = *v6;
      v444 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v445 = v6[3];
      if (!v445)
        goto LABEL_773;
      if (!v444)
        goto LABEL_773;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v445 + 16))(v445, v443);
      if (!v548[48])
        goto LABEL_773;
LABEL_474:
      v373 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if ((_BYTE)v48)
      {
        *(_QWORD *)v577 = v373;
        v6 = (uint64_t *)&v577[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
        v374 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v374 = off_1E34B21F8;
        *((_QWORD *)v374 + 1) = *(_QWORD *)v577;
        v375 = *(_QWORD *)&v577[8];
        *(_QWORD *)&v577[8] = 0;
        *((_QWORD *)v374 + 2) = v375;
        v588[0] = v374;
        v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
        if (!v548[48])
          goto LABEL_590;
        WebKit::NetworkProcessProxy::openWindowFromServiceWorker(this, *(uint64_t *)v548, (uint64_t)&v548[8], (uint64_t)&v548[16], (uint64_t *)v588);
        v376 = v588[0];
        v588[0] = 0;
        if (v376)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v376 + 8))(v376);
      }
      if (!v548[48])
        goto LABEL_773;
      if (*(_DWORD *)&v548[40] != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E34B2020[*(unsigned int *)&v548[40]])(v577, &v548[16]);
      *(_DWORD *)&v548[40] = -1;
      goto LABEL_482;
    case 0x14A:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v548, (uint64_t *)a3);
      if (v548[24])
        WebKit::NetworkProcessProxy::registerRemoteWorkerClientProcess((uint64_t)this, v548[0], *(uint64_t *)&v548[8], *(uint64_t *)&v548[16]);
      goto LABEL_773;
    case 0x14B:
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, v577);
      if ((_BYTE)v581
        && (v175 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6),
            v176))
      {
        v177 = v175;
        v23 = IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v6, (uint64_t)v588);
        v178 = BYTE8(v589);
        if (BYTE8(v589))
        {
          if (!(_BYTE)v581)
            goto LABEL_590;
          v548[0] = 0;
          *(_DWORD *)&v548[24] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v548, (uint64_t)v577);
          v548[32] = 0;
          *(_DWORD *)&v548[56] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v548[32], (uint64_t)&v577[32]);
          *(_OWORD *)&v548[72] = *(_OWORD *)v588;
          *(_QWORD *)&v548[64] = v177;
          *(_QWORD *)&v549 = v589;
          v178 = 1;
        }
        else
        {
          v548[0] = 0;
        }
        BYTE8(v549) = v178;
      }
      else
      {
        v548[0] = 0;
        BYTE8(v549) = 0;
      }
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v577);
      if (!BYTE8(v549))
      {
        v449 = *v6;
        v450 = v6[1];
        *v6 = 0;
        v6[1] = 0;
        v451 = v6[3];
        if (!v451)
          goto LABEL_773;
        if (!v450)
          goto LABEL_773;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v451 + 16))(v451, v449);
        if (!BYTE8(v549))
          goto LABEL_773;
      }
      v356 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if (!v357)
        goto LABEL_408;
      *(_QWORD *)v577 = v356;
      v6 = (uint64_t *)&v577[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
      v358 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v358 = off_1E34B2270;
      *((_QWORD *)v358 + 1) = *(_QWORD *)v577;
      v359 = *(_QWORD *)&v577[8];
      *(_QWORD *)&v577[8] = 0;
      *((_QWORD *)v358 + 2) = v359;
      v588[0] = v358;
      v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
      if (!BYTE8(v549))
        goto LABEL_590;
      *(_OWORD *)v577 = *(_OWORD *)&v548[72];
      *(_QWORD *)&v577[16] = v549;
      WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin((uint64_t)this, (uint64_t)v548, *(uint64_t *)&v548[64], (uint64_t *)v577, (uint64_t *)v588);
      v360 = v588[0];
      v588[0] = 0;
      if (v360)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v360 + 8))(v360);
LABEL_408:
      if (BYTE8(v549))
      {
        if (*(_DWORD *)&v548[56] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E34B2020[*(unsigned int *)&v548[56]])(v577, &v548[32]);
        *(_DWORD *)&v548[56] = -1;
        if (*(_DWORD *)&v548[24] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E34B2020[*(unsigned int *)&v548[24]])(v577, v548);
      }
      goto LABEL_773;
    case 0x14C:
      v270 = IPC::Decoder::decode<WebKit::RemoteWorkerType>((uint64_t *)a3);
      if (v270 < 0x100u)
        goto LABEL_674;
      v271 = v270;
      v272 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if (!v273)
        goto LABEL_674;
      WebKit::NetworkProcessProxy::remoteWorkerContextConnectionNoLongerNeeded((uint64_t)this, v271, v272);
      goto LABEL_773;
    case 0x14D:
      v66 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v67)
      {
        v548[0] = 0;
        LOBYTE(v550) = 0;
        goto LABEL_608;
      }
      v68 = v66;
      IPC::Decoder::decode<WTF::URL>(v6, v577);
      if (!v577[40])
      {
        v548[0] = 0;
        LOBYTE(v550) = 0;
        goto LABEL_463;
      }
      IPC::Decoder::decode<WebCore::SecurityOriginData>(v6, v588);
      if (!(_BYTE)v590)
      {
        v548[0] = 0;
        LOBYTE(v550) = 0;
        goto LABEL_363;
      }
      v70 = IPC::Decoder::decode<JSC::MessageSource>(v6);
      if (v70 <= 0xFFu
        || (v71 = v70, v72 = IPC::Decoder::decode<JSC::MessageLevel>(v6), v72 <= 0xFFu)
        || (v73 = v72, v23 = IPC::Decoder::decode<WTF::String>(v6, v537), !LOBYTE(v537[1])))
      {
        v548[0] = 0;
        LOBYTE(v550) = 0;
        goto LABEL_357;
      }
      v74 = v6[1];
      v69 = (WTF::StringImpl *)*v6;
      v75 = ((v6[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v6;
      if (v74 < v75 || v74 - v75 <= 7)
      {
        v529 = 0;
        v530 = 0;
        *v6 = 0;
        v6[1] = 0;
        v531 = v6[3];
        if (v531)
        {
          if (v74)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v531 + 16))(v531);
            v530 = *v6;
            v529 = v6[1];
          }
          else
          {
            v529 = 0;
            v530 = 0;
          }
        }
      }
      else
      {
        v76 = (uint64_t *)((char *)v69 + v75);
        v6[2] = (uint64_t)(v76 + 1);
        if (v69)
        {
          if (!v577[40] || !(_BYTE)v590)
            goto LABEL_590;
          v77 = *v76;
          v78 = *(_QWORD *)v577;
          *(_QWORD *)v577 = 0;
          *(_QWORD *)v548 = v68;
          *(_QWORD *)&v548[8] = v78;
          *(_OWORD *)&v548[16] = *(_OWORD *)&v577[8];
          *(_OWORD *)&v548[32] = *(_OWORD *)&v577[24];
          *(_DWORD *)&v577[8] &= ~1u;
          v548[48] = 0;
          *(_DWORD *)&v548[72] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v548[48], (uint64_t)v588);
          v548[80] = v71;
          v548[81] = v73;
          v79 = v537[0];
          v537[0] = 0;
          *(_QWORD *)&v549 = v79;
          *((_QWORD *)&v549 + 1) = v77;
          v80 = 1;
LABEL_61:
          LOBYTE(v550) = v80;
          if (LOBYTE(v537[1]))
          {
            v81 = v537[0];
            v537[0] = 0;
            if (v81)
            {
              if (*(_DWORD *)v81 == 2)
                WTF::StringImpl::destroy(v81, v69);
              else
                *(_DWORD *)v81 -= 2;
            }
          }
LABEL_357:
          if ((_BYTE)v590 && DWORD2(v589) != -1)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34B2020[DWORD2(v589)])(v537, v588);
LABEL_363:
          if (v577[40])
          {
            v343 = *(WTF::StringImpl **)v577;
            *(_QWORD *)v577 = 0;
            if (v343)
            {
              if (*(_DWORD *)v343 == 2)
                WTF::StringImpl::destroy(v343, v69);
              else
                *(_DWORD *)v343 -= 2;
            }
          }
LABEL_463:
          if ((_BYTE)v550)
            goto LABEL_464;
LABEL_608:
          v416 = *v6;
          v417 = v6[1];
          *v6 = 0;
          v6[1] = 0;
          v418 = v6[3];
          if (!v418)
            goto LABEL_773;
          if (!v417)
            goto LABEL_773;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v418 + 16))(v418, v416);
          if (!(_BYTE)v550)
            goto LABEL_773;
LABEL_464:
          WebKit::NetworkProcessProxy::reportConsoleMessage(this, *(uint64_t *)v548, (uint64_t)&v548[8], (uint64_t)&v548[48], v548[80], v548[81], (uint64_t)&v549, *((uint64_t *)&v549 + 1));
          if (!(_BYTE)v550)
            goto LABEL_773;
          v372 = (WTF::StringImpl *)v549;
          *(_QWORD *)&v549 = 0;
          if (v372)
          {
            if (*(_DWORD *)v372 == 2)
              WTF::StringImpl::destroy(v372, v48);
            else
              *(_DWORD *)v372 -= 2;
          }
          if (*(_DWORD *)&v548[72] != -1)
            ((void (*)(_BYTE *, _BYTE *))off_1E34B2020[*(unsigned int *)&v548[72]])(v577, &v548[48]);
          *(_DWORD *)&v548[72] = -1;
LABEL_482:
          v124 = *(WTF::StringImpl **)&v548[8];
          *(_QWORD *)&v548[8] = 0;
          if (!v124)
            goto LABEL_773;
          goto LABEL_483;
        }
        v529 = v74;
        v530 = 0;
      }
      *v6 = 0;
      v6[1] = 0;
      v532 = v6[3];
      if (v532 && v529)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v532 + 16))(v532, v530);
      v80 = 0;
      v548[0] = 0;
      goto LABEL_61;
    case 0x14E:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::URL>>(v548, (uint64_t *)a3);
      if (!v548[48])
        goto LABEL_773;
      WebKit::NetworkProcessProxy::reportNetworkIssue((uint64_t)this, *(uint64_t *)v548, (const WTF::URL *)&v548[8]);
      if (!v548[48])
        goto LABEL_773;
      goto LABEL_482;
    case 0x14F:
      v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v32)
      {
        v33 = v31;
        IPC::Decoder::decode<WebCore::ClientOrigin>(v6, v577);
        v34 = v581;
        if ((_BYTE)v581)
        {
          *(_QWORD *)v548 = v33;
          v548[8] = 0;
          *(_DWORD *)&v548[32] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v548[8], (uint64_t)v577);
          v548[40] = 0;
          *(_DWORD *)&v548[64] = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v548[40], (uint64_t)&v577[32]);
          v34 = 1;
        }
        else
        {
          v548[0] = 0;
        }
        v548[72] = v34;
        std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v577);
        if (v548[72])
          goto LABEL_318;
      }
      else
      {
        v548[0] = 0;
        v548[72] = 0;
      }
      v413 = *v6;
      v414 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v415 = v6[3];
      if (!v415)
        goto LABEL_773;
      if (!v414)
        goto LABEL_773;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v415 + 16))(v415, v413);
      if (!v548[72])
        goto LABEL_773;
LABEL_318:
      v326 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if (v327)
      {
        *(_QWORD *)v577 = v326;
        v6 = (uint64_t *)&v577[8];
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
        v328 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v328 = off_1E34B20B8;
        *((_QWORD *)v328 + 1) = *(_QWORD *)v577;
        v329 = *(_QWORD *)&v577[8];
        *(_QWORD *)&v577[8] = 0;
        *((_QWORD *)v328 + 2) = v329;
        v588[0] = v328;
        v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
        if (!v548[72])
          goto LABEL_590;
        WebKit::NetworkProcessProxy::requestBackgroundFetchPermission((uint64_t)this, *(uint64_t *)v548, (uint64_t)&v548[8], (uint64_t *)v588);
        v330 = v588[0];
        v588[0] = 0;
        if (v330)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v330 + 8))(v330);
      }
      if (v548[72])
      {
        if (*(_DWORD *)&v548[64] != -1)
          ((void (*)(_BYTE *, _BYTE *))off_1E34B2020[*(unsigned int *)&v548[64]])(v577, &v548[40]);
        *(_DWORD *)&v548[64] = -1;
        if (*(_DWORD *)&v548[32] != -1)
LABEL_314:
          ((void (*)(_BYTE *, _BYTE *))off_1E34B2020[*(unsigned int *)&v548[32]])(v577, &v548[8]);
      }
      goto LABEL_773;
    case 0x150:
      v35 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v36)
        goto LABEL_567;
      v37 = v35;
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v6, (uint64_t)v588);
      if (!(_BYTE)v589)
        goto LABEL_567;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v6, (uint64_t)&v535);
      if (!v536)
        goto LABEL_567;
      IPC::Decoder::decode<WebCore::RegistrableDomain>(v6, (uint64_t)v537);
      if (!LOBYTE(v537[1]))
      {
        v388 = 0;
        v548[0] = 0;
        v548[80] = 0;
        goto LABEL_553;
      }
      v39 = v6[1];
      v40 = (char *)*v6;
      v41 = v6[2] - *v6;
      if (v39 <= v41)
      {
        v524 = 0;
        v525 = 0;
        *v6 = 0;
        v6[1] = 0;
        v526 = v6[3];
        if (v526)
        {
          if (v39)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v526 + 16))(v526);
            v525 = *v6;
            v524 = v6[1];
          }
          else
          {
            v524 = 0;
            v525 = 0;
          }
        }
        goto LABEL_797;
      }
      v42 = &v40[v41];
      v6[2] = (uint64_t)(v42 + 1);
      if (!v40)
      {
        v524 = v39;
        v525 = 0;
LABEL_797:
        v39 = 0;
        v40 = 0;
        *v6 = 0;
        v6[1] = 0;
        v527 = v6[3];
        if (v527)
        {
          if (v524)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v527 + 16))(v527, v525, v524);
            v40 = (char *)*v6;
            v39 = v6[1];
          }
          else
          {
            v39 = 0;
            v40 = 0;
          }
        }
        goto LABEL_798;
      }
      v43 = *v42;
      if (v43 >= 2)
      {
LABEL_798:
        *v6 = 0;
        v6[1] = 0;
        v528 = v6[3];
        if (v528 && v39)
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v528 + 16))(v528, v40);
        goto LABEL_546;
      }
      if (*v42)
      {
        IPC::Decoder::decode<WebCore::OrganizationStorageAccessPromptQuirk>(v6, (uint64_t)v548);
        if (v548[32])
        {
          v45 = *(_QWORD *)v548;
          v46 = *(_QWORD *)&v548[8];
          memset(v548, 0, 32);
          *(_QWORD *)v577 = v45;
          v4 = v46;
          *(_QWORD *)&v577[8] = v46;
          v5 = *(_QWORD *)&v548[16];
          *(_OWORD *)&v577[16] = *(_OWORD *)&v548[16];
          v534 = *(_DWORD *)&v548[28];
          v3 = *(_DWORD *)&v548[24];
          v577[32] = 1;
          v577[40] = 1;
          v23 = (_BYTE *)std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v548, v44);
          goto LABEL_516;
        }
        std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v548, v44);
LABEL_546:
        v38 = (WTF::StringImpl *)*v6;
        v395 = v6[1];
        *v6 = 0;
        v6[1] = 0;
        v396 = v6[3];
        if (v396 && v395)
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v396 + 16))(v396, v38);
        v388 = 0;
        v548[0] = 0;
        v548[80] = 0;
        goto LABEL_548;
      }
      v548[0] = 0;
      v548[32] = 0;
      v577[0] = 0;
      v577[32] = 0;
      v577[40] = 1;
      v23 = (_BYTE *)std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v548, v40);
LABEL_516:
      if (!(_BYTE)v589 || !v536 || !LOBYTE(v537[1]))
        goto LABEL_590;
      *(_OWORD *)&v548[8] = *(_OWORD *)v588;
      v390 = v535;
      v535 = 0;
      *(_QWORD *)v548 = v37;
      v391 = v537[0];
      v537[0] = 0;
      *(_QWORD *)&v548[24] = v390;
      *(_QWORD *)&v548[32] = v391;
      v548[40] = 0;
      v548[72] = 0;
      if (v43)
      {
        v392 = *(_QWORD *)v577;
        memset(v577, 0, 32);
        *(_QWORD *)&v548[40] = v392;
        *(_QWORD *)&v548[48] = v4;
        *(_QWORD *)&v548[56] = v5;
        *(_DWORD *)&v548[64] = v3;
        *(_DWORD *)&v548[68] = v534;
        v548[72] = 1;
      }
      v388 = 1;
      v548[80] = 1;
      std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v577, v47);
LABEL_548:
      if (LOBYTE(v537[1]))
      {
        v397 = v537[0];
        v537[0] = 0;
        if (v397)
        {
          if (*(_DWORD *)v397 == 2)
            WTF::StringImpl::destroy(v397, v38);
          else
            *(_DWORD *)v397 -= 2;
        }
      }
LABEL_553:
      if (v536)
      {
        v398 = v535;
        v535 = 0;
        if (v398)
        {
          if (*(_DWORD *)v398 == 2)
            WTF::StringImpl::destroy(v398, v38);
          else
            *(_DWORD *)v398 -= 2;
        }
      }
      if (!v388)
      {
LABEL_567:
        v315 = *v6;
        v316 = v6[1];
        *v6 = 0;
        v6[1] = 0;
        v317 = v6[3];
        if (!v317)
          goto LABEL_773;
LABEL_777:
        if (v316)
LABEL_778:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v317 + 16))(v317, v315);
        goto LABEL_773;
      }
      v399 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if (!(_BYTE)v400)
        goto LABEL_889;
      *(_QWORD *)v577 = v399;
      v6 = (uint64_t *)&v577[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
      v401 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v401 = off_1E34B2040;
      *((_QWORD *)v401 + 1) = *(_QWORD *)v577;
      v402 = *(_QWORD *)&v577[8];
      *(_QWORD *)&v577[8] = 0;
      *((_QWORD *)v401 + 2) = v402;
      v588[0] = v401;
      v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
      if (!v548[80])
        goto LABEL_590;
      WebKit::NetworkProcessProxy::requestStorageAccessConfirm((uint64_t)this, *(uint64_t *)v548, *(uint64_t *)&v548[8], *(uint64_t *)&v548[16], (uint64_t)&v548[24], (uint64_t)&v548[32], (uint64_t)&v548[40], (uint64_t *)v588);
      v403 = v588[0];
      v588[0] = 0;
      if (v403)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v403 + 8))(v403);
      if (v548[80])
      {
LABEL_889:
        std::__optional_destruct_base<WebCore::OrganizationStorageAccessPromptQuirk,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v548[40], v400);
        v404 = *(WTF::StringImpl **)&v548[32];
        *(_QWORD *)&v548[32] = 0;
        if (v404)
        {
          if (*(_DWORD *)v404 == 2)
            WTF::StringImpl::destroy(v404, v48);
          else
            *(_DWORD *)v404 -= 2;
        }
        v124 = *(WTF::StringImpl **)&v548[24];
        *(_QWORD *)&v548[24] = 0;
        if (v124)
          goto LABEL_770;
      }
LABEL_773:
      if (this)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
      return;
    case 0x151:
      v18 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v19)
      {
        v20 = v18;
        IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v6, (uint64_t)v588);
        if (v598)
        {
          IPC::Decoder::decode<WebCore::ResourceResponse>(v6, v577);
          if (v585)
          {
            IPC::Decoder::decode<WebCore::ResourceError>(v6, (uint64_t)v537);
            v25 = v543;
            if ((_BYTE)v543)
            {
              if (!v598 || !v585)
                goto LABEL_590;
              *(_QWORD *)v548 = v20;
              *(_OWORD *)&v548[8] = *(_OWORD *)v588;
              *(_OWORD *)&v548[24] = v589;
              *(_OWORD *)&v548[40] = v590;
              v548[56] = v591;
              v26 = v592;
              v592 = 0;
              *(_OWORD *)&v548[72] = v593;
              v549 = v594;
              LODWORD(v593) = v593 & 0xFFFFFFFE;
              v27 = v595;
              v595 = 0;
              *(_QWORD *)&v548[64] = v26;
              v550 = v27;
              v551 = v596;
              v552 = v597;
              std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v553, (uint64_t)v577);
              v28 = *(_OWORD *)v537;
              v537[0] = 0;
              v537[1] = 0;
              *(_OWORD *)v561 = v28;
              v562 = v538;
              *(_OWORD *)v563 = v539;
              LODWORD(v538) = v538 & 0xFFFFFFFE;
              *(_QWORD *)&v563[16] = v540;
              v564 = v541;
              v565 = WORD2(v541);
              v566 = (CFTypeRef)v542;
              LOBYTE(v567) = BYTE8(v542);
              v25 = 1;
              v540 = 0;
              *(_QWORD *)&v542 = 0;
            }
            else
            {
              v548[0] = 0;
            }
            v568 = v25;
            std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v537, v24);
          }
          else
          {
            v548[0] = 0;
            v568 = 0;
          }
          std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v577, v22);
        }
        else
        {
          v548[0] = 0;
          v568 = 0;
        }
        std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v588, v21);
        if (v568)
        {
LABEL_420:
          v6 = (uint64_t *)v553;
          WebKit::NetworkProcessProxy::resourceLoadDidCompleteWithError((uint64_t)this, *(uint64_t *)v548, (const WebKit::ResourceLoadInfo *)&v548[8], (uint64_t)v553, (uint64_t)v561);
          if (!v568)
            goto LABEL_773;
          v23 = v566;
          v566 = 0;
          if (v23)
LABEL_591:
            CFRelease(v23);
          v361 = *(WTF::StringImpl **)&v563[16];
          *(_QWORD *)&v563[16] = 0;
          if (v361)
          {
            if (*(_DWORD *)v361 == 2)
              WTF::StringImpl::destroy(v361, v344);
            else
              *(_DWORD *)v361 -= 2;
          }
          v362 = v561[1];
          v561[1] = 0;
          if (v362)
          {
            if (*(_DWORD *)v362 == 2)
              WTF::StringImpl::destroy(v362, v344);
            else
              *(_DWORD *)v362 -= 2;
          }
          v363 = v561[0];
          v561[0] = 0;
          if (v363)
          {
            if (*(_DWORD *)v363 == 2)
              WTF::StringImpl::destroy(v363, v344);
            else
              *(_DWORD *)v363 -= 2;
          }
LABEL_434:
          v364 = v560;
          v560 = 0;
          if (v364)
            CFRelease(v364);
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v6, v344);
          v365 = v550;
          v550 = 0;
          if (v365)
          {
            if (*(_DWORD *)v365 == 2)
              WTF::StringImpl::destroy(v365, v48);
            else
              *(_DWORD *)v365 -= 2;
          }
          v124 = *(WTF::StringImpl **)&v548[64];
          *(_QWORD *)&v548[64] = 0;
          if (!v124)
            goto LABEL_773;
LABEL_483:
          if (*(_DWORD *)v124 != 2)
          {
            *(_DWORD *)v124 -= 2;
            goto LABEL_773;
          }
          goto LABEL_772;
        }
      }
      else
      {
        v548[0] = 0;
        v568 = 0;
      }
      v410 = *v6;
      v411 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v412 = v6[3];
      if (!v412)
        goto LABEL_773;
      if (!v411)
        goto LABEL_773;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v412 + 16))(v412, v410);
      if (!v568)
        goto LABEL_773;
      goto LABEL_420;
    case 0x152:
      v306 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v307)
      {
        v308 = v306;
        IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v6, (uint64_t)v537);
        if (v547)
        {
          IPC::Decoder::decode<WebCore::ResourceResponse>(v6, v577);
          if (v585)
          {
            IPC::Decoder::decode<WebCore::ResourceRequest>(v6, (uint64_t)v588);
            v311 = v599;
            if (v599)
            {
              if (!v547 || !v585)
                goto LABEL_590;
              *(_QWORD *)v548 = v308;
              *(_OWORD *)&v548[8] = *(_OWORD *)v537;
              *(_OWORD *)&v548[24] = v538;
              *(_OWORD *)&v548[40] = v539;
              v548[56] = v540;
              v312 = v541;
              v541 = 0;
              *(_OWORD *)&v548[72] = v542;
              v549 = v543;
              LODWORD(v542) = v542 & 0xFFFFFFFE;
              *(_QWORD *)&v548[64] = v312;
              v550 = v544;
              v551 = v545;
              v552 = v546;
              v544 = 0;
              std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v553, (uint64_t)v577);
              std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v561, (uint64_t)v588);
              v311 = 1;
            }
            else
            {
              v548[0] = 0;
            }
            v576 = v311;
            std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v588);
          }
          else
          {
            v548[0] = 0;
            v576 = 0;
          }
          std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v577, v310);
        }
        else
        {
          v548[0] = 0;
          v576 = 0;
        }
        std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v537, v309);
        if (v576)
        {
LABEL_446:
          WebKit::NetworkProcessProxy::resourceLoadDidPerformHTTPRedirection((uint64_t)this, *(uint64_t *)v548, (const WebKit::ResourceLoadInfo *)&v548[8], (uint64_t)v553, (uint64_t)v561);
          if (!v576)
            goto LABEL_773;
          v366 = v575;
          v575 = 0;
          if (v366)
            CFRelease(v366);
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v561);
          v368 = v560;
          v560 = 0;
          if (v368)
            CFRelease(v368);
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v553, v367);
          goto LABEL_718;
        }
      }
      else
      {
        v548[0] = 0;
        v576 = 0;
      }
      v446 = *v6;
      v447 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v448 = v6[3];
      if (!v448)
        goto LABEL_773;
      if (!v447)
        goto LABEL_773;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v448 + 16))(v448, v446);
      if (!v576)
        goto LABEL_773;
      goto LABEL_446;
    case 0x153:
      v276 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v277)
      {
        v278 = v276;
        IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v6, (uint64_t)v588);
        if (v598)
        {
          v23 = (_BYTE *)IPC::Decoder::decode<WebCore::AuthenticationChallenge>(v6, (uint64_t)v577);
          v281 = v587;
          if (v587)
          {
            if (!v598)
              goto LABEL_590;
            *(_QWORD *)v548 = v278;
            *(_OWORD *)&v548[8] = *(_OWORD *)v588;
            *(_OWORD *)&v548[24] = v589;
            *(_OWORD *)&v548[40] = v590;
            v548[56] = v591;
            v282 = v592;
            v592 = 0;
            *(_OWORD *)&v548[72] = v593;
            v549 = v594;
            LODWORD(v593) = v593 & 0xFFFFFFFE;
            v283 = v595;
            v595 = 0;
            *(_QWORD *)&v548[64] = v282;
            v550 = v283;
            v551 = v596;
            v552 = v597;
            WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)v553, (uint64_t)v577);
            v284 = v586;
            v586 = 0uLL;
            *(_OWORD *)v573 = v284;
            v281 = 1;
          }
          else
          {
            v548[0] = 0;
          }
          v574 = v281;
          std::__optional_destruct_base<WebCore::AuthenticationChallenge,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationChallengeBase *)v577, v280);
        }
        else
        {
          v548[0] = 0;
          v574 = 0;
        }
        std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v588, v279);
        if (v574)
          goto LABEL_389;
      }
      else
      {
        v548[0] = 0;
        v574 = 0;
      }
      v440 = *v6;
      v441 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v442 = v6[3];
      if (!v442)
        goto LABEL_773;
      if (!v441)
        goto LABEL_773;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v442 + 16))(v442, v440);
      if (!v574)
        goto LABEL_773;
LABEL_389:
      WebKit::NetworkProcessProxy::resourceLoadDidReceiveChallenge((uint64_t)this, *(uint64_t *)v548, (const WebKit::ResourceLoadInfo *)&v548[8], v553);
      if (!v574)
        goto LABEL_773;
      v353 = v573[1];
      v573[1] = 0;
      if (v353)
        CFRelease(v353);
      v354 = v573[0];
      v573[0] = 0;
      if (v354)
        CFRelease(v354);
      WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v553, v352);
      goto LABEL_718;
    case 0x154:
      v108 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v109)
      {
        v110 = v108;
        IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v6, (uint64_t)v588);
        if (v598)
        {
          IPC::Decoder::decode<WebCore::ResourceResponse>(v6, v577);
          v113 = v585;
          if (v585)
          {
            if (!v598)
              goto LABEL_590;
            *(_QWORD *)v548 = v110;
            *(_OWORD *)&v548[8] = *(_OWORD *)v588;
            *(_OWORD *)&v548[24] = v589;
            *(_OWORD *)&v548[40] = v590;
            v548[56] = v591;
            v114 = v592;
            v592 = 0;
            *(_OWORD *)&v548[72] = v593;
            v549 = v594;
            LODWORD(v593) = v593 & 0xFFFFFFFE;
            v115 = v595;
            v595 = 0;
            *(_QWORD *)&v548[64] = v114;
            v550 = v115;
            v551 = v596;
            v552 = v597;
            std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v553, (uint64_t)v577);
            v113 = 1;
          }
          else
          {
            v548[0] = 0;
          }
          LOBYTE(v561[0]) = v113;
          std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v577, v112);
        }
        else
        {
          v548[0] = 0;
          LOBYTE(v561[0]) = 0;
        }
        std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v588, v111);
        if (LOBYTE(v561[0]))
          goto LABEL_370;
      }
      else
      {
        v548[0] = 0;
        LOBYTE(v561[0]) = 0;
      }
      v422 = *v6;
      v423 = v6[1];
      *v6 = 0;
      v6[1] = 0;
      v424 = v6[3];
      if (!v424)
        goto LABEL_773;
      if (!v423)
        goto LABEL_773;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v424 + 16))(v424, v422);
      if (!LOBYTE(v561[0]))
        goto LABEL_773;
LABEL_370:
      v6 = (uint64_t *)v553;
      WebKit::NetworkProcessProxy::resourceLoadDidReceiveResponse((uint64_t)this, *(uint64_t *)v548, (const WebKit::ResourceLoadInfo *)&v548[8], (uint64_t)v553);
      if (LOBYTE(v561[0]))
        goto LABEL_434;
      goto LABEL_773;
    case 0x155:
      v186 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v187)
      {
        v548[0] = 0;
        v559 = 0;
        goto LABEL_623;
      }
      v188 = v186;
      IPC::Decoder::decode<WebKit::ResourceLoadInfo>(v6, (uint64_t)v588);
      if (!v598)
      {
        v548[0] = 0;
        v559 = 0;
        goto LABEL_710;
      }
      IPC::Decoder::decode<WebCore::ResourceRequest>(v6, (uint64_t)v577);
      v190 = v584;
      if (!v584)
        goto LABEL_708;
      v191 = v6[1];
      v192 = *v6;
      v193 = v6[2] - *v6;
      if (v191 <= v193)
      {
        v476 = 0;
        v477 = 0;
        *v6 = 0;
        v6[1] = 0;
        v478 = v6[3];
        if (v478)
        {
          if (v191)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v478 + 16))(v478);
            v477 = *v6;
            v476 = v6[1];
          }
          else
          {
            v476 = 0;
            v477 = 0;
          }
        }
      }
      else
      {
        v194 = (_BYTE *)(v192 + v193);
        v6[2] = (uint64_t)(v194 + 1);
        if (v192)
        {
          v195 = *v194;
          if (v195 < 2)
          {
            if (!*v194)
            {
              v196 = 0;
LABEL_453:
              if (!v598 || !v584)
                goto LABEL_590;
              *(_QWORD *)v548 = v188;
              *(_OWORD *)&v548[8] = *(_OWORD *)v588;
              *(_OWORD *)&v548[24] = v589;
              *(_OWORD *)&v548[40] = v590;
              v548[56] = v591;
              v369 = v592;
              v592 = 0;
              *(_OWORD *)&v548[72] = v593;
              v549 = v594;
              LODWORD(v593) = v593 & 0xFFFFFFFE;
              v370 = v595;
              v595 = 0;
              *(_QWORD *)&v548[64] = v369;
              v550 = v370;
              v551 = v596;
              v552 = v597;
              std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v553, (uint64_t)v577);
              LOBYTE(v557) = 0;
              v558 = 0;
              v190 = 1;
              if (v195)
              {
                v557 = v196;
                v558 = 1;
              }
              goto LABEL_709;
            }
            v23 = IPC::Decoder::decode<IPC::FormDataReference>(v6, v548);
            if (v548[8])
            {
              v196 = *(WTF::RefCountedBase **)v548;
              goto LABEL_453;
            }
LABEL_706:
            v481 = *v6;
            v482 = v6[1];
            *v6 = 0;
            v6[1] = 0;
            v483 = v6[3];
            if (v483 && v482)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v483 + 16))(v483, v481);
            v190 = 0;
LABEL_708:
            v548[0] = 0;
LABEL_709:
            v559 = v190;
            std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v577);
LABEL_710:
            std::__optional_destruct_base<WebKit::ResourceLoadInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v588, v189);
            if (v559)
              goto LABEL_711;
LABEL_623:
            v425 = *v6;
            v426 = v6[1];
            *v6 = 0;
            v6[1] = 0;
            v427 = v6[3];
            if (!v427)
              goto LABEL_773;
            if (!v426)
              goto LABEL_773;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v427 + 16))(v427, v425);
            if (!v559)
              goto LABEL_773;
LABEL_711:
            WebKit::NetworkProcessProxy::resourceLoadDidSendRequest((uint64_t)this, *(uint64_t *)v548, (const WebKit::ResourceLoadInfo *)&v548[8], (uint64_t)v553, (uint64_t)&v557);
            if (!v559)
              goto LABEL_773;
            if (v558)
            {
              v484 = v557;
              v557 = 0;
              if (v484)
                WTF::RefCounted<WebCore::FormData>::deref(v484);
            }
            v485 = v556;
            v556 = 0;
            if (v485)
              CFRelease(v485);
            WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v553);
LABEL_718:
            v486 = v550;
            v550 = 0;
            if (v486)
            {
              if (*(_DWORD *)v486 == 2)
                WTF::StringImpl::destroy(v486, v48);
              else
                *(_DWORD *)v486 -= 2;
            }
            v124 = *(WTF::StringImpl **)&v548[64];
            *(_QWORD *)&v548[64] = 0;
            if (!v124)
              goto LABEL_773;
            goto LABEL_770;
          }
LABEL_705:
          *v6 = 0;
          v6[1] = 0;
          v480 = v6[3];
          if (v480 && v191)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v480 + 16))(v480, v192);
          goto LABEL_706;
        }
        v476 = v191;
        v477 = 0;
      }
      v191 = 0;
      v192 = 0;
      *v6 = 0;
      v6[1] = 0;
      v479 = v6[3];
      if (v479)
      {
        if (v476)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v479 + 16))(v479, v477, v476);
          v192 = *v6;
          v191 = v6[1];
        }
        else
        {
          v191 = 0;
          v192 = 0;
        }
      }
      goto LABEL_705;
    case 0x156:
      IPC::Decoder::decode<std::tuple<WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>((uint64_t *)a3, (uint64_t)v548);
      if (!v548[8])
        goto LABEL_773;
      v291 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
      if (!(_BYTE)v292)
        goto LABEL_263;
      *(_QWORD *)v577 = v291;
      v6 = (uint64_t *)&v577[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
      v293 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v293 = off_1E34B2090;
      *((_QWORD *)v293 + 1) = *(_QWORD *)v577;
      v294 = *(_QWORD *)&v577[8];
      *(_QWORD *)&v577[8] = 0;
      *((_QWORD *)v293 + 2) = v294;
      v588[0] = v293;
      v23 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
      if (!v548[8])
        goto LABEL_590;
      WebKit::NetworkProcessProxy::setDomainsWithCrossPageStorageAccess((uint64_t)this, (uint64_t *)v548, (uint64_t *)v588);
      v295 = v588[0];
      v588[0] = 0;
      if (v295)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v295 + 8))(v295);
LABEL_263:
      if (v548[8] && *(_QWORD *)v548)
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(*(uint64_t *)v548, v292);
      goto LABEL_773;
    case 0x157:
      IPC::Decoder::decode<std::tuple<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>((uint64_t *)a3, (uint64_t)v548);
      if (v548[8])
      {
        WebKit::NetworkProcessProxy::setDomainsWithUserInteraction((uint64_t)this, (uint64_t *)v548);
        if (v548[8])
        {
          if (*(_QWORD *)v548)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)v548, v17);
        }
      }
      goto LABEL_773;
    case 0x158:
      v57 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v58)
        goto LABEL_674;
      v59 = v6[1];
      v60 = *v6;
      v61 = v6[2] - *v6;
      if (v59 <= v61)
      {
        v456 = 0;
        v457 = 0;
        *v6 = 0;
        v6[1] = 0;
        v458 = v6[3];
        if (v458)
        {
          if (v59)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v458 + 16))(v458);
            v457 = *v6;
            v456 = v6[1];
          }
          else
          {
            v456 = 0;
            v457 = 0;
          }
        }
      }
      else
      {
        v62 = (unsigned __int8 *)(v60 + v61);
        v6[2] = (uint64_t)(v62 + 1);
        if (v60)
        {
          v63 = *v62;
          if (v63 < 2)
          {
            WebKit::NetworkProcessProxy::setWebProcessHasUploads((unsigned int *)this, v57, v63 != 0);
            goto LABEL_773;
          }
LABEL_673:
          *v6 = 0;
          v6[1] = 0;
          v460 = v6[3];
          if (v460 && v59)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v460 + 16))(v460, v60);
LABEL_674:
          v315 = *v6;
          v316 = v6[1];
          *v6 = 0;
          v6[1] = 0;
          v317 = v6[3];
          if (!v317)
            goto LABEL_773;
          goto LABEL_777;
        }
        v456 = v59;
        v457 = 0;
      }
      v59 = 0;
      v60 = 0;
      *v6 = 0;
      v6[1] = 0;
      v459 = v6[3];
      if (v459)
      {
        if (v456)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v459 + 16))(v459, v457, v456);
          v60 = *v6;
          v59 = v6[1];
        }
        else
        {
          v59 = 0;
          v60 = 0;
        }
      }
      goto LABEL_673;
    case 0x159:
      v274 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v275)
        WebKit::NetworkProcessProxy::startServiceWorkerBackgroundProcessing((uint64_t)this, v274);
      goto LABEL_773;
    case 0x15A:
      v313 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v314)
        WebKit::NetworkProcessProxy::terminateUnresponsiveServiceWorkerProcesses((uint64_t)this, v313);
      goto LABEL_773;
    case 0x15B:
      v29 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v30)
        WebKit::NetworkProcessProxy::terminateWebProcess((uint64_t)this, v29);
      goto LABEL_773;
    case 0x15C:
      v82 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v83)
        goto LABEL_686;
      v84 = v6[1];
      v85 = *v6;
      v86 = ((v6[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v6;
      if (v84 >= v86 && v84 - v86 > 7)
      {
        v88 = v85 + v86;
        v6[2] = v88 + 8;
        if (!v85)
        {
          v91 = v84;
          v92 = 0;
          goto LABEL_685;
        }
        if (v84 <= v88 + 8 - v85)
        {
          v91 = 0;
          v92 = 0;
          *v6 = 0;
          v6[1] = 0;
          v467 = v6[3];
          if (v467)
          {
            if (!v84)
            {
LABEL_868:
              v91 = 0;
              v92 = 0;
              goto LABEL_685;
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v467 + 16))(v467);
            v91 = 0;
            v533 = v6[1];
            v466 = v6[3];
            *v6 = 0;
            v6[1] = 0;
            v92 = 0;
            if (v466)
            {
              if (v533)
                goto LABEL_817;
            }
          }
        }
        else
        {
          v89 = *(_QWORD *)v88;
          v6[2] = v88 + 9;
          v90 = *(unsigned __int8 *)(v88 + 8);
          v91 = v84;
          v92 = v85;
          if (v90 < 3)
          {
            v93 = v82;
            IPC::Decoder::decode<WebCore::RegistrableDomain>(v6, (uint64_t)v577);
            if (v577[8])
            {
              v23 = (_BYTE *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v6);
              if ((_BYTE)v94)
              {
                if (!v577[8])
                {
LABEL_590:
                  __break(1u);
                  goto LABEL_591;
                }
                v95 = (uint64_t)v23;
                *(_QWORD *)v548 = v93;
                *(_QWORD *)&v548[8] = v89;
                v548[16] = v90;
                v96 = *(WTF::StringImpl **)v577;
                *(_QWORD *)&v548[24] = *(_QWORD *)v577;
                *(_QWORD *)&v548[32] = v23;
                v548[40] = 1;
                v97 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v6);
                if ((_BYTE)v48)
                {
                  *(_QWORD *)v577 = v97;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v577[8], a2);
                  v98 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                  *(_QWORD *)v98 = off_1E34B2130;
                  *((_QWORD *)v98 + 1) = *(_QWORD *)v577;
                  v99 = *(_QWORD *)&v577[8];
                  *(_QWORD *)&v577[8] = 0;
                  *((_QWORD *)v98 + 2) = v99;
                  v588[0] = v98;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v577[8]);
                  WebKit::NetworkProcessProxy::triggerBrowsingContextGroupSwitchForNavigation((uint64_t)this, v93, v89, v90, (WTF::ASCIICaseInsensitiveHash **)&v548[24], v95, (uint64_t *)v588);
                  v100 = v588[0];
                  v588[0] = 0;
                  if (v100)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v100 + 8))(v100);
                  if (!v548[40])
                    goto LABEL_773;
                  v96 = *(WTF::StringImpl **)&v548[24];
                }
                *(_QWORD *)&v548[24] = 0;
                if (!v96)
                  goto LABEL_773;
                if (*(_DWORD *)v96 != 2)
                {
                  *(_DWORD *)v96 -= 2;
                  goto LABEL_773;
                }
                v124 = v96;
LABEL_772:
                WTF::StringImpl::destroy(v124, v48);
                goto LABEL_773;
              }
              if (v577[8])
              {
                v389 = *(WTF::StringImpl **)v577;
                *(_QWORD *)v577 = 0;
                if (v389)
                {
                  if (*(_DWORD *)v389 == 2)
                    WTF::StringImpl::destroy(v389, v94);
                  else
                    *(_DWORD *)v389 -= 2;
                }
              }
            }
LABEL_686:
            v315 = *v6;
            v469 = v6[1];
            *v6 = 0;
            v6[1] = 0;
            v317 = v6[3];
            if (v317 && v469)
              goto LABEL_778;
            goto LABEL_773;
          }
        }
      }
      else
      {
        v91 = 0;
        v92 = 0;
        *v6 = 0;
        v6[1] = 0;
        v466 = v6[3];
        if (v466)
        {
          if (!v84)
            goto LABEL_868;
LABEL_817:
          (*(void (**)(uint64_t))(*(_QWORD *)v466 + 16))(v466);
          v92 = *v6;
          v91 = v6[1];
        }
      }
LABEL_685:
      *v6 = 0;
      v6[1] = 0;
      v468 = v6[3];
      if (v468 && v91)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v468 + 16))(v468, v92, v91);
      goto LABEL_686;
    case 0x15D:
      IPC::Decoder::decode<std::tuple<WebKit::RemoteWorkerType,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t)v548, (uint64_t *)a3);
      if (v548[24])
        WebKit::NetworkProcessProxy::unregisterRemoteWorkerClientProcess((uint64_t)this, v548[0], *(uint64_t *)&v548[8], *(uint64_t *)&v548[16]);
      goto LABEL_773;
    case 0x15E:
      v15 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3);
      if (v16)
        WebKit::NetworkProcessProxy::wakeUpWebProcessForIPC((uint64_t)this, v15);
      goto LABEL_773;
    default:
      goto LABEL_773;
  }
}

void WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, WebKit::AuthenticationChallengeProxy *a3)
{
  uint64_t v4;
  uint64_t v5;
  WebKit::CompletionHandlerCallChecker *v7;
  WebKit::CompletionHandlerCallChecker *v8;
  uint64_t v9;
  id WeakRetained;
  const void *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  CFTypeRef cf;

  v4 = *((_QWORD *)this + 1);
  if (v4
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && (*(_DWORD *)(v5 + 32) & 0x8000000) != 0
    && (v7 = (WebKit::CompletionHandlerCallChecker *)objc_loadWeakRetained((id *)(v5 + 24))) != 0)
  {
    v8 = v7;
    WebKit::CompletionHandlerCallChecker::create(v7, (objc_object *)sel_webView_didReceiveAuthenticationChallenge_completionHandler_, (uint64_t *)&v20);
    v9 = *((_QWORD *)this + 1);
    if (v9)
      v9 = *(_QWORD *)(v9 + 8);
    WeakRetained = objc_loadWeakRetained((id *)(v9 + 16));
    v11 = (const void *)*((_QWORD *)a3 + 1);
    CFRetain(v11);
    v12 = v20;
    v20 = 0;
    v13 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
    *v13 = MEMORY[0x1E0C809A0];
    v13[1] = 50331650;
    v13[2] = WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::{lambda(void *,NSURLSessionAuthChallengeDisposition,NSURLCredential *)#1}::__invoke;
    v13[3] = &WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::fromCallable<WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0>(WebKit::NavigationState::NavigationClient::didReceiveAuthenticationChallenge(WebKit::WebPageProxy &,WebKit::AuthenticationChallengeProxy &)::$_0)::descriptor;
    v13[4] = a3;
    v13[5] = v12;
    -[WebKit::CompletionHandlerCallChecker webView:didReceiveAuthenticationChallenge:completionHandler:](v8, "webView:didReceiveAuthenticationChallenge:completionHandler:", WeakRetained, v11, v13);
    _Block_release(v13);
    if (WeakRetained)
      CFRelease(WeakRetained);
    CFRelease(v8);
  }
  else
  {
    v14 = *((_QWORD *)a3 + 58);
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v20);
    cf = 0;
    v16 = *(_QWORD *)(v14 + 16);
    if (v16)
    {
      *(_QWORD *)(v14 + 16) = 0;
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 16))(v16, 3, &v20);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = cf;
      cf = 0;
      if (v17)
        CFRelease(v17);
    }
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v20;
    v20 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v15);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
}

void sub_196D4E580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9)
{
  const void *v9;
  const void *v10;
  const void *v11;

  _Block_release(v11);
  if (v10)
    CFRelease(v10);
  if (a9)
    WTF::ThreadSafeRefCounted<WebKit::CompletionHandlerCallChecker,(WTF::DestructionThread)0>::deref(a9);
  CFRelease(v9);
  _Unwind_Resume(a1);
}

Class WebKit::CompletionHandlerCallChecker::create@<X0>(WebKit::CompletionHandlerCallChecker *this@<X0>, objc_object *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  Class result;

  v7 = WTF::fastMalloc((WTF *)0x20);
  result = object_getClass(this);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = result;
  *(_QWORD *)(v7 + 16) = a2;
  *(_BYTE *)(v7 + 24) = 0;
  *a3 = v7;
  return result;
}

void sub_196D4E63C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::AuthenticationChallenge>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 432))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  _BYTE v17[24];
  int v18;
  unsigned __int8 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v10 = 0;
    v11 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        result = v15;
        v11 = *v15;
        v10 = v15[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v10 = v3;
    v11 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v13 = result[3];
    if (v13)
    {
      v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        result = v14;
        v4 = *v14;
        v3 = v14[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 >= 2)
  {
LABEL_13:
    *result = 0;
    result[1] = 0;
    result = (uint64_t *)result[3];
    if (result && v3)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
    *(_BYTE *)a2 = 0;
    goto LABEL_15;
  }
  if (!v7)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 40) = 1;
    return result;
  }
  result = (uint64_t *)IPC::Decoder::decode<WebCore::SecurityOriginData>(result, v17);
  v8 = v19;
  *(_BYTE *)a2 = 0;
  if (!v8)
  {
LABEL_15:
    *(_BYTE *)(a2 + 40) = 0;
    return result;
  }
  *(_DWORD *)(a2 + 24) = -1;
  result = (uint64_t *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v17);
  *(_BYTE *)(a2 + 32) = 1;
  v9 = v19;
  *(_BYTE *)(a2 + 40) = 1;
  if (v9)
  {
    if (v18 != -1)
      return (uint64_t *)((uint64_t (*)(char *, _BYTE *))off_1E34B0790[v18])(&v16, v17);
  }
  return result;
}

void WebKit::WebProcessProxy::maybeShutDown(WebKit::WebProcessProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::WebProcessPool *v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  int canCacheProcess;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  _QWORD *v21;
  WTF::RunLoop *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  int v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  NSObject *v45;
  uint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE buf[12];
  __int16 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (WebKit::WebProcessProxy::isDummyProcessProxy(this))
  {
    v2 = *((_QWORD *)this + 69);
    if (!v2 || !*(_DWORD *)(v2 - 12))
    {
      v7 = *((_QWORD *)this + 64);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
          v9 = (WebKit::WebProcessPool *)(v8 - 16);
        else
          v9 = 0;
      }
      else
      {
        v9 = 0;
      }
      WebKit::WebProcessPool::disconnectProcess(v9, this);
      return;
    }
  }
  v3 = *((_QWORD *)this + 17);
  if ((v3 && *(_BYTE *)(v3 + 104) || *((_QWORD *)this + 18))
    && WebKit::WebProcessProxy::canTerminateAuxiliaryProcess(this))
  {
    if (!WebKit::WebProcessProxy::canBeAddedToWebProcessCache(this))
      goto LABEL_64;
    v4 = *((_QWORD *)this + 64);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v10 = *(uint64_t **)(v6 + 768);
    ++*(_DWORD *)v10;
    v11 = (unsigned int *)((char *)this + 16);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    canCacheProcess = WebKit::WebProcessCache::canCacheProcess((WebKit::WebProcessCache *)v10, this);
    v14 = canCacheProcess;
    if (!canCacheProcess)
    {
LABEL_61:
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)this + 4);
      if (!*(_DWORD *)v10)
      {
        __break(0xC471u);
        JUMPOUT(0x196D4EDD4);
      }
      --*(_DWORD *)v10;
      CFRelease(*(CFTypeRef *)(v6 + 8));
      if ((v14 & 1) != 0)
        return;
LABEL_64:
      WebKit::WebProcessProxy::shutDown(this);
      return;
    }
    v50 = canCacheProcess;
    v15 = *(_QWORD *)(*((_QWORD *)this + 64) + 8);
    if (v15)
      v16 = v15 - 16;
    else
      v16 = 0;
    v51 = v6;
    v52 = v16;
    CFRetain(*(CFTypeRef *)(v16 + 8));
    v17 = WebKit::generateAddRequestIdentifier(void)::identifier;
    v18 = ++WebKit::generateAddRequestIdentifier(void)::identifier;
    v19 = v10 + 1;
    do
      v20 = __ldaxr(v11);
    while (__stlxr(v20 + 1, v11));
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v21 = this;
    v22 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v21);
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v23 = off_1E34D76B8;
    v23[1] = WebKit::WebProcessCache::CachedProcess::evictionTimerFired;
    v23[2] = 0;
    v23[3] = v21;
    WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v21 + 1), v22);
    v21[1] = off_1E34ABE00;
    v21[4] = v23;
    v24 = *v21;
    v25 = *(_QWORD *)(*v21 + 552);
    if (v25 && *(_DWORD *)(v25 - 12))
    {
      __break(0xC471u);
      JUMPOUT(0x196D4EDF4);
    }
    v26 = *(_QWORD *)(v24 + 752);
    if (!v26
      || WTF::WeakHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessProxy>(v26 + 312, v24))
    {
      __break(0xC471u);
      JUMPOUT(0x196D4EDB4);
    }
    WebKit::WebProcessProxy::setIsInProcessCache(*v21, 1, 0);
    WTF::RunLoop::TimerBase::start();
    v27 = *v19;
    if (*v19
      || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v10 + 1),
          (v27 = *v19) != 0))
    {
      v28 = *(_DWORD *)(v27 - 8);
    }
    else
    {
      v28 = 0;
    }
    v29 = (v17 - (v18 << 32)) ^ ((unint64_t)(v17 - (v18 << 32)) >> 22);
    v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
    v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
    v32 = v28 & ((v31 >> 31) ^ v31);
    v33 = (uint64_t *)(v27 + 16 * v32);
    v34 = *v33;
    if (*v33)
    {
      v35 = 0;
      v36 = 1;
      do
      {
        if (v34 == v18)
        {
          WebKit::WebProcessCache::CachedProcess::~CachedProcess((WebKit::WebProcessCache::CachedProcess *)v21);
          WTF::fastFree(v39, v40);
          v14 = v50;
          goto LABEL_53;
        }
        if (v34 == -1)
          v35 = v33;
        v32 = (v32 + v36) & v28;
        v33 = (uint64_t *)(v27 + 16 * v32);
        v34 = *v33;
        ++v36;
      }
      while (*v33);
      if (v35)
      {
        *v35 = 0;
        v35[1] = 0;
        --*(_DWORD *)(*v19 - 16);
        v33 = v35;
      }
    }
    *v33 = v18;
    std::unique_ptr<WebKit::WebProcessCache::CachedProcess>::reset[abi:sn180100](v33 + 1, v21);
    v37 = *v19;
    if (*v19)
      v38 = *(_DWORD *)(v37 - 12) + 1;
    else
      v38 = 1;
    v14 = v50;
    *(_DWORD *)(v37 - 12) = v38;
    v41 = *v19;
    if (*v19)
      v42 = *(_DWORD *)(v41 - 12);
    else
      v42 = 0;
    v43 = (*(_DWORD *)(v41 - 16) + v42);
    v44 = *(unsigned int *)(v41 - 4);
    if (v44 > 0x400)
    {
      if (v44 > 2 * v43)
        goto LABEL_53;
    }
    else if (3 * v44 > 4 * v43)
    {
LABEL_53:
      v45 = qword_1ECE71668;
      if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
      {
        v46 = *((_QWORD *)this + 17);
        if (v46)
          LODWORD(v46) = *(_DWORD *)(v46 + 108);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v10;
        v54 = 1024;
        v55 = v46;
        _os_log_impl(&dword_196BCC000, v45, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] WebProcessCache::addProcessIfPossible: Checking if process is responsive before caching it", buf, 0x12u);
      }
      do
        v47 = __ldaxr(v11);
      while (__stlxr(v47 + 1, v11));
      v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v48 = &off_1E34D7690;
      v48[1] = v10;
      v48[2] = v52;
      v48[3] = this;
      v48[4] = v18;
      *(_QWORD *)buf = v48;
      WebKit::WebProcessProxy::isResponsive(this, (uint64_t *)buf);
      v49 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
      v6 = v51;
      goto LABEL_61;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,std::unique_ptr<WebKit::WebProcessCache::CachedProcess>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessCache::CachedProcess>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v10 + 1);
    goto LABEL_53;
  }
}

uint64_t WebKit::WebProcessProxy::canTerminateAuxiliaryProcess(WebKit::WebProcessProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _BOOL4 v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  int v30;
  WebKit::WebProcessProxy *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 69);
  if (v2 && *(_DWORD *)(v2 - 12)
    || !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 70)
    || !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 74)
    || !WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 72)
    || *((_BYTE *)this + 712)
    || *(_QWORD *)(*((_QWORD *)this + 127) + 8))
  {
    v3 = qword_1ECE71C68;
    v5 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v5)
      return result;
    v7 = *((_QWORD *)this + 17);
    if (v7)
      v8 = *(_DWORD *)(v7 + 108);
    else
      v8 = 0;
    v9 = *((_QWORD *)this + 69);
    if (v9)
      v10 = *(_DWORD *)(v9 - 12);
    else
      v10 = 0;
    v11 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 576, v4);
    v13 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t)this + 592, v12);
    v14 = *((unsigned __int8 *)this + 712);
    v15 = *(_QWORD *)(*((_QWORD *)this + 127) + 8);
    v30 = 134219520;
    v31 = this;
    v32 = 1024;
    v33 = v8;
    v34 = 1024;
    v35 = v10;
    v36 = 1024;
    v37 = v11;
    v38 = 1024;
    v39 = v13;
    v40 = 1024;
    v41 = v14;
    v42 = 2048;
    v43 = v15;
    v16 = "%p - [PID=%i] WebProcessProxy::canTerminateAuxiliaryProcess: returns false (pageCount=%u, provisionalPageCount"
          "=%u, suspendedPageCount=%u, m_isInProcessCache=%d, m_shutdownPreventingScopeCounter=%lu)";
    v17 = v3;
    v18 = 52;
    goto LABEL_16;
  }
  if (*((_BYTE *)this + 872))
  {
    v19 = qword_1ECE71C68;
    v20 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v20)
    {
      v21 = *((_QWORD *)this + 17);
      if (v21)
        LODWORD(v21) = *(_DWORD *)(v21 + 108);
      v30 = 134218240;
      v31 = this;
      v32 = 1024;
      v33 = v21;
      v16 = "%p - [PID=%i] WebProcessProxy::canTerminateAuxiliaryProcess: returns false because process is running service workers";
LABEL_40:
      v17 = v19;
      v18 = 18;
LABEL_16:
      _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v30, v18);
      return 0;
    }
  }
  else
  {
    v22 = *((_QWORD *)this + 64);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
        v24 = v23 - 16;
      else
        v24 = 0;
    }
    else
    {
      v24 = 0;
    }
    CFRetain(*(CFTypeRef *)(v24 + 8));
    if (*(_BYTE *)(v24 + 504))
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 + 48) + 87);
      CFRelease(*(CFTypeRef *)(v24 + 8));
      if (!v25)
      {
        v26 = qword_1ECE71C68;
        if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
        {
          v27 = *((_QWORD *)this + 17);
          if (v27)
            LODWORD(v27) = *(_DWORD *)(v27 + 108);
          v30 = 134218240;
          v31 = this;
          v32 = 1024;
          v33 = v27;
          _os_log_impl(&dword_196BCC000, v26, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::canTerminateAuxiliaryProcess: returns true", (uint8_t *)&v30, 0x12u);
        }
        return 1;
      }
    }
    else
    {
      CFRelease(*(CFTypeRef *)(v24 + 8));
    }
    v19 = qword_1ECE71C68;
    v28 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v28)
    {
      v29 = *((_QWORD *)this + 17);
      if (v29)
        LODWORD(v29) = *(_DWORD *)(v29 + 108);
      v30 = 134218240;
      v31 = this;
      v32 = 1024;
      v33 = v29;
      v16 = "%p - [PID=%i] WebProcessProxy::canTerminateAuxiliaryProcess: returns false because process termination is disabled";
      goto LABEL_40;
    }
  }
  return result;
}

uint64_t WebKit::WebProcessProxy::canBeAddedToWebProcessCache(WebKit::WebProcessProxy *this)
{
  NSObject *v2;
  _BOOL4 v3;
  uint64_t result;
  uint64_t v5;
  const char *v6;
  _BOOL4 v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WebKit::WebProcessProxy *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (PAL::deviceClassIsSmallScreen(this)
    && (!WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 42)
     || !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 44)))
  {
    v2 = qword_1ECE71C68;
    v7 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v7)
      return result;
    v8 = *((_QWORD *)this + 17);
    if (v8)
      LODWORD(v8) = *(_DWORD *)(v8 + 108);
    v13 = 134218240;
    v14 = this;
    v15 = 1024;
    v16 = v8;
    v6 = "%p - [PID=%i] WebProcessProxy::canBeAddedToWebProcessCache: Not adding to process cache because the process is runnable";
    goto LABEL_18;
  }
  if (*((_BYTE *)this + 872))
  {
    v2 = qword_1ECE71C68;
    v3 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v3)
      return result;
    v5 = *((_QWORD *)this + 17);
    if (v5)
      LODWORD(v5) = *(_DWORD *)(v5 + 108);
    v13 = 134218240;
    v14 = this;
    v15 = 1024;
    v16 = v5;
    v6 = "%p - [PID=%i] WebProcessProxy::canBeAddedToWebProcessCache: Not adding to process cache because the process is running workers";
LABEL_18:
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v13, 0x12u);
    return 0;
  }
  if (*((_BYTE *)this + 780))
  {
    v2 = qword_1ECE71C68;
    v9 = os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v9)
      return result;
    v10 = *((_QWORD *)this + 17);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    v13 = 134218240;
    v14 = this;
    v15 = 1024;
    v16 = v10;
    v6 = "%p - [PID=%i] WebProcessProxy::canBeAddedToWebProcessCache: Not adding to process cache because the process is "
         "cross-origin isolated";
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 64) + 8);
  if (v11)
    v12 = v11 - 16;
  else
    v12 = 0;
  {
    WebKit::allInspectorProcessPools(void)::allInspectorProcessPools = 0;
    *(_QWORD *)algn_1ECE73928 = 0;
  }
  return WTF::WeakHashSet<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessPool>((uint64_t)&WebKit::allInspectorProcessPools(void)::allInspectorProcessPools, v12) ^ 1;
}

void WebKit::WebProcessProxy::shutDown(WebKit::WebProcessProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  CFTypeRef **v20;
  uint64_t v21;
  CFTypeRef *v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFTypeRef *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE buf[36];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if ((WebKit::isMainThreadOrCheckDisabled(this) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196D4F6DCLL);
  }
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 17);
    if (v3)
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = this;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%i] WebProcessProxy::shutDown:", buf, 0x12u);
  }
  if (*((_BYTE *)this + 712))
  {
    v4 = *((_QWORD *)this + 64);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v6 = v5 - 16;
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
    }
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v7 = *(_DWORD **)(v6 + 768);
    ++*v7;
    WebKit::WebProcessCache::removeProcess((uint64_t)v7, (uint64_t)this, 0);
    if (!*v7)
    {
      __break(0xC471u);
      JUMPOUT(0x196D4F6FCLL);
    }
    --*v7;
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  WebKit::AuxiliaryProcessProxy::shutDownProcess(this);
  WTF::RunLoop::TimerBase::stop((WebKit::WebProcessProxy *)((char *)this + 464));
  WTF::RunLoop::TimerBase::stop((WebKit::WebProcessProxy *)((char *)this + 432));
  std::__optional_destruct_base<WebKit::WebProcessProxy::AudibleMediaActivity,false>::reset[abi:sn180100]((unsigned __int8 *)this + 968, v8);
  std::__optional_destruct_base<WTF::RefPtr<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count,WTF::RawPtrTraits<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count>,WTF::DefaultRefDerefTraits<WTF::RefCounter<WebKit::WebProcessWithMediaStreamingCounterType>::Count>>,false>::reset[abi:sn180100]((_BYTE *)this + 992);
  v9 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v9)
  {
    v10 = *(uint64_t **)v9;
    v11 = *(_QWORD *)(v9 + 8) - 1;
    *(_QWORD *)(v9 + 8) = v11;
    if (v10)
    {
      v12 = *v10;
      if (!*v10)
        goto LABEL_21;
      v13 = *(_BYTE *)(v9 + 16);
      *(_BYTE *)(v9 + 16) = 1;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
      *(_BYTE *)(v9 + 16) = v13;
      if (*(_QWORD *)v9)
        goto LABEL_21;
      v11 = *(_QWORD *)(v9 + 8);
    }
    if (!v11)
      MEMORY[0x19AEB936C](v9, 0x1020C40545B2139);
  }
LABEL_21:
  v14 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (!v14)
    goto LABEL_28;
  v15 = *(uint64_t **)v14;
  v16 = *(_QWORD *)(v14 + 8) - 1;
  *(_QWORD *)(v14 + 8) = v16;
  if (v15)
  {
    v17 = *v15;
    if (!*v15)
      goto LABEL_28;
    v18 = *(_BYTE *)(v14 + 16);
    *(_BYTE *)(v14 + 16) = 1;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, 0);
    *(_BYTE *)(v14 + 16) = v18;
    if (*(_QWORD *)v14)
      goto LABEL_28;
    v16 = *(_QWORD *)(v14 + 8);
  }
  if (!v16)
    MEMORY[0x19AEB936C](v14, 0x1020C40545B2139);
LABEL_28:
  WebKit::WebProcessProxy::mainPages(this, (uint64_t)buf);
  if (*(_DWORD *)&buf[12])
  {
    v20 = *(CFTypeRef ***)buf;
    v21 = 8 * *(unsigned int *)&buf[12];
    do
    {
      v22 = *v20++;
      CFRetain(v22[1]);
      WebKit::WebPageProxy::disconnectFramesFromPage((WebKit::WebPageProxy *)v22, v23);
      CFRelease(v22[1]);
      v21 -= 8;
    }
    while (v21);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v19);
  v24 = (uint64_t *)((char *)this + 640);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 80, buf);
  v25 = *((_QWORD *)this + 80);
  if (v25)
  {
    v26 = *(unsigned int *)(v25 - 4);
    v27 = v25 + 8 * v26;
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  v39 = (char *)this + 640;
  v40 = v27;
  v41 = v27;
  v42 = v27;
  v43 = v25 + 8 * v26;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v39);
  for (i = *(_QWORD *)&buf[8]; *(_QWORD *)&buf[8] != v40; i = *(_QWORD *)&buf[8])
  {
    v30 = *(_QWORD *)(*(_QWORD *)i + 8);
    if (v30)
      v31 = v30 - 16;
    else
      v31 = 0;
    CFRetain(*(CFTypeRef *)(v31 + 8));
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v31 + 40, this);
    IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)this + 152, 0xCEu, *(_QWORD *)(v31 + 32));
    if (v30)
      CFRelease(*(CFTypeRef *)(v30 - 8));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  v32 = *v24;
  if (*v24)
  {
    *((_QWORD *)this + 80) = 0;
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v32, v28);
    v33 = *((_QWORD *)this + 80);
    *((_DWORD *)this + 162) = 0;
    if (v33)
    {
      LODWORD(v33) = *(_DWORD *)(v33 - 12);
      if (v33 > 0x7FFFFFFE)
        LODWORD(v33) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v33) = 0;
    *((_DWORD *)this + 162) = 0;
  }
  *((_DWORD *)this + 163) = 2 * v33;
  v34 = *((_QWORD *)this + 76);
  if (v34)
  {
    *((_QWORD *)this + 76) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<API::UserInitiatedAction,WTF::RawPtrTraits<API::UserInitiatedAction>,WTF::DefaultRefDerefTraits<API::UserInitiatedAction>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::UserGestureTokenIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v34, v28);
  }
  v35 = *((_QWORD *)this + 131);
  if (v35)
    WebKit::WebLockRegistryProxy::processDidExit(v35);
  v36 = *((_QWORD *)this + 64);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 8);
    if (v37)
      v38 = (CFTypeRef *)(v37 - 16);
    else
      v38 = 0;
  }
  else
  {
    v38 = 0;
  }
  CFRetain(v38[1]);
  WebKit::WebProcessPool::disconnectProcess((WebKit::WebProcessPool *)v38, this);
  CFRelease(v38[1]);
}

unsigned __int8 *WebKit::AuxiliaryProcessProxy::shutDownProcess(WebKit::AuxiliaryProcessProxy *this)
{
  uint64_t v2;
  void *v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v20;
  char v21;
  IPC::Encoder *v22;

  v2 = *((_QWORD *)this + 17);
  if (v2 && *(_BYTE *)(v2 + 104))
  {
    *((_QWORD *)this + 17) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    WebKit::ProcessLauncher::platformInvalidate((WebKit::ProcessLauncher *)v2);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 8), v3);
  }
  else
  {
    if (!*((_QWORD *)this + 18))
      return WebKit::ProcessThrottler::didDisconnectFromProcess((WebKit::AuxiliaryProcessProxy *)((char *)this + 200));
    WebKit::XPCConnectionTerminationWatchdog::startConnectionTerminationWatchdog(this);
  }
  v4 = (unsigned __int8 **)*((_QWORD *)this + 18);
  if (v4)
  {
    v5 = *v4;
    if (__ldaxr(*v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEABB3C](v5);
LABEL_11:
    ++*((_QWORD *)v5 + 1);
    v7 = __ldxr(v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, v5))
      {
LABEL_16:
        (*(void (**)(WebKit::AuxiliaryProcessProxy *, unsigned __int8 **))(*(_QWORD *)this + 192))(this, v4);
        v8 = *((_QWORD *)this + 17);
        if (v8 && *(_BYTE *)(v8 + 104) || *((_QWORD *)this + 18))
        {
          v9 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v9 = 7;
          *(_QWORD *)(v9 + 8) = 0;
          *(_QWORD *)(v9 + 528) = v9 + 16;
          *(_QWORD *)(v9 + 536) = v9 + 16;
          *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v9 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
          v22 = (IPC::Encoder *)v9;
          LOBYTE(v20) = 0;
          v21 = 0;
          WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)this, &v22, 0, (uint64_t)&v20, 1);
          if (v21 && v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v11 = v22;
          v22 = 0;
          if (v11)
          {
            IPC::Encoder::~Encoder(v11, v10);
            WTF::fastFree(v12, v13);
          }
        }
        IPC::Connection::invalidate((uint64_t)v4);
        {
          v14 = WebKit::connectionToProcessMap(void)::map;
        }
        else
        {
          v14 = 0;
          WebKit::connectionToProcessMap(void)::map = 0;
        }
        v15 = *((_QWORD *)this + 18);
        v16 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(v15 + 24));
        if (v14)
        {
          v18 = (_QWORD *)(v14 + 16 * *(unsigned int *)(v14 - 4));
          if (v18 == v16)
            goto LABEL_34;
        }
        else
        {
          if (!v16)
            goto LABEL_34;
          v18 = 0;
        }
        if (v18 != v16)
        {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v16, v17);
          v15 = *((_QWORD *)this + 18);
          *((_QWORD *)this + 18) = 0;
          if (!v15)
            goto LABEL_36;
          goto LABEL_35;
        }
LABEL_34:
        *((_QWORD *)this + 18) = 0;
LABEL_35:
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref((unsigned __int8 **)v15);
LABEL_36:
        WTF::RunLoop::TimerBase::stop((WebKit::AuxiliaryProcessProxy *)((char *)this + 64));
        *((_QWORD *)this + 12) = 0;
        *(_WORD *)((char *)this + 105) = 0;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v4);
        return WebKit::ProcessThrottler::didDisconnectFromProcess((WebKit::AuxiliaryProcessProxy *)((char *)this + 200));
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    goto LABEL_16;
  }
  return WebKit::ProcessThrottler::didDisconnectFromProcess((WebKit::AuxiliaryProcessProxy *)((char *)this + 200));
}

uint64_t WebKit::WebLockRegistryProxy::processDidExit(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;

  if (*(_BYTE *)(this + 24))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 752) + 24);
    v1 = WebKit::allDataStores((WebKit *)this);
    this = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v1, &v2);
    if (this)
      return WebCore::LocalWebLockRegistry::clientsAreGoingAway();
  }
  return this;
}

unsigned __int8 *WebKit::ProcessThrottler::didDisconnectFromProcess(WebKit::ProcessThrottler *this)
{
  NSObject *v2;
  uint64_t v3;
  unsigned __int8 *result;
  void *v5;
  uint64_t v6;
  int v7;
  WebKit::ProcessThrottler *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 136);
    if (v3)
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    v7 = 134218240;
    v8 = this;
    v9 = 1024;
    v10 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::didDisconnectFromProcess:", (uint8_t *)&v7, 0x12u);
  }
  WTF::RunLoop::TimerBase::stop((WebKit::ProcessThrottler *)((char *)this + 72));
  result = (unsigned __int8 *)WTF::RunLoop::TimerBase::stop((WebKit::ProcessThrottler *)((char *)this + 40));
  if (*((_BYTE *)this + 176))
    *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 189) = 0;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 8), v5);
  return result;
}

void WebKit::ProcessLauncher::terminateXPCConnection(WebKit::ProcessLauncher *this)
{
  _xpc_connection_s *v2;
  void *v3;

  v2 = (_xpc_connection_s *)*((_QWORD *)this + 3);
  if (v2)
  {
    xpc_connection_cancel(v2);
    v3 = (void *)*((_QWORD *)this + 3);
    if (v3)

    *((_QWORD *)this + 3) = 0;
  }
}

uint64_t WebKit::WebProcessPool::tryPrewarmWithDomainInformation(uint64_t this, WebKit::WebProcessProxy *a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  WTF **v8;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  char v19;
  IPC::Encoder *v20;

  if (this)
  {
    v5 = this;
    v6 = *(_DWORD *)(this - 8);
    v7 = WTF::ASCIICaseInsensitiveHash::hash(*a3, a2) & v6;
    v8 = (WTF **)(v5 + 16 * v7);
    this = WTF::equal(*v8, 0, v9);
    if ((this & 1) == 0)
    {
      for (i = 1; ; ++i)
      {
        if (*v8 != (WTF *)-1)
        {
          this = WTF::equalIgnoringASCIICase(*v8, *a3, v10);
          if ((this & 1) != 0)
            break;
        }
        v7 = ((_DWORD)v7 + i) & v6;
        v8 = (WTF **)(v5 + 16 * v7);
        this = WTF::equal(*v8, 0, v10);
        if ((this & 1) != 0)
          return this;
      }
      v12 = *(_QWORD *)(v5 + 16 * v7 + 8);
      if (v12)
      {
        v13 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v13 = 2604;
        *(_QWORD *)(v13 + 8) = 0;
        *(_QWORD *)(v13 + 528) = v13 + 16;
        *(_QWORD *)(v13 + 536) = v13 + 16;
        *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v13 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
        v20 = (IPC::Encoder *)v13;
        IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v13, v12);
        IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v13, v12 + 16);
        LOBYTE(v18) = 0;
        v19 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)a2, &v20, 0, (uint64_t)&v18, 1);
        if (v19)
        {
          v15 = v18;
          v18 = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
        this = (uint64_t)v20;
        v20 = 0;
        if (this)
        {
          IPC::Encoder::~Encoder((IPC::Encoder *)this, v14);
          return WTF::fastFree(v16, v17);
        }
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::NetworkProcessProxy::addAllowedFirstPartyForCookies(uint64_t a1, uint64_t a2, WTF::ASCIICaseInsensitiveHash **a3, int a4, uint64_t *a5)
{
  uint64_t *v10;
  unsigned int v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  IPC::Encoder *result;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF *v52;
  void *v53;
  WTF *v54;
  WTF *v55;
  void *v56;
  WTF *v57[2];
  char v58;
  IPC::Encoder *v59;

  v10 = (uint64_t *)(a1 + 552);
  v11 = *(_DWORD *)(a1 + 560);
  *(_DWORD *)(a1 + 560) = v11 + 1;
  if (v11 > *(_DWORD *)(a1 + 564))
    WTF::WeakHashMap<WebKit::WebProcessProxy,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultWeakPtrImpl>::removeNullReferences((unsigned int **)(a1 + 552), (void *)a2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v13 = *(unsigned int **)(a2 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 + 1, v13));
  v57[0] = (WTF *)v13;
  if (v13)
  {
    do
    {
      v16 = __ldaxr(v13);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v13));
    if (!v17)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v12);
    }
  }
  v18 = *v10;
  if (*v10
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v10, 0), (v18 = *v10) != 0))
  {
    v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v19 = 0;
  }
  v21 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(v57);
  v22 = 0;
  v23 = 1;
  v24 = (unsigned int *)v57[0];
  while (1)
  {
    v25 = v21 & v19;
    v26 = v18 + 24 * v25;
    v27 = *(unsigned int **)v26;
    if (*(_QWORD *)v26 != -1)
      break;
    v22 = v18 + 24 * v25;
LABEL_19:
    v21 = v23 + v25;
    ++v23;
  }
  if (!v27)
  {
    if (v22)
    {
      *(_QWORD *)v22 = 0;
      *(_BYTE *)(v22 + 8) = 0;
      *(_QWORD *)(v22 + 16) = 0;
      --*(_DWORD *)(*v10 - 16);
      v24 = (unsigned int *)v57[0];
      v26 = v22;
    }
    v57[0] = 0;
    v28 = *(unsigned int **)v26;
    *(_QWORD *)v26 = v24;
    if (v28)
    {
      do
      {
        v32 = __ldaxr(v28);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v28));
      if (!v33)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v20);
      }
    }
    *(_BYTE *)(v26 + 8) = 0;
    v29 = *(WTF::StringImpl ***)(v26 + 16);
    *(_QWORD *)(v26 + 16) = 0;
    if (v29)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v29, (WTF::StringImpl *)v20);
    v30 = *v10;
    if (*v10)
      v31 = *(_DWORD *)(v30 - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(v30 - 12) = v31;
    v36 = *v10;
    if (*v10)
      v37 = *(_DWORD *)(v36 - 12);
    else
      v37 = 0;
    v38 = (*(_DWORD *)(v36 - 16) + v37);
    v39 = *(unsigned int *)(v36 - 4);
    if (v39 > 0x400)
    {
      if (v39 <= 2 * v38)
      {
LABEL_38:
        v26 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v10, (unsigned int **)v26);
        v36 = *v10;
        if (*v10)
          LODWORD(v39) = *(_DWORD *)(v36 - 4);
        else
          LODWORD(v39) = 0;
      }
    }
    else if (3 * v39 <= 4 * v38)
    {
      goto LABEL_38;
    }
    v40 = v36 + 24 * v39;
    v24 = (unsigned int *)v57[0];
    goto LABEL_45;
  }
  if (v27 != (unsigned int *)v57[0])
    goto LABEL_19;
  v34 = *v10;
  if (*v10)
    v35 = *(_DWORD *)(v34 - 4);
  else
    v35 = 0;
  v40 = v34 + 24 * v35;
LABEL_45:
  v57[0] = 0;
  if (v24)
  {
    do
    {
      v45 = __ldaxr(v24);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v24));
    if (!v46)
    {
      atomic_store(1u, v24);
      v47 = v40;
      WTF::fastFree((WTF *)v24, v20);
      v40 = v47;
    }
  }
  v41 = *v10;
  if (*v10)
    v41 += 24 * *(unsigned int *)(v41 - 4);
  if (v26 != v41)
  {
    while (!*(_QWORD *)(*(_QWORD *)v26 + 8))
    {
      v42 = v26 + 24;
      v26 = v40;
      if (v42 != v40)
      {
        v26 = v42;
        while ((unint64_t)(*(_QWORD *)v26 + 1) <= 1)
        {
          v26 += 24;
          if (v26 == v40)
          {
            v26 = v40;
            break;
          }
        }
      }
      if (v26 == v41)
      {
        v26 = v41;
        break;
      }
    }
  }
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)(v26 + 16), a3, (uint64_t)v57);
  if (a4 && !*(_BYTE *)(v26 + 8))
  {
    *(_BYTE *)(v26 + 8) = 1;
  }
  else if (!v58)
  {
    v43 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  v48 = *(_QWORD *)(a2 + 176);
  v49 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v49 = 352;
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 528) = v49 + 16;
  *(_QWORD *)(v49 + 536) = v49 + 16;
  *(_OWORD *)(v49 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v49 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v49);
  v59 = (IPC::Encoder *)v49;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v49, 8uLL, 8) = v48;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v49, (uint64_t *)a3);
  *IPC::Encoder::grow((IPC::Encoder *)v49, 1uLL, 1) = a4;
  v50 = *a5;
  *a5 = 0;
  v51 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v51 = &off_1E34DE548;
  *((_QWORD *)v51 + 1) = v50;
  v52 = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v57[0] = v51;
  v57[1] = v52;
  v58 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v59, 0, (uint64_t)v57, 1);
  if (v58)
  {
    v54 = v57[0];
    v57[0] = 0;
    if (v54)
      (*(void (**)(WTF *))(*(_QWORD *)v54 + 8))(v54);
  }
  result = v59;
  v59 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v53);
    return (IPC::Encoder *)WTF::fastFree(v55, v56);
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::WebProcess::PrepareToSuspend,WebKit::WebProcess,WebKit::WebProcess,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  char v7;
  _QWORD *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  _BYTE v13[8];
  double v14;
  char v15;

  result = IPC::Decoder::decode<std::tuple<BOOL,WTF::MonotonicTime>>(a2, (uint64_t)v13);
  if (v15)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v7)
    {
      v10 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a1);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v8 = off_1E3504F68;
      v8[1] = v10;
      v9 = v11;
      v11 = 0;
      v12 = v8;
      v8[2] = v9;
      result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
      if (v15)
      {
        WebKit::WebProcess::prepareToSuspend(a3, v13[0], (uint64_t *)&v12, v14);
        result = (uint64_t)v12;
        v12 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL,WTF::MonotonicTime>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<BOOL,WTF::MonotonicTime>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,WTF::MonotonicTime>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;
  char v6;
  char v7;

  result = IPC::Decoder::decode<BOOL>(a1);
  if ((unsigned __int16)result >= 0x100u && (v5 = result, result = IPC::Decoder::decode<WTF::MonotonicTime>(a1), v6))
  {
    *(_QWORD *)(a2 + 8) = result;
    v7 = 1;
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *(_BYTE *)a2 = v5;
  *(_BYTE *)(a2 + 16) = v7;
  return result;
}

uint64_t WebKit::WebProcess::prepareToSuspend(uint64_t a1, int a2, uint64_t *a3, double a4)
{
  double v8;
  double v9;
  NSObject *v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  WebCore::PlatformMediaSessionManager *v14;
  WebCore::PlatformMediaSessionManager *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t (*v19)(void);
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[12];
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  double v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  if (v8 <= a4)
    v9 = 0.0;
  else
    v9 = v8 - a4;
  v10 = qword_1ECE71640;
  v11 = os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (*(_BYTE *)(a1 + 672))
      v12 = *(_QWORD *)(a1 + 664);
    else
      v12 = 0;
    *(_DWORD *)v23 = 134218752;
    *(_QWORD *)&v23[4] = a1;
    v24 = 2048;
    v25 = v12;
    v26 = 1024;
    v27 = a2;
    v28 = 2048;
    v29 = v9;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::prepareToSuspend: isSuspensionImminent=%d, remainingRunTime=%fs", v23, 0x26u);
  }
  v13 = *(_BYTE *)(a1 + 617);
  *(_BYTE *)(a1 + 617) = 0;
  *(_BYTE *)(a1 + 504) = 1;
  WebKit::WebProcess::flushResourceLoadStatistics((WebKit::WebProcess *)v11);
  if (*(_DWORD *)(a1 + 596) == 2)
  {
    v20 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 672))
        v21 = *(_QWORD *)(a1 + 664);
      else
        v21 = 0;
      *(_DWORD *)v23 = 134218240;
      *(_QWORD *)&v23[4] = a1;
      v24 = 2048;
      v25 = v21;
      _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::prepareToSuspend: Process is ready to suspend", v23, 0x16u);
    }
    v22 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    v19 = *(uint64_t (**)(void))(*(_QWORD *)v22 + 8);
    goto LABEL_13;
  }
  v14 = (WebCore::PlatformMediaSessionManager *)WebKit::WebProcess::suspendAllMediaBuffering((WebKit::WebProcess *)a1);
  v15 = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists(v14);
  if (v15)
    WebCore::PlatformMediaSessionManager::processWillSuspend(v15);
  WebKit::WebProcess::freezeAllLayerTrees((WebKit::WebProcess *)a1);
  WebKit::WebProcess::destroyRenderingResources((WebKit::WebProcess *)a1);
  WebKit::WebProcess::accessibilityRelayProcessSuspended((WebKit::WebProcess *)a1, 1);
  WebKit::WebProcess::updateFreezerStatus((WebKit::WebProcess *)a1);
  v16 = *a3;
  *a3 = 0;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v17 = &off_1E34E0900;
  v17[1] = a1;
  v17[2] = v16;
  *(_QWORD *)v23 = v17;
  WebKit::WebProcess::markAllLayersVolatile(a1, (uint64_t *)v23);
  result = *(_QWORD *)v23;
  if (*(_QWORD *)v23)
  {
    v19 = *(uint64_t (**)(void))(**(_QWORD **)v23 + 8);
LABEL_13:
    result = v19();
  }
  *(_BYTE *)(a1 + 617) = v13;
  return result;
}

void WebKit::WebProcess::accessibilityRelayProcessSuspended(WebKit::WebProcess *this, uint64_t a2)
{
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];

  v6 = *((_QWORD *)this + 14);
  v4 = (_QWORD **)((char *)this + 112);
  v5 = v6;
  if (v6 && *(_DWORD *)(v5 - 12))
  {
    v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4)[1];
    CFRetain(*(CFTypeRef *)(v7 + 8));
    v9 = v7;
    WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification(v10, &v9, 0);
    WebKit::AXRelayProcessSuspendedNotification::sendProcessSuspendMessage((WTF::StringImpl *)v10, a2);
    WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification((WebKit::AXRelayProcessSuspendedNotification *)v10);
    v8 = v9;
    v9 = 0;
    if (v8)
      CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  else
  {
    *((_BYTE *)this + 779) = a2 ^ 1;
  }
}

void WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification(WebKit::AXRelayProcessSuspendedNotification *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*((_BYTE *)this + 8))
    WebKit::AXRelayProcessSuspendedNotification::sendProcessSuspendMessage(this, 0);
  v3 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

WTF::StringImpl *WebKit::AXRelayProcessSuspendedNotification::sendProcessSuspendMessage(WTF::StringImpl *this, uint64_t a2)
{
  unsigned __int8 v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  id v10;
  WTF::StringImpl *v11;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v2 = atomic_load(MEMORY[0x1E0DCF730]);
  if ((v2 & 1) != 0)
  {
    v4 = this;
    v12[0] = CFSTR("pid");
    v12[1] = CFSTR("suspended");
    v13[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", getpid());
    v13[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
    v5 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 2);
    v6 = (void *)objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, 0);
    v7 = *(_QWORD *)(*(_QWORD *)v4 + 8);
    if (v7)
      v8 = v7 - 16;
    else
      v8 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = v6;
    if (v6)
      CFRetain(v6);
    WebKit::WebPage::relayAccessibilityNotification(v8, (uint64_t)&v11, &v10);
    if (v6)
      CFRelease(v6);
    this = v11;
    v11 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v9);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

void sub_196D50698(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcess::flushResourceLoadStatistics(WebKit::WebProcess *this)
{
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = WebCore::ResourceLoadObserver::sharedIfExists(this);
  if (result)
  {
    v2 = result;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E34E0950;
    v4 = (uint64_t)v3;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 96))(v2, &v4);
    result = v4;
    v4 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebKit::WebProcess::destroyRenderingResources(WebKit::WebProcess *this)
{
  double v2;
  double v3;
  WTF::MonotonicTime *v4;
  double v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  WebKit::WebProcess *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  double v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  WTF::MonotonicTime::now(this);
  v3 = v2;
  v4 = (WTF::MonotonicTime *)CABackingStoreCollectBlocking();
  WTF::MonotonicTime::now(v4);
  v6 = v5;
  v7 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 672))
      v8 = *((_QWORD *)this + 83);
    else
      v8 = 0;
    v9 = 134218496;
    v10 = this;
    v11 = 2048;
    v12 = v8;
    v13 = 2048;
    v14 = (v6 - v3) * 1000.0;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::destroyRenderingResources: took %.2fms", (uint8_t *)&v9, 0x20u);
  }
}

uint64_t WebKit::WebProcess::suspendAllMediaBuffering(WebKit::WebProcess *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v3 = result;
  v5 = v4;
  v6 = *((_QWORD *)this + 14);
  if (v6)
    v7 = v6 + 16 * *(unsigned int *)(v6 - 4);
  else
    v7 = 0;
  if (v7 != result)
  {
    do
    {
      result = WebKit::WebPage::suspendAllMediaBuffering(*(WebCore::Page ***)(v3 + 8));
      while (1)
      {
        v3 += 16;
        if (v3 == v5)
          break;
        if ((unint64_t)(*(_QWORD *)v3 + 1) > 1)
          goto LABEL_10;
      }
      v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

uint64_t WebKit::WebPage::suspendAllMediaBuffering(WebCore::Page **this)
{
  return WebCore::Page::suspendAllMediaBuffering(this[6]);
}

_QWORD *WebKit::WebProcess::markAllLayersVolatile(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE v20[12];
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 672))
      v5 = *(_QWORD *)(a1 + 664);
    else
      v5 = 0;
    *(_DWORD *)v20 = 134218240;
    *(_QWORD *)&v20[4] = a1;
    v21 = 2048;
    v22 = v5;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::markAllLayersVolatile:", v20, 0x16u);
  }
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)(v6 + 8) = v7;
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 112));
  v9 = result;
  v11 = v10;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 112);
  if (v13)
    v12 = (_QWORD *)(v13 + 16 * *(unsigned int *)(v13 - 4));
  if (v12 != result)
  {
    do
    {
      v16 = v9[1];
      do
        v17 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v17 + 1, (unsigned int *)v6));
      v18 = *(_QWORD *)(v9[1] + 40);
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v19 = off_1E34E0928;
      v19[1] = a1;
      v19[2] = v6;
      v19[3] = v18;
      *(_QWORD *)v20 = v19;
      WebKit::WebPage::markLayersVolatile(v16, (uint64_t *)v20);
      result = *(_QWORD **)v20;
      *(_QWORD *)v20 = 0;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      while (1)
      {
        v9 += 2;
        if (v9 == v11)
          break;
        if ((unint64_t)(*v9 + 1) > 1)
          goto LABEL_18;
      }
      v9 = v11;
LABEL_18:
      ;
    }
    while (v9 != v12);
  }
  do
  {
    v14 = __ldaxr((unsigned int *)v6);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)v6));
  if (!v15)
  {
    atomic_store(1u, (unsigned int *)v6);
    *(_QWORD *)v20 = v6;
    return (_QWORD *)WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v20);
  }
  return result;
}

uint64_t WebKit::WebPage::markLayersVolatile(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE712D0;
  if (os_log_type_enabled((os_log_t)qword_1ECE712D0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 40);
    v10 = 134218240;
    v11 = a1;
    v12 = 2048;
    v13 = v5;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::markLayersVolatile:", (uint8_t *)&v10, 0x16u);
  }
  if ((*(_QWORD *)(a1 + 1736) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(a1 + 1736) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 1704));
  }
  v6 = *a2;
  if (*a2)
  {
    v7 = *(unsigned int *)(a1 + 1780);
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 1776))
    {
      WTF::Vector<WTF::CompletionHandler<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::CompletionHandler<void ()(BOOL)>>(a1 + 1768, (unint64_t)a2);
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 1768);
      *a2 = 0;
      *(_QWORD *)(v9 + 8 * v7) = v6;
      *(_DWORD *)(a1 + 1780) = v7 + 1;
    }
  }
  *(_QWORD *)(a1 + 1760) = 0x3F947AE147AE147BLL;
  return WebKit::WebPage::markLayersVolatileOrRetry(a1, *(_BYTE *)(a1 + 1784));
}

uint64_t WebKit::WebPage::markLayersVolatileOrRetry(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  CFRetain(*(CFTypeRef *)(a1 + 8));
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = &off_1E34FA3B8;
  *(_BYTE *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 16) = a1;
  v6 = v4;
  WebKit::WebPage::tryMarkLayersVolatile(*(_QWORD *)(a1 + 72), &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebPage::tryMarkLayersVolatile(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (a1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
  v3 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::tryMarkAllBackingStoreVolatile(uint64_t *a1, uint64_t *a2)
{
  __int16 v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatile(a1, 1, 1);
  v13 = 0;
  v14 = 0;
  v5 = WebKit::RemoteLayerBackingStoreCollection::collectAllRemoteRenderingBufferIdentifiersToMarkVolatile(a1, 1u, 1u, (uint64_t)&v13);
  if (HIDWORD(v14))
  {
    v6 = v5;
    v7 = *a2;
    *a2 = 0;
    v8 = WTF::fastMalloc((WTF *)0x18);
    if (v6)
      v9 = 256;
    else
      v9 = 0;
    *(_QWORD *)v8 = &off_1E34B8C10;
    *(_WORD *)(v8 + 8) = v9 | v4;
    *(_QWORD *)(v8 + 16) = v7;
    v12 = v8;
    WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(*(WebKit::WebPage **)(a1[2] + 24), (uint64_t)&v13, &v12, 0);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a2);
  }
  return WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v10);
}

void sub_196D50DA4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a4)
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 8))(a4);
  WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(BOOL)>::operator()(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_196D50E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPage::tryMarkLayersVolatileCompletionHandler(uint64_t a1, int a2, void *a3)
{
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 186))
    return;
  if (a2 || (_DWORD)a3)
  {
    if ((*(_QWORD *)(a1 + 1736) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 1704));
    if ((_DWORD)a3)
    {
      v11 = qword_1ECE712D0;
      if (!os_log_type_enabled((os_log_t)qword_1ECE712D0, OS_LOG_TYPE_DEFAULT))
      {
LABEL_15:
        WebKit::WebPage::callVolatilityCompletionHandlers((WebKit::WebPage *)a1, a3);
        return;
      }
      v12 = *(_QWORD *)(a1 + 40);
      v20 = 134218240;
      v21 = a1;
      v22 = 2048;
      v23 = v12;
      v13 = "%p - [webPageID=%llu] WebPage::markLayersVolatile: Succeeded in marking layers as volatile";
    }
    else
    {
      if (a2 == 2)
      {
        v18 = qword_1ECE712D0;
        if (!os_log_type_enabled((os_log_t)qword_1ECE712D0, OS_LOG_TYPE_DEFAULT))
          goto LABEL_15;
        v19 = *(_QWORD *)(a1 + 40);
        v20 = 134218496;
        v21 = a1;
        v22 = 2048;
        v23 = v19;
        v24 = 2048;
        v25 = 2000.0;
        v13 = "%p - [webPageID=%llu] WebPage::markLayersVolatile: Failed to mark layers as volatile within %gms";
        v14 = v18;
        v15 = 32;
        goto LABEL_14;
      }
      if (a2 != 1)
        goto LABEL_15;
      v11 = qword_1ECE712D0;
      if (!os_log_type_enabled((os_log_t)qword_1ECE712D0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_15;
      v16 = *(_QWORD *)(a1 + 40);
      v20 = 134218240;
      v21 = a1;
      v22 = 2048;
      v23 = v16;
      v13 = "%p - [webPageID=%llu] WebPage::markLayersVolatile: Did what we could to mark IOSurfaces as purgeable after l"
            "ocking the screen";
    }
    v14 = v11;
    v15 = 22;
LABEL_14:
    _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v20, v15);
    goto LABEL_15;
  }
  v6 = *(_DWORD *)(a1 + 1780);
  v7 = qword_1ECE712D0;
  v8 = os_log_type_enabled((os_log_t)qword_1ECE712D0, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(double *)(a1 + 1760) * 1000.0;
      v20 = 134218496;
      v21 = a1;
      v22 = 2048;
      v23 = v9;
      v24 = 2048;
      v25 = v10;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::markLayersVolatile: Failed to mark all layers as volatile, will retry in %g ms", (uint8_t *)&v20, 0x20u);
    }
    WebCore::TimerBase::start();
  }
  else if (v8)
  {
    v17 = *(_QWORD *)(a1 + 40);
    v20 = 134218240;
    v21 = a1;
    v22 = 2048;
    v23 = v17;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::markLayersVolatile: Failed to mark all layers as volatile, but will not retry because the operation was cancelled", (uint8_t *)&v20, 0x16u);
  }
}

uint64_t WebKit::RemoteLayerTreeDrawingArea::tryMarkLayersVolatile(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 80) + 88) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 88));
}

void WebKit::WebProcess::updateFreezerStatus(WebKit::WebProcess *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WebKit::WebProcess *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 149) < 4u)
    goto LABEL_11;
  v2 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v4 = (_QWORD *)*((_QWORD *)this + 14);
  if (v4)
    v4 += 2 * *((unsigned int *)v4 - 1);
  if (v4 == v2)
  {
LABEL_11:
    v5 = 0;
  }
  else
  {
    while (*(_BYTE *)(v2[1] + 2108))
    {
      while (1)
      {
        v2 += 2;
        if (v2 == v3)
          break;
        if ((unint64_t)(*v2 + 1) > 1)
          goto LABEL_10;
      }
      v2 = v3;
LABEL_10:
      if (v2 == v4)
        goto LABEL_11;
    }
    v5 = 1;
  }
  getpid();
  v6 = memorystatus_control();
  v7 = qword_1ECE71640;
  if (v6)
  {
    v8 = v6;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_ERROR))
    {
      if (*((_BYTE *)this + 672))
        v9 = *((_QWORD *)this + 83);
      else
        v9 = 0;
      v11 = 134218752;
      v12 = this;
      v13 = 2048;
      v14 = v9;
      v15 = 1024;
      v16 = v5;
      v17 = 1024;
      v18 = v8;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] WebProcess::updateFreezerStatus: isFreezable=%d, error=%d", (uint8_t *)&v11, 0x22u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 672))
      v10 = *((_QWORD *)this + 83);
    else
      v10 = 0;
    v11 = 134218496;
    v12 = this;
    v13 = 2048;
    v14 = v10;
    v15 = 1024;
    v16 = v5;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::updateFreezerStatus: isFreezable=%d, success", (uint8_t *)&v11, 0x1Cu);
  }
}

IPC::Encoder *WebKit::WebSWClientConnection::updateThrottleState(WebKit::WebSWClientConnection *this)
{
  WebKit::WebSWClientConnection *v1;
  WebKit::WebProcess *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v1 = this;
  v2 = WebKit::WebProcess::singleton(this);
  v3 = WebKit::WebProcess::areAllPagesThrottleable(v2);
  *((_BYTE *)v1 + 96) = v3;
  v7 = v3;
  v4 = *((_QWORD *)v1 + 3);
  v1 = (WebKit::WebSWClientConnection *)((char *)v1 + 24);
  v5 = (*(uint64_t (**)(WebKit::WebSWClientConnection *))(v4 + 56))(v1);
  return IPC::MessageSender::send<Messages::WebSWServerConnection::SetThrottleState>((uint64_t)v1, &v7, v5);
}

uint64_t WebKit::WebProcess::areAllPagesThrottleable(WebKit::WebProcess *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];

  v2 = (char *)this + 112;
  v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v5 = *((_QWORD *)this + 14);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    v6 = v5 + 16 * v7;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v9[0] = v2;
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v6;
  v9[4] = v5 + 16 * v7;
  return WTF::allOf<WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>>> const,WebKit::WebProcess::areAllPagesThrottleable(void)::$_0>(v9);
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebSWServerConnection::SetThrottleState>(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2743;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::WebSWClientConnection::messageSenderDestinationID(WebKit::WebSWClientConnection *this)
{
  return 0;
}

_QWORD *WebKit::WebProcess::freezeAllLayerTrees(WebKit::WebProcess *this)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  WebKit::WebProcess *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 672))
      v3 = *((_QWORD *)this + 83);
    else
      v3 = 0;
    v10 = 134218240;
    v11 = this;
    v12 = 2048;
    v13 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [sessionID=%llu] WebProcess::freezeAllLayerTrees: WebProcess is freezing all layer trees", (uint8_t *)&v10, 0x16u);
  }
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v5 = result;
  v7 = v6;
  v8 = *((_QWORD *)this + 14);
  if (v8)
    v9 = (_QWORD *)(v8 + 16 * *(unsigned int *)(v8 - 4));
  else
    v9 = 0;
  if (v9 != result)
  {
    do
    {
      result = (_QWORD *)WebKit::WebPage::freezeLayerTree(v5[1], 4);
      while (1)
      {
        v5 += 2;
        if (v5 == v7)
          break;
        if ((unint64_t)(*v5 + 1) > 1)
          goto LABEL_15;
      }
      v5 = v7;
LABEL_15:
      ;
    }
    while (v5 != v9);
  }
  return result;
}

uint64_t WebKit::WebPage::freezeLayerTree(uint64_t a1, int a2)
{
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 2104);
  v5 = v4 | a2;
  *(_DWORD *)(a1 + 2104) = v4 | a2;
  v6 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 40);
    v9 = 134219008;
    v10 = a1;
    v11 = 2048;
    v12 = v7;
    v13 = 1024;
    v14 = a2;
    v15 = 1024;
    v16 = v5;
    v17 = 1024;
    v18 = v4;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::freezeLayerTree: Adding a reason to freeze layer tree (reason=%d, new=%d, old=%d)", (uint8_t *)&v9, 0x28u);
  }
  return WebKit::WebPage::updateDrawingAreaLayerTreeFreezeState((WebKit::WebPage *)a1);
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  WTF::StringImpl *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  result = IPC::Decoder::decode<WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v7, a2);
  v5 = v9;
  if (v9)
  {
    *(_QWORD *)a1 = v7;
    v6 = v8;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(a1 + 8) = v6;
    result = WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v4);
    v5 = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  WTF::StringImpl *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13[25];
  char v14;
  uint64_t v15;
  uint64_t v16;

  result = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return result;
  }
  v6 = result;
  v15 = 0;
  v16 = 0;
  if (result >> 1 >= 0xA3D)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::ResourceLoadStatistics>(v13, a2);
      if (!v14)
        break;
      v10 = HIDWORD(v16);
      if (HIDWORD(v16) == (_DWORD)v16)
      {
        WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ResourceLoadStatistics>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        WebCore::ResourceLoadStatistics::ResourceLoadStatistics(v15 + 200 * HIDWORD(v16), v13);
        HIDWORD(v16) = v10 + 1;
      }
      if (v14)
        WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)v13, v11);
      if (!--v6)
      {
        WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v15, HIDWORD(v16));
        *(_QWORD *)a1 = v15;
        v12 = v16;
        v15 = 0;
        v16 = 0;
        *(_QWORD *)(a1 + 8) = v12;
        goto LABEL_6;
      }
    }
  }
  else
  {
    if (!result)
    {
      v7 = 0;
      v8 = 0;
LABEL_5:
      v15 = 0;
      v16 = 0;
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
LABEL_6:
      *(_BYTE *)(a1 + 16) = 1;
      return WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
    }
    LODWORD(v16) = 200 * (int)result / 0xC8u;
    v15 = WTF::fastMalloc((WTF *)(200 * result));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ResourceLoadStatistics>(v13, a2);
      if (!v14)
        break;
      v9 = HIDWORD(v16);
      if (HIDWORD(v16) == (_DWORD)v16)
      {
        WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ResourceLoadStatistics>((uint64_t)&v15, (unint64_t)v13);
      }
      else
      {
        WebCore::ResourceLoadStatistics::ResourceLoadStatistics(v15 + 200 * HIDWORD(v16), v13);
        HIDWORD(v16) = v9 + 1;
      }
      if (v14)
        WebCore::ResourceLoadStatistics::~ResourceLoadStatistics((WebCore::ResourceLoadStatistics *)v13, v5);
      if (!--v6)
      {
        v7 = v15;
        v8 = v16;
        goto LABEL_5;
      }
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  return WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
}

uint64_t IPC::handleMessageAsync<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  unsigned __int8 **v10;
  unint64_t v11;
  unsigned __int8 **v12;
  _QWORD *v13;
  uint64_t v14[2];
  char v15;

  result = IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v14, a2);
  if (v15)
  {
    v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v8)
      return WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v8);
    v11 = v7;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a1);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = off_1E34B08D8;
    v9[1] = v11;
    v10 = v12;
    v12 = 0;
    v13 = v9;
    v9[2] = v10;
    result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    if (!v15)
    {
      __break(1u);
      return result;
    }
    WebKit::NetworkConnectionToWebProcess::resourceLoadStatisticsUpdated(a3, v14, (uint64_t *)&v13);
    result = (uint64_t)v13;
    v13 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (v15)
      return WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v8);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(unsigned __int8 **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD v13[5];
  _QWORD *v14;

  v13[0] = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a1);
  v6 = *a2;
  *a2 = 0;
  v7 = *a3;
  *a3 = 0;
  v8 = a2[1];
  a2[1] = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v9 = off_1E34C1718;
  v9[1] = a1;
  v9[2] = a1;
  v9[3] = v6;
  memset(&v13[1], 0, 24);
  v9[4] = v8;
  v13[4] = 0;
  v14 = v9;
  v9[5] = v7;
  WebKit::WebResourceLoadStatisticsStore::postTask((uint64_t)a1, (uint64_t *)&v14);
  v11 = (uint64_t)v14;
  v14 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)v13, v10);
}

uint64_t WebKit::NetworkConnectionToWebProcess::resourceLoadStatisticsUpdated(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v8;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v5 + 208), &v11);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if ((v7 & 0x8000000000000000) == 0 || v7 == -1)
    {
      v8 = *(unsigned __int8 ***)(v6 + 72);
      if (v8)
        return WebKit::WebResourceLoadStatisticsStore::resourceLoadStatisticsUpdated(v8, a2, a3);
    }
  }
  v10 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

unsigned __int8 ***WebKit::WebResourceLoadObserver::updateCentralStatisticsStore(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  WebKit::WebProcess *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _BYTE v10[16];
  _BYTE *v11;
  os_unfair_lock_s *v12;

  v3 = (uint64_t)a1;
  if ((a1[8] & 0xFFFFFFFFFFFFLL) != 0)
    a1 = (_QWORD *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 4));
  v4 = WebKit::WebProcess::singleton((WebKit::WebProcess *)a1);
  v5 = WebKit::WebProcess::ensureNetworkProcessConnection(v4);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v12, *(unsigned __int8 ***)(v5 + 24));
  v6 = v12;
  WebKit::WebResourceLoadObserver::takeStatistics((WebKit::WebResourceLoadObserver *)v10, v3, v7);
  v11 = v10;
  IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WTF::CompletionHandler<void ()(void)>>(v6, (uint64_t *)&v11, a2);
  WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v8);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v12);
}

uint64_t WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  WTF *v4;
  WebCore::ResourceLoadStatistics *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v6 = *(WebCore::ResourceLoadStatistics **)a1;
    v7 = 200 * v3;
    do
    {
      WebCore::ResourceLoadStatistics::~ResourceLoadStatistics(v6, a2);
      v6 = (WebCore::ResourceLoadStatistics *)(v8 + 200);
      v7 -= 200;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebKit::WebResourceLoadObserver::takeStatistics(WebKit::WebResourceLoadObserver *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;

  v6 = *(_QWORD *)(a2 + 16);
  v3 = v6;
  *(_QWORD *)(a2 + 16) = 0;
  result = WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebKit::WebResourceLoadObserver::takeStatistics(void)::$_0,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>>((uint64_t)this, &v6, a3);
  if (v3)
    return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v3, v5);
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!a1)
    return 0;
  if (!*(_DWORD *)(a1 - 12))
    return a1 + 16 * *(unsigned int *)(a1 - 4);
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::makeIterator(a1, a1, a3);
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

char *IPC::VectorArgumentCoder<false,WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    v7 = *(_QWORD *)a2;
    v8 = 200 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebCore::ResourceLoadStatistics,void>::encode(a1, v7);
      v7 += 200;
      v8 -= 200;
    }
    while (v8);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReachLayoutMilestone(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  NSObject *v30;
  WebKit::WebFrame *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  char *v36;
  void *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  CFTypeRef *v43;
  NSObject *v44;
  WebKit::WebFrame *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WebKit::WebProcess *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  NSObject *v54;
  WebKit::WebFrame *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WebKit::WebProcess *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  CFTypeRef *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  CFTypeRef *v80;
  WTF::StringImpl *v81[2];
  WTF::StringImpl *v82[2];
  int v83;
  char v84;
  WTF::StringImpl *v85;
  void *v86;
  _BYTE buf[22];
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  char *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v4 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (!v4)
    return;
  v5 = v4;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v86 = 0;
  if ((a2 & 1) != 0)
  {
    v44 = qword_1ECE712F8;
    if (os_log_type_enabled((os_log_t)qword_1ECE712F8, OS_LOG_TYPE_DEFAULT))
    {
      v45 = *(WebKit::WebFrame **)(a1 + 16);
      v46 = *((_QWORD *)v45 + 10);
      v47 = WebKit::WebFrame::page(v45);
      if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)))
        v48 = *(_QWORD *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
      else
        v48 = 0;
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v45;
      v88 = 2048;
      v89 = v46;
      v90 = 2048;
      v91 = v47;
      v92 = 2048;
      v93 = v48;
      _os_log_impl(&dword_196BCC000, v44, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDidReachLayoutMilestone: dispatching DidFirstLayoutForFrame", buf, 0x34u);
    }
    v49 = (WebKit::WebProcess *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, void **))(**(_QWORD **)(v5 + 360)
                                                                                            + 136))(*(_QWORD *)(v5 + 360), v5, *(_QWORD *)(a1 + 16), &v86);
    *(_OWORD *)v82 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 80);
    WebKit::WebProcess::singleton(v49);
    *(_QWORD *)buf = &off_1E34E0698;
    WebKit::UserData::transform(v86, (uint64_t)buf, &v85);
    v50 = v85;
    if (v85)
      CFRetain(*((CFTypeRef *)v85 + 1));
    v81[0] = v50;
    *(_QWORD *)buf = v82;
    *(_QWORD *)&buf[8] = v81;
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 32) + 56))(v5 + 32);
    IPC::MessageSender::send<Messages::WebPageProxy::DidFirstLayoutForFrame>(v5 + 32, (uint64_t **)buf, v51);
    v52 = v81[0];
    v81[0] = 0;
    if (v52)
      CFRelease(*((CFTypeRef *)v52 + 1));
    v53 = v85;
    v85 = 0;
    if (v53)
      CFRelease(*((CFTypeRef *)v53 + 1));
  }
  v82[0] = 0;
  v82[1] = 0;
  v83 = 0;
  v84 = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = *(WTF::StringImpl **)buf;
  v81[0] = *(WTF::StringImpl **)buf;
  if ((a2 & 1) != 0)
  {
    if (v83)
    {
      WTF::StringBuilder::append();
      if (!v83 && !v82[1])
      {
LABEL_7:
        WTF::String::operator=(v82, (WTF::StringImpl *)v81);
        v7 = v81[0];
        if (v81[0])
          v8 = *((_DWORD *)v81[0] + 1);
        else
          v8 = 0;
        v83 = v8;
        goto LABEL_10;
      }
      v7 = v81[0];
    }
    else if (!v82[1])
    {
      goto LABEL_7;
    }
    if (v7)
    {
      v64 = *((_QWORD *)v7 + 1);
      v65 = *((unsigned int *)v7 + 1) | ((unint64_t)((*((_DWORD *)v7 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v64 = 0;
      v65 = 0x100000000;
    }
    WTF::StringBuilder::append((uint64_t)v82, v64, v65);
    v7 = v81[0];
  }
LABEL_10:
  v81[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = *(WTF::StringImpl **)buf;
  v81[0] = *(WTF::StringImpl **)buf;
  if ((a2 & 2) != 0)
  {
    if (v83)
    {
      WTF::StringBuilder::append();
      if (!v83 && !v82[1])
      {
LABEL_17:
        WTF::String::operator=(v82, (WTF::StringImpl *)v81);
        v10 = v81[0];
        if (v81[0])
          v11 = *((_DWORD *)v81[0] + 1);
        else
          v11 = 0;
        v83 = v11;
        goto LABEL_20;
      }
      v10 = v81[0];
    }
    else if (!v82[1])
    {
      goto LABEL_17;
    }
    if (v10)
    {
      v66 = *((_QWORD *)v10 + 1);
      v67 = *((unsigned int *)v10 + 1) | ((unint64_t)((*((_DWORD *)v10 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v66 = 0;
      v67 = 0x100000000;
    }
    WTF::StringBuilder::append((uint64_t)v82, v66, v67);
    v10 = v81[0];
  }
LABEL_20:
  v81[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = *(WTF::StringImpl **)buf;
  v81[0] = *(WTF::StringImpl **)buf;
  if ((a2 & 4) != 0)
  {
    if (v83)
    {
      WTF::StringBuilder::append();
      if (!v83 && !v82[1])
      {
LABEL_27:
        WTF::String::operator=(v82, (WTF::StringImpl *)v81);
        v13 = v81[0];
        if (v81[0])
          v14 = *((_DWORD *)v81[0] + 1);
        else
          v14 = 0;
        v83 = v14;
        goto LABEL_30;
      }
      v13 = v81[0];
    }
    else if (!v82[1])
    {
      goto LABEL_27;
    }
    if (v13)
    {
      v68 = *((_QWORD *)v13 + 1);
      v69 = *((unsigned int *)v13 + 1) | ((unint64_t)((*((_DWORD *)v13 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v68 = 0;
      v69 = 0x100000000;
    }
    WTF::StringBuilder::append((uint64_t)v82, v68, v69);
    v13 = v81[0];
  }
LABEL_30:
  v81[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = *(WTF::StringImpl **)buf;
  v81[0] = *(WTF::StringImpl **)buf;
  if ((a2 & 0x10) != 0)
  {
    if (v83)
    {
      WTF::StringBuilder::append();
      if (!v83 && !v82[1])
      {
LABEL_37:
        WTF::String::operator=(v82, (WTF::StringImpl *)v81);
        v16 = v81[0];
        if (v81[0])
          v17 = *((_DWORD *)v81[0] + 1);
        else
          v17 = 0;
        v83 = v17;
        goto LABEL_40;
      }
      v16 = v81[0];
    }
    else if (!v82[1])
    {
      goto LABEL_37;
    }
    if (v16)
    {
      v70 = *((_QWORD *)v16 + 1);
      v71 = *((unsigned int *)v16 + 1) | ((unint64_t)((*((_DWORD *)v16 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v70 = 0;
      v71 = 0x100000000;
    }
    WTF::StringBuilder::append((uint64_t)v82, v70, v71);
    v16 = v81[0];
  }
LABEL_40:
  v81[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = *(WTF::StringImpl **)buf;
  v81[0] = *(WTF::StringImpl **)buf;
  if ((a2 & 0x20) != 0)
  {
    if (v83)
    {
      WTF::StringBuilder::append();
      if (!v83 && !v82[1])
      {
LABEL_47:
        WTF::String::operator=(v82, (WTF::StringImpl *)v81);
        v19 = v81[0];
        if (v81[0])
          v20 = *((_DWORD *)v81[0] + 1);
        else
          v20 = 0;
        v83 = v20;
        goto LABEL_50;
      }
      v19 = v81[0];
    }
    else if (!v82[1])
    {
      goto LABEL_47;
    }
    if (v19)
    {
      v72 = *((_QWORD *)v19 + 1);
      v73 = *((unsigned int *)v19 + 1) | ((unint64_t)((*((_DWORD *)v19 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v72 = 0;
      v73 = 0x100000000;
    }
    WTF::StringBuilder::append((uint64_t)v82, v72, v73);
    v19 = v81[0];
  }
LABEL_50:
  v81[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22 = *(WTF::StringImpl **)buf;
  v81[0] = *(WTF::StringImpl **)buf;
  if ((a2 & 0x40) != 0)
  {
    if (v83)
    {
      WTF::StringBuilder::append();
      if (!v83 && !v82[1])
      {
LABEL_57:
        WTF::String::operator=(v82, (WTF::StringImpl *)v81);
        v22 = v81[0];
        if (v81[0])
          v23 = *((_DWORD *)v81[0] + 1);
        else
          v23 = 0;
        v83 = v23;
        goto LABEL_60;
      }
      v22 = v81[0];
    }
    else if (!v82[1])
    {
      goto LABEL_57;
    }
    if (v22)
    {
      v74 = *((_QWORD *)v22 + 1);
      v75 = *((unsigned int *)v22 + 1) | ((unint64_t)((*((_DWORD *)v22 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v74 = 0;
      v75 = 0x100000000;
    }
    WTF::StringBuilder::append((uint64_t)v82, v74, v75);
    v22 = v81[0];
  }
LABEL_60:
  v81[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = *(WTF::StringImpl **)buf;
  v81[0] = *(WTF::StringImpl **)buf;
  if ((a2 & 0x80) != 0)
  {
    if (v83)
    {
      WTF::StringBuilder::append();
      if (!v83 && !v82[1])
      {
LABEL_67:
        WTF::String::operator=(v82, (WTF::StringImpl *)v81);
        v25 = v81[0];
        if (v81[0])
          v26 = *((_DWORD *)v81[0] + 1);
        else
          v26 = 0;
        v83 = v26;
        goto LABEL_70;
      }
      v25 = v81[0];
    }
    else if (!v82[1])
    {
      goto LABEL_67;
    }
    if (v25)
    {
      v76 = *((_QWORD *)v25 + 1);
      v77 = *((unsigned int *)v25 + 1) | ((unint64_t)((*((_DWORD *)v25 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v76 = 0;
      v77 = 0x100000000;
    }
    WTF::StringBuilder::append((uint64_t)v82, v76, v77);
    v25 = v81[0];
  }
LABEL_70:
  v81[0] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28 = *(WTF::StringImpl **)buf;
  v81[0] = *(WTF::StringImpl **)buf;
  if ((a2 & 0x100) == 0)
    goto LABEL_80;
  if (!v83)
  {
    if (!v82[1])
      goto LABEL_77;
LABEL_186:
    if (v28)
    {
      v78 = *((_QWORD *)v28 + 1);
      v79 = *((unsigned int *)v28 + 1) | ((unint64_t)((*((_DWORD *)v28 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v78 = 0;
      v79 = 0x100000000;
    }
    WTF::StringBuilder::append((uint64_t)v82, v78, v79);
    v28 = v81[0];
    goto LABEL_80;
  }
  WTF::StringBuilder::append();
  if (v83 || v82[1])
  {
    v28 = v81[0];
    goto LABEL_186;
  }
LABEL_77:
  WTF::String::operator=(v82, (WTF::StringImpl *)v81);
  v28 = v81[0];
  if (v81[0])
    v29 = *((_DWORD *)v81[0] + 1);
  else
    v29 = 0;
  v83 = v29;
LABEL_80:
  v81[0] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  v30 = qword_1ECE712F8;
  if (os_log_type_enabled((os_log_t)qword_1ECE712F8, OS_LOG_TYPE_DEFAULT))
  {
    v31 = *(WebKit::WebFrame **)(a1 + 16);
    v32 = *((_QWORD *)v31 + 10);
    v33 = WebKit::WebFrame::page(v31);
    if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)))
      v34 = *(_QWORD *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
    else
      v34 = 0;
    v35 = v82[0];
    if (v82[0]
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v82),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)v82),
          (v35 = v82[0]) != 0))
    {
      *(_DWORD *)v35 += 2;
    }
    v85 = v35;
    WTF::String::utf8();
    if (v81[0])
      v36 = (char *)v81[0] + 16;
    else
      v36 = 0;
    *(_DWORD *)buf = 134219266;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v31;
    v88 = 2048;
    v89 = v32;
    v90 = 2048;
    v91 = v33;
    v92 = 2048;
    v93 = v34;
    v94 = 2082;
    v95 = v36;
    _os_log_impl(&dword_196BCC000, v30, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDidReachLayoutMilestone: dispatching DidReachLayoutMilestone (milestones=%{public}s)", buf, 0x3Eu);
    v38 = v81[0];
    v81[0] = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 1)
        WTF::fastFree(v38, v37);
      else
        --*(_DWORD *)v38;
    }
    v39 = v85;
    v85 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v37);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  WebKit::WebPage::dispatchDidReachLayoutMilestone(v5, a2);
  if ((a2 & 2) != 0)
  {
    v54 = qword_1ECE712F8;
    if (os_log_type_enabled((os_log_t)qword_1ECE712F8, OS_LOG_TYPE_DEFAULT))
    {
      v55 = *(WebKit::WebFrame **)(a1 + 16);
      v56 = *((_QWORD *)v55 + 10);
      v57 = WebKit::WebFrame::page(v55);
      if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)))
        v58 = *(_QWORD *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
      else
        v58 = 0;
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v55;
      v88 = 2048;
      v89 = v56;
      v90 = 2048;
      v91 = v57;
      v92 = 2048;
      v93 = v58;
      _os_log_impl(&dword_196BCC000, v54, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDidReachLayoutMilestone: dispatching DidFirstVisuallyNonEmptyLayoutForFrame", buf, 0x34u);
    }
    v59 = (WebKit::WebProcess *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, void **))(**(_QWORD **)(v5 + 360)
                                                                                            + 144))(*(_QWORD *)(v5 + 360), v5, *(_QWORD *)(a1 + 16), &v86);
    *(_OWORD *)v81 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 80);
    WebKit::WebProcess::singleton(v59);
    *(_QWORD *)buf = &off_1E34E0698;
    WebKit::UserData::transform(v86, (uint64_t)buf, (WebKit **)&v80);
    v60 = (WTF::StringImpl *)v80;
    if (v80)
      CFRetain(v80[1]);
    v85 = v60;
    *(_QWORD *)buf = v81;
    *(_QWORD *)&buf[8] = &v85;
    v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 32) + 56))(v5 + 32);
    IPC::MessageSender::send<Messages::WebPageProxy::DidFirstVisuallyNonEmptyLayoutForFrame>(v5 + 32, (uint64_t **)buf, v61);
    v62 = v85;
    v85 = 0;
    if (v62)
      CFRelease(*((CFTypeRef *)v62 + 1));
    v63 = v80;
    v80 = 0;
    if (v63)
      CFRelease(v63[1]);
  }
  v41 = v82[1];
  v82[1] = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v40);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = v82[0];
  v82[0] = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v40);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = (CFTypeRef *)v86;
  v86 = 0;
  if (v43)
    CFRelease(v43[1]);
  CFRelease(*(CFTypeRef *)(v5 + 8));
}

void WebKit::WebPage::dispatchDidReachLayoutMilestone(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Encoder *v16;

  v2 = a2;
  v15 = 0;
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 360) + 160))(*(_QWORD *)(a1 + 360), a1, a2, &v15);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    v5 = (v2 & 0x1A4) == 0;
  else
    v5 = 1;
  if (!v5 && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 360))(v4, v2 & 0x1A4))
    v2 &= 0xFE5Bu;
  if ((v2 & 1) != 0 && WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1))
  {
    v16 = *(IPC::Encoder **)(WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1) + 1280);
    WebKit::WebPage::updateIntrinsicContentSizeIfNeeded((IPC::Encoder *)a1, (const WebCore::IntSize *)&v16);
  }
  v7 = *(_QWORD *)(a1 + 32);
  v6 = a1 + 32;
  v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 1905;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v16 = (IPC::Encoder *)v9;
  *(_WORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 2uLL, 2) = v2;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v6, &v16, 0);
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v10);
    WTF::fastFree(v12, v13);
  }
  v14 = v15;
  v15 = 0;
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 + 8));
}

IPC::Encoder *WebKit::WebPage::updateIntrinsicContentSizeIfNeeded(IPC::Encoder *this, const WebCore::IntSize *a2)
{
  _DWORD *v3;

  if (*((_BYTE *)this + 2136))
    *((_BYTE *)this + 2136) = 0;
  if ((*((_DWORD *)this + 220) || *((_QWORD *)this + 111))
    && (*((_DWORD *)this + 535) != *(_DWORD *)a2 || *((_DWORD *)this + 536) != *((_DWORD *)a2 + 1)))
  {
    *(_QWORD *)((char *)this + 2140) = *(_QWORD *)a2;
    v3 = a2;
    return IPC::MessageSender::send<Messages::WebPageProxy::DidChangeIntrinsicContentSize>((uint64_t)this + 32, &v3);
  }
  return this;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidFirstLayoutForFrame>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1892;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::UserData const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::UserData const&>,0ul,1ul>((IPC::Encoder *)v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void IPC::handleMessageAsync<Messages::DrawingArea::UpdateGeometry,WebKit::DrawingArea,WebKit::DrawingArea,void ()(WebCore::IntSize const&,BOOL,WTF::MachSendRight const&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, unint64_t *a2, uint64_t a3)
{
  unsigned __int8 ***v4;
  unint64_t v6;
  char v7;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  unsigned __int8 **v17;
  unsigned __int8 ***v18;
  _QWORD *v19;
  unsigned __int8 **v20;
  BOOL v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  unsigned __int8 **v24;
  unsigned __int8 **v25;
  unsigned __int8 **v26;
  unsigned __int8 **v27;
  unsigned __int8 **v28;
  unint64_t v29;
  unsigned __int8 **v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _BYTE v34[4];
  char v35;

  v4 = (unsigned __int8 ***)a2;
  v6 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  if (!v7)
  {
    v9 = *v4;
    v20 = v4[1];
    *v4 = 0;
    v4[1] = 0;
    v18 = (unsigned __int8 ***)v4[3];
    if (v18)
      v21 = v20 == 0;
    else
      v21 = 1;
    if (v21)
      goto LABEL_22;
    goto LABEL_30;
  }
  v8 = v4[1];
  v9 = *v4;
  v10 = (char *)v4[2] - (char *)*v4;
  if ((unint64_t)v8 <= v10)
  {
    v22 = 0;
    v23 = 0;
    *v4 = 0;
    v4[1] = 0;
    v24 = v4[3];
    if (v24)
    {
      if (v8)
      {
        (*((void (**)(unsigned __int8 **))*v24 + 2))(v24);
        v23 = *v4;
        v22 = v4[1];
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
    }
    goto LABEL_20;
  }
  v11 = (unsigned __int8 *)v9 + v10;
  v4[2] = (unsigned __int8 **)(v11 + 1);
  if (!v9)
  {
    v22 = v8;
    v23 = 0;
LABEL_20:
    v8 = 0;
    v9 = 0;
    *v4 = 0;
    v4[1] = 0;
    v25 = v4[3];
    if (v25)
    {
      if (v22)
      {
        (*((void (**)(unsigned __int8 **, unsigned __int8 **, unsigned __int8 **))*v25 + 2))(v25, v23, v22);
        v9 = *v4;
        v8 = v4[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
LABEL_21:
    *v4 = 0;
    v4[1] = 0;
    v18 = (unsigned __int8 ***)v4[3];
    if (!v18)
      goto LABEL_22;
    goto LABEL_29;
  }
  v12 = *v11;
  if (v12 >= 2)
    goto LABEL_21;
  v13 = v6;
  IPC::Decoder::takeLastAttachment((IPC::Decoder *)v4, &v29);
  if (!BYTE4(v29))
    goto LABEL_22;
  v32 = v13;
  v33 = v12 != 0;
  WTF::MachSendRight::MachSendRight();
  v35 = 1;
  if (BYTE4(v29))
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v29);
    if (!v35)
      goto LABEL_23;
  }
  while (1)
  {
    v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v4);
    if (!v15)
      break;
    v29 = v14;
    v4 = &v30;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v30, a1);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = off_1E34AD018;
    v16[1] = v29;
    v17 = v30;
    v30 = 0;
    v31 = v16;
    v16[2] = v17;
    v18 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v30);
    if (v35)
    {
      (*(void (**)(uint64_t, unint64_t *, BOOL, _BYTE *, _QWORD **))(*(_QWORD *)a3 + 368))(a3, &v32, v33, v34, &v31);
      v19 = v31;
      v31 = 0;
      if (v19)
        (*(void (**)(_QWORD *))(*v19 + 8))(v19);
      break;
    }
    __break(1u);
LABEL_29:
    if (v8)
LABEL_30:
      ((void (*)(unsigned __int8 ***, unsigned __int8 **))(*v18)[2])(v18, v9);
LABEL_22:
    LOBYTE(v32) = 0;
    v35 = 0;
LABEL_23:
    v26 = *v4;
    v27 = v4[1];
    *v4 = 0;
    v4[1] = 0;
    v28 = v4[3];
    if (v28)
    {
      if (v27)
      {
        (*((void (**)(unsigned __int8 **, unsigned __int8 **))*v28 + 2))(v28, v26);
        if (v35)
          continue;
      }
    }
    return;
  }
  if (v35)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v34);
}

void WebKit::RemoteLayerTreeDrawingArea::updateGeometry(WebKit::RemoteLayerTreeDrawingArea *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *a2;
  v7 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  if (!*(_DWORD *)(v8 + 880) || *(_BYTE *)(v8 + 896) || !*(_QWORD *)(v8 + 888))
    WebKit::WebPage::setSize(v8, (const WebCore::IntSize *)&v13);
  v9 = (_DWORD *)WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v8);
  v10 = v9;
  if (v9)
  {
    ++v9[2];
    if (*(_BYTE *)(v8 + 896))
      WebCore::LocalFrameView::setAutoSizeFixedMinimumHeight((WebCore::LocalFrameView *)v9);
  }
  WebCore::Page::layoutIfNeeded();
  v11 = WebKit::RemoteLayerTreeDrawingArea::triggerRenderingUpdate(a1);
  v12 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, double))(*(_QWORD *)v12 + 16))(v12, v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v10)
  {
    if (v10[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      if (v7)
        goto LABEL_14;
      return;
    }
    --v10[2];
  }
  if (v7)
LABEL_14:
    CFRelease(*(CFTypeRef *)(v7 - 8));
}

void sub_196D52F28(_Unwind_Exception *a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
  {
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::setSize(uint64_t this, const WebCore::IntSize *a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if (*(_DWORD *)(this + 56) != *(_DWORD *)a2 || *(_DWORD *)(this + 60) != *((_DWORD *)a2 + 1))
  {
    v4 = this;
    *(_QWORD *)(this + 56) = *(_QWORD *)a2;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(this + 48) + 160) + 56))(*(_QWORD *)(*(_QWORD *)(this + 48) + 160));
    if (this)
    {
      v5 = (_DWORD *)this;
      ++*(_DWORD *)(this + 8);
      v6 = WebCore::Widget::frameRect((WebCore::Widget *)this);
      v7 = *(_QWORD *)a2;
      v8[0] = v6;
      v8[1] = v7;
      (*(void (**)(_DWORD *, _QWORD *))(*(_QWORD *)v5 + 16))(v5, v8);
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 40))(*(_QWORD *)(v4 + 72));
      if (v5[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      else
        --v5[2];
    }
  }
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11DrawingArea14UpdateGeometryEN6WebKit11DrawingAreaES8_FvRKN7WebCore7IntSizeEbRKNS_13MachSendRightEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34AD018;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v5 = *a2;
  *a2 = 0;
  *v4 = &off_1E34B0530;
  v4[1] = v5;
  if (v5)
  {
    *a1 = v4;
    return (uint64_t)a1;
  }
  else
  {
    result = 139;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::clearUndoRedoOperations(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v5 = *(_QWORD *)(v3 + 32);
  v4 = v3 + 32;
  v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1843;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v12, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(void)>,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34B0530;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WebKit::WebUserContentControllerProxy::removeAllUserScripts(WebKit::WebUserContentControllerProxy *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  void *v28;
  WTF *v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t *v40;

  v40 = 0;
  v2 = *((_QWORD *)this + 7);
  v3 = *(uint64_t **)(v2 + 16);
  v4 = *(unsigned int *)(v2 + 28);
  v5 = &v3[v4];
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v3 + 16))(*v3) != 28)
    {
      ++v3;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        break;
      }
    }
    v7 = v3;
    v3 = *(uint64_t **)(v2 + 16);
    v8 = *(unsigned int *)(v2 + 28);
  }
  else
  {
    v8 = 0;
    v7 = *(uint64_t **)(v2 + 16);
  }
  v9 = &v3[v8];
  if (v7 == v9)
  {
    v38 = 0;
    v39 = 0;
    v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(0);
    v16 = 0;
    v14 = 0;
LABEL_26:
    v19 = 0;
    v20 = 1;
    goto LABEL_29;
  }
  do
  {
    v10 = *(_QWORD *)(*v7 + 112);
    CFRetain(*(CFTypeRef *)(v10 + 8));
    v31 = v10;
    LODWORD(v38) = 0;
    WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t)&v36, (uint64_t *)&v40, &v31, &v38);
    ++*(_DWORD *)(v36 + 8);
    if (v31)
      CFRelease(*(CFTypeRef *)(v31 + 8));
    v11 = v7 + 1;
    while (v11 - 1 != v5 && v11 != v5)
    {
      v13 = *v11++;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13) == 28)
      {
        v7 = v11 - 1;
        goto LABEL_19;
      }
    }
    v7 = v5;
LABEL_19:
    ;
  }
  while (v7 != v9);
  v14 = v40;
  v38 = 0;
  v39 = 0;
  if (!v40)
  {
    v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(0);
    v16 = 0;
    goto LABEL_26;
  }
  v15 = *((unsigned int *)v40 - 3);
  if ((_DWORD)v15)
  {
    if (v15 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v16 = WTF::fastMalloc((WTF *)(8 * v15));
    LODWORD(v39) = v15;
    v38 = (WTF *)v16;
  }
  else
  {
    v16 = 0;
  }
  v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v14);
  v20 = 0;
  v19 = &v14[2 * *((unsigned int *)v14 - 1)];
LABEL_29:
  if (v19 != v17)
  {
    v21 = 0;
    do
    {
      v22 = *v17;
      v17 += 2;
      *(_QWORD *)(v16 + 8 * v21) = *(_QWORD *)(v22 + 24);
      while (v17 != v18)
      {
        if ((unint64_t)(*v17 + 1) > 1)
          goto LABEL_36;
        v17 += 2;
      }
      v17 = v18;
LABEL_36:
      ++v21;
    }
    while (v17 != v19);
    HIDWORD(v39) = v21;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 5, &v36);
  v23 = *((_QWORD *)this + 5);
  if (v23)
  {
    v24 = *(unsigned int *)(v23 - 4);
    v25 = v23 + 8 * v24;
  }
  else
  {
    v25 = 0;
    v24 = 0;
  }
  v31 = (uint64_t)this + 40;
  v32 = v25;
  v33 = v25;
  v34 = v25;
  v35 = v23 + 8 * v24;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v31);
  for (i = v37; v37 != v32; i = v37)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    v30 = &v38;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserScripts>(v27, (uint64_t *)&v30, *((_QWORD *)this + 4));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v36);
  }
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(*((_QWORD *)this + 7) + 16, 0);
  v29 = v38;
  if (v38)
  {
    v38 = 0;
    LODWORD(v39) = 0;
    WTF::fastFree(v29, v28);
  }
  if ((v20 & 1) == 0)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v14, v28);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebUserContentController::RemoveAllUserScripts>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2812;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6, *a2);
  LOBYTE(v12) = 0;
  v13 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v14, 0, (uint64_t)&v12, 1);
  if (v13)
  {
    v8 = v12;
    v12 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    if (*(unsigned int *)(a1 + 12) > a2)
      WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, a2);
    v4 = *(WTF **)a1;
    if (a2)
    {
      if (*(_DWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 8) = a2;
        *(_QWORD *)a1 = WTF::fastRealloc(v4, (void *)(8 * a2));
        return;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = v6;
      if (v6 != v4)
        memcpy(v6, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, (void *)a2);
    }
  }
}

void sub_196D5377C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebKit::GPUProcess::additionalStateForDiagnosticReport(WebKit::GPUProcess *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  WTF::String **v11;
  WTF::String **v12;
  WTF::String **v13;
  WTF::String **v14;
  uint64_t v15;
  WTF::String *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  const __CFString *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
  v7 = *((_QWORD *)this + 15);
  v6 = (_QWORD **)((char *)this + 120);
  v5 = v7;
  if (v7 && *(_DWORD *)(v5 - 12))
  {
    v8 = objc_alloc(MEMORY[0x1E0C99E08]);
    if (*v6)
      v9 = *((unsigned int *)*v6 - 3);
    else
      v9 = 0;
    v10 = (void *)objc_msgSend(v8, "initWithCapacity:", v9);
    v11 = (WTF::String **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v6);
    v12 = v11;
    v14 = v13;
    if (*v6)
      v15 = (uint64_t)&(*v6)[2 * *((unsigned int *)*v6 - 1)];
    else
      v15 = 0;
    if ((WTF::String **)v15 != v11)
    {
      do
      {
        v16 = v12[1];
        v17 = *((_QWORD *)v16 + 31);
        if (v17 && *(_DWORD *)(v17 - 12))
        {
          v18 = objc_alloc(MEMORY[0x1E0C99E08]);
          v19 = *((_QWORD *)v16 + 31);
          if (v19)
            v20 = *(unsigned int *)(v19 - 12);
          else
            v20 = 0;
          v21 = (const void *)objc_msgSend(v18, "initWithCapacity:", v20);
          WTF::String::number(*v12);
          if (v25)
            v22 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v22 = &stru_1E351F1B8;
          objc_msgSend(v10, "setObject:forKey:", v21, v22);
          v24 = v25;
          v25 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          if (v21)
            CFRelease(v21);
        }
        while (1)
        {
          v12 += 2;
          if (v12 == v14)
            break;
          if ((unint64_t)*v12 + 1 > 1)
            goto LABEL_26;
        }
        v12 = v14;
LABEL_26:
        ;
      }
      while (v12 != (WTF::String **)v15);
    }
    if (objc_msgSend(v10, "count"))
      objc_msgSend(v4, "setObject:forKey:", v10, CFSTR("RemoteRenderingBackend states"));
    if (v10)
      CFRelease(v10);
  }
  *a2 = v4;
}

void sub_196D53964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  const void *v11;
  const void *v12;

  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_196D539D0()
{
  JUMPOUT(0x196D539BCLL);
}

IPC::Encoder *IPC::handleMessageAsync<Messages::WebProcess::PrepareToSuspend,WebKit::WebProcess,WebKit::WebProcess,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebProcess *,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&) WebKit::WebProcess::*)::{lambda(Messages::WebProcess::PrepareToSuspend &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *a1;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3460;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16PrepareToSuspendEN6WebKit10WebProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E3504F68;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages10WebProcess16PrepareToSuspendEN6WebKit10WebProcessES8_FvbNS_13MonotonicTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::WebProcess::PrepareToSuspend,WebKit::WebProcess,WebKit::WebProcess,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebProcess *,void ()(BOOL,WTF::MonotonicTime,WTF::CompletionHandler<void ()(void)> &&) WebKit::WebProcess::*)::{lambda(Messages::WebProcess::PrepareToSuspend &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

uint64_t WebKit::WebResourceLoader::messageSenderDestinationID(WebKit::WebResourceLoader *this)
{
  WTF::RunLoop *v2;
  uint64_t result;

  v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) == 0 || (result = *(_QWORD *)(*((_QWORD *)this + 2) + 744)) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196D53AF4);
  }
  return result;
}

void sub_196D53BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;

  _Block_release(v10);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v12);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *API::ContentRuleListStore::lookupContentRuleList(uint64_t a1, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringImpl *v10;

  API::constructedPath((API *)(a1 + 16), a2, a3);
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v9 = v6;
  API::ContentRuleListStore::lookupContentRuleListFile(a1, (uint64_t)&v10, (uint64_t)a2, &v9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *API::constructedPath(API *this, const WTF::String *a2, const WTF::String *a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8[2];

  if (!*(_QWORD *)this || !*(_DWORD *)(*(_QWORD *)this + 4))
  {
    __break(0xC471u);
    goto LABEL_15;
  }
  WTF::FileSystemImpl::encodeForFileName(a2, a2);
  v8[0] = (uint64_t)"ContentRuleList-";
  v8[1] = 17;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>(v8, (uint64_t *)&v6, &v7);
  if (!v7)
  {
    __break(0xC471u);
LABEL_15:
    JUMPOUT(0x196D53DA0);
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  v4 = v7;
  v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void API::ContentRuleListStore::lookupContentRuleListFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v6 = *(_QWORD *)(a1 + 32);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  v7 = *a4;
  *a4 = 0;
  v12 = v7;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v8 = &off_1E34D94C8;
  v8[1] = a1;
  v8[2] = v10;
  v8[3] = v11;
  v8[4] = v12;
  v13 = v8;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v6 + 32))(v6, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
}

void WebKit::DatabaseUtilities::currentTableAndIndexQueries(WebKit::DatabaseUtilities *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::SQLiteDatabase *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _BYTE v23[16];
  unsigned int v24;
  _BYTE v25[12];
  __int16 v26;
  uint64_t v27;
  uint8_t buf[4];
  WebKit::DatabaseUtilities *v29;
  __int16 v30;
  uint64_t ErrorMsg;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = (WebKit::DatabaseUtilities *)((char *)this + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  if (v24)
  {
    v13 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218243;
      v29 = this;
      v30 = 2081;
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v5);
      v14 = "%p - DatabaseUtilities::currentTableAndIndexQueries Unable to prepare statement to fetch schema for the tabl"
            "e, error message: %{private}s";
      goto LABEL_40;
    }
    goto LABEL_28;
  }
  if (WebCore::SQLiteStatement::bindText())
  {
    v13 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218243;
      v29 = this;
      v30 = 2081;
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v5);
      v14 = "%p - DatabaseUtilities::currentTableAndIndexQueries Unable to bind statement to fetch schema for the table, "
            "error message: %{private}s";
LABEL_40:
      _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x16u);
    }
LABEL_28:
    *(_BYTE *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    goto LABEL_23;
  }
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v23) != 100)
  {
    v13 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      v15 = WebCore::SQLiteDatabase::lastErrorMsg(v5);
      *(_DWORD *)buf = 134218243;
      v29 = this;
      v30 = 2081;
      ErrorMsg = v15;
      v14 = "%p - DatabaseUtilities::currentTableAndIndexQueries error executing statement to fetch table schema, error m"
            "essage: %{private}s";
      goto LABEL_40;
    }
    goto LABEL_28;
  }
  if (v24)
    goto LABEL_43;
  WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v23);
  WebCore::SQLiteDatabase::prepareStatement();
  if (*(_DWORD *)((char *)&ErrorMsg + 2))
  {
    v16 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      v20 = WebCore::SQLiteDatabase::lastErrorMsg(v5);
      *(_DWORD *)v25 = 134218243;
      *(_QWORD *)&v25[4] = this;
      v26 = 2081;
      v27 = v20;
      v18 = "%p - DatabaseUtilities::currentTableAndIndexQueries Unable to prepare statement to fetch index for the table"
            ", error message: %{private}s";
      goto LABEL_42;
    }
LABEL_35:
    *(_BYTE *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    goto LABEL_18;
  }
  if (WebCore::SQLiteStatement::bindText())
  {
    v16 = qword_1ECE715F0;
    if (os_log_type_enabled((os_log_t)qword_1ECE715F0, OS_LOG_TYPE_ERROR))
    {
      v17 = WebCore::SQLiteDatabase::lastErrorMsg(v5);
      *(_DWORD *)v25 = 134218243;
      *(_QWORD *)&v25[4] = this;
      v26 = 2081;
      v27 = v17;
      v18 = "%p - DatabaseUtilities::currentTableAndIndexQueries Unable to bind statement to fetch index for the table, e"
            "rror message: %{private}s";
LABEL_42:
      _os_log_error_impl(&dword_196BCC000, v16, OS_LOG_TYPE_ERROR, v18, v25, 0x16u);
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  v25[0] = 0;
  v25[8] = 0;
  if (*(_DWORD *)((char *)&ErrorMsg + 2))
    goto LABEL_43;
  if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)buf) == 100)
  {
    if (!*(_DWORD *)((char *)&ErrorMsg + 2))
    {
      WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)buf);
      v7 = v21;
      if (!v21)
        goto LABEL_15;
      if (*((_DWORD *)v21 + 1))
      {
        std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>((uint64_t)v25, (WTF::StringImpl *)&v21);
        v7 = v21;
        v21 = 0;
        if (!v7)
          goto LABEL_15;
      }
      else
      {
        v21 = 0;
      }
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
LABEL_15:
      v8 = v25[8];
      v9 = v22;
      v22 = 0;
      *(_QWORD *)a2 = v9;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 0;
      if (v8)
      {
        v10 = *(_QWORD *)v25;
        *(_QWORD *)v25 = 0;
        *(_QWORD *)(a2 + 8) = v10;
        *(_BYTE *)(a2 + 16) = 1;
      }
      goto LABEL_17;
    }
LABEL_43:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v19 = v22;
  v22 = 0;
  *(_QWORD *)a2 = v19;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
LABEL_17:
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v6);
LABEL_18:
  if (*(_DWORD *)((char *)&ErrorMsg + 2) != -1)
    (*(&off_1E34BC698 + *(unsigned int *)((char *)&ErrorMsg + 2)))((int)v25, (WebCore::SQLiteStatement *)buf);
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
LABEL_23:
  if (v24 != -1)
    (*(&off_1E34BC698 + v24))((int)buf, (WebCore::SQLiteStatement *)v23);
}

uint64_t WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebUserScriptData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _OWORD *v4;

  v3 = WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_OWORD *)(*(_QWORD *)a1 + 104 * *(unsigned int *)(a1 + 12));
  *v4 = *(_OWORD *)v3;
  WebCore::UserScript::UserScript((uint64_t)(v4 + 1), (uint64_t *)(v3 + 16));
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 104 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebUserScriptData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x2762763)
    {
      __break(0xC471u);
      JUMPOUT(0x196D54514);
    }
    v3 = *(WTF **)a1;
    v4 = *(_QWORD *)a1 + 104 * *(unsigned int *)(a1 + 12);
    v5 = 104 * a2;
    v6 = WTF::fastMalloc((WTF *)(104 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x68;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebUserScriptData>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebKit::WebUserScriptData>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a3 + 16;
    do
    {
      *(_OWORD *)(v5 - 16) = *(_OWORD *)v4;
      WebCore::UserScript::UserScript(v5, (uint64_t *)(v4 + 16));
      WebCore::UserScript::~UserScript((WebCore::UserScript *)(v4 + 16), v6);
      v4 += 104;
      v5 += 104;
    }
    while (v4 != a2);
  }
}

uint64_t WebKit::WebPageProxy::setBackgroundExtendsBeyondPage(uint64_t this, int a2)
{
  char v2;

  if (*(unsigned __int8 *)(this + 854) != a2)
  {
    *(_BYTE *)(this + 854) = a2;
    if (!*(_BYTE *)(this + 729))
    {
      if (*(_BYTE *)(this + 728))
      {
        v2 = a2;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetBackgroundExtendsBeyondPage>(*(_QWORD *)(this + 208), &v2, *(_QWORD *)(*(_QWORD *)(this + 32) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t IPC::Decoder::decode<WebCore::PolicyContainer>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::PolicyContainer,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 80))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196D54628(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::PolicyContainer,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<WebCore::PolicyContainer,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int128 v9;
  __int16 v10;
  __int128 v11;
  WTF::StringImpl *v12;
  uint64_t result;
  void *v14;
  _QWORD v15[2];
  int v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int16 v25;
  __int128 v26;
  char v27;
  __int16 v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  char v35;

  IPC::Decoder::decode<WebCore::ContentSecurityPolicyResponseHeaders>((uint64_t)&v31, a1);
  IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>((uint64_t)&v28, a1);
  IPC::Decoder::decode<WebCore::CrossOriginOpenerPolicy>((uint64_t)&v25, a1);
  v4 = IPC::Decoder::decode<WebCore::ReferrerPolicy>(a1);
  if (*a1)
  {
    if (v35)
    {
      v6 = v31;
      v7 = v32;
      v31 = 0;
      v32 = 0;
      v16 = v33;
      v17 = v34;
      if (v30)
      {
        v8 = v28;
        v18 = v28;
        v9 = v29;
        v29 = 0uLL;
        if (v27)
        {
          v10 = v25;
          v21 = v25;
          v11 = v26;
          v26 = 0uLL;
          if (v4 > 0xFFu)
          {
            v24 = v4;
            v15[0] = 0;
            v15[1] = 0;
            *(_QWORD *)a2 = v6;
            *(_QWORD *)(a2 + 8) = v7;
            *(_DWORD *)(a2 + 16) = v33;
            *(_BYTE *)(a2 + 20) = v34;
            *(_WORD *)(a2 + 24) = v8;
            *(_OWORD *)(a2 + 32) = v9;
            *(_WORD *)(a2 + 48) = v10;
            *(_OWORD *)(a2 + 56) = v11;
            *(_BYTE *)(a2 + 72) = v4;
            *(_BYTE *)(a2 + 80) = 1;
            v19 = 0;
            v20 = 0;
            v22 = 0;
            v23 = 0;
            WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v5);
            goto LABEL_7;
          }
        }
      }
    }
    __break(1u);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 80) = 0;
LABEL_7:
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, (WTF::StringImpl *)v5);
  result = std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v12);
  if (v35)
    return WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v14);
  return result;
}

void sub_196D5477C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  WTF::StringImpl *v14;
  void *v15;
  va_list va;

  va_start(va, a12);
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100](v12 - 80, v14);
  if (*(_BYTE *)(v12 - 24))
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12 - 48, v15);
  _Unwind_Resume(a1);
}

void sub_196D547B0()
{
  JUMPOUT(0x196D54798);
}

WebKit::StorageAreaMap *WebKit::StorageAreaMap::didReceiveMessage(WebKit::StorageAreaMap *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::StorageAreaMap *v3;
  int v4;
  WTF::StringImpl *v5;
  char v6;
  _BYTE v7[16];
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11[2];
  char v12;

  v3 = this;
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1459)
  {
    this = (WebKit::StorageAreaMap *)IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
    if (v6)
      return (WebKit::StorageAreaMap *)WebKit::StorageAreaMap::clearCache((uint64_t)v3, (unint64_t)this);
  }
  else if (v4 == 1460)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,WTF::String,unsigned long long>>((uint64_t *)a3, v7);
    if (v12)
      WebKit::StorageAreaMap::dispatchStorageEvent(v3, (uint64_t)v7, &v8, (int)&v9, (WTF::String *)&v10, (uint64_t)v11, v11[1]);
    return (WebKit::StorageAreaMap *)std::__optional_destruct_base<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaImplIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::String,WTF::String,WTF::String,unsigned long long>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
  }
  return this;
}

uint64_t WebKit::DiagnosticLoggingClient::setDelegate(uint64_t a1, void *a2)
{
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t result;
  char v8;

  objc_storeWeak((id *)(a1 + 16), a2);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xFE | objc_opt_respondsToSelector() & 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v3 = 2;
  else
    v3 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xFD | v3;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v4 = 4;
  else
    v4 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xFB | v4;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v5 = 8;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xF7 | v5;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v6 = 16;
  else
    v6 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xEF | v6;
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    v8 = 32;
  else
    v8 = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a1 + 24) & 0xDF | v8;
  return result;
}

uint64_t ___ZN6WebKit12WebPageProxy27scheduleActivityStateUpdateEv_block_invoke(WTF::WorkQueue *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v2 = WTF::WorkQueue::main(a1);
  v3 = (unsigned int *)*((_QWORD *)a1 + 4);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E34CA768;
  v5[1] = v3;
  v7 = v5;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 32))(v2, &v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_196D54A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebResourceLoadStatisticsStore::logFrameNavigation(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8)
{
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t result;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  char v29;
  _QWORD *v30;

  WebCore::RegistrableDomain::isolatedCopy(&v25);
  WebCore::RegistrableDomain::isolatedCopy(&v26);
  WebCore::RegistrableDomain::isolatedCopy(&v27);
  LOBYTE(v28) = a6;
  BYTE1(v28) = a7;
  *((double *)&v28 + 1) = a2;
  v29 = a8;
  v13 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v13 = &off_1E34C1B78;
  *(_QWORD *)(v13 + 8) = a1;
  *(_QWORD *)(v13 + 16) = v25;
  v14 = v26;
  v25 = 0;
  v26 = 0;
  *(_QWORD *)(v13 + 24) = v14;
  v15 = v27;
  v27 = 0;
  *(_QWORD *)(v13 + 32) = v15;
  v16 = v28;
  *(_BYTE *)(v13 + 56) = v29;
  *(_OWORD *)(v13 + 40) = v16;
  if (*(_BYTE *)(a1 + 64))
  {
    result = 200;
    __break(0xC471u);
  }
  else
  {
    v17 = v13;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)a1);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v18 = &off_1E34C0D18;
    v18[1] = a1;
    v18[2] = v17;
    v30 = v18;
    WTF::SuspendableWorkQueue::dispatch();
    v20 = v30;
    v30 = 0;
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    v21 = v27;
    v27 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v26;
    v26 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v19);
      else
        *(_DWORD *)v22 -= 2;
    }
    result = (uint64_t)v25;
    v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RegistrableDomain::isolatedCopy@<X0>(WTF::StringImpl **a1@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  result = WTF::String::isolatedCopy();
  if (v4 && *((_DWORD *)v4 + 1))
  {
    *a1 = v4;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (uint64_t)v4;
    *a1 = v5;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        return WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return result;
}

void sub_196D54CA4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::Length *IPC::ArgumentCoder<WebCore::AcceleratedEffectValues,void>::decode(_BYTE *a1, unint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  char *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  unsigned int v25;
  int v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  int v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  WTF *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  int v64;
  BOOL v65;
  char v66;
  unint64_t v67;
  char v68;
  char v69;
  unint64_t v70;
  WTF *v71;
  int v72;
  unint64_t v73;
  unsigned __int8 *v74;
  unint64_t v75;
  _DWORD *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  unsigned __int16 v81;
  char v82;
  void *v83;
  char v84;
  uint64_t v85;
  BOOL v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int16 v93;
  unint64_t v94;
  void *v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  int v101;
  int v102;
  int v103;
  BOOL v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  int v110;
  int v111;
  void *v112;
  WTF *v113;
  _QWORD *v114;
  void *v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unsigned __int16 v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  unsigned __int16 v137;
  char v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unsigned __int8 *v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD *v157;
  _DWORD *v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  WTF *v165;
  uint64_t v166;
  void *v167;
  void *v168;
  char v169;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  void (*v175)(void);
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  void (*v206)(void);
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  char v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  int v256;
  uint64_t v257;
  unsigned int v258;
  int v259;
  int v260;
  int v261;
  BOOL v262;
  uint64_t v263;
  int *v264;
  int *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  int v283;
  unint64_t v284;
  unint64_t v285;
  char v286;
  char v287;
  BOOL v288;
  char v289;
  int v290;
  int v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  WTF *v296;
  uint64_t v297;
  char v298;
  _DWORD *v299;
  int v300;
  unsigned __int8 v301;
  char v302;
  char v303;
  char v304;
  _DWORD *v305;
  char v306;
  _DWORD *v307;
  char v308;
  _DWORD *v309;
  char v310;
  uint64_t v311;
  uint64_t v312;
  char v313;
  int v314;
  unsigned __int8 v315;
  char v316;
  char v317;
  int v318;
  unsigned __int8 v319;
  char v320;
  char v321;
  char v322;
  __int16 v323;
  char v324;
  __int16 v325;
  char v326;
  __int16 v327;
  char v328;
  _DWORD *v329;
  _DWORD *v330;
  int v331;
  unsigned __int8 v332;
  char v333;
  char v334;
  char v335;
  _BYTE v336[8];
  char v337;
  _BYTE v338[8];
  char v339;
  int v340;
  __int16 v341;
  char v342;
  char v343;
  _BYTE v344[68];
  unint64_t v345;
  unint64_t v346;
  char v347;
  __int16 v348;
  char v349;
  BOOL v350;
  __int16 v351;
  char v352;
  char v353;
  __int16 v354;
  char v355;
  int v356;
  unsigned __int8 v357;
  char v358;
  char v359;
  int v360;
  unsigned __int8 v361;
  char v362;
  char v363;
  char v364;
  uint64_t v365;
  uint64_t v366;
  _DWORD *v367;
  _DWORD *v368;
  _DWORD *v369;
  WTF *v370;
  int v371;
  __int16 v372;
  char v373;
  int v374;
  __int16 v375;
  char v376;
  int v377;
  unsigned __int8 v378;
  char v379;
  char v380;
  int v381;
  __int16 v382;
  char v383;
  int v384;
  unsigned __int8 v385;
  char v386;
  char v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  WTF *v391;
  uint64_t v392;
  __int128 v393;
  _OWORD v394[2];
  __int128 v395;
  unsigned __int8 v396[40];
  uint64_t v397;

  v397 = *MEMORY[0x1E0C80C00];
  v3 = IPC::Decoder::decode<float>(a2);
  v4 = (unsigned __int8 *)a2[1];
  v5 = (char *)*a2;
  v6 = a2[2] - *a2;
  if ((unint64_t)v4 <= v6)
    goto LABEL_380;
  v7 = (unsigned __int8 *)&v5[v6];
  a2[2] = (unint64_t)(v7 + 1);
  if (!v5)
  {
    v7 = v4;
    v171 = 0;
    goto LABEL_381;
  }
  LODWORD(v7) = *v7;
  if (v7 >= 2)
  {
LABEL_382:
    *a2 = 0;
    a2[1] = 0;
    v174 = a2[3];
    if (!v174 || !v4)
      goto LABEL_424;
    v175 = *(void (**)(void))(*(_QWORD *)v174 + 16);
    goto LABEL_576;
  }
  if (!(_DWORD)v7)
  {
    v289 = 0;
    v24 = 0;
    LODWORD(v294) = 0;
    LODWORD(v295) = 0;
    v290 = 0;
    LODWORD(v293) = 0;
    goto LABEL_32;
  }
  v295 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
  v9 = v8;
  if (!v8)
  {
    v194 = *a2;
    v195 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v196 = a2[3];
    if (v196)
    {
      if (v195)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v196 + 16))(v196, v194);
    }
  }
  v11 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
  v12 = v5;
  if (!(_BYTE)v5)
  {
    v5 = (char *)*a2;
    v4 = (unsigned __int8 *)a2[1];
    *a2 = 0;
    a2[1] = 0;
    v197 = a2[3];
    if (v197)
    {
      if (v4)
      {
        v198 = v11;
        (*(void (**)(unint64_t, char *))(*(_QWORD *)v197 + 16))(v197, v5);
        v11 = v198;
      }
    }
  }
  v13 = *a2;
  if (*a2)
  {
    if (!v9 || !v12)
      goto LABEL_379;
    v293 = HIDWORD(v295);
    v294 = HIDWORD(v11);
    v5 = (char *)*a2;
  }
  else
  {
    v199 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v200 = a2[3];
    if (v200 && v199)
    {
      (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v200 + 16))(v200, 0);
      LODWORD(v295) = 0;
      v5 = (char *)*a2;
    }
    else
    {
      v5 = 0;
      LODWORD(v295) = 0;
    }
    LODWORD(v294) = v10;
    LODWORD(v293) = v10;
  }
  v290 = v11;
  v14 = a2[1];
  if (v14 <= a2[2] - (unint64_t)v5)
  {
    v201 = 0;
    v202 = 0;
    *a2 = 0;
    a2[1] = 0;
    v203 = a2[3];
    if (v203)
    {
      if (v14)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v203 + 16))(v203);
        v202 = *a2;
        v201 = a2[1];
      }
      else
      {
        v201 = 0;
        v202 = 0;
      }
    }
    goto LABEL_416;
  }
  v15 = (unsigned __int8 *)a2[2];
  a2[2] = (unint64_t)(v15 + 1);
  if (!v5)
  {
    v201 = v14;
    v202 = 0;
LABEL_416:
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v204 = a2[3];
    if (v204)
    {
      if (v201)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v204 + 16))(v204, v202, v201);
        v14 = a2[1];
      }
      else
      {
        v14 = 0;
      }
    }
    goto LABEL_417;
  }
  v16 = *v15;
  if (v16 >= 2)
  {
LABEL_417:
    *a2 = 0;
    a2[1] = 0;
    v205 = a2[3];
    if (!v205 || !v14)
      goto LABEL_438;
    v206 = *(void (**)(void))(*(_QWORD *)v205 + 16);
    goto LABEL_587;
  }
  if (!v16)
  {
    v22 = 0;
    v287 = 0;
    v23 = 0;
    goto LABEL_25;
  }
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a2, (uint64_t)v344);
  v17 = v344[48];
  if (!v344[48])
  {
    v217 = *a2;
    v218 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v219 = a2[3];
    if (v219)
    {
      if (v218)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v219 + 16))(v219, v217);
    }
  }
  v285 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
  v19 = v18;
  if (!v18)
  {
    v220 = *a2;
    v221 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v222 = a2[3];
    if (v222)
    {
      if (v221)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v222 + 16))(v222, v220);
    }
  }
  v284 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
  v21 = v20;
  if (!v20)
  {
    v223 = *a2;
    v4 = (unsigned __int8 *)a2[1];
    *a2 = 0;
    a2[1] = 0;
    v224 = a2[3];
    if (v224)
    {
      if (v4)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v224 + 16))(v224, v223);
    }
  }
  v5 = (char *)*a2;
  if (!*a2)
  {
    v225 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v226 = a2[3];
    if (!v226 || !v225)
      goto LABEL_438;
    v206 = *(void (**)(void))(*(_QWORD *)v226 + 16);
LABEL_587:
    v206();
LABEL_438:
    v227 = *a2;
    v228 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v229 = a2[3];
    if (v229 && v228)
    {
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v229 + 16))(v229, v227);
      v23 = 0;
      v5 = (char *)*a2;
    }
    else
    {
      v5 = 0;
      v23 = 0;
    }
    v22 = 1;
    goto LABEL_25;
  }
  if (!v17 || !v19 || !v21)
    goto LABEL_379;
  v22 = 0;
  v23 = v344[0];
  v395 = *(_OWORD *)&v344[1];
  *(_OWORD *)v396 = *(_OWORD *)&v344[17];
  *(_OWORD *)&v396[15] = *(_OWORD *)&v344[32];
  v287 = 1;
LABEL_25:
  v286 = v23;
  v4 = (unsigned __int8 *)a2[1];
  if ((unint64_t)v4 <= a2[2] - (unint64_t)v5)
  {
    v7 = 0;
    v207 = 0;
    *a2 = 0;
    a2[1] = 0;
    v208 = a2[3];
    if (v208)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v208 + 16))(v208);
        v207 = *a2;
        v7 = (unsigned __int8 *)a2[1];
      }
      else
      {
        v7 = 0;
        v207 = 0;
      }
    }
    goto LABEL_421;
  }
  v7 = (unsigned __int8 *)a2[2];
  a2[2] = (unint64_t)(v7 + 1);
  if (!v5)
  {
    v7 = v4;
    v207 = 0;
LABEL_421:
    v4 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v209 = a2[3];
    if (v209)
    {
      if (v7)
      {
        (*(void (**)(unint64_t, unint64_t, unsigned __int8 *))(*(_QWORD *)v209 + 16))(v209, v207, v7);
        v5 = (char *)*a2;
        v4 = (unsigned __int8 *)a2[1];
      }
      else
      {
        v4 = 0;
        v5 = 0;
      }
    }
    goto LABEL_422;
  }
  v25 = *v7;
  if (v25 > 1)
  {
LABEL_422:
    *a2 = 0;
    a2[1] = 0;
    v210 = a2[3];
    if (!v210 || !v4)
    {
      *a2 = 0;
      a2[1] = 0;
      goto LABEL_424;
    }
    (*(void (**)(unint64_t, char *))(*(_QWORD *)v210 + 16))(v210, v5);
    v7 = (unsigned __int8 *)*a2;
    if (*a2)
    {
      v288 = 0;
      v26 = 1;
      if (!v13)
        goto LABEL_379;
      goto LABEL_29;
    }
    v274 = a2[1];
    v275 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    if (!v275 || !v274)
    {
LABEL_424:
      v211 = *a2;
      v212 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v213 = a2[3];
      if (v213 && v212)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v213 + 16))(v213, v211);
      v24 = 1;
      LODWORD(v294) = (_DWORD)v7;
      LODWORD(v295) = 0;
      v290 = (int)v7;
      LODWORD(v293) = (_DWORD)v7;
      goto LABEL_32;
    }
    v175 = *(void (**)(void))(*(_QWORD *)v275 + 16);
LABEL_576:
    v175();
    goto LABEL_424;
  }
  v26 = 0;
  v288 = v25 != 0;
  if (!v13)
    goto LABEL_379;
LABEL_29:
  if (v22 || v26)
    goto LABEL_379;
  v24 = 0;
  v393 = v395;
  v394[0] = *(_OWORD *)v396;
  *(_OWORD *)((char *)v394 + 15) = *(_OWORD *)&v396[15];
  v289 = 1;
LABEL_32:
  IPC::Decoder::decode<WebCore::LengthPoint>((uint64_t)&v314, (uint64_t *)a2);
  v292 = v24;
  *(_WORD *)v344 = 0;
  IPC::Decoder::operator>><unsigned char>(a2, v344);
  v27 = v344[0];
  if (v344[1])
    v28 = v344[0] > 4u;
  else
    v28 = 1;
  v29 = v28;
  if (v29 == 1)
  {
    v176 = *a2;
    v177 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v178 = a2[3];
    if (v178 && v177)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v178 + 16))(v178, v176);
    v27 = 0;
  }
  v30 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v31)
  {
    v344[0] = 0;
    v344[16] = 0;
LABEL_71:
    v5 = (char *)*a2;
    v57 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v58 = a2[3];
    if (v58)
    {
      if (v57)
      {
        (*(void (**)(unint64_t, char *))(*(_QWORD *)v58 + 16))(v58, v5);
        if (*a2)
          goto LABEL_379;
      }
    }
    v44 = 0;
    goto LABEL_73;
  }
  v32 = v30;
  v395 = 0uLL;
  if (v30 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>((uint64_t)&v296, (uint64_t *)a2);
      if (!(_BYTE)v297)
      {
LABEL_70:
        v344[0] = 0;
        v344[16] = 0;
        WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v395, v31);
        goto LABEL_71;
      }
      v49 = HIDWORD(v395);
      if (HIDWORD(v395) != DWORD2(v395))
        break;
      v50 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v395, HIDWORD(v395) + 1, (unint64_t)&v296);
      v51 = HIDWORD(v395);
      v52 = HIDWORD(v395) + 1;
      v53 = v395;
      v54 = *v50;
      *v50 = 0;
      *(_QWORD *)(v53 + 8 * v51) = v54;
      HIDWORD(v395) = v52;
      if ((_BYTE)v297)
        goto LABEL_64;
LABEL_68:
      if (!--v32)
      {
        WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)&v395, HIDWORD(v395));
        v233 = *((_QWORD *)&v395 + 1);
        *(_QWORD *)v344 = v395;
        v395 = 0uLL;
        *(_QWORD *)&v344[8] = v233;
        goto LABEL_57;
      }
    }
    v55 = v296;
    v296 = 0;
    *(_QWORD *)(v395 + 8 * HIDWORD(v395)) = v55;
    HIDWORD(v395) = v49 + 1;
LABEL_64:
    v56 = v296;
    v296 = 0;
    if (v56)
    {
      if (*((_DWORD *)v56 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v56 + 8))(v56);
      else
        --*((_DWORD *)v56 + 2);
    }
    goto LABEL_68;
  }
  if (v30)
  {
    v33 = WTF::fastMalloc((WTF *)(8 * v30));
    DWORD2(v395) = v32;
    *(_QWORD *)&v395 = v33;
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>((uint64_t)&v296, (uint64_t *)a2);
      if (!(_BYTE)v297)
        goto LABEL_70;
      v34 = HIDWORD(v395);
      if (HIDWORD(v395) != DWORD2(v395))
        break;
      v35 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v395, HIDWORD(v395) + 1, (unint64_t)&v296);
      v36 = HIDWORD(v395);
      v37 = HIDWORD(v395) + 1;
      v38 = v395;
      v39 = *v35;
      *v35 = 0;
      *(_QWORD *)(v38 + 8 * v36) = v39;
      HIDWORD(v395) = v37;
      if ((_BYTE)v297)
        goto LABEL_48;
LABEL_52:
      if (!--v32)
      {
        v43 = *((_QWORD *)&v395 + 1);
        v42 = v395;
        goto LABEL_56;
      }
    }
    v40 = v296;
    v296 = 0;
    *(_QWORD *)(v395 + 8 * HIDWORD(v395)) = v40;
    HIDWORD(v395) = v34 + 1;
LABEL_48:
    v41 = v296;
    v296 = 0;
    if (v41)
    {
      if (*((_DWORD *)v41 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v41 + 8))(v41);
      else
        --*((_DWORD *)v41 + 2);
    }
    goto LABEL_52;
  }
  v42 = 0;
  v43 = 0;
LABEL_56:
  v395 = 0uLL;
  *(_QWORD *)v344 = v42;
  *(_QWORD *)&v344[8] = v43;
LABEL_57:
  v44 = 1;
  v344[16] = 1;
  WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v395, v31);
  if (*a2)
  {
    v45 = WebCore::TransformOperations::TransformOperations();
    v46 = *((_QWORD *)&v395 + 1);
    v311 = v395;
    v395 = 0uLL;
    v312 = v46;
    v313 = 1;
    WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v45, v47);
    v48 = 0;
    if (!v344[16])
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_73:
  LOBYTE(v311) = 0;
  v313 = 0;
  v48 = 1;
  if (v44)
LABEL_74:
    WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v344, v5);
LABEL_75:
  if (v48)
  {
    v179 = *a2;
    v180 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v181 = a2[3];
    if (v181)
    {
      if (v180)
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v181 + 16))(v181, v179);
    }
  }
  IPC::Decoder::decode<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>((uint64_t)&v309, (uint64_t *)a2);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>((uint64_t)&v307, (uint64_t *)a2);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>((uint64_t)&v305, (uint64_t *)a2);
  v59 = a2[1];
  v60 = *a2;
  v61 = a2[2] - *a2;
  if (v59 <= v61)
  {
    v182 = 0;
    v183 = 0;
    *a2 = 0;
    a2[1] = 0;
    v184 = a2[3];
    if (v184)
    {
      if (v59)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v184 + 16))(v184);
        v183 = *a2;
        v182 = a2[1];
      }
      else
      {
        v182 = 0;
        v183 = 0;
      }
    }
    goto LABEL_391;
  }
  v62 = (unsigned __int8 *)(v60 + v61);
  a2[2] = (unint64_t)(v62 + 1);
  if (!v60)
  {
    v182 = v59;
    v183 = 0;
LABEL_391:
    v59 = 0;
    v60 = 0;
    *a2 = 0;
    a2[1] = 0;
    v185 = a2[3];
    if (v185)
    {
      if (v182)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v185 + 16))(v185, v183, v182);
        v60 = *a2;
        v59 = a2[1];
      }
      else
      {
        v59 = 0;
        v60 = 0;
      }
    }
    goto LABEL_392;
  }
  v63 = *v62;
  if (v63 >= 2)
  {
LABEL_392:
    *a2 = 0;
    a2[1] = 0;
    v186 = a2[3];
    if (v186 && v59)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v186 + 16))(v186, v60);
    goto LABEL_488;
  }
  if (!v63)
  {
    v72 = 0;
    v71 = 0;
    goto LABEL_266;
  }
  *(_WORD *)v344 = 0;
  IPC::Decoder::operator>><unsigned char>(a2, v344);
  v64 = v344[0];
  if (v344[1])
    v65 = v344[0] >= 4u;
  else
    v65 = 1;
  v66 = !v65;
  if (v65)
  {
    v214 = *a2;
    v215 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v216 = a2[3];
    if (v216 && v215)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v216 + 16))(v216, v214);
    v64 = 0;
  }
  v67 = *a2;
  if (!*a2)
    goto LABEL_488;
  v68 = v66 ^ 1;
  if (v64)
    v69 = 1;
  else
    v69 = v66 ^ 1;
  if ((v69 & 1) == 0)
  {
    IPC::Decoder::decode<std::optional<WebCore::Path>>(v344, a2);
    v70 = *a2;
    if (*a2)
    {
      if (!BYTE4(v346))
        goto LABEL_379;
      WebCore::ReferencePathOperation::create();
      v71 = (WTF *)v395;
    }
    else
    {
      v71 = 0;
    }
    if (BYTE4(v346) && BYTE4(v345) && *(_DWORD *)&v344[64] != -1)
      ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[*(unsigned int *)&v344[64]])(&v395, &v344[8]);
    if (!v70)
    {
      v230 = *a2;
      v231 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      v232 = a2[3];
      if (!v232 || !v231)
        goto LABEL_488;
      goto LABEL_482;
    }
LABEL_100:
    if (*a2)
      goto LABEL_265;
    if (v71)
    {
      if (*((_DWORD *)v71 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v71 + 8))(v71);
      else
        --*((_DWORD *)v71 + 2);
    }
    goto LABEL_488;
  }
  if (v64 != 1)
    v68 = 1;
  if ((v68 & 1) == 0)
  {
    v73 = a2[1];
    if (v73 <= a2[2] - v67)
    {
      v234 = 0;
      v235 = 0;
      *a2 = 0;
      a2[1] = 0;
      v236 = a2[3];
      if (v236)
      {
        if (v73)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v236 + 16))(v236);
          v234 = 0;
          v276 = *a2;
          v277 = a2[1];
          v278 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          v235 = 0;
          if (v278 && v277)
          {
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v278 + 16))(v278, v276);
            v235 = *a2;
            v234 = a2[1];
          }
        }
        else
        {
          v234 = 0;
          v235 = 0;
        }
      }
    }
    else
    {
      v74 = (unsigned __int8 *)a2[2];
      a2[2] = (unint64_t)(v74 + 1);
      if (*v74 < 5u)
      {
        switch(*v74)
        {
          case 0u:
            IPC::Decoder::decode<WebCore::BasicShapeCenterCoordinate>((uint64_t)v344, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::BasicShapeCenterCoordinate>((uint64_t)&v395, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::BasicShapeRadius>((uint64_t)&v296, (uint64_t *)a2);
            v75 = *a2;
            if (*a2)
            {
              if (!v344[20] || !v396[4] || !BYTE4(v297))
                goto LABEL_379;
              WebCore::BasicShapeCircle::create();
              v76 = v330;
            }
            else
            {
              v76 = 0;
            }
            if (BYTE4(v297) && BYTE4(v296) == 11)
              WebCore::Length::deref((WebCore::Length *)&v296);
            std::__optional_destruct_base<WebCore::BasicShapeCenterCoordinate,false>::~__optional_destruct_base[abi:sn180100](&v395);
            std::__optional_destruct_base<WebCore::BasicShapeCenterCoordinate,false>::~__optional_destruct_base[abi:sn180100](v344);
            if (v75)
              goto LABEL_259;
            v77 = *a2;
            v78 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            v79 = a2[3];
            if (!v79 || !v78)
              goto LABEL_537;
            goto LABEL_613;
          case 1u:
            IPC::Decoder::decode<WebCore::BasicShapeCenterCoordinate>((uint64_t)v344, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::BasicShapeCenterCoordinate>((uint64_t)&v395, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::BasicShapeRadius>((uint64_t)&v296, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::BasicShapeRadius>((uint64_t)&v330, (uint64_t *)a2);
            v119 = *a2;
            if (*a2)
            {
              if (!v344[20] || !v396[4] || !BYTE4(v297) || !v332)
                goto LABEL_379;
              WebCore::BasicShapeEllipse::create();
              v76 = v299;
            }
            else
            {
              v76 = 0;
            }
            if (v332 && BYTE4(v330) == 11)
              WebCore::Length::deref((WebCore::Length *)&v330);
            if (BYTE4(v297) && BYTE4(v296) == 11)
              WebCore::Length::deref((WebCore::Length *)&v296);
            std::__optional_destruct_base<WebCore::BasicShapeCenterCoordinate,false>::~__optional_destruct_base[abi:sn180100](&v395);
            std::__optional_destruct_base<WebCore::BasicShapeCenterCoordinate,false>::~__optional_destruct_base[abi:sn180100](v344);
            if (v119)
              goto LABEL_259;
            v77 = *a2;
            v120 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            v79 = a2[3];
            if (v79 && v120)
              goto LABEL_613;
            goto LABEL_537;
          case 2u:
            v93 = IPC::Decoder::decode<WebCore::RotationDirection>(a2);
            v94 = IPC::Decoder::decode<unsigned long long>(a2);
            if (!(_BYTE)v95)
            {
              v344[0] = 0;
              v344[16] = 0;
              goto LABEL_496;
            }
            v96 = v94;
            v395 = 0uLL;
            if (v94 < 0x20000)
            {
              if (!v94)
              {
                v123 = 0;
                v124 = 0;
LABEL_237:
                v395 = 0uLL;
                *(_QWORD *)v344 = v123;
                *(_QWORD *)&v344[8] = v124;
LABEL_238:
                v125 = 1;
                v344[16] = 1;
                WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v395, v95);
                v126 = 0;
                goto LABEL_239;
              }
              v97 = WTF::fastMalloc((WTF *)(8 * v94));
              DWORD2(v395) = v96;
              *(_QWORD *)&v395 = v97;
              while (1)
              {
                IPC::Decoder::decode<WebCore::Length>((uint64_t)&v296, (uint64_t *)a2);
                v98 = v297;
                if ((_BYTE)v297)
                {
                  if (HIDWORD(v395) != DWORD2(v395))
                  {
                    v99 = v395 + 8 * HIDWORD(v395);
                    *(_DWORD *)v99 = 0;
                    *(_WORD *)(v99 + 5) = 0;
                    v100 = BYTE4(v296);
                    *(_WORD *)(v99 + 4) = WORD2(v296);
                    if (v100 <= 0xD)
                    {
                      v101 = 1 << v100;
                      if ((v101 & 0x7FC) != 0)
                      {
                        v102 = BYTE6(v296);
                        *(_BYTE *)(v99 + 6) = BYTE6(v296);
                        if (v102)
                        {
                          *(_DWORD *)v99 = (_DWORD)v296;
                          goto LABEL_168;
                        }
                        v103 = (int)v296;
                      }
                      else
                      {
                        if ((v101 & 0x3003) != 0)
                        {
                          *(_DWORD *)v99 = 0;
                          goto LABEL_168;
                        }
                        v103 = (int)v296;
                        LODWORD(v296) = 0;
                      }
                      *(_DWORD *)v99 = v103;
                    }
LABEL_168:
                    BYTE4(v296) = 0;
                    ++HIDWORD(v395);
                    goto LABEL_169;
                  }
                  WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length>((uint64_t)&v395, (unint64_t)&v296);
                }
LABEL_169:
                if ((_BYTE)v297)
                  v104 = BYTE4(v296) == 11;
                else
                  v104 = 0;
                if (v104)
                {
                  WebCore::Length::deref((WebCore::Length *)&v296);
                  if (!v98)
                    goto LABEL_526;
                }
                else if (!v98)
                {
                  goto LABEL_526;
                }
                if (!--v96)
                {
                  v344[16] = 0;
                  v124 = *((_QWORD *)&v395 + 1);
                  v123 = v395;
                  goto LABEL_237;
                }
              }
            }
            while (1)
            {
              IPC::Decoder::decode<WebCore::Length>((uint64_t)&v296, (uint64_t *)a2);
              v256 = v297;
              if ((_BYTE)v297)
              {
                if (HIDWORD(v395) != DWORD2(v395))
                {
                  v257 = v395 + 8 * HIDWORD(v395);
                  *(_DWORD *)v257 = 0;
                  *(_WORD *)(v257 + 5) = 0;
                  v258 = BYTE4(v296);
                  *(_WORD *)(v257 + 4) = WORD2(v296);
                  if (v258 <= 0xD)
                  {
                    v259 = 1 << v258;
                    if ((v259 & 0x7FC) != 0)
                    {
                      v260 = BYTE6(v296);
                      *(_BYTE *)(v257 + 6) = BYTE6(v296);
                      if (v260)
                      {
                        *(_DWORD *)v257 = (_DWORD)v296;
                        goto LABEL_517;
                      }
                      v261 = (int)v296;
                    }
                    else
                    {
                      if ((v259 & 0x3003) != 0)
                      {
                        *(_DWORD *)v257 = 0;
                        goto LABEL_517;
                      }
                      v261 = (int)v296;
                      LODWORD(v296) = 0;
                    }
                    *(_DWORD *)v257 = v261;
                  }
LABEL_517:
                  BYTE4(v296) = 0;
                  ++HIDWORD(v395);
                  goto LABEL_518;
                }
                WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Length>((uint64_t)&v395, (unint64_t)&v296);
              }
LABEL_518:
              if ((_BYTE)v297)
                v262 = BYTE4(v296) == 11;
              else
                v262 = 0;
              if (v262)
              {
                WebCore::Length::deref((WebCore::Length *)&v296);
                if (!v256)
                {
LABEL_526:
                  v344[0] = 0;
                  v344[16] = 0;
                  WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v395, v95);
LABEL_496:
                  v5 = (char *)*a2;
                  v4 = (unsigned __int8 *)a2[1];
                  *a2 = 0;
                  a2[1] = 0;
                  v255 = a2[3];
                  if (v255 && v4)
                    (*(void (**)(unint64_t, char *))(*(_QWORD *)v255 + 16))(v255, v5);
                  v125 = 0;
                  v126 = 1;
LABEL_239:
                  v127 = *a2;
                  if (*a2)
                  {
                    if (v93 > 0xFFu && !v126)
                    {
                      WebCore::BasicShapePolygon::create();
                      v76 = (_DWORD *)v395;
                      if (v344[16])
                        goto LABEL_243;
                      goto LABEL_244;
                    }
LABEL_379:
                    __break(1u);
LABEL_380:
                    v7 = 0;
                    v171 = 0;
                    *a2 = 0;
                    a2[1] = 0;
                    v172 = a2[3];
                    if (v172)
                    {
                      if (v4)
                      {
                        (*(void (**)(unint64_t, char *))(*(_QWORD *)v172 + 16))(v172, v5);
                        v171 = *a2;
                        v7 = (unsigned __int8 *)a2[1];
                      }
                      else
                      {
                        v7 = 0;
                        v171 = 0;
                      }
                    }
LABEL_381:
                    v4 = 0;
                    *a2 = 0;
                    a2[1] = 0;
                    v173 = a2[3];
                    if (v173)
                    {
                      if (v7)
                      {
                        (*(void (**)(unint64_t, unint64_t, unsigned __int8 *))(*(_QWORD *)v173 + 16))(v173, v171, v7);
                        v4 = (unsigned __int8 *)a2[1];
                      }
                      else
                      {
                        v4 = 0;
                      }
                    }
                    goto LABEL_382;
                  }
                  v76 = 0;
                  if (v125)
LABEL_243:
                    WTF::Vector<WebCore::Length,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v344, v5);
LABEL_244:
                  if (!v127)
                  {
                    v77 = *a2;
                    v128 = a2[1];
                    *a2 = 0;
                    a2[1] = 0;
                    v79 = a2[3];
                    if (v79 && v128)
                    {
LABEL_613:
                      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v79 + 16))(v79, v77);
                      if (*a2)
                        goto LABEL_379;
                    }
LABEL_537:
                    v268 = *a2;
                    v269 = a2[1];
                    *a2 = 0;
                    a2[1] = 0;
                    v270 = a2[3];
                    if (v270 && v269)
                      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v270 + 16))(v270, v268);
                    v76 = 0;
                    v136 = 1;
LABEL_261:
                    v137 = IPC::Decoder::decode<WebCore::CSSBoxType>((uint64_t *)a2);
                    if (*a2)
                    {
                      if (v136)
                        goto LABEL_379;
                      v138 = v137;
                      if (v137 <= 0xFFu)
                        goto LABEL_379;
                      v139 = WTF::fastMalloc((WTF *)0x20);
                      v71 = (WTF *)v139;
                      *(_QWORD *)(v139 + 8) = 0x100000001;
                      *(_BYTE *)(v139 + 16) = v138;
                      *(_QWORD *)v139 = off_1E34ADB78;
                      *(_QWORD *)(v139 + 24) = v76;
                      if (*a2)
                      {
LABEL_265:
                        v72 = 0;
                        goto LABEL_266;
                      }
                      *(_QWORD *)(v139 + 24) = 0;
                      if (v76)
                      {
                        if (v76[2] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 8))(v76);
                        else
                          --v76[2];
                      }
LABEL_487:
                      WTF::fastFree(v71, v83);
                      goto LABEL_488;
                    }
                    if (v76)
                      v238 = v136;
                    else
                      v238 = 1;
                    if ((v238 & 1) == 0)
                    {
                      if (v76[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 8))(v76);
                      else
                        --v76[2];
                    }
                    v230 = *a2;
                    v241 = a2[1];
                    *a2 = 0;
                    a2[1] = 0;
                    v232 = a2[3];
                    if (!v232 || !v241)
                      goto LABEL_488;
LABEL_482:
                    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v232 + 16))(v232, v230);
LABEL_483:
                    if (*a2)
                      goto LABEL_379;
                    goto LABEL_488;
                  }
LABEL_259:
                  if (!*a2)
                  {
                    if (v76)
                    {
                      if (v76[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 8))(v76);
                      else
                        --v76[2];
                    }
                    goto LABEL_537;
                  }
                  v136 = 0;
                  goto LABEL_261;
                }
              }
              else if (!v256)
              {
                goto LABEL_526;
              }
              if (!--v96)
              {
                v344[16] = 0;
                v263 = HIDWORD(v395);
                v264 = (int *)v395;
                if (DWORD2(v395) > HIDWORD(v395))
                {
                  v265 = (int *)v395;
                  if (HIDWORD(v395))
                  {
                    if (HIDWORD(v395) >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x196D56E10);
                    }
                    v266 = WTF::fastMalloc((WTF *)(8 * HIDWORD(v395)));
                    DWORD2(v395) = v263;
                    *(_QWORD *)&v395 = v266;
                    v265 = v264;
                    if ((int *)v266 != v264)
                    {
                      WTF::VectorMover<false,WebCore::Length>::move(v264, &v264[2 * v263], v266);
                      v265 = (int *)v395;
                    }
                  }
                  if (v264)
                  {
                    if (v265 == v264)
                    {
                      *(_QWORD *)&v395 = 0;
                      DWORD2(v395) = 0;
                    }
                    WTF::fastFree((WTF *)v264, v95);
                    v264 = (int *)v395;
                  }
                  else
                  {
                    v264 = v265;
                  }
                }
                *(_QWORD *)v344 = v264;
                v273 = *((_QWORD *)&v395 + 1);
                v395 = 0uLL;
                *(_QWORD *)&v344[8] = v273;
                goto LABEL_238;
              }
            }
          case 3u:
            if (v73 <= (unint64_t)&v74[-v67 + 1])
            {
              v251 = 0;
              v252 = 0;
              *a2 = 0;
              a2[1] = 0;
              v253 = a2[3];
              if (v253)
              {
                (*(void (**)(unint64_t))(*(_QWORD *)v253 + 16))(v253);
                v251 = 0;
                v280 = *a2;
                v281 = a2[1];
                v282 = a2[3];
                *a2 = 0;
                a2[1] = 0;
                v252 = 0;
                if (v282)
                {
                  if (v281)
                  {
                    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v282 + 16))(v282, v280);
                    v252 = *a2;
                    v251 = a2[1];
                  }
                }
              }
            }
            else
            {
              a2[2] = (unint64_t)(v74 + 2);
              v105 = v74[1];
              if (v105 < 2)
              {
                if (!v105)
                {
                  v118 = 0;
                  v330 = 0;
                  v117 = 1;
                  LOBYTE(v331) = 1;
                  goto LABEL_251;
                }
                IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a2, v344);
                v106 = *a2;
                if (*a2)
                {
                  if (!v344[16])
                    goto LABEL_379;
                  v296 = 0;
                  v107 = WTF::fastMalloc((WTF *)0x60);
                  *(_DWORD *)v107 = 1;
                  *(_QWORD *)(v107 + 8) = *(_QWORD *)v344;
                  v109 = *(_QWORD *)&v344[8];
                  *(_QWORD *)v344 = 0;
                  *(_QWORD *)&v344[8] = 0;
                  *(_QWORD *)(v107 + 16) = v109;
                  *(_DWORD *)(v107 + 88) = 0;
                  *(_QWORD *)&v395 = 0;
                  if ((_MergedGlobals_46 & 1) != 0)
                  {
                    v110 = dword_1ECE72000[0] + 1;
                  }
                  else
                  {
                    unk_1ECE72050 = 0u;
                    unk_1ECE72040 = 0u;
                    unk_1ECE72030 = 0u;
                    unk_1ECE72020 = 0u;
                    unk_1ECE72010 = 0u;
                    *(_OWORD *)dword_1ECE72000 = 0u;
                    v110 = 2;
                    _MergedGlobals_46 = 1;
                  }
                  dword_1ECE72000[0] = v110;
                  *((_QWORD *)&v395 + 1) = v107;
                  v111 = 1;
                  v396[0] = 1;
                  v297 = 0;
                  WTF::RefCounted<WebCore::SVGPathByteStream::Data>::deref(dword_1ECE72000, v108);
                  WTF::WeakPtrFactory<WebCore::SVGPathByteStream,WTF::SingleThreadWeakPtrImpl>::~WeakPtrFactory(&v296, v112);
                }
                else
                {
                  v111 = 0;
                  LOBYTE(v395) = 0;
                  v396[0] = 0;
                }
                if (v344[16])
                {
                  v113 = *(WTF **)v344;
                  if (*(_QWORD *)v344)
                  {
                    *(_QWORD *)v344 = 0;
                    *(_DWORD *)&v344[8] = 0;
                    WTF::fastFree(v113, v5);
                  }
                }
                if (!v106)
                {
                  v5 = (char *)*a2;
                  v271 = a2[1];
                  *a2 = 0;
                  a2[1] = 0;
                  v272 = a2[3];
                  if (v272)
                  {
                    if (v271)
                    {
                      (*(void (**)(unint64_t, char *))(*(_QWORD *)v272 + 16))(v272, v5);
                      v111 = v396[0];
                    }
                  }
                }
                if (v111)
                {
                  v114 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v114 = 0;
                  if ((_MergedGlobals_46 & 1) != 0)
                  {
                    v116 = dword_1ECE72000[0] + 1;
                  }
                  else
                  {
                    unk_1ECE72050 = 0u;
                    unk_1ECE72040 = 0u;
                    unk_1ECE72030 = 0u;
                    unk_1ECE72020 = 0u;
                    unk_1ECE72010 = 0u;
                    *(_OWORD *)dword_1ECE72000 = 0u;
                    v116 = 2;
                    _MergedGlobals_46 = 1;
                  }
                  dword_1ECE72000[0] = v116;
                  v114[1] = *((_QWORD *)&v395 + 1);
                  *((_QWORD *)&v395 + 1) = dword_1ECE72000;
                  v330 = v114;
                  v117 = 1;
                  LOBYTE(v331) = 1;
                  std::__optional_destruct_base<WebCore::SVGPathByteStream,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v395, v115);
                  v118 = 0;
                  goto LABEL_251;
                }
                LOBYTE(v330) = 0;
                LOBYTE(v331) = 0;
                std::__optional_destruct_base<WebCore::SVGPathByteStream,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v395, v5);
LABEL_249:
                v129 = *a2;
                v130 = a2[1];
                *a2 = 0;
                a2[1] = 0;
                v131 = a2[3];
                if (v131 && v130)
                  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v131 + 16))(v131, v129);
                v117 = 0;
                v118 = 1;
LABEL_251:
                v132 = IPC::Decoder::decode<float>(a2);
                v133 = IPC::Decoder::decode<WebCore::RotationDirection>(a2);
                v134 = *a2;
                if (*a2)
                {
                  if (v118 || (v132 & 0xFF00000000) == 0 || v133 <= 0xFFu)
                    goto LABEL_379;
                  WebCore::BasicShapePath::create();
                  v76 = *(_DWORD **)v344;
                  if (!(_BYTE)v331)
                  {
LABEL_258:
                    if (!v134)
                    {
                      v77 = *a2;
                      v267 = a2[1];
                      *a2 = 0;
                      a2[1] = 0;
                      v79 = a2[3];
                      if (v79 && v267)
                        goto LABEL_613;
                      goto LABEL_537;
                    }
                    goto LABEL_259;
                  }
                }
                else
                {
                  v76 = 0;
                  if (!v117)
                    goto LABEL_258;
                }
                v135 = (uint64_t)v330;
                v330 = 0;
                if (v135)
                  std::default_delete<WebCore::SVGPathByteStream>::operator()[abi:sn180100](v135, v5);
                goto LABEL_258;
              }
              v251 = v73;
              v252 = v67;
            }
            *a2 = 0;
            a2[1] = 0;
            v254 = a2[3];
            if (v254 && v251)
              (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v254 + 16))(v254, v252, v251);
            LOBYTE(v330) = 0;
            LOBYTE(v331) = 0;
            goto LABEL_249;
          default:
            IPC::Decoder::decode<WebCore::Length>((uint64_t)&v299, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::Length>((uint64_t)&v340, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::Length>((uint64_t)v338, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::Length>((uint64_t)v336, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::LengthSize>((uint64_t)v344, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::LengthSize>((uint64_t)&v395, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::LengthSize>((uint64_t)&v296, (uint64_t *)a2);
            IPC::Decoder::decode<WebCore::LengthSize>((uint64_t)&v330, (uint64_t *)a2);
            v121 = *a2;
            if (*a2)
            {
              if (!(_BYTE)v300 || !v343 || !v339 || !v337 || !v344[16] || !v396[0] || !v298 || !v335)
                goto LABEL_379;
              WebCore::BasicShapeInset::create();
              v76 = v329;
            }
            else
            {
              v76 = 0;
            }
            std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&v330);
            std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&v296);
            std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&v395);
            std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)v344);
            if (v337 && v336[4] == 11)
              WebCore::Length::deref((WebCore::Length *)v336);
            if (v339 && v338[4] == 11)
              WebCore::Length::deref((WebCore::Length *)v338);
            if (v343 && v341 == 11)
              WebCore::Length::deref((WebCore::Length *)&v340);
            if ((_BYTE)v300 && BYTE4(v299) == 11)
            {
              WebCore::Length::deref((WebCore::Length *)&v299);
              if (v121)
                goto LABEL_259;
            }
            else if (v121)
            {
              goto LABEL_259;
            }
            v77 = *a2;
            v122 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            v79 = a2[3];
            if (v79 && v122)
              goto LABEL_613;
            goto LABEL_537;
        }
      }
      v234 = v73;
      v235 = v67;
    }
    *a2 = 0;
    a2[1] = 0;
    v237 = a2[3];
    if (v237 && v234)
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v237 + 16))(v237, v235, v234);
    goto LABEL_537;
  }
  if (v64 == 2)
    v80 = v66 ^ 1;
  else
    v80 = 1;
  if ((v80 & 1) != 0)
  {
    if (v64 == 3)
      v84 = v66 ^ 1;
    else
      v84 = 1;
    if ((v84 & 1) != 0)
      goto LABEL_488;
    v85 = IPC::Decoder::decode<float>(a2);
    *(_WORD *)v344 = 0;
    IPC::Decoder::operator>><unsigned char>(a2, v344);
    if (v344[1])
      v86 = v344[0] > 4u;
    else
      v86 = 1;
    v87 = v86;
    v88 = a2[1];
    v283 = v87;
    if (v87 != 1)
    {
LABEL_142:
      v89 = *a2;
      v90 = a2[2] - *a2;
      if (v88 <= v90)
      {
        v244 = 0;
        v279 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v88 && v279)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v279 + 16))(v279);
          v244 = *a2;
          v88 = a2[1];
        }
        else
        {
          v88 = 0;
        }
      }
      else
      {
        v91 = (unsigned __int8 *)(v89 + v90);
        a2[2] = (unint64_t)(v91 + 1);
        if (v89)
        {
          if (*v91 < 2u)
          {
            v92 = 0;
LABEL_146:
            IPC::Decoder::decode<WebCore::LengthPoint>((uint64_t)v344, (uint64_t *)a2);
            if (!*a2)
            {
              std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)v344);
              v230 = *a2;
              v247 = a2[1];
              *a2 = 0;
              a2[1] = 0;
              v232 = a2[3];
              if (!v232 || !v247)
                goto LABEL_488;
              goto LABEL_482;
            }
            if ((v85 & 0xFF00000000) == 0 || v283 || v92 || !v344[16])
              goto LABEL_379;
            WebCore::RayPathOperation::create();
            v71 = (WTF *)v395;
            std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)v344);
            goto LABEL_100;
          }
LABEL_478:
          *a2 = 0;
          a2[1] = 0;
          v246 = a2[3];
          if (v246 && v88)
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v246 + 16))(v246, v89);
          v92 = 1;
          goto LABEL_146;
        }
        v244 = 0;
      }
LABEL_475:
      *a2 = 0;
      a2[1] = 0;
      v245 = a2[3];
      if (v245)
      {
        if (v88)
        {
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v245 + 16))(v245, v244);
          v89 = *a2;
          v88 = a2[1];
          goto LABEL_478;
        }
      }
      else
      {
        v88 = 0;
      }
      v89 = 0;
      goto LABEL_478;
    }
    v242 = *a2;
    *a2 = 0;
    a2[1] = 0;
    v243 = a2[3];
    if (v243)
    {
      if (v88)
      {
        (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v243 + 16))(v243, v242);
        v88 = a2[1];
        goto LABEL_142;
      }
    }
    else
    {
      v88 = 0;
    }
    v244 = 0;
    goto LABEL_475;
  }
  v81 = IPC::Decoder::decode<WebCore::CSSBoxType>((uint64_t *)a2);
  if (*a2)
  {
    v82 = v81;
    if (v81 <= 0xFFu)
      goto LABEL_379;
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *((_QWORD *)v71 + 1) = 0x200000001;
    *((_BYTE *)v71 + 16) = v82;
    *(_QWORD *)v71 = off_1E34ADBC0;
    if (*a2)
      goto LABEL_265;
    goto LABEL_487;
  }
  v239 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v240 = a2[3];
  if (v240 && v239)
  {
    (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v240 + 16))(v240, 0);
    goto LABEL_483;
  }
LABEL_488:
  v248 = *a2;
  v249 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v250 = a2[3];
  if (v250 && v249)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v250 + 16))(v250, v248);
  v71 = 0;
  v72 = 1;
LABEL_266:
  IPC::Decoder::decode<WebCore::Length>((uint64_t)&v340, (uint64_t *)a2);
  IPC::Decoder::decode<WebCore::LengthPoint>((uint64_t)&v330, (uint64_t *)a2);
  IPC::Decoder::decode<WebCore::LengthPoint>((uint64_t)&v299, (uint64_t *)a2);
  v140 = a2[1];
  v141 = *a2;
  v142 = a2[2] - *a2;
  if (v140 <= v142)
  {
    v187 = 0;
    v188 = 0;
    *a2 = 0;
    a2[1] = 0;
    v189 = a2[3];
    if (v189)
    {
      if (v140)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v189 + 16))(v189);
        v188 = *a2;
        v187 = a2[1];
      }
      else
      {
        v187 = 0;
        v188 = 0;
      }
    }
    goto LABEL_396;
  }
  v143 = (unsigned __int8 *)(v141 + v142);
  a2[2] = (unint64_t)(v143 + 1);
  if (!v141)
  {
    v187 = v140;
    v188 = 0;
LABEL_396:
    *a2 = 0;
    a2[1] = 0;
    v190 = a2[3];
    if (v190 && v187)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v190 + 16))(v190, v188, v187);
      v144 = 0;
      v141 = *a2;
      v140 = a2[1];
    }
    else
    {
      v140 = 0;
      v141 = 0;
      v144 = 0;
    }
    goto LABEL_398;
  }
  v144 = *v143;
  if (v144 < 2)
  {
    v145 = 0;
    v146 = 1;
    goto LABEL_270;
  }
LABEL_398:
  *a2 = 0;
  a2[1] = 0;
  v191 = a2[3];
  if (v191 && v140)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v191 + 16))(v191, v141);
  v146 = 0;
  v145 = 1;
LABEL_270:
  if (v144)
    v147 = v146;
  else
    v147 = 0;
  v148 = IPC::Decoder::decode<float>(a2);
  v149 = *a2;
  if (*a2)
  {
    if (v145 || (v148 & 0xFF00000000) == 0)
      goto LABEL_379;
    if (v147)
      v150 = 0x100000000;
    else
      v150 = 0;
    v151 = v150 & 0xFFFFFFFF00000000 | v148;
  }
  else
  {
    v151 = 0;
    v192 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v193 = a2[3];
    if (v193)
    {
      if (v192)
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v193 + 16))(v193, 0);
      v151 = 0;
    }
  }
  IPC::Decoder::decode<WebCore::FilterOperations>((uint64_t)&v395, (uint64_t *)a2);
  IPC::Decoder::decode<WebCore::FilterOperations>((uint64_t)&v296, (uint64_t *)a2);
  if (*a2)
  {
    if ((v3 & 0xFF00000000) == 0
      || v292
      || !v322
      || v29
      || !v313
      || !v310
      || !v308
      || !v306
      || v72
      || !v343
      || !v335
      || !v304
      || !v149
      || !v396[0]
      || !v298)
    {
      goto LABEL_379;
    }
    *(_OWORD *)&v344[21] = v393;
    *(_DWORD *)v344 = v3;
    *(_DWORD *)&v344[4] = v295;
    *(_DWORD *)&v344[8] = v293;
    *(_DWORD *)&v344[12] = v290;
    *(_DWORD *)&v344[16] = v294;
    v344[20] = v286;
    *(_OWORD *)&v344[37] = v394[0];
    *(_OWORD *)&v344[52] = *(_OWORD *)((char *)v394 + 15);
    v345 = v285;
    v346 = v284;
    v347 = v287;
    v349 = v328;
    v348 = v327;
    v350 = v288;
    v351 = v325;
    v352 = v326;
    v353 = v289;
    v354 = v323;
    v355 = v324;
    v356 = 0;
    v359 = 0;
    v357 = v315;
    v358 = v316;
    if (v315 - 2 >= 9)
    {
      v152 = (uint64_t)a1;
      if (v315 != 11)
        goto LABEL_303;
      v153 = v314;
      v314 = 0;
    }
    else
    {
      v359 = v317;
      v152 = (uint64_t)a1;
      if (v317)
      {
        v356 = v314;
        goto LABEL_303;
      }
      v153 = v314;
    }
    v356 = v153;
LABEL_303:
    v315 = 0;
    v360 = 0;
    v363 = 0;
    v361 = v319;
    v362 = v320;
    if (v319 - 2 >= 9)
    {
      if (v319 != 11)
        goto LABEL_310;
      v154 = v318;
      v318 = 0;
    }
    else
    {
      v363 = v321;
      if (v321)
      {
        v360 = v318;
        goto LABEL_310;
      }
      v154 = v318;
    }
    v360 = v154;
LABEL_310:
    v319 = 0;
    v364 = v27;
    v365 = v311;
    v155 = v312;
    v311 = 0;
    v312 = 0;
    v366 = v155;
    v156 = v309;
    v309 = 0;
    v157 = v307;
    v307 = 0;
    v367 = v156;
    v368 = v157;
    v158 = v305;
    v305 = 0;
    v369 = v158;
    v370 = v71;
    v371 = 0;
    v373 = 0;
    v372 = v341;
    if (v341 - 2 >= 9)
    {
      if (v341 != 11)
        goto LABEL_317;
      v159 = v340;
      v340 = 0;
    }
    else
    {
      v373 = v342;
      if (v342)
      {
        v371 = v340;
        goto LABEL_317;
      }
      v159 = v340;
    }
    v371 = v159;
LABEL_317:
    LOBYTE(v341) = 0;
    v374 = 0;
    v376 = 0;
    v375 = WORD2(v330);
    if (BYTE4(v330) - 2 >= 9)
    {
      if (BYTE4(v330) != 11)
        goto LABEL_324;
      v160 = (int)v330;
      LODWORD(v330) = 0;
    }
    else
    {
      v376 = BYTE6(v330);
      if (BYTE6(v330))
      {
        v374 = (int)v330;
        goto LABEL_324;
      }
      v160 = (int)v330;
    }
    v374 = v160;
LABEL_324:
    BYTE4(v330) = 0;
    v377 = 0;
    v380 = 0;
    v378 = v332;
    v379 = v333;
    if (v332 - 2 >= 9)
    {
      if (v332 != 11)
        goto LABEL_331;
      v161 = v331;
      v331 = 0;
    }
    else
    {
      v380 = v334;
      if (v334)
      {
        v377 = v331;
        goto LABEL_331;
      }
      v161 = v331;
    }
    v377 = v161;
LABEL_331:
    v332 = 0;
    v381 = 0;
    v383 = 0;
    v382 = WORD2(v299);
    if (BYTE4(v299) - 2 >= 9)
    {
      if (BYTE4(v299) != 11)
        goto LABEL_338;
      v162 = (int)v299;
      LODWORD(v299) = 0;
    }
    else
    {
      v383 = BYTE6(v299);
      if (BYTE6(v299))
      {
        v381 = (int)v299;
        goto LABEL_338;
      }
      v162 = (int)v299;
    }
    v381 = v162;
LABEL_338:
    BYTE4(v299) = 0;
    v384 = 0;
    v387 = 0;
    v385 = v301;
    v386 = v302;
    if (v301 - 2 >= 9)
    {
      if (v301 != 11)
        goto LABEL_345;
      v163 = v300;
      v300 = 0;
    }
    else
    {
      v387 = v303;
      if (v303)
      {
        v384 = v300;
LABEL_345:
        v301 = 0;
        v388 = v151;
        v164 = *((_QWORD *)&v395 + 1);
        v389 = v395;
        v395 = 0uLL;
        v390 = v164;
        v165 = v296;
        v296 = 0;
        v391 = v165;
        v166 = v297;
        v297 = 0;
        v392 = v166;
        *(_BYTE *)(WebCore::AcceleratedEffectValues::AcceleratedEffectValues(v152, (uint64_t)v344) + 248) = 1;
        WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v344, v167);
        v71 = 0;
LABEL_346:
        WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v296, v5);
        goto LABEL_347;
      }
      v163 = v300;
    }
    v384 = v163;
    goto LABEL_345;
  }
  *a1 = 0;
  a1[248] = 0;
  if (v298)
    goto LABEL_346;
LABEL_347:
  if (v396[0])
    WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v395, v5);
  std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&v299);
  std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&v330);
  if (v343 && v341 == 11)
    WebCore::Length::deref((WebCore::Length *)&v340);
  if (v71)
    v169 = v72;
  else
    v169 = 1;
  if ((v169 & 1) == 0)
  {
    if (*((_DWORD *)v71 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v71 + 8))(v71);
    else
      --*((_DWORD *)v71 + 2);
  }
  if (v306 && v305)
  {
    if (v305[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v305 + 8))();
    else
      --v305[2];
  }
  if (v308 && v307)
  {
    if (v307[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v307 + 8))();
    else
      --v307[2];
  }
  if (v310 && v309)
  {
    if (v309[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v309 + 8))();
    else
      --v309[2];
  }
  if (v313)
    WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v311, v168);
  return std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&v314);
}

void sub_196D56E1C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_DWORD *a27,char a28,_DWORD *a29,char a30,_DWORD *a31,char a32,int a33,__int16 a34,uint64_t a35,char a36,int a37,__int16 a38)
{
  uint64_t v38;
  void *v40;

  std::__optional_destruct_base<WebCore::SVGPathByteStream,false>::~__optional_destruct_base[abi:sn180100](v38 - 160, a2);
  if (a28 && a27)
  {
    if (a27[2] == 1)
      (*(void (**)(void))(*(_QWORD *)a27 + 8))();
    else
      --a27[2];
  }
  if (a30 && a29)
  {
    if (a29[2] == 1)
      (*(void (**)(void))(*(_QWORD *)a29 + 8))();
    else
      --a29[2];
  }
  if (a32 && a31)
  {
    if (a31[2] == 1)
      (*(void (**)(void))(*(_QWORD *)a31 + 8))();
    else
      --a31[2];
  }
  if (a36)
    WTF::Vector<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a34, v40);
  std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100]((WebCore::Length *)&a38);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::LengthPoint>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  int v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  int v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 v22;
  char v23;
  char v24;
  char v25;
  int v26;
  unsigned __int8 v27;
  char v28;
  char v29;
  char v30;

  IPC::Decoder::decode<WebCore::Length>((uint64_t)&v26, a2);
  result = IPC::Decoder::decode<WebCore::Length>((uint64_t)&v21, a2);
  v5 = *a2;
  if (*a2)
  {
    if (v30)
    {
      v6 = v27;
      v7 = v27 - 2;
      if (v7 >= 9)
      {
        v8 = 0;
        if (v27 == 11)
        {
          v9 = v26;
          v26 = 0;
        }
        else
        {
          v9 = 0;
        }
      }
      else
      {
        v8 = v29;
        if (v29)
          v8 = 1;
        v9 = v26;
      }
      v10 = v28;
      v27 = 0;
      if (v25)
      {
        v11 = v22;
        v12 = v22 - 2;
        if (v12 >= 9)
        {
          v13 = 0;
          if (v22 == 11)
          {
            v14 = v21;
            v21 = 0;
            result = 1;
          }
          else
          {
            result = 1;
            v14 = 0;
          }
        }
        else
        {
          v13 = v24;
          if (v24)
          {
            result = 0;
            v13 = 1;
          }
          else
          {
            result = 1;
          }
          v14 = v21;
        }
        v15 = v23;
        v22 = 0;
        if (v7 >= 9)
        {
          v8 = 0;
          if (v6 != 11)
            v9 = 0;
        }
        if (v12 >= 9)
        {
          v13 = 0;
          if (v11 != 11)
            v14 = 0;
        }
        *(_DWORD *)a1 = 0;
        *(_BYTE *)(a1 + 6) = 0;
        *(_BYTE *)(a1 + 4) = v6;
        *(_BYTE *)(a1 + 5) = v10;
        if (v6 <= 0xD)
        {
          v16 = 1 << v6;
          if ((v16 & 0x7FC) != 0)
          {
            *(_BYTE *)(a1 + 6) = v8;
LABEL_18:
            *(_DWORD *)a1 = v9;
            goto LABEL_21;
          }
          if ((v16 & 0x3003) == 0)
            goto LABEL_18;
          *(_DWORD *)a1 = 0;
        }
LABEL_21:
        *(_DWORD *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 14) = 0;
        *(_BYTE *)(a1 + 12) = v11;
        *(_BYTE *)(a1 + 13) = v15;
        if (v11 <= 0xD)
        {
          if (((1 << v11) & 0x7FC) != 0)
          {
            *(_BYTE *)(a1 + 14) = v13;
          }
          else if (((1 << v11) & 0x3003) != 0)
          {
            *(_DWORD *)(a1 + 8) = 0;
            goto LABEL_27;
          }
          *(_DWORD *)(a1 + 8) = v14;
        }
LABEL_27:
        *(_BYTE *)(a1 + 16) = 1;
        goto LABEL_28;
      }
    }
    __break(1u);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (v25 && v22 == 11)
  {
    v19 = v5;
    result = WebCore::Length::deref((WebCore::Length *)&v21);
    v5 = v19;
  }
LABEL_28:
  if (v30 && v27 == 11)
  {
    v20 = v5;
    result = WebCore::Length::deref((WebCore::Length *)&v26);
    if (v20)
      return result;
  }
  else if (v5)
  {
    return result;
  }
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v18)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v17);
  }
  return result;
}

void sub_196D574FC(_Unwind_Exception *a1)
{
  WebCore::Length *v1;

  std::__optional_destruct_base<WebCore::LengthSize,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::Length>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  int v23;
  unint64_t v24;
  unsigned __int8 *v25;
  int v26;
  unint64_t v27;
  unsigned __int8 *v28;
  int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unint64_t v33;
  unsigned __int8 *v34;
  int v35;
  unint64_t v36;
  unsigned __int8 *v37;
  int v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v41;
  unint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(void);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int8 v56;
  char v57;
  char v58;

  v4 = a2[1];
  v5 = *a2;
  v6 = a2[2] - *a2;
  if (v4 > v6)
  {
    v7 = (unsigned __int8 *)(v5 + v6);
    a2[2] = (uint64_t)(v7 + 1);
    if (!v5)
    {
LABEL_93:
      v44 = v4;
      goto LABEL_67;
    }
    LODWORD(v8) = *v7;
    if (v8 > 0xC)
      goto LABEL_4;
    if (v8 < 2)
    {
LABEL_71:
      result = WebCore::Length::Length();
      *(_DWORD *)a1 = 0;
      *(_BYTE *)(a1 + 6) = 0;
      *(_BYTE *)(a1 + 4) = v56;
      *(_BYTE *)(a1 + 5) = v57;
      if (v56 - 2 >= 9)
      {
        if (v56 != 11)
          goto LABEL_76;
      }
      else
      {
        *(_BYTE *)(a1 + 6) = v58;
        if (v58)
        {
          *(_DWORD *)a1 = v55;
LABEL_76:
          *(_BYTE *)(a1 + 8) = 1;
          return result;
        }
      }
      *(_DWORD *)a1 = v55;
      goto LABEL_76;
    }
    switch((_DWORD)v8)
    {
      case 2:
        IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v15;
        v16 = a2[1];
        v17 = *a2;
        v18 = a2[2] - *a2;
        if (v16 > v18)
        {
          v19 = (unsigned __int8 *)(v17 + v18);
          a2[2] = (uint64_t)(v19 + 1);
          if (v17)
          {
            if (*v19 < 2u)
            {
              if ((_BYTE)v8)
                goto LABEL_71;
              while (1)
              {
LABEL_53:
                while (1)
                {
                  __break(1u);
LABEL_54:
                  if ((_DWORD)v8 != 9)
                    break;
                  IPC::Decoder::decode<std::variant<float,int>>(a2);
                  LODWORD(v8) = v38;
                  v16 = a2[1];
                  v17 = *a2;
                  v39 = a2[2] - *a2;
                  if (v16 <= v39)
                    goto LABEL_78;
                  v40 = (unsigned __int8 *)(v17 + v39);
                  a2[2] = (uint64_t)(v40 + 1);
                  if (!v17)
                    goto LABEL_94;
                  if (*v40 >= 2u)
                    goto LABEL_80;
                  if ((_BYTE)v8)
                    goto LABEL_71;
                }
                if ((_DWORD)v8 != 10)
                  goto LABEL_71;
                IPC::Decoder::decode<std::variant<float,int>>(a2);
                LODWORD(v8) = v41;
                v16 = a2[1];
                v17 = *a2;
                v42 = a2[2] - *a2;
                if (v16 <= v42)
                  goto LABEL_78;
                v43 = (unsigned __int8 *)(v17 + v42);
                a2[2] = (uint64_t)(v43 + 1);
                if (!v17)
                  goto LABEL_94;
                if (*v43 >= 2u)
                  break;
                if ((_BYTE)v8)
                  goto LABEL_71;
              }
            }
            goto LABEL_80;
          }
          break;
        }
LABEL_78:
        v48 = 0;
        v49 = 0;
        *a2 = 0;
        a2[1] = 0;
        v50 = a2[3];
        if (v50)
        {
          if (v16)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
            v49 = *a2;
            v48 = a2[1];
          }
          else
          {
            v48 = 0;
            v49 = 0;
          }
        }
        goto LABEL_79;
      case 3:
        IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v20;
        v16 = a2[1];
        v17 = *a2;
        v21 = a2[2] - *a2;
        if (v16 <= v21)
          goto LABEL_78;
        v22 = (unsigned __int8 *)(v17 + v21);
        a2[2] = (uint64_t)(v22 + 1);
        if (v17)
        {
          if (*v22 < 2u)
          {
            if (!(_BYTE)v8)
              goto LABEL_53;
            goto LABEL_71;
          }
LABEL_80:
          *a2 = 0;
          a2[1] = 0;
          v52 = a2[3];
          if (!v52 || !v16)
            goto LABEL_4;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 16))(v52, v17);
          if (!*a2)
          {
            v53 = a2[3];
            v54 = a2[1];
            *a2 = 0;
            a2[1] = 0;
            if (v53 && v54)
            {
              v47 = *(void (**)(void))(*(_QWORD *)v53 + 16);
              goto LABEL_70;
            }
            goto LABEL_4;
          }
          __break(1u);
          goto LABEL_93;
        }
        break;
      case 4:
        IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v23;
        v16 = a2[1];
        v17 = *a2;
        v24 = a2[2] - *a2;
        if (v16 <= v24)
          goto LABEL_78;
        v25 = (unsigned __int8 *)(v17 + v24);
        a2[2] = (uint64_t)(v25 + 1);
        if (v17)
        {
          if (*v25 < 2u)
          {
            if (!(_BYTE)v8)
              goto LABEL_53;
            goto LABEL_71;
          }
          goto LABEL_80;
        }
        break;
      case 5:
        IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v26;
        v16 = a2[1];
        v17 = *a2;
        v27 = a2[2] - *a2;
        if (v16 <= v27)
          goto LABEL_78;
        v28 = (unsigned __int8 *)(v17 + v27);
        a2[2] = (uint64_t)(v28 + 1);
        if (v17)
        {
          if (*v28 < 2u)
          {
            if (!(_BYTE)v8)
              goto LABEL_53;
            goto LABEL_71;
          }
          goto LABEL_80;
        }
        break;
      case 6:
        IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v29;
        v16 = a2[1];
        v17 = *a2;
        v30 = a2[2] - *a2;
        if (v16 <= v30)
          goto LABEL_78;
        v31 = (unsigned __int8 *)(v17 + v30);
        a2[2] = (uint64_t)(v31 + 1);
        if (v17)
        {
          if (*v31 < 2u)
          {
            if (!(_BYTE)v8)
              goto LABEL_53;
            goto LABEL_71;
          }
          goto LABEL_80;
        }
        break;
      case 7:
        IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v32;
        v16 = a2[1];
        v17 = *a2;
        v33 = a2[2] - *a2;
        if (v16 <= v33)
          goto LABEL_78;
        v34 = (unsigned __int8 *)(v17 + v33);
        a2[2] = (uint64_t)(v34 + 1);
        if (v17)
        {
          if (*v34 < 2u)
          {
            if (!(_BYTE)v8)
              goto LABEL_53;
            goto LABEL_71;
          }
          goto LABEL_80;
        }
        break;
      case 8:
        IPC::Decoder::decode<std::variant<float,int>>(a2);
        LODWORD(v8) = v35;
        v16 = a2[1];
        v17 = *a2;
        v36 = a2[2] - *a2;
        if (v16 <= v36)
          goto LABEL_78;
        v37 = (unsigned __int8 *)(v17 + v36);
        a2[2] = (uint64_t)(v37 + 1);
        if (v17)
        {
          if (*v37 < 2u)
          {
            if (!(_BYTE)v8)
              goto LABEL_53;
            goto LABEL_71;
          }
          goto LABEL_80;
        }
        break;
      default:
        goto LABEL_54;
    }
LABEL_94:
    v48 = v16;
    v49 = v17;
LABEL_79:
    v16 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v51 = a2[3];
    if (v51)
    {
      if (v48)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v49, v48);
        v17 = *a2;
        v16 = a2[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_80;
  }
  v44 = 0;
  *a2 = 0;
  a2[1] = 0;
  v45 = a2[3];
  if (v45)
  {
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v45 + 16))(v45, v5, v4);
      v44 = a2[1];
    }
    else
    {
      v44 = 0;
    }
  }
LABEL_67:
  *a2 = 0;
  a2[1] = 0;
  v46 = a2[3];
  if (v46 && v44)
  {
    v47 = *(void (**)(void))(*(_QWORD *)v46 + 16);
LABEL_70:
    v47();
  }
LABEL_4:
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v11 = a2[3];
  if (v11)
  {
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
      v8 = *a2;
      if (*a2)
        goto LABEL_53;
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v12 = *a2;
  v13 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v13)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v12);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::RefPtr<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>>(uint64_t result, uint64_t *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = (_BYTE *)result;
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v10 = 0;
    v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v11 = *a2;
        v10 = a2[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_10;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v10 = v6;
    v11 = 0;
LABEL_10:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_11;
  }
  v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v5);
    *v3 = 0;
    v3[8] = 0;
    goto LABEL_13;
  }
  if (!v9)
  {
    *(_QWORD *)result = 0;
    goto LABEL_8;
  }
  result = IPC::ArgumentCoder<WebCore::TransformOperation,void>::decode((uint64_t)&v17, a2);
  *v3 = 0;
  v3[8] = 0;
  if (v18)
  {
    *(_QWORD *)v3 = v17;
LABEL_8:
    v3[8] = 1;
    return result;
  }
LABEL_13:
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v16)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::FilterOperations>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  void *v23;
  uint64_t v24;
  void *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if ((_BYTE)v5)
  {
    v6 = v4;
    v48 = 0;
    v49 = 0;
    if (v4 < 0x20000)
    {
      if (v4)
      {
        v7 = 0;
        LODWORD(v49) = v4;
        v48 = WTF::fastMalloc((WTF *)(8 * v4));
        while (1)
        {
          IPC::Decoder::decode<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>(&v46, a2);
          if (!v47)
            goto LABEL_36;
          v8 = HIDWORD(v49);
          if (HIDWORD(v49) != (_DWORD)v49)
            break;
          v9 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)&v46);
          v10 = HIDWORD(v49);
          v11 = HIDWORD(v49) + 1;
          v12 = v48;
          v13 = *v9;
          *v9 = 0;
          *(_QWORD *)(v12 + 8 * v10) = v13;
          HIDWORD(v49) = v11;
          if (v47)
            goto LABEL_10;
LABEL_15:
          if (++v7 == v6)
          {
            v19 = v48;
            v20 = v49;
            goto LABEL_19;
          }
        }
        v14 = v46;
        v46 = 0;
        *(_QWORD *)(v48 + 8 * HIDWORD(v49)) = v14;
        HIDWORD(v49) = v8 + 1;
LABEL_10:
        v15 = v46;
        v46 = 0;
        if (v15)
        {
          v16 = v15 + 2;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            atomic_store(1u, v15 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
          }
        }
        goto LABEL_15;
      }
      v19 = 0;
      v20 = 0;
LABEL_19:
      v48 = 0;
      v49 = 0;
      v43 = v19;
      v44 = v20;
LABEL_20:
      v21 = 1;
      v45 = 1;
      result = WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v5);
      if (*a2)
      {
        WebCore::FilterOperations::FilterOperations();
        *(_QWORD *)a1 = v48;
        v24 = v49;
        v48 = 0;
        v49 = 0;
        *(_QWORD *)(a1 + 8) = v24;
        *(_BYTE *)(a1 + 16) = 1;
        result = WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v25);
        v26 = 0;
        if (!v45)
        {
LABEL_41:
          if (!v26)
            return result;
          goto LABEL_46;
        }
LABEL_40:
        result = WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, v23);
        goto LABEL_41;
      }
LABEL_39:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 0;
      v26 = 1;
      if (!v21)
        goto LABEL_41;
      goto LABEL_40;
    }
    v27 = 0;
    while (1)
    {
      IPC::Decoder::decode<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>(&v46, a2);
      if (!v47)
      {
LABEL_36:
        LOBYTE(v43) = 0;
        v45 = 0;
        WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v5);
        goto LABEL_37;
      }
      v28 = HIDWORD(v49);
      if (HIDWORD(v49) != (_DWORD)v49)
        break;
      v29 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)&v46);
      v30 = HIDWORD(v49);
      v31 = HIDWORD(v49) + 1;
      v32 = v48;
      v33 = *v29;
      *v29 = 0;
      *(_QWORD *)(v32 + 8 * v30) = v33;
      HIDWORD(v49) = v31;
      if (v47)
        goto LABEL_29;
LABEL_34:
      if (++v27 == v6)
      {
        WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v48, HIDWORD(v49));
        v43 = v48;
        v42 = v49;
        v48 = 0;
        v49 = 0;
        v44 = v42;
        goto LABEL_20;
      }
    }
    v34 = v46;
    v46 = 0;
    *(_QWORD *)(v48 + 8 * HIDWORD(v49)) = v34;
    HIDWORD(v49) = v28 + 1;
LABEL_29:
    v35 = v46;
    v46 = 0;
    if (v35)
    {
      v36 = v35 + 2;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v35 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
      }
    }
    goto LABEL_34;
  }
  LOBYTE(v43) = 0;
  v45 = 0;
LABEL_37:
  v23 = (void *)*a2;
  v39 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (!result
    || !v39
    || (result = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)result + 16))(result, v23), !*a2))
  {
    v21 = 0;
    goto LABEL_39;
  }
  __break(1u);
LABEL_46:
  v40 = *a2;
  v41 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v41)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v40);
  }
  return result;
}

void sub_196D57FD8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, char a8, ...)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  va_list va;

  va_start(va, a8);
  if (a8 && a7)
  {
    v9 = a7 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, a7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a7 + 8))(a7);
    }
  }
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

WTF::RunLoop *WebKit::EventDispatcher::didReceiveMessage(WTF::RunLoop *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unsigned __int8 **v3;
  int v5;
  WTF::RunLoop *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  WTF *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  _BYTE v26[24];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 30)
    return (WTF::RunLoop *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,std::optional<unsigned int>>>(&v25, (uint64_t *)a3);
  v6 = this;
  if (v5 == 31)
  {
    v3 = a2;
    v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    if (v13)
    {
      v9 = v12;
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, (uint64_t)&v23);
      if (v24)
      {
        IPC::ArgumentCoder<WebKit::WebTouchEvent,void>::decode((uint64_t *)a3, (uint64_t)&v35);
        if (!(_BYTE)v40)
          goto LABEL_22;
        goto LABEL_13;
      }
    }
LABEL_23:
    v21 = *(_QWORD *)a3;
    v22 = *((_QWORD *)a3 + 1);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    this = (WTF::RunLoop *)*((_QWORD *)a3 + 3);
    if (this)
    {
      if (v22)
        return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *, uint64_t))(*(_QWORD *)this + 16))(this, v21);
    }
    return this;
  }
  if (v5 != 32)
    return this;
  v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
  if (!v8)
    goto LABEL_23;
  v9 = v7;
  IPC::Decoder::decode<WebKit::WebWheelEvent>((uint64_t *)a3, (uint64_t)&v35);
  if (!v42)
    goto LABEL_23;
  v10 = IPC::Decoder::decode<WebCore::RectEdges<BOOL>>((uint64_t *)a3);
  if (!BYTE4(v10))
    goto LABEL_23;
  if (v42)
  {
    v25 = v9;
    v30 = v39;
    v31 = v40;
    v32 = v41;
    *(_OWORD *)&v26[8] = v35;
    v27 = v36;
    v28 = v37;
    v29 = v38;
    v33 = v10;
    v34 = 1;
    return (WTF::RunLoop *)WebKit::EventDispatcher::internalWheelEvent(v6, v9, (__int128 *)&v26[8], v11, 0);
  }
  do
  {
    __break(1u);
LABEL_22:
    v18 = *(_QWORD *)a3;
    v19 = *((_QWORD *)a3 + 1);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v20 = *((_QWORD *)a3 + 3);
    if (!v20)
      goto LABEL_23;
    if (!v19)
      goto LABEL_23;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18);
    if (!(_BYTE)v40)
      goto LABEL_23;
LABEL_13:
    ;
  }
  while (!v24);
  v25 = v9;
  *(_OWORD *)v26 = v23;
  v27 = v35;
  v28 = v36;
  v14 = (WTF *)v37;
  v29 = v37;
  v30 = v38;
  LODWORD(v31) = v39;
  LOBYTE(v32) = 1;
  this = (WTF::RunLoop *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
  if (!(_BYTE)v15)
  {
LABEL_19:
    if (v14)
    {
      *(_QWORD *)&v29 = 0;
      DWORD2(v29) = 0;
      return (WTF::RunLoop *)WTF::fastFree(v14, v15);
    }
    return this;
  }
  *(_QWORD *)&v35 = this;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v35 + 1, v3);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = off_1E34AD068;
  v16[1] = v35;
  v17 = *((_QWORD *)&v35 + 1);
  *((_QWORD *)&v35 + 1) = 0;
  v16[2] = v17;
  *(_QWORD *)&v23 = v16;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v35 + 1);
  WebKit::EventDispatcher::touchEvent((uint64_t)v6, v9, *(uint64_t *)v26, *(uint64_t *)&v26[8], (uint64_t *)&v27, (uint64_t *)&v23);
  this = (WTF::RunLoop *)v23;
  *(_QWORD *)&v23 = 0;
  if (this)
    this = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)this + 8))(this);
  if ((_BYTE)v32)
  {
    v14 = (WTF *)v29;
    goto LABEL_19;
  }
  return this;
}

void sub_196D58484(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPage::setInjectedBundleEditorClient(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v3 = off_1E34EA238;
  }
  result = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebKit::WebChromeClient::applyLinkDecorationFilteringWithResult(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  WebKit::WebPage::applyLinkDecorationFilteringWithResult((_QWORD *)v8, a2, a3, a4);
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
}

void WebKit::WebPage::applyLinkDecorationFilteringWithResult(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v12;
  unsigned int v13;
  uint64_t active;
  int v15;
  _WORD *v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  WTF::StringImpl *v30;
  NSObject *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  __int128 v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  NSObject *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  int v42;
  uint8_t v43[8];
  __int128 v44;
  __int128 v45;
  _BYTE buf[12];
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v6 = a1[304];
  if (!v6 || !*(_DWORD *)(v6 - 12))
  {
    v38 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v43 = 0;
      _os_log_error_impl(&dword_196BCC000, v38, OS_LOG_TYPE_ERROR, "Unable to filter tracking query parameters (missing data)", v43, 2u);
    }
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a1[11] + 24);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if (!*(_BYTE *)(v9 + 144))
      {
        v12 = (unsigned int *)(v9 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        active = WebCore::FrameLoader::activeDocumentLoader(*(WebCore::FrameLoader **)(v9 + 280));
        if (active)
        {
          v15 = *(_DWORD *)(active + 24);
          *(_DWORD *)(active + 24) = v15 + 1;
          if (a3 == 1)
          {
            v16 = (_WORD *)(active + 3516);
            if (!*(_BYTE *)(active + 3518))
              v16 = (_WORD *)(active + 3514);
          }
          else
          {
            v16 = (_WORD *)(active + 3514);
          }
          if ((*v16 & 0x100) != 0)
          {
LABEL_30:
            if (v15)
              *(_DWORD *)(active + 24) = v15;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)active + 24))(active);
LABEL_32:
            if (*(_DWORD *)(a2 + 36) > *(_DWORD *)(a2 + 32))
            {
              v20 = *(_DWORD **)a2;
              if (*(_QWORD *)a2)
                *v20 += 2;
              *(_QWORD *)v43 = v20;
              v44 = *(_OWORD *)(a2 + 8);
              v45 = *(_OWORD *)(a2 + 24);
              v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v21 = off_1E34D6E50;
              v21[1] = a1;
              v21[2] = a2;
              *(_QWORD *)buf = v21;
              WTF::removeQueryParameters();
              v23 = *(_QWORD *)buf;
              *(_QWORD *)buf = 0;
              if (v23)
                (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
              if (a3 && v42)
              {
                if (a3 == 1)
                {
                  v24 = (*(uint64_t (**)(_QWORD *))(a1[4] + 56))(a1 + 4);
                  v25 = WTF::fastMalloc((WTF *)0x240);
                  *(_WORD *)v25 = 1860;
                  *(_QWORD *)(v25 + 8) = v24;
                  *(_QWORD *)(v25 + 528) = v25 + 16;
                  *(_QWORD *)(v25 + 536) = v25 + 16;
                  *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
                  *(_OWORD *)(v25 + 560) = 0u;
                  IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
                  *(_QWORD *)buf = v25;
                  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)a2);
                  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)v43);
                  (*(void (**)(_QWORD *, _BYTE *, _QWORD))(a1[4] + 32))(a1 + 4, buf, 0);
                  v27 = *(IPC::Encoder **)buf;
                  *(_QWORD *)buf = 0;
                  if (v27)
                  {
                    IPC::Encoder::~Encoder(v27, v26);
                    WTF::fastFree(v28, v29);
                  }
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v39 = *(WTF::StringImpl **)buf;
                WTF::makeStringByJoining();
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, v30);
                  else
                    *(_DWORD *)v39 -= 2;
                }
                v31 = qword_1ECE71758;
                if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_DEFAULT))
                {
                  v32 = a1[5];
                  WTF::String::utf8();
                  *(_DWORD *)buf = 134218498;
                  *(_QWORD *)&buf[4] = a1;
                  v47 = 2048;
                  v48 = v32;
                  v49 = 2080;
                  v50 = 0;
                  _os_log_impl(&dword_196BCC000, v31, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu] WebPage::Blocked known tracking query parameters: %s", buf, 0x20u);
                }
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, v22);
                  else
                    *(_DWORD *)v40 -= 2;
                }
              }
              v33 = *(WTF::StringImpl **)v43;
              if (*(_QWORD *)v43)
                **(_DWORD **)v43 += 2;
              *(_QWORD *)a4 = v33;
              v34 = v45;
              *(_OWORD *)(a4 + 8) = v44;
              *(_OWORD *)(a4 + 24) = v34;
              *(_BYTE *)(a4 + 40) = 1;
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v22);
              v36 = *(WTF::StringImpl **)v43;
              *(_QWORD *)v43 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, v35);
                else
                  *(_DWORD *)v36 -= 2;
              }
LABEL_63:
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
              return;
            }
LABEL_60:
            v37 = *(_DWORD **)a2;
            if (*(_QWORD *)a2)
              *v37 += 2;
            *(_QWORD *)a4 = v37;
            *(_OWORD *)(a4 + 8) = *(_OWORD *)(a2 + 8);
            *(_OWORD *)(a4 + 24) = *(_OWORD *)(a2 + 24);
            *(_BYTE *)(a4 + 40) = 0;
            goto LABEL_63;
          }
          v17 = *(_QWORD *)(*(_QWORD *)(a1[6] + 112) + 680);
          if (v15)
          {
            *(_DWORD *)(active + 24) = v15;
            if ((v17 & 4) != 0)
              goto LABEL_32;
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)active + 24))(active);
            if ((v17 & 4) != 0)
              goto LABEL_32;
          }
        }
        active = *(_QWORD *)(*(_QWORD *)(v9 + 280) + 104);
        if (!active)
          goto LABEL_60;
        v15 = *(_DWORD *)(active + 24);
        *(_DWORD *)(active + 24) = v15 + 1;
        if (a3 == 1)
        {
          v18 = (_WORD *)(active + 3516);
          if (!*(_BYTE *)(active + 3518))
            v18 = (_WORD *)(active + 3514);
        }
        else
        {
          v18 = (_WORD *)(active + 3514);
        }
        if ((*v18 & 0x100) == 0)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(a1[6] + 112) + 680);
          if (v15)
          {
            *(_DWORD *)(active + 24) = v15;
            if ((v19 & 4) == 0)
              goto LABEL_60;
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)active + 24))(active);
            if ((v19 & 4) == 0)
              goto LABEL_60;
          }
          goto LABEL_32;
        }
        goto LABEL_30;
      }
    }
  }
LABEL_6:
  v10 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v10 += 2;
  *(_QWORD *)a4 = v10;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a4 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a4 + 40) = 0;
}

void sub_196D58A9C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, char a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, IPC::Encoder *a19)
{
  unsigned int *v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  v22 = a13;
  a13 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v19);
  _Unwind_Resume(a1);
}

void sub_196D58D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, IPC::Encoder *a14)
{
  const void *v14;
  const void *v15;

  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  _Unwind_Resume(exception_object);
}

void WebKit::saveCookies(void *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;

  v3 = *a2;
  *a2 = 0;
  v4 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v4 = MEMORY[0x1E0C809A0];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke;
  v4[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
  v4[4] = v3;
  objc_msgSend(a1, "_saveCookies:", v4);
  _Block_release(v4);
}

void sub_196D58E58(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_196D58E6C()
{
  uint64_t v0;

  if (v0)
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x196D58E64);
}

void WebKit::WebsiteDataStoreConfiguration::~WebsiteDataStoreConfiguration(WebKit::WebsiteDataStoreConfiguration *this, void *a2)
{
  WTF *v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  *(_QWORD *)this = &off_1E34DF2E8;
  v3 = (WTF *)*((_QWORD *)this + 65);
  if (v3)
  {
    *((_QWORD *)this + 65) = 0;
    *((_DWORD *)this + 132) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (const void *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  WebKit::WebsiteDataStoreConfiguration::Directories::~Directories((WebKit::WebsiteDataStoreConfiguration *)((char *)this + 64), (WTF::StringImpl *)a2);
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
}

{
  WebKit::WebsiteDataStoreConfiguration::~WebsiteDataStoreConfiguration(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void sub_196D5917C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::LegacyDownloadClient::LegacyDownloadClient(uint64_t a1, void *a2)
{
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34C7340;
  *(_QWORD *)(a1 + 16) = 0;
  objc_initWeak((id *)(a1 + 16), a2);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFFE | objc_opt_respondsToSelector() & 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v3 = 2;
  else
    v3 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFFD | v3;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v4 = 4;
  else
    v4 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFFB | v4;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v5 = 8;
  else
    v5 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFF7 | v5;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v6 = 16;
  else
    v6 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFEF | v6;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v7 = 32;
  else
    v7 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFDF | v7;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v8 = 64;
  else
    v8 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFFBF | v8;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v9 = 128;
  else
    v9 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFF7F | v9;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v10 = 256;
  else
    v10 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFEFF | v10;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v11 = 512;
  else
    v11 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFDFF | v11;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v12 = 1024;
  else
    v12 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xFBFF | v12;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v13 = 2048;
  else
    v13 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xF7FF | v13;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v14 = 4096;
  else
    v14 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xEFFF | v14;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v15 = 0x2000;
  else
    v15 = 0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xDFFF | v15;
  return a1;
}

void sub_196D59438(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

unint64_t IPC::Decoder::decode<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>>(uint64_t a1, uint64_t *a2)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  char v7;
  BOOL v8;
  int v9;
  void *v10;
  unint64_t result;
  void *v12;
  unint64_t v13;
  WTF *v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  int v35;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  _QWORD v43[2];
  _QWORD v44[6];
  WTF *v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  void *v55;

  LOWORD(v42) = 0;
  IPC::Decoder::operator>><unsigned char>(a2, &v42);
  v7 = (char)v42;
  if (BYTE1(v42))
    v8 = v42 > 2u;
  else
    v8 = 1;
  v9 = v8;
  if (v9 == 1)
    goto LABEL_51;
  while (1)
  {
    IPC::Decoder::decode<WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v51, a2);
    IPC::Decoder::decode<WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v48, a2);
    IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((unint64_t *)a2, v10, (uint64_t)&v45);
    result = IPC::Decoder::decode<unsigned long long>(a2);
    if (!(_BYTE)v12)
      break;
    v13 = result;
    v42 = 0;
    v43[0] = 0;
    if (result >= 0x20000)
    {
      while (1)
      {
        v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
        v54 = v26;
        v55 = v12;
        if (!(_BYTE)v12)
          goto LABEL_34;
        if (HIDWORD(v43[0]) == LODWORD(v43[0]))
        {
          v24 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v42, HIDWORD(v43[0]) + 1, (unint64_t)&v54);
          *((_QWORD *)v42 + HIDWORD(v43[0])) = *v24;
        }
        else
        {
          *((_QWORD *)v42 + HIDWORD(v43[0])) = v26;
        }
        v25 = ++HIDWORD(v43[0]);
        if (!--v13)
        {
          result = (unint64_t)v42;
          if (LODWORD(v43[0]) > v25)
          {
            v34 = v42;
            v41 = v42;
            if ((_DWORD)v25)
            {
              v35 = v25;
              if (v25 >> 29)
              {
                __break(0xC471u);
                return result;
              }
              v40 = 8 * v25;
              v36 = (WTF *)WTF::fastMalloc((WTF *)(8 * v25));
              LODWORD(v43[0]) = v35;
              v42 = v36;
              result = (unint64_t)v41;
              v34 = v41;
              if (v36 != v41)
              {
                v37 = v41;
                v38 = v40;
                do
                {
                  v39 = *(_QWORD *)v37;
                  v37 = (WTF *)((char *)v37 + 8);
                  *(_QWORD *)v36 = v39;
                  v36 = (WTF *)((char *)v36 + 8);
                  v38 -= 8;
                }
                while (v38);
                result = (unint64_t)v41;
                v34 = v42;
              }
            }
            if (result)
            {
              if (v34 == (WTF *)result)
              {
                v42 = 0;
                LODWORD(v43[0]) = 0;
              }
              WTF::fastFree(v41, v12);
              result = (unint64_t)v42;
            }
            else
            {
              result = (unint64_t)v34;
            }
          }
          v18 = v43[0];
          v17 = HIDWORD(v43[0]);
LABEL_18:
          if (!*a2)
          {
            *(_BYTE *)a1 = 0;
            *(_BYTE *)(a1 + 72) = 0;
            if (result)
              result = WTF::fastFree((WTF *)result, v12);
            goto LABEL_38;
          }
          goto LABEL_23;
        }
      }
    }
    if (result)
    {
      v14 = (WTF *)WTF::fastMalloc((WTF *)(8 * result));
      LODWORD(v43[0]) = v13;
      v42 = v14;
      while (1)
      {
        v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
        v54 = v15;
        v55 = v12;
        if (!(_BYTE)v12)
          break;
        if (HIDWORD(v43[0]) == LODWORD(v43[0]))
        {
          v16 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v42, HIDWORD(v43[0]) + 1, (unint64_t)&v54);
          *((_QWORD *)v42 + HIDWORD(v43[0])) = *v16;
        }
        else
        {
          *((_QWORD *)v42 + HIDWORD(v43[0])) = v15;
        }
        v17 = ++HIDWORD(v43[0]);
        if (!--v13)
        {
          result = (unint64_t)v42;
          v18 = v43[0];
          goto LABEL_18;
        }
      }
LABEL_34:
      v27 = v42;
      if (v42)
      {
        v42 = 0;
        LODWORD(v43[0]) = 0;
        WTF::fastFree(v27, v12);
      }
      break;
    }
    if (!*a2)
      goto LABEL_37;
    result = 0;
    v18 = 0;
    v17 = 0;
LABEL_23:
    v19 = 0;
    if (!v9)
      goto LABEL_24;
LABEL_50:
    __break(1u);
LABEL_51:
    v29 = *a2;
    v30 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31 && v30)
      (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128))(*(_QWORD *)v31 + 16))(v31, v29, v4, v5, v6);
    v7 = 0;
  }
  v12 = (void *)*a2;
  v28 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v28)
    {
      result = (*(uint64_t (**)(unint64_t, void *))(*(_QWORD *)result + 16))(result, v12);
      if (*a2)
      {
        result = 0;
        v19 = 1;
        if (v9)
          goto LABEL_50;
LABEL_24:
        LOBYTE(v42) = v7;
        if (v53)
        {
          v43[1] = 0;
          v20 = v51;
          v4.n128_u64[0] = v52;
          v51 = 0;
          v52 = 0;
          if (v50)
          {
            v21 = v48;
            v5.n128_u64[0] = v49;
            v48 = 0;
            v49 = 0;
            if (v47)
            {
              v22 = v45;
              v6.n128_u64[0] = v46;
              v45 = 0;
              v46 = 0;
              if (!v19)
              {
                *(_BYTE *)a1 = v7;
                *(_QWORD *)(a1 + 8) = v20;
                *(_QWORD *)(a1 + 16) = v4.n128_u64[0];
                v43[0] = 0;
                v44[0] = 0;
                *(_QWORD *)(a1 + 24) = v21;
                v44[1] = 0;
                *(_QWORD *)(a1 + 32) = v5.n128_u64[0];
                v44[2] = 0;
                *(_QWORD *)(a1 + 40) = v22;
                v44[3] = 0;
                *(_QWORD *)(a1 + 48) = v6.n128_u64[0];
                v44[4] = 0;
                *(_QWORD *)(a1 + 56) = result;
                v44[5] = 0;
                *(_DWORD *)(a1 + 64) = v18;
                *(_DWORD *)(a1 + 68) = v17;
                *(_BYTE *)(a1 + 72) = 1;
                WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v12);
                result = WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v23);
                goto LABEL_38;
              }
            }
          }
        }
        goto LABEL_50;
      }
    }
  }
LABEL_37:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 72) = 0;
LABEL_38:
  if (v47)
  {
    result = (unint64_t)v45;
    if (v45)
    {
      v45 = 0;
      LODWORD(v46) = 0;
      result = WTF::fastFree((WTF *)result, v12);
    }
  }
  if (v50)
    result = WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v12);
  if (v53)
    result = WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v12);
  if (!*(_BYTE *)(a1 + 72))
  {
    v32 = *a2;
    v33 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
    {
      if (v33)
        return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v32);
    }
  }
  return result;
}

void sub_196D59848(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21,int a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::__optional_destruct_base<WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>,false>::~__optional_destruct_base[abi:sn180100](v29, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;
  char *v7;
  __int128 v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  WTF *v22;
  WTF *v23;
  unsigned int v24;
  WTF *v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  WTF *v29;
  int v30;
  int v31;
  char v32;
  WTF *v33;
  uint64_t v34;

  v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (!(_BYTE)v5)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_28:
    v17 = *a2;
    v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
      v20 = v18 == 0;
    else
      v20 = 1;
    if (!v20)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
    return;
  }
  v6 = v4;
  v33 = 0;
  v34 = 0;
  if (v4 >= 0x6666)
  {
    do
    {
      IPC::Decoder::decode<WebCore::SnapOffset<float>>((uint64_t)&v27, a2);
      if (!v32)
        goto LABEL_27;
      if (HIDWORD(v34) == (_DWORD)v34)
      {
        WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SnapOffset<float>>((unsigned int *)&v33, (unint64_t)&v27);
      }
      else
      {
        v13 = (char *)v33 + 40 * HIDWORD(v34);
        v14 = v27;
        v13[16] = v28;
        *(_OWORD *)v13 = v14;
        *((_QWORD *)v13 + 3) = 0;
        *((_QWORD *)v13 + 4) = 0;
        v15 = v29;
        v29 = 0;
        *((_QWORD *)v13 + 3) = v15;
        *((_DWORD *)v13 + 8) = v30;
        LODWORD(v15) = v31;
        v31 = 0;
        *((_DWORD *)v13 + 9) = (_DWORD)v15;
        ++HIDWORD(v34);
      }
      if (v32)
      {
        v16 = v29;
        if (v29)
        {
          v29 = 0;
          v30 = 0;
          WTF::fastFree(v16, v5);
        }
      }
      --v6;
    }
    while (v6);
    v21 = HIDWORD(v34);
    v22 = v33;
    if (v34 > HIDWORD(v34))
    {
      v23 = v33;
      if (HIDWORD(v34))
      {
        if (HIDWORD(v34) >= 0x6666667)
        {
          __break(0xC471u);
          return;
        }
        v24 = 40 * HIDWORD(v34);
        v25 = (WTF *)WTF::fastMalloc((WTF *)(40 * HIDWORD(v34)));
        LODWORD(v34) = v24 / 0x28;
        v33 = v25;
        v23 = v22;
        if (v25 != v22)
        {
          WTF::VectorMover<false,WebCore::SnapOffset<float>>::move(v22, (WTF *)((char *)v22 + 40 * v21), (uint64_t)v25);
          v23 = v33;
        }
      }
      if (v22)
      {
        if (v23 == v22)
        {
          v33 = 0;
          LODWORD(v34) = 0;
        }
        WTF::fastFree(v22, v5);
        v22 = v33;
      }
      else
      {
        v22 = v23;
      }
    }
    *(_QWORD *)a1 = v22;
    v26 = v34;
    v33 = 0;
    v34 = 0;
    *(_QWORD *)(a1 + 8) = v26;
    goto LABEL_17;
  }
  if (v4)
  {
    LODWORD(v34) = 40 * (int)v4 / 0x28u;
    v33 = (WTF *)WTF::fastMalloc((WTF *)(40 * v4));
    while (1)
    {
      IPC::Decoder::decode<WebCore::SnapOffset<float>>((uint64_t)&v27, a2);
      if (!v32)
        break;
      if (HIDWORD(v34) == (_DWORD)v34)
      {
        WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SnapOffset<float>>((unsigned int *)&v33, (unint64_t)&v27);
      }
      else
      {
        v7 = (char *)v33 + 40 * HIDWORD(v34);
        v8 = v27;
        v7[16] = v28;
        *(_OWORD *)v7 = v8;
        *((_QWORD *)v7 + 3) = 0;
        *((_QWORD *)v7 + 4) = 0;
        v9 = v29;
        v29 = 0;
        *((_QWORD *)v7 + 3) = v9;
        *((_DWORD *)v7 + 8) = v30;
        LODWORD(v9) = v31;
        v31 = 0;
        *((_DWORD *)v7 + 9) = (_DWORD)v9;
        ++HIDWORD(v34);
      }
      if (v32)
      {
        v10 = v29;
        if (v29)
        {
          v29 = 0;
          v30 = 0;
          WTF::fastFree(v10, v5);
        }
      }
      if (!--v6)
      {
        v11 = v33;
        v12 = v34;
        goto LABEL_16;
      }
    }
LABEL_27:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v5);
    goto LABEL_28;
  }
  v11 = 0;
  v12 = 0;
LABEL_16:
  v33 = 0;
  v34 = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v12;
LABEL_17:
  *(_BYTE *)(a1 + 16) = 1;
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v5);
}

void sub_196D59BDC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a15)
  {
    if (a12)
      WTF::fastFree(a12, a2);
  }
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);
  _Unwind_Resume(a1);
}

WTF *IPC::Decoder::decode<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_196D59C74(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF *result;
  WTF *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  WTF *v33;
  uint64_t v34;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v27 = 0;
    v28 = 0;
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (v29)
    {
      if (v5)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v29 + 16))(v29, v6, v5);
        v28 = *a1;
        v27 = a1[1];
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
    }
    goto LABEL_43;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (unint64_t)(v9 + 1);
  if (!v6)
  {
    v27 = v5;
    v28 = 0;
LABEL_43:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
    {
      if (v27)
        result = (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(_QWORD *)result + 16))(result, v28);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v33 = 0;
  v34 = 0;
  if (v10 < 0x10000)
  {
    if (!v10)
    {
      v23 = 0;
      v24 = 0;
      goto LABEL_32;
    }
    LODWORD(v34) = v10;
    v33 = (WTF *)WTF::fastMalloc((WTF *)(16 * v10));
    while (1)
    {
      v11 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
      v13 = v12;
      if (!v12)
      {
        v16 = *a1;
        v17 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v18 = a1[3];
        if (v18 && v17 != 0)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
      }
      v14 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
      v15 = a2;
      if (!(_BYTE)a2)
      {
        a2 = (void *)*a1;
        v20 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v21 = a1[3];
        if (!v21)
          goto LABEL_26;
        if (v20)
          (*(void (**)(unint64_t, void *))(*(_QWORD *)v21 + 16))(v21, a2);
      }
      if (*a1)
      {
        if (!v13 || !v15)
        {
          __break(1u);
LABEL_31:
          v23 = v33;
          v24 = v34;
LABEL_32:
          v33 = 0;
          *(_QWORD *)a3 = v23;
          HIDWORD(v34) = 0;
          *(_QWORD *)(a3 + 8) = v24;
LABEL_33:
          *(_BYTE *)(a3 + 16) = 1;
          goto LABEL_27;
        }
        *(_QWORD *)&v31 = v11;
        *((_QWORD *)&v31 + 1) = v14;
        v32 = 1;
      }
      else
      {
        v25 = a1[3];
        v26 = a1[1];
        LOBYTE(v31) = 0;
        v32 = 0;
        *a1 = 0;
        a1[1] = 0;
        if (!v25)
          goto LABEL_26;
        if (!v26)
          goto LABEL_26;
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v25 + 16))(v25, 0);
        if (!v32)
          goto LABEL_26;
      }
      if (HIDWORD(v34) == (_DWORD)v34)
      {
        WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect>((uint64_t)&v33, (unint64_t)&v31);
      }
      else
      {
        *((_OWORD *)v33 + HIDWORD(v34)) = v31;
        ++HIDWORD(v34);
      }
      if (!--v10)
        goto LABEL_31;
    }
  }
  while (1)
  {
    IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v31);
    if (!v32)
      break;
    if (HIDWORD(v34) == (_DWORD)v34)
    {
      WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect>((uint64_t)&v33, (unint64_t)&v31);
    }
    else
    {
      *((_OWORD *)v33 + HIDWORD(v34)) = v31;
      ++HIDWORD(v34);
    }
    if (!--v10)
    {
      WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v33, HIDWORD(v34));
      *(_QWORD *)a3 = v33;
      v30 = v34;
      v33 = 0;
      v34 = 0;
      *(_QWORD *)(a3 + 8) = v30;
      goto LABEL_33;
    }
  }
LABEL_26:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
LABEL_27:
  result = v33;
  if (v33)
  {
    v33 = 0;
    LODWORD(v34) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebKit::NavigationState::setNavigationDelegate(uint64_t a1, void *a2)
{
  char v3;
  unsigned int *v4;
  int v5;
  char v6;
  int v7;
  unint64_t v8;
  char v9;
  int v10;
  unint64_t v11;
  char v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  char v25;
  int v26;
  unint64_t v27;
  char v28;
  int v29;
  unint64_t v30;
  char v31;
  int v32;
  unint64_t v33;
  char v34;
  int v35;
  unint64_t v36;
  char v37;
  int v38;
  unint64_t v39;
  char v40;
  int v41;
  unint64_t v42;
  char v43;
  int v44;
  unint64_t v45;
  char v46;
  int v47;
  unint64_t v48;
  char v49;
  int v50;
  unint64_t v51;
  char v52;
  int v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  char v61;
  int v62;
  unint64_t v63;
  char v64;
  int v65;
  unint64_t v66;
  char v67;
  int v68;
  unint64_t v69;
  char v70;
  int v71;
  unint64_t v72;
  char v73;
  int v74;
  unint64_t v75;
  char v76;
  int v77;
  unint64_t v78;
  char v79;
  int v80;
  unint64_t v81;
  char v82;
  int v83;
  unint64_t v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  __int16 v111;
  __int16 v112;
  __int16 v113;
  __int16 v114;
  __int16 v115;
  __int16 v116;
  __int16 v117;
  __int16 v118;
  __int16 v119;
  __int16 v120;
  __int16 v121;
  uint64_t result;
  __int16 v123;

  objc_storeWeak((id *)(a1 + 24), a2);
  v3 = objc_opt_respondsToSelector();
  v5 = *(_DWORD *)(a1 + 32);
  v4 = (unsigned int *)(a1 + 32);
  *v4 = v5 & 0xFFFFFFFE | v3 & 1;
  v6 = objc_opt_respondsToSelector();
  v7 = 2;
  if ((v6 & 1) == 0)
    v7 = 0;
  v8 = *v4 & 0xFFFFFFFD | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFFFFD | v7;
  *((_BYTE *)v4 + 4) = BYTE4(v8);
  v9 = objc_opt_respondsToSelector();
  v10 = 4;
  if ((v9 & 1) == 0)
    v10 = 0;
  v11 = *v4 & 0xFFFFFFFB | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFFFFB | v10;
  *((_BYTE *)v4 + 4) = BYTE4(v11);
  v12 = objc_opt_respondsToSelector();
  v13 = 8;
  if ((v12 & 1) == 0)
    v13 = 0;
  v14 = *v4 & 0xFFFFFFF7 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFFFF7 | v13;
  *((_BYTE *)v4 + 4) = BYTE4(v14);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v15 = 16;
  else
    v15 = 0;
  v16 = *v4 & 0xFFFFFFEF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFFFEF | v15;
  *((_BYTE *)v4 + 4) = BYTE4(v16);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v17 = 32;
  else
    v17 = 0;
  v18 = *v4 & 0xFFFFFFDF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFFFDF | v17;
  *((_BYTE *)v4 + 4) = BYTE4(v18);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v19 = 64;
  else
    v19 = 0;
  v20 = *v4 & 0xFFFFFFBF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFFFBF | v19;
  *((_BYTE *)v4 + 4) = BYTE4(v20);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v21 = 128;
  else
    v21 = 0;
  v22 = *v4 & 0xFFFFFF7F | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFFF7F | v21;
  *((_BYTE *)v4 + 4) = BYTE4(v22);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v23 = 256;
  else
    v23 = 0;
  v24 = *v4 & 0xFFFFFEFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFFEFF | v23;
  *((_BYTE *)v4 + 4) = BYTE4(v24);
  v25 = objc_opt_respondsToSelector();
  v26 = 0x4000;
  if ((v25 & 1) == 0)
    v26 = 0;
  v27 = *v4 & 0xFFFFBFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFBFFF | v26;
  *((_BYTE *)v4 + 4) = BYTE4(v27);
  v28 = objc_opt_respondsToSelector();
  v29 = 0x8000;
  if ((v28 & 1) == 0)
    v29 = 0;
  v30 = *v4 & 0xFFFF7FFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFF7FFF | v29;
  *((_BYTE *)v4 + 4) = BYTE4(v30);
  v31 = objc_opt_respondsToSelector();
  v32 = 0x20000;
  if ((v31 & 1) == 0)
    v32 = 0;
  v33 = *v4 & 0xFFFDFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFDFFFF | v32;
  *((_BYTE *)v4 + 4) = BYTE4(v33);
  v34 = objc_opt_respondsToSelector();
  v35 = 0x40000;
  if ((v34 & 1) == 0)
    v35 = 0;
  v36 = *v4 & 0xFFFBFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFBFFFF | v35;
  *((_BYTE *)v4 + 4) = BYTE4(v36);
  v37 = objc_opt_respondsToSelector();
  v38 = 0x80000;
  if ((v37 & 1) == 0)
    v38 = 0;
  v39 = *v4 & 0xFFF7FFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFF7FFFF | v38;
  *((_BYTE *)v4 + 4) = BYTE4(v39);
  v40 = objc_opt_respondsToSelector();
  v41 = 0x100000;
  if ((v40 & 1) == 0)
    v41 = 0;
  v42 = *v4 & 0xFFEFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFEFFFFF | v41;
  *((_BYTE *)v4 + 4) = BYTE4(v42);
  v43 = objc_opt_respondsToSelector();
  v44 = 0x200000;
  if ((v43 & 1) == 0)
    v44 = 0;
  v45 = *v4 & 0xFFDFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFDFFFFF | v44;
  *((_BYTE *)v4 + 4) = BYTE4(v45);
  v46 = objc_opt_respondsToSelector();
  v47 = 0x800000;
  if ((v46 & 1) == 0)
    v47 = 0;
  v48 = *v4 & 0xFF7FFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFF7FFFFF | v47;
  *((_BYTE *)v4 + 4) = BYTE4(v48);
  v49 = objc_opt_respondsToSelector();
  v50 = 0x1000000;
  if ((v49 & 1) == 0)
    v50 = 0;
  v51 = *v4 & 0xFEFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFEFFFFFF | v50;
  *((_BYTE *)v4 + 4) = BYTE4(v51);
  v52 = objc_opt_respondsToSelector();
  v53 = 0x2000000;
  if ((v52 & 1) == 0)
    v53 = 0;
  v54 = *v4 & 0xFDFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFDFFFFFF | v53;
  *((_BYTE *)v4 + 4) = BYTE4(v54);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v55 = 512;
  else
    v55 = 0;
  v56 = *v4 & 0xFFFFFDFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFFDFF | v55;
  *((_BYTE *)v4 + 4) = BYTE4(v56);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v57 = 2048;
  else
    v57 = 0;
  v58 = *v4 & 0xFFFFF7FF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFF7FF | v57;
  *((_BYTE *)v4 + 4) = BYTE4(v58);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v59 = 4096;
  else
    v59 = 0;
  v60 = *v4 & 0xFFFFEFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFEFFF | v59;
  *((_BYTE *)v4 + 4) = BYTE4(v60);
  v61 = objc_opt_respondsToSelector();
  v62 = 0x2000;
  if ((v61 & 1) == 0)
    v62 = 0;
  v63 = *v4 & 0xFFFFDFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFFDFFF | v62;
  *((_BYTE *)v4 + 4) = BYTE4(v63);
  v64 = objc_opt_respondsToSelector();
  v65 = 0x10000;
  if ((v64 & 1) == 0)
    v65 = 0;
  v66 = *v4 & 0xFFFEFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFFEFFFF | v65;
  *((_BYTE *)v4 + 4) = BYTE4(v66);
  v67 = objc_opt_respondsToSelector();
  v68 = 0x400000;
  if ((v67 & 1) == 0)
    v68 = 0;
  v69 = *v4 & 0xFFBFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFFBFFFFF | v68;
  *((_BYTE *)v4 + 4) = BYTE4(v69);
  v70 = objc_opt_respondsToSelector();
  v71 = 0x4000000;
  if ((v70 & 1) == 0)
    v71 = 0;
  v72 = *v4 & 0xFBFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xFBFFFFFF | v71;
  *((_BYTE *)v4 + 4) = BYTE4(v72);
  v73 = objc_opt_respondsToSelector();
  v74 = 0x8000000;
  if ((v73 & 1) == 0)
    v74 = 0;
  v75 = *v4 & 0xF7FFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xF7FFFFFF | v74;
  *((_BYTE *)v4 + 4) = BYTE4(v75);
  v76 = objc_opt_respondsToSelector();
  v77 = 0x10000000;
  if ((v76 & 1) == 0)
    v77 = 0;
  v78 = *v4 & 0xEFFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xEFFFFFFF | v77;
  *((_BYTE *)v4 + 4) = BYTE4(v78);
  v79 = objc_opt_respondsToSelector();
  v80 = 0x20000000;
  if ((v79 & 1) == 0)
    v80 = 0;
  v81 = *v4 & 0xDFFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xDFFFFFFF | v80;
  *((_BYTE *)v4 + 4) = BYTE4(v81);
  v82 = objc_opt_respondsToSelector();
  v83 = 0x40000000;
  if ((v82 & 1) == 0)
    v83 = 0;
  v84 = *v4 & 0xBFFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0xBFFFFFFF | v83;
  *((_BYTE *)v4 + 4) = BYTE4(v84);
  v85 = objc_opt_respondsToSelector();
  v86 = 0x80000000;
  if ((v85 & 1) == 0)
    v86 = 0;
  v87 = *v4 & 0x7FFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *v4 = *v4 & 0x7FFFFFFF | v86;
  *((_BYTE *)v4 + 4) = BYTE4(v87);
  v88 = objc_opt_respondsToSelector();
  v89 = 0x100000000;
  if ((v88 & 1) == 0)
    v89 = 0;
  v90 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFFEFFFFFFFFLL;
  *v4 = *v4;
  *((_BYTE *)v4 + 4) = (v90 | v89) >> 32;
  v91 = objc_opt_respondsToSelector();
  v92 = 0x200000000;
  if ((v91 & 1) == 0)
    v92 = 0;
  v93 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
  *v4 = *v4;
  *((_BYTE *)v4 + 4) = (v93 | v92) >> 32;
  v94 = objc_opt_respondsToSelector();
  v95 = 0x400000000;
  if ((v94 & 1) == 0)
    v95 = 0;
  v96 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFFBFFFFFFFFLL;
  *v4 = *v4;
  *((_BYTE *)v4 + 4) = (v96 | v95) >> 32;
  v97 = objc_opt_respondsToSelector();
  v98 = 0x800000000;
  if ((v97 & 1) == 0)
    v98 = 0;
  v99 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFF7FFFFFFFFLL;
  *v4 = *v4;
  *((_BYTE *)v4 + 4) = (v99 | v98) >> 32;
  v100 = objc_opt_respondsToSelector();
  v101 = 0x1000000000;
  if ((v100 & 1) == 0)
    v101 = 0;
  v102 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFEFFFFFFFFFLL;
  *v4 = *v4;
  *((_BYTE *)v4 + 4) = (v102 | v101) >> 32;
  v103 = objc_opt_respondsToSelector();
  v104 = 0x2000000000;
  if ((v103 & 1) == 0)
    v104 = 0;
  v105 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFDFFFFFFFFFLL;
  *v4 = *v4;
  *((_BYTE *)v4 + 4) = (v105 | v104) >> 32;
  v106 = objc_opt_respondsToSelector();
  v107 = 0x4000000000;
  if ((v106 & 1) == 0)
    v107 = 0;
  v108 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFBFFFFFFFFFLL;
  *v4 = *v4;
  *((_BYTE *)v4 + 4) = (v108 | v107) >> 32;
  v109 = objc_opt_respondsToSelector();
  v110 = 0xFFFFFF8000000000;
  if ((v109 & 1) == 0)
    v110 = 0;
  *((_BYTE *)v4 + 4) = (v110 & 0xFFFFFF80FFFFFFFFLL | ((unint64_t)(v4[1] & 0x7F) << 32)) >> 32;
  *((_BYTE *)v4 + 5) = objc_opt_respondsToSelector() & 1;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFFE | objc_opt_respondsToSelector() & 1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v111 = 2;
  else
    v111 = 0;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFFD | v111;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v112 = 4;
  else
    v112 = 0;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFFB | v112;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v113 = 8;
  else
    v113 = 0;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFF7 | v113;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v114 = 16;
  else
    v114 = 0;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFEF | v114;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v115 = 32;
  else
    v115 = 0;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFDF | v115;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v116 = 64;
  else
    v116 = 0;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFBF | v116;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v117 = 128;
  else
    v117 = 0;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFF7F | v117;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v118 = 256;
  else
    v118 = 0;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFEFF | v118;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v119 = 512;
  else
    v119 = 0;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFDFF | v119;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v120 = 1024;
  else
    v120 = 0;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFBFF | v120;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v121 = 2048;
  else
    v121 = 0;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xF7FF | v121;
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    v123 = 4096;
  else
    v123 = 0;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xEFFF | v123;
  return result;
}

void WebKit::WebLocalFrameLoaderClient::updateGlobalHistoryRedirectLinks(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36[2];
  __int128 *v37;
  IPC::Encoder *v38;

  v2 = WebKit::WebFrame::page(this[2]);
  if (!v2)
    return;
  v3 = v2;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v5 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this[11] + 1) + 280) + 88);
  v6 = (WTF::StringImpl *)v5[340];
  if (v6)
  {
    v7 = *(_DWORD *)v6;
    v8 = *(_DWORD *)v6 + 2;
    *(_DWORD *)v6 = v8;
    if (v7)
    {
      *(_DWORD *)v6 = v7;
      v9 = v3 + 32;
    }
    else
    {
      WTF::StringImpl::destroy(v6, v4);
      v6 = (WTF::StringImpl *)v5[340];
      v9 = v3 + 32;
      if (!v6)
        goto LABEL_6;
      v8 = *(_DWORD *)v6 + 2;
    }
    *(_DWORD *)v6 = v8;
LABEL_6:
    v33 = v6;
    WebCore::DocumentLoader::urlForHistory((WebCore::DocumentLoader *)v5);
    v11 = v36[0];
    if (v36[0])
    {
      v12 = *(_DWORD *)v36[0];
      *(_DWORD *)v36[0] += 2;
      v32 = v11;
      v36[0] = 0;
      if (v12)
        *(_DWORD *)v11 = v12;
      else
        WTF::StringImpl::destroy(v11, v10);
    }
    else
    {
      v32 = 0;
    }
    *(_OWORD *)v36 = *((_OWORD *)this[2] + 5);
    *(_QWORD *)&v34 = &v33;
    *((_QWORD *)&v34 + 1) = &v32;
    v35 = v36;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 1902;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v38 = (IPC::Encoder *)v14;
    IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>((IPC::Encoder *)v14, (uint64_t **)&v34);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v9 + 32))(v9, &v38, 0);
    v16 = v38;
    v38 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v15);
      WTF::fastFree(v17, v18);
    }
    v19 = v32;
    v32 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v33;
    v33 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  WebCore::DocumentLoader::serverRedirectSourceForHistory((WebCore::DocumentLoader *)v36, (uint64_t)v5);
  if (v36[0])
  {
    if (*(_DWORD *)v36[0] == 2)
      WTF::StringImpl::destroy(v36[0], v21);
    else
      *(_DWORD *)v36[0] -= 2;
    v22 = v3 + 32;
    WebCore::DocumentLoader::serverRedirectSourceForHistory((WebCore::DocumentLoader *)&v33, (uint64_t)v5);
    v23 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v5 + 109));
    if (v23)
      *(_DWORD *)v23 += 2;
    v32 = v23;
    v34 = *((_OWORD *)this[2] + 5);
    v36[0] = (WTF::StringImpl *)&v33;
    v36[1] = (WTF::StringImpl *)&v32;
    v37 = &v34;
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 56))(v3 + 32);
    v25 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v25 = 1904;
    *(_QWORD *)(v25 + 8) = v24;
    *(_QWORD *)(v25 + 528) = v25 + 16;
    *(_QWORD *)(v25 + 536) = v25 + 16;
    *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v25 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
    v38 = (IPC::Encoder *)v25;
    IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>((IPC::Encoder *)v25, (uint64_t **)v36);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v22 + 32))(v3 + 32, &v38, 0);
    v27 = v38;
    v38 = 0;
    if (v27)
    {
      IPC::Encoder::~Encoder(v27, v26);
      WTF::fastFree(v28, v29);
    }
    v30 = v32;
    v32 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v26);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v33;
    v33 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v26);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v3 + 8));
}

WTF::StringImpl *WebCore::DocumentLoader::serverRedirectSourceForHistory(WebCore::DocumentLoader *this, uint64_t a2)
{
  const WTF::StringImpl **v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF *v8;
  const WTF::StringImpl **v9;
  const WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  WebCore::DocumentLoader::urlForHistory((WebCore::DocumentLoader *)a2);
  v4 = (const WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 872));
  if ((WTF::equal(v13, *v4, v5) & 1) != 0
    || (v8 = (WTF *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 872)),
        v9 = (const WTF::StringImpl **)WTF::aboutBlankURL(v8),
        WTF::equal(*(WTF **)v8, *v9, v10))
    || (WebCore::DocumentLoader::urlForHistory((WebCore::DocumentLoader *)a2), !v12))
  {
    *(_QWORD *)this = 0;
  }
  else
  {
    v11 = *(_DWORD *)v12;
    *(_DWORD *)v12 += 2;
    *(_QWORD *)this = v12;
    if (v11)
      *(_DWORD *)v12 = v11;
    else
      WTF::StringImpl::destroy(v12, v6);
  }
  result = v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::sendPrepareToSuspend(WTF::MonotonicTime *a1, char a2, uint64_t *a3, double a4)
{
  double v8;
  uint64_t v10;
  _BYTE v11[8];
  double *v12;
  double v13;

  if (WebKit::s_suspensionAllowedForTesting)
  {
    WTF::MonotonicTime::now(a1);
    v13 = v8 + a4;
    v11[0] = a2;
    v12 = &v13;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>((uint64_t)a1, (uint64_t)v11, a3, 0, 0, 0);
  }
  else
  {
    v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
}

void WebKit::LinkDecorationFilteringController::updateStrings(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[5];

  if (!PAL::WebPrivacyLibrary((PAL *)1))
  {
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return;
  }
  {
    v4 = HIDWORD(qword_1ECE73530);
    if (HIDWORD(qword_1ECE73530) == (_DWORD)qword_1ECE73530)
    {
      a2 = (uint64_t *)WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers, HIDWORD(qword_1ECE73530) + 1, (unint64_t)a2);
      v5 = HIDWORD(qword_1ECE73530);
      v6 = (uint64_t *)(WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers
                     + 8 * HIDWORD(qword_1ECE73530));
      goto LABEL_8;
    }
    v8 = (uint64_t *)WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers;
    v5 = HIDWORD(qword_1ECE73530);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v8 = &qword_1ECE73538;
    WebKit::LinkDecorationFilteringController::updateStrings(WTF::CompletionHandler<void ()(void)> &&)::lookupCompletionHandlers = (uint64_t)&qword_1ECE73538;
    qword_1ECE73530 = 1;
  }
  v6 = &v8[v4];
LABEL_8:
  v9 = *a2;
  *a2 = 0;
  *v6 = v9;
  HIDWORD(qword_1ECE73530) = v5 + 1;
  if ((v5 + 1) <= 1)
  {
    v10 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE130])()), "init");
    v11 = objc_msgSend(v10, "setAfterUpdates:", 0);
    v12 = (void *)objc_msgSend((id)((uint64_t (*)(uint64_t))*MEMORY[0x1E0DCDF70])(v11), "sharedInstance");
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = ___ZN6WebKit33LinkDecorationFilteringController13updateStringsEON3WTF17CompletionHandlerIFvvEEE_block_invoke;
    v13[3] = &__block_descriptor_40_e41_v24__0__WPLinkFilteringData_8__NSError_16l;
    v13[4] = a1;
    objc_msgSend(v12, "requestLinkFilteringData:completionHandler:", v10, v13);
    if (v10)
      CFRelease(v10);
  }
}

void sub_196D5B168(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebsiteDataStore::beginAppBoundDomainCheck(WebKit::WebsiteDataStore *this, const WTF::String *a2, const WTF::String *a3, CFTypeRef *a4)
{
  _QWORD *v8;
  _QWORD *result;
  _QWORD *v10;

  CFRetain(a4[1]);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = &off_1E34CCDF0;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = a4;
  v10 = v8;
  WebKit::WebsiteDataStore::ensureAppBoundDomains((uint64_t)this, (uint64_t *)&v10);
  result = v10;
  if (v10)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  return result;
}

void sub_196D5B228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t API::WebsitePolicies::copy@<X0>(API::WebsitePolicies *this@<X0>, API::WebsitePolicies **a2@<X8>)
{
  uint64_t v4;
  API::WebsitePolicies *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::WebPagePreferencesLockdownModeObserver *v12;
  uint64_t result;

  v4 = API::Object::newObject(0xA8uLL, 123);
  v5 = API::WebsitePolicies::WebsitePolicies((API::WebsitePolicies *)v4);
  *a2 = v5;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=((uint64_t *)v5 + 3, (_QWORD **)this + 3);
  WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v4 + 32, (uint64_t)this + 32);
  WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v4 + 48, (unsigned int *)this + 12);
  WTF::String::operator=((WTF::StringImpl **)(v4 + 64), (API::WebsitePolicies *)((char *)this + 64));
  WTF::String::operator=((WTF::StringImpl **)(v4 + 72), (API::WebsitePolicies *)((char *)this + 72));
  WTF::String::operator=((WTF::StringImpl **)(v4 + 80), (API::WebsitePolicies *)((char *)this + 80));
  WTF::String::operator=((WTF::StringImpl **)(v4 + 88), (API::WebsitePolicies *)((char *)this + 88));
  v6 = *((_BYTE *)this + 98);
  *(_WORD *)(v4 + 96) = *((_WORD *)this + 48);
  *(_BYTE *)(v4 + 98) = v6;
  *(_BYTE *)(v4 + 104) = *((_BYTE *)this + 104);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=((WTF::StringImpl ***)(v4 + 112), (_QWORD **)this + 14);
  v7 = *((_QWORD *)this + 15);
  *(_QWORD *)(v4 + 127) = *(_QWORD *)((char *)this + 127);
  *(_QWORD *)(v4 + 120) = v7;
  v8 = *((_QWORD *)this + 17);
  if (v8)
    CFRetain(*(CFTypeRef *)(v8 + 8));
  v9 = *(_QWORD *)(v4 + 136);
  *(_QWORD *)(v4 + 136) = v8;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  v10 = *((_QWORD *)this + 18);
  if (v10)
    CFRetain(*(CFTypeRef *)(v10 + 8));
  v11 = *(_QWORD *)(v4 + 144);
  *(_QWORD *)(v4 + 144) = v10;
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  *(_WORD *)(v4 + 152) = *((_WORD *)this + 76);
  v12 = (WebKit::WebPagePreferencesLockdownModeObserver *)WTF::fastMalloc((WTF *)0x18);
  WebKit::WebPagePreferencesLockdownModeObserver::WebPagePreferencesLockdownModeObserver(v12, (API::WebsitePolicies *)v4);
  result = *(_QWORD *)(v4 + 160);
  *(_QWORD *)(v4 + 160) = v12;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::WebFrameProxy::didHandleContentFilterUnblockNavigation(WebKit::WebFrameProxy *this, const WebCore::ResourceRequest *a2)
{
  WTF::StringImpl **v3;
  uint64_t canHandleRequest;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  CFTypeRef v15;
  const void *v16;
  CFTypeRef v17;
  __int128 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _BYTE v23[24];
  _BYTE *v24;
  WTF::StringImpl *v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  CFTypeRef cf[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = (WTF::StringImpl **)((char *)this + 328);
  canHandleRequest = WebCore::ContentFilterUnblockHandler::canHandleRequest((WebKit::WebFrameProxy *)((char *)this + 328), a2);
  if ((canHandleRequest & 1) != 0)
  {
    v5 = *((_QWORD *)this + 3);
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
    {
      v7 = v6 - 16;
      CFRetain(*(CFTypeRef *)(v6 - 8));
      CFRetain(*(CFTypeRef *)(v6 - 8));
      v8 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 1;
    }
    v11 = operator new(0x10uLL);
    *v11 = &off_1E34D38F8;
    v11[1] = v7;
    v24 = v11;
    WebCore::ContentFilterUnblockHandler::requestUnblockAsync();
    v12 = v24;
    if (v24 == v23)
    {
      v13 = 4;
      v12 = v23;
    }
    else
    {
      if (!v24)
        goto LABEL_14;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_14:
    if ((v8 & 1) == 0)
      CFRelease(*(CFTypeRef *)(v7 + 8));
    return canHandleRequest;
  }
  v29 = 0u;
  *(_OWORD *)cf = 0u;
  v27 = 0u;
  v28 = 0u;
  *(_OWORD *)v25 = 0u;
  v26 = 0u;
  WTF::URL::invalidate((WTF::URL *)&v25[1]);
  *((_QWORD *)&v29 + 1) = 0;
  cf[0] = 0;
  LOBYTE(cf[1]) = 0;
  v25[0] = 0;
  v10 = *v3;
  *v3 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  WTF::URL::operator=((uint64_t)this + 336, (WTF::StringImpl *)&v25[1]);
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::operator=[abi:sn180100]((_QWORD *)this + 47, (uint64_t)&v28);
  v15 = cf[0];
  cf[0] = 0;
  v16 = (const void *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = v15;
  if (v16)
  {
    CFRelease(v16);
    v17 = cf[0];
    *((_BYTE *)this + 416) = cf[1];
    cf[0] = 0;
    if (v17)
      CFRelease(v17);
  }
  else
  {
    *((_BYTE *)this + 416) = cf[1];
    cf[0] = 0;
  }
  v18 = (__int128 *)*((_QWORD *)&v29 + 1);
  if (*((__int128 **)&v29 + 1) == &v28)
  {
    v19 = 4;
    v18 = &v28;
    goto LABEL_25;
  }
  if (*((_QWORD *)&v29 + 1))
  {
    v19 = 5;
LABEL_25:
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  }
  v20 = v25[1];
  v25[1] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v25[0];
  v25[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v14);
    else
      *(_DWORD *)v21 -= 2;
  }
  return canHandleRequest;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v7 = WTF::fastZeroedMalloc((WTF *)(24 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v8 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
      v9 = v8;
      v11 = v10;
      v12 = *a2 ? (uint64_t)&(*a2)[3 * *((unsigned int *)*a2 - 1)] : 0;
      if ((WTF::StringImpl **)v12 != v8)
      {
        do
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = *((_DWORD *)*v9 + 4);
          if (v15 >= 0x100)
            v16 = v15 >> 8;
          else
            v16 = WTF::StringImpl::hashSlowCase(*v9);
          v17 = 0;
          do
          {
            v18 = v16 & v14;
            v16 = ++v17 + (v16 & v14);
          }
          while (*(_QWORD *)(v13 + 24 * v18));
          WTF::String::operator=((WTF::StringImpl **)(v13 + 24 * v18), (WTF::StringImpl *)v9);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v13 + 24 * v18 + 8), (uint64_t)(v9 + 1));
          while (1)
          {
            v9 += 3;
            if (v9 == v11)
              break;
            if ((unint64_t)*v9 + 1 > 1)
              goto LABEL_20;
          }
          v9 = v11;
LABEL_20:
          ;
        }
        while (v9 != (WTF::StringImpl **)v12);
      }
    }
  }
  return a1;
}

uint64_t ___ZN6WebKit34requestLinkDecorationFilteringDataEON3WTF17CompletionHandlerIFvONS0_6VectorIN7WebCore27LinkDecorationFilteringDataELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEEEE_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t *v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  int v41;
  void *v42;
  unsigned int v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v55;
  uint64_t *v56;
  WTF *v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint8_t buf[8];
  WTF::StringImpl *v66;
  WTF::StringImpl *v67[3];
  WTF::StringImpl *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[128];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v73 = 0;
  v74 = 0;
  if (a3)
  {
    v3 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Failed to request allowed query parameters from WebPrivacy.", buf, 2u);
    }
  }
  else
  {
    v5 = (void *)objc_msgSend(a2, "rules");
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v69, v75, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v70;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v70 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * v8);
          MEMORY[0x19AEABCC8](&v63, objc_msgSend(v9, "domain"));
          v60 = (WTF::StringImpl *)"http://";
          v61 = 8;
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v60, (uint64_t *)&v63, &v64);
          if (!v64)
          {
            __break(0xC471u);
            JUMPOUT(0x196D5BDB8);
          }
          MEMORY[0x19AEABB0C](buf, &v64, 0);
          WebCore::RegistrableDomain::RegistrableDomain(&v68, (const WTF::URL *)buf);
          v11 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v64;
          v64 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = v63;
          v63 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v10);
            else
              *(_DWORD *)v13 -= 2;
          }
          if (objc_msgSend((id)objc_msgSend(v9, "domain"), "hasPrefix:", CFSTR("http://")))
          {
            MEMORY[0x19AEABCC8](&v64, objc_msgSend(v9, "domain"));
            MEMORY[0x19AEABB0C](buf, &v64, 0);
            WebCore::RegistrableDomain::RegistrableDomain(&v60, (const WTF::URL *)buf);
            v15 = v60;
            v60 = 0;
            v16 = v68;
            v68 = v15;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
              {
                WTF::StringImpl::destroy(v16, v14);
                v17 = v60;
                v60 = 0;
                if (v17)
                {
                  if (*(_DWORD *)v17 == 2)
                    WTF::StringImpl::destroy(v17, v14);
                  else
                    *(_DWORD *)v17 -= 2;
                }
              }
              else
              {
                *(_DWORD *)v16 -= 2;
                v60 = 0;
              }
            }
            v18 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v14);
              else
                *(_DWORD *)v18 -= 2;
            }
            v19 = v64;
            v64 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, v14);
              else
                *(_DWORD *)v19 -= 2;
            }
          }
          MEMORY[0x19AEABCC8](&v60, objc_msgSend(v9, "queryParameter"));
          v21 = v68;
          v68 = 0;
          *(_QWORD *)buf = v21;
          v66 = 0;
          v22 = v60;
          v60 = 0;
          v67[0] = v22;
          if (HIDWORD(v74) == (_DWORD)v74)
          {
            WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LinkDecorationFilteringData>((uint64_t)&v73, (unint64_t)buf);
          }
          else
          {
            v23 = HIDWORD(v74) + 1;
            v24 = (WTF::StringImpl **)(v73 + 24 * HIDWORD(v74));
            *(_QWORD *)buf = 0;
            *v24 = v21;
            v25 = v66;
            v66 = 0;
            v24[1] = v25;
            v26 = v67[0];
            v67[0] = 0;
            v24[2] = v26;
            HIDWORD(v74) = v23;
          }
          v27 = v67[0];
          v67[0] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v20);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = v66;
          v66 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v20);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v20);
            else
              *(_DWORD *)v29 -= 2;
          }
          v30 = v60;
          v60 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v20);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = v68;
          v68 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v20);
            else
              *(_DWORD *)v31 -= 2;
          }
          ++v8;
        }
        while (v6 != v8);
        v32 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v69, v75, 16);
        v6 = v32;
      }
      while (v32);
    }
  }
  v33 = &v62;
  v60 = (WTF::StringImpl *)&v62;
  v61 = 1;
  v34 = v67;
  *(_QWORD *)buf = v67;
  LODWORD(v66) = 1;
  v35 = qword_1EE3416A0;
  if ((uint64_t *)qword_1EE3416A0 != &qword_1EE3416B0)
  {
    qword_1EE3416A0 = (uint64_t)&qword_1EE3416B0;
    *(_QWORD *)buf = v35;
    v36 = dword_1EE3416A8;
    dword_1EE3416A8 = 1;
    LODWORD(v66) = v36;
LABEL_66:
    v37 = dword_1EE3416AC;
    dword_1EE3416AC = 0;
    HIDWORD(v66) = v37;
    goto LABEL_67;
  }
  if (!dword_1EE3416AC)
    goto LABEL_66;
  v55 = 8 * dword_1EE3416AC;
  v56 = &qword_1EE3416B0;
  do
  {
    *v34++ = (WTF::StringImpl *)*v56;
    *v56++ = 0;
    v55 -= 8;
  }
  while (v55);
  v57 = (WTF *)qword_1EE3416A0;
  v58 = dword_1EE3416AC;
  dword_1EE3416AC = 0;
  HIDWORD(v66) = v58;
  if ((uint64_t *)qword_1EE3416A0 != &qword_1EE3416B0)
  {
    if (qword_1EE3416A0)
    {
      qword_1EE3416A0 = 0;
      dword_1EE3416A8 = 0;
      WTF::fastFree(v57, v4);
      v59 = v60;
      qword_1EE3416A0 = (uint64_t)&qword_1EE3416B0;
      if (v60 != (WTF::StringImpl *)&v62)
      {
        v60 = (WTF::StringImpl *)&v62;
        qword_1EE3416A0 = (uint64_t)v59;
        v40 = v61;
        LODWORD(v61) = 1;
        goto LABEL_71;
      }
    }
    else
    {
      qword_1EE3416A0 = (uint64_t)&qword_1EE3416B0;
    }
  }
LABEL_67:
  if (HIDWORD(v61))
  {
    v38 = 8 * HIDWORD(v61);
    v39 = &qword_1EE3416B0;
    do
    {
      *v39++ = *v33;
      *v33++ = 0;
      v38 -= 8;
    }
    while (v38);
  }
  v40 = v61;
LABEL_71:
  v41 = HIDWORD(v61);
  HIDWORD(v61) = 0;
  dword_1EE3416A8 = v40;
  dword_1EE3416AC = v41;
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v4);
  v43 = HIDWORD(v66) - 1;
  if (HIDWORD(v66) - 1 >= 0)
  {
    while (1)
    {
      v44 = v43;
      v45 = *(WTF::StringImpl **)buf;
      if (!v43)
        break;
      v60 = 0;
      LODWORD(v61) = 0;
      HIDWORD(v61) = HIDWORD(v74);
      if (HIDWORD(v74))
      {
        if (HIDWORD(v74) >= 0xAAAAAAB)
          goto LABEL_91;
        v46 = 24 * HIDWORD(v74);
        v47 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v74)));
        LODWORD(v61) = v46 / 0x18;
        v60 = v47;
        if (HIDWORD(v74))
        {
          v48 = v73;
          v49 = 24 * HIDWORD(v74);
          do
          {
            v47 = (WTF::StringImpl *)(WebCore::LinkDecorationFilteringData::LinkDecorationFilteringData(v47, v48) + 3);
            v48 += 24;
            v49 -= 24;
          }
          while (v49);
        }
      }
      v50 = *((_QWORD *)v45 + v44);
      *((_QWORD *)v45 + v44) = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v50 + 16))(v50, &v60);
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v51);
      v43 = v44 - 1;
      if (HIDWORD(v66) <= (v44 - 1))
      {
LABEL_91:
        __break(0xC471u);
        JUMPOUT(0x196D5BCA8);
      }
    }
    v52 = **(_QWORD **)buf;
    **(_QWORD **)buf = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v52 + 16))(v52, &v73);
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v42);
  return WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v73, v53);
}

void sub_196D5BDC4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v31;
  void *v32;

  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a15, a2);
  WTF::Vector<WTF::CompletionHandler<void ()(void)>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v31);
  WTF::Vector<WebCore::LinkDecorationFilteringData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a30, v32);
  _Unwind_Resume(a1);
}

void sub_196D5C320(_Unwind_Exception *a1)
{
  WTF *v1;
  id *v2;
  id *v3;
  const void *v4;
  void *v6;

  if (v4)
    CFRelease(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  WTF::fastFree(v1, v6);
  _Unwind_Resume(a1);
}

void sub_196D5C3C0()
{
  JUMPOUT(0x196D5C3A8);
}

void sub_196D5C3C8()
{
  JUMPOUT(0x196D5C3B0);
}

void WebKit::WebPreferences::platformInitializeStore(WebKit **this)
{
  void *v2;
  char v3;
  unsigned int v4;
  BOOL v5;
  WebCore::RealtimeMediaSourceCenter *v6;
  unsigned int v7;
  WebKit::WebPreferencesStore *v8;
  const WTF::String *v9;
  uint64_t v10;
  WebKit::WebPreferencesStore *v11;
  void *v12;
  WebKit::WebPreferencesStore *v13;
  WebKit::WebPreferencesStore *v14;
  WebKit::WebPreferencesStore *v15;
  WebKit::WebPreferencesStore *v16;
  WebKit::WebPreferencesStore *v17;
  WebKit::WebPreferencesStore *v18;
  WebKit::WebPreferencesStore *v19;
  WebKit::WebPreferencesStore *v20;
  WebKit::WebPreferencesStore *v21;
  WebKit::WebPreferencesStore *v22;
  WebKit::WebPreferencesStore *v23;
  WTF::StringImpl *v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  BOOL v94;
  BOOL v95;
  BOOL v96;
  BOOL v97;
  BOOL v98;
  BOOL v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  BOOL v109;
  BOOL v110;
  BOOL v111;
  BOOL v112;
  BOOL v113;
  BOOL v114;
  BOOL v115;
  BOOL v116;
  BOOL v117;
  BOOL v118;
  BOOL v119;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  BOOL v123;
  BOOL v124;
  BOOL v125;
  BOOL v126;
  BOOL v127;
  BOOL v128;
  BOOL v129;
  BOOL v130;
  BOOL v131;
  BOOL v132;
  BOOL v133;
  BOOL v134;
  BOOL v135;
  BOOL v136;
  BOOL v137;
  BOOL v138;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  BOOL v142;
  BOOL v143;
  BOOL v144;
  BOOL v145;
  BOOL v146;
  BOOL v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  BOOL v151;
  BOOL v152;
  BOOL v153;
  BOOL v154;
  BOOL v155;
  BOOL v156;
  BOOL v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  BOOL v161;
  BOOL v162;
  BOOL v163;
  BOOL v164;
  BOOL v165;
  BOOL v166;
  BOOL v167;
  BOOL v168;
  BOOL v169;
  BOOL v170;
  BOOL v171;
  BOOL v172;
  BOOL v173;
  BOOL v174;
  BOOL v175;
  BOOL v176;
  BOOL v177;
  BOOL v178;
  BOOL v179;
  BOOL v180;
  BOOL v181;
  BOOL v182;
  BOOL v183;
  BOOL v184;
  BOOL v185;
  BOOL v186;
  BOOL v187;
  BOOL v188;
  BOOL v189;
  BOOL v190;
  BOOL v191;
  BOOL v192;
  BOOL v193;
  BOOL v194;
  BOOL v195;
  BOOL v196;
  BOOL v197;
  BOOL v198;
  BOOL v199;
  BOOL v200;
  BOOL v201;
  BOOL v202;
  BOOL v203;
  BOOL v204;
  BOOL v205;
  BOOL v206;
  BOOL v207;
  BOOL v208;
  BOOL v209;
  BOOL v210;
  BOOL v211;
  BOOL v212;
  BOOL v213;
  BOOL v214;
  BOOL v215;
  BOOL v216;
  BOOL v217;
  BOOL v218;
  BOOL v219;
  BOOL v220;
  BOOL v221;
  BOOL v222;
  BOOL v223;
  BOOL v224;
  BOOL v225;
  BOOL v226;
  BOOL v227;
  BOOL v228;
  BOOL v229;
  BOOL v230;
  BOOL v231;
  BOOL v232;
  BOOL v233;
  BOOL v234;
  BOOL v235;
  BOOL v236;
  BOOL v237;
  BOOL v238;
  BOOL v239;
  BOOL v240;
  BOOL v241;
  BOOL v242;
  unsigned int v243;
  BOOL v244;
  BOOL v245;
  BOOL v246;
  BOOL v247;
  BOOL v248;
  BOOL v249;
  BOOL v250;
  unsigned int v251;
  BOOL v252;
  BOOL v253;
  BOOL v254;
  BOOL v255;
  BOOL v256;
  BOOL v257;
  BOOL v258;
  BOOL v259;
  BOOL v260;
  BOOL v261;
  BOOL v262;
  BOOL v263;
  unsigned int v264;
  BOOL v265;
  const WTF::StringImpl *v266;
  BOOL v267;
  BOOL v268;
  BOOL v269;
  BOOL v270;
  BOOL v271;
  BOOL v272;
  BOOL v273;
  BOOL v274;
  BOOL v275;
  BOOL v276;
  BOOL v277;
  BOOL v278;
  BOOL v279;
  BOOL v280;
  BOOL v281;
  BOOL v282;
  BOOL v283;
  BOOL v284;
  BOOL v285;
  BOOL v286;
  BOOL v287;
  BOOL v288;
  const WTF::StringImpl *v289;
  BOOL v290;
  WTF::StringImpl *v291;
  double v292;
  double v293;
  BOOL v294;
  BOOL v295;
  BOOL v296;
  BOOL v297;
  BOOL v298;
  BOOL v299;
  BOOL v300;
  unsigned int v301;
  BOOL v302;
  const WTF::StringImpl *v303;
  BOOL v304;
  double v305;
  BOOL v306;
  BOOL v307;
  BOOL v308;
  BOOL v309;
  BOOL v310;
  BOOL v311;
  BOOL v312;
  BOOL v313;
  BOOL v314;
  double v315;
  double v316;
  double v317;
  const WTF::StringImpl *v318;
  BOOL v319;
  BOOL v320;
  BOOL v321;
  double v322;
  BOOL v323;
  BOOL v324;
  BOOL v325;
  BOOL v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  WTF::StringImpl *v329;
  const WTF::StringImpl *v330;
  BOOL v331;
  WTF::StringImpl *v332;
  double v333;
  BOOL v334;
  double v335;
  double v336;
  BOOL v337;
  double v338;
  BOOL v339;
  BOOL v340;
  BOOL v341;
  BOOL v342;
  double v343;
  unsigned int v344;
  BOOL v345;
  unsigned int v346;
  BOOL v347;
  BOOL v348;
  BOOL v349;
  BOOL v350;
  BOOL v351;
  BOOL v352;
  double v353;
  double v354;
  const WTF::StringImpl *v355;
  BOOL v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  BOOL v360;
  double v361;
  BOOL v362;
  BOOL v363;
  double v364;
  BOOL v365;
  BOOL v366;
  BOOL v367;
  BOOL v368;
  BOOL v369;
  WTF::StringImpl *v370;
  WTF::StringImpl *v371;
  const WTF::StringImpl *v372;
  BOOL v373;
  BOOL v374;
  BOOL v375;
  unsigned int v376;
  BOOL v377;
  BOOL v378;
  unsigned int v379;
  BOOL v380;
  BOOL v381;
  unsigned int v382;
  BOOL v383;
  WTF::StringImpl *v384;
  double v385;
  double v386;
  BOOL v387;
  unsigned int v388;
  BOOL v389;
  BOOL v390;
  const WTF::StringImpl *v391;
  BOOL v392;
  BOOL v393;
  BOOL v394;
  BOOL v395;
  BOOL v396;
  BOOL v397;
  BOOL v398;
  BOOL v399;
  BOOL v400;
  BOOL v401;
  BOOL v402;
  BOOL v403;
  BOOL v404;
  BOOL v405;
  BOOL v406;
  BOOL v407;
  BOOL v408;
  BOOL v409;
  BOOL v410;
  BOOL v411;
  BOOL v412;
  BOOL v413;
  BOOL v414;
  BOOL v415;
  BOOL v416;
  BOOL v417;
  BOOL v418;
  BOOL v419;
  BOOL v420;

  v2 = (void *)MEMORY[0x19AEB9C30]();
  {
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
    v3 = 1;
  }
  v4 = 1;
  if (!WebKit::checkUsageDescriptionStringForType((WebKit *)1, v3))
    v4 = WebKit::checkUsageDescriptionStringForType((WebKit *)2, v5);
  v6 = (WebCore::RealtimeMediaSourceCenter *)WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key, v4);
  {
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v7 = WebCore::RealtimeMediaSourceCenter::shouldInterruptAudioOnPageVisibilityChange(v6);
  WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key, v7);
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, (const WTF::String *)(this + 5), v8);
  {
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl;
  }
  v10 = WebKit::debugUserDefaultsValue(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key, v9);
  if (v10)
  {
    v12 = (void *)v10;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key, objc_msgSend(v12, "unsignedIntegerValue"));
  }
  {
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key, (const WTF::String *)(this + 5), v11);
  {
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key, (const WTF::String *)(this + 5), v13);
  {
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::declarativeWebPushKey(void)::key, (const WTF::String *)(this + 5), v14);
  {
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::disableScreenSizeOverrideKey(void)::key, (const WTF::String *)(this + 5), v15);
  {
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::forceAlwaysUserScalableKey(void)::key, (const WTF::String *)(this + 5), v16);
  {
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key, (const WTF::String *)(this + 5), v17);
  {
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key, (const WTF::String *)(this + 5), v18);
  {
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key, (const WTF::String *)(this + 5), v19);
  {
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::needsInAppBrowserPrivacyQuirksKey(void)::key, (const WTF::String *)(this + 5), v20);
  {
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key, (const WTF::String *)(this + 5), v21);
  {
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key, (const WTF::String *)(this + 5), v22);
  {
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::setDebugBoolValueIfInUserDefaults(this + 2, this + 3, (const WTF::String *)(this + 4), (const WTF::String **)&WebKit::WebPreferencesKey::webInspectorEngineeringSettingsAllowedKey(void)::key, (const WTF::String *)(this + 5), v23);
  if (this[2])
  {
    v420 = 0;
    {
      WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key, &v420))
    {
      {
        WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key, v420);
    }
    v419 = 0;
    {
      WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key, &v419))
    {
      {
        WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key, v419);
    }
    v418 = 0;
    {
      WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key, &v418))
    {
      {
        WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedCompositingForFixedPositionEnabledKey(void)::key, v418);
    }
    v417 = 0;
    {
      WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key, &v417))
    {
      {
        WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key, v417);
    }
    v416 = 0;
    {
      WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key, &v416))
    {
      {
        WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowContentSecurityPolicySourceStarToMatchAnyProtocolKey(void)::key, v416);
    }
    v415 = 0;
    {
      WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key, &v415))
    {
      {
        WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowDisplayOfInsecureContentKey(void)::key, v415);
    }
    v414 = 0;
    {
      WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key, &v414))
    {
      {
        WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key, v414);
    }
    v413 = 0;
    {
      WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key, &v413))
    {
      {
        WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowMultiElementImplicitSubmissionKey(void)::key, v413);
    }
    v412 = 0;
    {
      WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key, &v412))
    {
      {
        WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowRunningOfInsecureContentKey(void)::key, v412);
    }
    v411 = 0;
    {
      WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key, &v411))
    {
      {
        WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowSettingAnyXHRHeaderFromFileURLsKey(void)::key, v411);
    }
    v410 = 0;
    {
      WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key, &v410))
    {
      {
        WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key, v410);
    }
    v409 = 0;
    {
      WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key, &v409))
    {
      {
        WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key, v409);
    }
    v408 = 0;
    {
      WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key, &v408))
    {
      {
        WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackAfterFullscreenKey(void)::key, v408);
    }
    v407 = 0;
    {
      WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key, &v407))
    {
      {
        WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key, v407);
    }
    v406 = 0;
    {
      WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key, &v406))
    {
      {
        WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateFormControlDesignEnabledKey(void)::key, v406);
    }
    v405 = 0;
    {
      WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key, &v405))
    {
      {
        WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateFullScreenControlDesignEnabledKey(void)::key, v405);
    }
    v404 = 0;
    {
      WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key, &v404))
    {
      {
        WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key, v404);
    }
    v403 = 0;
    {
      WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key, &v403))
    {
      {
        WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::appleMailPaginationQuirkEnabledKey(void)::key, v403);
    }
    v402 = 0;
    {
      WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key, &v402))
    {
      {
        WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key, v402);
    }
    v401 = 0;
    {
      WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::key, &v401))
    {
      {
        WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::key, v401);
    }
    v400 = 0;
    {
      WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key, &v400))
    {
      {
        WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key, v400);
    }
    v399 = 0;
    {
      WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key, &v399))
    {
      {
        WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::audioControlsScaleWithPageZoomKey(void)::key, v399);
    }
    v398 = 0;
    {
      WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key, &v398))
    {
      {
        WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key, v398);
    }
    v397 = 0;
    {
      WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key, &v397))
    {
      {
        WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key, v397);
    }
    v396 = 0;
    {
      WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key, &v396))
    {
      {
        WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key, v396);
    }
    v395 = 0;
    {
      WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key, &v395))
    {
      {
        WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key, v395);
    }
    v394 = 0;
    {
      WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key, &v394))
    {
      {
        WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key, v394);
    }
    v393 = 0;
    {
      WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key, &v393))
    {
      {
        WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::contentDispositionAttachmentSandboxEnabledKey(void)::key, v393);
    }
    v392 = 0;
    {
      WebKit::WebPreferencesKey::contextMenuQRCodeDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::contextMenuQRCodeDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contextMenuQRCodeDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::contextMenuQRCodeDetectionEnabledKey(void)::key, &v392))
    {
      {
        WebKit::WebPreferencesKey::contextMenuQRCodeDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::contextMenuQRCodeDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contextMenuQRCodeDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::contextMenuQRCodeDetectionEnabledKey(void)::key, v392);
    }
    v391 = 0;
    {
      WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key, &v391))
    {
      {
        WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key, &v391);
    }
    v390 = 0;
    {
      WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key, &v390))
    {
      {
        WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key, v390);
    }
    v389 = 0;
    {
      WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key, &v389))
    {
      {
        WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key, v389);
    }
    v388 = 0;
    {
      WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key, &v388))
    {
      {
        WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataDetectorTypesKey(void)::key, v388);
    }
    v387 = 0;
    {
      WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::key, &v387))
    {
      {
        WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::key, v387);
    }
    v386 = 0.0;
    {
      WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key, &v386))
    {
      {
        WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key, v386);
    }
    v385 = 0.0;
    {
      WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key, &v385))
    {
      {
        WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key, v385);
    }
    v384 = 0;
    {
      WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key, &v384))
    {
      {
        WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key, &v384);
    }
    v383 = 0;
    {
      WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, &v383))
    {
      {
        WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, v383);
    }
    v382 = 0;
    {
      WebKit::WebPreferencesKey::deviceHeightKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deviceHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceHeightKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::deviceHeightKey(void)::key, &v382))
    {
      {
        WebKit::WebPreferencesKey::deviceHeightKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::deviceHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceHeightKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deviceHeightKey(void)::key, v382);
    }
    v381 = 0;
    {
      WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key, &v381))
    {
      {
        WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deviceOrientationEventEnabledKey(void)::key, v381);
    }
    v380 = 0;
    {
      WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key, &v380))
    {
      {
        WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deviceOrientationPermissionAPIEnabledKey(void)::key, v380);
    }
    v379 = 0;
    {
      WebKit::WebPreferencesKey::deviceWidthKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deviceWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceWidthKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::deviceWidthKey(void)::key, &v379))
    {
      {
        WebKit::WebPreferencesKey::deviceWidthKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::deviceWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deviceWidthKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deviceWidthKey(void)::key, v379);
    }
    v378 = 0;
    {
      WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key, &v378))
    {
      {
        WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::disabledAdaptationsMetaTagEnabledKey(void)::key, v378);
    }
    v377 = 0;
    {
      WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key, &v377))
    {
      {
        WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key, v377);
    }
    v376 = 0;
    {
      WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key, &v376))
    {
      {
        WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key, v376);
    }
    v375 = 0;
    {
      WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key, &v375))
    {
      {
        WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key, v375);
    }
    v374 = 0;
    {
      WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key, &v374))
    {
      {
        WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key, v374);
    }
    v373 = 0;
    {
      WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, &v373))
    {
      {
        WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isExtensibleSSOEnabledKey(void)::key, v373);
    }
    v372 = 0;
    {
      WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key, &v372))
    {
      {
        WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key, &v372);
    }
    v371 = 0;
    {
      WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key, &v371))
    {
      {
        WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key, &v371);
    }
    v370 = 0;
    {
      WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key, &v370))
    {
      {
        WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key, &v370);
    }
    v369 = 0;
    {
      WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key, &v369))
    {
      {
        WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceCompositingModeKey(void)::key, v369);
    }
    v368 = 0;
    {
      WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key, &v368))
    {
      {
        WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key, v368);
    }
    v367 = 0;
    {
      WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key, &v367))
    {
      {
        WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceWebGLUsesLowPowerKey(void)::key, v367);
    }
    v366 = 0;
    {
      WebKit::WebPreferencesKey::isGStreamerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isGStreamerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isGStreamerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::isGStreamerEnabledKey(void)::key, &v366))
    {
      {
        WebKit::WebPreferencesKey::isGStreamerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::isGStreamerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isGStreamerEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isGStreamerEnabledKey(void)::key, v366);
    }
    v365 = 0;
    {
      WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key, &v365))
    {
      {
        WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key, v365);
    }
    v364 = 0.0;
    {
      WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key, &v364))
    {
      {
        WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key, v364);
    }
    v363 = 0;
    {
      WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key, &v363))
    {
      {
        WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::incompleteImageBorderEnabledKey(void)::key, v363);
    }
    v362 = 0;
    {
      WebKit::WebPreferencesKey::incrementalPDFLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::incrementalPDFLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incrementalPDFLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::incrementalPDFLoadingEnabledKey(void)::key, &v362))
    {
      {
        WebKit::WebPreferencesKey::incrementalPDFLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::incrementalPDFLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incrementalPDFLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::incrementalPDFLoadingEnabledKey(void)::key, v362);
    }
    v361 = 0.0;
    {
      WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key, &v361))
    {
      {
        WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key, v361);
    }
    v360 = 0;
    {
      WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key, &v360))
    {
      {
        WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key, v360);
    }
    v359 = 0;
    {
      WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key, &v359))
    {
      {
        WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key, v359);
    }
    v358 = 0;
    {
      WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key, &v358))
    {
      {
        WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key, v358);
    }
    v357 = 0;
    {
      WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key, &v357))
    {
      {
        WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key, v357);
    }
    v356 = 0;
    {
      WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key, &v356))
    {
      {
        WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key, v356);
    }
    v355 = 0;
    {
      WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::key, &v355))
    {
      {
        WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::key, &v355);
    }
    v354 = 0.0;
    {
      WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key, &v354))
    {
      {
        WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactionRegionInlinePaddingKey(void)::key, v354);
    }
    v353 = 0.0;
    {
      WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key, &v353))
    {
      {
        WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactionRegionMinimumCornerRadiusKey(void)::key, v353);
    }
    v352 = 0;
    {
      WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key, &v352))
    {
      {
        WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interruptAudioOnPageVisibilityChangeEnabledKey(void)::key, v352);
    }
    v351 = 0;
    {
      WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key, &v351))
    {
      {
        WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interruptVideoOnPageVisibilityChangeEnabledKey(void)::key, v351);
    }
    v350 = 0;
    {
      WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key, &v350))
    {
      {
        WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key, v350);
    }
    v349 = 0;
    {
      WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key, &v349))
    {
      {
        WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key, v349);
    }
    v348 = 0;
    {
      WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key, &v348))
    {
      {
        WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key, v348);
    }
    v347 = 0;
    {
      WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key, &v347))
    {
      {
        WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key, v347);
    }
    v346 = 0;
    {
      WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key, &v346))
    {
      {
        WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key, v346);
    }
    v345 = 0;
    {
      WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key, &v345))
    {
      {
        WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key, v345);
    }
    v344 = 0;
    {
      WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::key, &v344))
    {
      {
        WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::layoutFallbackWidthKey(void)::key, v344);
    }
    v343 = 0.0;
    {
      WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::key, &v343))
    {
      {
        WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::layoutViewportHeightExpansionFactorKey(void)::key, v343);
    }
    v342 = 0;
    {
      WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPreconnectKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::key, &v342))
    {
      {
        WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::linkPreconnectKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreconnectKey(void)::key, v342);
    }
    v341 = 0;
    {
      WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key, &v341))
    {
      {
        WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key, v341);
    }
    v340 = 0;
    {
      WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key, &v340))
    {
      {
        WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadDeferringEnabledKey(void)::key, v340);
    }
    v339 = 0;
    {
      WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key, &v339))
    {
      {
        WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key, v339);
    }
    v338 = 0.0;
    {
      WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::key, &v338))
    {
      {
        WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::key, v338);
    }
    v337 = 0;
    {
      WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key, &v337))
    {
      {
        WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::lowPowerVideoAudioBufferSizeEnabledKey(void)::key, v337);
    }
    v336 = 0.0;
    {
      WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key, &v336))
    {
      {
        WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key, v336);
    }
    v335 = 0.0;
    {
      WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key, &v335))
    {
      {
        WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key, v335);
    }
    v334 = 0;
    {
      WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key, &v334))
    {
      {
        WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mathMLEnabledKey(void)::key, v334);
    }
    v333 = 0.0;
    {
      WebKit::WebPreferencesKey::maxParseDurationKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::maxParseDurationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::maxParseDurationKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::maxParseDurationKey(void)::key, &v333))
    {
      {
        WebKit::WebPreferencesKey::maxParseDurationKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::maxParseDurationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::maxParseDurationKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::maxParseDurationKey(void)::key, v333);
    }
    v332 = 0;
    {
      WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::key, &v332))
    {
      {
        WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaAudioCodecIDsAllowedInLockdownModeKey(void)::key, &v332);
    }
    v331 = 0;
    {
      WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key, &v331))
    {
      {
        WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key, v331);
    }
    v330 = 0;
    {
      WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::key, &v330))
    {
      {
        WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCaptionFormatTypesAllowedInLockdownModeKey(void)::key, &v330);
    }
    v329 = 0;
    {
      WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::key, &v329))
    {
      {
        WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCodecTypesAllowedInLockdownModeKey(void)::key, &v329);
    }
    v328 = 0;
    {
      WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::key, &v328))
    {
      {
        WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaContainerTypesAllowedInLockdownModeKey(void)::key, &v328);
    }
    v327 = 0;
    {
      WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key, &v327))
    {
      {
        WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key, &v327);
    }
    v326 = 0;
    {
      WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key, &v326))
    {
      {
        WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaControlsContextMenusEnabledKey(void)::key, v326);
    }
    v325 = 0;
    {
      WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key, &v325))
    {
      {
        WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key, v325);
    }
    v324 = 0;
    {
      WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key, &v324))
    {
      {
        WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDataLoadsAutomaticallyKey(void)::key, v324);
    }
    v323 = 0;
    {
      WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::key, &v323))
    {
      {
        WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaEnabledKey(void)::key, v323);
    }
    v322 = 0.0;
    {
      WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key, &v322))
    {
      {
        WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaPreferredFullscreenWidthKey(void)::key, v322);
    }
    v321 = 0;
    {
      WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key, &v321))
    {
      {
        WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key, v321);
    }
    v320 = 0;
    {
      WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key, &v320))
    {
      {
        WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key, v320);
    }
    v319 = 0;
    {
      WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key, &v319))
    {
      {
        WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key, v319);
    }
    v318 = 0;
    {
      WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::key, &v318))
    {
      {
        WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaVideoCodecIDsAllowedInLockdownModeKey(void)::key, &v318);
    }
    v317 = 0.0;
    {
      WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key, &v317))
    {
      {
        WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key, v317);
    }
    v316 = 0.0;
    {
      WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::key, &v316))
    {
      {
        WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumLogicalFontSizeKey(void)::key, v316);
    }
    v315 = 0.0;
    {
      WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key, &v315))
    {
      {
        WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key, v315);
    }
    v314 = 0;
    {
      WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key, &v314))
    {
      {
        WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key, v314);
    }
    v313 = 0;
    {
      WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key, &v313))
    {
      {
        WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockScrollbarsControllerEnabledKey(void)::key, v313);
    }
    v312 = 0;
    {
      WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key, &v312))
    {
      {
        WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key, v312);
    }
    v311 = 0;
    {
      WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key, &v311))
    {
      {
        WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsAdobeFrameReloadingQuirkKey(void)::key, v311);
    }
    v310 = 0;
    {
      WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key, &v310))
    {
      {
        WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsFrameNameFallbackToIdQuirkKey(void)::key, v310);
    }
    v309 = 0;
    {
      WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key, &v309))
    {
      {
        WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsKeyboardEventDisambiguationQuirksKey(void)::key, v309);
    }
    v308 = 0;
    {
      WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key, &v308))
    {
      {
        WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key, v308);
    }
    v307 = 0;
    {
      WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key, &v307))
    {
      {
        WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginHUDEnabledKey(void)::key, v307);
    }
    v306 = 0;
    {
      WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key, &v306))
    {
      {
        WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::passiveTouchListenersAsDefaultOnDocumentKey(void)::key, v306);
    }
    v305 = 0.0;
    {
      WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::key, &v305))
    {
      {
        WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::passwordEchoDurationKey(void)::key, v305);
    }
    v304 = 0;
    {
      WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key, &v304))
    {
      {
        WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::passwordEchoEnabledKey(void)::key, v304);
    }
    v303 = 0;
    {
      WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key, &v303))
    {
      {
        WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key, &v303);
    }
    v302 = 0;
    {
      WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key, &v302))
    {
      {
        WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pictureInPictureAPIEnabledKey(void)::key, v302);
    }
    v301 = 0;
    {
      WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key, &v301))
    {
      {
        WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pitchCorrectionAlgorithmKey(void)::key, v301);
    }
    v300 = 0;
    {
      WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key, &v300))
    {
      {
        WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key, v300);
    }
    v299 = 0;
    {
      WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key, &v299))
    {
      {
        WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresPageVisibilityToPlayAudioKey(void)::key, v299);
    }
    v298 = 0;
    {
      WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key, &v298))
    {
      {
        WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key, v298);
    }
    v297 = 0;
    {
      WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key, &v297))
    {
      {
        WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key, v297);
    }
    v296 = 0;
    {
      WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key, &v296))
    {
      {
        WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key, v296);
    }
    v295 = 0;
    {
      WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key, &v295))
    {
      {
        WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureToLoadVideoKey(void)::key, v295);
    }
    v294 = 0;
    {
      WebKit::WebPreferencesKey::rubberBandingForSubScrollableRegionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::rubberBandingForSubScrollableRegionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::rubberBandingForSubScrollableRegionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::rubberBandingForSubScrollableRegionsEnabledKey(void)::key, &v294))
    {
      {
        WebKit::WebPreferencesKey::rubberBandingForSubScrollableRegionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::rubberBandingForSubScrollableRegionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::rubberBandingForSubScrollableRegionsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::rubberBandingForSubScrollableRegionsEnabledKey(void)::key, v294);
    }
    v293 = 0.0;
    {
      WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key, &v293))
    {
      {
        WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sampledPageTopColorMaxDifferenceKey(void)::key, v293);
    }
    v292 = 0.0;
    {
      WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetDoubleUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key, &v292))
    {
      {
        WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setDoubleValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sampledPageTopColorMinHeightKey(void)::key, v292);
    }
    v291 = 0;
    {
      WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key, &v291))
    {
      {
        WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key, &v291);
    }
    v290 = 0;
    {
      WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key, &v290))
    {
      {
        WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key, v290);
    }
    v289 = 0;
    {
      WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key, &v289))
    {
      {
        WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key, &v289);
    }
    v288 = 0;
    {
      WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key, &v288))
    {
      {
        WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key, v288);
    }
    v287 = 0;
    {
      WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key, &v287))
    {
      {
        WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerEntitlementDisabledForTestingKey(void)::key, v287);
    }
    v286 = 0;
    {
      WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key, &v286))
    {
      {
        WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key, v286);
    }
    v285 = 0;
    {
      WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key, &v285))
    {
      {
        WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldConvertInvalidURLsToBlankKey(void)::key, v285);
    }
    v284 = 0;
    {
      WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key, &v284))
    {
      {
        WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key, v284);
    }
    v283 = 0;
    {
      WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key, &v283))
    {
      {
        WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDecidePolicyBeforeLoadingQuickLookPreviewKey(void)::key, v283);
    }
    v282 = 0;
    {
      WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key, &v282))
    {
      {
        WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key, v282);
    }
    v281 = 0;
    {
      WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key, &v281))
    {
      {
        WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key, v281);
    }
    v280 = 0;
    {
      WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key, &v280))
    {
      {
        WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldEnableTextAutosizingBoostKey(void)::key, v280);
    }
    v279 = 0;
    {
      WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key, &v279))
    {
      {
        WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldIgnoreMetaViewportKey(void)::key, v279);
    }
    v278 = 0;
    {
      WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key, &v278))
    {
      {
        WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key, v278);
    }
    v277 = 0;
    {
      WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key, &v277))
    {
      {
        WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key, v277);
    }
    v276 = 0;
    {
      WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key, &v276))
    {
      {
        WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldRestrictBaseURLSchemesKey(void)::key, v276);
    }
    v275 = 0;
    {
      WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key, &v275))
    {
      {
        WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key, v275);
    }
    v274 = 0;
    {
      WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key, &v274))
    {
      {
        WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key, v274);
    }
    v273 = 0;
    {
      WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key, &v273))
    {
      {
        WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key, v273);
    }
    v272 = 0;
    {
      WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key, &v272))
    {
      {
        WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key, v272);
    }
    v271 = 0;
    {
      WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key, &v271))
    {
      {
        WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shrinksStandaloneImagesToFitKey(void)::key, v271);
    }
    v270 = 0;
    {
      WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key, &v270))
    {
      {
        WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key, v270);
    }
    v269 = 0;
    {
      WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key, &v269))
    {
      {
        WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key, v269);
    }
    v268 = 0;
    {
      WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key, &v268))
    {
      {
        WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key, v268);
    }
    v267 = 0;
    {
      WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::standaloneKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::standaloneKey(void)::key, &v267))
    {
      {
        WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::standaloneKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standaloneKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::standaloneKey(void)::key, v267);
    }
    v266 = 0;
    {
      WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetStringUserValueForKey(this, (const WTF::String **)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key, &v266))
    {
      {
        WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setStringValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key, &v266);
    }
    v265 = 0;
    {
      WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key, &v265))
    {
      {
        WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key, v265);
    }
    v264 = 0;
    {
      WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key, &v264))
    {
      {
        WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::systemLayoutDirectionKey(void)::key, v264);
    }
    v263 = 0;
    {
      WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key, &v263))
    {
      {
        WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::systemPreviewEnabledKey(void)::key, v263);
    }
    v262 = 0;
    {
      WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::key, &v262))
    {
      {
        WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::key, v262);
    }
    v261 = 0;
    {
      WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key, &v261))
    {
      {
        WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key, v261);
    }
    v260 = 0;
    {
      WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key, &v260))
    {
      {
        WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::temporaryTileCohortRetentionEnabledKey(void)::key, v260);
    }
    v259 = 0;
    {
      WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key, &v259))
    {
      {
        WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key, v259);
    }
    v258 = 0;
    {
      WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key, &v258))
    {
      {
        WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key, v258);
    }
    v257 = 0;
    {
      WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key, &v257))
    {
      {
        WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textExtractionEnabledKey(void)::key, v257);
    }
    v256 = 0;
    {
      WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, &v256))
    {
      {
        WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, v256);
    }
    v255 = 0;
    {
      WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key, &v255))
    {
      {
        WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key, v255);
    }
    v254 = 0;
    {
      WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key, &v254))
    {
      {
        WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::treatsAnyTextCSSLinkAsStylesheetKey(void)::key, v254);
    }
    v253 = 0;
    {
      WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key, &v253))
    {
      {
        WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useImageDocumentForSubframePDFKey(void)::key, v253);
    }
    v252 = 0;
    {
      WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key, &v252))
    {
      {
        WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usePreHTML5ParserQuirksKey(void)::key, v252);
    }
    v251 = 0;
    {
      WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key, &v251))
    {
      {
        WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key, v251);
    }
    v250 = 0;
    {
      WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key, &v250))
    {
      {
        WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key, v250);
    }
    v249 = 0;
    {
      WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key, &v249))
    {
      {
        WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key, v249);
    }
    v248 = 0;
    {
      WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key, &v248))
    {
      {
        WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp8DecoderEnabledKey(void)::key, v248);
    }
    v247 = 0;
    {
      WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, &v247))
    {
      {
        WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, v247);
    }
    v246 = 0;
    {
      WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key, &v246))
    {
      {
        WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key, v246);
    }
    v245 = 0;
    {
      WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key, &v245))
    {
      {
        WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoPresentationModeAPIEnabledKey(void)::key, v245);
    }
    v244 = 0;
    {
      WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key, &v244))
    {
      {
        WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoQualityIncludesDisplayCompositingEnabledKey(void)::key, v244);
    }
    v243 = 0;
    {
      WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key, &v243))
    {
      {
        WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key, v243);
    }
    v242 = 0;
    {
      WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key, &v242))
    {
      {
        WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualViewportEnabledKey(void)::key, v242);
    }
    v241 = 0;
    {
      WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key, &v241))
    {
      {
        WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::wantsBalancedSetDefersLoadingBehaviorKey(void)::key, v241);
    }
    v240 = 0;
    {
      WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key, &v240))
    {
      {
        WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key, v240);
    }
    v239 = 0;
    {
      WebKit::WebPreferencesKey::webMFormatReaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webMFormatReaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMFormatReaderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webMFormatReaderEnabledKey(void)::key, &v239))
    {
      {
        WebKit::WebPreferencesKey::webMFormatReaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webMFormatReaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMFormatReaderEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webMFormatReaderEnabledKey(void)::key, v239);
    }
    v238 = 0;
    {
      WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key, &v238))
    {
      {
        WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webMParserEnabledKey(void)::key, v238);
    }
    v237 = 0;
    {
      WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key, &v237))
    {
      {
        WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key, v237);
    }
    v236 = 0;
    {
      WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key, &v236))
    {
      {
        WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webSocketEnabledKey(void)::key, v236);
    }
    v235 = 0;
    {
      WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key, &v235))
    {
      {
        WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::windowFocusRestrictedKey(void)::key, v235);
    }
    v234 = 0;
    {
      WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key, &v234))
    {
      {
        WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::wirelessPlaybackTargetAPIEnabledKey(void)::key, v234);
    }
    v233 = 0;
    {
      WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key, &v233))
    {
      {
        WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::grammarAndSpellingPseudoElementsEnabledKey(void)::key, v233);
    }
    v232 = 0;
    {
      WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key, &v232))
    {
      {
        WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key, v232);
    }
    v231 = 0;
    {
      WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key, &v231))
    {
      {
        WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::abortSignalAnyOperationEnabledKey(void)::key, v231);
    }
    v230 = 0;
    {
      WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key, &v230))
    {
      {
        WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::accessHandleEnabledKey(void)::key, v230);
    }
    v229 = 0;
    {
      WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key, &v229))
    {
      {
        WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key, v229);
    }
    v228 = 0;
    {
      WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key, &v228))
    {
      {
        WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowWebGLInWorkersKey(void)::key, v228);
    }
    v227 = 0;
    {
      WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key, &v227))
    {
      {
        WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key, v227);
    }
    v226 = 0;
    {
      WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key, &v226))
    {
      {
        WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key, v226);
    }
    v225 = 0;
    {
      WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key, &v225))
    {
      {
        WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alternateWebMPlayerEnabledKey(void)::key, v225);
    }
    v224 = 0;
    {
      WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key, &v224))
    {
      {
        WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::asyncClipboardAPIEnabledKey(void)::key, v224);
    }
    v223 = 0;
    {
      WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, &v223))
    {
      {
        WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v223);
    }
    v222 = 0;
    {
      WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key, &v222))
    {
      {
        WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentWideLayoutEnabledKey(void)::key, v222);
    }
    v221 = 0;
    {
      WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key, &v221))
    {
      {
        WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::extendedAudioDescriptionsEnabledKey(void)::key, v221);
    }
    v220 = 0;
    {
      WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key, &v220))
    {
      {
        WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::audioDescriptionsEnabledKey(void)::key, v220);
    }
    v219 = 0;
    {
      WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key, &v219))
    {
      {
        WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domAudioSessionEnabledKey(void)::key, v219);
    }
    v218 = 0;
    {
      WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key, &v218))
    {
      {
        WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key, v218);
    }
    v217 = 0;
    {
      WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key, &v217))
    {
      {
        WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::broadcastChannelEnabledKey(void)::key, v217);
    }
    v216 = 0;
    {
      WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key, &v216))
    {
      {
        WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::broadcastChannelOriginPartitioningEnabledKey(void)::key, v216);
    }
    v215 = 0;
    {
      WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key, &v215))
    {
      {
        WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::css3DTransformBackfaceVisibilityInteroperabilityEnabledKey(void)::key, v215);
    }
    v214 = 0;
    {
      WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key, &v214))
    {
      {
        WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssCounterStyleAtRulesEnabledKey(void)::key, v214);
    }
    v213 = 0;
    {
      WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key, &v213))
    {
      {
        WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssFontFaceSizeAdjustEnabledKey(void)::key, v213);
    }
    v212 = 0;
    {
      WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key, &v212))
    {
      {
        WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssStartingStyleAtRuleEnabledKey(void)::key, v212);
    }
    v211 = 0;
    {
      WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key, &v211))
    {
      {
        WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::accentColorEnabledKey(void)::key, v211);
    }
    v210 = 0;
    {
      WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key, &v210))
    {
      {
        WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssContentVisibilityEnabledKey(void)::key, v210);
    }
    v209 = 0;
    {
      WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::masonryEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::key, &v209))
    {
      {
        WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::masonryEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::masonryEnabledKey(void)::key, v209);
    }
    v208 = 0;
    {
      WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key, &v208))
    {
      {
        WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssMotionPathEnabledKey(void)::key, v208);
    }
    v207 = 0;
    {
      WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key, &v207))
    {
      {
        WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssNestingEnabledKey(void)::key, v207);
    }
    v206 = 0;
    {
      WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key, &v206))
    {
      {
        WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::overscrollBehaviorEnabledKey(void)::key, v206);
    }
    v205 = 0;
    {
      WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key, &v205))
    {
      {
        WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssScopeAtRuleEnabledKey(void)::key, v205);
    }
    v204 = 0;
    {
      WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key, &v204))
    {
      {
        WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssUnprefixedBackdropFilterEnabledKey(void)::key, v204);
    }
    v203 = 0;
    {
      WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key, &v203))
    {
      {
        WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssLightDarkEnabledKey(void)::key, v203);
    }
    v202 = 0;
    {
      WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key, &v202))
    {
      {
        WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssMarginTrimEnabledKey(void)::key, v202);
    }
    v201 = 0;
    {
      WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key, &v201))
    {
      {
        WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssStyleQueriesEnabledKey(void)::key, v201);
    }
    v200 = 0;
    {
      WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key, &v200))
    {
      {
        WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextBoxTrimEnabledKey(void)::key, v200);
    }
    v199 = 0;
    {
      WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key, &v199))
    {
      {
        WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssTextWrapStyleEnabledKey(void)::key, v199);
    }
    v198 = 0;
    {
      WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key, &v198))
    {
      {
        WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key, v198);
    }
    v197 = 0;
    {
      WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key, &v197))
    {
      {
        WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssOMViewSmoothScrollingEnabledKey(void)::key, v197);
    }
    v196 = 0;
    {
      WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key, &v196))
    {
      {
        WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cacheAPIEnabledKey(void)::key, v196);
    }
    v195 = 0;
    {
      WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key, &v195))
    {
      {
        WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasColorSpaceEnabledKey(void)::key, v195);
    }
    v194 = 0;
    {
      WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key, &v194))
    {
      {
        WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key, v194);
    }
    v193 = 0;
    {
      WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key, &v193))
    {
      {
        WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::clearSiteDataHTTPHeaderEnabledKey(void)::key, v193);
    }
    v192 = 0;
    {
      WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key, &v192))
    {
      {
        WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key, v192);
    }
    v191 = 0;
    {
      WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key, &v191))
    {
      {
        WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::compressionStreamEnabledKey(void)::key, v191);
    }
    v190 = 0;
    {
      WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::cookieEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::key, &v190))
    {
      {
        WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::cookieEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::key, v190);
    }
    v189 = 0;
    {
      WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key, &v189))
    {
      {
        WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::crossOriginEmbedderPolicyEnabledKey(void)::key, v189);
    }
    v188 = 0;
    {
      WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key, &v188))
    {
      {
        WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::crossOriginOpenerPolicyEnabledKey(void)::key, v188);
    }
    v187 = 0;
    {
      WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key, &v187))
    {
      {
        WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key, v187);
    }
    v186 = 0;
    {
      WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key, &v186))
    {
      {
        WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::customStateSetEnabledKey(void)::key, v186);
    }
    v185 = 0;
    {
      WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key, &v185))
    {
      {
        WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key, v185);
    }
    v184 = 0;
    {
      WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key, &v184))
    {
      {
        WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key, v184);
    }
    v183 = 0;
    {
      WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key, &v183))
    {
      {
        WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key, v183);
    }
    v182 = 0;
    {
      WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key, &v182))
    {
      {
        WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeDateEnabledKey(void)::key, v182);
    }
    v181 = 0;
    {
      WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key, &v181))
    {
      {
        WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dateTimeInputsEditableComponentsEnabledKey(void)::key, v181);
    }
    v180 = 0;
    {
      WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key, &v180))
    {
      {
        WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeShadowRootsParserAPIsEnabledKey(void)::key, v180);
    }
    v179 = 0;
    {
      WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key, &v179))
    {
      {
        WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::declarativeShadowRootsSerializerAPIsEnabledKey(void)::key, v179);
    }
    v178 = 0;
    {
      WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key, &v178))
    {
      {
        WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDeferAsynchronousScriptsUntilAfterDocumentLoadOrFirstPaintKey(void)::key, v178);
    }
    v177 = 0;
    {
      WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key, &v177))
    {
      {
        WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecateAESCFBWebCryptoEnabledKey(void)::key, v177);
    }
    v176 = 0;
    {
      WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key, &v176))
    {
      {
        WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::deprecateRSAESPKCSWebCryptoEnabledKey(void)::key, v176);
    }
    v175 = 0;
    {
      WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key, &v175))
    {
      {
        WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::uAVisualTransitionDetectionEnabledKey(void)::key, v175);
    }
    v174 = 0;
    {
      WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key, &v174))
    {
      {
        WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key, v174);
    }
    v173 = 0;
    {
      WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key, &v173))
    {
      {
        WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key, v173);
    }
    v172 = 0;
    {
      WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key, &v172))
    {
      {
        WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isThirdPartyCookieBlockingDisabledKey(void)::key, v172);
    }
    v171 = 0;
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key, &v171))
    {
      {
        WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalDisabledKey(void)::key, v171);
    }
    v170 = 0;
    {
      WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key, &v170))
    {
      {
        WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::disallowSyncXHRDuringPageDismissalEnabledKey(void)::key, v170);
    }
    v169 = 0;
    {
      WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key, &v169))
    {
      {
        WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::embedElementEnabledKey(void)::key, v169);
    }
    v168 = 0;
    {
      WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key, &v168))
    {
      {
        WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasFingerprintingQuirkEnabledKey(void)::key, v168);
    }
    v167 = 0;
    {
      WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key, &v167))
    {
      {
        WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key, v167);
    }
    v166 = 0;
    {
      WebKit::WebPreferencesKey::mediaSessionCoordinatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSessionCoordinatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionCoordinatorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSessionCoordinatorEnabledKey(void)::key, &v166))
    {
      {
        WebKit::WebPreferencesKey::mediaSessionCoordinatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaSessionCoordinatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionCoordinatorEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSessionCoordinatorEnabledKey(void)::key, v166);
    }
    v165 = 0;
    {
      WebKit::WebPreferencesKey::mediaSessionPlaylistEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSessionPlaylistEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionPlaylistEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSessionPlaylistEnabledKey(void)::key, &v165))
    {
      {
        WebKit::WebPreferencesKey::mediaSessionPlaylistEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaSessionPlaylistEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionPlaylistEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSessionPlaylistEnabledKey(void)::key, v165);
    }
    v164 = 0;
    {
      WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key, &v164))
    {
      {
        WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceInlinePaintingEnabledKey(void)::key, v164);
    }
    v163 = 0;
    {
      WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::key, &v163))
    {
      {
        WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::ftpEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::ftpEnabledKey(void)::key, v163);
    }
    v162 = 0;
    {
      WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key, &v162))
    {
      {
        WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fetchPriorityEnabledKey(void)::key, v162);
    }
    v161 = 0;
    {
      WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key, &v161))
    {
      {
        WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fileSystemAccessEnabledKey(void)::key, v161);
    }
    v160 = 0;
    {
      WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key, &v160))
    {
      {
        WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fileReaderAPIEnabledKey(void)::key, v160);
    }
    v159 = 0;
    {
      WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key, &v159))
    {
      {
        WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key, v159);
    }
    v158 = 0;
    {
      WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key, &v158))
    {
      {
        WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForCanvasRenderingEnabledKey(void)::key, v158);
    }
    v157 = 0;
    {
      WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, &v157))
    {
      {
        WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v157);
    }
    v156 = 0;
    {
      WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, &v156))
    {
      {
        WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForMediaEnabledKey(void)::key, v156);
    }
    v155 = 0;
    {
      WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::key, &v155))
    {
      {
        WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDisplayCaptureKey(void)::key, v155);
    }
    v154 = 0;
    {
      WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key, &v154))
    {
      {
        WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key, v154);
    }
    v153 = 0;
    {
      WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key, &v153))
    {
      {
        WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadVibrationActuatorEnabledKey(void)::key, v153);
    }
    v152 = 0;
    {
      WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key, &v152))
    {
      {
        WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key, v152);
    }
    v151 = 0;
    {
      WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key, &v151))
    {
      {
        WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::genericCueAPIEnabledKey(void)::key, v151);
    }
    v150 = 0;
    {
      WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key, &v150))
    {
      {
        WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::graphicsContextFiltersEnabledKey(void)::key, v150);
    }
    v149 = 0;
    {
      WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key, &v149))
    {
      {
        WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::detailsNameAttributeEnabledKey(void)::key, v149);
    }
    v148 = 0;
    {
      WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key, &v148))
    {
      {
        WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key, v148);
    }
    v147 = 0;
    {
      WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key, &v147))
    {
      {
        WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::popoverAttributeEnabledKey(void)::key, v147);
    }
    v146 = 0;
    {
      WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key, &v146))
    {
      {
        WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::switchControlEnabledKey(void)::key, v146);
    }
    v145 = 0;
    {
      WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key, &v145))
    {
      {
        WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key, v145);
    }
    v144 = 0;
    {
      WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key, &v144))
    {
      {
        WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key, v144);
    }
    v143 = 0;
    {
      WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key, &v143))
    {
      {
        WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key, v143);
    }
    v142 = 0;
    {
      WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key, &v142))
    {
      {
        WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key, v142);
    }
    v141 = 0;
    {
      WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key, &v141))
    {
      {
        WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::itpDebugModeEnabledKey(void)::key, v141);
    }
    v140 = 0;
    {
      WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key, &v140))
    {
      {
        WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key, v140);
    }
    v139 = 0;
    {
      WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key, &v139))
    {
      {
        WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageAnimationControlEnabledKey(void)::key, v139);
    }
    v138 = 0;
    {
      WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key, &v138))
    {
      {
        WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::indexedDBAPIEnabledKey(void)::key, v138);
    }
    v137 = 0;
    {
      WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key, &v137))
    {
      {
        WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key, v137);
    }
    v136 = 0;
    {
      WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key, &v136))
    {
      {
        WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key, v136);
    }
    v135 = 0;
    {
      WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key, &v135))
    {
      {
        WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::lazyIframeLoadingEnabledKey(void)::key, v135);
    }
    v134 = 0;
    {
      WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key, &v134))
    {
      {
        WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::lazyImageLoadingEnabledKey(void)::key, v134);
    }
    v133 = 0;
    {
      WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key, &v133))
    {
      {
        WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showModalDialogEnabledKey(void)::key, v133);
    }
    v132 = 0;
    {
      WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key, &v132))
    {
      {
        WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreloadResponsiveImagesEnabledKey(void)::key, v132);
    }
    v131 = 0;
    {
      WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key, &v131))
    {
      {
        WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkModulePreloadEnabledKey(void)::key, v131);
    }
    v130 = 0;
    {
      WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key, &v130))
    {
      {
        WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreconnectEarlyHintsEnabledKey(void)::key, v130);
    }
    v129 = 0;
    {
      WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key, &v129))
    {
      {
        WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::liveRangeSelectionEnabledKey(void)::key, v129);
    }
    v128 = 0;
    {
      WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key, &v128))
    {
      {
        WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadWebArchiveWithEphemeralStorageEnabledKey(void)::key, v128);
    }
    v127 = 0;
    {
      WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key, &v127))
    {
      {
        WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key, v127);
    }
    v126 = 0;
    {
      WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key, &v126))
    {
      {
        WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key, v126);
    }
    v125 = 0;
    {
      WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key, &v125))
    {
      {
        WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceEnabledKey(void)::key, v125);
    }
    v124 = 0;
    {
      WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key, &v124))
    {
      {
        WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceNeedsAirPlayKey(void)::key, v124);
    }
    v123 = 0;
    {
      WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key, &v123))
    {
      {
        WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilitiesExtensionsEnabledKey(void)::key, v123);
    }
    v122 = 0;
    {
      WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key, &v122))
    {
      {
        WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilityGrantsEnabledKey(void)::key, v122);
    }
    v121 = 0;
    {
      WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key, &v121))
    {
      {
        WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSessionEnabledKey(void)::key, v121);
    }
    v120 = 0;
    {
      WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key, &v120))
    {
      {
        WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key, v120);
    }
    v119 = 0;
    {
      WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key, &v119))
    {
      {
        WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key, v119);
    }
    v118 = 0;
    {
      WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key, &v118))
    {
      {
        WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaRecorderEnabledKey(void)::key, v118);
    }
    v117 = 0;
    {
      WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key, &v117))
    {
      {
        WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceInWorkerEnabledKey(void)::key, v117);
    }
    v116 = 0;
    {
      WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key, &v116))
    {
      {
        WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaStreamTrackProcessingEnabledKey(void)::key, v116);
    }
    v115 = 0;
    {
      WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key, &v115))
    {
      {
        WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeMonthEnabledKey(void)::key, v115);
    }
    v114 = 0;
    {
      WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key, &v114))
    {
      {
        WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key, v114);
    }
    v113 = 0;
    {
      WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key, &v113))
    {
      {
        WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key, v113);
    }
    v112 = 0;
    {
      WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key, &v112))
    {
      {
        WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key, v112);
    }
    v111 = 0;
    {
      WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key, &v111))
    {
      {
        WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::accessibilityThreadTextApisEnabledKey(void)::key, v111);
    }
    v110 = 0;
    {
      WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key, &v110))
    {
      {
        WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasInWorkersEnabledKey(void)::key, v110);
    }
    v109 = 0;
    {
      WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key, &v109))
    {
      {
        WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::offscreenCanvasEnabledKey(void)::key, v109);
    }
    v108 = 0;
    {
      WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key, &v108))
    {
      {
        WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::opusDecoderEnabledKey(void)::key, v108);
    }
    v107 = 0;
    {
      WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key, &v107))
    {
      {
        WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::overlappingBackingStoreProvidersEnabledKey(void)::key, v107);
    }
    v106 = 0;
    {
      WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key, &v106))
    {
      {
        WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::blobRegistryTopOriginPartitioningEnabledKey(void)::key, v106);
    }
    v105 = 0;
    {
      WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key, &v105))
    {
      {
        WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::permissionsAPIEnabledKey(void)::key, v105);
    }
    v104 = 0;
    {
      WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key, &v104))
    {
      {
        WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferPageRenderingUpdatesNear60FPSEnabledKey(void)::key, v104);
    }
    v103 = 0;
    {
      WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key, &v103))
    {
      {
        WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementDebugModeEnabledKey(void)::key, v103);
    }
    v102 = 0;
    {
      WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key, &v102))
    {
      {
        WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementFraudPreventionEnabledKey(void)::key, v102);
    }
    v101 = 0;
    {
      WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key, &v101))
    {
      {
        WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateClickMeasurementEnabledKey(void)::key, v101);
    }
    v100 = 0;
    {
      WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key, &v100))
    {
      {
        WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::privateTokenUsageByThirdPartyEnabledKey(void)::key, v100);
    }
    v99 = 0;
    {
      WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key, &v99))
    {
      {
        WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pushAPIEnabledKey(void)::key, v99);
    }
    v98 = 0;
    {
      WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key, &v98))
    {
      {
        WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::googleAntiFlickerOptimizationQuirkEnabledKey(void)::key, v98);
    }
    v97 = 0;
    {
      WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key, &v97))
    {
      {
        WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key, v97);
    }
    v96 = 0;
    {
      WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::reportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::key, &v96))
    {
      {
        WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::reportingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::reportingEnabledKey(void)::key, v96);
    }
    v95 = 0;
    {
      WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key, &v95))
    {
      {
        WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key, v95);
    }
    v94 = 0;
    {
      WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key, &v94))
    {
      {
        WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullscreenRequirementForScreenOrientationLockingEnabledKey(void)::key, v94);
    }
    v93 = 0;
    {
      WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key, &v93))
    {
      {
        WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sKAttributionEnabledKey(void)::key, v93);
    }
    v92 = 0;
    {
      WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key, &v92))
    {
      {
        WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::safeBrowsingEnabledKey(void)::key, v92);
    }
    v91 = 0;
    {
      WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key, &v91))
    {
      {
        WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenOrientationAPIEnabledKey(void)::key, v91);
    }
    v90 = 0;
    {
      WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key, &v90))
    {
      {
        WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenWakeLockAPIEnabledKey(void)::key, v90);
    }
    v89 = 0;
    {
      WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key, &v89))
    {
      {
        WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::screenCaptureEnabledKey(void)::key, v89);
    }
    v88 = 0;
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key, &v88))
    {
      {
        WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentFeatureDetectionEnabledKey(void)::key, v88);
    }
    v87 = 0;
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key, &v87))
    {
      {
        WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentIndicatorEnabledKey(void)::key, v87);
    }
    v86 = 0;
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key, &v86))
    {
      {
        WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentMarkingEnabledKey(void)::key, v86);
    }
    v85 = 0;
    {
      WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key, &v85))
    {
      {
        WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentEnabledKey(void)::key, v85);
    }
    v84 = 0;
    {
      WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key, &v84))
    {
      {
        WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollAnimatorEnabledKey(void)::key, v84);
    }
    v83 = 0;
    {
      WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::key, &v83))
    {
      {
        WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::searchInputIncrementalAttributeAndSearchEventEnabledKey(void)::key, v83);
    }
    v82 = 0;
    {
      WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key, &v82))
    {
      {
        WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectionAPIForShadowDOMEnabledKey(void)::key, v82);
    }
    v81 = 0;
    {
      WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key, &v81))
    {
      {
        WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectionFlippingEnabledKey(void)::key, v81);
    }
    v80 = 0;
    {
      WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key, &v80))
    {
      {
        WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sendMouseEventsToDisabledFormControlsEnabledKey(void)::key, v80);
    }
    v79 = 0;
    {
      WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key, &v79))
    {
      {
        WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkerNavigationPreloadEnabledKey(void)::key, v79);
    }
    v78 = 0;
    {
      WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key, &v78))
    {
      {
        WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key, v78);
    }
    v77 = 0;
    {
      WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key, &v77))
    {
      {
        WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sharedWorkerEnabledKey(void)::key, v77);
    }
    v76 = 0;
    {
      WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key, &v76))
    {
      {
        WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showMediaStatsContextMenuItemEnabledKey(void)::key, v76);
    }
    v75 = 0;
    {
      WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key, &v75))
    {
      {
        WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key, v75);
    }
    v74 = 0;
    {
      WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key, &v74))
    {
      {
        WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key, v74);
    }
    v73 = 0;
    {
      WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key, &v73))
    {
      {
        WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageAPIEstimateEnabledKey(void)::key, v73);
    }
    v72 = 0;
    {
      WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key, &v72))
    {
      {
        WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageAPIEnabledKey(void)::key, v72);
    }
    v71 = 0;
    {
      WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetUInt32UserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key, &v71))
    {
      {
        WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setUInt32ValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key, v71);
    }
    v70 = 0;
    {
      WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key, &v70))
    {
      {
        WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key, v70);
    }
    v69 = 0;
    {
      WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key, &v69))
    {
      {
        WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeTimeEnabledKey(void)::key, v69);
    }
    v68 = 0;
    {
      WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key, &v68))
    {
      {
        WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::unifiedPDFEnabledKey(void)::key, v68);
    }
    v67 = 0;
    {
      WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key, &v67))
    {
      {
        WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::upgradeMixedContentEnabledKey(void)::key, v67);
    }
    v66 = 0;
    {
      WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::useGiantTilesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::key, &v66))
    {
      {
        WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::useGiantTilesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::key, v66);
    }
    v65 = 0;
    {
      WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key, &v65))
    {
      {
        WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::userActivationAPIEnabledKey(void)::key, v65);
    }
    v64 = 0;
    {
      WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key, &v64))
    {
      {
        WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::verticalFormControlsEnabledKey(void)::key, v64);
    }
    v63 = 0;
    {
      WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key, &v63))
    {
      {
        WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewTransitionsEnabledKey(void)::key, v63);
    }
    v62 = 0;
    {
      WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key, &v62))
    {
      {
        WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key, v62);
    }
    v61 = 0;
    {
      WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key, &v61))
    {
      {
        WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::visualViewportAPIEnabledKey(void)::key, v61);
    }
    v60 = 0;
    {
      WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key, &v60))
    {
      {
        WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vorbisDecoderEnabledKey(void)::key, v60);
    }
    v59 = 0;
    {
      WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key, &v59))
    {
      {
        WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key, v59);
    }
    v58 = 0;
    {
      WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key, &v58))
    {
      {
        WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationASEnabledKey(void)::key, v58);
    }
    v57 = 0;
    {
      WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key, &v57))
    {
      {
        WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key, v57);
    }
    v56 = 0;
    {
      WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key, &v56))
    {
      {
        WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCryptoSafeCurvesEnabledKey(void)::key, v56);
    }
    v55 = 0;
    {
      WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key, &v55))
    {
      {
        WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCryptoX25519EnabledKey(void)::key, v55);
    }
    v54 = 0;
    {
      WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key, &v54))
    {
      {
        WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key, v54);
    }
    v53 = 0;
    {
      WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key, &v53))
    {
      {
        WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareFileAPIEnabledKey(void)::key, v53);
    }
    v52 = 0;
    {
      WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webShareEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::key, &v52))
    {
      {
        WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webShareEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::key, v52);
    }
    v51 = 0;
    {
      WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key, &v51))
    {
      {
        WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsAV1EnabledKey(void)::key, v51);
    }
    v50 = 0;
    {
      WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key, &v50))
    {
      {
        WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsAudioEnabledKey(void)::key, v50);
    }
    v49 = 0;
    {
      WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key, &v49))
    {
      {
        WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsHEVCEnabledKey(void)::key, v49);
    }
    v48 = 0;
    {
      WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key, &v48))
    {
      {
        WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webCodecsVideoEnabledKey(void)::key, v48);
    }
    v47 = 0;
    {
      WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key, &v47))
    {
      {
        WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLTimerQueriesEnabledKey(void)::key, v47);
    }
    v46 = 0;
    {
      WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, &v46))
    {
      {
        WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, v46);
    }
    v45 = 0;
    {
      WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key, &v45))
    {
      {
        WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key, v45);
    }
    v44 = 0;
    {
      WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key, &v44))
    {
      {
        WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCAV1CodecEnabledKey(void)::key, v44);
    }
    v43 = 0;
    {
      WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key, &v43))
    {
      {
        WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCEncodedTransformEnabledKey(void)::key, v43);
    }
    v42 = 0;
    {
      WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key, &v42))
    {
      {
        WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCH265CodecEnabledKey(void)::key, v42);
    }
    v41 = 0;
    {
      WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key, &v41))
    {
      {
        WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::peerConnectionVideoScalingAdaptationDisabledKey(void)::key, v41);
    }
    v40 = 0;
    {
      WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key, &v40))
    {
      {
        WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key, v40);
    }
    v39 = 0;
    {
      WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key, &v39))
    {
      {
        WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCVP9Profile2CodecEnabledKey(void)::key, v39);
    }
    v38 = 0;
    {
      WebKit::WebPreferencesKey::webXREnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webXREnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webXREnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webXREnabledKey(void)::key, &v38))
    {
      {
        WebKit::WebPreferencesKey::webXREnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webXREnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webXREnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webXREnabledKey(void)::key, v38);
    }
    v37 = 0;
    {
      WebKit::WebPreferencesKey::webXRGamepadsModuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webXRGamepadsModuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webXRGamepadsModuleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webXRGamepadsModuleEnabledKey(void)::key, &v37))
    {
      {
        WebKit::WebPreferencesKey::webXRGamepadsModuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webXRGamepadsModuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webXRGamepadsModuleEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webXRGamepadsModuleEnabledKey(void)::key, v37);
    }
    v36 = 0;
    {
      WebKit::WebPreferencesKey::webXRHandInputModuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::webXRHandInputModuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webXRHandInputModuleEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::webXRHandInputModuleEnabledKey(void)::key, &v36))
    {
      {
        WebKit::WebPreferencesKey::webXRHandInputModuleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::webXRHandInputModuleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webXRHandInputModuleEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webXRHandInputModuleEnabledKey(void)::key, v36);
    }
    v35 = 0;
    {
      WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key, &v35))
    {
      {
        WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeWeekEnabledKey(void)::key, v35);
    }
    v34 = 0;
    {
      WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key, &v34))
    {
      {
        WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::wheelEventGesturesBecomeNonBlockingKey(void)::key, v34);
    }
    v33 = 0;
    {
      WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key, &v33))
    {
      {
        WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::passiveWheelListenersAsDefaultOnDocumentKey(void)::key, v33);
    }
    v32 = 0;
    {
      WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key, &v32))
    {
      {
        WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::writingSuggestionsAttributeEnabledKey(void)::key, v32);
    }
    v31 = 0;
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key, &v31))
    {
      {
        WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalLiveOnTestingEnabledKey(void)::key, v31);
    }
    v30 = 0;
    {
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key, &v30))
    {
      {
        WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isFirstPartyWebsiteDataRemovalReproTestingEnabledKey(void)::key, v30);
    }
    v29 = 0;
    {
      WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key, &v29))
    {
      {
        WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::alignContentOnBlocksEnabledKey(void)::key, v29);
    }
    v28 = 0;
    {
      WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key, &v28))
    {
      {
        WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeDateTimeLocalEnabledKey(void)::key, v28);
    }
    v27 = 0;
    {
      WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key, &v27))
    {
      {
        WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::elementCheckVisibilityEnabledKey(void)::key, v27);
    }
    v26 = 0;
    {
      WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key, &v26))
    {
      {
        WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key, v26);
    }
    v25 = 0;
    {
      WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferences::platformGetBoolUserValueForKey((WebKit::WebPreferences *)this, (const WTF::String **)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key, &v25))
    {
      {
        WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::WebPreferencesStore::setBoolValueForKey((WebKit::WebPreferencesStore *)(this + 5), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestIdleCallbackEnabledKey(void)::key, v25);
    }
    if (v266)
    {
      if (*(_DWORD *)v266 == 2)
        WTF::StringImpl::destroy(v266, v24);
      else
        *(_DWORD *)v266 -= 2;
    }
    if (v289)
    {
      if (*(_DWORD *)v289 == 2)
        WTF::StringImpl::destroy(v289, v24);
      else
        *(_DWORD *)v289 -= 2;
    }
    if (v291)
    {
      if (*(_DWORD *)v291 == 2)
        WTF::StringImpl::destroy(v291, v24);
      else
        *(_DWORD *)v291 -= 2;
    }
    if (v303)
    {
      if (*(_DWORD *)v303 == 2)
        WTF::StringImpl::destroy(v303, v24);
      else
        *(_DWORD *)v303 -= 2;
    }
    if (v318)
    {
      if (*(_DWORD *)v318 == 2)
        WTF::StringImpl::destroy(v318, v24);
      else
        *(_DWORD *)v318 -= 2;
    }
    if (v327)
    {
      if (*(_DWORD *)v327 == 2)
        WTF::StringImpl::destroy(v327, v24);
      else
        *(_DWORD *)v327 -= 2;
    }
    if (v328)
    {
      if (*(_DWORD *)v328 == 2)
        WTF::StringImpl::destroy(v328, v24);
      else
        *(_DWORD *)v328 -= 2;
    }
    if (v329)
    {
      if (*(_DWORD *)v329 == 2)
        WTF::StringImpl::destroy(v329, v24);
      else
        *(_DWORD *)v329 -= 2;
    }
    if (v330)
    {
      if (*(_DWORD *)v330 == 2)
        WTF::StringImpl::destroy(v330, v24);
      else
        *(_DWORD *)v330 -= 2;
    }
    if (v332)
    {
      if (*(_DWORD *)v332 == 2)
        WTF::StringImpl::destroy(v332, v24);
      else
        *(_DWORD *)v332 -= 2;
    }
    if (v355)
    {
      if (*(_DWORD *)v355 == 2)
        WTF::StringImpl::destroy(v355, v24);
      else
        *(_DWORD *)v355 -= 2;
    }
    if (v370)
    {
      if (*(_DWORD *)v370 == 2)
        WTF::StringImpl::destroy(v370, v24);
      else
        *(_DWORD *)v370 -= 2;
    }
    if (v371)
    {
      if (*(_DWORD *)v371 == 2)
        WTF::StringImpl::destroy(v371, v24);
      else
        *(_DWORD *)v371 -= 2;
    }
    if (v372)
    {
      if (*(_DWORD *)v372 == 2)
        WTF::StringImpl::destroy(v372, v24);
      else
        *(_DWORD *)v372 -= 2;
    }
    if (v384)
    {
      if (*(_DWORD *)v384 == 2)
        WTF::StringImpl::destroy(v384, v24);
      else
        *(_DWORD *)v384 -= 2;
    }
    if (v391)
    {
      if (*(_DWORD *)v391 == 2)
        WTF::StringImpl::destroy(v391, v24);
      else
        *(_DWORD *)v391 -= 2;
    }
  }
  objc_autoreleasePoolPop(v2);
}

void sub_196D6CEA4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v5 = *(WTF::StringImpl **)(v3 + 36);
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(v3 + 68);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)(v3 + 84);
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)(v3 + 124);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)(v3 + 188);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)(v3 + 220);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)(v3 + 228);
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)(v3 + 236);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(WTF::StringImpl **)(v3 + 244);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *v2;
  if (*v2)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v2[14];
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v2[22];
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v2[23];
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v2[24];
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v2[29];
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v2[34];
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196D6D4D4()
{
  JUMPOUT(0x196D6D30CLL);
}

void sub_196D6D4E0()
{
  JUMPOUT(0x196D6D32CLL);
}

void sub_196D6D514()
{
  JUMPOUT(0x196D6D34CLL);
}

void sub_196D6D554()
{
  JUMPOUT(0x196D6D36CLL);
}

void sub_196D6D57C()
{
  JUMPOUT(0x196D6D38CLL);
}

void sub_196D6D584()
{
  JUMPOUT(0x196D6D3ACLL);
}

void sub_196D6D58C()
{
  JUMPOUT(0x196D6D3CCLL);
}

void sub_196D6D594()
{
  JUMPOUT(0x196D6D3ECLL);
}

void sub_196D6D5A0()
{
  JUMPOUT(0x196D6D40CLL);
}

void sub_196D6D600()
{
  JUMPOUT(0x196D6D42CLL);
}

void sub_196D6D640()
{
  JUMPOUT(0x196D6D44CLL);
}

void sub_196D6D648()
{
  JUMPOUT(0x196D6D46CLL);
}

void sub_196D6D650()
{
  JUMPOUT(0x196D6D48CLL);
}

void sub_196D6D684()
{
  JUMPOUT(0x196D6D4ACLL);
}

BOOL WebKit::checkUsageDescriptionStringForType@<W0>(WebKit *a1@<X0>, BOOL a2@<W8>)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  WebKit *TCC_kTCCServiceMicrophone;
  const __CFDictionary *v6;
  WebKit *TCC_kTCCServiceCamera;
  const __CFDictionary *v8;
  char v10;
  char **v11;
  char *v12;

  if ((_DWORD)a1 == 2)
  {
    {
      if (!WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::videoAccess)
        return 1;
    }
    else
    {
      TCC_kTCCServiceCamera = (WebKit *)WebKit::get_TCC_kTCCServiceCamera(a1);
      WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::videoAccess = WebKit::softLinkTCCTCCAccessPreflight(TCC_kTCCServiceCamera, 0, v8);
      if (!WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::videoAccess)
        return 1;
    }
    v4 = atomic_load(&WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::videoDescriptionFlag);
    if (v4 != -1)
    {
      v12 = &v10;
      v11 = &v12;
      std::__call_once(&WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::videoDescriptionFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::$_1 &&>>);
    }
    v3 = WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::hasCameraDescriptionString;
    return v3 != 0;
  }
  if ((_DWORD)a1 == 1)
  {
    {
      if (WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::audioAccess)
      {
LABEL_5:
        v2 = atomic_load(&WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::audioDescriptionFlag);
        if (v2 != -1)
        {
          v12 = &v10;
          v11 = &v12;
          std::__call_once(&WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::audioDescriptionFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::$_0 &&>>);
        }
        v3 = WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::hasMicrophoneDescriptionString;
        return v3 != 0;
      }
    }
    else
    {
      TCC_kTCCServiceMicrophone = (WebKit *)WebKit::get_TCC_kTCCServiceMicrophone(a1);
      WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::audioAccess = WebKit::softLinkTCCTCCAccessPreflight(TCC_kTCCServiceMicrophone, 0, v6);
      if (WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::audioAccess)
        goto LABEL_5;
    }
    return 1;
  }
  return a2;
}

uint64_t WebKit::initTCCTCCAccessPreflight(WebKit *this, const __CFString *a2, const __CFDictionary *a3)
{
  if (WebKit::initTCCTCCAccessPreflight(__CFString const*,__CFDictionary const*)::once != -1)
    dispatch_once(&WebKit::initTCCTCCAccessPreflight(__CFString const*,__CFDictionary const*)::once, &__block_literal_global_14_1);
  return WebKit::softLinkTCCTCCAccessPreflight(this, a2, (const __CFDictionary *)WebKit::softLinkTCCTCCAccessPreflight);
}

uint64_t WebKit::get_TCC_kTCCServiceMicrophone(WebKit *this)
{
  if (qword_1ECE72138 != -1)
    dispatch_once(&qword_1ECE72138, &__block_literal_global_6_2);
  return qword_1ECE72130;
}

void WebKit::NetworkLoadChecker::checkCORSRequestWithPreflight(uint64_t a1, uint64_t a2, const void **a3)
{
  WTF::StringImpl *v6;
  int canSkipPreflight;
  WTF::StringImpl *v8;
  NSObject *v9;
  unsigned int *v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  const void *v13;
  CFTypeRef v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  CFTypeRef v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  const void *v38;
  WebKit::NetworkCORSPreflightChecker *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CFTypeRef v51;
  WebKit::NetworkCORSPreflightChecker **v52;
  CFTypeRef v53;
  CFTypeRef v54;
  WTF::StringImpl *v55;
  CFTypeRef v56;
  uint64_t v57;
  uint64_t v58[5];
  uint64_t v59[5];
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  CFTypeRef cf[2];
  BOOL v74;
  _BYTE v75[16];
  _BYTE v76[16];
  CFTypeRef v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  CFTypeRef v96;
  uint64_t v97;
  _QWORD buf[3];
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  char v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  CFTypeRef v116;
  unsigned int *v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  char hasHTTPHeaderField;
  unsigned int v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 449) = 0;
  WebCore::CrossOriginPreflightResultCache::singleton((WebCore::CrossOriginPreflightResultCache *)a1);
  WebCore::SecurityOrigin::toString(*(WebCore::SecurityOrigin **)(a1 + 240));
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
  WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)a2);
  canSkipPreflight = WebCore::CrossOriginPreflightResultCache::canSkipPreflight();
  v8 = (WTF::StringImpl *)buf[0];
  buf[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (canSkipPreflight)
  {
    v9 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134217984;
      *(_QWORD *)((char *)buf + 4) = a1;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "%p - NetworkLoadChecker::checkCORSRequestWithPreflight - preflight can be skipped thanks to cached result", (uint8_t *)buf, 0xCu);
    }
    v10 = *(unsigned int **)(a1 + 240);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    WebCore::updateRequestForAccessControl();
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v12);
    std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)buf, a2);
    v123 = 0;
    v13 = *a3;
    *a3 = 0;
    (*(void (**)(const void *, _QWORD *))(*(_QWORD *)v13 + 16))(v13, buf);
    (*(void (**)(const void *))(*(_QWORD *)v13 + 8))(v13);
    if (v123 != -1)
      (*(&off_1E34BDF98 + v123))((int)&v57, (WebCore::ResourceRequestBase *)buf);
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest(&v77, (const WebCore::ResourceRequest *)a2);
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v75, (WTF::ASCIILiteral *)(a1 + 96));
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v76, (WTF::ASCIILiteral *)(a1 + 112));
    WebCore::ResourceRequestBase::setHTTPHeaderFields();
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v76);
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v75);
    *(_OWORD *)&buf[1] = v78;
    LODWORD(v78) = v78 & 0xFFFFFFFE;
    v14 = v77;
    v15 = v80;
    v77 = 0;
    v99 = v79;
    v80 = 0;
    buf[0] = v14;
    v100 = v15;
    v101 = v81;
    v102 = v82;
    LODWORD(v81) = v81 & 0xFFFFFFFE;
    v16 = v84;
    v84 = 0u;
    v104 = v16;
    v17 = v85;
    v85 = 0;
    v103 = v83;
    v105 = v17;
    v18 = v86;
    v86 = 0;
    v106 = v18;
    *(_QWORD *)&v16 = v87;
    v87 = 0;
    v107 = v16;
    v19 = v88;
    v88 = 0;
    v108 = v19;
    *(_QWORD *)&v16 = v89;
    v89 = 0;
    v109 = v16;
    v111 = v91;
    v110 = v90;
    v20 = v92;
    v92 = 0u;
    v112 = v20;
    v115 = v95;
    v113 = v93;
    v114 = v94;
    v21 = v96;
    v93 = 0;
    v96 = 0;
    v116 = v21;
    v22 = *(unsigned int **)(a1 + 240);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
    v117 = v22;
    v24 = *(unsigned int **)(a1 + 248);
    if (v24)
    {
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
    v118 = v24;
    WebCore::ResourceRequestBase::httpReferrer((WebCore::ResourceRequestBase *)a2);
    WebCore::ResourceRequestBase::httpUserAgent((WebCore::ResourceRequestBase *)a2);
    v26 = *(_QWORD *)(a1 + 88);
    v119 = *(_QWORD *)(a1 + 72);
    v120 = v26;
    v121 = *(_DWORD *)(a1 + 64);
    hasHTTPHeaderField = WebCore::ResourceRequestBase::hasHTTPHeaderField();
    v27 = *(_QWORD *)(a1 + 80);
    v28 = *(_QWORD *)(a1 + 1152);
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 8);
      if (v29)
        v30 = v29 - 48;
      else
        v30 = 0;
    }
    else
    {
      v30 = 0;
    }
    v57 = a1;
    WTF::URL::URL((uint64_t)v58, (uint64_t *)a2);
    WTF::URL::URL((uint64_t)v59, (uint64_t *)(a2 + 40));
    v60 = *(_QWORD *)(a2 + 80);
    v31 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a2 + 88) = 0u;
    v61 = v31;
    *(_QWORD *)&v31 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 104) = 0;
    v62 = v31;
    v32 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;
    v63 = v32;
    *(_QWORD *)&v31 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    v64 = v31;
    v33 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a2 + 128) = 0;
    v65 = v33;
    *(_QWORD *)&v31 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    v66 = v31;
    LODWORD(v33) = *(_DWORD *)(a2 + 144);
    v68 = *(_BYTE *)(a2 + 148);
    v67 = v33;
    v34 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a2 + 152) = 0u;
    v69 = v34;
    v72 = *(_BYTE *)(a2 + 184);
    v35 = *(_QWORD *)(a2 + 168);
    v36 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 168) = 0;
    v70 = v35;
    v71 = v36;
    v37 = *(const void **)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    v38 = *a3;
    *a3 = 0;
    cf[0] = v37;
    cf[1] = v38;
    v74 = *(_QWORD *)(a1 + 464) != 0;
    v39 = (WebKit::NetworkCORSPreflightChecker *)WTF::fastMalloc((WTF *)0x488);
    v40 = *(_BYTE *)(a1 + 529);
    v41 = WTF::fastMalloc((WTF *)0xE8);
    *(_QWORD *)v41 = off_1E34BDFC0;
    *(_QWORD *)(v41 + 8) = v57;
    WTF::URL::URL(v41 + 16, v58);
    WTF::URL::URL(v41 + 56, v59);
    *(_QWORD *)(v41 + 96) = v60;
    *(_QWORD *)(v41 + 104) = v61;
    v42 = *((_QWORD *)&v61 + 1);
    v61 = 0u;
    *(_QWORD *)(v41 + 112) = v42;
    v43 = v62;
    v62 = 0;
    *(_QWORD *)(v41 + 120) = v43;
    v44 = v63;
    v63 = 0;
    *(_QWORD *)(v41 + 128) = v44;
    v45 = v64;
    v64 = 0;
    *(_QWORD *)(v41 + 136) = v45;
    v46 = v65;
    v65 = 0;
    *(_QWORD *)(v41 + 144) = v46;
    v47 = v66;
    v66 = 0;
    *(_QWORD *)(v41 + 152) = v47;
    LODWORD(v46) = v67;
    *(_BYTE *)(v41 + 164) = v68;
    *(_DWORD *)(v41 + 160) = v46;
    *(_QWORD *)(v41 + 168) = v69;
    v48 = *((_QWORD *)&v69 + 1);
    v69 = 0u;
    *(_QWORD *)(v41 + 176) = v48;
    v49 = v70;
    v70 = 0;
    *(_QWORD *)(v41 + 184) = v49;
    v50 = v71;
    *(_BYTE *)(v41 + 200) = v72;
    *(_QWORD *)(v41 + 192) = v50;
    *(CFTypeRef *)(v41 + 208) = cf[0];
    v51 = cf[1];
    *(_OWORD *)cf = 0u;
    *(_QWORD *)(v41 + 216) = v51;
    *(_BYTE *)(v41 + 224) = v74;
    v97 = v41;
    WebKit::NetworkCORSPreflightChecker::NetworkCORSPreflightChecker((uint64_t)v39, v27, v30, (uint64_t)buf, v40, &v97);
    if (v97)
      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
    v52 = (WebKit::NetworkCORSPreflightChecker **)(a1 + 440);
    std::unique_ptr<WebKit::NetworkCORSPreflightChecker>::reset[abi:sn180100](v52, v39);
    v53 = cf[1];
    cf[1] = 0;
    if (v53)
      (*(void (**)(CFTypeRef))(*(_QWORD *)v53 + 8))(v53);
    v54 = cf[0];
    cf[0] = 0;
    if (v54)
      CFRelease(v54);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v58);
    WebKit::NetworkCORSPreflightChecker::startPreflight((const WebCore::ResourceRequest **)*v52);
    WebKit::NetworkCORSPreflightChecker::Parameters::~Parameters((WebKit::NetworkCORSPreflightChecker::Parameters *)buf, v55);
    v56 = v96;
    v96 = 0;
    if (v56)
      CFRelease(v56);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v77);
  }
}

void WebKit::NetworkCORSPreflightChecker::Parameters::~Parameters(WebKit::NetworkCORSPreflightChecker::Parameters *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  v6 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, a2);
  v7 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

void sub_196D6E004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  CFRelease(*(CFTypeRef *)(v9 + 8));
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

#error "196D6E024: too big function (funcsize=0)"

uint64_t WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = (_QWORD *)v5;
      v8 = *(uint64_t **)a2;
      v9 = 8 * v6;
      do
      {
        v10 = *v8;
        if (*v8)
          CFRetain(*(CFTypeRef *)(v10 + 8));
        *v7++ = v10;
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_196D89E4C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::handleMessageAsync<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkConnectionToWebProcess *,void ()(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkConnectionToWebProcess::*)::{lambda(Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *a1;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2872;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebKit::VisitedLinkStore::didUpdateSharedStringHashes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::VisitedLinkStore::didUpdateSharedStringHashes(a1 - 40, a2, a3);
}

_QWORD *`non-virtual thunk to'WebKit::VisitedLinkStore::didInvalidateSharedMemory(WebKit::VisitedLinkStore *this)
{
  return WebKit::VisitedLinkStore::didInvalidateSharedMemory((WebKit::VisitedLinkStore *)((char *)this - 40));
}

void `non-virtual thunk to'WebKit::VisitedLinkStore::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::VisitedLinkStore::didReceiveMessage(this - 2, a2, a3);
}

WTF *std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::destroy(WTF *result)
{
  WTF *v1;
  void *v2;

  if (result)
  {
    v1 = result;
    std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::destroy(*(_QWORD *)result);
    std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::destroy(*((_QWORD *)v1 + 1));
    return (WTF *)WTF::fastFree(v1, v2);
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::domains(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[16];
  unsigned int v22;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  result = WebCore::SQLiteDatabase::prepareStatement();
  v3 = v22;
  if (!v22)
  {
    while (1)
    {
      result = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v21);
      if ((_DWORD)result != 100)
        break;
      if (!v22)
      {
        v17 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21);
        if (!v22)
        {
          WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v21);
          WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v16, &v18);
          if (!v22)
          {
            WebCore::SQLiteStatement::columnDouble((WebCore::SQLiteStatement *)v21);
            *(_QWORD *)&v19 = v4;
            if (!v22)
            {
              WebCore::SQLiteStatement::columnDouble((WebCore::SQLiteStatement *)v21);
              *((_QWORD *)&v19 + 1) = v5;
              if (!v22)
              {
                LOBYTE(v20) = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21) != 0;
                if (!v22)
                {
                  BYTE1(v20) = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21) != 0;
                  if (!v22)
                  {
                    v6 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21);
                    v7 = v6 >= 3 ? 1 : v6;
                    BYTE2(v20) = v7;
                    if (!v22)
                    {
                      HIDWORD(v20) = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v21);
                      v9 = *((_DWORD *)this + 3);
                      if (v9 == *((_DWORD *)this + 2))
                      {
                        WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ResourceLoadStatisticsStore::DomainData>((unsigned int *)this, (unint64_t)&v17);
                      }
                      else
                      {
                        v12 = v9 + 1;
                        v13 = *(_QWORD *)this + 40 * v9;
                        *(_DWORD *)v13 = v17;
                        v14 = v18;
                        v18 = 0;
                        *(_QWORD *)(v13 + 8) = v14;
                        v15 = v20;
                        *(_OWORD *)(v13 + 16) = v19;
                        *(_QWORD *)(v13 + 32) = v15;
                        *((_DWORD *)this + 3) = v12;
                      }
                      v10 = v18;
                      v18 = 0;
                      if (v10)
                      {
                        if (*(_DWORD *)v10 == 2)
                          WTF::StringImpl::destroy(v10, v8);
                        else
                          *(_DWORD *)v10 -= 2;
                      }
                      v11 = v16;
                      v16 = 0;
                      if (v11)
                      {
                        if (*(_DWORD *)v11 == 2)
                          WTF::StringImpl::destroy(v11, v8);
                        else
                          *(_DWORD *)v11 -= 2;
                      }
                      if (!v22)
                        continue;
                    }
                  }
                }
              }
            }
          }
        }
      }
      result = std::__throw_bad_variant_access[abi:sn180100]();
      break;
    }
    v3 = v22;
  }
  if (v3 != -1)
    return (*(&off_1E34C0CF8 + v3))((int)&v17, (WebCore::SQLiteStatement *)v21);
  return result;
}

BOOL WebKit::ResourceLoadStatisticsStore::shouldRemoveDataRecords(WebKit::ResourceLoadStatisticsStore *this)
{
  double v3;

  if (*((_BYTE *)this + 710))
    return 0;
  if (*((double *)this + 31) == 0.0)
    return 1;
  WTF::MonotonicTime::now(this);
  if (v3 >= *((double *)this + 21) + *((double *)this + 31))
    return 1;
  return *((_BYTE *)this + 226) != 0;
}

uint64_t WebKit::WebLocalFrameLoaderClient::canHandleRequest(WebKit::WebLocalFrameLoaderClient *this, const ResourceRequest *a2)
{
  return 1;
}

uint64_t WebKit::PlatformCAAnimationRemote::fillMode(WebKit::PlatformCAAnimationRemote *this)
{
  return *((unsigned __int8 *)this + 64);
}

WTF *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *result;
  uint64_t v5;

  if (!*a1)
    return 0;
  result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, a2, a3);
  v5 = *a1;
  if (!result)
  {
    if (v5)
      return (WTF *)(v5 + 8 * *(unsigned int *)(v5 - 4));
    else
      return 0;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t *v14;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::DefaultHash<WebCore::MessagePortIdentifier>>::hash<WebCore::MessagePortIdentifier>(a2);
  v7 = a2[1];
  v8 = v6 & v5;
  v9 = (uint64_t *)(v2 + 16 * v8);
  v10 = *v9;
  v11 = v9[1];
  if (*v9 == *a2 && v11 == v7)
    return v2 + 16 * v8;
  v13 = 1;
  while (v10 | v11)
  {
    v8 = ((_DWORD)v8 + v13) & v5;
    v14 = (uint64_t *)(v2 + 16 * v8);
    v10 = *v14;
    v11 = v14[1];
    ++v13;
    if (v10 == *a2 && v11 == v7)
      return v2 + 16 * v8;
  }
  if (*a1)
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::makeConstIterator(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v3 = *a1;
  if (*a1)
    v4 = *(unsigned int *)(v3 - 4);
  else
    v4 = 0;
  v6[0] = a2;
  v6[1] = v3 + 8 * v4;
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v6, a2, a3);
  return v6[0];
}

void WebCore::LinearTimingFunction::~LinearTimingFunction(WebCore::LinearTimingFunction *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
}

uint64_t WebCore::ResourceErrorBase::ResourceErrorBase(uint64_t result, _DWORD **a2, int a3, uint64_t a4, _DWORD **a5, char a6, char a7)
{
  _DWORD *v7;
  _DWORD *v8;
  __int128 v9;
  _DWORD *v10;

  v7 = *a2;
  if (*a2)
    *v7 += 2;
  *(_QWORD *)result = v7;
  v8 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v8 += 2;
  *(_QWORD *)(result + 8) = v8;
  v9 = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(result + 16) = *(_OWORD *)(a4 + 8);
  *(_OWORD *)(result + 32) = v9;
  v10 = *a5;
  if (*a5)
    *v10 += 2;
  *(_QWORD *)(result + 48) = v10;
  *(_DWORD *)(result + 56) = a3;
  *(_BYTE *)(result + 60) = a6;
  *(_BYTE *)(result + 61) = a7;
  return result;
}

uint64_t WebCore::ResourceResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;

  WebCore::ResourceResponseBase::operator=(a1, a2);
  v4 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  v5 = *(const void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v4;
  if (v5)
    CFRelease(v5);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

{
  uint64_t v4;
  const void *v5;

  WebCore::ResourceResponseBase::operator=(a1, a2);
  v4 = *(_QWORD *)(a2 + 240);
  if (v4)
    CFRetain(*(CFTypeRef *)(a2 + 240));
  v5 = *(const void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v4;
  if (v5)
    CFRelease(v5);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

uint64_t WebCore::PluginInfo::PluginInfo(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_DWORD **)(a2 + 16);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a1 + 16) = v6;
  WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 24, a2 + 24);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v7 = *(_DWORD **)(a2 + 48);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

WTF::StringImpl **WebKit::buildList<std::set<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  int8x16_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  WTF::StringImpl *v12[2];
  int v13;
  char v14;

  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v14 = 1;
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      if (v13)
        v7 = (int8x16_t *)", ";
      else
        v7 = (int8x16_t *)"";
      if (v13)
        v8 = 3;
      else
        v8 = 1;
      WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned int>((WTF::StringBuilder *)v12, v7, v8, *((_DWORD *)v4 + 7));
      v9 = (_QWORD *)v4[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v4[2];
          v11 = *v10 == (_QWORD)v4;
          v4 = v10;
        }
        while (!v11);
      }
      v4 = v10;
    }
    while (v10 != v3);
  }
  WTF::StringBuilder::toString((WTF::StringBuilder *)v12, a1);
  return WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v12, v5);
}

WTF::StringImpl **WebKit::buildList<WTF::SizedIteratorRange<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>,unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>>(_QWORD *a1, _QWORD *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  WTF::StringImpl *v5;
  unsigned int *v7;
  int8x16_t *v8;
  uint64_t v9;
  unsigned int v10;
  WTF::StringImpl *v11[2];
  int v12;
  char v13;

  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  v13 = 1;
  v3 = (unsigned int *)a2[1];
  v4 = (unsigned int *)a2[3];
  if (v3 != v4)
  {
    v7 = (unsigned int *)a2[2];
    do
    {
      if (v12)
        v8 = (int8x16_t *)", ";
      else
        v8 = (int8x16_t *)"";
      if (v12)
        v9 = 3;
      else
        v9 = 1;
      v10 = *v3;
      v3 += 10;
      WTF::StringBuilder::append<WTF::ASCIILiteral,unsigned int>((WTF::StringBuilder *)v11, v8, v9, v10);
      while (v3 != v7)
      {
        if (*v3 + 1 > 1)
          goto LABEL_15;
        v3 += 10;
      }
      v3 = v7;
LABEL_15:
      ;
    }
    while (v3 != v4);
  }
  WTF::StringBuilder::toString((WTF::StringBuilder *)v11, a1);
  return WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v11, v5);
}

uint64_t WebKit::shouldTreatURLProtocolAsAppBound(WebKit *this, const WTF::URL *a2)
{
  if ((a2 & 1) != 0)
    return 0;
  WTF::URL::host(this);
  if ((WebCore::SecurityOrigin::isLocalHostOrLoopbackIPAddress() & 1) != 0
    || (WTF::URL::protocolIs() & 1) != 0
    || (WTF::URL::protocolIs() & 1) != 0
    || (WTF::URL::protocolIs() & 1) != 0
    || (WTF::URL::protocolIs() & 1) != 0)
  {
    return 1;
  }
  else
  {
    return WTF::URL::protocolIsJavaScript(this);
  }
}

unsigned int *WebKit::WebFrame::createSubframe@<X0>(WebKit::WebFrame *this@<X0>, WebKit::WebPage *a2@<X1>, WebKit::WebFrame *a3@<X2>, uint64_t *a4@<X8>)
{
  WebCore::Process *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  unsigned int *result;
  WebCore::LocalFrame *v32;
  __int128 v33;
  __int128 v34;
  uint64_t *v35[3];
  WebCore::LocalFrame *v36;
  IPC::Encoder *v37;

  v10 = (WebCore::Process *)WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
  v11 = WebCore::Process::identifier(v10);
  v12 = API::Object::newObject(0x78uLL, 134);
  v13 = WebKit::WebFrame::WebFrame(v12, (uint64_t)this, (uint64_t)v10, v11);
  *a4 = v13;
  CFRetain(*(CFTypeRef *)(v13 + 8));
  v14 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *v14 = (uint64_t)&off_1E34F1A40;
  v14[1] = v12;
  v35[0] = v14;
  WebCore::LocalFrame::createSubframe();
  v15 = v35[0];
  v35[0] = 0;
  if (v15)
    (*(void (**)(uint64_t *))(*v15 + 8))(v15);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v36 + 4, (uint64_t)v36);
  v17 = (unsigned int *)*((_QWORD *)v36 + 2);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v12 = *a4;
  }
  v19 = *(unsigned int **)(v12 + 24);
  *(_QWORD *)(v12 + 24) = v17;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v16);
    }
  }
  v22 = *((_OWORD *)a2 + 5);
  v33 = *((_OWORD *)v36 + 2);
  v34 = v22;
  v35[0] = (uint64_t *)&v34;
  v35[1] = (uint64_t *)&v33;
  v35[2] = (uint64_t *)a3;
  v24 = *((_QWORD *)this + 4);
  v23 = (char *)this + 32;
  v25 = (*(uint64_t (**)(char *))(v24 + 56))(v23);
  v26 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v26 = 1877;
  *(_QWORD *)(v26 + 8) = v25;
  *(_QWORD *)(v26 + 528) = v26 + 16;
  *(_QWORD *)(v26 + 536) = v26 + 16;
  *(_OWORD *)(v26 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v26 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v26);
  v37 = (IPC::Encoder *)v26;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v26, v35);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v23 + 32))(v23, &v37, 0);
  v28 = v37;
  v37 = 0;
  if (v28)
  {
    IPC::Encoder::~Encoder(v28, v27);
    WTF::fastFree(v29, v30);
  }
  WebCore::FrameTree::setSpecifiedName((WebCore::LocalFrame *)((char *)v36 + 48), (const AtomString *)a3);
  result = (unsigned int *)WebCore::LocalFrame::init(v36);
  v32 = v36;
  v36 = 0;
  if (v32)
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v32 + 2);
  return result;
}

const char ***WebKit::WebPage::SandboxExtensionTracker::didStartProvisionalLoad(const char ***this, WebKit::WebFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char ****v5;
  const char ***v6;
  const char **v7;

  v2 = *((_QWORD *)a2 + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) == v3)
      {
        v4 = (uint64_t)this;
        v5 = (const char ****)(this + 2);
        if (this[2]
          && WebKit::WebPage::SandboxExtensionTracker::shouldReuseCommittedSandboxExtension((WebKit::WebPage::SandboxExtensionTracker *)this, a2))
        {
          WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>::operator=((const char ****)v4, v5);
        }
        v6 = *(const char ****)v4;
        this = *(const char ****)(v4 + 8);
        *(_QWORD *)v4 = 0;
        *(_QWORD *)(v4 + 8) = v6;
        if (this)
        {
          this = WTF::RefCounted<WebKit::SandboxExtension>::deref(this);
          v6 = *(const char ****)(v4 + 8);
        }
        if (v6)
        {
          v7 = v6[2];
          v6[2] = (const char **)((char *)v7 + 1);
          if (!v7)
            return (const char ***)WebKit::SandboxExtensionImpl::consume((WebKit::SandboxExtensionImpl *)v6[1]);
        }
      }
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::didFinishDocumentLoad(unsigned int *this, WebKit::WebFrame *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)a2 + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) == v3)
        return WebKit::WebPage::shrinkToFitContent(this, 1);
    }
  }
  return this;
}

unsigned int *WebKit::WebPage::didFinishLoad(unsigned int *this, WebKit::WebFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  WebKit::WebProcess *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9[5];

  v2 = *((_QWORD *)a2 + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) == v3)
      {
        v5 = this;
        v6 = WebKit::WebProcess::singleton((WebKit::WebProcess *)this);
        WebKit::WebFrame::url(a2, (uint64_t)v9);
        WebKit::WebProcess::sendPrewarmInformation(v6, (const WTF::URL *)v9);
        v8 = v9[0];
        v9[0] = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v7);
          else
            *(_DWORD *)v8 -= 2;
        }
        return WebKit::WebPage::shrinkToFitContent(v5, 1);
      }
    }
  }
  return this;
}

void WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor::~RegistrableDomainsToDeleteOrRestrictWebsiteDataFor(WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor *this, void *a2)
{
  void *v3;
  void *v4;
  void *v5;

  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 48, a2);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, v3);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, v4);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this, v5);
}

void WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::~ScrollingTreeFrameScrollingNodeRemoteIOS(WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  *(_QWORD *)this = off_1E34CBCF8;
  v2 = (const void *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v4)
    CFRelease(v4);
  JUMPOUT(0x19AEB3C18);
}

{
  WebKit::ScrollingTreeFrameScrollingNodeRemoteIOS::~ScrollingTreeFrameScrollingNodeRemoteIOS(this);
}

uint64_t sub_196D8AB5C(WTF *this, void *a2)
{
  return WTF::fastFree(this, a2);
}

uint64_t WebKit::PCM::PersistentStore::processDidResume(WebKit::PCM::PersistentStore *this)
{
  WTF::SuspendableWorkQueue *v1;
  uint64_t result;
  WTF::SuspendableWorkQueue *v3;

  WebKit::PCM::sharedWorkQueue(&v3);
  v1 = v3;
  result = WTF::SuspendableWorkQueue::resume(v3);
  if (v1)
    return WTF::WorkQueue::deref(v1);
  return result;
}

void *WebKit::ScrollingTreeScrollingNodeDelegateIOS::resetScrollViewDelegate(WebKit::ScrollingTreeScrollingNodeDelegateIOS *this)
{
  void *result;

  result = (void *)-[WebKit::ScrollingTreeScrollingNodeDelegateIOS delegate](this, "delegate");
  if (result)
    return (void *)objc_msgSend(result, "setDelegate:", 0);
  return result;
}

uint64_t WebKit::WebPageProxyFrameLoadStateObserver::didCommitProvisionalLoad(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  const WTF::URL *v3;
  const WTF::URL *v4;
  uint64_t *v5;
  WTF::ASCIICaseInsensitiveHash ***v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  const WTF::StringImpl *v11;
  WTF::ASCIICaseInsensitiveHash ***v12;
  int i;
  unsigned int v14;
  WTF::ASCIICaseInsensitiveHash ***v15;
  WTF **v16;
  WTF::ASCIICaseInsensitiveHash **v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  WTF::ASCIICaseInsensitiveHash *v21;
  WTF::ASCIICaseInsensitiveHash *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  WTF::ASCIICaseInsensitiveHash ***v27;
  WTF::ASCIICaseInsensitiveHash ***v28;
  WTF::ASCIICaseInsensitiveHash ***v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  WTF::StringImpl *v33;
  const WTF::StringImpl *v34;
  int j;
  uint64_t v36;
  WTF **v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  WTF::ASCIICaseInsensitiveHash **v47;
  WTF::ASCIICaseInsensitiveHash *v48;
  WTF::ASCIICaseInsensitiveHash *v49;
  WTF::ASCIICaseInsensitiveHash ***v50;
  WTF::StringImpl *v51;
  const WTF::URL *v52;
  WTF::StringImpl *v53;

  v1 = *(_DWORD *)(this + 28);
  if (!v1)
    return this;
  v2 = this;
  v3 = *(const WTF::URL **)(this + 16);
  v4 = (const WTF::URL *)((char *)v3 + 40 * v1);
  v5 = (uint64_t *)(this + 32);
  v6 = (WTF::ASCIICaseInsensitiveHash ***)(this + 48);
  v52 = v4;
  do
  {
    WebCore::RegistrableDomain::RegistrableDomain(&v53, v3);
    this = (uint64_t)v53;
    if (!v53)
      goto LABEL_78;
    if (!*((_DWORD *)v53 + 1) || (MEMORY[0x19AEABBCC]() & 1) != 0)
      goto LABEL_74;
    v8 = *v5;
    if (*v5
      || (WTF::HashTable<WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::RegistrableDomain>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>>::expand(v5, 0), (v8 = *v5) != 0))
    {
      v9 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      v9 = 0;
    }
    v10 = WTF::ASCIICaseInsensitiveHash::hash(v53, v7);
    v12 = 0;
    for (i = 1; ; ++i)
    {
      v14 = v10 & v9;
      v15 = (WTF::ASCIICaseInsensitiveHash ***)(v8 + 8 * (v10 & v9));
      v16 = *v15;
      if (*v15 == (WTF::ASCIICaseInsensitiveHash **)-1)
      {
        v12 = (WTF::ASCIICaseInsensitiveHash ***)(v8 + 8 * v14);
        goto LABEL_15;
      }
      if (!v16)
        break;
      if (WTF::equalIgnoringASCIICase(*v16, v53, v11))
      {
        v17 = *v15;
        v21 = (*v15)[1];
        v22 = (*v15)[2];
        if (v21)
        {
          *((_QWORD *)v21 + 2) = v22;
          v22 = v17[2];
        }
        else
        {
          *(_QWORD *)(v2 + 40) = v22;
        }
        v4 = v52;
        if (v22)
          v27 = (WTF::ASCIICaseInsensitiveHash ***)((char *)v22 + 8);
        else
          v27 = v6;
        *v27 = (WTF::ASCIICaseInsensitiveHash **)v21;
        goto LABEL_34;
      }
LABEL_15:
      v10 = i + v14;
    }
    if (v12)
    {
      *v12 = 0;
      --*(_DWORD *)(*v5 - 16);
      v15 = v12;
    }
    v17 = (WTF::ASCIICaseInsensitiveHash **)WTF::fastMalloc((WTF *)0x18);
    v18 = v53;
    v53 = 0;
    v17[1] = 0;
    v17[2] = 0;
    *v17 = v18;
    *v15 = v17;
    v19 = *v5;
    if (*v5)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    v4 = v52;
    *(_DWORD *)(v19 - 12) = v20;
    v23 = *v5;
    if (*v5)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 <= 0x400)
    {
      if (3 * v26 > 4 * v25)
        goto LABEL_34;
      goto LABEL_28;
    }
    if (v26 <= 2 * v25)
LABEL_28:
      v17 = *(WTF::ASCIICaseInsensitiveHash ***)WTF::HashTable<WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::RegistrableDomain>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>>::expand(v5, v15);
LABEL_34:
    v28 = *(WTF::ASCIICaseInsensitiveHash ****)(v2 + 40);
    v17[1] = 0;
    v17[2] = (WTF::ASCIICaseInsensitiveHash *)v28;
    if (v28)
      v29 = v28 + 1;
    else
      v29 = v6;
    *v29 = v17;
    *(_QWORD *)(v2 + 40) = v17;
    v30 = *(_QWORD *)(v2 + 32);
    if (v30 && *(_DWORD *)(v30 - 12) >= 7u)
    {
      v31 = *(_DWORD *)(v30 - 8);
      v32 = WTF::ASCIICaseInsensitiveHash::hash(**v6, v7);
      for (j = 0; ; v32 = j + v36)
      {
        v36 = v32 & v31;
        v37 = *(WTF ***)(v30 + 8 * v36);
        if (v37 != (WTF **)-1)
        {
          if (!v37)
          {
            v38 = (WTF::StringImpl ***)(*v5 + 8 * *(unsigned int *)(*v5 - 4));
            goto LABEL_46;
          }
          if ((WTF::equalIgnoringASCIICase(*v37, **v6, v34) & 1) != 0)
            break;
        }
        ++j;
      }
      v38 = (WTF::StringImpl ***)(v30 + 8 * v36);
LABEL_46:
      v39 = **v38;
      **v38 = 0;
      v40 = *v5;
      if (*v5)
        v40 += 8 * *(unsigned int *)(v40 - 4);
      if ((WTF::StringImpl ***)v40 != v38)
      {
        *v38 = (WTF::StringImpl **)-1;
        ++*(_DWORD *)(*v5 - 16);
        v41 = *v5;
        v42 = *v5 ? *(_DWORD *)(v41 - 12) - 1 : -1;
        *(_DWORD *)(v41 - 12) = v42;
        v43 = *v5;
        if (*v5)
        {
          v44 = 6 * *(_DWORD *)(v43 - 12);
          v45 = *(_DWORD *)(v43 - 4);
          if (v44 < v45 && v45 >= 9)
            WTF::HashTable<WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::RegistrableDomain>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>>::rehash(v5, v45 >> 1, 0);
        }
      }
      v47 = *v6;
      v48 = (*v6)[1];
      v49 = (*v6)[2];
      if (v48)
      {
        *((_QWORD *)v48 + 2) = v49;
        v49 = v47[2];
      }
      else
      {
        *(_QWORD *)(v2 + 40) = v49;
      }
      if (v49)
        v50 = (WTF::ASCIICaseInsensitiveHash ***)((char *)v49 + 8);
      else
        v50 = v6;
      *v50 = (WTF::ASCIICaseInsensitiveHash **)v48;
      v51 = *v47;
      *v47 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v33);
        else
          *(_DWORD *)v51 -= 2;
      }
      WTF::fastFree((WTF *)v47, v33);
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v7);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
LABEL_74:
    this = (uint64_t)v53;
    v53 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      else
        *(_DWORD *)this -= 2;
    }
LABEL_78:
    v3 = (const WTF::URL *)((char *)v3 + 40);
  }
  while (v3 != v4);
  return this;
}

uint64_t WebKit::RemoteScrollingCoordinatorProxyIOS::setRootNodeIsInUserScroll(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 24) + 16);
  if (v2)
  {
    v3 = this;
    v4 = this + 80;
    v5 = *(_QWORD *)(v2 + 56);
    if (a2)
      WebKit::RemoteScrollingUIState::addNodeWithActiveUserScroll(v4, *(_QWORD *)(v2 + 48), v5);
    else
      WebKit::RemoteScrollingUIState::removeNodeWithActiveUserScroll(v4, *(_QWORD *)(v2 + 48), v5);
    return WebKit::RemoteScrollingCoordinatorProxy::sendUIStateChangedIfNecessary(v3);
  }
  return this;
}

void WebKit::PlatformCALayerRemoteTiledBacking::~PlatformCALayerRemoteTiledBacking(WebKit::PlatformCALayerRemoteTiledBacking *this, void *a2)
{
  void *v3;
  uint64_t v4;

  WTF::Vector<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 848, a2);
  v4 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebKit::PlatformCALayerRemote::~PlatformCALayerRemote(this, v3);
}

{
  WTF *v2;
  void *v3;

  WebKit::PlatformCALayerRemoteTiledBacking::~PlatformCALayerRemoteTiledBacking(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteScrollingCoordinatorProxy::sendUIStateChangedIfNecessary(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v1 = (uint64_t *)(this + 80);
  if (*(_BYTE *)(this + 80))
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 16);
    v4 = *(_QWORD *)(v3 + 208);
    v5 = v1;
    this = WebKit::AuxiliaryProcessProxy::send<Messages::RemoteScrollingCoordinator::ScrollingStateInUIProcessChanged>(v4, &v5, *(_QWORD *)(*(_QWORD *)(v3 + 32) + 1896), 0);
    *(_BYTE *)(v2 + 80) = 0;
  }
  return this;
}

uint64_t WebKit::WebResourceLoadStatisticsStore::resume(WebKit::WebResourceLoadStatisticsStore *this)
{
  WTF::SuspendableWorkQueue *v1;
  uint64_t result;
  WTF::SuspendableWorkQueue *v3;

  WebKit::sharedStatisticsQueue(&v3);
  v1 = v3;
  result = WTF::SuspendableWorkQueue::resume(v3);
  if (v1)
    return WTF::WorkQueue::deref(v1);
  return result;
}

IPC::Encoder *WebKit::WebResourceLoadStatisticsStore::logTestingEvent(IPC::Encoder *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5[2];

  if (this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 96))
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 32);
        v4 = *(_QWORD *)(v2 + 24);
        v5[0] = &v4;
        v5[1] = (uint64_t *)a2;
        return IPC::Connection::send<Messages::NetworkProcessProxy::LogTestingEvent>(v3, v5);
      }
    }
  }
  return this;
}

void WebKit::RemoteDisplayListRecorderProxy::~RemoteDisplayListRecorderProxy(WebKit::RemoteDisplayListRecorderProxy *this)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 *v6;

  *(_QWORD *)this = off_1E34E15B0;
  v2 = (void *)*((_QWORD *)this + 483);
  *((_QWORD *)this + 483) = 0;
  if (v2)
    std::default_delete<WebKit::SharedVideoFrameWriter>::operator()[abi:sn180100]((uint64_t)this + 3864, (uint64_t)v2);
  v3 = (unsigned int *)*((_QWORD *)this + 481);
  *((_QWORD *)this + 481) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  v6 = (unsigned __int8 *)*((_QWORD *)this + 479);
  *((_QWORD *)this + 479) = 0;
  if (v6)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v2);
  WebCore::DisplayList::Recorder::~Recorder(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteDisplayListRecorderProxy::~RemoteDisplayListRecorderProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::NetworkConnectionToWebProcess::didReceiveSyncNetworkConnectionToWebProcessMessage(_DWORD *a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  uint64_t v5;
  uint64_t v6;

  ++a1[2];
  if (*(_WORD *)(a3 + 50) == 3525)
  {
    v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WebKit::NetworkResourceLoadParameters &&,WTF::CompletionHandler<void ()(WebCore::ResourceError const&,WTF::CompletionHandler::ResourceResponse,WebKit::NetworkResourceLoadParameters &&::Vector<unsigned char,0ul,WebKit::NetworkResourceLoadParameters &&::CrashOnOverflow,16ul,WebKit::NetworkResourceLoadParameters &&::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3, a4, (uint64_t)a1, (void (*)(_QWORD *, _BYTE *, _QWORD **))WebKit::NetworkConnectionToWebProcess::performSynchronousLoad, 0);
LABEL_3:
    v6 = v5;
  }
  else
  {
    v6 = 0;
    switch(*(_WORD *)(a3 + 50))
    {
      case 0xDBC:
        v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::BlobSize,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::CompletionHandler<void ()(unsigned long long)> &&)>(a2, (uint64_t *)a3, a4, (uint64_t)a1, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD **))WebKit::NetworkConnectionToWebProcess::blobSize, 0);
        goto LABEL_3;
      case 0xDBD:
        v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::BlobType,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::String)> &&)>(a2, (uint64_t *)a3, a4, (uint64_t)a1, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD **))WebKit::NetworkConnectionToWebProcess::blobType, 0);
        goto LABEL_3;
      case 0xDBE:
        v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::CookieRequestHeaderFieldValue,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WebCore::SameSiteInfo const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::IncludeSecureCookies,WebCore::ApplyTrackingPrevention,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(WTF::String,BOOL)> &&)>(a2, (uint64_t *)a3, (uint64_t *)a4, (uint64_t)a1, (void (*)(_QWORD *, WTF::StringImpl **, __int16 *, WTF::StringImpl **, _BYTE *, _QWORD, _QWORD, BOOL, __int16, WTF::StringImpl **))WebKit::NetworkConnectionToWebProcess::cookieRequestHeaderFieldValue, 0);
        goto LABEL_3;
      case 0xDBF:
        v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::CookiesEnabledSync,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, (uint64_t)a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, uint64_t))WebKit::NetworkConnectionToWebProcess::cookiesEnabledSync, 0);
        goto LABEL_3;
      case 0xDC0:
        v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::CookiesForDOM,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WebCore::SameSiteInfo const&,WTF::URL const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::IncludeSecureCookies,WebCore::ApplyTrackingPrevention,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(WTF::String,BOOL)> &&)>(a2, (uint64_t *)a3, a4, (uint64_t)a1, (void (*)(_QWORD *, WTF::StringImpl **, __int16 *, WTF::StringImpl **, _QWORD, _QWORD, unint64_t, BOOL, __int16, WTF::StringImpl **))WebKit::NetworkConnectionToWebProcess::cookiesForDOM, 0);
        goto LABEL_3;
      case 0xDC1:
        v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::DomCookiesForHost,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)>(a2, (uint64_t *)a3, a4, (uint64_t)a1, (void (*)(_QWORD *, WTF::StringImpl **, _QWORD **))WebKit::NetworkConnectionToWebProcess::domCookiesForHost, 0);
        goto LABEL_3;
      case 0xDC2:
        v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::GetNetworkLoadInformationResponse,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::ResourceResponse const&)> &&)>(a2, (uint64_t *)a3, a4, (uint64_t)a1, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::NetworkConnectionToWebProcess::getNetworkLoadInformationResponse, 0);
        goto LABEL_3;
      case 0xDC3:
        v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::GetNetworkLoadIntermediateInformation,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)>(a2, (uint64_t *)a3, a4, (uint64_t)a1, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::NetworkConnectionToWebProcess::getNetworkLoadIntermediateInformation, 0);
        goto LABEL_3;
      case 0xDC4:
        v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::GetRawCookies,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WebCore::SameSiteInfo const&,WTF::URL const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ApplyTrackingPrevention,WebCore::ShouldRelaxThirdPartyCookieBlocking,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(a2, (uint64_t *)a3, (uint64_t *)a4, (uint64_t)a1, (void (*)(_QWORD *, WTF::StringImpl **, __int16 *, WTF::StringImpl **, _BYTE *, _QWORD, _QWORD, BOOL, BOOL, WTF::StringImpl **))WebKit::NetworkConnectionToWebProcess::getRawCookies, 0);
        goto LABEL_3;
      case 0xDC6:
        v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::TakeNetworkLoadInformationMetrics,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::NetworkLoadMetrics const&)> &&)>(a2, (uint64_t *)a3, a4, (uint64_t)a1, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::NetworkConnectionToWebProcess::takeNetworkLoadInformationMetrics, 0);
        goto LABEL_3;
      case 0xDC7:
        v5 = IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::TestProcessIncomingSyncMessagesWhenWaitingForSyncReply,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)> &&)>(a2, (uint64_t *)a3, a4, (uint64_t)a1, (void (*)(_QWORD *, unint64_t, _QWORD **))WebKit::NetworkConnectionToWebProcess::testProcessIncomingSyncMessagesWhenWaitingForSyncReply, 0);
        goto LABEL_3;
      default:
        break;
    }
  }
  if (a1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 8))(a1);
  else
    --a1[2];
  return v6;
}

WebCore::MessagePortChannel *WebKit::NetworkConnectionToWebProcess::entangleLocalPortInThisProcessToRemote(uint64_t a1, uint64_t *a2)
{
  WebCore::MessagePortChannel *result;
  WebCore::MessagePortChannel *v5;
  uint64_t *v6;
  uint64_t *v7[3];

  WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::add((uint64_t *)(a1 + 264), a2, (uint64_t)v7);
  WebCore::MessagePortChannelRegistry::didEntangleLocalToRemote();
  result = (WebCore::MessagePortChannel *)WebCore::MessagePortChannelRegistry::existingChannelContainingPort();
  if (result)
  {
    v5 = result;
    ++*(_DWORD *)result;
    if (WebCore::MessagePortChannel::hasAnyMessagesPendingOrInFlight(result))
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v7, (uint64_t **)(a1 + 64));
      v6 = a2;
      IPC::Connection::send<Messages::NetworkProcessConnection::MessagesAvailableForPort>((uint64_t)v7[0], &v6, 0, 0, 0);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v7);
    }
    return (WebCore::MessagePortChannel *)WTF::RefCounted<WebCore::MessagePortChannel>::deref(v5);
  }
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::subscribeToCookieChangeNotifications(WebKit::NetworkConnectionToWebProcess *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];

  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 24, a2, a3, (uint64_t)v6);
  v4 = *((_QWORD *)this + 9);
  v6[0] = *((_QWORD *)this + 10);
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 216), v6);
  if (result)
    return WebCore::NetworkStorageSession::startListeningForCookieChangeNotifications();
  return result;
}

uint64_t WebKit::NetworkConnectionToWebProcess::messagePortDisentangled(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = (uint64_t *)(a1 + 264);
  v4 = (_QWORD *)WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>((uint64_t *)(a1 + 264), a2);
  v5 = *(_QWORD *)(a1 + 264);
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4)
      return WebCore::MessagePortChannelRegistry::didDisentangleMessagePort();
  }
  else
  {
    if (!v4)
      return WebCore::MessagePortChannelRegistry::didDisentangleMessagePort();
    v6 = 0;
  }
  if (v6 != v4)
    WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::remove(v3, v4);
  return WebCore::MessagePortChannelRegistry::didDisentangleMessagePort();
}

uint64_t WebKit::NetworkConnectionToWebProcess::didReceiveSyncMessage(WebKit::NetworkConnectionToWebProcess *this, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  NSObject *v12;
  uint8_t buf[4];
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int16 *)(a3 + 50);
  if (v8 >= 0xE98)
    v8 = 3736;
  v9 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v8 + 2]);
  if (v9 <= 0x22)
  {
    if (v9 == 32)
      return WebKit::NetworkConnectionToWebProcess::didReceiveSyncNetworkConnectionToWebProcessMessage(this, a2, a3, a4);
LABEL_10:
    WTFLogAlways();
    return 0;
  }
  if (v9 != 194)
  {
    if (v9 == 183)
    {
      v11 = WebKit::NetworkConnectionToWebProcess::paymentCoordinator(this);
      return (*(uint64_t (**)(uint64_t, unsigned __int8 **, uint64_t, IPC::Encoder **))(*(_QWORD *)v11 + 32))(v11, a2, a3, a4);
    }
    if (v9 == 35)
    {
      v12 = off_1ECE71C40;
      if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "virtual BOOL WebKit::NetworkConnectionToWebProcess::didReceiveSyncMessage(IPC::Connection &, IPC::Decoder "
              "&, UniqueRef<IPC::Encoder> &)";
        _os_log_fault_impl(&dword_196BCC000, v12, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 403: Invalid message dispatched %{public}s", buf, 0xCu);
      }
      *(_BYTE *)(*((_QWORD *)this + 8) + 98) = 1;
      return 0;
    }
    goto LABEL_10;
  }
  return 0;
}

WTF::StringImpl *WebKit::NetworkConnectionToWebProcess::domCookiesForHost(_QWORD *a1, WTF::URL *this, uint64_t *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  WebCore::NetworkStorageSession *v9;
  uint64_t v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  const char *v14;
  WTF::StringImpl *v15;
  uint8_t buf[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  WTF::URL::host(this);
  if ((v6 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  if ((unint64_t)v15 + 1 <= 1)
  {
    v7 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_5:
      *(_BYTE *)(a1[8] + 98) = 1;
LABEL_6:
      *(_OWORD *)buf = 0uLL;
      goto LABEL_10;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::domCookiesForHost(const URL &, CompletionHandler<vo"
                         "id (const Vector<WebCore::Cookie> &)> &&)";
    v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 91"
          "4: Invalid message dispatched %s";
LABEL_16:
    _os_log_fault_impl(&dword_196BCC000, v7, OS_LOG_TYPE_FAULT, v14, buf, 0xCu);
    goto LABEL_5;
  }
  if ((WebKit::NetworkProcess::allowsFirstPartyForCookies(a1[9], a1[32], this) & 1) == 0)
  {
    v7 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_5;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::NetworkConnectionToWebProcess::domCookiesForHost(const URL &, CompletionHandler<vo"
                         "id (const Vector<WebCore::Cookie> &)> &&)";
    v14 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp 91"
          "5: Invalid message dispatched %s";
    goto LABEL_16;
  }
  v8 = a1[9];
  *(_QWORD *)buf = a1[10];
  v9 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v8 + 216), buf);
  if (!v9)
    goto LABEL_6;
  WebCore::NetworkStorageSession::domCookiesForHost(v9, (const WTF::String *)&v15);
LABEL_10:
  v10 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v10 + 16))(v10, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v11);
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebStorageNamespaceProvider::createTransientLocalStorageNamespace@<X0>(unsigned int *a1@<X1>, int a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  unsigned int v7;

  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E34F2360;
  *(_BYTE *)(result + 12) = 2;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  do
    v7 = __ldaxr(a1);
  while (__stlxr(v7 + 1, a1));
  *(_QWORD *)(result + 32) = a1;
  *(_DWORD *)(result + 40) = a2;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = 0;
  *a3 = result;
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::registrableDomainsToDeleteOrRestrictWebsiteDataFor(WebKit::ResourceLoadStatisticsStore *this, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  _BOOL4 v8;
  double v9;
  void *v10;
  WTF *v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  double v17;
  double v18;
  double v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  NSObject *v36;
  char *v37;
  void *v38;
  WTF *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  _BOOL4 v44;
  WTF::StringImpl *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  uint8_t buf[24];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)(a2 + 640);
  WTF::WallTime::now(this);
  v6 = v4 + v5;
  v7 = *(double *)(a2 + 232);
  v8 = v7 > v6 || v7 == 0.0;
  if (!v8)
    *(_QWORD *)(a2 + 232) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a2, (uint64_t)&v51);
  WebKit::ResourceLoadStatisticsStore::domains((WebKit::ResourceLoadStatisticsStore *)&v49);
  v47 = 0;
  v48 = 0;
  v9 = v6;
  if (v50)
  {
    v14 = v49;
    v15 = 40 * v50;
    v9 = v6;
    do
    {
      v16 = (WTF::StringImpl **)(v14 + 8);
      if ((WebKit::ResourceLoadStatisticsStore::shouldExemptFromWebsiteDataDeletion((WebKit::ResourceLoadStatisticsStore *)a2, (WTF::ASCIICaseInsensitiveHash **)(v14 + 8)) & 1) == 0)
      {
        v17 = *(double *)(v14 + 24);
        if (v17 == 0.0 || WebKit::ResourceLoadStatisticsStore::hasStatisticsExpired(a2, 0, v17))
        {
          v18 = *(double *)(v14 + 16);
          if (v18 <= 0.0)
            v19 = 0.0;
          else
            v19 = *(double *)(v14 + 16);
          if (v9 > v19 && v18 > 0.0)
            v9 = v19;
          if (WebKit::ResourceLoadStatisticsStore::shouldRemoveAllWebsiteDataFor((WebKit::ResourceLoadStatisticsStore *)a2, v14, v7 > v6))
          {
            v21 = *((unsigned int *)this + 3);
            if ((_DWORD)v21 == *((_DWORD *)this + 2))
            {
              WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)this, v14 + 8);
            }
            else
            {
              v24 = *(_QWORD *)this;
              v25 = *v16;
              if (*v16)
                *(_DWORD *)v25 += 2;
              *(_QWORD *)(v24 + 8 * v21) = v25;
              *((_DWORD *)this + 3) = v21 + 1;
            }
            v22 = (uint64_t *)((char *)this + 32);
            v23 = *((unsigned int *)this + 11);
            if ((_DWORD)v23 == *((_DWORD *)this + 10))
            {
              WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)v22, v14 + 8);
            }
            else
            {
              v26 = *v22;
              v27 = *v16;
              if (*v16)
                *(_DWORD *)v27 += 2;
              *(_QWORD *)(v26 + 8 * v23) = v27;
              *((_DWORD *)this + 11) = v23 + 1;
            }
          }
          else
          {
            if (WebKit::ResourceLoadStatisticsStore::shouldRemoveAllButCookiesFor(a2, v14, v7 > v6))
            {
              v28 = (uint64_t *)((char *)this + 32);
              v29 = *((unsigned int *)this + 11);
              if ((_DWORD)v29 == *((_DWORD *)this + 10))
              {
                WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)v28, v14 + 8);
              }
              else
              {
                v32 = *v28;
                v33 = *v16;
                if (*v16)
                  *(_DWORD *)v33 += 2;
                *(_QWORD *)(v32 + 8 * v29) = v33;
                *((_DWORD *)this + 11) = v29 + 1;
              }
              WebKit::ResourceLoadStatisticsStore::setIsScheduledForAllScriptWrittenStorageRemoval(a2, (const WebCore::RegistrableDomain *)(v14 + 8));
            }
            if (WebKit::ResourceLoadStatisticsStore::shouldEnforceSameSiteStrictFor(a2, v14, v7 > v6))
            {
              v30 = (uint64_t *)((char *)this + 48);
              v31 = *((unsigned int *)this + 15);
              if ((_DWORD)v31 == *((_DWORD *)this + 14))
              {
                WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)v30, v14 + 8);
              }
              else
              {
                v34 = *v30;
                v35 = *v16;
                if (*v16)
                  *(_DWORD *)v35 += 2;
                *(_QWORD *)(v34 + 8 * v31) = v35;
                *((_DWORD *)this + 15) = v31 + 1;
              }
              if (*(_BYTE *)(a2 + 708))
              {
                v44 = v8;
                v36 = qword_1ECE71140;
                if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
                {
                  WTF::String::utf8();
                  v37 = v46 ? (char *)v46 + 16 : 0;
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = v37;
                  _os_log_impl(&dword_196BCC000, v36, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Scheduled %{public}s to have its cookies set to SameSite=strict.", buf, 0xCu);
                  v39 = v46;
                  v46 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 1)
                      WTF::fastFree(v39, v38);
                    else
                      --*(_DWORD *)v39;
                  }
                }
                v40 = *v16;
                if (*v16)
                  *(_DWORD *)v40 += 2;
                v45 = v40;
                WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"Scheduled '", 12, (uint64_t *)&v45, (uint64_t)"' to have its cookies set to SameSite=strict'.", 47, buf);
                WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(a2, 13, 4, (uint64_t)buf);
                v42 = *(WTF::StringImpl **)buf;
                *(_QWORD *)buf = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, v41);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v43 = v45;
                v45 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, v41);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v8 = v44;
              }
            }
          }
          if (!v8 && *(_BYTE *)(v14 + 33))
          {
            if (HIDWORD(v48) == (_DWORD)v48)
            {
              WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v47, v14);
            }
            else
            {
              *((_DWORD *)v47 + HIDWORD(v48)) = *(_DWORD *)v14;
              ++HIDWORD(v48);
            }
          }
        }
      }
      v14 += 40;
      v15 -= 40;
    }
    while (v15);
  }
  if (!*(_BYTE *)(a2 + 226) && v6 - v9 < *(double *)(a2 + 168))
    WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 32, 0);
  WebKit::ResourceLoadStatisticsStore::clearGrandfathering(a2, (unsigned int *)v47, HIDWORD(v48));
  v11 = v47;
  if (v47)
  {
    v47 = 0;
    LODWORD(v48) = 0;
    WTF::fastFree(v11, v10);
  }
  result = WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v10);
  v13 = v51;
  if (v52)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (v51)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return result;
}

WTF *WebKit::ResourceLoadStatisticsStore::markAsPrevalentIfHasRedirectedToPrevalent(WebKit::ResourceLoadStatisticsStore *this)
{
  WebCore::SQLiteDatabase *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  NSObject *v7;
  uint64_t v8;
  int Error;
  uint64_t ErrorMsg;
  WTF::StringImpl *v11;
  _BYTE v12[16];
  unsigned int v13;
  _BYTE v14[16];
  unsigned int v15;
  _BYTE v16[16];
  unsigned int v17;
  WTF **v18;
  WTF *v19[2];
  _BYTE buf[12];
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v19[0] = 0;
  v19[1] = 0;
  v18 = v19;
  v2 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  if (!v17)
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v16) == 100)
    {
      if (!v17)
      {
        *(_DWORD *)buf = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v16);
        std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v18, *(unsigned int *)buf, buf);
        if (!v17)
          continue;
      }
LABEL_10:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_11;
    }
  }
  WebCore::SQLiteDatabase::prepareStatement();
  if (!v15)
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v14) == 100)
    {
      if (!v15)
      {
        *(_DWORD *)buf = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v14);
        std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v18, *(unsigned int *)buf, buf);
        if (!v15)
          continue;
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  WebKit::buildList<std::set<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>>(&v11, &v18);
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"UPDATE ObservedDomains SET isPrevalent = 1 WHERE domainID IN (", 63, (uint64_t *)&v11, 41, buf);
  WebCore::SQLiteDatabase::prepareStatementSlow();
  v4 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v11;
  v11 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (v13 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v12) != 101)
  {
    v7 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v8 = *((_QWORD *)this + 81);
      Error = WebCore::SQLiteDatabase::lastError(v2);
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = this;
      v21 = 2048;
      v22 = v8;
      v23 = 1024;
      v24 = Error;
      v25 = 2081;
      v26 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::markAsPrevalentIfHasRedirectedToPrevalent: failed to step statement", buf, 0x26u);
    }
  }
  if (v13 != -1)
    (*(&off_1E34C0CF8 + v13))((int)buf, (WebCore::SQLiteStatement *)v12);
  if (v15 != -1)
    (*(&off_1E34C0CF8 + v15))((int)buf, (WebCore::SQLiteStatement *)v14);
  if (v17 != -1)
    (*(&off_1E34C0CF8 + v17))((int)buf, (WebCore::SQLiteStatement *)v16);
  return std::__tree<unsigned int,std::less<unsigned int>,WTF::FastAllocator<unsigned int>>::destroy(v19[0]);
}

uint64_t *WebKit::ResourceLoadStatisticsStore::ensurePrevalentResourcesForDebugMode(uint64_t *this, _BYTE *a2)
{
  uint64_t *v2;
  _DWORD **v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  char *v17;
  void *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t buf[24];
  uint64_t v30;

  v2 = this;
  v30 = *MEMORY[0x1E0C80C00];
  if (!a2[709])
  {
    *this = 0;
    this[1] = 0;
    return this;
  }
  v28 = 2;
  v27 = WTF::fastMalloc((WTF *)0x10);
  WebKit::DatabaseUtilities::beginTransactionIfNecessary((WebKit::DatabaseUtilities *)a2, (uint64_t)&v25);
  v4 = (_DWORD **)(a2 + 280);
  WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)a2, (const WebCore::RegistrableDomain *)(a2 + 280), (uint64_t)"ensurePrevalentResourcesForDebugMode");
  if ((_BYTE)v5)
  {
    WebKit::ResourceLoadStatisticsStore::setPrevalentResource((WebCore::SQLiteStatement **)a2, (const WebCore::RegistrableDomain *)(a2 + 280), 2);
    v6 = HIDWORD(v28);
    if (HIDWORD(v28) == (_DWORD)v28)
    {
      WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v27, (unint64_t)(a2 + 280));
    }
    else
    {
      v7 = v27;
      v8 = *v4;
      if (*v4)
        *v8 += 2;
      *(_QWORD *)(v7 + 8 * v6) = v8;
      HIDWORD(v28) = v6 + 1;
    }
    v10 = (WTF::StringImpl **)(a2 + 240);
    v9 = *((_QWORD *)a2 + 30);
    if (!v9 || !*(_DWORD *)(v9 + 4) || (MEMORY[0x19AEABBCC]() & 1) != 0)
      goto LABEL_12;
    WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain((uint64_t)a2, (const WebCore::RegistrableDomain *)(a2 + 240), (uint64_t)"ensurePrevalentResourcesForDebugMode");
    if ((_BYTE)v5)
    {
      WebKit::ResourceLoadStatisticsStore::setPrevalentResource((WebCore::SQLiteStatement **)a2, (const WebCore::RegistrableDomain *)(a2 + 240), 2);
      v13 = HIDWORD(v28);
      if (HIDWORD(v28) == (_DWORD)v28)
      {
        WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RegistrableDomain const&>((uint64_t)&v27, (unint64_t)(a2 + 240));
      }
      else
      {
        v14 = v27;
        v15 = *v10;
        if (*v10)
          *(_DWORD *)v15 += 2;
        *(_QWORD *)(v14 + 8 * v13) = v15;
        HIDWORD(v28) = v13 + 1;
      }
      if (a2[708])
      {
        v16 = qword_1ECE71140;
        if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
        {
          WTF::String::utf8();
          v17 = v24 ? (char *)v24 + 16 : 0;
          *(_DWORD *)buf = 136380675;
          *(_QWORD *)&buf[4] = v17;
          _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: Did set %{private}s as prevalent resource for the purposes of ITP Debug Mode.", buf, 0xCu);
          v19 = v24;
          v24 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1)
              WTF::fastFree(v19, v18);
            else
              --*(_DWORD *)v19;
          }
        }
        v20 = *v10;
        if (*v10)
          *(_DWORD *)v20 += 2;
        v23 = v20;
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] Did set '", 16, (uint64_t *)&v23, (uint64_t)"' as prevalent resource for the purposes of ITP Debug Mode.", 60, buf);
        WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage((uint64_t)a2, 13, 4, (uint64_t)buf);
        v21 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v5);
          else
            *(_DWORD *)v21 -= 2;
        }
        v22 = v23;
        v23 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v5);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
LABEL_12:
      *v2 = v27;
      v11 = v28;
      v27 = 0;
      v28 = 0;
      v2[1] = v11;
      goto LABEL_13;
    }
  }
  *v2 = 0;
  v2[1] = 0;
LABEL_13:
  v12 = v25;
  if (v26)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  }
  else if (!v25)
  {
    return (uint64_t *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v5);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return (uint64_t *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v5);
}

WebKit::ResourceLoadStatisticsStore *WebKit::ResourceLoadStatisticsStore::processStatisticsAndDataRecords(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  WebKit::ResourceLoadStatisticsStore *v4;
  WebKit::ResourceLoadStatisticsStore *v5;

  v1 = (uint64_t)this;
  if (!*((_BYTE *)this + 226) || *((_BYTE *)this + 224))
  {
    if (*((_BYTE *)this + 225))
      WebKit::ResourceLoadStatisticsStore::classifyPrevalentResources(this);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v1 + 96), v1);
    v2 = *(unsigned int **)(v1 + 96);
    if (v2)
    {
      do
        v3 = __ldaxr(v2);
      while (__stlxr(v3 + 1, v2));
    }
    v4 = (WebKit::ResourceLoadStatisticsStore *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v4 = &off_1E34C0DB8;
    *((_QWORD *)v4 + 1) = v1;
    *((_QWORD *)v4 + 2) = v2;
    v5 = v4;
    WebKit::ResourceLoadStatisticsStore::removeDataRecords(v1, (uint64_t *)&v5);
    this = v5;
    if (v5)
      return (WebKit::ResourceLoadStatisticsStore *)(*(uint64_t (**)(WebKit::ResourceLoadStatisticsStore *))(*(_QWORD *)v5 + 8))(v5);
  }
  return this;
}

WTF::StringImpl *WebKit::ResourceLoadStatisticsStore::findNotVeryPrevalentResources(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  int v27;
  int v28;
  WTF::StringImpl *result;
  WTF::StringImpl *v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50[2];
  unsigned int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53[2];
  unsigned int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  _BYTE v58[24];
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61[2];
  unsigned int v62;
  _BYTE v63[16];
  unsigned int v64;

  *(_QWORD *)this = 0;
  WebCore::SQLiteDatabase::prepareStatement();
  if (v64)
  {
    v3 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(0);
    v2 = 0;
LABEL_8:
    v5 = 0;
    v6 = 0;
  }
  else
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v63) == 100)
    {
      if (v64)
        goto LABEL_127;
      LODWORD(v53[0]) = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v63);
      if (LODWORD(v53[0]))
      {
        if (v64
          || (WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v63),
              WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(v61, &v57),
              v64))
        {
LABEL_127:
          v47 = std::__throw_bad_variant_access[abi:sn180100]();
          return (WTF::StringImpl *)WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(v47);
        }
        if (WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v63))
          v31 = 2;
        else
          v31 = 1;
        *(_DWORD *)v58 = v31;
        *(_OWORD *)&v58[4] = 0uLL;
        v32 = v61[0];
        v61[0] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v30);
          else
            *(_DWORD *)v32 -= 2;
        }
        WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::add<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>((uint64_t)v61, (uint64_t *)this, (int *)v53, (uint64_t)&v57);
        v34 = v57;
        v57 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
      }
      if (v64)
        goto LABEL_127;
    }
    v2 = *(_QWORD *)this;
    v3 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(*(_DWORD **)this);
    if (!v2)
      goto LABEL_8;
    v6 = *(_DWORD *)(v2 - 4);
    v5 = v2 + 40 * v6;
  }
  v57 = this;
  *(_QWORD *)v58 = v3;
  *(_QWORD *)&v58[8] = v4;
  *(_QWORD *)&v58[16] = v5;
  v59 = v2 + 40 * v6;
  WebKit::buildList<WTF::SizedIteratorRange<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>,unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>>(&v60, &v57);
  v7 = v60;
  if (v60)
    *(_DWORD *)v60 += 2;
  v56 = v7;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"SELECT subresourceDomainID, COUNT(topFrameDomainID) FROM SubresourceUnderTopFrameDomains WHERE subresourceDomainID IN (", 120, (uint64_t *)&v56, (uint64_t)") GROUP BY subresourceDomainID", 31, v61);
  WebCore::SQLiteDatabase::prepareStatementSlow();
  v9 = v61[0];
  v61[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v56;
  v56 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (!*(_DWORD *)&v58[8])
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)&v57) == 100)
    {
      if (*(_DWORD *)&v58[8])
        goto LABEL_127;
      v11 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)&v57);
      if (v11)
      {
        v35 = *(_QWORD *)this;
        v36 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*(_QWORD *)this, v11);
        v37 = v35 ? v35 + 40 * *(unsigned int *)(v35 - 4) : 0;
        if ((int *)v37 != v36)
        {
          if (*(_DWORD *)&v58[8])
            goto LABEL_127;
          v36[5] = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)&v57);
        }
      }
      if (*(_DWORD *)&v58[8])
        goto LABEL_127;
    }
  }
  v12 = v60;
  if (v60)
    *(_DWORD *)v60 += 2;
  v55 = v12;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"SELECT subresourceDomainID, COUNT(toDomainID) FROM SubresourceUniqueRedirectsTo WHERE subresourceDomainID IN (", 111, (uint64_t *)&v55, (uint64_t)") GROUP BY subresourceDomainID", 31, v53);
  WebCore::SQLiteDatabase::prepareStatementSlow();
  v14 = v53[0];
  v53[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v55;
  v55 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (!v62)
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v61) == 100)
    {
      if (v62)
        goto LABEL_127;
      v16 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v61);
      if (v16)
      {
        v38 = *(_QWORD *)this;
        v39 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*(_QWORD *)this, v16);
        v40 = v38 ? v38 + 40 * *(unsigned int *)(v38 - 4) : 0;
        if ((int *)v40 != v39)
        {
          if (v62)
            goto LABEL_127;
          v39[6] = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v61);
        }
      }
      if (v62)
        goto LABEL_127;
    }
  }
  v17 = v60;
  if (v60)
    *(_DWORD *)v60 += 2;
  v52 = v17;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"SELECT subframeDomainID, COUNT(topFrameDomainID) FROM SubframeUnderTopFrameDomains WHERE subframeDomainID IN (", 111, (uint64_t *)&v52, (uint64_t)") GROUP BY subframeDomainID", 28, v50);
  WebCore::SQLiteDatabase::prepareStatementSlow();
  v19 = v50[0];
  v50[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v52;
  v52 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (!v54)
  {
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v53) == 100)
    {
      if (v54)
        goto LABEL_127;
      v21 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v53);
      if (v21)
      {
        v41 = *(_QWORD *)this;
        v42 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*(_QWORD *)this, v21);
        v43 = v41 ? v41 + 40 * *(unsigned int *)(v41 - 4) : 0;
        if ((int *)v43 != v42)
        {
          if (v54)
            goto LABEL_127;
          v42[7] = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v53);
        }
      }
      if (v54)
        goto LABEL_127;
    }
  }
  v22 = v60;
  if (v60)
    *(_DWORD *)v60 += 2;
  v48 = v22;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"SELECT sourceDomainID, COUNT(toDomainID) FROM TopFrameUniqueRedirectsTo WHERE sourceDomainID IN (", 98, (uint64_t *)&v48, (uint64_t)") GROUP BY sourceDomainID", 26, &v49);
  WebCore::SQLiteDatabase::prepareStatementSlow();
  v24 = v49;
  v49 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v48;
  v48 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v51;
  if (!v51)
  {
    while (1)
    {
      v27 = WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v50);
      v26 = v51;
      if (v27 != 100)
        break;
      if (v51)
        goto LABEL_127;
      v28 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v50);
      if (v28)
      {
        v44 = *(_QWORD *)this;
        v45 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*(_QWORD *)this, v28);
        v46 = v44 ? v44 + 40 * *(unsigned int *)(v44 - 4) : 0;
        if ((int *)v46 != v45)
        {
          if (v51)
            goto LABEL_127;
          v45[8] = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v50);
        }
      }
      if (v51)
        goto LABEL_127;
    }
  }
  if (v26 != -1)
    (*(&off_1E34C0CF8 + v26))((int)&v49, (WebCore::SQLiteStatement *)v50);
  if (v54 != -1)
    (*(&off_1E34C0CF8 + v54))((int)v50, (WebCore::SQLiteStatement *)v53);
  if (v62 != -1)
    (*(&off_1E34C0CF8 + v62))((int)v53, (WebCore::SQLiteStatement *)v61);
  if (*(_DWORD *)&v58[8] != -1)
    (*(&off_1E34C0CF8 + *(unsigned int *)&v58[8]))((int)v61, (WebCore::SQLiteStatement *)&v57);
  result = v60;
  v60 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  if (v64 != -1)
    return (WTF::StringImpl *)(*(&off_1E34C0CF8 + v64))((int)&v57, (WebCore::SQLiteStatement *)v63);
  return result;
}

void WebKit::ResourceLoadStatisticsStore::insertDomainRelationshipList(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  const WebCore::RegistrableDomain *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  int v17;
  size_t v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  const char *v27;
  __int16 v28;
  _WORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  WTF::StringImpl *v56;
  NSObject *v57;
  WTF::WallTime *v58;
  double v59;
  double v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int Error;
  uint64_t ErrorMsg;
  uint64_t v72[2];
  unsigned int v73;
  uint64_t v74;
  _BYTE buf[22];
  __int16 v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  memset(buf, 0, 20);
  buf[20] = 1;
  v6 = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a3, (uint64_t)a2, (const WTF::StringImpl *)a3);
  v7 = (const WebCore::RegistrableDomain *)v6;
  v72[0] = v6;
  v72[1] = v8;
  if (*a3)
    v9 = *a3 + 8 * *(unsigned int *)(*a3 - 4);
  else
    v9 = 0;
  if (v9 != v6)
  {
    do
    {
      WebKit::ResourceLoadStatisticsStore::ensureResourceStatisticsForRegistrableDomain(a1, v7, (uint64_t)"ensureAndMakeDomainList");
      if ((_BYTE)v10)
      {
        v12 = *(_DWORD *)&buf[16];
        v13 = *(_DWORD *)&buf[16] != 0;
        v14 = *(_QWORD *)v7;
        if (*(_DWORD *)&buf[16])
          v15 = ", ";
        else
          v15 = "";
        if (v14)
        {
          v16 = *(_DWORD *)(v14 + 4);
          if (v16 >= 0xFFFFFFFE)
            v17 = -1;
          else
            v17 = v16 + 2;
        }
        else
        {
          v17 = 2;
        }
        v18 = 2 * (*(_DWORD *)&buf[16] != 0);
        v19 = __CFADD__(v17, 2 * v13);
        v20 = v17 + 2 * v13;
        if (v19)
          v20 = -1;
        v19 = __CFADD__(v20, *(_DWORD *)&buf[16]);
        v21 = v20 + *(_DWORD *)&buf[16];
        if (v19)
          v22 = 0xFFFFFFFFLL;
        else
          v22 = v21;
        v23 = *(_QWORD *)&buf[8];
        if ((*(_QWORD *)&buf[8] || (v23 = *(_QWORD *)buf) != 0) && (*(_BYTE *)(v23 + 16) & 4) == 0
          || v14 && (*(_BYTE *)(v14 + 16) & 4) == 0)
        {
          v24 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)buf);
          if (v24)
          {
            if (v12)
            {
              v25 = 2 * v18;
              v26 = (_WORD *)v24;
              v27 = ", ";
              do
              {
                v28 = *(unsigned __int8 *)v27++;
                *v26++ = v28;
                v25 -= 2;
              }
              while (v25);
            }
            v29 = (_WORD *)(v24 + 2 * v18);
            *v29 = 34;
            v30 = (char *)(v29 + 1);
            v74 = v14;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v74, v30);
            v31 = v74;
            if (v74)
              v31 = *(unsigned int *)(v74 + 4);
            *(_WORD *)&v30[2 * v31] = 34;
          }
        }
        else
        {
          v32 = (char *)MEMORY[0x19AEAB398](buf, v22);
          if (v32)
          {
            v33 = v32;
            if ((_DWORD)v18)
              memcpy(v32, v15, v18);
            v34 = &v33[v18];
            *v34 = 34;
            v35 = v34 + 1;
            v74 = v14;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v74, v35);
            v36 = v74;
            if (v74)
              v36 = *(unsigned int *)(v74 + 4);
            v35[v36] = 34;
          }
        }
      }
      v72[0] += 8;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v72, v10, v11);
      v7 = (const WebCore::RegistrableDomain *)v72[0];
    }
    while (v72[0] != v9);
    v38 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
      goto LABEL_44;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)buf);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)buf);
  v38 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
LABEL_44:
    *(_DWORD *)v38 += 2;
  v39 = *(WTF::StringImpl **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  v40 = (WTF::StringImpl *)v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::destroy(v39, v37);
      v40 = *(WTF::StringImpl **)buf;
    }
    else
    {
      *(_DWORD *)v39 -= 2;
      v40 = (WTF::StringImpl *)v38;
    }
  }
  *(_QWORD *)buf = 0;
  if (!v40)
  {
LABEL_52:
    if (v5)
      goto LABEL_53;
    goto LABEL_73;
  }
  if (*(_DWORD *)v40 != 2)
  {
    *(_DWORD *)v40 -= 2;
    goto LABEL_52;
  }
  WTF::StringImpl::destroy(v40, v37);
  if (v5)
  {
LABEL_53:
    v41 = *(_DWORD *)(v5 + 4);
    if (v38)
      goto LABEL_54;
LABEL_74:
    v42 = 0;
    goto LABEL_55;
  }
LABEL_73:
  v41 = 0;
  if (!v38)
    goto LABEL_74;
LABEL_54:
  v42 = *(_DWORD *)(v38 + 4);
  if (v42 < 0)
  {
LABEL_114:
    __break(0xC471u);
    return;
  }
LABEL_55:
  v43 = __OFADD__(v42, 3);
  v44 = v42 + 3;
  v45 = v43;
  if (v41 < 0)
    goto LABEL_114;
  if ((v45 & 1) != 0)
    goto LABEL_114;
  v46 = (v41 + v44);
  if (__OFADD__(v41, v44))
    goto LABEL_114;
  if ((!v5 || (*(_BYTE *)(v5 + 16) & 4) != 0) && (!v38 || (*(_BYTE *)(v38 + 16) & 4) != 0))
  {
    if ((v46 & 0x80000000) != 0)
      goto LABEL_114;
    WTF::tryFastCompactMalloc((WTF *)(v46 + 20));
    v47 = *(_QWORD *)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_114;
    **(_DWORD **)buf = 2;
    *(_DWORD *)(v47 + 4) = v46;
    *(_QWORD *)(v47 + 8) = v47 + 20;
    *(_DWORD *)(v47 + 16) = 4;
    v72[0] = v5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v72, (char *)(v47 + 20));
    v52 = v72[0];
    if (v72[0])
      v52 = *(unsigned int *)(v72[0] + 4);
    v53 = (char *)(v47 + 20 + v52);
    *(_QWORD *)buf = v38;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)buf, v53);
    v54 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
      v54 = *(unsigned int *)(*(_QWORD *)buf + 4);
    v55 = &v53[v54];
    v55[2] = 59;
    *(_WORD *)v55 = 10528;
  }
  else
  {
    if (v46 > 0x7FFFFFEF)
      goto LABEL_114;
    WTF::tryFastCompactMalloc((WTF *)(2 * (v41 + v44) + 20));
    v47 = *(_QWORD *)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_114;
    **(_DWORD **)buf = 2;
    *(_DWORD *)(v47 + 4) = v46;
    *(_QWORD *)(v47 + 8) = v47 + 20;
    *(_DWORD *)(v47 + 16) = 0;
    v72[0] = v5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v72, (char *)(v47 + 20));
    v48 = v72[0];
    if (v72[0])
      v48 = *(unsigned int *)(v72[0] + 4);
    v49 = (char *)(v47 + 20 + 2 * v48);
    *(_QWORD *)buf = v38;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)buf, v49);
    v50 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
      v50 = *(unsigned int *)(*(_QWORD *)buf + 4);
    v51 = &v49[2 * v50];
    *(_DWORD *)v51 = 2687008;
    *((_WORD *)v51 + 2) = 59;
  }
  WebCore::SQLiteDatabase::prepareStatementSlow();
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v47, v56);
    if (!v38)
      goto LABEL_88;
  }
  else
  {
    *(_DWORD *)v47 -= 2;
    if (!v38)
      goto LABEL_88;
  }
  if (*(_DWORD *)v38 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v38, v56);
    if (!v5)
      goto LABEL_94;
LABEL_91:
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, v56);
    else
      *(_DWORD *)v5 -= 2;
    goto LABEL_94;
  }
  *(_DWORD *)v38 -= 2;
LABEL_88:
  if (v5)
    goto LABEL_91;
LABEL_94:
  if (v73 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v72))
  {
    v57 = qword_1ECE71758;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      goto LABEL_97;
    v68 = *(_QWORD *)(a1 + 648);
    Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
    ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
    *(_DWORD *)buf = 134218755;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v68;
    v76 = 1024;
    v77 = Error;
    v78 = 2081;
    v79 = ErrorMsg;
    v64 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertDomainRelationshipLi"
          "st: failed to bind first parameter";
    goto LABEL_111;
  }
  if (!*a2)
    goto LABEL_106;
  v58 = (WTF::WallTime *)WTF::StringImpl::find();
  if (v58 == (WTF::WallTime *)-1)
    goto LABEL_106;
  if (v73)
  {
LABEL_113:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_114;
  }
  v59 = *(double *)(a1 + 640);
  WTF::WallTime::now(v58);
  if (!WebCore::SQLiteStatement::bindDouble((WebCore::SQLiteStatement *)v72, v59 + v60))
  {
LABEL_106:
    if (!v73)
    {
      if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v72) == 101)
        goto LABEL_97;
      v57 = qword_1ECE71758;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
        goto LABEL_97;
      v65 = *(_QWORD *)(a1 + 648);
      v66 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      v67 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v65;
      v76 = 1024;
      v77 = v66;
      v78 = 2081;
      v79 = v67;
      v64 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertDomainRelationship"
            "List: failed to step statement";
      goto LABEL_111;
    }
    goto LABEL_113;
  }
  v57 = qword_1ECE71758;
  if (!os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    goto LABEL_97;
  v61 = *(_QWORD *)(a1 + 648);
  v62 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
  v63 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
  *(_DWORD *)buf = 134218755;
  *(_QWORD *)&buf[4] = a1;
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = v61;
  v76 = 1024;
  v77 = v62;
  v78 = 2081;
  v79 = v63;
  v64 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::insertDomainRelationshipList"
        ": failed to bind second parameter";
LABEL_111:
  _os_log_error_impl(&dword_196BCC000, v57, OS_LOG_TYPE_ERROR, v64, buf, 0x26u);
LABEL_97:
  if (v73 != -1)
    (*(&off_1E34C0CF8 + v73))((int)buf, (WebCore::SQLiteStatement *)v72);
}

_DWORD *WebKit::ResourceLoadStatisticsStore::classifyPrevalentResources(WebKit::ResourceLoadStatisticsStore *this)
{
  void *v2;
  uint64_t v4[2];

  WebKit::ResourceLoadStatisticsStore::ensurePrevalentResourcesForDebugMode(v4, this);
  WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
  WebKit::ResourceLoadStatisticsStore::markAsPrevalentIfHasRedirectedToPrevalent(this);
  return WebKit::ResourceLoadStatisticsStore::reclassifyResources(this);
}

void WebKit::ResourceLoadStatisticsStore::pruneStatisticsIfNeeded(WebCore::SQLiteStatement **this)
{
  NSObject *v2;
  int v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  NSObject *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WebCore::SQLiteStatement *v11;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _BYTE v18[16];
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF *v21;
  uint64_t v22;
  _BYTE v23[16];
  unsigned int v24;
  WebCore::SQLiteStatement *v25;
  _BYTE buf[12];
  __int16 v27;
  WebCore::SQLiteStatement *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::scopedStatement((uint64_t)this, this + 39, (uint64_t)"pruneStatisticsIfNeeded", (WebCore::SQLiteStatementAutoResetScope *)&v25);
  if (v25
    && WebCore::SQLiteStatement::step(v25) == 100
    && (unint64_t)this[18] < WebCore::SQLiteStatement::columnInt(v25))
  {
    WebCore::SQLiteDatabase::prepareStatement();
    if (v24 || WebCore::SQLiteStatement::bindInt((WebCore::SQLiteStatement *)v23))
    {
      v2 = qword_1ECE71758;
      if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
      {
        v11 = this[81];
        Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
        ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
        *(_DWORD *)buf = 134218755;
        *(_QWORD *)&buf[4] = this;
        v27 = 2048;
        v28 = v11;
        v29 = 1024;
        v30 = Error;
        v31 = 2081;
        v32 = ErrorMsg;
        _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::pruneStatisticsIfNeeded: failed to bind parameter", buf, 0x26u);
      }
    }
    else
    {
      v21 = 0;
      v22 = 0;
      while (1)
      {
        if (v24)
LABEL_41:
          std::__throw_bad_variant_access[abi:sn180100]();
        if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v23) != 100)
          break;
        if (v24)
          goto LABEL_41;
        v3 = WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v23);
        *(_DWORD *)buf = v3;
        if (HIDWORD(v22) == (_DWORD)v22)
        {
          WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)&v21, buf);
        }
        else
        {
          *((_DWORD *)v21 + HIDWORD(v22)) = v3;
          ++HIDWORD(v22);
        }
      }
      WebKit::buildList<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v20, (unsigned int *)v21, HIDWORD(v22));
      v4 = v20;
      if (v20)
        *(_DWORD *)v20 += 2;
      v17 = v4;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"DELETE from ObservedDomains WHERE domainID IN (", 48, (uint64_t *)&v17, 41, buf);
      WebCore::SQLiteDatabase::prepareStatementSlow();
      v6 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v5);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = v17;
      v17 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v5);
        else
          *(_DWORD *)v7 -= 2;
      }
      if (v19 || WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v18) != 101)
      {
        v8 = qword_1ECE71758;
        if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
        {
          v14 = this[81];
          v15 = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(this + 2));
          v16 = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(this + 2));
          *(_DWORD *)buf = 134218755;
          *(_QWORD *)&buf[4] = this;
          v27 = 2048;
          v28 = v14;
          v29 = 1024;
          v30 = v15;
          v31 = 2081;
          v32 = v16;
          _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::pruneStatisticsIfNeeded: failed to step statement", buf, 0x26u);
        }
      }
      if (v19 != -1)
        (*(&off_1E34C0CF8 + v19))((int)buf, (WebCore::SQLiteStatement *)v18);
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v9);
        else
          *(_DWORD *)v4 -= 2;
      }
      v10 = v21;
      if (v21)
      {
        v21 = 0;
        LODWORD(v22) = 0;
        WTF::fastFree(v10, v9);
      }
    }
    if (v24 != -1)
      (*(&off_1E34C0CF8 + v24))((int)buf, (WebCore::SQLiteStatement *)v23);
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v25);
}

_DWORD *WebKit::ResourceLoadStatisticsStore::reclassifyResources(WebKit::ResourceLoadStatisticsStore *this)
{
  WTF::StringImpl *v2;
  _DWORD *result;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _DWORD *v13;

  WebKit::ResourceLoadStatisticsStore::findNotVeryPrevalentResources((WebKit::ResourceLoadStatisticsStore *)&v13);
  result = v13;
  if (v13)
  {
    if (!*(v13 - 3))
      return (_DWORD *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable((uint64_t)result, v2);
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(this, (uint64_t)&v11);
    v4 = v13;
    v5 = (WTF::StringImpl *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(v13);
    v6 = v5;
    v7 = v2;
    if (v4)
      v8 = (WTF::StringImpl *)&v4[10 * *(v4 - 1)];
    else
      v8 = 0;
    if (v8 != v5)
    {
      do
      {
        if (*((_BYTE *)this + 226)
          || *((_BYTE *)this + 707)
          || (MEMORY[0x19AEABBCC](*((_QWORD *)v6 + 1), "localhost", 9) & 1) == 0)
        {
          v9 = WebKit::ResourceLoadStatisticsClassifier::calculateResourcePrevalence((uint64_t)this + 120, *((_DWORD *)v6 + 5), *((_DWORD *)v6 + 6), *((_DWORD *)v6 + 7), *((_DWORD *)v6 + 8), *((_DWORD *)v6 + 4));
          if (v9 != *((_DWORD *)v6 + 4))
            WebKit::ResourceLoadStatisticsStore::setPrevalentResource((WebCore::SQLiteStatement **)this, (WTF::StringImpl *)((char *)v6 + 8), v9);
        }
        while (1)
        {
          v6 = (WTF::StringImpl *)((char *)v6 + 40);
          if (v6 == v7)
            break;
          if ((*(_DWORD *)v6 + 1) > 1)
            goto LABEL_14;
        }
        v6 = v7;
LABEL_14:
        ;
      }
      while (v6 != v8);
    }
    v10 = v11;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
    else if (!v11)
    {
LABEL_22:
      result = v13;
      if (!v13)
        return result;
      return (_DWORD *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable((uint64_t)result, v2);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    goto LABEL_22;
  }
  return result;
}

void WebKit::ResourceLoadStatisticsStore::clearGrandfathering(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  NSObject *v9;
  uint64_t v10;
  int Error;
  uint64_t ErrorMsg;
  WTF::StringImpl *v13;
  _BYTE v14[16];
  unsigned int v15;
  WTF::StringImpl *v16;
  _BYTE buf[12];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    WebKit::buildList<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v16, a2, a3);
    v4 = v16;
    if (v16)
      *(_DWORD *)v16 += 2;
    v13 = v4;
    WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"UPDATE ObservedDomains SET grandfathered = 0 WHERE domainID IN (", 65, (uint64_t *)&v13, 41, buf);
    WebCore::SQLiteDatabase::prepareStatementSlow();
    v6 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v13;
    v13 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v15;
    if (!v15)
    {
      if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v14) != 101)
      {
        v9 = qword_1ECE71758;
        if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
        {
          v10 = *(_QWORD *)(a1 + 648);
          Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
          ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
          *(_DWORD *)buf = 134218755;
          *(_QWORD *)&buf[4] = a1;
          v18 = 2048;
          v19 = v10;
          v20 = 1024;
          v21 = Error;
          v22 = 2081;
          v23 = ErrorMsg;
          _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::clearGrandfathering: failed to step statement", buf, 0x26u);
        }
      }
      v8 = v15;
    }
    if (v8 != -1)
      (*(&off_1E34C0CF8 + v8))((int)buf, (WebCore::SQLiteStatement *)v14);
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v5);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
}

void WebKit::ResourceLoadStatisticsStore::removeDataRecords(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  BOOL v5;
  uint64_t v8;
  void *v9;
  WTF::RunLoop *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  WTF::WorkQueue *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  void *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  _BYTE buf[72];
  uint64_t v36;
  unsigned int *v37;
  char v38;
  WTF::WorkQueue *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (WebKit::ResourceLoadStatisticsStore::shouldRemoveDataRecords((WebKit::ResourceLoadStatisticsStore *)a1))
  {
    v4 = (WTF::StringImpl *)WebKit::ResourceLoadStatisticsStore::registrableDomainsToDeleteOrRestrictWebsiteDataFor((WebKit::ResourceLoadStatisticsStore *)&v30, a1);
    if (v31)
      v5 = 0;
    else
      v5 = v32 == 0;
    if (v5 && v33 == 0 && v34 == 0)
    {
      v8 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      if (*(_BYTE *)(a1 + 708))
      {
        v20 = qword_1ECE71140;
        if (os_log_type_enabled((os_log_t)qword_1ECE71140, OS_LOG_TYPE_INFO))
        {
          WebKit::domainsToString((WebKit *)&v28, &v30);
          WTF::String::utf8();
          if (v29)
            v21 = (char *)v29 + 16;
          else
            v21 = 0;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v21;
          _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_INFO, "ResourceLoadStatisticsStore: About to remove data records for %{public}s.", buf, 0xCu);
          v23 = v29;
          v29 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
              WTF::fastFree(v23, v22);
            else
              --*(_DWORD *)v23;
          }
          v24 = v28;
          v28 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v22);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
        WebKit::domainsToString((WebKit *)&v27, &v30);
        WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"[ITP] About to remove data records for: [", 42, (uint64_t *)&v27, (uint64_t)"].", 3, buf);
        WebKit::ResourceLoadStatisticsStore::debugBroadcastConsoleMessage(a1, 13, 4, (uint64_t)buf);
        v26 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v25);
          else
            *(_DWORD *)v26 -= 2;
        }
        v4 = v27;
        v27 = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2)
            v4 = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v25);
          else
            *(_DWORD *)v4 -= 2;
        }
      }
      *(_BYTE *)(a1 + 710) = 1;
      v10 = (WTF::RunLoop *)WTF::MonotonicTime::now(v4);
      *(_QWORD *)(a1 + 248) = v11;
      WTF::RunLoop::main(v10);
      v12 = *(unsigned __int8 ***)(a1 + 104);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v12);
      *(_QWORD *)buf = v12;
      WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor::isolatedCopy((uint64_t)&buf[8], (uint64_t)&v30);
      v13 = *a2;
      *a2 = 0;
      v36 = v13;
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 96), a1);
      v14 = *(unsigned int **)(a1 + 96);
      if (v14)
      {
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
      v37 = v14;
      v38 = *(_BYTE *)(a1 + 224);
      v16 = *(WTF::WorkQueue **)(a1 + 112);
      WTF::WorkQueue::ref(v16);
      v39 = v16;
      WTF::Function<void ()(void)>::Function<WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>((uint64_t *)&v29, (uint64_t *)buf);
      WTF::RunLoop::dispatch();
      v18 = v29;
      v29 = 0;
      if (v18)
        (*(void (**)(WTF *))(*(_QWORD *)v18 + 8))(v18);
      WebKit::ResourceLoadStatisticsStore::removeDataRecords(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t)buf, v17);
    }
    WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor::~RegistrableDomainsToDeleteOrRestrictWebsiteDataFor((WebKit::RegistrableDomainsToDeleteOrRestrictWebsiteDataFor *)&v30, v9);
  }
  else
  {
    v19 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
}

void WebKit::ResourceLoadStatisticsStore::mergeStatistics(WebKit::DatabaseUtilities *a1, uint64_t a2)
{
  unsigned int v4;
  const WebCore::ResourceLoadStatistics *v5;
  uint64_t v6;
  unsigned int v7;
  const WebCore::ResourceLoadStatistics *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint8_t buf[4];
  WebKit::DatabaseUtilities *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 12))
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(a1, (uint64_t)&v14);
    v4 = *(_DWORD *)(a2 + 12);
    if (v4)
    {
      v5 = *(const WebCore::ResourceLoadStatistics **)a2;
      v6 = 200 * v4;
      do
      {
        if ((unint64_t)WebKit::ResourceLoadStatisticsStore::domainID((WebCore::SQLiteStatement **)a1, v5) >> 32)
        {
          WebKit::ResourceLoadStatisticsStore::mergeStatistic((WebCore::SQLiteStatement **)a1, v5);
        }
        else if ((WebKit::ResourceLoadStatisticsStore::insertObservedDomain((WebCore::SQLiteStatement **)a1, v5) & 1) == 0)
        {
          v10 = qword_1ECE71758;
          if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
          {
            v13 = *((_QWORD *)a1 + 81);
            *(_DWORD *)buf = 134218240;
            v17 = a1;
            v18 = 2048;
            v19 = v13;
            _os_log_error_impl(&dword_196BCC000, v10, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::mergeStatistics: failed to insert observed domain", buf, 0x16u);
          }
          goto LABEL_15;
        }
        v5 = (const WebCore::ResourceLoadStatistics *)((char *)v5 + 200);
        v6 -= 200;
      }
      while (v6);
      v7 = *(_DWORD *)(a2 + 12);
      if (v7)
      {
        v8 = *(const WebCore::ResourceLoadStatistics **)a2;
        v9 = 200 * v7;
        do
        {
          WebKit::ResourceLoadStatisticsStore::insertDomainRelationships(a1, v8);
          v8 = (const WebCore::ResourceLoadStatistics *)((char *)v8 + 200);
          v9 -= 200;
        }
        while (v9);
      }
    }
LABEL_15:
    v12 = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_17:
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      return;
    }
    if (v14)
      goto LABEL_17;
  }
}

uint64_t WebKit::ResourceLoadStatisticsStore::logTestingEvent(WTF::RunLoop *a1)
{
  unsigned __int8 **v2;
  _QWORD *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _QWORD *v6;
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD *v10;

  WTF::RunLoop::main(a1);
  v2 = (unsigned __int8 **)*((_QWORD *)a1 + 13);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v2);
  v8 = v2;
  WTF::String::isolatedCopy();
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v3 = &off_1E34C0FE8;
  v3[1] = v8;
  v4 = v9;
  v8 = 0;
  v9 = 0;
  v3[2] = v4;
  v10 = v3;
  WTF::RunLoop::dispatch();
  v6 = v10;
  v10 = 0;
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  return WebKit::ResourceLoadStatisticsStore::logTestingEvent(WTF::String &&)::$_0::~$_0((uint64_t)&v8, v5);
}

void WebKit::ResourceLoadStatisticsStore::updateLastSeen(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  int Error;
  uint64_t ErrorMsg;
  WebCore::SQLiteStatement *v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  WebKit::DatabaseUtilities::scopedStatement(a1, (WebCore::SQLiteStatement **)(a1 + 384), (uint64_t)"updateLastSeen", (WebCore::SQLiteStatementAutoResetScope *)&v8);
  if (!v8
    || WebCore::SQLiteStatement::bindDouble(v8, a2)
    || WebCore::SQLiteStatement::bindText()
    || WebCore::SQLiteStatement::step(v8) != 101)
  {
    v4 = qword_1ECE71758;
    if (os_log_type_enabled((os_log_t)qword_1ECE71758, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 648);
      Error = WebCore::SQLiteDatabase::lastError((WebCore::SQLiteDatabase *)(a1 + 16));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)buf = 134218755;
      v10 = a1;
      v11 = 2048;
      v12 = v5;
      v13 = 1024;
      v14 = Error;
      v15 = 2081;
      v16 = ErrorMsg;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::updateLastSeen: failed to step statement", buf, 0x26u);
    }
  }
  WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope((WebCore::SQLiteStatementAutoResetScope *)&v8);
}

uint64_t WebKit::NetworkCORSPreflightChecker::NetworkCORSPreflightChecker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v32;

  *(_QWORD *)a1 = off_1E34BC4A0;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = a1 + 16;
  WTF::URL::URL(a1 + 16, (uint64_t *)a4);
  WTF::URL::URL(a1 + 56, (uint64_t *)(a4 + 40));
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a4 + 80);
  v13 = *(_QWORD *)(a4 + 88);
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = v13;
  v14 = *(_QWORD *)(a4 + 96);
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a1 + 112) = v14;
  LODWORD(v14) = *(_DWORD *)(a4 + 104);
  *(_DWORD *)(a4 + 104) = 0;
  *(_DWORD *)(a1 + 120) = v14;
  LODWORD(v14) = *(_DWORD *)(a4 + 108);
  *(_DWORD *)(a4 + 108) = 0;
  *(_DWORD *)(a1 + 124) = v14;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v15 = *(_QWORD *)(a4 + 112);
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a1 + 128) = v15;
  LODWORD(v15) = *(_DWORD *)(a4 + 120);
  *(_DWORD *)(a4 + 120) = 0;
  *(_DWORD *)(a1 + 136) = v15;
  LODWORD(v15) = *(_DWORD *)(a4 + 124);
  *(_DWORD *)(a4 + 124) = 0;
  *(_DWORD *)(a1 + 140) = v15;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v16 = *(_QWORD *)(a4 + 128);
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)(a1 + 144) = v16;
  LODWORD(v16) = *(_DWORD *)(a4 + 136);
  *(_DWORD *)(a4 + 136) = 0;
  *(_DWORD *)(a1 + 152) = v16;
  LODWORD(v16) = *(_DWORD *)(a4 + 140);
  *(_DWORD *)(a4 + 140) = 0;
  *(_DWORD *)(a1 + 156) = v16;
  LODWORD(v16) = *(_DWORD *)(a4 + 144);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a4 + 148);
  *(_DWORD *)(a1 + 160) = v16;
  v17 = *(_QWORD *)(a4 + 152);
  *(_QWORD *)(a4 + 152) = 0;
  *(_QWORD *)(a1 + 168) = v17;
  v18 = *(_QWORD *)(a4 + 160);
  *(_QWORD *)(a4 + 160) = 0;
  *(_QWORD *)(a1 + 176) = v18;
  v19 = *(_QWORD *)(a4 + 168);
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a1 + 184) = v19;
  v20 = *(_QWORD *)(a4 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a4 + 184);
  *(_QWORD *)(a1 + 192) = v20;
  v21 = *(_QWORD *)(a4 + 192);
  *(_QWORD *)(a4 + 192) = 0;
  *(_QWORD *)(a1 + 208) = v21;
  v22 = *(_QWORD *)(a4 + 200);
  *(_QWORD *)(a4 + 200) = 0;
  *(_QWORD *)(a1 + 216) = v22;
  v23 = *(_QWORD *)(a4 + 208);
  *(_QWORD *)(a4 + 208) = 0;
  *(_QWORD *)(a1 + 224) = v23;
  v24 = *(_QWORD *)(a4 + 216);
  *(_QWORD *)(a4 + 216) = 0;
  *(_QWORD *)(a1 + 232) = v24;
  v25 = *(_QWORD *)(a4 + 224);
  *(_QWORD *)(a4 + 224) = 0;
  *(_QWORD *)(a1 + 240) = v25;
  v26 = *(_OWORD *)(a4 + 232);
  *(_QWORD *)(v12 + 245) = *(_QWORD *)(a4 + 245);
  *(_OWORD *)(a1 + 248) = v26;
  v27 = (unsigned int *)(a2 + 120);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  *(_QWORD *)(a1 + 272) = a2;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 280));
  *(_QWORD *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 418) = *(_BYTE *)(a1 + 418) & 0xF1 | 4;
  v29 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 536) = v29;
  *(_QWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 552) = a5;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 568));
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 768));
  *(_QWORD *)(a1 + 1008) = 0;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_BYTE *)(a1 + 906) = *(_BYTE *)(a1 + 906) & 0xF1 | 4;
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)(a1 + 1024));
  v30 = 0;
  if (a3)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 56), a3 + 48);
    v30 = *(unsigned int **)(a3 + 56);
    if (v30)
    {
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 + 1, v30));
    }
  }
  *(_QWORD *)(a1 + 1152) = v30;
  return a1;
}

WTF *WebKit::NetworkCORSPreflightChecker::startPreflight(const WebCore::ResourceRequest **this)
{
  NSObject *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::RefCountedBase *v8;
  WTF::RefCountedBase *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  const WebCore::ResourceRequest *v12;
  WTF::StringImpl *v13;
  const WebCore::ResourceRequest *v14;
  WTF::StringImpl *v15;
  const WebCore::ResourceRequest *v16;
  WTF::StringImpl *v17;
  const WebCore::ResourceRequest *v18;
  WTF::RefCountedBase *v19;
  const WebCore::ResourceRequest *v20;
  const WebCore::ResourceRequest *v21;
  WTF::StringImpl *v22;
  const WebCore::ResourceRequest *v23;
  const WebCore::ResourceRequest *v24;
  __int128 v25;
  __int128 v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  const WebCore::ResourceRequest *v29;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v30;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v31;
  WTF::StringImpl *v32;
  CFTypeRef v33;
  CFTypeRef v34;
  const WebCore::ResourceRequest *v35;
  const WebCore::ResourceRequest *v36;
  uint64_t v37;
  void *v38;
  WebKit::NetworkSession *v39;
  WebKit::NetworkDataTaskCocoa *v40;
  uint64_t v41;
  const WebCore::ResourceRequest *v42;
  CFTypeRef v43;
  CFTypeRef v44;
  WTF::StringImpl *v45;
  WTF *v46;
  WTF *result;
  CFTypeRef v48;
  const WebCore::ResourceRequest *v49;
  CFTypeRef v50[18];
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  const WebCore::ResourceRequest *v53;
  const WebCore::ResourceRequest *v54;
  const WebCore::ResourceRequest *v55;
  CFTypeRef v56;
  CFTypeRef v57;
  _BYTE v58[133];
  char v59;
  CFTypeRef v60;
  char v61;
  _OWORD v62[5];
  const WebCore::ResourceRequest *v63;
  WTF::StringImpl *v64;
  __int128 v65;
  const WebCore::ResourceRequest *v66;
  WebCore::AdditionalNetworkLoadMetricsForWebInspector *v67;
  uint8_t buf[32];
  WTF *v69;
  WTF *v70;
  _BYTE v71[152];
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::RefCountedBase *v74;
  const WebCore::ResourceRequest *v75;
  char v76;
  CFTypeRef v77;
  _BYTE v78[2584];
  uint64_t v79;
  CFTypeRef cf;
  char v81;
  char v82;
  __int16 v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v2 = off_1ECE713E8;
  if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkCORSPreflightChecker::startPreflight", buf, 0xCu);
  }
  WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)buf);
  WebCore::createAccessControlPreflightRequest((WebCore *)(this + 2), this[27], (WebCore::SecurityOrigin *)(this + 29), (const WTF::String *)*((unsigned __int8 *)this + 268));
  WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v71, (uint64_t)&v49);
  v4 = v51;
  v51 = 0;
  v5 = v72;
  v72 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v52;
  v52 = 0;
  v7 = v73;
  v73 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v53;
  v53 = 0;
  v9 = v74;
  v74 = v8;
  if (v9)
    WTF::RefCounted<WebCore::FormData>::deref(v9);
  v75 = v54;
  v76 = (char)v55;
  v10 = v56;
  v56 = 0;
  v11 = v77;
  v77 = v10;
  if (v11)
  {
    CFRelease(v11);
    v48 = v56;
    v56 = 0;
    if (v48)
      CFRelease(v48);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v49);
  v12 = this[30];
  v83 = *((_WORD *)this + 133);
  if (v12)
    WebCore::ResourceRequestBase::setHTTPHeaderField();
  if (*((_BYTE *)this + 552))
  {
    LOBYTE(v49) = 1;
    WebCore::ResourceRequest::ResourceRequest(v50, (const WebCore::ResourceRequest *)v71);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v58);
    v60 = 0;
    v61 = 0;
    v59 = v59 & 0xF1 | 4;
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v62);
    *((_BYTE *)this + 560) = (_BYTE)v49;
    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)(this + 71), (uint64_t)v50);
    v14 = v52;
    v52 = 0;
    v15 = this[90];
    this[90] = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v53;
    v53 = 0;
    v17 = this[91];
    this[91] = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v54;
    v54 = 0;
    v19 = this[92];
    this[92] = v18;
    if (v19)
      WTF::RefCounted<WebCore::FormData>::deref(v19);
    this[93] = v55;
    *((_BYTE *)this + 752) = (_BYTE)v56;
    v20 = (const WebCore::ResourceRequest *)v57;
    v57 = 0;
    v21 = this[95];
    this[95] = v20;
    if (v21)
      CFRelease(v21);
    WebCore::ResourceResponseBase::operator=((uint64_t)(this + 96), (uint64_t)v58);
    v23 = (const WebCore::ResourceRequest *)v60;
    v60 = 0;
    v24 = this[126];
    this[126] = v23;
    if (v24)
      CFRelease(v24);
    v25 = v62[3];
    *((_OWORD *)this + 66) = v62[2];
    *((_OWORD *)this + 67) = v25;
    *((_OWORD *)this + 68) = v62[4];
    v26 = v62[1];
    *((_OWORD *)this + 64) = v62[0];
    *((_BYTE *)this + 1016) = v61;
    this[138] = v63;
    *((_OWORD *)this + 65) = v26;
    v27 = v64;
    v64 = 0;
    v28 = this[139];
    this[139] = v27;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v22);
      else
        *(_DWORD *)v28 -= 2;
    }
    *((_OWORD *)this + 70) = v65;
    this[142] = v66;
    v29 = v67;
    v67 = 0;
    v30 = this[143];
    this[143] = v29;
    if (v30)
    {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v30);
      v31 = v67;
      v67 = 0;
      if (v31)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v31);
    }
    v32 = v64;
    v64 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v22);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v60;
    v60 = 0;
    if (v33)
      CFRelease(v33);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v58, v22);
    v34 = v57;
    v57 = 0;
    if (v34)
      CFRelease(v34);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v50);
  }
  v35 = this[31];
  *(_QWORD *)buf = this[32];
  v82 = *((_BYTE *)this + 265);
  v36 = this[34];
  v49 = v35;
  v37 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v36 + 26, &v49);
  if (v37)
  {
    v39 = (WebKit::NetworkSession *)v37;
    v40 = (WebKit::NetworkDataTaskCocoa *)WTF::fastMalloc((WTF *)0x318);
    v41 = WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa(v40, v39, (WebKit::NetworkDataTaskClient *)this, (const WebKit::NetworkLoadParameters *)buf);
    v42 = this[68];
    this[68] = (const WebCore::ResourceRequest *)v41;
    if (v42)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*((unsigned __int8 **)v42 + 1));
      v41 = (uint64_t)this[68];
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
  }
  if (v81)
  {
    v43 = cf;
    cf = 0;
    if (v43)
      CFRelease(v43);
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v38);
  if (v78[2560])
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v78);
  v44 = v77;
  v77 = 0;
  if (v44)
    CFRelease(v44);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v71);
  v46 = v70;
  v70 = 0;
  if (v46)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v46, v45);
  result = v69;
  v69 = 0;
  if (result)
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v45);
  return result;
}

void WebKit::WebLocalFrameLoaderClient::setTitle(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  __int128 v14;
  uint64_t *v15[3];
  IPC::Encoder *v16;

  v6 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v6)
  {
    v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v14 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 80);
    v15[0] = a2;
    v15[1] = a3;
    v15[2] = (uint64_t *)&v14;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 32) + 56))(v7 + 32);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 1922;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v16 = (IPC::Encoder *)v9;
    IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&>,0ul,1ul,2ul>((IPC::Encoder *)v9, v15);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v7 + 32) + 32))(v7 + 32, &v16, 0);
    v11 = v16;
    v16 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v10);
      WTF::fastFree(v12, v13);
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::dispatchDidLoadResourceFromMemoryCache()
{
  return 0;
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReachVisuallyNonEmptyState(WebKit::WebFrame **this)
{
  if (WebKit::WebFrame::page(this[2]))
  {
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(WebKit::WebFrame::page(this[2]) + 48) + 112) + 696) & 0x800000000000) == 0)
      WebKit::WebLocalFrameLoaderClient::completePageTransitionIfNeeded(this);
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidStartProvisionalLoad(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::FullscreenManager *v5;
  uint64_t v6;
  int v7;
  const WTF::URL *v8;
  uint64_t v9;
  unsigned int **v10;
  WebKit::WebFrame *v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  CFTypeRef *v21;
  WTF::StringImpl *v22;
  CFTypeRef v23;
  CFTypeRef *v24;
  WebKit::WebFullScreenManager *v25;
  WebKit::WebFullScreenManager *v26;
  WebCore::Element *v27;
  WebKit::WebProcess *v28;
  CFTypeRef *v29;
  CFTypeRef *v30;
  __int128 v31;
  void *v32;
  IPC::Encoder *v33;
  char v34[8];
  uint64_t v35;
  CFTypeRef cf;
  uint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v4 = *(_QWORD *)(*((_QWORD *)this[11] + 1) + 296);
    if (v4)
    {
      v5 = *(WebCore::FullscreenManager **)(v4 + 1992);
      if (!v5)
        v5 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*((_QWORD *)this[11] + 1) + 296));
      if (WebCore::FullscreenManager::fullscreenElement(v5))
      {
        v25 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v3);
        v26 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v3);
        v27 = (WebCore::Element *)WebKit::WebFullScreenManager::element(v26);
        WebKit::WebFullScreenManager::exitFullScreenForElement(v25, v27);
      }
    }
    WebKit::FindController::hideFindUI(*(WebKit::FindController **)(v3 + 448));
    WebKit::WebPage::SandboxExtensionTracker::didStartProvisionalLoad((const char ***)(v3 + 688), this[2]);
    v32 = 0;
    (*(void (**)(_QWORD, uint64_t, WebKit::WebFrame *, void **))(**(_QWORD **)(v3 + 360) + 32))(*(_QWORD *)(v3 + 360), v3, this[2], &v32);
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[11] + 1) + 280) + 96);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(v6 + 24) = v7 + 1;
      if (!*(_BYTE *)(v6 + 3542))
      {
        v8 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v6 + 872));
        v9 = *(_QWORD *)(v3 + 632);
        if (v9)
        {
          v10 = (unsigned int **)(v9 + 16);
          ++*(_DWORD *)(v9 + 16);
          WebKit::WebExtensionControllerProxy::didStartProvisionalLoadForFrame((_QWORD *)v9, (WebKit::WebPage *)v3, this[2], v8);
          WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v10);
        }
        v11 = this[2];
        v31 = *((_OWORD *)v11 + 5);
        WebKit::WebFrame::info(v11, (uint64_t)v34);
        v12 = *(_QWORD *)(v6 + 2528);
        {
          v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v28);
        }
        v13 = v3 + 32;
        v33 = (IPC::Encoder *)&off_1E34E0698;
        WebKit::UserData::transform(v32, (uint64_t)&v33, (WebKit **)&v29);
        v14 = v29;
        if (v29)
          CFRetain(v29[1]);
        v30 = v14;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v3 + 32);
        v16 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v16 = 1919;
        *(_QWORD *)(v16 + 8) = v15;
        *(_QWORD *)(v16 + 528) = v16 + 16;
        *(_QWORD *)(v16 + 536) = v16 + 16;
        *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v16 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
        v33 = (IPC::Encoder *)v16;
        IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v16, (uint64_t *)&v31);
        IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v16, v34);
        IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v16, (WebCore::ResourceRequest *)(v6 + 872));
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v16, 8uLL, 8) = v12;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)v8);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)(v6 + 368));
        IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v16, (uint64_t *)&v30);
        (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v13 + 32))(v3 + 32, &v33, 0);
        v18 = v33;
        v33 = 0;
        if (v18)
        {
          IPC::Encoder::~Encoder(v18, v17);
          WTF::fastFree(v19, v20);
        }
        if (v14)
          CFRelease(v14[1]);
        v21 = v29;
        v29 = 0;
        if (v21)
          CFRelease(v21[1]);
        v22 = v39;
        v39 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v17);
          else
            *(_DWORD *)v22 -= 2;
        }
        if (v38 != -1)
          ((void (*)(IPC::Encoder **, uint64_t *))off_1E34EF818[v38])(&v33, &v37);
        v38 = -1;
        v23 = cf;
        cf = 0;
        if (v23)
          CFRelease(v23);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v35);
        v7 = *(_DWORD *)(v6 + 24) - 1;
      }
      if (v7)
        *(_DWORD *)(v6 + 24) = v7;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    }
    v24 = (CFTypeRef *)v32;
    v32 = 0;
    if (v24)
      CFRelease(v24[1]);
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFinishDocumentLoad(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  CFTypeRef *v13;
  CFTypeRef *v14;
  WebKit::WebProcess *v15;
  CFTypeRef *v16;
  CFTypeRef *v17;
  __int128 v18;
  void *v19;
  IPC::Encoder *v20;

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v19 = 0;
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[11] + 1) + 280) + 88) + 2528);
    (*(void (**)(_QWORD, uint64_t, WebKit::WebFrame *, void **))(**(_QWORD **)(v3 + 360) + 64))(*(_QWORD *)(v3 + 360), v3, this[2], &v19);
    v18 = *((_OWORD *)this[2] + 5);
    {
      v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
    }
    v5 = v3 + 32;
    v20 = (IPC::Encoder *)&off_1E34E0698;
    WebKit::UserData::transform(v19, (uint64_t)&v20, (WebKit **)&v16);
    v6 = v16;
    if (v16)
      CFRetain(v16[1]);
    v17 = v6;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v3 + 32);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 1886;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v20 = (IPC::Encoder *)v8;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, (uint64_t *)&v18);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v4;
    IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v8, (uint64_t *)&v17);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v3 + 32, &v20, 0);
    v10 = v20;
    v20 = 0;
    if (v10)
    {
      IPC::Encoder::~Encoder(v10, v9);
      WTF::fastFree(v11, v12);
    }
    if (v6)
      CFRelease(v6[1]);
    v13 = v16;
    v16 = 0;
    if (v13)
      CFRelease(v13[1]);
    WebKit::WebPage::didFinishDocumentLoad((unsigned int *)v3, this[2]);
    v14 = (CFTypeRef *)v19;
    v19 = 0;
    if (v14)
      CFRelease(v14[1]);
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::getLoadDecisionForIcons(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v3 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v3)
  {
    v4 = v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    v5 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)a2;
      v7 = *(_QWORD *)a2 + 16 * v5;
      while (1)
      {
        v8 = v6[1];
        if ((unint64_t)(v8 - 1) >= 0xFFFFFFFFFFFFFFFELL)
          break;
        v9 = *v6;
        v6 += 2;
        v11 = v8;
        v12[0] = v9;
        v12[1] = &v11;
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 32) + 56))(v4 + 32);
        IPC::MessageSender::send<Messages::WebPageProxy::GetLoadDecisionForIcon>(v4 + 32, (uint64_t)v12, v10);
        if (v6 == (uint64_t *)v7)
          goto LABEL_3;
      }
      __break(0xC471u);
    }
    else
    {
LABEL_3:
      CFRelease(*(CFTypeRef *)(v4 + 8));
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReceiveTitle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  CFTypeRef *v14;
  CFTypeRef *v15;
  WTF::StringImpl *v16;
  WebKit::WebProcess *v17;
  CFTypeRef *v18;
  CFTypeRef *v19;
  __int128 v20;
  void *v21;
  WTF::StringImpl *v22;
  char v23;
  IPC::Encoder *v24;

  v4 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v4)
  {
    v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    WTF::String::left((WTF::StringImpl **)a2, 0x3E8u, &v22);
    v23 = *(_BYTE *)(a2 + 8);
    v21 = 0;
    (*(void (**)(_QWORD, uint64_t, WTF::StringImpl **, _QWORD, void **))(**(_QWORD **)(v5 + 360) + 104))(*(_QWORD *)(v5 + 360), v5, &v22, *(_QWORD *)(a1 + 16), &v21);
    v20 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 80);
    {
      v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v17);
    }
    v6 = v5 + 32;
    v24 = (IPC::Encoder *)&off_1E34E0698;
    WebKit::UserData::transform(v21, (uint64_t)&v24, (WebKit **)&v18);
    v7 = v18;
    if (v18)
      CFRetain(v18[1]);
    v19 = v7;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v5 + 32);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 1910;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v24 = (IPC::Encoder *)v9;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v9, (uint64_t *)&v20);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)&v22);
    IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v9, (uint64_t *)&v19);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v6 + 32))(v5 + 32, &v24, 0);
    v11 = v24;
    v24 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v10);
      WTF::fastFree(v12, v13);
    }
    if (v7)
      CFRelease(v7[1]);
    v14 = v18;
    v18 = 0;
    if (v14)
      CFRelease(v14[1]);
    v15 = (CFTypeRef *)v21;
    v21 = 0;
    if (v15)
      CFRelease(v15[1]);
    v16 = v22;
    v22 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v16 -= 2;
    }
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::provisionalLoadStarted(WebKit::WebFrame **this)
{
  uint64_t v2;
  CFTypeRef *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = (CFTypeRef *)v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v4 = *((_QWORD *)this[2] + 3);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8) == v5)
        {
          WebKit::WebPage::didStartPageTransition((WebKit::WebPage *)v3);
          *((_BYTE *)this + 49) = 0;
        }
      }
    }
    CFRelease(v3[1]);
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFinishLoad(WebKit::WebFrame **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::WebFrame *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WebKit::WebFrame *v10;
  uint64_t v11;
  CFTypeRef *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  CFTypeRef *v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  WebKit::WebFrame *v22;
  uint64_t v23;
  CFTypeRef *v24;
  uint64_t v25;
  WebKit::WebProcess *v26;
  CFTypeRef *v27;
  CFTypeRef *v28;
  __int128 v29;
  void *v30;
  IPC::Encoder *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  CFTypeRef cf;
  uint64_t v35;
  int v36;
  WTF::StringImpl *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v30 = 0;
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[11] + 1) + 280) + 88);
    ++*(_DWORD *)(v4 + 24);
    v5 = *(_QWORD *)(v4 + 2528);
    (*(void (**)(_QWORD, uint64_t, WebKit::WebFrame *, void **))(**(_QWORD **)(v3 + 360) + 72))(*(_QWORD *)(v3 + 360), v3, this[2], &v30);
    v6 = *(_QWORD *)(v3 + 632);
    if (v6)
    {
      ++*(_DWORD *)(v6 + 16);
      v7 = this[2];
      WebKit::WebFrame::url(v7, (uint64_t)&v32);
      WebKit::WebExtensionControllerProxy::didFinishLoadForFrame((_QWORD *)v6, (WebKit::WebPage *)v3, v7, (const WTF::URL *)&v32);
      v9 = v32;
      v32 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v6 + 16));
    }
    v10 = this[2];
    v29 = *((_OWORD *)v10 + 5);
    WebKit::WebFrame::info(v10, (uint64_t)&v32);
    {
      v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v26);
    }
    v11 = v3 + 32;
    v31 = (IPC::Encoder *)&off_1E34E0698;
    WebKit::UserData::transform(v30, (uint64_t)&v31, (WebKit **)&v27);
    v12 = v27;
    if (v27)
      CFRetain(v27[1]);
    v28 = v12;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v3 + 32);
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 1887;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v31 = (IPC::Encoder *)v14;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v14, (uint64_t *)&v29);
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode((IPC::Encoder *)v14, (char *)&v32);
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v14, (WebCore::ResourceRequest *)(v4 + 872));
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v14, 8uLL, 8) = v5;
    IPC::ArgumentCoder<WebKit::UserData,void>::encode((IPC::Encoder *)v14, (uint64_t *)&v28);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v11 + 32))(v3 + 32, &v31, 0);
    v16 = v31;
    v31 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v15);
      WTF::fastFree(v17, v18);
    }
    if (v12)
      CFRelease(v12[1]);
    v19 = v27;
    v27 = 0;
    if (v19)
      CFRelease(v19[1]);
    v20 = v37;
    v37 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v36 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))off_1E34EF818[v36])(&v31, &v35);
    v36 = -1;
    v21 = cf;
    cf = 0;
    if (v21)
      CFRelease(v21);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v33);
    v22 = this[2];
    v23 = *((_QWORD *)v22 + 9);
    if (v23)
    {
      v25 = *(_QWORD *)(v23 + 8);
      if (v25)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        v22 = this[2];
      }
    }
    WebKit::WebPage::didFinishLoad((unsigned int *)v3, v22);
    if (*(_DWORD *)(v4 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    else
      --*(_DWORD *)(v4 + 24);
    v24 = (CFTypeRef *)v30;
    v30 = 0;
    if (v24)
      CFRelease(v24[1]);
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::createFrame(WebKit::WebFrame **this@<X0>, const WTF::AtomString *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  CFTypeRef *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  v7 = WebKit::WebFrame::page(this[2]);
  v8 = (CFTypeRef *)v7;
  if (v7)
    CFRetain(*(CFTypeRef *)(v7 + 8));
  WebKit::WebFrame::createSubframe((WebKit::WebFrame *)v8, this[2], a2, &v15);
  v9 = v15;
  v10 = *(_QWORD *)(v15 + 24);
  if (!v10
    || (v11 = *(_QWORD *)(v10 + 8)) == 0
    || *(_BYTE *)(v11 + 144)
    || (v12 = *(_QWORD *)(v11 + 24)) == 0
    || !*(_QWORD *)(v12 + 8))
  {
    *a3 = 0;
    v15 = 0;
LABEL_7:
    CFRelease(*(CFTypeRef *)(v9 + 8));
    goto LABEL_8;
  }
  v13 = (unsigned int *)(v11 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v9 = v15;
  *a3 = v11;
  v15 = 0;
  if (v9)
    goto LABEL_7;
LABEL_8:
  CFRelease(v8[1]);
}

uint64_t WebKit::PlatformCAAnimationRemote::setValueFunction(uint64_t result, char a2)
{
  *(_BYTE *)(result + 65) = a2;
  return result;
}

uint64_t WebKit::PlatformCAAnimationRemote::setFromValue(uint64_t this, const WebCore::TransformationMatrix *a2)
{
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[8];
  int v10;
  char v11;

  if (!*(_BYTE *)(this + 24))
  {
    v3 = this;
    v4 = (uint64_t *)(this + 88);
    this = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(this + 88);
    v5 = *((_OWORD *)a2 + 5);
    v9[4] = *((_OWORD *)a2 + 4);
    v9[5] = v5;
    v6 = *((_OWORD *)a2 + 7);
    v9[6] = *((_OWORD *)a2 + 6);
    v9[7] = v6;
    v7 = *((_OWORD *)a2 + 1);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v7;
    v8 = *((_OWORD *)a2 + 3);
    v9[2] = *((_OWORD *)a2 + 2);
    v9[3] = v8;
    v10 = 3;
    if (*(_DWORD *)(v3 + 100))
    {
      this = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4, (uint64_t)v9);
      if (v10 != -1)
        return ((uint64_t (*)(char *, _OWORD *))off_1E34D6CA8[v10])(&v11, v9);
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

void sub_196D8F83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (a25 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D6CA8[a25])(v25 - 33, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PlatformCAAnimationRemote::setToValue(uint64_t this, const WebCore::TransformationMatrix *a2)
{
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[8];
  int v10;
  char v11;

  if (!*(_BYTE *)(this + 24))
  {
    v3 = this;
    v4 = (_QWORD *)(this + 88);
    this = WTF::Vector<std::variant<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(this + 88);
    v5 = *((_OWORD *)a2 + 5);
    v9[4] = *((_OWORD *)a2 + 4);
    v9[5] = v5;
    v6 = *((_OWORD *)a2 + 7);
    v9[6] = *((_OWORD *)a2 + 6);
    v9[7] = v6;
    v7 = *((_OWORD *)a2 + 1);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v7;
    v8 = *((_OWORD *)a2 + 3);
    v9[2] = *((_OWORD *)a2 + 2);
    v9[3] = v8;
    v10 = 3;
    if (*(_DWORD *)(v3 + 100) <= 1u)
    {
      __break(0xC471u);
    }
    else
    {
      this = std::__variant_detail::__assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<float,WebCore::Color,WebCore::FloatPoint3D,WebCore::TransformationMatrix,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>>,(std::__variant_detail::_Trait)1>>(*v4 + 136, (uint64_t)v9);
      if (v10 != -1)
        return ((uint64_t (*)(char *, _OWORD *))off_1E34D6CA8[v10])(&v11, v9);
    }
  }
  return this;
}

void sub_196D8F920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  uint64_t v25;

  if (a25 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D6CA8[a25])(v25 - 33, &a9);
  _Unwind_Resume(exception_object);
}

void WebKit::WebURLSchemeHandlerProxy::~WebURLSchemeHandlerProxy(WebKit::WebURLSchemeHandlerProxy *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeTaskProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeTaskProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeTaskProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v3, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

unsigned int *WebKit::SharedStringHashStore::processPendingOperations(WebKit::SharedStringHashStore *this)
{
  int *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int *result;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t i;
  int v27;
  unsigned int v28;
  unsigned int *v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  int v38;
  unsigned int v39;
  unsigned int *v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *Slot;
  char *v44;
  int v45;
  char *v46;
  void *v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;

  v3 = (unsigned int *)((char *)this + 40);
  v2 = (int *)*((_QWORD *)this + 5);
  v4 = *((_DWORD *)this + 3);
  v5 = *((unsigned int *)this + 13);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 8 * v5;
    do
    {
      v8 = *v2;
      v2 += 2;
      if (!v8)
        ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    v6 = 0;
  }
  v9 = 2 * (*((_DWORD *)this + 2) + v6) - 1;
  v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  v12 = v11 | HIWORD(v11);
  v13 = (unint64_t)WTF::pageSize(this) >> 2;
  if (v13 <= (v12 + 1))
    v14 = v12 + 1;
  else
    v14 = v13;
  if (v4 >= v14)
  {
    v51 = 0;
    v52 = 0;
    v49 = 0;
    v50 = 0;
    v32 = v6;
    if (v6)
    {
      if ((unint64_t)v6 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x196D8FD90);
      }
      LODWORD(v52) = v6;
      v51 = (WTF *)WTF::fastMalloc((WTF *)(4 * v6));
    }
    v33 = *((unsigned int *)this + 13);
    v34 = v33 - v6;
    if (v33 != v32)
    {
      if (v34 >> 30)
      {
        __break(0xC471u);
LABEL_73:
        JUMPOUT(0x196D8FD88);
      }
      LODWORD(v50) = v33 - v32;
      v49 = (WTF *)WTF::fastMalloc((WTF *)(4 * v34));
      v32 = *((unsigned int *)this + 13);
      LODWORD(v33) = *((_DWORD *)this + 13);
    }
    if (!(_DWORD)v33)
    {
LABEL_63:
      WTF::Vector<WebKit::SharedStringHashStore::Operation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3, 0);
      if (HIDWORD(v52) | HIDWORD(v50))
        (*(void (**)(_QWORD, WTF **, WTF **))(**(_QWORD **)this + 24))(*(_QWORD *)this, &v51, &v49);
      v48 = v49;
      if (v49)
      {
        v49 = 0;
        LODWORD(v50) = 0;
        WTF::fastFree(v48, v47);
      }
      result = (unsigned int *)v51;
      if (v51)
      {
        v51 = 0;
        LODWORD(v52) = 0;
        return (unsigned int *)WTF::fastFree((WTF *)result, v47);
      }
      return result;
    }
    v35 = *(_QWORD *)v3;
    v36 = 8 * v32;
    v37 = (unsigned int *)(*(_QWORD *)v3 + 4);
    while (1)
    {
      v38 = *(v37 - 1);
      if (v38 == 1)
      {
        Slot = (_DWORD *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashStore *)((char *)this + 16), *v37);
        if (!Slot || !*Slot)
          goto LABEL_62;
        *Slot = 0;
        if (HIDWORD(v50) == (_DWORD)v50)
        {
          v42 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v49, HIDWORD(v50) + 1, (unint64_t)v37);
          v44 = (char *)v49 + 4 * HIDWORD(v50);
          v45 = -1;
        }
        else
        {
          v44 = (char *)v49 + 4 * HIDWORD(v50);
          v45 = -1;
          v42 = v37;
        }
        v46 = (char *)&v50 + 4;
      }
      else
      {
        if (v38)
          goto LABEL_62;
        v39 = *v37;
        v40 = (unsigned int *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashStore *)((char *)this + 16), *v37);
        if (*v40)
          goto LABEL_62;
        *v40 = v39;
        v41 = HIDWORD(v52);
        if (HIDWORD(v52) == (_DWORD)v52)
        {
          v42 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v51, HIDWORD(v52) + 1, (unint64_t)v37);
          v41 = HIDWORD(v52);
        }
        else
        {
          v42 = (_DWORD *)(v35 + 4);
        }
        v44 = (char *)v51 + 4 * v41;
        v45 = 1;
        v46 = (char *)&v52 + 4;
      }
      *(_DWORD *)v44 = *v42;
      ++*(_DWORD *)v46;
      *((_DWORD *)this + 2) += v45;
LABEL_62:
      v35 += 8;
      v37 += 2;
      v36 -= 8;
      if (!v36)
        goto LABEL_63;
    }
  }
  result = (unsigned int *)WebCore::SharedMemory::allocate((WebCore::SharedMemory *)(4 * v14));
  if (!v51)
    return result;
  bzero(*((void **)v51 + 2), *((_QWORD *)v51 + 1));
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    do
      v17 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v17 + 1, (unsigned int *)v16));
  }
  v18 = *((unsigned int *)this + 3);
  v19 = v51;
  v51 = 0;
  v49 = v19;
  WebKit::SharedStringHashTableReadOnly::setSharedMemory((uint64_t)this + 16, (unsigned int **)&v49);
  if (v49)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v49);
  *((_DWORD *)this + 3) = v14;
  if (!v16)
    goto LABEL_25;
  if (*(_QWORD *)(v16 + 8) != 4 * v18)
  {
    __break(0xC471u);
    goto LABEL_73;
  }
  if ((_DWORD)v18)
  {
    v20 = *(unsigned int **)(v16 + 16);
    do
    {
      v22 = *v20++;
      v21 = v22;
      if (v22)
      {
        v23 = (unsigned int *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashStore *)((char *)this + 16), v21);
        if (!*v23)
          *v23 = v21;
      }
      --v18;
    }
    while (v18);
  }
LABEL_25:
  v24 = *((unsigned int *)this + 13);
  if ((_DWORD)v24)
  {
    v25 = (unsigned int *)(*((_QWORD *)this + 5) + 4);
    for (i = 8 * v24; i; i -= 8)
    {
      v27 = *(v25 - 1);
      if (v27 == 1)
      {
        v31 = (_DWORD *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashStore *)((char *)this + 16), *v25);
        if (!v31 || !*v31)
          goto LABEL_35;
        *v31 = 0;
        v30 = -1;
      }
      else
      {
        if (v27)
          goto LABEL_35;
        v28 = *v25;
        v29 = (unsigned int *)WebKit::SharedStringHashTableReadOnly::findSlot((WebKit::SharedStringHashStore *)((char *)this + 16), *v25);
        if (*v29)
          goto LABEL_35;
        *v29 = v28;
        v30 = 1;
      }
      *((_DWORD *)this + 2) += v30;
LABEL_35:
      v25 += 2;
    }
  }
  WTF::Vector<WebKit::SharedStringHashStore::Operation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v3, 0);
  (*(void (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  if (v16)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v16);
  result = (unsigned int *)v51;
  v51 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
  return result;
}

uint64_t WebKit::SharedStringHashStore::scheduleAddition(WebKit::SharedStringHashStore *this, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = (uint64_t *)((char *)this + 40);
  LODWORD(v9) = 0;
  HIDWORD(v9) = a2;
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4 == *((_DWORD *)this + 12))
  {
    v5 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&v9);
    v4 = *((unsigned int *)this + 13);
    v6 = *((_QWORD *)this + 5);
    v7 = *v5;
  }
  else
  {
    v6 = *v3;
    v7 = v9;
  }
  *(_QWORD *)(v6 + 8 * v4) = v7;
  ++*((_DWORD *)this + 13);
  result = WTF::RunLoop::TimerBase::isActive((WebKit::SharedStringHashStore *)((char *)this + 56));
  if ((result & 1) == 0)
    return WTF::RunLoop::TimerBase::start();
  return result;
}

uint64_t WebKit::NetworkStorageManager::resume(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v1 = this;
  v6 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 40);
  if ((v2 & 0x8000000000000000) == 0 || v2 == -1)
  {
    v3 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 134217984;
      v5 = v1;
      _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - NetworkStorageManager::resume()", (uint8_t *)&v4, 0xCu);
    }
    return WTF::SuspendableWorkQueue::resume(*(WTF::SuspendableWorkQueue **)(v1 + 48));
  }
  return this;
}

BOOL WebKit::NetworkStorageManager::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  unsigned __int8 **v8;
  void *v9;
  _BOOL8 v10;
  IPC::Encoder *v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  IPC::Encoder *v16;
  unsigned __int8 **v17[2];
  _QWORD *v18;
  char v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned __int8 **)(a1 + 16);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 16));
  if (*(_WORD *)(a3 + 50) != 3533)
  {
    v10 = 0;
    if (!a1)
      return v10;
LABEL_9:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v8, v9);
    return v10;
  }
  IPC::Decoder::decode<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>>(v19, (uint64_t *)a3);
  v10 = v24 != 0;
  if (v24)
  {
    v11 = *a4;
    *a4 = 0;
    v16 = v11;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v17, a2);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = off_1E34B2868;
    v12[1] = v16;
    v13 = v17[0];
    v17[0] = 0;
    v12[2] = v13;
    v18 = v12;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v17);
    if (!v24)
      __break(1u);
    WebKit::NetworkStorageManager::connectToStorageAreaSync(a1, a2, v19[0], v20, v21, v22, &v23, &v18, 0);
    v14 = v18;
    v18 = 0;
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
  std::__optional_destruct_base<std::tuple<WebCore::StorageType,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ClientOrigin>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19);
  if (a1)
    goto LABEL_9;
  return v10;
}

IPC::Encoder *WebKit::NetworkResourceLoader::didSendData(IPC::Encoder *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  if (!*((_QWORD *)this + 519))
  {
    v5[0] = a2;
    v5[1] = a3;
    v3 = (uint64_t)this + 16;
    v4 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)this + 2) + 56))((uint64_t)this + 16);
    return IPC::MessageSender::send<Messages::WebResourceLoader::DidSendData>(v3, v5, v4);
  }
  return this;
}

WebKit::NetworkLoadParameters *WebKit::NetworkLoadParameters::NetworkLoadParameters(WebKit::NetworkLoadParameters *this)
{
  *((_BYTE *)this + 84) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_QWORD *)((char *)this + 45) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebKit::NetworkLoadParameters *)((char *)this + 88));
  *((_DWORD *)this + 72) = 0;
  *((_WORD *)this + 146) = 1;
  *((_BYTE *)this + 294) = 0;
  *((_BYTE *)this + 304) = 0;
  *((_BYTE *)this + 2864) = 0;
  *((_BYTE *)this + 2880) = 0;
  *((_BYTE *)this + 2912) = 0;
  *((_BYTE *)this + 2936) = 0;
  *((_BYTE *)this + 2904) = 0;
  *(_OWORD *)((char *)this + 2888) = 0u;
  *((_DWORD *)this + 736) = 16777472;
  *((_WORD *)this + 1474) = 0;
  return this;
}

void sub_196D90120(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::VisitedLinkTableController::SetVisitedLinkTable>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1521;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ProcessDidResume>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 419;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

WTF::StringImpl *WebKit::NetworkLoadScheduler::unscheduleMainResourceLoad(WTF ***this, WebKit::NetworkLoad *a2, const WTF::String **a3)
{
  WebCore::ResourceRequestBase *v6;
  WTF::URL *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19[2];
  WTF::StringImpl **v20[2];
  WTF::StringImpl *v21;

  v6 = (WebKit::NetworkLoad *)((char *)a2 + 120);
  v7 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebKit::NetworkLoad *)((char *)a2 + 120));
  WTF::URL::protocolHostAndPort(v7);
  if (a3)
    WebKit::NetworkLoadScheduler::updateOriginProtocolInfo((WebKit::NetworkLoadScheduler *)this, &v21, a3[11]);
  WebCore::ResourceRequestBase::httpUserAgent(v6);
  v8 = v21;
  v9 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (!v21)
    v8 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (v8)
  {
    *(_DWORD *)v8 += 2;
    v10 = *v9;
  }
  v11 = this + 2;
  v19[0] = v8;
  if (v18)
    v12 = v18;
  else
    v12 = v10;
  if (v12)
    *(_DWORD *)v12 += 2;
  v19[1] = v12;
  v13 = WTF::HashTable<std::tuple<WTF::String,WTF::String>,WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>>,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WTF::String>,WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<std::tuple<WTF::String,WTF::String>>,WTF::HashTraits<WebKit::NetworkLoadScheduler::PendingMainResourcePreconnectInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WTF::String>>>,std::tuple<WTF::String,WTF::String>>(this + 2, v19);
  v20[0] = v13;
  v20[1] = v14;
  WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v19, (WTF::StringImpl *)v14);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v16 = *v11;
  if (*v11)
    v16 += 7 * *((unsigned int *)v16 - 1);
  if (v16 != v13
    && WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::NetworkLoad>((uint64_t)(v13 + 3), (uint64_t)a2))
  {
    WebKit::NetworkLoadScheduler::maybePrunePreconnectInfo((uint64_t)this, v20);
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WebKit::NetworkLoadScheduler::updateOriginProtocolInfo(WebKit::NetworkLoadScheduler *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  const WTF::StringImpl *v4;
  uint64_t *v5;
  WTF::StringImpl **v7;
  _BYTE v8[24];

  v5 = (uint64_t *)((char *)this + 24);
  if ((MEMORY[0x19AEABBCC](a3, "http/1.1", 8) & 1) == 0)
    return WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(v5, a2, v4);
  if (*v5)
  {
    if (*(_DWORD *)(*v5 - 12) >= 0x80u)
    {
      v7 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::random(v5);
      WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(v5, v7);
    }
  }
  return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v5, a2, v4, (uint64_t)v8);
}

void WebKit::NetworkLoadScheduler::HostContext::~HostContext(WebKit::NetworkLoadScheduler::HostContext *this, WebKit::NetworkLoad *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v3 = (_QWORD *)((char *)this + 16);
  v4 = (_QWORD *)*((_QWORD *)this + 3);
  if (v4)
  {
    while (1)
    {
      a2 = *(WebKit::NetworkLoad **)(*v4 + 8);
      if (a2)
        break;
      v4 = (_QWORD *)v4[2];
      if (!v4)
        goto LABEL_2;
    }
LABEL_6:
    WebKit::NetworkLoadScheduler::HostContext::start(this, a2);
    while (1)
    {
      v4 = (_QWORD *)v4[2];
      if (!v4)
        break;
      a2 = *(WebKit::NetworkLoad **)(*v4 + 8);
      if (a2)
      {
        ++*((_DWORD *)this + 10);
        goto LABEL_6;
      }
    }
    ++*((_DWORD *)this + 10);
  }
LABEL_2:
  WTF::WeakListHashSet<WebKit::NetworkLoad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakListHashSet(v3, a2);
  if (*(_QWORD *)this)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*(_QWORD *)this, v5);
}

void WebKit::NetworkDataTaskCocoa::didSendData(WebKit::NetworkDataTaskCocoa *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  const void *v12;
  os_signpost_id_t v13;
  int v14;
  _BYTE v15[10];
  _BYTE v16[10];
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (kdebug_is_enabled())
  {
    v8 = *MEMORY[0x1E0CBE150];
    v9 = WTFSignpostLogHandle();
    v10 = v9;
    if (v8)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)this + 76);
        v14 = 67110400;
        *(_DWORD *)v15 = 0;
        *(_WORD *)&v15[4] = 1024;
        *(_DWORD *)&v15[6] = 0;
        *(_WORD *)v16 = 2048;
        *(_QWORD *)&v16[2] = v11;
        v17 = 2048;
        v18 = WTFCurrentContinuousTime();
        v19 = 2048;
        v20 = a2;
        v21 = 2048;
        v22 = a3;
        _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu sent %llu bytes (expected %llu bytes)", (uint8_t *)&v14, 0x36u);
      }
    }
    else
    {
      v12 = (const void *)*((_QWORD *)this + 76);
      if (v12)
      {
        v13 = os_signpost_id_make_with_pointer(v9, v12);
        if (v13 - 1 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_2;
      }
      else
      {
        v13 = 0xEEEEB0B5B2B2EEEELL;
      }
      if (os_signpost_enabled(v10))
      {
        v14 = 134218240;
        *(_QWORD *)v15 = a2;
        *(_WORD *)&v15[8] = 2048;
        *(_QWORD *)v16 = a3;
        _os_signpost_emit_with_name_impl(&dword_196BCC000, v10, OS_SIGNPOST_EVENT, v13, "DataTask", "sent %llu bytes (expected %llu bytes)", (uint8_t *)&v14, 0x16u);
      }
    }
  }
LABEL_2:
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2, a3);
  }
}

uint64_t WebKit::WebResourceLoader::didSendData(WebKit::WebResourceLoader *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 200))(*((_QWORD *)this + 2));
}

IPC::Encoder *WebKit::WebLoaderStrategy::setResourceLoadSchedulingMode(WebKit::WebProcess *a1, uint64_t a2, char a3)
{
  WebKit::WebProcess *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  char v13;

  v5 = WebKit::WebProcess::singleton(a1);
  v6 = *(_QWORD *)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
  v7 = *(_QWORD **)(*(_QWORD *)(a2 + 48) + 16);
  (*(void (**)(_QWORD *))(*v7 + 1368))(v7);
  v8 = *(_QWORD *)(v7[2] + 8);
  if (v8)
    v9 = v8 - 16;
  else
    v9 = 0;
  v11 = *(_QWORD *)(v9 + 40);
  v12 = &v11;
  v13 = a3;
  return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::SetResourceLoadSchedulingMode>(v6, &v12);
}

void WebKit::WebLoaderStrategy::browsingContextRemoved(WebKit::WebLoaderStrategy *this, WebCore::LocalFrame *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  WebKit::WebProcess *v17;
  uint64_t v18;
  uint64_t v19[3];
  IPC::Encoder *v20;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v17);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = *((_QWORD *)v3 + 37);
  if (v4)
  {
    v5 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 48) + 16);
    (*(void (**)(_QWORD *))(*v5 + 1368))(v5);
    v6 = *(_QWORD *)(v5[2] + 8);
    if (v6)
      v7 = v6 - 16;
    else
      v7 = 0;
    v8 = *(_QWORD *)(v4 + 24);
    v9 = *(_QWORD *)(v7 + 2120);
    v10 = *(_QWORD *)(v7 + 40);
    WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v18);
    v11 = v18;
    *(_OWORD *)v19 = *(_OWORD *)(v18 + 80);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 213;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v20 = (IPC::Encoder *)v12;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v9;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v10;
    IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v12, v19);
    IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v20, 0, 0);
    v14 = v20;
    v20 = 0;
    if (v14)
    {
      IPC::Encoder::~Encoder(v14, v13);
      WTF::fastFree(v15, v16);
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
}

WebKit::WebProcess *WebKit::WebLoaderStrategy::pageLoadCompleted(WebKit::WebLoaderStrategy *this, WebCore::Page *a2)
{
  WebKit::WebProcess *result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  void *v12;
  WebCore::Page *v13;
  WebKit::WebProcess *v14;
  IPC::Encoder *v15;

  {
    result = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    result = WebKit::WebProcess::WebProcess(v14);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
  }
  v3 = *((_QWORD *)result + 37);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    v5 = *(_QWORD **)(*((_QWORD *)a2 + 6) + 16);
    (*(void (**)(_QWORD *))(*v5 + 1368))(v5);
    v6 = *(_QWORD *)(v5[2] + 8);
    if (v6)
      v7 = v6 - 16;
    else
      v7 = 0;
    v8 = *(_QWORD *)(v7 + 40);
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 245;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v15 = (IPC::Encoder *)v9;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v8;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v15, 0, 0);
    result = v15;
    v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (WebKit::WebProcess *)WTF::fastFree(v11, v12);
    }
  }
  return result;
}

uint64_t WebKit::SQLiteStorageArea::createTableIfNecessary(WebKit::SQLiteStorageArea *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  NSObject *v5;
  int v6;
  uint64_t v7;
  const char *v8;
  int Error;
  uint64_t ErrorMsg;
  WTF::StringImpl *v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 15))
    return 0;
  WebCore::SQLiteDatabase::tableSQL();
  if ((MEMORY[0x19AEABBCC](v11, "CREATE TABLE ItemTable (key TEXT UNIQUE ON CONFLICT REPLACE, value BLOB NOT NULL ON CONFLICT FAIL)", 98) & 1) != 0|| (MEMORY[0x19AEABBCC](v11, "CREATE TABLE IF NOT EXISTS ItemTable (key TEXT UNIQUE ON CONFLICT REPLACE, value BLOB NOT NULL ON CONFLICT FAIL)", 112) & 1) != 0)
  {
    goto LABEL_8;
  }
  if (v11 && *((_DWORD *)v11 + 1) && (WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    v5 = qword_1ECE718E8;
    if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
    {
      Error = WebCore::SQLiteDatabase::lastError(*((WebCore::SQLiteDatabase **)this + 15));
      ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(*((WebCore::SQLiteDatabase **)this + 15));
      *(_DWORD *)buf = 67109378;
      v13 = Error;
      v14 = 2082;
      v15 = ErrorMsg;
      v8 = "SQLiteStorageArea::createTableIfNecessary failed to drop existing item table (%d) - %{public}s";
      goto LABEL_20;
    }
  }
  else
  {
    if ((WebCore::SQLiteDatabase::executeCommand() & 1) != 0)
    {
LABEL_8:
      v3 = 1;
      goto LABEL_9;
    }
    v5 = qword_1ECE718E8;
    if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
    {
      v6 = WebCore::SQLiteDatabase::lastError(*((WebCore::SQLiteDatabase **)this + 15));
      v7 = WebCore::SQLiteDatabase::lastErrorMsg(*((WebCore::SQLiteDatabase **)this + 15));
      *(_DWORD *)buf = 67109378;
      v13 = v6;
      v14 = 2082;
      v15 = v7;
      v8 = "SQLiteStorageArea::createTableIfNecessary failed to create item table (%d) - %{public}s";
LABEL_20:
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, v8, buf, 0x12u);
    }
  }
  v3 = 0;
LABEL_9:
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v2);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v3;
}

uint64_t *WebKit::MemoryStorageArea::allItems@<X0>(WebKit::MemoryStorageArea *this@<X0>, uint64_t *a2@<X8>)
{
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(a2, (_QWORD **)(*((_QWORD *)this + 13) + 8));
}

_QWORD *WebKit::VisitedLinkStore::didUpdateSharedStringHashes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  IPC::Encoder *v31;

  v6 = a1 + 48;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 48), &v27);
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = v7 + 8 * v8;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v22 = v6;
  v23 = v9;
  v24 = v9;
  v25 = v9;
  v26 = v7 + 8 * v8;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v22);
  for (i = v28; v28 != v23; i = v28)
  {
    v12 = *(_QWORD *)(*(_QWORD *)i + 8);
    v13 = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)(a2 + 12) <= 0x14u && *(_DWORD *)(a3 + 12) == 0)
    {
      v16 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v16 = 1522;
      *(_QWORD *)(v16 + 8) = v13;
      *(_QWORD *)(v16 + 528) = v16 + 16;
      *(_QWORD *)(v16 + 536) = v16 + 16;
      *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v16 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
      v31 = (IPC::Encoder *)v16;
      IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v16, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    else
    {
      v15 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v15 = 1519;
      *(_QWORD *)(v15 + 8) = v13;
      *(_QWORD *)(v15 + 528) = v15 + 16;
      *(_QWORD *)(v15 + 536) = v15 + 16;
      *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v15 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
      v31 = (IPC::Encoder *)v15;
    }
    LOBYTE(v29) = 0;
    v30 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v31, 0, (uint64_t)&v29, 1);
    if (v30)
    {
      v18 = v29;
      v29 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    v19 = v31;
    v31 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v17);
      WTF::fastFree(v20, v21);
    }
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v27);
  }
  return result;
}

_QWORD *WebKit::VisitedLinkStore::didInvalidateSharedMemory(WebKit::VisitedLinkStore *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (char *)this + 48;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 6, &v12);
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 8 * v4;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v7 = v2;
  v8 = v5;
  v9 = v5;
  v10 = v5;
  v11 = v3 + 8 * v4;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (v13 != v8)
  {
    WebKit::VisitedLinkStore::sendStoreHandleToProcess(this, *(WebKit::WebProcessProxy **)(*(_QWORD *)v13 + 8));
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return result;
}

void WebKit::VisitedLinkStore::sendStoreHandleToProcess(WebKit::VisitedLinkStore *this, WebKit::WebProcessProxy *a2)
{
  _BYTE *v4;
  _BYTE v5[16];
  char v6;

  WebCore::SharedMemory::createHandle();
  if (v6)
  {
    v4 = v5;
    WebKit::AuxiliaryProcessProxy::send<Messages::VisitedLinkTableController::SetVisitedLinkTable>((uint64_t)a2, (unint64_t *)&v4, *((_QWORD *)this + 4), 0);
    if (v6)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
  }
}

void WebKit::VisitedLinkStore::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v5;
  int v6;
  char v7;

  CFRetain(this[1]);
  if (*((_WORD *)a3 + 25) == 1518)
  {
    IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>>((uint64_t *)a3, &v5);
    if (v7)
      WebKit::VisitedLinkStore::addVisitedLinkHashFromPage((uint64_t)this, v5, v6);
  }
  CFRelease(this[1]);
}

BOOL WebKit::WebChromeClient::canRunBeforeUnloadConfirmPanel(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(unsigned __int8 *)(v2 + 792);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3 != 0;
}

void WebKit::WebChromeClient::disableSuddenTermination(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v4 = *(_QWORD *)(v2 + 32);
  v3 = v2 + 32;
  v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2556;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v11, 0);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
}

WTF::StringImpl *WebKit::StorageAreaImpl::setItem(WTF::StringImpl *this, WebCore::LocalFrame *a2, const WTF::String *a3, const WTF::String *a4, BOOL *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v12;
  WebCore::StorageMap *v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  os_unfair_lock_s *v20;
  WebKit::WebProcess *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  WebKit::WebProcess *v35;
  os_unfair_lock_s *v36;
  uint8_t buf[8];
  uint64_t v38;
  WTF::StringImpl *v39;
  IPC::Encoder *v40;

  v6 = *((_QWORD *)this + 3);
  if (!v6)
    return this;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return this;
  v12 = this;
  v13 = (WebCore::StorageMap *)WebKit::StorageAreaMap::ensureMap(*(WebKit::StorageAreaMap **)(v6 + 8));
  v39 = 0;
  *a5 = 0;
  WebCore::StorageMap::setItem(v13, a3, a4, (WTF::String *)&v39, a5);
  if (!*a5 && (WTF::equal(v39, *(const WTF::StringImpl **)a4, v15) & 1) == 0)
  {
    LODWORD(v40) = 0;
    WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v7 + 72), (WTF::StringImpl **)a3, (const WTF::StringImpl *)&v40, (uint64_t)buf);
    ++*(_DWORD *)(*(_QWORD *)buf + 8);
    if (!*(_BYTE *)(v7 + 64))
    {
      v26 = qword_1ECE718E8;
      if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_196BCC000, v26, OS_LOG_TYPE_ERROR, "StorageAreaMap::setItem failed because storage map ID is invalid", buf, 2u);
      }
      goto LABEL_29;
    }
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 8), v7);
    v16 = *(unsigned int **)(v7 + 8);
    if (v16)
    {
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
    v18 = *(_QWORD *)(v7 + 80);
    v19 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v19 += 2;
    v20 = (os_unfair_lock_s *)&_MergedGlobals_106;
    {
      v21 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v35 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v21 = WebKit::WebProcess::WebProcess(v35);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v21;
    }
    v22 = WebKit::WebProcess::ensureNetworkProcessConnection(v21);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v36, (uint64_t **)(v22 + 24));
    if (*(_BYTE *)(v7 + 64))
    {
      v20 = v36;
      v5 = *((_QWORD *)v12 + 2);
      a2 = (WebCore::LocalFrame *)(*((_QWORD *)a2 + 37) + 736);
      if (v19)
        *(_DWORD *)v19 += 2;
      v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      v12 = v23;
      *(_QWORD *)v23 = &off_1E34F2260;
      *((_QWORD *)v23 + 1) = v16;
      *((_QWORD *)v23 + 2) = v18;
      if (v19)
      {
        v25 = *(_DWORD *)v19;
        *(_DWORD *)v19 += 2;
        *((_QWORD *)v23 + 3) = v19;
        if (v25)
          *(_DWORD *)v19 = v25;
        else
          WTF::StringImpl::destroy(v19, v24);
        goto LABEL_21;
      }
    }
    else
    {
      __break(1u);
    }
    *((_QWORD *)v12 + 3) = 0;
LABEL_21:
    v27 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v28 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v28 = 579;
    *(_QWORD *)(v28 + 8) = 0;
    *(_QWORD *)(v28 + 528) = v28 + 16;
    *(_QWORD *)(v28 + 536) = v28 + 16;
    *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v28 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
    v40 = (IPC::Encoder *)v28;
    v29 = *(_QWORD *)(v7 + 56);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v28, 8uLL, 8) = v29;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v28, 8uLL, 8) = v5;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v28, (uint64_t *)a3);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v28, (uint64_t *)a4);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v28, (uint64_t *)a2);
    *(_QWORD *)buf = v12;
    v38 = v27;
    IPC::Connection::sendMessageWithAsyncReply(v20, &v40, (uint64_t *)buf, 0, 0);
    v31 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v40;
    v40 = 0;
    if (v32)
    {
      IPC::Encoder::~Encoder(v32, v30);
      WTF::fastFree(v33, v34);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v36);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v14);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
LABEL_29:
  this = v39;
  v39 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v14);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WebKit::StorageAreaMap *WebKit::StorageAreaImpl::item@<X0>(WebKit::StorageAreaMap *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  WebCore::StorageMap *v7;

  v4 = *((_QWORD *)this + 3);
  if (v4 && (this = *(WebKit::StorageAreaMap **)(v4 + 8)) != 0)
  {
    v7 = (WebCore::StorageMap *)WebKit::StorageAreaMap::ensureMap(this);
    return (WebKit::StorageAreaMap *)WebCore::StorageMap::getItem(v7, a2);
  }
  else
  {
    v5 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *v5 += 2;
    *a3 = v5;
  }
  return this;
}

void WebKit::NavigationState::NavigationClient::didStartProvisionalLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
      if (WeakRetained)
      {
        v10 = WeakRetained;
        v11 = *(_QWORD *)(a1 + 8);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if ((*(_DWORD *)(v12 + 32) & 0x20) == 0)
            goto LABEL_18;
        }
        else
        {
          if ((MEMORY[0x20] & 0x20) == 0)
          {
LABEL_18:
            CFRelease(v10);
            return;
          }
          v12 = 0;
        }
        v13 = objc_loadWeakRetained((id *)(v12 + 16));
        v14 = WebCore::ResourceRequest::nsURLRequest();
        CFRetain(*(CFTypeRef *)(a2 + 8));
        v18 = a2;
        v15 = API::Object::newObject(0x140uLL, 60);
        v16 = API::FrameInfo::FrameInfo(v15, a4, &v18);
        v17 = *(const void **)(v16 + 8);
        if (v17)
          CFRetain(*(CFTypeRef *)(v16 + 8));
        objc_msgSend(v10, "_webView:didStartProvisionalLoadWithRequest:inFrame:", v13, v14, v17);
        if (v17)
          CFRelease(v17);
        CFRelease(*(CFTypeRef *)(v15 + 8));
        if (v18)
          CFRelease(*(CFTypeRef *)(v18 + 8));
        if (v13)
          CFRelease(v13);
        goto LABEL_18;
      }
    }
  }
}

void sub_196D915D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;
  uint64_t v12;

  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  if (v11)
    CFRelease(v11);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFinishLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
      if (WeakRetained)
      {
        v10 = WeakRetained;
        v11 = *(_QWORD *)(a1 + 8);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if ((*(_DWORD *)(v12 + 32) & 0x40000) == 0)
            goto LABEL_18;
        }
        else
        {
          if ((MEMORY[0x20] & 0x40000) == 0)
          {
LABEL_18:
            CFRelease(v10);
            return;
          }
          v12 = 0;
        }
        v13 = objc_loadWeakRetained((id *)(v12 + 16));
        v14 = WebCore::ResourceRequest::nsURLRequest();
        CFRetain(*(CFTypeRef *)(a2 + 8));
        v18 = a2;
        v15 = API::Object::newObject(0x140uLL, 60);
        v16 = API::FrameInfo::FrameInfo(v15, a4, &v18);
        v17 = *(const void **)(v16 + 8);
        if (v17)
          CFRetain(*(CFTypeRef *)(v16 + 8));
        objc_msgSend(v10, "_webView:didFinishLoadWithRequest:inFrame:", v13, v14, v17);
        if (v17)
          CFRelease(v17);
        CFRelease(*(CFTypeRef *)(v15 + 8));
        if (v18)
          CFRelease(*(CFTypeRef *)(v18 + 8));
        if (v13)
          CFRelease(v13);
        goto LABEL_18;
      }
    }
  }
}

void sub_196D91784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;
  uint64_t v12;

  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  if (v11)
    CFRelease(v11);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didFinishDocumentLoad(WebKit::NavigationState::NavigationClient *this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if ((*(_DWORD *)(v5 + 32) & 0x10000) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
        if (WeakRetained)
        {
          v9 = WeakRetained;
          v10 = *((_QWORD *)this + 1);
          if (v10)
            v10 = *(_QWORD *)(v10 + 8);
          v11 = objc_loadWeakRetained((id *)(v10 + 16));
          if (a3)
            v12 = *((_QWORD *)a3 + 1);
          else
            v12 = 0;
          objc_msgSend(v9, "_webView:navigationDidFinishDocumentLoad:", v11, v12);
          if (v11)
            CFRelease(v11);
          CFRelease(v9);
        }
      }
    }
  }
}

void sub_196D91894(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::NavigationClient::didCommitLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
      if (WeakRetained)
      {
        v10 = WeakRetained;
        v11 = *(_QWORD *)(a1 + 8);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if ((*(_DWORD *)(v12 + 32) & 0x8000) == 0)
            goto LABEL_18;
        }
        else
        {
          if ((MEMORY[0x20] & 0x8000) == 0)
          {
LABEL_18:
            CFRelease(v10);
            return;
          }
          v12 = 0;
        }
        v13 = objc_loadWeakRetained((id *)(v12 + 16));
        v14 = WebCore::ResourceRequest::nsURLRequest();
        CFRetain(*(CFTypeRef *)(a2 + 8));
        v18 = a2;
        v15 = API::Object::newObject(0x140uLL, 60);
        v16 = API::FrameInfo::FrameInfo(v15, a4, &v18);
        v17 = *(const void **)(v16 + 8);
        if (v17)
          CFRetain(*(CFTypeRef *)(v16 + 8));
        objc_msgSend(v10, "_webView:didCommitLoadWithRequest:inFrame:", v13, v14, v17);
        if (v17)
          CFRelease(v17);
        CFRelease(*(CFTypeRef *)(v15 + 8));
        if (v18)
          CFRelease(*(CFTypeRef *)(v18 + 8));
        if (v13)
          CFRelease(v13);
        goto LABEL_18;
      }
    }
  }
}

void sub_196D91A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;
  uint64_t v12;

  CFRelease(*(CFTypeRef *)(v12 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  if (v11)
    CFRelease(v11);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void WebKit::NavigationState::willChangeTitle(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "willChangeValueForKey:", CFSTR("title"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196D91AB4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::NavigationState::didChangeTitle(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "didChangeValueForKey:", CFSTR("title"));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196D91B10(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::StorageAreaMap::ensureMap(WebKit::StorageAreaMap *this)
{
  uint64_t result;
  WebCore::StorageMap *v3;
  WTF::StringImpl ****v4;

  if (!*((_BYTE *)this + 64))
    WebKit::StorageAreaMap::sendConnectMessage((uint64_t)this, 1);
  result = *((_QWORD *)this + 6);
  if (!result)
  {
    v3 = (WebCore::StorageMap *)WTF::fastMalloc((WTF *)0x10);
    result = WebCore::StorageMap::StorageMap(v3);
    v4 = (WTF::StringImpl ****)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = result;
    if (v4)
    {
      std::default_delete<WebCore::StorageMap>::operator()[abi:sn180100]((_DWORD)this + 48, v4);
      return *((_QWORD *)this + 6);
    }
  }
  return result;
}

void WebKit::StorageAreaMap::didSetItem(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, int a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 80) == a2)
  {
    v6 = (uint64_t *)(a1 + 72);
    v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 72), a3, (const WTF::StringImpl *)a3);
    v8 = *(_QWORD *)(a1 + 72);
    if (v8)
      v9 = v8 + 16 * *(unsigned int *)(v8 - 4);
    else
      v9 = 0;
    if (v9 == v7)
      goto LABEL_8;
    if (*(_DWORD *)(v7 + 8) != 1)
    {
      --*(_DWORD *)(v7 + 8);
      goto LABEL_8;
    }
    if (v8)
    {
      v10 = v8 + 16 * *(unsigned int *)(v8 - 4);
      if (v10 == v7)
      {
LABEL_8:
        if (a4)
          WebKit::StorageAreaMap::syncItems(a1);
        return;
      }
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v10 = 0;
    }
    if (v10 != v7)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v6, (WTF::StringImpl **)v7);
    goto LABEL_8;
  }
}

void WebKit::PageClientImpl::clearSafeBrowsingWarningIfForMainFrameNavigation(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "_clearSafeBrowsingWarningIfForMainFrameNavigation");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196D91C9C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::PageClientImpl::didCommitLoadForMainFrame(id *this, const WTF::String *a2, uint64_t a3)
{
  id WeakRetained;
  id v7;

  WeakRetained = objc_loadWeakRetained(this + 2);
  objc_msgSend(WeakRetained, "_hidePasswordView");
  objc_msgSend(WeakRetained, "_setHasCustomContentView:loadedMIMEType:", a3, a2);
  v7 = objc_loadWeakRetained(this + 5);
  objc_msgSend(v7, "_didCommitLoadForMainFrame");
  if (v7)
    CFRelease(v7);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_196D91D38(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;
  const void *v3;

  v3 = v2;
  if (v3)
    CFRelease(v3);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkProcess::logFrameNavigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, double a9)
{
  uint64_t result;
  uint64_t v17;

  v17 = a2;
  result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 208), &v17);
  if (result)
  {
    result = *(_QWORD *)(result + 72);
    if (result)
      return WebKit::WebResourceLoadStatisticsStore::logFrameNavigation(result, a9, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t *WebKit::NetworkProcess::processDidResume(WebKit::NetworkProcess *this, int a2)
{
  NSObject *v4;
  WebKit::WebResourceLoadStatisticsStore *v5;
  WebKit::WebResourceLoadStatisticsStore *v6;
  WebKit::WebResourceLoadStatisticsStore *v7;
  uint64_t v8;
  WebKit::PCM::PersistentStore *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *result;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  _BYTE v17[12];
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v17 = 134218240;
    *(_QWORD *)&v17[4] = this;
    v18 = 1024;
    v19 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcess::processDidResume() forForegroundActivity=%d", v17, 0x12u);
  }
  *((_BYTE *)this + 395) = 0;
  v5 = (WebKit::WebResourceLoadStatisticsStore *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 16);
  v7 = (WebKit::WebResourceLoadStatisticsStore *)*((_QWORD *)this + 16);
  if (v7)
    v7 = (WebKit::WebResourceLoadStatisticsStore *)((char *)v7 + 16 * *((unsigned int *)v7 - 1));
  while (v5 != v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 152);
    if (v8)
      *(_BYTE *)(v8 + 136) = 1;
    while (1)
    {
      v5 = (WebKit::WebResourceLoadStatisticsStore *)((char *)v5 + 16);
      if (v5 == v6)
        break;
      if ((unint64_t)(*(_QWORD *)v5 + 1) > 1)
        goto LABEL_12;
    }
    v5 = v6;
LABEL_12:
    ;
  }
  v9 = (WebKit::PCM::PersistentStore *)WebKit::WebResourceLoadStatisticsStore::resume(v5);
  WebKit::PCM::PersistentStore::processDidResume(v9);
  v10 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v10 = off_1E34BEDA0;
  *(_QWORD *)v17 = v10;
  WebKit::NetworkProcess::forEachNetworkSession((uint64_t)this, v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = (uint64_t *)*((_QWORD *)this + 47);
  result = WTF::HashTable<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>,WTF::HashTraits<WTF::RefPtr<WebKit::NetworkStorageManager,WTF::RawPtrTraits<WebKit::NetworkStorageManager>,WTF::DefaultRefDerefTraits<WebKit::NetworkStorageManager>>>>::begin(v11);
  v13 = result;
  v15 = v14;
  if (v11)
    v11 += *((unsigned int *)v11 - 1);
  if (v11 != result)
  {
    do
    {
      v16 = *v13++;
      result = (uint64_t *)WebKit::NetworkStorageManager::resume(v16);
      while (v13 != v15)
      {
        if ((unint64_t)(*v13 + 1) > 1)
          goto LABEL_21;
        ++v13;
      }
      v13 = v15;
LABEL_21:
      ;
    }
    while (v13 != v11);
  }
  return result;
}

uint64_t WebKit::FrameLoadState::didFinishLoad(WebKit::FrameLoadState *this)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  *(_DWORD *)this = 2;
  v1 = (uint64_t *)((char *)this + 168);
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34D1100;
  v4 = (uint64_t)v2;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v1, &v4);
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebKit::FrameLoadState::didCommitLoad(WebKit::FrameLoadState *this)
{
  char *v2;
  char *v3;
  __int128 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9[5];

  *(_DWORD *)this = 1;
  v2 = (char *)this + 48;
  v3 = (char *)this + 48;
  if (!*((_QWORD *)this + 6))
    v3 = (char *)WTF::aboutBlankURL(this);
  WTF::String::operator=((WTF::StringImpl **)this + 1, (WTF::StringImpl *)v3);
  v4 = *(_OWORD *)(v3 + 24);
  *((_OWORD *)this + 1) = *(_OWORD *)(v3 + 8);
  *((_OWORD *)this + 2) = v4;
  v9[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v9);
  WTF::URL::operator=((uint64_t)v2, (WTF::StringImpl *)v9);
  v6 = v9[0];
  v9[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E34D10D8;
  v9[0] = v7;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 21, v9);
  result = v9[0];
  v9[0] = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::FindController::hideFindIndicator(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(this + 24))
  {
    v1 = this;
    WebCore::PageOverlayController::uninstallPageOverlay();
    v2 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 72) = 0;
    if (v2)
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v2 + 8));
    *(_BYTE *)(v1 + 24) = 0;
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8);
    if (v3)
      v4 = v3 - 16;
    else
      v4 = 0;
    return WebKit::setSelectionChangeUpdatesEnabledInAllFrames(v4, 0);
  }
  return this;
}

WebCore::ImageAnalysisQueue *WebKit::FindController::hideFindUI(WebKit::FindController *this)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::WebPage *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::ImageAnalysisQueue *result;
  uint64_t v12;
  uint64_t v13;

  WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 48, 0);
  v2 = (_DWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = v2 + 2;
    ++v2[2];
    WebCore::PageOverlayController::uninstallPageOverlay();
    WTF::RefCounted<WebCore::PageOverlay>::deref(v3);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = (WebKit::WebPage *)(v5 - 16);
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = WebKit::WebPage::mainFramePlugIn(v6, (WebCore::LocalFrame *)v2);
  if (v7)
  {
    v8 = (_DWORD *)v7;
    ++*(_DWORD *)(v7 + 8);
    WebKit::PluginView::findString(v7, MEMORY[0x1E0CBF738], 0, 0);
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  else
  {
    v12 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    if (v12)
      v13 = v12 - 16;
    else
      v13 = 0;
    WebCore::Page::unmarkAllTextMatches(*(WebCore::Page **)(v13 + 48));
  }
  WebKit::FindController::hideFindIndicator((uint64_t)this);
  *((_DWORD *)this + 16) = -1;
  v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v9)
    v10 = v9 - 16;
  else
    v10 = 0;
  result = *(WebCore::ImageAnalysisQueue **)(*(_QWORD *)(v10 + 48) + 1216);
  if (result)
    return (WebCore::ImageAnalysisQueue *)WebCore::ImageAnalysisQueue::clearDidBecomeEmptyCallback(result);
  return result;
}

uint64_t WebKit::WebFrameProxy::didFinishLoad(WebKit::WebFrameProxy *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;

  result = WebKit::FrameLoadState::didFinishLoad((WebKit::WebFrameProxy *)((char *)this + 40));
  v3 = *((_QWORD *)this + 53);
  if (v3)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4 && (v4 = *(_QWORD *)(v4 + 8)) != 0)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 1896);
      v5 = v4 & 0xFFFFFFFFFFFFFF00;
      v4 = v4;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    *((_QWORD *)this + 53) = 0;
    v7 = *((_OWORD *)this + 17);
    v8 = 1;
    (*(void (**)(uint64_t, unint64_t, uint64_t, __int128 *))(*(_QWORD *)v3 + 16))(v3, v5 | v4, v6, &v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

void WebKit::WebFrameProxy::didCommitLoad(WebKit::WebFrameProxy *this, const WTF::String *a2, const void **a3, char a4)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const void *v10;
  const void *v11;

  WebKit::FrameLoadState::didCommitLoad((WebKit::WebFrameProxy *)((char *)this + 40));
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::String::operator=((WTF::StringImpl **)this + 28, a2);
  v10 = *a3;
  if (v10)
    CFRetain(v10);
  v11 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = v10;
  if (v11)
    CFRelease(v11);
  *((_BYTE *)this + 248) = a4;
}

void WebKit::PrefetchCache::take(uint64_t **this@<X0>, const WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  const WTF::StringImpl **v7;

  v4 = *this;
  if (*this)
  {
    v7 = a2;
    WTF::Deque<std::tuple<WTF::URL,WTF::WallTime>,0ul>::removeAllMatching<WebKit::PrefetchCache::take(WTF::URL const&)::$_0>((WTF::StringImpl *)(this + 1), &v7);
    v6 = WTF::HashTable<WTF::URL,WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>>>,WTF::DefaultHash<WTF::URL>,WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::URL>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::URL>>,WTF::URL>(v4, a2);
    WTF::HashMap<WTF::URL,std::unique_ptr<WebKit::PrefetchCache::Entry>,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<std::unique_ptr<WebKit::PrefetchCache::Entry>>,WTF::HashTableTraits>::take(a3, v4, v6);
  }
  else
  {
    *a3 = 0;
  }
}

WTF::StringImpl *WebKit::PageLoadState::didCommitLoad(uint64_t a1, uint64_t a2, const void **a3, char a4, char a5, char a6, uint64_t a7)
{
  const void *v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  const void *v19;

  *(_BYTE *)(a1 + 192) = 1;
  *(_BYTE *)(a1 + 193) = a4;
  v11 = *a3;
  if (*a3)
  {
    v19 = *a3;
    CFRetain(v11);
    v11 = v19;
  }
  v12 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v11;
  if (v12)
    CFRelease(v12);
  v13 = (WTF::StringImpl *)(a1 + 216);
  if (!*(_QWORD *)(a1 + 216))
    v13 = (WTF::StringImpl *)WTF::aboutBlankURL((WTF *)v12);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 224), v13);
  v15 = *(WTF::StringImpl **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  *(_BYTE *)(a1 + 194) = a5;
  *(_BYTE *)(a1 + 195) = a6;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a1 + 232, a7);
  v17 = *(WTF::StringImpl **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = *(WTF::StringImpl **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebPageProxy::stopMakingViewBlankDueToLackOfRenderingUpdateIfNecessary(uint64_t this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 894))
  {
    v1 = this;
    v2 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(v1 + 32);
      v4 = *(_QWORD *)(v3 + 744);
      v5 = *(_QWORD *)(v3 + 1896);
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 136);
      if (v6)
        LODWORD(v6) = *(_DWORD *)(v6 + 108);
      v9 = 134218752;
      v10 = v1;
      v11 = 2048;
      v12 = v4;
      v13 = 2048;
      v14 = v5;
      v15 = 1024;
      v16 = v6;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i] WebPageProxy::stopMakingViewBlankDueToLackOfRenderingUpdateIfNecessary:", (uint8_t *)&v9, 0x26u);
    }
    v7 = *(_QWORD *)(v1 + 40);
    if (v7)
      v8 = *(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 1584))(v8);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 1448))(v8, 0);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1592))(v8);
    *(_BYTE *)(v1 + 894) = 0;
  }
  return this;
}

BOOL WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess(WebKit::WebPageProxy *this, WebKit::WebProcessProxy *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v5;
  _BOOL8 v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9[5];

  WTF::URL::URL((uint64_t)v9, a3);
  v6 = WebKit::WebPageProxy::checkURLReceivedFromCurrentOrPreviousWebProcess(this, a2, (const WTF::URL *)v9);
  v7 = v9[0];
  v9[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

uint64_t WebKit::WebPageProxy::broadcastMainFrameURLChangeToOtherProcesses(WebKit::WebPageProxy *this, IPC::Connection *a2, const WTF::URL *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34D50A0;
  v6[1] = a2;
  v6[2] = a3;
  v8 = (uint64_t)v6;
  WebKit::WebPageProxy::forEachWebContentProcess(this, &v8);
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebKit::WebPageProxy::createRemoteSubframesInOtherProcesses(WebKit::WebPageProxy *this, WebKit::WebFrameProxy *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v6 = *((_QWORD *)this + 28);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, a3))
  {
    v7 = *((_QWORD *)a2 + 39);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        CFRetain(*(CFTypeRef *)(v8 + 8));
        v13 = v8;
        v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v9 = off_1E34D5078;
        v9[1] = a2;
        v9[2] = &v13;
        v9[3] = a3;
        v12 = v9;
        WebKit::WebPageProxy::forEachWebContentProcess(this, &v12);
        v10 = v12;
        v12 = 0;
        if (v10)
          (*(void (**)(_QWORD *))(*v10 + 8))(v10);
        v11 = v13;
        v13 = 0;
        if (v11)
          CFRelease(*(CFTypeRef *)(v11 + 8));
      }
    }
  }
}

uint64_t WebKit::WebPageProxy::getLoadDecisionForIcon(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v6 = *(_QWORD *)(a1 + 88);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v7 = *a3;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = &off_1E34D5AA8;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = v7;
  v10 = v8;
  (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v6 + 16))(v6, a2, &v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::NetworkLoad::didSendData(WebKit::NetworkLoad *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
}

WebKit::FrameState *WebKit::FrameState::FrameState(WebKit::FrameState *this, const WebKit::FrameState *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 1) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 2) = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 3) = v7;
  v8 = *((_OWORD *)a2 + 2);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_OWORD *)this + 2) = v8;
  std::__optional_copy_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((uint64_t)this + 56, (uint64_t)a2 + 56);
  v9 = *((_OWORD *)a2 + 5);
  v10 = *((_OWORD *)a2 + 6);
  *((_BYTE *)this + 112) = 0;
  *((_OWORD *)this + 5) = v9;
  *((_OWORD *)this + 6) = v10;
  *((_BYTE *)this + 136) = 0;
  if (*((_BYTE *)a2 + 136))
  {
    std::construct_at[abi:sn180100]<WebKit::HTTPBody,WebKit::HTTPBody const&,WebKit::HTTPBody*>((_QWORD *)this + 14, (_DWORD **)a2 + 14);
    *((_BYTE *)this + 136) = 1;
  }
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  v11 = *((_OWORD *)a2 + 10);
  v12 = *((_OWORD *)a2 + 11);
  v13 = *((_OWORD *)a2 + 12);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_OWORD *)this + 11) = v12;
  *((_OWORD *)this + 12) = v13;
  *((_OWORD *)this + 10) = v11;
  WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 216, (uint64_t)a2 + 216);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 232, (uint64_t)a2 + 232);
  return this;
}

void sub_196D92A50(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF **v3;
  uint64_t v4;
  void *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  std::__optional_destruct_base<WebKit::HTTPBody,false>::~__optional_destruct_base[abi:sn180100](v4, a2);
  if (*(_BYTE *)(v2 + 72))
  {
    v7 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v2 + 56) = 0;
      *(_DWORD *)(v2 + 64) = 0;
      WTF::fastFree(v7, v6);
    }
  }
  v8 = *(WTF::StringImpl **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v11 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::operator==(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)&v7 = a2;
  *((_QWORD *)&v7 + 1) = a3;
  v8 = v7;
  v3 = WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(a1);
  v4 = WTF::ASCIILiteral::span8((WTF::ASCIILiteral *)&v8);
  return MEMORY[0x19AEABBCC](v3, v4, v5) & 1;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebKit::ResourceLoadStatisticsStore::NotVeryPrevalentResources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(_DWORD *result)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *(result - 1);
  v3 = &result[10 * v2];
  if (!*(result - 3))
    return &result[10 * v2];
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    while ((*result + 1) <= 1)
    {
      result += 10;
      v4 -= 40;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::RegistrableDomain>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash ***a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::ASCIICaseInsensitiveHash ***v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::ASCIICaseInsensitiveHash ***)(v6 + 8 * v11);
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = WTF::ASCIICaseInsensitiveHash::hash(**v13, v10);
        v17 = 0;
        do
        {
          v18 = v16 & v15;
          v16 = ++v17 + v18;
        }
        while (*(_QWORD *)(v14 + 8 * v18));
        *(_QWORD *)(v14 + 8 * v18) = *v13;
        if (v13 == a3)
          v12 = v14 + 8 * v18;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::RegistrableDomain>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash ***a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::ListHashSetNode<WebCore::RegistrableDomain> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::RegistrableDomain>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::RegistrableDomain> *>>::rehash(a1, v5, a2);
}

WTF::StringImpl *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v11;
  WTF *v12;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100)
    v8 = v7 >> 8;
  else
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  for (i = 0; ; v8 = i + v11)
  {
    v11 = v8 & v6;
    v12 = *(WTF **)(v3 + 16 * v11);
    if (v12 == (WTF *)-1)
      goto LABEL_10;
    if (!v12)
      break;
    if ((WTF::equal(v12, *a2, a3) & 1) != 0)
      return v3 + 16 * v11;
LABEL_10:
    ++i;
  }
  if (*a1)
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  else
    return 0;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl **v19;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v7 = WTF::fastZeroedMalloc((WTF *)(16 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v8 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
      v9 = v8;
      v11 = v10;
      v12 = *a2 ? (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)] : 0;
      if ((WTF::StringImpl **)v12 != v8)
      {
        do
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = *((_DWORD *)*v9 + 4);
          if (v15 >= 0x100)
            v16 = v15 >> 8;
          else
            v16 = WTF::StringImpl::hashSlowCase(*v9);
          v17 = 0;
          do
          {
            v18 = v16 & v14;
            v16 = ++v17 + v18;
          }
          while (*(_QWORD *)(v13 + 16 * v18));
          v19 = (WTF::StringImpl **)(v13 + 16 * v18);
          WTF::String::operator=(v19, (WTF::StringImpl *)v9);
          WTF::String::operator=(v19 + 1, (WTF::StringImpl *)(v9 + 1));
          while (1)
          {
            v9 += 2;
            if (v9 == v11)
              break;
            if ((unint64_t)*v9 + 1 > 1)
              goto LABEL_19;
          }
          v9 = v11;
LABEL_19:
          ;
        }
        while (v9 != (WTF::StringImpl **)v12);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(_QWORD *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t result;

  v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(a2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  result = WTF::fastZeroedMalloc((WTF *)(16 * v4 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_6;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_4;
LABEL_6:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_7:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (!result)
    return 0;
  v1 = *((unsigned int *)result - 1);
  v2 = &result[3 * v1];
  if (!*((_DWORD *)result - 3))
    return &result[3 * v1];
  if ((_DWORD)v1)
  {
    v3 = 24 * v1;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 3;
      v3 -= 24;
      if (!v3)
        return v2;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  int v22;
  __int16 v23;
  char v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = v6 + 16 * v13;
      if (*(_QWORD *)v15 != -1 && *(_OWORD *)v15 != 0)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v22 = -1640531527;
        v23 = 0;
        v24 = 0;
        WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(&v22, (_QWORD *)(v6 + 16 * v13), (_QWORD *)(v15 + 8));
        v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v22);
        v19 = 0;
        do
        {
          v20 = v18 & v17;
          v18 = ++v19 + v20;
        }
        while (*(_OWORD *)(v16 + 16 * v20) != 0);
        *(_OWORD *)(v16 + 16 * v20) = *(_OWORD *)v15;
        if (v15 == a3)
          v14 = v16 + 16 * v20;
      }
      ++v13;
    }
    while (v13 != v7);
    goto LABEL_16;
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::ASCIICaseInsensitiveHash **v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  const WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::ASCIICaseInsensitiveHash *v26;
  WebCore::ResourceLoadStatistics **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t result;

  v3 = *a1;
  if (!*a1)
  {
    v4 = 0;
    v5 = 0;
LABEL_3:
    v6 = 8;
    goto LABEL_4;
  }
  v4 = *(_DWORD *)(v3 - 4);
  v5 = *(_DWORD *)(v3 - 12);
  if (!v4)
    goto LABEL_3;
  v6 = v4 << (6 * v5 >= 2 * v4);
LABEL_4:
  v7 = WTF::fastZeroedMalloc((WTF *)(16 * v6 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = 0;
    v12 = v4;
    do
    {
      v13 = (WTF::ASCIICaseInsensitiveHash **)(v3 + 16 * v10);
      if (*v13 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v13, 0, v9))
        {
          std::unique_ptr<WebCore::ResourceLoadStatistics>::reset[abi:sn180100]((WebCore::ResourceLoadStatistics **)(v3 + 16 * v10 + 8), 0);
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v8);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = WTF::ASCIICaseInsensitiveHash::hash(*v13, v14);
          v20 = 0;
          do
          {
            v21 = v18 & v17;
            v22 = WTF::equal(*(WTF **)(v16 + 16 * v21), 0, v19);
            v18 = ++v20 + v21;
          }
          while (!v22);
          v23 = (WTF::StringImpl **)(v16 + 16 * v21);
          std::unique_ptr<WebCore::ResourceLoadStatistics>::reset[abi:sn180100](v23 + 1, 0);
          v25 = *v23;
          *v23 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v24);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = *v13;
          *v13 = 0;
          *v23 = v26;
          v27 = (WebCore::ResourceLoadStatistics **)(v3 + 16 * v10);
          v28 = v27[1];
          *++v27 = 0;
          v23[1] = v28;
          std::unique_ptr<WebCore::ResourceLoadStatistics>::reset[abi:sn180100](v27, 0);
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v8);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a2)
            v11 = v16 + 16 * v21;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v3)
      return result;
  }
  WTF::fastFree((WTF *)(v3 - 16), v8);
  return v11;
}

WTF::StringImpl **WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **result;
  uint64_t v5;

  result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, a2, a3);
  if (*a1)
  {
    v5 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
    if ((WTF::StringImpl **)v5 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v5 = 0;
  }
  if ((WTF::StringImpl **)v5 != result)
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(a1, result);
  return result;
}

unint64_t WTF::Vector<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - (_QWORD)v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<std::unique_ptr<WebKit::NetworkCache::Storage::ReadOperation>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = (uint64_t)WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 8 * a2), (WTF::StringImpl *)(*(_QWORD *)result + 8 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(_QWORD *)v3 = result;
      if ((WTF::StringImpl *)result != v5)
        result = (uint64_t)WTF::VectorMover<false,WebCore::RegistrableDomain>::move(v5, (WTF::StringImpl *)((char *)v5 + 8 * v4), (WTF::StringImpl **)result);
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t *WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = (uint64_t *)*result;
      v5 = (uint64_t *)(*result + 32 * *((unsigned int *)result + 3));
      v6 = WTF::fastMalloc((WTF *)(32 * a2));
      *((_DWORD *)v3 + 2) = v2;
      *v3 = v6;
      result = WTF::VectorMover<false,WebCore::MimeClassInfo>::move(v4, v5, v6);
      if (v4)
      {
        if ((uint64_t *)*v3 == v4)
        {
          *v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
        }
        return (uint64_t *)WTF::fastFree((WTF *)v4, v7);
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  return v3;
}

_QWORD *WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MimeClassInfo&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _QWORD *result;

  v3 = WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = WebCore::MimeClassInfo::MimeClassInfo((_QWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12)), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = (uint64_t)WTF::VectorDestructor<true,WebCore::SimpleRange>::destruct((uint64_t *)(*(_QWORD *)result + 32 * a2), (uint64_t *)(*(_QWORD *)result + 32 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(uint64_t **)v3;
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(_QWORD *)v3 = result;
      if ((uint64_t *)result != v5)
        result = (uint64_t)WTF::VectorMover<false,WebCore::SimpleRange>::move(v5, &v5[4 * v4], result);
    }
    if (v5)
    {
      if (*(uint64_t **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree((WTF *)v5, (void *)a2);
    }
  }
  return result;
}

uint64_t *WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (a3 < 0x4924925)
  {
    v5 = 56 * a3;
    v6 = WTF::fastMalloc((WTF *)(56 * a3));
    *((_DWORD *)v3 + 2) = v5 / 0x38;
    *v3 = v6;
    v7 = *((_DWORD *)v3 + 3);
    do
    {
      WebCore::PluginInfo::PluginInfo(*v3 + 56 * v7, a2);
      v7 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v7;
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebKit::ResourceLoadStatisticsStore::DomainData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::ResourceLoadStatisticsStore::DomainData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 40 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WebKit::SharedStringHashStore::Operation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;

  if (result[2] > a2)
  {
    v2 = result;
    if (result[3] > a2)
      result[3] = a2;
    result = *(unsigned int **)result;
    if (a2)
    {
      v2[2] = a2;
      result = (unsigned int *)WTF::fastRealloc((WTF *)result, (void *)(8 * a2));
      *(_QWORD *)v2 = result;
    }
    else if (result)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
      return (unsigned int *)WTF::fastFree((WTF *)result, 0);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  WebKit::FrameState *v6;
  uint64_t v7;
  const WebKit::FrameState *v8;
  uint64_t v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0x1084211)
  {
    v5 = 248 * v3;
    v6 = (WebKit::FrameState *)WTF::fastMalloc((WTF *)(248 * v3));
    *(_DWORD *)(v2 + 8) = v5 / 0xF8;
    *(_QWORD *)v2 = v6;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7)
    {
      v8 = *(const WebKit::FrameState **)a2;
      v9 = 248 * v7;
      do
      {
        v6 = (WebKit::FrameState *)(WebKit::FrameState::FrameState(v6, v8) + 248);
        v8 = (const WebKit::FrameState *)((char *)v8 + 248);
        v9 -= 248;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_196D93BF8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned int **WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>::operator=(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::SerializedScriptValue *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (WebCore::SerializedScriptValue *)v4;
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess17DomCookiesForHostEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34B0C20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29NetworkConnectionToWebProcess17DomCookiesForHostEN6WebKit29NetworkConnectionToWebProcessES8_FvRKNS_3URLEONS_17CompletionHandlerIFvRKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess29ResourceLoadStatisticsUpdatedEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_6VectorIN7WebCore22ResourceLoadStatisticsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34B08D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages29NetworkConnectionToWebProcess29ResourceLoadStatisticsUpdatedEN6WebKit29NetworkConnectionToWebProcessES8_FvONS_6VectorIN7WebCore22ResourceLoadStatisticsELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::NetworkConnectionToWebProcess *,void ()(WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&) WebKit::NetworkConnectionToWebProcess::*)::{lambda(Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::SharedStringHashStore::*&)(void),WebKit::SharedStringHashStore*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::DefaultHash<WebCore::MessagePortIdentifier>>::hash<WebCore::MessagePortIdentifier>(_QWORD *a1)
{
  int v2;
  __int16 v3;
  char v4;

  v2 = -1640531527;
  v3 = 0;
  v4 = 0;
  WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(&v2, a1, a1 + 1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v2);
}

uint64_t WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets(uint64_t result, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF **v3;
  _QWORD *v4;
  WTF **v5;

  v3 = *(WTF ***)result;
  if (*(_QWORD *)result != *(_QWORD *)(result + 8))
  {
    v4 = (_QWORD *)result;
    do
    {
      result = WTF::equal(*v3, 0, a3);
      if ((result & 1) == 0 && *v3 != (WTF *)-1)
        break;
      v5 = (WTF **)v4[1];
      v3 = (WTF **)(*v4 + 8);
      *v4 = v3;
    }
    while (v3 != v5);
  }
  return result;
}

uint64_t WTF::VectorTypeOperations<std::pair<WTF::String,WTF::String>>::uninitializedCopy(uint64_t result, uint64_t a2, _QWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;

  while (result != a2)
  {
    v3 = *(_DWORD **)result;
    if (*(_QWORD *)result)
      *v3 += 2;
    *a3 = v3;
    v4 = *(_DWORD **)(result + 8);
    if (v4)
      *v4 += 2;
    a3[1] = v4;
    result += 16;
    a3 += 2;
  }
  return result;
}

uint64_t WTF::GenericHashTraits<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>::assignToEmpty<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>(WTF::StringImpl **a1, uint64_t a2)
{
  WTF::String::operator=(a1, (WTF::StringImpl *)a2);
  WTF::String::operator=(a1 + 1, (WTF::StringImpl *)(a2 + 8));
  return std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>((uint64_t)(a1 + 2), a2 + 16);
}

_QWORD *WTF::NeverDestroyed<WTF::AtomString const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  if (*(_QWORD *)(a2 + 8) >= 2uLL)
  {
    WTF::AtomStringImpl::add();
    v3 = v5;
  }
  else
  {
    v3 = *MEMORY[0x1E0CBF3B8];
    *(_DWORD *)*MEMORY[0x1E0CBF3B8] += 2;
  }
  *a1 = v3;
  return a1;
}

uint64_t WTF::StringBuilder::append(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0xFF00000000) != 0)
    return WTF::StringBuilder::append();
  else
    return WTF::StringBuilder::append();
}

uint64_t *WTF::VectorMover<false,WebCore::MimeClassInfo>::move(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  for (; result != a2; a3 += 32)
  {
    v5 = *result;
    *result = 0;
    *(_QWORD *)a3 = v5;
    v6 = result[1];
    result[1] = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = v6;
    v7 = result[2];
    result[2] = 0;
    *(_QWORD *)(a3 + 16) = v7;
    LODWORD(v7) = *((_DWORD *)result + 6);
    *((_DWORD *)result + 6) = 0;
    *(_DWORD *)(a3 + 24) = v7;
    LODWORD(v7) = *((_DWORD *)result + 7);
    *((_DWORD *)result + 7) = 0;
    *(_DWORD *)(a3 + 28) = v7;
    WebCore::MimeClassInfo::~MimeClassInfo((WebCore::MimeClassInfo *)result, a2);
    result = (uint64_t *)(v8 + 32);
  }
  return result;
}

uint64_t WTF::Persistence::VectorCoder<false,std::pair<WTF::String,WTF::String>,0ul>::encodeForPersistence<WTF::Persistence::Encoder>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  result = WTF::Persistence::Encoder::operator<<();
  if (*(_DWORD *)(a2 + 12))
  {
    v4 = 0;
    v5 = 8;
    do
    {
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      result = WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      ++v4;
      v5 += 16;
    }
    while (v4 < *(unsigned int *)(a2 + 12));
  }
  return result;
}

WTF::StringImpl *WTF::HashTraits<WTF::String>::customDeleteBucket(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *a1;
  *a1 = (WTF::StringImpl *)-1;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *IPC::Decoder::operator>><std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t *a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  WebCore::Cookie *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;

  IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, a2, (uint64_t)&v13);
  if (*((unsigned __int8 *)a2 + 16) == v15)
  {
    if (!*((_BYTE *)a2 + 16))
      return a1;
    v5 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v5)
    {
      v6 = (WebCore::Cookie *)*a2;
      v7 = 136 * v5;
      do
      {
        WebCore::Cookie::~Cookie(v6, v4);
        v6 = (WebCore::Cookie *)(v8 + 136);
        v7 -= 136;
      }
      while (v7);
    }
    v9 = (WTF *)*a2;
    if (*a2)
    {
      *a2 = 0;
      *((_DWORD *)a2 + 2) = 0;
      WTF::fastFree(v9, v4);
    }
    *a2 = v13;
    v10 = v14;
    v13 = 0;
    v14 = 0;
    a2[1] = v10;
  }
  else if (*((_BYTE *)a2 + 16))
  {
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, v4);
    *((_BYTE *)a2 + 16) = 0;
  }
  else
  {
    *a2 = v13;
    v11 = v14;
    v13 = 0;
    v14 = 0;
    a2[1] = v11;
    *((_BYTE *)a2 + 16) = 1;
  }
  if (v15)
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v4);
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned long long,unsigned long long>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<unsigned long long,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::URL>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::URL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

uint64_t IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v20 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        a1 = v20;
        v11 = *v20;
        v10 = v20[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_8;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    v10 = v1;
    v11 = 0;
LABEL_8:
    v1 = 0;
    v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v19 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        a1 = v19;
        v2 = *v19;
        v1 = v19[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
    }
    goto LABEL_9;
  }
  v5 = *v4;
  if (v5 < 2)
  {
    LODWORD(v6) = v5 != 0;
    v7 = 256;
    goto LABEL_5;
  }
LABEL_9:
  *a1 = 0;
  a1[1] = 0;
  v6 = a1[3];
  if (v6)
  {
    v18 = a1;
    if (v1)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v2);
    LODWORD(v6) = 0;
    v7 = 0;
    a1 = v18;
  }
  else
  {
    v7 = 0;
  }
LABEL_5:
  v8 = v7 | v6;
  if (v8 <= 0xFF)
  {
    v14 = *a1;
    v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v15)
      {
        v17 = v8;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
        return v17;
      }
    }
  }
  return v8;
}

uint64_t IPC::Decoder::decode<WebCore::ScrollbarHoverState>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int16 v14;
  int v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v18 = 0;
    v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      v35 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        a1 = v35;
        v19 = *v35;
        v18 = v35[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_16;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
    goto LABEL_44;
  v6 = *v4;
  if (v6 < 2)
  {
    v7 = 0;
    v8 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (!v22)
    {
      v2 = 0;
      v7 = 1;
      goto LABEL_20;
    }
    v28 = v6;
    v33 = a1;
    if (!v1)
    {
      v22 = 0;
      v2 = 0;
      v7 = 1;
LABEL_20:
      *a1 = 0;
      a1[1] = 0;
      v23 = a1[3];
      if (v23)
      {
        v27 = v7;
        v32 = a1;
        if (v22)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v2, v22);
          a1 = v32;
          v2 = *v32;
          v1 = v32[1];
        }
        else
        {
          v1 = 0;
          v2 = 0;
        }
        v7 = v27;
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
      goto LABEL_22;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v2);
    v8 = 0;
    a1 = v33;
    v2 = *v33;
    v1 = v33[1];
    v7 = 1;
    v5 = v33[2];
    v6 = v28;
LABEL_5:
    if (v6)
      v9 = v8;
    else
      v9 = 0;
    v10 = v5 - v2;
    if (v1 <= v10)
    {
      v29 = v7;
      v22 = 0;
      v26 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      v36 = a1;
      if (v1 && v26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        a1 = v36;
        v2 = *v36;
        v22 = v36[1];
      }
      else
      {
        v2 = 0;
      }
      v7 = v29;
      goto LABEL_20;
    }
    v11 = (unsigned __int8 *)(v2 + v10);
    a1[2] = v11 + 1;
    if (!v2)
    {
      v22 = v1;
      goto LABEL_20;
    }
    v12 = *v11;
    if (v12 <= 1)
    {
      if ((v7 & 1) == 0)
      {
        v7 = v12 != 0;
        LODWORD(v13) = 1;
        goto LABEL_13;
      }
      goto LABEL_43;
    }
LABEL_22:
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (!v13)
    {
      v2 = 0;
      v9 = 0;
      goto LABEL_13;
    }
    v31 = a1;
    if (!v1)
      break;
    a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v2);
    v2 = *v31;
    if (!*v31)
      goto LABEL_29;
LABEL_43:
    __break(1u);
LABEL_44:
    v18 = v1;
    v19 = v2;
LABEL_16:
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      v34 = a1;
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
        v6 = 0;
        a1 = v34;
        v2 = *v34;
        v1 = v34[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v6 = 0;
      }
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v6 = 0;
    }
  }
  v2 = 0;
LABEL_29:
  LODWORD(v13) = 0;
  v9 = 0;
  a1 = v31;
LABEL_13:
  v14 = v9 | (v7 << 8);
  v15 = (_DWORD)v13 << 16;
  v16 = v14 | ((_DWORD)v13 << 16);
  if (!v15)
  {
    v24 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v25 = a1[3];
    if (v25)
    {
      if (v24)
      {
        v30 = v16;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v2);
        return v30;
      }
    }
  }
  return v16;
}

unint64_t IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::SameSiteInfo>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  result = IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::decode(a1);
  if (!BYTE3(result))
  {
    v3 = *a1;
    v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::CallbackID>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::CallbackID,void>::decode(a1, a2);
  if (!a2[8])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::VectorArgumentCoder<false,std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_196D947B4(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

void IPC::WorkQueueMessageReceiverQueue::~WorkQueueMessageReceiverQueue(IPC::WorkQueueMessageReceiverQueue *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
}

{
  WTF *v2;
  void *v3;

  IPC::WorkQueueMessageReceiverQueue::~WorkQueueMessageReceiverQueue(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL IPC::handleMessageSynchronous<Messages::NetworkConnectionToWebProcess::DomCookiesForHost,WebKit::NetworkConnectionToWebProcess,WebKit::NetworkConnectionToWebProcess,void ()(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&)>(unsigned __int8 **a1, uint64_t *a2, IPC::Encoder **a3, uint64_t a4, void (*a5)(_QWORD *, WTF::StringImpl **, _QWORD **), uint64_t a6)
{
  int v11;
  IPC::Encoder *v12;
  _QWORD *v13;
  unsigned __int8 **v14;
  _BOOL8 result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  IPC::Encoder *v20;
  unsigned __int8 **v21[2];
  _QWORD *v22;
  WTF::StringImpl *v23[5];
  unsigned __int8 v24;

  IPC::Decoder::decode<std::tuple<WTF::URL>>(a2, v23);
  v11 = v24;
  if (!v24)
    return v11 != 0;
  v12 = *a3;
  *a3 = 0;
  v20 = v12;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v21, a1);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34B0C20;
  v13[1] = v20;
  v14 = v21[0];
  v21[0] = 0;
  v13[2] = v14;
  v22 = v13;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v21);
  result = 0;
  if (v24)
  {
    v16 = (_QWORD *)(a4 + (a6 >> 1));
    if ((a6 & 1) != 0)
      a5 = *(void (**)(_QWORD *, WTF::StringImpl **, _QWORD **))(*v16 + a5);
    a5(v16, v23, &v22);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    if (v24)
    {
      v19 = v23[0];
      v23[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    return v11 != 0;
  }
  __break(1u);
  return result;
}

unsigned __int8 *IPC::MessageReceiveQueueMap::remove(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *result;
  uint64_t v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  _QWORD v9[2];
  unsigned __int8 v10;

  if (!a2[1])
    return (unsigned __int8 *)std::optional<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::operator=[abi:sn180100]<decltype(nullptr),void>((uint64_t)(a1 + 2));
  v3 = *a2;
  v10 = *a2;
  if (!a2[16])
  {
    v7 = a1 + 1;
    v8 = WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned char>>,unsigned char>(a1 + 1, &v10);
    return (unsigned __int8 *)WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::remove(v7, (uint64_t)v8);
  }
  v4 = *((_QWORD *)a2 + 1);
  v9[0] = v3;
  v9[1] = v4;
  result = WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>>,std::pair<unsigned char,unsigned long long>>(a1, (unsigned __int8 *)v9);
  if (*a1)
  {
    v6 = *a1 + 32 * *(unsigned int *)(*a1 - 4);
    if ((unsigned __int8 *)v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if ((unsigned __int8 *)v6 != result)
    return (unsigned __int8 *)WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::remove((uint64_t)a1, (uint64_t)result);
  return result;
}

void IPC::VectorArgumentCoder<false,WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)a2;
    v7 = v6 + 32 * v5;
    do
    {
      IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, v6);
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6 + 16);
      v6 += 32;
    }
    while (v6 != v7);
  }
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebResourceLoader::DidSendData>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 2670;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidFirstVisuallyNonEmptyLayoutForFrame>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1893;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::UserData const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebKit::UserData const&>,0ul,1ul>((IPC::Encoder *)v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t IPC::MessageSender::send<Messages::WebPageProxy::SetNetworkRequestsInProgress>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  IPC::Encoder *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2043;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  LOBYTE(a2) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v5, 1uLL, 1) = (char)a2;
  v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v12, 0);
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v9, v10);
  }
  return v7;
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned long long,unsigned long long>,void>::decode<IPC::Decoder>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  char v7;
  char v8;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (v5 && (v6 = result, result = IPC::Decoder::decode<unsigned long long>(a1), v7))
  {
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = result;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v8;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  v6 = v10;
  if (v10)
  {
    *(_QWORD *)a3 = v8;
    v7 = v9;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)(a3 + 8) = v7;
    result = WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    v6 = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

void IPC::ArgumentCoder<std::tuple<WTF::URL>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6[5];
  unsigned __int8 v7;

  IPC::Decoder::decode<WTF::URL>(a1, v6);
  if (v7)
  {
    WTF::URL::URL((uint64_t)a2, (uint64_t *)v6);
    v4 = v7;
    a2[40] = 1;
    if (v4)
    {
      v5 = v6[0];
      v6[0] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v3);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[40] = 0;
  }
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::LinkIcon,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  BOOL v5;
  int i;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *result;
  uint64_t v10;
  char v11;
  char v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  char v22;
  WTF::StringImpl *v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  WTF::StringImpl *v29;
  char v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  char v34;

  IPC::Decoder::decode<WTF::URL>(a1, &v31);
  LOWORD(v19) = 0;
  IPC::Decoder::operator>><unsigned char>(a1, &v19);
  if (!BYTE1(v19)
    || ((v4 = (char)v19, v19 <= 4u) ? (v5 = ((1 << (char)v19) & 0x16) == 0) : (v5 = 1), v5))
  {
    v7 = (WTF::StringImpl *)*a1;
    v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      goto LABEL_37;
    goto LABEL_8;
  }
  for (i = 0; ; i = 1)
  {
    IPC::Decoder::decode<WTF::String>(a1, &v29);
    v10 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
    v12 = v11;
    result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)&v26);
    if (!*a1)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 80) = 0;
      goto LABEL_23;
    }
    if (v34)
    {
      v13 = v31;
      v31 = 0;
      v19 = v13;
      v20 = v32;
      v21 = v33;
      LODWORD(v32) = v32 & 0xFFFFFFFE;
      if (!i)
      {
        v22 = v4;
        if (v30)
        {
          v14 = v29;
          v29 = 0;
          v23[0] = v14;
          if (v12)
          {
            LODWORD(v23[1]) = v10;
            BYTE4(v23[1]) = BYTE4(v10);
            if (v28)
              break;
          }
        }
      }
    }
    __break(1u);
LABEL_37:
    if (v8)
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result + 16))(result, v7);
LABEL_8:
    v4 = 0;
  }
  v24 = v26;
  v15 = v27;
  v26 = 0;
  v27 = 0;
  v25 = v15;
  WTF::URL::URL(a2, (uint64_t *)&v19);
  *(_BYTE *)(a2 + 40) = v22;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)v23;
  v23[0] = 0;
  *(_QWORD *)(a2 + 64) = v24;
  v16 = v25;
  v24 = 0;
  v25 = 0;
  *(_QWORD *)(a2 + 72) = v16;
  *(_BYTE *)(a2 + 80) = 1;
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v17);
  v18 = v23[0];
  v23[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v7);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_23:
  if (v28)
    result = (WTF::StringImpl *)WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v7);
  if (v30)
  {
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v34)
  {
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_196D95058(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,WTF::StringImpl *a23,char a24)
{
  uint64_t v24;
  WTF::StringImpl *v26;

  if (*(_BYTE *)(v24 - 56))
  {
    v26 = *(WTF::StringImpl **)(v24 - 96);
    *(_QWORD *)(v24 - 96) = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, a2);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

char *IPC::ArgumentCoder<WebCore::ResourceLoadStatistics,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *result;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *(_BYTE *)(a2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  v7 = *(_BYTE *)(a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v7;
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 72));
  v8 = *(_BYTE *)(a2 + 80);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v8;
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 88));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 96));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 104));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 112));
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 120));
  v9 = *(_BYTE *)(a2 + 128);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v9;
  v10 = *(_BYTE *)(a2 + 129);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v10;
  v11 = *(_DWORD *)(a2 + 132);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v11;
  v12 = *(_DWORD *)(a2 + 136);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v12;
  v13 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v13;
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 144));
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (_QWORD **)(a2 + 152));
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (_QWORD **)(a2 + 160));
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (_QWORD **)(a2 + 168));
  LOBYTE(v13) = *(_BYTE *)(a2 + 176);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v13;
  v14 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v14;
  v15 = *(_QWORD *)(a2 + 192);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v15;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::decode(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  int v8;
  int v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  int v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  char v46;
  unsigned int v47;
  char v48;
  uint64_t *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v25 = 0;
    v26 = 0;
    *a1 = 0;
    a1[1] = 0;
    v27 = a1[3];
    if (v27)
    {
      v55 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        a1 = v55;
        v26 = *v55;
        v25 = v55[1];
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
    }
    goto LABEL_26;
  }
  v4 = (unsigned __int8 *)(v2 + v3);
  v5 = v2 + v3 + 1;
  a1[2] = v5;
  if (!v2)
    goto LABEL_64;
  v6 = *v4;
  if (v6 < 2)
  {
    v7 = 0;
    v8 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    v29 = a1[3];
    if (!v29)
    {
      v9 = 0;
      v2 = 0;
      v7 = 1;
      goto LABEL_30;
    }
    v47 = v6;
    v53 = a1;
    if (!v1)
    {
      v9 = 0;
      v29 = 0;
      v2 = 0;
      v7 = 1;
LABEL_30:
      *a1 = 0;
      a1[1] = 0;
      v30 = a1[3];
      if (v30)
      {
        v38 = v9;
        v46 = v7;
        v52 = a1;
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v30 + 16))(v30, v2, v29);
          v13 = 0;
          a1 = v52;
          v2 = *v52;
          v1 = v52[1];
        }
        else
        {
          v1 = 0;
          v2 = 0;
          v13 = 0;
        }
        v7 = v46;
        v9 = v38;
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v13 = 0;
      }
      goto LABEL_32;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v2);
    v8 = 0;
    a1 = v53;
    v2 = *v53;
    v1 = v53[1];
    v7 = 1;
    v5 = v53[2];
    v6 = v47;
LABEL_5:
    if (v6)
      v9 = v8;
    else
      v9 = 0;
    v10 = v5 - v2;
    if (v1 <= v10)
    {
      v39 = v9;
      v48 = v7;
      v29 = 0;
      v32 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      v56 = a1;
      if (v32 && v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
        a1 = v56;
        v2 = *v56;
        v29 = v56[1];
      }
      else
      {
        v2 = 0;
      }
      v7 = v48;
      v9 = v39;
      goto LABEL_30;
    }
    v11 = (unsigned __int8 *)(v2 + v10);
    v12 = v2 + v10 + 1;
    a1[2] = v12;
    if (!v2)
    {
      v29 = v1;
      goto LABEL_30;
    }
    v13 = *v11;
    if (v13 < 2)
    {
      v14 = 0;
      v15 = 1;
      goto LABEL_12;
    }
LABEL_32:
    *a1 = 0;
    a1[1] = 0;
    v31 = a1[3];
    if (!v31)
    {
      v15 = 0;
      v2 = 0;
      goto LABEL_34;
    }
    v37 = v9;
    v43 = v13;
    v45 = v7;
    v51 = a1;
    if (!v1)
    {
      v15 = 0;
      v31 = 0;
      v2 = 0;
LABEL_34:
      *a1 = 0;
      a1[1] = 0;
      v18 = a1[3];
      if (v18)
      {
        v36 = v15;
        v42 = v13;
        v50 = a1;
        if (v31)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v18 + 16))(v18, v2, v31);
          LODWORD(v18) = 0;
          a1 = v50;
          v2 = *v50;
          v1 = v50[1];
        }
        else
        {
          v1 = 0;
          v2 = 0;
          LODWORD(v18) = 0;
        }
        v15 = v36;
        v13 = v42;
      }
      else
      {
        v1 = 0;
        v2 = 0;
      }
      goto LABEL_36;
    }
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v2);
    v15 = 0;
    a1 = v51;
    v2 = *v51;
    v1 = v51[1];
    v14 = 1;
    v12 = v51[2];
    v7 = v45;
    v9 = v37;
    v13 = v43;
LABEL_12:
    v16 = v12 - v2;
    if (v1 <= v16)
    {
      v40 = v15;
      v44 = v13;
      v31 = 0;
      v33 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      v57 = a1;
      if (v33 && v1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        a1 = v57;
        v2 = *v57;
        v31 = v57[1];
      }
      else
      {
        v2 = 0;
      }
      v15 = v40;
      v13 = v44;
      goto LABEL_34;
    }
    v17 = (unsigned __int8 *)(v2 + v16);
    a1[2] = v17 + 1;
    if (!v2)
    {
      v31 = v1;
      goto LABEL_34;
    }
    LODWORD(v18) = *v17;
    if (v18 <= 1)
    {
      if ((v7 & 1) == 0 && !v14)
      {
        v19 = 0x1000000;
        LOBYTE(v20) = 1;
        goto LABEL_18;
      }
      goto LABEL_63;
    }
LABEL_36:
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (!v20)
    {
      v9 = 0;
      v19 = 0;
      goto LABEL_18;
    }
    v34 = v18;
    v35 = v15;
    v41 = v13;
    v49 = a1;
    if (!v1)
      break;
    a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v2);
    v20 = *v49;
    if (!*v49)
      goto LABEL_40;
LABEL_63:
    __break(1u);
LABEL_64:
    v25 = v1;
    v26 = v2;
LABEL_26:
    *a1 = 0;
    a1[1] = 0;
    v28 = a1[3];
    if (v28)
    {
      v54 = a1;
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v28 + 16))(v28, v26, v25);
        v6 = 0;
        a1 = v54;
        v2 = *v54;
        v1 = v54[1];
      }
      else
      {
        v1 = 0;
        v2 = 0;
        v6 = 0;
      }
    }
    else
    {
      v1 = 0;
      v2 = 0;
      v6 = 0;
    }
  }
  LOBYTE(v20) = 0;
LABEL_40:
  v9 = 0;
  v19 = 0;
  v15 = v35;
  v13 = v41;
  LODWORD(v18) = v34;
LABEL_18:
  v21 = v13 != 0;
  if ((v20 & ((_DWORD)v18 != 0)) != 0)
    v22 = 0x10000;
  else
    v22 = 0;
  if ((v15 & v21) != 0)
    v23 = 256;
  else
    v23 = 0;
  return v9 | v19 | v22 | v23;
}

char *IPC::ArgumentCoder<WebKit::WebsitePoliciesData,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t *v2;
  __int16 v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>(a1, (_QWORD **)a2);
  IPC::VectorArgumentCoder<false,WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 1));
  IPC::VectorArgumentCoder<false,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(v2 + 3));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2 + 8);
  v4 = *((_WORD *)v2 + 36);
  *(_WORD *)IPC::Encoder::grow(a1, 2uLL, 2) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 74);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 80);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>(a1, (_QWORD **)v2 + 11);
  LOBYTE(v4) = *((_BYTE *)v2 + 96);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 97);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 98);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 99);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 100);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 101);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 102);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 103);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 104);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 105);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 106);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 107);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 108);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)v2 + 109);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 110);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::CallbackID,void>::decode@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!*a1)
  {
LABEL_5:
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  if (v5)
  {
    if ((unint64_t)(result - 1) < 0xFFFFFFFFFFFFFFFELL)
    {
      *(_QWORD *)a2 = result;
      a2[8] = 1;
      return result;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void IPC::ArgumentCoder<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&>(IPC::Encoder *this, _QWORD **a2)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  if (*a2)
    v4 = *((_DWORD *)*a2 - 3);
  else
    v4 = 0;
  *(_DWORD *)IPC::Encoder::grow(this, 4uLL, 4) = v4;
  v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
  v6 = v5;
  v8 = v7;
  if (*a2)
    v9 = (uint64_t)&(*a2)[3 * *((unsigned int *)*a2 - 1)];
  else
    v9 = 0;
  if ((uint64_t *)v9 != v5)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)this, v6);
      IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(this, (uint64_t)(v6 + 1));
      while (1)
      {
        v6 += 3;
        if (v6 == v8)
          break;
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_13;
      }
      v6 = v8;
LABEL_13:
      ;
    }
    while (v6 != (uint64_t *)v9);
  }
}

IPC::Encoder *IPC::Connection::sendSync<Messages::NetworkStorageManager::ConnectToStorageAreaSync>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  IPC::Encoder *v18;
  uint64_t v19;
  _QWORD v20[3];
  char v21;

  v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3533, 0, &v19, (uint64_t *)&v18);
  IPC::ArgumentCoder<std::tuple<WebCore::StorageType const&,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ClientOrigin const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::StorageType const&,WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::StorageNamespaceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WebCore::ClientOrigin const&>,0ul,1ul,2ul,3ul>(v18, a3);
  IPC::Connection::sendSyncMessage(a2, v19, (uint64_t *)&v18, 0, (uint64_t)&v16, INFINITY);
  v6 = v17;
  if (v17)
  {
    if (v17 == 1)
    {
      *(_BYTE *)a1 = (_BYTE)v16;
LABEL_7:
      *(_DWORD *)(a1 + 32) = v6;
LABEL_8:
      ((void (*)(_QWORD *, uint64_t **))off_1E34F2318[v6])(v20, &v16);
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,unsigned long long>>(v20, v16);
  if (v21)
  {
    if (!v17)
    {
      v8 = v20[0];
      v9 = v20[1];
      v10 = v20[2];
      v11 = v16;
      v16 = 0;
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = v10;
      goto LABEL_7;
    }
LABEL_14:
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Connection::send<Messages::NetworkConnectionToWebProcess::SetResourceLoadSchedulingMode>(v15);
  }
  *(_BYTE *)a1 = 13;
  *(_DWORD *)(a1 + 32) = 1;
  v6 = v17;
  if (v17 != -1)
    goto LABEL_8;
LABEL_9:
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkConnectionToWebProcess::SetResourceLoadSchedulingMode>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 271;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::LoadSchedulingMode>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::LoadSchedulingMode>,0ul,1ul>((IPC::Encoder *)v4, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

unsigned __int8 ***IPC::Connection::dispatchDidReceiveInvalidMessage(uint64_t a1, __int16 a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unsigned __int8 **v11;
  __int16 v12;
  uint64_t v13;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, (unsigned __int8 **)a1);
  v12 = a2;
  v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 80);
    v7 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v7 = off_1E351EE80;
    v8 = v11;
    v11 = 0;
    *(_QWORD *)(v7 + 8) = v8;
    *(_WORD *)(v7 + 16) = v12;
    v13 = v7;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v13);
    v9 = v13;
    v13 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  os_unfair_lock_unlock(v4);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v11);
}

void IPC::Connection::removeMessageReceiveQueue(uint64_t a1, unsigned __int8 *a2)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  IPC::MessageReceiveQueueMap::remove((uint64_t *)(a1 + 144), a2);
  os_unfair_lock_unlock(v4);
}

uint64_t API::IconLoadingClient::getLoadDecisionForIcon(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void API::NavigationAction::~NavigationAction(API::NavigationAction *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 358);
  *((_QWORD *)this + 358) = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  WebKit::NavigationActionData::~NavigationActionData((API::NavigationAction *)((char *)this + 304));
  v4 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (const void *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::NavigationAction *)((char *)this + 40));
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
}

{
  API::NavigationAction::~NavigationAction(this);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t *API::WebsitePolicies::data@<X0>(API::WebsitePolicies *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t *result;

  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)a2, (_QWORD **)this + 3);
  WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2 + 8, (uint64_t)this + 32);
  WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2 + 24, (uint64_t)this + 48);
  v4 = (_DWORD *)*((_QWORD *)this + 8);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a2 + 40) = v4;
  v5 = (_DWORD *)*((_QWORD *)this + 9);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a2 + 48) = v5;
  v6 = (_DWORD *)*((_QWORD *)this + 10);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a2 + 56) = v6;
  v7 = (_DWORD *)*((_QWORD *)this + 11);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a2 + 64) = v7;
  *(_WORD *)(a2 + 72) = *((_WORD *)this + 48);
  *(_BYTE *)(a2 + 74) = *((_BYTE *)this + 98);
  *(_BYTE *)(a2 + 80) = *((_BYTE *)this + 104);
  result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(a2 + 88), (_QWORD **)this + 14);
  *(_QWORD *)(a2 + 96) = *((_QWORD *)this + 15);
  *(_QWORD *)(a2 + 103) = *(_QWORD *)((char *)this + 127);
  return result;
}

void sub_196D96388(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a10 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_196D96688(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_196D967A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(unsigned __int8 **)(a10 + 8));
  _Unwind_Resume(exception_object);
}

void sub_196D96A4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_BYTE *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_196D96C50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_BYTE *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_196D96D94(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

unint64_t __muloti4(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v8;
  unsigned __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *a5 = 0;
  if (!(a1 | a2 ^ 0x8000000000000000))
  {
    if (a3 <= 1)
      return a3 * a1;
    goto LABEL_13;
  }
  if (!(a3 | a4 ^ 0x8000000000000000))
  {
    if (a1 <= 1)
      return a3 * a1;
    goto LABEL_13;
  }
  v8 = a2 >> 63;
  v9 = __PAIR128__((a2 >> 63) ^ (unint64_t)a2, (a2 >> 63) ^ a1) - __PAIR128__(v8, v8);
  v10 = a4 >> 63;
  if ((__int128)(__PAIR128__((a2 >> 63) ^ (unint64_t)a2, (a2 >> 63) ^ a1) - __PAIR128__(v8, v8)) >= 2
    && (__int128)(__PAIR128__((a4 >> 63) ^ (unint64_t)a4, (a4 >> 63) ^ a3) - __PAIR128__(v10, v10)) >= 2)
  {
    if (v8 == v10)
    {
      v11 = __udivti3();
      if (__PAIR128__(v12, v11) >= v9)
        return a3 * a1;
      goto LABEL_13;
    }
    v13 = __udivti3();
    if (__PAIR128__(v14, v13) < v9)
LABEL_13:
      *a5 = 1;
  }
  return a3 * a1;
}

void API::CustomHeaderFields::~CustomHeaderFields(API::CustomHeaderFields *this, void *a2)
{
  char *v2;
  void *v3;

  v2 = (char *)this + 16;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2);
  WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2, v3);
}

{
  char *v2;
  void *v3;

  v2 = (char *)this + 16;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2);
  WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2, v3);
  JUMPOUT(0x19AEB936CLL);
}

void sub_196D97850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v9;
  void *v11;

  _Block_release(v9);
  WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_196D97928(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, CFTypeRef cf)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

void sub_196D979E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_196D97B10(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a12, a2);
  _Unwind_Resume(a1);
}

BOOL WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(_BOOL8 result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (!a3)
    return 1;
  v3 = *(unsigned int *)(result + 4);
  if (a3 > v3)
    return 0;
  v4 = *(_QWORD *)(result + 8);
  if ((*(_BYTE *)(result + 16) & 4) != 0)
  {
    v5 = 0;
    v6 = 0;
    while (v3 != v6)
    {
      if ((*(unsigned __int8 *)(v4 + v6) | 0x20) == *(unsigned __int8 *)(a2 + v6))
      {
        v5 = ++v6 >= a3;
        if (a3 != v6)
          continue;
      }
      return v5;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
    while (v3 != v7)
    {
      if ((*(unsigned __int16 *)(v4 + 2 * v7) | 0x20) == (unsigned __int16)*(char *)(a2 + v7))
      {
        v5 = ++v7 >= a3;
        if (a3 != v7)
          continue;
      }
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderField>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (uint64_t *)WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *v3;
  *v3 = 0;
  *v6 = v7;
  v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

unint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x196D97DACLL);
    }
    v4 = *(WTF::StringImpl **)a1;
    v5 = (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
    v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::HTTPHeaderField>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::HTTPHeaderField>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (result != a2)
  {
    v5 = (WTF::StringImpl **)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      *a3 = v6;
      v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      v8 = v5[1];
      v5[1] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 += 2;
      a3 += 2;
    }
    while (v5 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t API::ObjectImpl<(API::Object::Type)53>::type()
{
  return 53;
}

void API::ResourceLoadStatisticsFirstParty::~ResourceLoadStatisticsFirstParty(WTF::StringImpl **this)
{
  WTF::RunLoop *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v2 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) != 0)
  {
    v4 = this[2];
    this[2] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
}

{
  API::ResourceLoadStatisticsFirstParty::~ResourceLoadStatisticsFirstParty(this);
  JUMPOUT(0x19AEB936CLL);
}

void sub_196D98710(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  v4 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196D988D8(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void API::ResourceLoadStatisticsThirdParty::~ResourceLoadStatisticsThirdParty(WTF::StringImpl **this)
{
  WTF::RunLoop *v2;
  void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) != 0)
  {
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 3), v3);
    v5 = this[2];
    this[2] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
}

{
  API::ResourceLoadStatisticsThirdParty::~ResourceLoadStatisticsThirdParty(this);
  JUMPOUT(0x19AEB936CLL);
}

void sub_196D9898C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 24, a2);
  v5 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::ITPThirdPartyDataForSpecificFirstParty>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::ITPThirdPartyDataForSpecificFirstParty>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)95>::type()
{
  return 95;
}

void sub_196D98DB0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_196D98EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_196D98FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void sub_196D990C8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_196D99168(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_196D99234(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

void sub_196D99304(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_196D993D0(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

void sub_196D995B4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t initBKSHIDEventSetDigitizerInfo(__IOHIDEvent *a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFString *a5, double a6, float a7)
{
  void *v14;
  uint64_t (*v15)(__IOHIDEvent *, unsigned int, unsigned __int8, unsigned __int8, const __CFString *, double, float);

  if (byte_1ECE71C71 == 1)
  {
    v14 = (void *)qword_1ECE71C80;
  }
  else
  {
    v14 = dlopen("/System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices", 2);
    if (!v14)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x196D99944);
    }
    qword_1ECE71C80 = (uint64_t)v14;
    byte_1ECE71C71 = 1;
  }
  v15 = (uint64_t (*)(__IOHIDEvent *, unsigned int, unsigned __int8, unsigned __int8, const __CFString *, double, float))dlsym(v14, "BKSHIDEventSetDigitizerInfo");
  softLinkBKSHIDEventSetDigitizerInfo = v15;
  if (!v15)
    goto LABEL_8;
  return v15(a1, a2, a3, a4, a5, a6, a7);
}

void sub_196D99C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196D99D08(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

id WebKit::WebExtension::wrapper(id *this)
{
  return this[1];
}

void sub_196D99F04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196D99FD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_196D9A140(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196D9A350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196D9A440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196D9A56C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_196D9A68C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196D9A8E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  if (a10)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a10, a2);
  _Unwind_Resume(exception_object);
}

void sub_196D9ABB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9ACC4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196D9AD7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196D9AE28(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionAction::presentsPopup(WebKit::WebExtensionAction *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  int v3;
  _BOOL8 v4;
  WTF::StringImpl *v6;

  WebKit::WebExtensionAction::popupPath(this, &v6);
  v2 = v6;
  if (!v6)
    return 0;
  v3 = *(_DWORD *)v6;
  v4 = *((_DWORD *)v6 + 1) != 0;
  v6 = 0;
  if (v3 == 2)
    WTF::StringImpl::destroy(v2, v1);
  else
    *(_DWORD *)v2 = v3 - 2;
  return v4;
}

void sub_196D9B000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196D9B0AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9B1E4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  void *v14;
  void *v15;
  void *v16;

  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void sub_196D9B3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_196D9B4E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196D9B58C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196D9B758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9B8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196D9BD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_196D9BF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_196D9C01C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196D9C09C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10)
{
  if (a10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  _Unwind_Resume(exception_object);
}

void sub_196D9C1A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9C234(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_196D9C2C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id toAPI(_QWORD **a1)
{
  uint64_t v2;
  void *v3;
  const WTF::WallTime *v4;
  const WTF::WallTime *v5;
  const WTF::WallTime *v6;
  const WTF::WallTime *v7;
  uint64_t v8;
  void *v9;
  __CFString *v10;
  void *v11;

  if (*a1)
    v2 = *((unsigned int *)*a1 - 3);
  else
    v2 = 0;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (const WTF::WallTime *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a1);
  v6 = v4;
  v7 = v5;
  if (*a1)
    v8 = (uint64_t)&(*a1)[2 * *((unsigned int *)*a1 - 1)];
  else
    v8 = 0;
  if ((const WTF::WallTime *)v8 != v4)
  {
    do
    {
      WebKit::toAPI((const WTF::WallTime *)((char *)v6 + 8), v5);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (*(_QWORD *)v6)
        v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v10 = &stru_1E351F1B8;
      objc_msgSend(v3, "setObject:forKey:", v9, v10);

      while (1)
      {
        v6 = (const WTF::WallTime *)((char *)v6 + 16);
        if (v6 == v7)
          break;
        if ((unint64_t)(*(_QWORD *)v6 + 1) > 1)
          goto LABEL_15;
      }
      v6 = v7;
LABEL_15:
      ;
    }
    while (v6 != (const WTF::WallTime *)v8);
  }
  v11 = (void *)objc_msgSend(v3, "copy");

  return v11;
}

{
  uint64_t v2;
  void *v3;
  id **v4;
  const WTF::WallTime *v5;
  id **v6;
  id **v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;

  if (*a1)
    v2 = *((unsigned int *)*a1 - 3);
  else
    v2 = 0;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (id **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a1);
  v6 = v4;
  v7 = (id **)v5;
  if (*a1)
    v8 = (uint64_t)&(*a1)[2 * *((unsigned int *)*a1 - 1)];
  else
    v8 = 0;
  if ((id **)v8 != v4)
  {
    do
    {
      WebKit::toAPI((WebKit *)(v6 + 1), v5);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = WebKit::WebExtension::wrapper(*v6);
      objc_msgSend(v3, "setObject:forKey:", v9, v10);

      while (1)
      {
        v6 += 2;
        if (v6 == v7)
          break;
        if ((unint64_t)*v6 + 1 > 1)
          goto LABEL_13;
      }
      v6 = v7;
LABEL_13:
      ;
    }
    while (v6 != (id **)v8);
  }
  v11 = (void *)objc_msgSend(v3, "copy");

  return v11;
}

void sub_196D9C450(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196D9C544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void toImpl(uint64_t *a1, void *a2)
{
  id v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  WTF::StringImpl **(*v13)(uint64_t, WTF::StringImpl *);
  void *v14;
  WTF::StringImpl **v15;

  v3 = a2;
  v9 = 0;
  v10 = &v9;
  v11 = 0x3812000000;
  v12 = __Block_byref_object_copy_;
  v13 = __Block_byref_object_dispose_;
  v14 = &unk_197A0BBD2;
  v15 = 0;
  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(objc_msgSend(v3, "count"));
  if (v4 <= 8)
    v5 = 8;
  else
    v5 = v4;
  v6 = WTF::fastMalloc((WTF *)(16 * v5 + 16));
  bzero((void *)(v6 + 16), 16 * v5);
  v15 = (WTF::StringImpl **)(v6 + 16);
  *(_DWORD *)(v6 + 12) = v5;
  *((_DWORD *)v15 - 2) = v5 - 1;
  *((_DWORD *)v15 - 4) = 0;
  *((_DWORD *)v15 - 3) = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZL6toImplP12NSDictionaryIP8NSStringP6NSDateE_block_invoke;
  v8[3] = &unk_1E34AAB60;
  v8[4] = &v9;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v8);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(a1, (_QWORD **)v10 + 6);
  _Block_object_dispose(&v9, 8);
  if (v15)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v15, v7);

}

{
  id v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t *(*v13)(uint64_t, void *);
  void *v14;
  uint64_t *v15;

  v3 = a2;
  v9 = 0;
  v10 = &v9;
  v11 = 0x3812000000;
  v12 = __Block_byref_object_copy__381;
  v13 = __Block_byref_object_dispose__382;
  v14 = &unk_197A0BBD2;
  v15 = 0;
  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(objc_msgSend(v3, "count"));
  if (v4 <= 8)
    v5 = 8;
  else
    v5 = v4;
  v6 = WTF::fastMalloc((WTF *)(16 * v5 + 16));
  bzero((void *)(v6 + 16), 16 * v5);
  v15 = (uint64_t *)(v6 + 16);
  *(_DWORD *)(v6 + 12) = v5;
  *((_DWORD *)v15 - 2) = v5 - 1;
  *((_DWORD *)v15 - 4) = 0;
  *((_DWORD *)v15 - 3) = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZL6toImplP12NSDictionaryIP27_WKWebExtensionMatchPatternP6NSDateE_block_invoke;
  v8[3] = &unk_1E34AAB88;
  v8[4] = &v9;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v8);
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable(a1, (_QWORD **)v10 + 6);
  _Block_object_dispose(&v9, 8);
  if (v15)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v15, v7);

}

void sub_196D9C6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl **a20)
{
  void *v20;
  WTF::StringImpl *v22;

  _Block_object_dispose(&a14, 8);
  if (a20)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a20, v22);

  _Unwind_Resume(a1);
}

void sub_196D9C80C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196D9C900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9CA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20)
{
  void *v20;
  void *v22;

  _Block_object_dispose(&a14, 8);
  if (a20)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a20, v22);

  _Unwind_Resume(a1);
}

void sub_196D9CB90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9CCC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9CE24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::currentPermissions@<X0>(WebKit::WebExtensionContext *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD **v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (_QWORD **)((char *)this + 144);
  WebKit::WebExtensionContext::removeExpired((uint64_t)this, (uint64_t *)this + 18, (double *)this + 20, CFSTR("_WKWebExtensionContextGrantedPermissionsWereRemoved"));
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4);
  v7 = *((_QWORD *)this + 18);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = v7 + 16 * v8;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  *a2 = v4;
  a2[1] = result;
  a2[2] = v6;
  a2[3] = v9;
  a2[4] = v7 + 16 * v8;
  return result;
}

void sub_196D9CFA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebExtensionContext::currentPermissionMatchPatterns@<X0>(WebKit::WebExtensionContext *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD **v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (_QWORD **)((char *)this + 176);
  WebKit::WebExtensionContext::removeExpired(this, (uint64_t *)this + 22, (double *)this + 24, CFSTR("_WKWebExtensionContextGrantedPermissionMatchPatternsWereRemoved"));
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v4);
  v7 = *((_QWORD *)this + 22);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = v7 + 16 * v8;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  *a2 = v4;
  a2[1] = result;
  a2[2] = v6;
  a2[3] = v9;
  a2[4] = v7 + 16 * v8;
  return result;
}

void sub_196D9D0F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9D2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_196D9D404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9D5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_196D9D710(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9D904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_196D9DA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196D9DC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

double toImpl(NSDate *a1)
{
  NSDate *v1;
  NSDate *v2;
  double v3;
  WebKit *v4;
  NSDate *v5;
  void *v7;
  void *v8;

  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "WallTime toImpl(NSDate *__strong)");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("_WKWebExtensionContext.mm"), 187, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("!date || [date isKindOfClass:NSDate.class]"));

    }
    v3 = WebKit::toImpl((WebKit *)v1, v2);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
    v4 = (WebKit *)objc_claimAutoreleasedReturnValue();
    v3 = WebKit::toImpl(v4, v5);

  }
  return v3;
}

void sub_196D9DD6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_196D9DE54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9E048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_196D9E1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196D9E36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_196D9E478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9E648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196D9E7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196D9E920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_196D9EA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_196D9EB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);

  _Unwind_Resume(a1);
}

void sub_196D9ECA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9EDE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9EF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;

  _Unwind_Resume(a1);
}

id WTF::RetainPtr<NSMutableArray>::get(id *a1)
{
  return *a1;
}

void sub_196D9F01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196D9F0F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9F1DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9F2D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9F3F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9F4D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9F5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v11;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_196D9F770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v11;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_196D9F874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9F970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9FA88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9FB8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9FC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196D9FE70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196D9FF94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void toImpl(uint64_t *a1, void *a2, uint64_t *a3)
{
  id v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int i;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  *a1 = 0;
  v43 = v5;
  v6 = objc_msgSend(v5, "count");
  v7 = (v6 - 1) | ((v6 - 1) >> 1) | (((v6 - 1) | ((v6 - 1) >> 1)) >> 2);
  v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
  v9 = (v8 | HIWORD(v8)) + 1;
  if (v9 > 0x400)
  {
    if (v9 > 2 * (unint64_t)v6)
      goto LABEL_6;
  }
  else if (3 * v9 > 4 * (unint64_t)v6)
  {
LABEL_4:
    v10 = (double)v6;
    v11 = (double)v9;
    v12 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v9) = 2 * v9;
  if (v9 <= 0x400)
    goto LABEL_4;
LABEL_6:
  v10 = (double)v6;
  v11 = (double)v9;
  v12 = 0.416666667;
LABEL_7:
  if (v11 * v12 <= v10)
    LODWORD(v9) = 2 * v9;
  if (v9 <= 8)
    v13 = 8;
  else
    v13 = v9;
  v14 = WTF::fastZeroedMalloc((WTF *)(8 * v13 + 16));
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v15 = v43;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v46;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v46 != v17)
          objc_enumerationMutation(v15);
        v19 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * v18);
        if ((objc_msgSend(v19, "conformsToProtocol:", &unk_1EE3C72A0) & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "WebKit::WebExtensionContext::TabSet toImpl(NSSet<id<_WKWebExtensionTab>> *__strong, WebKit::WebExtensionContext &)");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "handleFailureInFunction:file:lineNumber:description:", v40, CFSTR("_WKWebExtensionContext.mm"), 724, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("[tab conformsToProtocol:@protocol(_WKWebExtensionTab)]"));

        }
        WebKit::WebExtensionContext::getOrCreateTab(a3, v19, (uint64_t)&v44);
        v20 = *a1;
        if (*a1
          || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::expand(a1, 0), (v20 = *a1) != 0))
        {
          v21 = *(_DWORD *)(v20 - 8);
        }
        else
        {
          v21 = 0;
        }
        v22 = 0;
        v23 = v44;
        v24 = (~(v44 << 32) + v44) ^ ((unint64_t)(~(v44 << 32) + v44) >> 22);
        v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
        v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
        v27 = (v26 >> 31) ^ v26;
        for (i = 1; ; ++i)
        {
          v29 = v27 & v21;
          v30 = (uint64_t *)(v20 + 8 * v29);
          v31 = *v30;
          if (*v30 == -1)
          {
            v22 = (uint64_t *)(v20 + 8 * v29);
            goto LABEL_28;
          }
          if (!v31)
            break;
          if (v31 == v44)
            goto LABEL_42;
LABEL_28:
          v27 = i + v29;
        }
        if (v22)
        {
          *v22 = 0;
          --*(_DWORD *)(*a1 - 16);
          v23 = v44;
          v30 = v22;
        }
        v44 = 0;
        v32 = *v30;
        *v30 = v23;
        if (v32)
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v32);
        v33 = *a1;
        if (*a1)
          v34 = *(_DWORD *)(v33 - 12) + 1;
        else
          v34 = 1;
        *(_DWORD *)(v33 - 12) = v34;
        v35 = *a1;
        if (*a1)
          v36 = *(_DWORD *)(v35 - 12);
        else
          v36 = 0;
        v37 = (*(_DWORD *)(v35 - 16) + v36);
        v38 = *(unsigned int *)(v35 - 4);
        if (v38 > 0x400)
        {
          if (v38 <= 2 * v37)
LABEL_41:
            WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::expand(a1, v30);
        }
        else if (3 * v38 <= 4 * v37)
        {
          goto LABEL_41;
        }
LABEL_42:
        v39 = v44;
        v44 = 0;
        if (v39)
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v39);
        ++v18;
      }
      while (v18 != v16);
      v41 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
      v16 = v41;
    }
    while (v41);
  }

}

void sub_196DA0370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  uint64_t **v11;
  void *v12;
  void *v13;
  void *v15;

  if (*v11)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::deallocateTable(*v11, v15);

  _Unwind_Resume(a1);
}

void sub_196DA04B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DA0674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196DA0834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196DA0974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DA0A18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 48) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

WTF::StringImpl **__Block_byref_object_dispose_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **result;

  result = *(WTF::StringImpl ***)(a1 + 48);
  if (result)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  return result;
}

void ___ZL6toImplP12NSDictionaryIP8NSStringP6NSDateE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSDate *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  double v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  WTF::StringImpl **v17;
  int i;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  WTF::StringImpl *v35;

  v5 = a2;
  v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "WebKit::WebExtensionContext::PermissionsMap toImpl(NSDictionary<_WKWebExtensionPermission,NSDate *> *__strong)_block_invoke");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, CFSTR("_WKWebExtensionContext.mm"), 217, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("[permission isKindOfClass:NSString.class]"));

  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "WebKit::WebExtensionContext::PermissionsMap toImpl(NSDictionary<_WKWebExtensionPermission,NSDate *> *__strong)_block_invoke");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "handleFailureInFunction:file:lineNumber:description:", v34, CFSTR("_WKWebExtensionContext.mm"), 218, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("[date isKindOfClass:NSDate.class]"));

  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  MEMORY[0x19AEABCC8](&v35, v5);
  v10 = toImpl(v6);
  v13 = *(_QWORD *)(v7 + 48);
  v11 = (uint64_t *)(v7 + 48);
  v12 = v13;
  if (v13
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v11, 0), (v12 = *v11) != 0))
  {
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = *((_DWORD *)v35 + 4);
  if (v15 >= 0x100)
    v16 = v15 >> 8;
  else
    v16 = WTF::StringImpl::hashSlowCase(v35);
  v17 = 0;
  for (i = 1; ; ++i)
  {
    v19 = v16 & v14;
    v20 = (WTF::StringImpl **)(v12 + 16 * v19);
    v21 = *v20;
    if (*v20 == (WTF::StringImpl *)-1)
    {
      v17 = (WTF::StringImpl **)(v12 + 16 * v19);
      goto LABEL_17;
    }
    if (!v21)
      break;
    if (WTF::equal(v21, v35, v9))
    {
      *(double *)(v12 + 16 * v19 + 8) = v10;
      goto LABEL_33;
    }
LABEL_17:
    v16 = i + v19;
  }
  if (v17)
  {
    *v17 = 0;
    v17[1] = 0;
    --*(_DWORD *)(*v11 - 16);
    v20 = v17;
  }
  v22 = v35;
  v35 = 0;
  v23 = *v20;
  *v20 = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v8);
    else
      *(_DWORD *)v23 -= 2;
  }
  *((double *)v20 + 1) = v10;
  v24 = *v11;
  if (*v11)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *v11;
  if (*v11)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
LABEL_32:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v11, (uint64_t)v20);
  }
  else if (3 * v29 <= 4 * v28)
  {
    goto LABEL_32;
  }
LABEL_33:
  v30 = v35;
  v35 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v8);
    else
      *(_DWORD *)v30 -= 2;
  }

}

void sub_196DA0D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v14 = v7;
    v15 = v6;
    do
    {
      if (*(_QWORD *)v15 != -1)
      {
        if (*(_QWORD *)v15)
        {
          v16 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v15);
          v17 = *(WTF::StringImpl **)v16;
          *(_QWORD *)v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v10);
            else
              *(_DWORD *)v17 -= 2;
          }
          v18 = *(WTF::StringImpl **)v15;
          *(_QWORD *)v15 = 0;
          *(_QWORD *)v16 = v18;
          *(_QWORD *)(v16 + 8) = *(_QWORD *)(v15 + 8);
          v19 = *(WTF::StringImpl **)v15;
          *(_QWORD *)v15 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v10);
            else
              *(_DWORD *)v19 -= 2;
          }
          if (v15 == a3)
            v13 = v16;
        }
        else
        {
          *(_QWORD *)v15 = 0;
        }
      }
      v15 += 16;
      --v14;
    }
    while (v14);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *((_DWORD *)*a2 + 4);
  if (v4 >= 0x100)
    v5 = v4 >> 8;
  else
    v5 = WTF::StringImpl::hashSlowCase(*a2);
  v6 = 0;
  do
  {
    v7 = v5 & v3;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(v2 + 16 * v7));
  return v2 + 16 * v7;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v7 = 16 * v6;
      v8 = WTF::fastMalloc((WTF *)(v7 + 16));
      v9 = v8;
      v10 = v8 + 16;
      if (v6)
        bzero((void *)(v8 + 16), v7);
      *a1 = v10;
      *(_DWORD *)(v9 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v11 = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
      v12 = v11;
      v14 = v13;
      v15 = *a2 ? (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)] : 0;
      if ((WTF::StringImpl *)v15 != v11)
      {
        do
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = *(_DWORD *)(*(_QWORD *)v12 + 16);
          if (v18 >= 0x100)
            v19 = v18 >> 8;
          else
            v19 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v12);
          v20 = 0;
          do
          {
            v21 = v19 & v17;
            v19 = ++v20 + v21;
          }
          while (*(_QWORD *)(v16 + 16 * v21));
          v22 = v16 + 16 * v21;
          WTF::String::operator=((WTF::StringImpl **)v22, v12);
          *(_QWORD *)(v22 + 8) = *((_QWORD *)v12 + 1);
          while (1)
          {
            v12 = (WTF::StringImpl *)((char *)v12 + 16);
            if (v12 == v14)
              break;
            if ((unint64_t)(*(_QWORD *)v12 + 1) > 1)
              goto LABEL_22;
          }
          v12 = v14;
LABEL_22:
          ;
        }
        while (v12 != (WTF::StringImpl *)v15);
      }
    }
  }
  return a1;
}

uint64_t __Block_byref_object_copy__381(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 48) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t *__Block_byref_object_dispose__382(uint64_t a1, void *a2)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 48);
  if (result)
    return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(result, a2);
  return result;
}

void ___ZL6toImplP12NSDictionaryIP27_WKWebExtensionMatchPatternP6NSDateE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  NSDate *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;

  v32 = a2;
  v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "WebKit::WebExtensionContext::PermissionMatchPatternsMap toImpl(NSDictionary<_WKWebExtensionMatchPattern *,NSDate *> *__strong)_block_invoke");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, CFSTR("_WKWebExtensionContext.mm"), 231, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("[origin isKindOfClass:_WKWebExtensionMatchPattern.class]"));

  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "WebKit::WebExtensionContext::PermissionMatchPatternsMap toImpl(NSDictionary<_WKWebExtensionMatchPattern *,NSDate *> *__strong)_block_invoke");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "handleFailureInFunction:file:lineNumber:description:", v31, CFSTR("_WKWebExtensionContext.mm"), 232, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("[date isKindOfClass:NSDate.class]"));

  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = objc_msgSend(v32, "_webExtensionMatchPattern");
  CFRetain(*(CFTypeRef *)(v7 + 8));
  v8 = toImpl(v5);
  v11 = *(_QWORD *)(v6 + 48);
  v10 = (uint64_t *)(v6 + 48);
  v9 = v11;
  if (v11
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(v10, 0), (v9 = *v10) != 0))
  {
    v12 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
  v14 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v12;
    v20 = (uint64_t *)(v9 + 16 * v19);
    v21 = *v20;
    if (*v20 == -1)
    {
      v13 = (uint64_t *)(v9 + 16 * v19);
      goto LABEL_14;
    }
    if (!v21)
      break;
    if (v21 == v7)
    {
      *(double *)(v9 + 16 * v19 + 8) = v8;
      CFRelease(*(CFTypeRef *)(v7 + 8));
      goto LABEL_27;
    }
LABEL_14:
    v17 = i + v19;
  }
  if (v13)
  {
    *v13 = 0;
    v13[1] = 0;
    --*(_DWORD *)(*v10 - 16);
    *v13 = v7;
  }
  else
  {
    *v20 = v7;
    v13 = (uint64_t *)(v9 + 16 * v19);
  }
  *((double *)v13 + 1) = v8;
  v22 = *v10;
  if (*v10)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v10;
  if (*v10)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
LABEL_26:
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(v10, v13);
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_26;
  }
LABEL_27:

}

void sub_196DA1430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v14 = v7;
    v15 = (uint64_t *)v6;
    do
    {
      if (*v15 != -1)
      {
        if (*v15)
        {
          v16 = (_QWORD *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::lookupForReinsert(a1, v15);
          v17 = *v16;
          *v16 = 0;
          if (v17)
            CFRelease(*(CFTypeRef *)(v17 + 8));
          v18 = *v15;
          *v15 = 0;
          *v16 = v18;
          v16[1] = v15[1];
          v19 = *v15;
          *v15 = 0;
          if (v19)
            CFRelease(*(CFTypeRef *)(v19 + 8));
          if (v15 == a3)
            v13 = v16;
        }
        else
        {
          *v15 = 0;
        }
      }
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 16 * v9;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v7 = 16 * v6;
      v8 = WTF::fastMalloc((WTF *)(v7 + 16));
      v9 = v8;
      v10 = v8 + 16;
      if (v6)
        bzero((void *)(v8 + 16), v7);
      *a1 = v10;
      *(_DWORD *)(v9 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v11 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
      v12 = v11;
      v14 = v13;
      v15 = *a2 ? (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)] : 0;
      if ((_QWORD *)v15 != v11)
      {
        do
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = ~(*v12 << 32) + *v12;
          v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
          v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
          v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27)));
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          WTF::GenericHashTraits<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>::assignToEmpty<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime> const&>((uint64_t *)(v16 + 16 * v23), v12);
          while (1)
          {
            v12 += 2;
            if (v12 == v14)
              break;
            if ((unint64_t)(*v12 + 1) > 1)
              goto LABEL_19;
          }
          v12 = v14;
LABEL_19:
          ;
        }
        while (v12 != (_QWORD *)v15);
      }
    }
  }
  return a1;
}

void WTF::GenericHashTraits<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>::assignToEmpty<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime> const&>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  CFRetain(*(CFTypeRef *)(*a2 + 8));
  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  a1[1] = a2[1];
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
          CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (uint64_t *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          v14 = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::lookupForReinsert(a1, v13);
          v15 = *v14;
          *v14 = 0;
          if (v15)
            WTF::RefCounted<WebKit::WebExtensionTab>::deref(v15);
          v16 = *v13;
          *v13 = 0;
          *v14 = v16;
          v17 = *v13;
          *v13 = 0;
          if (v17)
            WTF::RefCounted<WebKit::WebExtensionTab>::deref(v17);
          if (v13 == a3)
            v11 = v14;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 8 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  return v2 + 8 * v9;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v5);
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::RefCounted<WebKit::WebExtensionTab>::deref(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;

  v1 = result;
  if (*(_DWORD *)result == 1)
  {
    v2 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = 0;
    if (v2)
      CFRelease(*(CFTypeRef *)(v2 + 8));
    objc_destroyWeak((id *)(v1 + 32));
    v4 = *(unsigned int **)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, v3);
      }
    }
    WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v1 + 8), v3);
    return WTF::fastFree((WTF *)v1, v7);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(NSError *)>,void,NSError * {__strong}>::~CallableWrapper(uint64_t a1)
{

  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(NSError *)>,void,NSError * {__strong}>::~CallableWrapper(id *a1)
{
  void *v2;

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(NSError *)>,void,NSError * {__strong}>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void WTF::addUnlessNil(WTF *this, NSMutableArray *a2, objc_object *a3)
{
  NSMutableArray *v4;
  WTF *v5;

  v5 = this;
  v4 = a2;
  if (v4)
    -[WTF addObject:](v5, "addObject:", v4);

}

void sub_196DA1C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::RefCounted<WebKit::WebExtensionWindow>::deref(uint64_t result)
{
  unsigned int **v1;
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  v1 = (unsigned int **)result;
  if (*(_DWORD *)result == 1)
  {
    objc_destroyWeak((id *)(result + 32));
    v3 = v1[3];
    v1[3] = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, v2);
      }
    }
    WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v1 + 1, v2);
    return WTF::fastFree((WTF *)v1, v6);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::RefCounted<WebKit::WebExtensionTab>::deref(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_196DA1EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));

  _Unwind_Resume(a1);
}

void API::Object::constructInWrapper<WebKit::WebExtensionController,WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>>(void *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;

  v5 = a1;
  v3 = objc_msgSend(v5, "_apiObject");
  v4 = *a2;
  *a2 = 0;
  v6 = v4;
  WebKit::WebExtensionController::WebExtensionController(v3, &v6);
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  *(_QWORD *)(v3 + 8) = v5;

}

void sub_196DA1F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionControllerConfiguration::createDefault@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *result;
  _BYTE v5[40];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = API::Object::newObject(0x40uLL, 115);
  *(_QWORD *)v3 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v3);
  *(_QWORD *)v3 = &off_1E34DC9C8;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  v5[0] = 0;
  v5[16] = 0;
  result = WebKit::WebExtensionControllerConfiguration::createStorageDirectoryPath((WTF::UUID *)v5);
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *a1 = v3;
  return result;
}

void sub_196DA20FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_196DA2194(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void sub_196DA2278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DA2360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DA2460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_196DA258C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_196DA275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  void *v10;
  void *v12;

  if (a10)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a10, v12);
  _Unwind_Resume(a1);
}

void sub_196DA289C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_196DA2A6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_196DA2CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_196DA2EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_196DA306C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196DA31A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196DA32E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196DA341C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196DA3564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196DA371C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_196DA3868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196DA39AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196DA3B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_196DA3D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_196DA3E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_196DA3FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v11;

  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_196DA40A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_196DA4240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

void sub_196DA42AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void sub_196DA43F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebExtensionControllerConfiguration::create@<X0>(WebKit::WebExtensionControllerConfiguration *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *result;
  __int128 v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = API::Object::newObject(0x40uLL, 115);
  *(_QWORD *)v5 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v5);
  *(_QWORD *)v5 = &off_1E34DC9C8;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)this;
  *(_BYTE *)(v5 + 32) = 0;
  v7 = *(_OWORD *)this;
  v8 = 1;
  result = WebKit::WebExtensionControllerConfiguration::createStorageDirectoryPath((WTF::UUID *)&v7);
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *a2 = v5;
  return result;
}

void sub_196DA4548(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void sub_196DA46DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

